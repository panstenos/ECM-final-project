

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 15:49:10 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 06/04/2022 GMT
    78                           ; 
    79                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112                           	psect	idataCOMRAM
   113   00234A                     __pidataCOMRAM:
   114                           	callstack 0
   115                           
   116                           ;initializer for _Black_setup
   117   00234A  0404               	dw	1028
   118   00234C  0000               	dw	0
   119   00234E  024B               	dw	587
   120   002350  0000               	dw	0
   121   002352  00A1               	dw	161
   122   002354  0000               	dw	0
   123                           
   124                           ;initializer for _wall_detection_counter
   125   002356  0014               	dw	20
   126                           
   127                           	psect	idataBANK0
   128   002084                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for _White_setup
   132   002084  28FC               	dw	10492
   133   002086  0000               	dw	0
   134   002088  1B55               	dw	6997
   135   00208A  0000               	dw	0
   136   00208C  0770               	dw	1904
   137   00208E  0000               	dw	0
   138                           
   139                           ;initializer for _Yellow_rule
   140   002090  005D               	dw	93
   141   002092  0000               	dw	0
   142   002094  004C               	dw	76
   143   002096  0000               	dw	0
   144   002098  0014               	dw	20
   145   00209A  0000               	dw	0
   146                           
   147                           ;initializer for _Blue_rule
   148   00209C  0003               	dw	3
   149   00209E  0000               	dw	0
   150   0020A0  0009               	dw	9
   151   0020A2  0000               	dw	0
   152   0020A4  0024               	dw	36
   153   0020A6  0000               	dw	0
   154                           
   155                           ;initializer for _Green_rule
   156   0020A8  0019               	dw	25
   157   0020AA  0000               	dw	0
   158   0020AC  0036               	dw	54
   159   0020AE  0000               	dw	0
   160   0020B0  0008               	dw	8
   161   0020B2  0000               	dw	0
   162                           
   163                           ;initializer for _Red_rule
   164   0020B4  0048               	dw	72
   165   0020B6  0000               	dw	0
   166   0020B8  0002               	dw	2
   167   0020BA  0000               	dw	0
   168   0020BC  0002               	dw	2
   169   0020BE  0000               	dw	0
   170                           
   171                           ;initializer for _twothirds
   172   0020C0  000B               	dw	11
   173                           
   174                           ;initializer for _halfback
   175   0020C2  0005               	dw	5
   176                           
   177                           ;initializer for _blockback
   178   0020C4  0010               	dw	16
   179                           
   180                           ;initializer for _blockahead
   181   0020C6  0010               	dw	16
   182                           
   183                           ;initializer for _wait_time
   184   0020C8  00DC               	dw	220
   185                           
   186                           ;initializer for _wall_coef
   187   0020CA  000F               	dw	15
   188                           
   189                           	psect	idataBANK1
   190   002220                     __pidataBANK1:
   191                           	callstack 0
   192                           
   193                           ;initializer for _White_rule
   194   002220  0064               	dw	100
   195   002222  0000               	dw	0
   196   002224  0064               	dw	100
   197   002226  0000               	dw	0
   198   002228  0064               	dw	100
   199   00222A  0000               	dw	0
   200                           
   201                           ;initializer for _Lightblue_rule
   202   00222C  0026               	dw	38
   203   00222E  0000               	dw	0
   204   002230  0048               	dw	72
   205   002232  0000               	dw	0
   206   002234  0054               	dw	84
   207   002236  0000               	dw	0
   208                           
   209                           ;initializer for _Orange_rule
   210   002238  005C               	dw	92
   211   00223A  0000               	dw	0
   212   00223C  0027               	dw	39
   213   00223E  0000               	dw	0
   214   002240  001C               	dw	28
   215   002242  0000               	dw	0
   216                           
   217                           ;initializer for _Pink_rule
   218   002244  004D               	dw	77
   219   002246  0000               	dw	0
   220   002248  003C               	dw	60
   221   00224A  0000               	dw	0
   222   00224C  0040               	dw	64
   223   00224E  0000               	dw	0
   224   000000                     _T0CON0bits	set	4053
   225   000000                     _T0CON1bits	set	4054
   226   000000                     _TRISDbits	set	3972
   227   000000                     _SSP2CON2bits	set	3802
   228   000000                     _SSP2CLKPPS	set	3612
   229   000000                     _SSP2DATPPS	set	3613
   230   000000                     _RC7PPS	set	3689
   231   000000                     _RE2PPS	set	3700
   232   000000                     _ANSELFbits	set	3764
   233   000000                     _TRISAbits	set	3969
   234   000000                     _TRISFbits	set	3974
   235   000000                     _PORTFbits	set	3982
   236   000000                     _TRISGbits	set	3975
   237   000000                     _TRISCbits	set	3971
   238   000000                     _TRISEbits	set	3973
   239   000000                     _SSP2BUF	set	3797
   240   000000                     _SSP2ADD	set	3798
   241   000000                     _SSP2CON1bits	set	3801
   242   000000                     _LATAbits	set	3961
   243   000000                     _LATGbits	set	3967
   244   000000                     _CCPR4H	set	3873
   245   000000                     _CCPR3H	set	3877
   246   000000                     _T2PR	set	4028
   247   000000                     _T2CONbits	set	4029
   248   000000                     _CCPR2H	set	4006
   249   000000                     _CCPR1H	set	4010
   250   000000                     _LATCbits	set	3963
   251   000000                     _LATEbits	set	3965
   252   000000                     _LATFbits	set	3966
   253   000000                     _RE4PPS	set	3702
   254   000000                     _RG6PPS	set	3720
   255   000000                     _RD5PPS	set	3695
   256   000000                     _ANSELDbits	set	3751
   257   000000                     _TMR0L	set	4051
   258   000000                     _TMR0H	set	4052
   259   000000                     _INTCONbits	set	4082
   260   000000                     _T2CLKCONbits	set	4031
   261   000000                     _T2HLTbits	set	4030
   262   000000                     _CCP1CONbits	set	4011
   263   000000                     _CCPTMRS0bits	set	4013
   264   000000                     _CCP2CONbits	set	4007
   265   000000                     _CCP3CONbits	set	3878
   266   000000                     _CCP4CONbits	set	3874
   267   000000                     _SSP2CON2	set	3802
   268   000000                     _SSP2STAT	set	3800
   269   000000                     _PIE0bits	set	3625
   270   000000                     _RD6PPS	set	3696
   271   000000                     _PIE2bits	set	3627
   272   000000                     _PIR0bits	set	3635
   273                           
   274                           ; #config settings
   275                           
   276                           	psect	cinit
   277   001A8A                     __pcinit:
   278                           	callstack 0
   279   001A8A                     start_initialization:
   280                           	callstack 0
   281   001A8A                     __initialization:
   282                           	callstack 0
   283                           
   284                           ; Initialize objects allocated to BANK1 (48 bytes)
   285                           ; load TBLPTR registers with __pidataBANK1
   286   001A8A  0E20               	movlw	low __pidataBANK1
   287   001A8C  6EF6               	movwf	tblptrl,c
   288   001A8E  0E22               	movlw	high __pidataBANK1
   289   001A90  6EF7               	movwf	tblptrh,c
   290   001A92  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   291   001A94  6EF8               	movwf	tblptru,c
   292   001A96  EE01  F078         	lfsr	0,__pdataBANK1
   293   001A9A  EE10 F030          	lfsr	1,48
   294   001A9E                     copy_data0:
   295   001A9E  0009               	tblrd		*+
   296   001AA0  CFF5 FFEE          	movff	tablat,postinc0
   297   001AA4  50E5               	movf	postdec1,w,c
   298   001AA6  50E1               	movf	fsr1l,w,c
   299   001AA8  E1FA               	bnz	copy_data0
   300                           
   301                           ; Initialize objects allocated to BANK0 (72 bytes)
   302                           ; load TBLPTR registers with __pidataBANK0
   303   001AAA  0E84               	movlw	low __pidataBANK0
   304   001AAC  6EF6               	movwf	tblptrl,c
   305   001AAE  0E20               	movlw	high __pidataBANK0
   306   001AB0  6EF7               	movwf	tblptrh,c
   307   001AB2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   308   001AB4  6EF8               	movwf	tblptru,c
   309   001AB6  EE00  F060         	lfsr	0,__pdataBANK0
   310   001ABA  EE10 F048          	lfsr	1,72
   311   001ABE                     copy_data1:
   312   001ABE  0009               	tblrd		*+
   313   001AC0  CFF5 FFEE          	movff	tablat,postinc0
   314   001AC4  50E5               	movf	postdec1,w,c
   315   001AC6  50E1               	movf	fsr1l,w,c
   316   001AC8  E1FA               	bnz	copy_data1
   317                           
   318                           ; Initialize objects allocated to COMRAM (14 bytes)
   319                           ; load TBLPTR registers with __pidataCOMRAM
   320   001ACA  0E4A               	movlw	low __pidataCOMRAM
   321   001ACC  6EF6               	movwf	tblptrl,c
   322   001ACE  0E23               	movlw	high __pidataCOMRAM
   323   001AD0  6EF7               	movwf	tblptrh,c
   324   001AD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   325   001AD4  6EF8               	movwf	tblptru,c
   326   001AD6  EE00  F039         	lfsr	0,__pdataCOMRAM
   327   001ADA  EE10 F00E          	lfsr	1,14
   328   001ADE                     copy_data2:
   329   001ADE  0009               	tblrd		*+
   330   001AE0  CFF5 FFEE          	movff	tablat,postinc0
   331   001AE4  50E5               	movf	postdec1,w,c
   332   001AE6  50E1               	movf	fsr1l,w,c
   333   001AE8  E1FA               	bnz	copy_data2
   334                           
   335                           ; Clear objects allocated to BANK2 (200 bytes)
   336   001AEA  EE02  F000         	lfsr	0,__pbssBANK2
   337   001AEE  0EC8               	movlw	200
   338   001AF0                     clear_0:
   339   001AF0  6AEE               	clrf	postinc0,c
   340   001AF2  06E8               	decf	wreg,f,c
   341   001AF4  E1FD               	bnz	clear_0
   342                           
   343                           ; Clear objects allocated to BANK1 (120 bytes)
   344   001AF6  EE01  F000         	lfsr	0,__pbssBANK1
   345   001AFA  0E78               	movlw	120
   346   001AFC                     clear_1:
   347   001AFC  6AEE               	clrf	postinc0,c
   348   001AFE  06E8               	decf	wreg,f,c
   349   001B00  E1FD               	bnz	clear_1
   350                           
   351                           ; Clear objects allocated to BANK0 (18 bytes)
   352   001B02  EE00  F0E6         	lfsr	0,__pbssBANK0
   353   001B06  0E12               	movlw	18
   354   001B08                     clear_2:
   355   001B08  6AEE               	clrf	postinc0,c
   356   001B0A  06E8               	decf	wreg,f,c
   357   001B0C  E1FD               	bnz	clear_2
   358                           
   359                           ; Clear objects allocated to COMRAM (8 bytes)
   360   001B0E  EE00  F047         	lfsr	0,__pbssCOMRAM
   361   001B12  0E08               	movlw	8
   362   001B14                     clear_3:
   363   001B14  6AEE               	clrf	postinc0,c
   364   001B16  06E8               	decf	wreg,f,c
   365   001B18  E1FD               	bnz	clear_3
   366   001B1A                     end_of_initialization:
   367                           	callstack 0
   368   001B1A                     __end_of__initialization:
   369                           	callstack 0
   370   001B1A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   371   001B1C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   372   001B1E  0100               	movlb	0
   373   001B20  EF71  F006         	goto	_main	;jump to C main() function
   374                           
   375                           	psect	bssCOMRAM
   376   000047                     __pbssCOMRAM:
   377                           	callstack 0
   378   000047                     _index:
   379                           	callstack 0
   380   000047                     	ds	2
   381   000049                     _seconds:
   382                           	callstack 0
   383   000049                     	ds	2
   384   00004B                     _clear2:
   385                           	callstack 0
   386   00004B                     	ds	2
   387   00004D                     _clear1:
   388                           	callstack 0
   389   00004D                     	ds	2
   390                           
   391                           	psect	dataCOMRAM
   392   000039                     __pdataCOMRAM:
   393                           	callstack 0
   394   000039                     _Black_setup:
   395                           	callstack 0
   396   000039                     	ds	12
   397   000045                     _wall_detection_counter:
   398                           	callstack 0
   399   000045                     	ds	2
   400                           
   401                           	psect	bssBANK0
   402   0000E6                     __pbssBANK0:
   403                           	callstack 0
   404   0000E6                     _RGB:
   405                           	callstack 0
   406   0000E6                     	ds	12
   407   0000F2                     _incr_sec_counter:
   408                           	callstack 0
   409   0000F2                     	ds	2
   410   0000F4                     _state:
   411                           	callstack 0
   412   0000F4                     	ds	2
   413   0000F6                     _wall_detection_mode:
   414                           	callstack 0
   415   0000F6                     	ds	2
   416                           
   417                           	psect	dataBANK0
   418   000060                     __pdataBANK0:
   419                           	callstack 0
   420   000060                     _White_setup:
   421                           	callstack 0
   422   000060                     	ds	12
   423   00006C                     _Yellow_rule:
   424                           	callstack 0
   425   00006C                     	ds	12
   426   000078                     _Blue_rule:
   427                           	callstack 0
   428   000078                     	ds	12
   429   000084                     _Green_rule:
   430                           	callstack 0
   431   000084                     	ds	12
   432   000090                     _Red_rule:
   433                           	callstack 0
   434   000090                     	ds	12
   435   00009C                     _twothirds:
   436                           	callstack 0
   437   00009C                     	ds	2
   438   00009E                     _halfback:
   439                           	callstack 0
   440   00009E                     	ds	2
   441   0000A0                     _blockback:
   442                           	callstack 0
   443   0000A0                     	ds	2
   444   0000A2                     _blockahead:
   445                           	callstack 0
   446   0000A2                     	ds	2
   447   0000A4                     _wait_time:
   448                           	callstack 0
   449   0000A4                     	ds	2
   450   0000A6                     _wall_coef:
   451                           	callstack 0
   452   0000A6                     	ds	2
   453                           
   454                           	psect	bssBANK1
   455   000100                     __pbssBANK1:
   456                           	callstack 0
   457   000100                     _Color_rules:
   458                           	callstack 0
   459   000100                     	ds	108
   460   00016C                     _Black_rule:
   461                           	callstack 0
   462   00016C                     	ds	12
   463                           
   464                           	psect	dataBANK1
   465   000178                     __pdataBANK1:
   466                           	callstack 0
   467   000178                     _White_rule:
   468                           	callstack 0
   469   000178                     	ds	12
   470   000184                     _Lightblue_rule:
   471                           	callstack 0
   472   000184                     	ds	12
   473   000190                     _Orange_rule:
   474                           	callstack 0
   475   000190                     	ds	12
   476   00019C                     _Pink_rule:
   477                           	callstack 0
   478   00019C                     	ds	12
   479                           
   480                           	psect	bssBANK2
   481   000200                     __pbssBANK2:
   482                           	callstack 0
   483   000200                     _movement_list:
   484                           	callstack 0
   485   000200                     	ds	200
   486                           
   487                           	psect	cstackBANK1
   488   0001A8                     __pcstackBANK1:
   489                           	callstack 0
   490   0001A8                     main@color_code:
   491                           	callstack 0
   492                           
   493                           ; 2 bytes @ 0x0
   494   0001A8                     	ds	2
   495   0001AA                     main@state:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x2
   499   0001AA                     	ds	2
   500   0001AC                     main@motorL:
   501                           	callstack 0
   502                           
   503                           ; 9 bytes @ 0x4
   504   0001AC                     	ds	9
   505   0001B5                     main@motorR:
   506                           	callstack 0
   507                           
   508                           ; 9 bytes @ 0xD
   509   0001B5                     	ds	9
   510                           
   511                           	psect	cstackBANK0
   512   0000A8                     __pcstackBANK0:
   513                           	callstack 0
   514   0000A8                     _get_color_distance$422:
   515                           	callstack 0
   516                           
   517                           ; 4 bytes @ 0x0
   518   0000A8                     	ds	4
   519   0000AC                     _get_color_distance$424:
   520                           	callstack 0
   521                           
   522                           ; 4 bytes @ 0x4
   523   0000AC                     	ds	4
   524   0000B0                     _get_color_distance$426:
   525                           	callstack 0
   526                           
   527                           ; 4 bytes @ 0x8
   528   0000B0                     	ds	4
   529   0000B4                     get_color_distance@R_offset:
   530                           	callstack 0
   531                           
   532                           ; 2 bytes @ 0xC
   533   0000B4                     	ds	2
   534   0000B6                     get_color_distance@G_offset:
   535                           	callstack 0
   536                           
   537                           ; 2 bytes @ 0xE
   538   0000B6                     	ds	2
   539   0000B8                     get_color_distance@B_offset:
   540                           	callstack 0
   541                           
   542                           ; 2 bytes @ 0x10
   543   0000B8                     	ds	2
   544   0000BA                     _get_color_code$2466:
   545                           	callstack 0
   546                           
   547                           ; 12 bytes @ 0x12
   548   0000BA                     	ds	12
   549   0000C6                     _get_color_code$464:
   550                           	callstack 0
   551                           
   552                           ; 4 bytes @ 0x1E
   553   0000C6                     	ds	4
   554   0000CA                     _get_color_code$465:
   555                           	callstack 0
   556                           
   557                           ; 4 bytes @ 0x22
   558   0000CA                     	ds	4
   559   0000CE                     _get_color_code$466:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x26
   563   0000CE                     	ds	4
   564   0000D2                     get_color_code@min_value:
   565                           	callstack 0
   566                           
   567                           ; 2 bytes @ 0x2A
   568   0000D2                     	ds	2
   569   0000D4                     get_color_code@min_index:
   570                           	callstack 0
   571                           
   572                           ; 2 bytes @ 0x2C
   573   0000D4                     	ds	2
   574   0000D6                     get_color_code@value:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0x2E
   578   0000D6                     	ds	2
   579   0000D8                     get_color_code@i:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0x30
   583   0000D8                     	ds	2
   584   0000DA                     get_color_code@NormalizedRGB:
   585                           	callstack 0
   586                           
   587                           ; 12 bytes @ 0x32
   588   0000DA                     	ds	12
   589                           
   590                           	psect	cstackCOMRAM
   591   000001                     __pcstackCOMRAM:
   592                           	callstack 0
   593   000001                     ??i2_I2C_2_Master_Idle:
   594   000001                     i2set_led_color@color:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x0
   598   000001                     	ds	1
   599   000002                     ??i2_I2C_2_Master_Read:
   600   000002                     i2I2C_2_Master_Write@data_byte:
   601                           	callstack 0
   602                           
   603                           ; 1 bytes @ 0x1
   604   000002                     	ds	1
   605   000003                     i2I2C_2_Master_Read@ack:
   606                           	callstack 0
   607                           
   608                           ; 1 bytes @ 0x2
   609   000003                     	ds	1
   610   000004                     i2I2C_2_Master_Read@tmp:
   611                           	callstack 0
   612                           
   613                           ; 1 bytes @ 0x3
   614   000004                     	ds	1
   615   000005                     ?i2_color_read_Clear:
   616                           	callstack 0
   617                           
   618                           ; 2 bytes @ 0x4
   619   000005                     	ds	2
   620   000007                     ??i2_color_read_Clear:
   621                           
   622                           ; 1 bytes @ 0x6
   623   000007                     	ds	3
   624   00000A                     i2color_read_Clear@tmp:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x9
   628   00000A                     	ds	2
   629   00000C                     set_wall_detection@mode:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0xB
   633   00000C                     	ds	2
   634   00000E                     ??_add_seconds_to_list:
   635   00000E                     ??_I2C_2_Master_Idle:
   636   00000E                     ?_get_state:
   637                           	callstack 0
   638   00000E                     ?___wmul:
   639                           	callstack 0
   640   00000E                     ?___lmul:
   641                           	callstack 0
   642   00000E                     set_wall_detection_mode@mode:
   643                           	callstack 0
   644   00000E                     set_led_color@color:
   645                           	callstack 0
   646   00000E                     initDCmotorsPWM@PWMperiod:
   647                           	callstack 0
   648   00000E                     ___wmul@multiplier:
   649                           	callstack 0
   650   00000E                     ___lmul@multiplier:
   651                           	callstack 0
   652                           
   653                           ; 4 bytes @ 0xD
   654   00000E                     	ds	1
   655   00000F                     ??_I2C_2_Master_Read:
   656   00000F                     I2C_2_Master_Write@data_byte:
   657                           	callstack 0
   658                           
   659                           ; 1 bytes @ 0xE
   660   00000F                     	ds	1
   661   000010                     color_writetoaddr@value:
   662                           	callstack 0
   663   000010                     I2C_2_Master_Read@ack:
   664                           	callstack 0
   665   000010                     ___wmul@multiplicand:
   666                           	callstack 0
   667                           
   668                           ; 2 bytes @ 0xF
   669   000010                     	ds	1
   670   000011                     color_writetoaddr@address:
   671                           	callstack 0
   672   000011                     I2C_2_Master_Read@tmp:
   673                           	callstack 0
   674                           
   675                           ; 1 bytes @ 0x10
   676   000011                     	ds	1
   677   000012                     ?_color_read_Red:
   678                           	callstack 0
   679   000012                     ?_color_read_Blue:
   680                           	callstack 0
   681   000012                     ?_color_read_Green:
   682                           	callstack 0
   683   000012                     ?_color_read_Clear:
   684                           	callstack 0
   685   000012                     ___wmul@product:
   686                           	callstack 0
   687   000012                     ___lmul@multiplicand:
   688                           	callstack 0
   689                           
   690                           ; 4 bytes @ 0x11
   691   000012                     	ds	2
   692   000014                     ??_color_read_Red:
   693   000014                     ??_color_read_Blue:
   694   000014                     ??_color_read_Green:
   695   000014                     ??_color_read_Clear:
   696   000014                     ?_get_color_distance:
   697                           	callstack 0
   698   000014                     ?_get_wall_detection:
   699                           	callstack 0
   700   000014                     ?___lwdiv:
   701                           	callstack 0
   702   000014                     ___lwdiv@dividend:
   703                           	callstack 0
   704   000014                     get_color_distance@color1:
   705                           	callstack 0
   706                           
   707                           ; 12 bytes @ 0x13
   708   000014                     	ds	2
   709   000016                     ___lwdiv@divisor:
   710                           	callstack 0
   711   000016                     ___lmul@product:
   712                           	callstack 0
   713                           
   714                           ; 4 bytes @ 0x15
   715   000016                     	ds	1
   716   000017                     color_read_Red@tmp:
   717                           	callstack 0
   718   000017                     color_read_Blue@tmp:
   719                           	callstack 0
   720   000017                     color_read_Green@tmp:
   721                           	callstack 0
   722   000017                     color_read_Clear@tmp:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x16
   726   000017                     	ds	1
   727   000018                     ___lwdiv@counter:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x17
   731   000018                     	ds	1
   732   000019                     ??_calibrate_white:
   733   000019                     ___lwdiv@quotient:
   734                           	callstack 0
   735                           
   736                           ; 2 bytes @ 0x18
   737   000019                     	ds	1
   738   00001A                     ?___lldiv:
   739                           	callstack 0
   740   00001A                     ___lldiv@dividend:
   741                           	callstack 0
   742                           
   743                           ; 4 bytes @ 0x19
   744   00001A                     	ds	1
   745   00001B                     ??_calibrate_black:
   746   00001B                     setMotorPWM@m:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x1A
   750   00001B                     	ds	2
   751   00001D                     ??_setMotorPWM:
   752   00001D                     calibrate_black@clear1:
   753                           	callstack 0
   754                           
   755                           ; 2 bytes @ 0x1C
   756   00001D                     	ds	1
   757   00001E                     ___lldiv@divisor:
   758                           	callstack 0
   759                           
   760                           ; 4 bytes @ 0x1D
   761   00001E                     	ds	1
   762   00001F                     setMotorPWM@posDuty:
   763                           	callstack 0
   764   00001F                     calibrate_black@clear2:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0x1E
   768   00001F                     	ds	1
   769   000020                     setMotorPWM@negDuty:
   770                           	callstack 0
   771   000020                     get_color_distance@color2:
   772                           	callstack 0
   773                           
   774                           ; 12 bytes @ 0x1F
   775   000020                     	ds	1
   776   000021                     stop@mL:
   777                           	callstack 0
   778   000021                     turnLeft@mL:
   779                           	callstack 0
   780   000021                     turnRight@mL:
   781                           	callstack 0
   782   000021                     turnLeftLong@mL:
   783                           	callstack 0
   784   000021                     turnRightLong@mL:
   785                           	callstack 0
   786   000021                     fullSpeedAhead@mL:
   787                           	callstack 0
   788   000021                     TimedfullSpeedAhead@mL:
   789                           	callstack 0
   790   000021                     moveBack@mL:
   791                           	callstack 0
   792   000021                     _calibrate_black$2467:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x20
   796   000021                     	ds	1
   797   000022                     ___lldiv@quotient:
   798                           	callstack 0
   799                           
   800                           ; 4 bytes @ 0x21
   801   000022                     	ds	1
   802   000023                     ??_color_click_init:
   803   000023                     stop@mR:
   804                           	callstack 0
   805   000023                     turnLeft@mR:
   806                           	callstack 0
   807   000023                     turnRight@mR:
   808                           	callstack 0
   809   000023                     turnLeftLong@mR:
   810                           	callstack 0
   811   000023                     turnRightLong@mR:
   812                           	callstack 0
   813   000023                     fullSpeedAhead@mR:
   814                           	callstack 0
   815   000023                     TimedfullSpeedAhead@mR:
   816                           	callstack 0
   817   000023                     moveBack@mR:
   818                           	callstack 0
   819                           
   820                           ; 2 bytes @ 0x22
   821   000023                     	ds	2
   822   000025                     ??_stop:
   823   000025                     ??_turnLeft:
   824   000025                     ??_turnRight:
   825   000025                     ??_turnLeftLong:
   826   000025                     ??_turnRightLong:
   827   000025                     TimedfullSpeedAhead@time:
   828                           	callstack 0
   829   000025                     moveBack@time:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x24
   833   000025                     	ds	1
   834   000026                     ___lldiv@counter:
   835                           	callstack 0
   836                           
   837                           ; 1 bytes @ 0x25
   838   000026                     	ds	1
   839   000027                     turnLeft@k:
   840                           	callstack 0
   841   000027                     turnRight@k:
   842                           	callstack 0
   843   000027                     turnLeftLong@k:
   844                           	callstack 0
   845   000027                     turnRightLong@k:
   846                           	callstack 0
   847                           
   848                           ; 2 bytes @ 0x26
   849   000027                     	ds	2
   850   000029                     turnLeft@i:
   851                           	callstack 0
   852   000029                     turnRight@i:
   853                           	callstack 0
   854   000029                     turnLeftLong@i:
   855                           	callstack 0
   856   000029                     turnRightLong@i:
   857                           	callstack 0
   858                           
   859                           ; 2 bytes @ 0x28
   860   000029                     	ds	2
   861   00002B                     RobotMovement@color:
   862                           	callstack 0
   863   00002B                     return_back@motorL:
   864                           	callstack 0
   865                           
   866                           ; 2 bytes @ 0x2A
   867   00002B                     	ds	1
   868   00002C                     ??_get_color_distance:
   869                           
   870                           ; 1 bytes @ 0x2B
   871   00002C                     	ds	1
   872   00002D                     RobotMovement@motorL:
   873                           	callstack 0
   874   00002D                     return_back@motorR:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x2C
   878   00002D                     	ds	2
   879   00002F                     ??_return_back:
   880   00002F                     RobotMovement@motorR:
   881                           	callstack 0
   882                           
   883                           ; 2 bytes @ 0x2E
   884   00002F                     	ds	1
   885   000030                     ?_get_color_code:
   886                           	callstack 0
   887                           
   888                           ; 2 bytes @ 0x2F
   889   000030                     	ds	1
   890   000031                     
   891                           ; 1 bytes @ 0x30
   892   000031                     	ds	1
   893   000032                     ??_get_color_code:
   894                           
   895                           ; 1 bytes @ 0x31
   896   000032                     	ds	1
   897   000033                     RobotMovement@i:
   898                           	callstack 0
   899                           
   900                           ; 2 bytes @ 0x32
   901   000033                     	ds	2
   902   000035                     RobotMovement@i_1277:
   903                           	callstack 0
   904                           
   905                           ; 2 bytes @ 0x34
   906   000035                     	ds	2
   907   000037                     ??_main:
   908                           
   909                           ; 1 bytes @ 0x36
   910   000037                     	ds	2
   911                           
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 17 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  color_code      2    0[BANK1 ] unsigned int 
   922 ;;  state           2    2[BANK1 ] int 
   923 ;;  motorR          9   13[BANK1 ] struct DC_motor
   924 ;;  motorL          9    4[BANK1 ] struct DC_motor
   925 ;;  PWMcycle        2    0        unsigned int 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   937 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   938 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   939 ;;Total ram usage:       24 bytes
   940 ;; Hardware stack levels required when called: 10
   941 ;; This function calls:
   942 ;;		_Interrupts_init
   943 ;;		_RobotMovement
   944 ;;		_TimedfullSpeedAhead
   945 ;;		_Timer0_init
   946 ;;		_add_seconds_to_list
   947 ;;		_color_click_init
   948 ;;		_fullSpeedAhead
   949 ;;		_get_color_code
   950 ;;		_get_state
   951 ;;		_get_wall_detection
   952 ;;		_initDCmotorsPWM
   953 ;;		_return_back
   954 ;;		_set_wall_detection_mode
   955 ;;		_stop
   956 ;; This function is called by:
   957 ;;		Startup code after reset
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text0
   962   000CE2                     __ptext0:
   963                           	callstack 0
   964   000CE2                     _main:
   965                           	callstack 21
   966   000CE2                     
   967                           ;main.c: 19:     color_click_init();
   968   000CE2  EC66  F00B         	call	_color_click_init	;wreg free
   969   000CE6                     
   970                           ;main.c: 20:     Timer0_init();
   971   000CE6  EC88  F011         	call	_Timer0_init	;wreg free
   972   000CEA                     
   973                           ;main.c: 21:     Interrupts_init();
   974   000CEA  ECB2  F011         	call	_Interrupts_init	;wreg free
   975   000CEE                     
   976                           ;main.c: 22:     initDCmotorsPWM(99);
   977   000CEE  0E00               	movlw	0
   978   000CF0  6E0F               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   979   000CF2  0E63               	movlw	99
   980   000CF4  6E0E               	movwf	initDCmotorsPWM@PWMperiod^0,c
   981   000CF6  EC92  F00D         	call	_initDCmotorsPWM	;wreg free
   982   000CFA                     
   983                           ;main.c: 26:     ANSELFbits.ANSELF2 = 0;
   984   000CFA  010E               	movlb	14	; () banked
   985   000CFC  95B4               	bcf	180,2,b	;volatile
   986   000CFE                     
   987                           ; BSR set to: 14
   988                           ;main.c: 27:     TRISFbits.TRISF2 = 1;
   989   000CFE  8486               	bsf	134,2,c	;volatile
   990   000D00                     
   991                           ; BSR set to: 14
   992                           ;main.c: 29:     DC_motor motorL, motorR;;main.c: 30:     motorL.power=0;
   993   000D00  0E00               	movlw	0
   994   000D02  0101               	movlb	1	; () banked
   995   000D04  6FAC               	movwf	main@motorL& (0+255),b
   996   000D06                     
   997                           ; BSR set to: 1
   998                           ;main.c: 31:     motorL.direction=1;
   999   000D06  0E01               	movlw	1
  1000   000D08  6FAD               	movwf	(main@motorL+1)& (0+255),b
  1001   000D0A                     
  1002                           ; BSR set to: 1
  1003                           ;main.c: 32:     motorL.brakemode=1;
  1004   000D0A  0E01               	movlw	1
  1005   000D0C  6FAE               	movwf	(main@motorL+2)& (0+255),b
  1006   000D0E                     
  1007                           ; BSR set to: 1
  1008                           ;main.c: 33:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1009   000D0E  0EAA               	movlw	170
  1010   000D10  6FB1               	movwf	(main@motorL+5)& (0+255),b
  1011   000D12  0E0F               	movlw	15
  1012   000D14  6FB2               	movwf	(main@motorL+6)& (0+255),b
  1013   000D16                     
  1014                           ; BSR set to: 1
  1015                           ;main.c: 34:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1016   000D16  0EA6               	movlw	166
  1017   000D18  6FB3               	movwf	(main@motorL+7)& (0+255),b
  1018   000D1A  0E0F               	movlw	15
  1019   000D1C  6FB4               	movwf	(main@motorL+8)& (0+255),b
  1020   000D1E                     
  1021                           ; BSR set to: 1
  1022                           ;main.c: 35:     motorL.PWMperiod=PWMcycle;
  1023   000D1E  0E00               	movlw	0
  1024   000D20  6FB0               	movwf	(main@motorL+4)& (0+255),b
  1025   000D22  0E63               	movlw	99
  1026   000D24  6FAF               	movwf	(main@motorL+3)& (0+255),b
  1027   000D26                     
  1028                           ; BSR set to: 1
  1029                           ;main.c: 37:     motorR.power=0;
  1030   000D26  0E00               	movlw	0
  1031   000D28  6FB5               	movwf	main@motorR& (0+255),b
  1032   000D2A                     
  1033                           ; BSR set to: 1
  1034                           ;main.c: 38:     motorR.direction=1;
  1035   000D2A  0E01               	movlw	1
  1036   000D2C  6FB6               	movwf	(main@motorR+1)& (0+255),b
  1037   000D2E                     
  1038                           ; BSR set to: 1
  1039                           ;main.c: 39:     motorR.brakemode=1;
  1040   000D2E  0E01               	movlw	1
  1041   000D30  6FB7               	movwf	(main@motorR+2)& (0+255),b
  1042   000D32                     
  1043                           ; BSR set to: 1
  1044                           ;main.c: 40:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1045   000D32  0E25               	movlw	37
  1046   000D34  6FBA               	movwf	(main@motorR+5)& (0+255),b
  1047   000D36  0E0F               	movlw	15
  1048   000D38  6FBB               	movwf	(main@motorR+6)& (0+255),b
  1049   000D3A                     
  1050                           ; BSR set to: 1
  1051                           ;main.c: 41:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1052   000D3A  0E21               	movlw	33
  1053   000D3C  6FBC               	movwf	(main@motorR+7)& (0+255),b
  1054   000D3E  0E0F               	movlw	15
  1055   000D40  6FBD               	movwf	(main@motorR+8)& (0+255),b
  1056   000D42                     
  1057                           ; BSR set to: 1
  1058                           ;main.c: 42:     motorR.PWMperiod=PWMcycle;
  1059   000D42  0E00               	movlw	0
  1060   000D44  6FB9               	movwf	(main@motorR+4)& (0+255),b
  1061   000D46  0E63               	movlw	99
  1062   000D48  6FB8               	movwf	(main@motorR+3)& (0+255),b
  1063   000D4A                     
  1064                           ; BSR set to: 1
  1065                           ;main.c: 44:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1066   000D4A  0E52               	movlw	82
  1067   000D4C  6E38               	movwf	(??_main+1)^0,c
  1068   000D4E  0E2B               	movlw	43
  1069   000D50  6E37               	movwf	??_main^0,c
  1070   000D52  0E00               	movlw	0
  1071   000D54                     u4257:
  1072   000D54  2EE8               	decfsz	wreg,f,c
  1073   000D56  D7FE               	bra	u4257
  1074   000D58  2E37               	decfsz	??_main^0,f,c
  1075   000D5A  D7FC               	bra	u4257
  1076   000D5C  2E38               	decfsz	(??_main+1)^0,f,c
  1077   000D5E  D7FA               	bra	u4257
  1078   000D60  D000               	nop2	
  1079   000D62                     
  1080                           ;main.c: 45:     fullSpeedAhead(&motorL,&motorR);
  1081   000D62  0EAC               	movlw	low main@motorL
  1082   000D64  6E21               	movwf	fullSpeedAhead@mL^0,c
  1083   000D66  0E01               	movlw	high main@motorL
  1084   000D68  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1085   000D6A  0EB5               	movlw	low main@motorR
  1086   000D6C  6E23               	movwf	fullSpeedAhead@mR^0,c
  1087   000D6E  0E01               	movlw	high main@motorR
  1088   000D70  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1089   000D72  EC28  F00F         	call	_fullSpeedAhead	;wreg free
  1090   000D76                     l4501:
  1091                           
  1092                           ;main.c: 46:     set_wall_detection_mode(1);
  1093   000D76  0E00               	movlw	0
  1094   000D78  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1095   000D7A  0E01               	movlw	1
  1096   000D7C  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1097   000D7E  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1098   000D82                     l4503:
  1099                           
  1100                           ;main.c: 48:         int state = get_state();
  1101   000D82  ECBE  F011         	call	_get_state	;wreg free
  1102   000D86  C00E  F1AA         	movff	?_get_state,main@state
  1103   000D8A  C00F  F1AB         	movff	?_get_state+1,main@state+1
  1104   000D8E                     
  1105                           ;main.c: 49:         if(get_wall_detection() == 1 && state == 0 ){
  1106   000D8E  ECF6  F00E         	call	_get_wall_detection	;wreg free
  1107   000D92  0414               	decf	?_get_wall_detection^0,w,c
  1108   000D94  1015               	iorwf	(?_get_wall_detection+1)^0,w,c
  1109   000D96  A4D8               	btfss	status,2,c
  1110   000D98  EFD0  F006         	goto	u3851
  1111   000D9C  EFD2  F006         	goto	u3850
  1112   000DA0                     u3851:
  1113   000DA0  EF30  F007         	goto	l4527
  1114   000DA4                     u3850:
  1115   000DA4  0101               	movlb	1	; () banked
  1116   000DA6  51AA               	movf	main@state& (0+255),w,b
  1117   000DA8  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1118   000DAA  A4D8               	btfss	status,2,c
  1119   000DAC  EFDA  F006         	goto	u3861
  1120   000DB0  EFDC  F006         	goto	u3860
  1121   000DB4                     u3861:
  1122   000DB4  EF30  F007         	goto	l4527
  1123   000DB8                     u3860:
  1124   000DB8                     
  1125                           ; BSR set to: 1
  1126                           ;main.c: 50:             set_wall_detection_mode(0);
  1127   000DB8  0E00               	movlw	0
  1128   000DBA  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1129   000DBC  0E00               	movlw	0
  1130   000DBE  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1131   000DC0  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1132   000DC4                     
  1133                           ;main.c: 52:             add_seconds_to_list();
  1134   000DC4  EC66  F010         	call	_add_seconds_to_list	;wreg free
  1135   000DC8                     
  1136                           ;main.c: 53:             stop(&motorL,&motorR);
  1137   000DC8  0EAC               	movlw	low main@motorL
  1138   000DCA  6E21               	movwf	stop@mL^0,c
  1139   000DCC  0E01               	movlw	high main@motorL
  1140   000DCE  6E22               	movwf	(stop@mL+1)^0,c
  1141   000DD0  0EB5               	movlw	low main@motorR
  1142   000DD2  6E23               	movwf	stop@mR^0,c
  1143   000DD4  0E01               	movlw	high main@motorR
  1144   000DD6  6E24               	movwf	(stop@mR+1)^0,c
  1145   000DD8  EC1D  F010         	call	_stop	;wreg free
  1146   000DDC                     
  1147                           ;main.c: 54:             unsigned int color_code = get_color_code();
  1148   000DDC  EC87  F003         	call	_get_color_code	;wreg free
  1149   000DE0  C030  F1A8         	movff	?_get_color_code,main@color_code
  1150   000DE4  C031  F1A9         	movff	?_get_color_code+1,main@color_code+1
  1151   000DE8                     
  1152                           ;main.c: 55:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1153   000DE8  0EAC               	movlw	low main@motorL
  1154   000DEA  6E21               	movwf	TimedfullSpeedAhead@mL^0,c
  1155   000DEC  0E01               	movlw	high main@motorL
  1156   000DEE  6E22               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1157   000DF0  0EB5               	movlw	low main@motorR
  1158   000DF2  6E23               	movwf	TimedfullSpeedAhead@mR^0,c
  1159   000DF4  0E01               	movlw	high main@motorR
  1160   000DF6  6E24               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1161   000DF8  0E00               	movlw	0
  1162   000DFA  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1163   000DFC  0E05               	movlw	5
  1164   000DFE  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1165   000E00  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1166   000E04                     
  1167                           ;main.c: 56:             RobotMovement(color_code, &motorL, &motorR);
  1168   000E04  C1A8  F02B         	movff	main@color_code,RobotMovement@color
  1169   000E08  C1A9  F02C         	movff	main@color_code+1,RobotMovement@color+1
  1170   000E0C  0EAC               	movlw	low main@motorL
  1171   000E0E  6E2D               	movwf	RobotMovement@motorL^0,c
  1172   000E10  0E01               	movlw	high main@motorL
  1173   000E12  6E2E               	movwf	(RobotMovement@motorL+1)^0,c
  1174   000E14  0EB5               	movlw	low main@motorR
  1175   000E16  6E2F               	movwf	RobotMovement@motorR^0,c
  1176   000E18  0E01               	movlw	high main@motorR
  1177   000E1A  6E30               	movwf	(RobotMovement@motorR+1)^0,c
  1178   000E1C  EC53  F000         	call	_RobotMovement	;wreg free
  1179   000E20                     
  1180                           ;main.c: 57:             if (state == 0)
  1181   000E20  0101               	movlb	1	; () banked
  1182   000E22  51AA               	movf	main@state& (0+255),w,b
  1183   000E24  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1184   000E26  A4D8               	btfss	status,2,c
  1185   000E28  EF18  F007         	goto	u3871
  1186   000E2C  EF1A  F007         	goto	u3870
  1187   000E30                     u3871:
  1188   000E30  EFBB  F006         	goto	l4501
  1189   000E34                     u3870:
  1190   000E34                     
  1191                           ; BSR set to: 1
  1192                           ;main.c: 58:             {;main.c: 59:                 stop(&motorL,&motorR);
  1193   000E34  0EAC               	movlw	low main@motorL
  1194   000E36  6E21               	movwf	stop@mL^0,c
  1195   000E38  0E01               	movlw	high main@motorL
  1196   000E3A  6E22               	movwf	(stop@mL+1)^0,c
  1197   000E3C  0EB5               	movlw	low main@motorR
  1198   000E3E  6E23               	movwf	stop@mR^0,c
  1199   000E40  0E01               	movlw	high main@motorR
  1200   000E42  6E24               	movwf	(stop@mR+1)^0,c
  1201   000E44  EC1D  F010         	call	_stop	;wreg free
  1202                           
  1203                           ;main.c: 60:                 fullSpeedAhead(&motorL,&motorR);
  1204   000E48  0EAC               	movlw	low main@motorL
  1205   000E4A  6E21               	movwf	fullSpeedAhead@mL^0,c
  1206   000E4C  0E01               	movlw	high main@motorL
  1207   000E4E  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1208   000E50  0EB5               	movlw	low main@motorR
  1209   000E52  6E23               	movwf	fullSpeedAhead@mR^0,c
  1210   000E54  0E01               	movlw	high main@motorR
  1211   000E56  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1212   000E58  EC28  F00F         	call	_fullSpeedAhead	;wreg free
  1213   000E5C  EFBB  F006         	goto	l4501
  1214   000E60                     l4527:
  1215   000E60  0101               	movlb	1	; () banked
  1216   000E62  05AA               	decf	main@state& (0+255),w,b
  1217   000E64  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1218   000E66  A4D8               	btfss	status,2,c
  1219   000E68  EF38  F007         	goto	u3881
  1220   000E6C  EF3A  F007         	goto	u3880
  1221   000E70                     u3881:
  1222   000E70  EFC1  F006         	goto	l4503
  1223   000E74                     u3880:
  1224   000E74                     
  1225                           ; BSR set to: 1
  1226                           ;main.c: 65:             set_wall_detection_mode(0);
  1227   000E74  0E00               	movlw	0
  1228   000E76  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1229   000E78  0E00               	movlw	0
  1230   000E7A  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1231   000E7C  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1232   000E80                     
  1233                           ;main.c: 66:             return_back(&motorL, &motorR);
  1234   000E80  0EAC               	movlw	low main@motorL
  1235   000E82  6E2B               	movwf	return_back@motorL^0,c
  1236   000E84  0E01               	movlw	high main@motorL
  1237   000E86  6E2C               	movwf	(return_back@motorL+1)^0,c
  1238   000E88  0EB5               	movlw	low main@motorR
  1239   000E8A  6E2D               	movwf	return_back@motorR^0,c
  1240   000E8C  0E01               	movlw	high main@motorR
  1241   000E8E  6E2E               	movwf	(return_back@motorR+1)^0,c
  1242   000E90  EC56  F005         	call	_return_back	;wreg free
  1243   000E94  EFC1  F006         	goto	l4503
  1244   000E98  EF51  F000         	goto	start
  1245   000E9C                     __end_of_main:
  1246                           	callstack 0
  1247                           
  1248 ;; *************** function _set_wall_detection_mode *****************
  1249 ;; Defined at:
  1250 ;;		line 33 in file "color.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;  mode            2   13[COMRAM] unsigned int 
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;		None
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, status,2
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1267 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;Total ram usage:        2 bytes
  1269 ;; Hardware stack levels used: 1
  1270 ;; Hardware stack levels required when called: 5
  1271 ;; This function calls:
  1272 ;;		Nothing
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text1
  1279   002330                     __ptext1:
  1280                           	callstack 0
  1281   002330                     _set_wall_detection_mode:
  1282                           	callstack 25
  1283   002330                     
  1284                           ;color.c: 34:     wall_detection_mode = mode;
  1285   002330  C00E  F0F6         	movff	set_wall_detection_mode@mode,_wall_detection_mode
  1286   002334  C00F  F0F7         	movff	set_wall_detection_mode@mode+1,_wall_detection_mode+1
  1287   002338                     
  1288                           ;color.c: 35:     clear1 = 0;
  1289   002338  0E00               	movlw	0
  1290   00233A  6E4E               	movwf	(_clear1+1)^0,c
  1291   00233C  0E00               	movlw	0
  1292   00233E  6E4D               	movwf	_clear1^0,c
  1293                           
  1294                           ;color.c: 36:     clear2 = 0;
  1295   002340  0E00               	movlw	0
  1296   002342  6E4C               	movwf	(_clear2+1)^0,c
  1297   002344  0E00               	movlw	0
  1298   002346  6E4B               	movwf	_clear2^0,c
  1299   002348  0012               	return		;funcret
  1300   00234A                     __end_of_set_wall_detection_mode:
  1301                           	callstack 0
  1302                           
  1303 ;; *************** function _return_back *****************
  1304 ;; Defined at:
  1305 ;;		line 481 in file "dc_motor.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  motorL          2   42[COMRAM] PTR struct DC_motor
  1308 ;;		 -> main@motorL(9), 
  1309 ;;  motorR          2   44[COMRAM] PTR struct DC_motor
  1310 ;;		 -> main@motorR(9), 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1322 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1324 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1325 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1326 ;;Total ram usage:        6 bytes
  1327 ;; Hardware stack levels used: 1
  1328 ;; Hardware stack levels required when called: 8
  1329 ;; This function calls:
  1330 ;;		_TimedfullSpeedAhead
  1331 ;;		_moveBack
  1332 ;;		_stop
  1333 ;;		_turnLeft
  1334 ;;		_turnLeftLong
  1335 ;;		_turnRight
  1336 ;;		_turnRightLong
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text2
  1343   000AAC                     __ptext2:
  1344                           	callstack 0
  1345   000AAC                     _return_back:
  1346                           	callstack 22
  1347   000AAC                     
  1348                           ;dc_motor.c: 481: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 482: {;dc_motor.c: 483:     while (index > 0){
  1349   000AAC  EF55  F006         	goto	l344
  1350   000AB0                     l4413:
  1351                           
  1352                           ;dc_motor.c: 484:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1353   000AB0  90D8               	bcf	status,0,c
  1354   000AB2  3447               	rlcf	_index^0,w,c
  1355   000AB4  6ED9               	movwf	fsr2l,c
  1356   000AB6  3448               	rlcf	(_index+1)^0,w,c
  1357   000AB8  6EDA               	movwf	fsr2h,c
  1358   000ABA  0EFE               	movlw	low (_movement_list+65534)
  1359   000ABC  26D9               	addwf	fsr2l,f,c
  1360   000ABE  0E01               	movlw	high (_movement_list+65534)
  1361   000AC0  22DA               	addwfc	fsr2h,f,c
  1362   000AC2  28DE               	incf	postinc2,w,c
  1363   000AC4  E106               	bnz	u3771
  1364   000AC6  28DE               	incf	postinc2,w,c
  1365   000AC8  A4D8               	btfss	status,2,c
  1366   000ACA  EF69  F005         	goto	u3771
  1367   000ACE  EF6B  F005         	goto	u3770
  1368   000AD2                     u3771:
  1369   000AD2  EF77  F005         	goto	l4417
  1370   000AD6                     u3770:
  1371   000AD6  C02B  F021         	movff	return_back@motorL,turnLeft@mL
  1372   000ADA  C02C  F022         	movff	return_back@motorL+1,turnLeft@mL+1
  1373   000ADE  C02D  F023         	movff	return_back@motorR,turnLeft@mR
  1374   000AE2  C02E  F024         	movff	return_back@motorR+1,turnLeft@mR+1
  1375   000AE6  EC69  F009         	call	_turnLeft	;wreg free
  1376   000AEA  EF48  F006         	goto	l4441
  1377   000AEE                     l4417:
  1378   000AEE  90D8               	bcf	status,0,c
  1379   000AF0  3447               	rlcf	_index^0,w,c
  1380   000AF2  6ED9               	movwf	fsr2l,c
  1381   000AF4  3448               	rlcf	(_index+1)^0,w,c
  1382   000AF6  6EDA               	movwf	fsr2h,c
  1383   000AF8  0EFE               	movlw	low (_movement_list+65534)
  1384   000AFA  26D9               	addwf	fsr2l,f,c
  1385   000AFC  0E01               	movlw	high (_movement_list+65534)
  1386   000AFE  22DA               	addwfc	fsr2h,f,c
  1387   000B00  0EFE               	movlw	254
  1388   000B02  18DE               	xorwf	postinc2,w,c
  1389   000B04  E106               	bnz	u3781
  1390   000B06  28DE               	incf	postinc2,w,c
  1391   000B08  A4D8               	btfss	status,2,c
  1392   000B0A  EF89  F005         	goto	u3781
  1393   000B0E  EF8B  F005         	goto	u3780
  1394   000B12                     u3781:
  1395   000B12  EF97  F005         	goto	l4421
  1396   000B16                     u3780:
  1397   000B16  C02B  F021         	movff	return_back@motorL,turnRight@mL
  1398   000B1A  C02C  F022         	movff	return_back@motorL+1,turnRight@mL+1
  1399   000B1E  C02D  F023         	movff	return_back@motorR,turnRight@mR
  1400   000B22  C02E  F024         	movff	return_back@motorR+1,turnRight@mR+1
  1401   000B26  ECBE  F00A         	call	_turnRight	;wreg free
  1402   000B2A  EF48  F006         	goto	l4441
  1403   000B2E                     l4421:
  1404   000B2E  90D8               	bcf	status,0,c
  1405   000B30  3447               	rlcf	_index^0,w,c
  1406   000B32  6ED9               	movwf	fsr2l,c
  1407   000B34  3448               	rlcf	(_index+1)^0,w,c
  1408   000B36  6EDA               	movwf	fsr2h,c
  1409   000B38  0EFE               	movlw	low (_movement_list+65534)
  1410   000B3A  26D9               	addwf	fsr2l,f,c
  1411   000B3C  0E01               	movlw	high (_movement_list+65534)
  1412   000B3E  22DA               	addwfc	fsr2h,f,c
  1413   000B40  0EFD               	movlw	253
  1414   000B42  18DE               	xorwf	postinc2,w,c
  1415   000B44  E106               	bnz	u3791
  1416   000B46  28DE               	incf	postinc2,w,c
  1417   000B48  A4D8               	btfss	status,2,c
  1418   000B4A  EFA9  F005         	goto	u3791
  1419   000B4E  EFAB  F005         	goto	u3790
  1420   000B52                     u3791:
  1421   000B52  EFB7  F005         	goto	l4425
  1422   000B56                     u3790:
  1423   000B56  C02B  F021         	movff	return_back@motorL,turnLeftLong@mL
  1424   000B5A  C02C  F022         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1425   000B5E  C02D  F023         	movff	return_back@motorR,turnLeftLong@mR
  1426   000B62  C02E  F024         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1427   000B66  ECBC  F008         	call	_turnLeftLong	;wreg free
  1428   000B6A  EF48  F006         	goto	l4441
  1429   000B6E                     l4425:
  1430   000B6E  90D8               	bcf	status,0,c
  1431   000B70  3447               	rlcf	_index^0,w,c
  1432   000B72  6ED9               	movwf	fsr2l,c
  1433   000B74  3448               	rlcf	(_index+1)^0,w,c
  1434   000B76  6EDA               	movwf	fsr2h,c
  1435   000B78  0EFE               	movlw	low (_movement_list+65534)
  1436   000B7A  26D9               	addwf	fsr2l,f,c
  1437   000B7C  0E01               	movlw	high (_movement_list+65534)
  1438   000B7E  22DA               	addwfc	fsr2h,f,c
  1439   000B80  0EFC               	movlw	252
  1440   000B82  18DE               	xorwf	postinc2,w,c
  1441   000B84  E106               	bnz	u3801
  1442   000B86  28DE               	incf	postinc2,w,c
  1443   000B88  A4D8               	btfss	status,2,c
  1444   000B8A  EFC9  F005         	goto	u3801
  1445   000B8E  EFCB  F005         	goto	u3800
  1446   000B92                     u3801:
  1447   000B92  EFD7  F005         	goto	l4429
  1448   000B96                     u3800:
  1449   000B96  C02B  F021         	movff	return_back@motorL,turnRightLong@mL
  1450   000B9A  C02C  F022         	movff	return_back@motorL+1,turnRightLong@mL+1
  1451   000B9E  C02D  F023         	movff	return_back@motorR,turnRightLong@mR
  1452   000BA2  C02E  F024         	movff	return_back@motorR+1,turnRightLong@mR+1
  1453   000BA6  EC16  F00A         	call	_turnRightLong	;wreg free
  1454   000BAA  EF48  F006         	goto	l4441
  1455   000BAE                     l4429:
  1456   000BAE  90D8               	bcf	status,0,c
  1457   000BB0  3447               	rlcf	_index^0,w,c
  1458   000BB2  6ED9               	movwf	fsr2l,c
  1459   000BB4  3448               	rlcf	(_index+1)^0,w,c
  1460   000BB6  6EDA               	movwf	fsr2h,c
  1461   000BB8  0EFE               	movlw	low (_movement_list+65534)
  1462   000BBA  26D9               	addwf	fsr2l,f,c
  1463   000BBC  0E01               	movlw	high (_movement_list+65534)
  1464   000BBE  22DA               	addwfc	fsr2h,f,c
  1465   000BC0  0E01               	movlw	1
  1466   000BC2  BEDB               	btfsc	plusw2,7,c
  1467   000BC4  EFEF  F005         	goto	u3810
  1468   000BC8  0E01               	movlw	1
  1469   000BCA  50DB               	movf	plusw2,w,c
  1470   000BCC  E106               	bnz	u3811
  1471   000BCE  04DE               	decf	postinc2,w,c
  1472   000BD0  B0D8               	btfsc	status,0,c
  1473   000BD2  EFED  F005         	goto	u3811
  1474   000BD6  EFEF  F005         	goto	u3810
  1475   000BDA                     u3811:
  1476   000BDA  EF07  F006         	goto	l4433
  1477   000BDE                     u3810:
  1478   000BDE  90D8               	bcf	status,0,c
  1479   000BE0  3447               	rlcf	_index^0,w,c
  1480   000BE2  6ED9               	movwf	fsr2l,c
  1481   000BE4  3448               	rlcf	(_index+1)^0,w,c
  1482   000BE6  6EDA               	movwf	fsr2h,c
  1483   000BE8  0EFC               	movlw	low (_movement_list+65532)
  1484   000BEA  26D9               	addwf	fsr2l,f,c
  1485   000BEC  0E01               	movlw	high (_movement_list+65532)
  1486   000BEE  22DA               	addwfc	fsr2h,f,c
  1487   000BF0  0E01               	movlw	1
  1488   000BF2  AEDB               	btfss	plusw2,7,c
  1489   000BF4  EF07  F006         	goto	u3820
  1490   000BF8  0EFE               	movlw	254
  1491   000BFA  5CDE               	subwf	postinc2,w,c
  1492   000BFC  0EFF               	movlw	255
  1493   000BFE  58DE               	subwfb	postinc2,w,c
  1494   000C00  A0D8               	btfss	status,0,c
  1495   000C02  EF05  F006         	goto	u3821
  1496   000C06  EF07  F006         	goto	u3820
  1497   000C0A                     u3821:
  1498   000C0A  EF48  F006         	goto	l349
  1499   000C0E                     u3820:
  1500   000C0E                     l4433:
  1501                           
  1502                           ;dc_motor.c: 489:         {;dc_motor.c: 490:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1503   000C0E  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1504   000C12  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1505   000C16  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1506   000C1A  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1507   000C1E  90D8               	bcf	status,0,c
  1508   000C20  3447               	rlcf	_index^0,w,c
  1509   000C22  6ED9               	movwf	fsr2l,c
  1510   000C24  3448               	rlcf	(_index+1)^0,w,c
  1511   000C26  6EDA               	movwf	fsr2h,c
  1512   000C28  0EFE               	movlw	low (_movement_list+65534)
  1513   000C2A  26D9               	addwf	fsr2l,f,c
  1514   000C2C  0E01               	movlw	high (_movement_list+65534)
  1515   000C2E  22DA               	addwfc	fsr2h,f,c
  1516   000C30  CFDE F025          	movff	postinc2,TimedfullSpeedAhead@time
  1517   000C34  CFDD F026          	movff	postdec2,TimedfullSpeedAhead@time+1
  1518   000C38  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1519   000C3C                     
  1520                           ;dc_motor.c: 491:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1521   000C3C  0E11               	movlw	17
  1522   000C3E  6E30               	movwf	(??_return_back+1)^0,c
  1523   000C40  0E3C               	movlw	60
  1524   000C42  6E2F               	movwf	??_return_back^0,c
  1525   000C44  0ECB               	movlw	203
  1526   000C46                     u4267:
  1527   000C46  2EE8               	decfsz	wreg,f,c
  1528   000C48  D7FE               	bra	u4267
  1529   000C4A  2E2F               	decfsz	??_return_back^0,f,c
  1530   000C4C  D7FC               	bra	u4267
  1531   000C4E  2E30               	decfsz	(??_return_back+1)^0,f,c
  1532   000C50  D7FA               	bra	u4267
  1533   000C52  F000               	nop	
  1534   000C54                     
  1535                           ;dc_motor.c: 492:             TimedfullSpeedAhead(motorL, motorR, 5);
  1536   000C54  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1537   000C58  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1538   000C5C  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1539   000C60  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1540   000C64  0E00               	movlw	0
  1541   000C66  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1542   000C68  0E05               	movlw	5
  1543   000C6A  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1544   000C6C  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1545   000C70                     
  1546                           ;dc_motor.c: 493:             moveBack(motorL, motorR, 5);
  1547   000C70  C02B  F021         	movff	return_back@motorL,moveBack@mL
  1548   000C74  C02C  F022         	movff	return_back@motorL+1,moveBack@mL+1
  1549   000C78  C02D  F023         	movff	return_back@motorR,moveBack@mR
  1550   000C7C  C02E  F024         	movff	return_back@motorR+1,moveBack@mR+1
  1551   000C80  0E00               	movlw	0
  1552   000C82  6E26               	movwf	(moveBack@time+1)^0,c
  1553   000C84  0E05               	movlw	5
  1554   000C86  6E25               	movwf	moveBack@time^0,c
  1555   000C88  ECDA  F00D         	call	_moveBack	;wreg free
  1556   000C8C  EF48  F006         	goto	l4441
  1557   000C90                     l349:
  1558   000C90                     l4441:
  1559                           
  1560                           ;dc_motor.c: 495:         stop(motorL,motorR);
  1561   000C90  C02B  F021         	movff	return_back@motorL,stop@mL
  1562   000C94  C02C  F022         	movff	return_back@motorL+1,stop@mL+1
  1563   000C98  C02D  F023         	movff	return_back@motorR,stop@mR
  1564   000C9C  C02E  F024         	movff	return_back@motorR+1,stop@mR+1
  1565   000CA0  EC1D  F010         	call	_stop	;wreg free
  1566   000CA4                     
  1567                           ;dc_motor.c: 496:         index -= 1;
  1568   000CA4  0647               	decf	_index^0,f,c
  1569   000CA6  A0D8               	btfss	status,0,c
  1570   000CA8  0648               	decf	(_index+1)^0,f,c
  1571   000CAA                     l344:
  1572                           
  1573                           ;dc_motor.c: 483:     while (index > 0){
  1574   000CAA  BE48               	btfsc	(_index+1)^0,7,c
  1575   000CAC  EF62  F006         	goto	u3830
  1576   000CB0  5048               	movf	(_index+1)^0,w,c
  1577   000CB2  E106               	bnz	u3831
  1578   000CB4  0447               	decf	_index^0,w,c
  1579   000CB6  B0D8               	btfsc	status,0,c
  1580   000CB8  EF60  F006         	goto	u3831
  1581   000CBC  EF62  F006         	goto	u3830
  1582   000CC0                     u3831:
  1583   000CC0  EF58  F005         	goto	l4413
  1584   000CC4                     u3830:
  1585   000CC4                     
  1586                           ;dc_motor.c: 498:     if (index == 0){state = 2;}
  1587   000CC4  5047               	movf	_index^0,w,c
  1588   000CC6  1048               	iorwf	(_index+1)^0,w,c
  1589   000CC8  A4D8               	btfss	status,2,c
  1590   000CCA  EF69  F006         	goto	u3841
  1591   000CCE  EF6B  F006         	goto	u3840
  1592   000CD2                     u3841:
  1593   000CD2  EF70  F006         	goto	l359
  1594   000CD6                     u3840:
  1595   000CD6  0E00               	movlw	0
  1596   000CD8  0100               	movlb	0	; () banked
  1597   000CDA  6FF5               	movwf	(_state+1)& (0+255),b
  1598   000CDC  0E02               	movlw	2
  1599   000CDE  6FF4               	movwf	_state& (0+255),b
  1600   000CE0                     l359:
  1601   000CE0  0012               	return		;funcret
  1602   000CE2                     __end_of_return_back:
  1603                           	callstack 0
  1604                           
  1605 ;; *************** function _initDCmotorsPWM *****************
  1606 ;; Defined at:
  1607 ;;		line 14 in file "dc_motor.c"
  1608 ;; Parameters:    Size  Location     Type
  1609 ;;  PWMperiod       2   13[COMRAM] int 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, status,2
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1621 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1625 ;;Total ram usage:        2 bytes
  1626 ;; Hardware stack levels used: 1
  1627 ;; Hardware stack levels required when called: 5
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_main
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text3
  1636   001B24                     __ptext3:
  1637                           	callstack 0
  1638   001B24                     _initDCmotorsPWM:
  1639                           	callstack 25
  1640   001B24                     
  1641                           ;dc_motor.c: 16:     TRISEbits.TRISE2=0;
  1642   001B24  9485               	bcf	133,2,c	;volatile
  1643                           
  1644                           ;dc_motor.c: 17:     TRISCbits.TRISC7=0;
  1645   001B26  9E83               	bcf	131,7,c	;volatile
  1646                           
  1647                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  1648   001B28  9C87               	bcf	135,6,c	;volatile
  1649                           
  1650                           ;dc_motor.c: 19:     TRISEbits.TRISE4=0;
  1651   001B2A  9885               	bcf	133,4,c	;volatile
  1652                           
  1653                           ;dc_motor.c: 21:     LATEbits.LATE2=0;
  1654   001B2C  947D               	bcf	125,2,c	;volatile
  1655                           
  1656                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1657   001B2E  9E7B               	bcf	123,7,c	;volatile
  1658                           
  1659                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1660   001B30  9C7F               	bcf	127,6,c	;volatile
  1661                           
  1662                           ;dc_motor.c: 24:     LATEbits.LATE4=0;
  1663   001B32  987D               	bcf	125,4,c	;volatile
  1664   001B34                     
  1665                           ;dc_motor.c: 27:     RE2PPS=0x05;
  1666   001B34  0E05               	movlw	5
  1667   001B36  010E               	movlb	14	; () banked
  1668   001B38  6F74               	movwf	116,b	;volatile
  1669                           
  1670                           ;dc_motor.c: 28:     RE4PPS=0x06;
  1671   001B3A  0E06               	movlw	6
  1672   001B3C  6F76               	movwf	118,b	;volatile
  1673                           
  1674                           ;dc_motor.c: 29:     RC7PPS=0x07;
  1675   001B3E  0E07               	movlw	7
  1676   001B40  6F69               	movwf	105,b	;volatile
  1677                           
  1678                           ;dc_motor.c: 30:     RG6PPS=0x08;
  1679   001B42  0E08               	movlw	8
  1680   001B44  6F88               	movwf	136,b	;volatile
  1681                           
  1682                           ;dc_motor.c: 33:     T2CONbits.CKPS=0b100;
  1683   001B46  50BD               	movf	189,w,c	;volatile
  1684   001B48  0B8F               	andlw	-113
  1685   001B4A  0940               	iorlw	64
  1686   001B4C  6EBD               	movwf	189,c	;volatile
  1687                           
  1688                           ;dc_motor.c: 34:     T2HLTbits.MODE=0b00000;
  1689   001B4E  0EE0               	movlw	-32
  1690   001B50  16BE               	andwf	190,f,c	;volatile
  1691                           
  1692                           ;dc_motor.c: 35:     T2CLKCONbits.CS=0b0001;
  1693   001B52  50BF               	movf	191,w,c	;volatile
  1694   001B54  0BF0               	andlw	-16
  1695   001B56  0901               	iorlw	1
  1696   001B58  6EBF               	movwf	191,c	;volatile
  1697                           
  1698                           ;dc_motor.c: 39:     T2PR=99;
  1699   001B5A  0E63               	movlw	99
  1700   001B5C  6EBC               	movwf	188,c	;volatile
  1701   001B5E                     
  1702                           ; BSR set to: 14
  1703                           ;dc_motor.c: 40:     T2CONbits.ON=1;
  1704   001B5E  8EBD               	bsf	189,7,c	;volatile
  1705                           
  1706                           ;dc_motor.c: 44:     CCPR1H=0;
  1707   001B60  0E00               	movlw	0
  1708   001B62  6EAA               	movwf	170,c	;volatile
  1709                           
  1710                           ;dc_motor.c: 45:     CCPR2H=0;
  1711   001B64  0E00               	movlw	0
  1712   001B66  6EA6               	movwf	166,c	;volatile
  1713                           
  1714                           ;dc_motor.c: 46:     CCPR3H=0;
  1715   001B68  0E00               	movlw	0
  1716   001B6A  010F               	movlb	15	; () banked
  1717   001B6C  6F25               	movwf	37,b	;volatile
  1718                           
  1719                           ;dc_motor.c: 47:     CCPR4H=0;
  1720   001B6E  0E00               	movlw	0
  1721   001B70  6F21               	movwf	33,b	;volatile
  1722                           
  1723                           ;dc_motor.c: 50:     CCPTMRS0bits.C1TSEL=0;
  1724   001B72  0EFC               	movlw	-4
  1725   001B74  16AD               	andwf	173,f,c	;volatile
  1726                           
  1727                           ;dc_motor.c: 51:     CCPTMRS0bits.C2TSEL=0;
  1728   001B76  0EF3               	movlw	-13
  1729   001B78  16AD               	andwf	173,f,c	;volatile
  1730                           
  1731                           ;dc_motor.c: 52:     CCPTMRS0bits.C3TSEL=0;
  1732   001B7A  0ECF               	movlw	-49
  1733   001B7C  16AD               	andwf	173,f,c	;volatile
  1734                           
  1735                           ;dc_motor.c: 53:     CCPTMRS0bits.C4TSEL=0;
  1736   001B7E  0E3F               	movlw	-193
  1737   001B80  16AD               	andwf	173,f,c	;volatile
  1738   001B82                     
  1739                           ; BSR set to: 15
  1740                           ;dc_motor.c: 56:     CCP1CONbits.FMT=1;
  1741   001B82  88AB               	bsf	171,4,c	;volatile
  1742                           
  1743                           ;dc_motor.c: 57:     CCP1CONbits.CCP1MODE=0b1100;
  1744   001B84  50AB               	movf	171,w,c	;volatile
  1745   001B86  0BF0               	andlw	-16
  1746   001B88  090C               	iorlw	12
  1747   001B8A  6EAB               	movwf	171,c	;volatile
  1748   001B8C                     
  1749                           ; BSR set to: 15
  1750                           ;dc_motor.c: 58:     CCP1CONbits.EN=1;
  1751   001B8C  8EAB               	bsf	171,7,c	;volatile
  1752   001B8E                     
  1753                           ; BSR set to: 15
  1754                           ;dc_motor.c: 60:     CCP2CONbits.FMT=1;
  1755   001B8E  88A7               	bsf	167,4,c	;volatile
  1756                           
  1757                           ;dc_motor.c: 61:     CCP2CONbits.CCP2MODE=0b1100;
  1758   001B90  50A7               	movf	167,w,c	;volatile
  1759   001B92  0BF0               	andlw	-16
  1760   001B94  090C               	iorlw	12
  1761   001B96  6EA7               	movwf	167,c	;volatile
  1762   001B98                     
  1763                           ; BSR set to: 15
  1764                           ;dc_motor.c: 62:     CCP2CONbits.EN=1;
  1765   001B98  8EA7               	bsf	167,7,c	;volatile
  1766   001B9A                     
  1767                           ; BSR set to: 15
  1768                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1769   001B9A  8926               	bsf	38,4,b	;volatile
  1770                           
  1771                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1772   001B9C  5126               	movf	38,w,b	;volatile
  1773   001B9E  0BF0               	andlw	-16
  1774   001BA0  090C               	iorlw	12
  1775   001BA2  6F26               	movwf	38,b	;volatile
  1776   001BA4                     
  1777                           ; BSR set to: 15
  1778                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1779   001BA4  8F26               	bsf	38,7,b	;volatile
  1780   001BA6                     
  1781                           ; BSR set to: 15
  1782                           ;dc_motor.c: 68:     CCP4CONbits.FMT=1;
  1783   001BA6  8922               	bsf	34,4,b	;volatile
  1784                           
  1785                           ;dc_motor.c: 69:     CCP4CONbits.CCP4MODE=0b1100;
  1786   001BA8  5122               	movf	34,w,b	;volatile
  1787   001BAA  0BF0               	andlw	-16
  1788   001BAC  090C               	iorlw	12
  1789   001BAE  6F22               	movwf	34,b	;volatile
  1790   001BB0                     
  1791                           ; BSR set to: 15
  1792                           ;dc_motor.c: 70:     CCP4CONbits.EN=1;
  1793   001BB0  8F22               	bsf	34,7,b	;volatile
  1794   001BB2                     
  1795                           ; BSR set to: 15
  1796   001BB2  0012               	return		;funcret
  1797   001BB4                     __end_of_initDCmotorsPWM:
  1798                           	callstack 0
  1799                           
  1800 ;; *************** function _get_wall_detection *****************
  1801 ;; Defined at:
  1802 ;;		line 258 in file "color.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  2   19[COMRAM] unsigned int 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1820 ;;Total ram usage:        2 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; Hardware stack levels required when called: 6
  1823 ;; This function calls:
  1824 ;;		___wmul
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text4
  1831   001DEC                     __ptext4:
  1832                           	callstack 0
  1833   001DEC                     _get_wall_detection:
  1834                           	callstack 24
  1835   001DEC                     
  1836                           ;color.c: 259:     if(clear1 == 0 || clear2 == 0){return 0;}
  1837   001DEC  504D               	movf	_clear1^0,w,c
  1838   001DEE  104E               	iorwf	(_clear1+1)^0,w,c
  1839   001DF0  B4D8               	btfsc	status,2,c
  1840   001DF2  EFFD  F00E         	goto	u3511
  1841   001DF6  EFFF  F00E         	goto	u3510
  1842   001DFA                     u3511:
  1843   001DFA  EF08  F00F         	goto	l4227
  1844   001DFE                     u3510:
  1845   001DFE  504B               	movf	_clear2^0,w,c
  1846   001E00  104C               	iorwf	(_clear2+1)^0,w,c
  1847   001E02  A4D8               	btfss	status,2,c
  1848   001E04  EF06  F00F         	goto	u3521
  1849   001E08  EF08  F00F         	goto	u3520
  1850   001E0C                     u3521:
  1851   001E0C  EF0E  F00F         	goto	l4231
  1852   001E10                     u3520:
  1853   001E10                     l4227:
  1854   001E10  0E00               	movlw	0
  1855   001E12  6E15               	movwf	(?_get_wall_detection+1)^0,c
  1856   001E14  0E00               	movlw	0
  1857   001E16  6E14               	movwf	?_get_wall_detection^0,c
  1858   001E18  EF27  F00F         	goto	l162
  1859   001E1C                     l4231:
  1860                           
  1861                           ;color.c: 260:     return clear2 >= clear1*wall_coef;
  1862   001E1C  C04D  F00E         	movff	_clear1,___wmul@multiplier
  1863   001E20  C04E  F00F         	movff	_clear1+1,___wmul@multiplier+1
  1864   001E24  C0A6  F010         	movff	_wall_coef,___wmul@multiplicand
  1865   001E28  C0A7  F011         	movff	_wall_coef+1,___wmul@multiplicand+1
  1866   001E2C  EC65  F011         	call	___wmul	;wreg free
  1867   001E30  500E               	movf	?___wmul^0,w,c
  1868   001E32  5C4B               	subwf	_clear2^0,w,c
  1869   001E34  500F               	movf	(?___wmul+1)^0,w,c
  1870   001E36  584C               	subwfb	(_clear2+1)^0,w,c
  1871   001E38  B0D8               	btfsc	status,0,c
  1872   001E3A  EF21  F00F         	goto	u3531
  1873   001E3E  EF24  F00F         	goto	u3530
  1874   001E42                     u3531:
  1875   001E42  0E01               	movlw	1
  1876   001E44  EF25  F00F         	goto	u3540
  1877   001E48                     u3530:
  1878   001E48  0E00               	movlw	0
  1879   001E4A                     u3540:
  1880   001E4A  6E14               	movwf	?_get_wall_detection^0,c
  1881   001E4C  6A15               	clrf	(?_get_wall_detection+1)^0,c
  1882   001E4E                     l162:
  1883   001E4E  0012               	return		;funcret
  1884   001E50                     __end_of_get_wall_detection:
  1885                           	callstack 0
  1886                           
  1887 ;; *************** function _get_state *****************
  1888 ;; Defined at:
  1889 ;;		line 466 in file "dc_motor.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;		None
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;		None
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2   13[COMRAM] int 
  1896 ;; Registers used:
  1897 ;;		None
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1903 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1906 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1907 ;;Total ram usage:        2 bytes
  1908 ;; Hardware stack levels used: 1
  1909 ;; Hardware stack levels required when called: 5
  1910 ;; This function calls:
  1911 ;;		Nothing
  1912 ;; This function is called by:
  1913 ;;		_main
  1914 ;; This function uses a non-reentrant model
  1915 ;;
  1916                           
  1917                           	psect	text5
  1918   00237C                     __ptext5:
  1919                           	callstack 0
  1920   00237C                     _get_state:
  1921                           	callstack 25
  1922   00237C                     
  1923                           ;dc_motor.c: 468:     return state;
  1924   00237C  C0F4  F00E         	movff	_state,?_get_state
  1925   002380  C0F5  F00F         	movff	_state+1,?_get_state+1
  1926   002384  0012               	return		;funcret
  1927   002386                     __end_of_get_state:
  1928                           	callstack 0
  1929                           
  1930 ;; *************** function _get_color_code *****************
  1931 ;; Defined at:
  1932 ;;		line 189 in file "color.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;		None
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;  value           2   46[BANK0 ] unsigned int 
  1937 ;;  i               2   48[BANK0 ] unsigned int 
  1938 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  1939 ;;  min_index       2   44[BANK0 ] unsigned int 
  1940 ;;  min_value       2   42[BANK0 ] unsigned int 
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  2   47[COMRAM] unsigned int 
  1943 ;; Registers used:
  1944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1952 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1953 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1954 ;;Total ram usage:       48 bytes
  1955 ;; Hardware stack levels used: 1
  1956 ;; Hardware stack levels required when called: 8
  1957 ;; This function calls:
  1958 ;;		___lldiv
  1959 ;;		___lmul
  1960 ;;		___wmul
  1961 ;;		_color_read_Blue
  1962 ;;		_color_read_Green
  1963 ;;		_color_read_Red
  1964 ;;		_get_color_distance
  1965 ;;		_set_led_color
  1966 ;; This function is called by:
  1967 ;;		_main
  1968 ;; This function uses a non-reentrant model
  1969 ;;
  1970                           
  1971                           	psect	text6
  1972   00070E                     __ptext6:
  1973                           	callstack 0
  1974   00070E                     _get_color_code:
  1975                           	callstack 22
  1976   00070E                     
  1977                           ;color.c: 193:     set_led_color(0b100);
  1978   00070E  0E00               	movlw	0
  1979   000710  6E0F               	movwf	(set_led_color@color+1)^0,c
  1980   000712  0E04               	movlw	4
  1981   000714  6E0E               	movwf	set_led_color@color^0,c
  1982   000716  EC8A  F010         	call	_set_led_color	;wreg free
  1983   00071A                     
  1984                           ;color.c: 194:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1985   00071A  0E12               	movlw	18
  1986   00071C  6E33               	movwf	(??_get_color_code+1)^0,c
  1987   00071E  0EDC               	movlw	220
  1988   000720  6E32               	movwf	??_get_color_code^0,c
  1989   000722  0E60               	movlw	96
  1990   000724                     u4277:
  1991   000724  2EE8               	decfsz	wreg,f,c
  1992   000726  D7FE               	bra	u4277
  1993   000728  2E32               	decfsz	??_get_color_code^0,f,c
  1994   00072A  D7FC               	bra	u4277
  1995   00072C  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  1996   00072E  D7FA               	bra	u4277
  1997   000730                     
  1998                           ;color.c: 195:     RGB.R = color_read_Red();
  1999   000730  EC55  F00F         	call	_color_read_Red	;wreg free
  2000   000734  C012  F0E6         	movff	?_color_read_Red,_RGB
  2001   000738  C013  F0E7         	movff	?_color_read_Red+1,_RGB+1
  2002   00073C  0100               	movlb	0	; () banked
  2003   00073E  6BE8               	clrf	(_RGB+2)& (0+255),b
  2004   000740  6BE9               	clrf	(_RGB+3)& (0+255),b
  2005   000742                     
  2006                           ; BSR set to: 0
  2007                           ;color.c: 196:     set_led_color(0b010);
  2008   000742  0E00               	movlw	0
  2009   000744  6E0F               	movwf	(set_led_color@color+1)^0,c
  2010   000746  0E02               	movlw	2
  2011   000748  6E0E               	movwf	set_led_color@color^0,c
  2012   00074A  EC8A  F010         	call	_set_led_color	;wreg free
  2013   00074E                     
  2014                           ;color.c: 197:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2015   00074E  0E12               	movlw	18
  2016   000750  6E33               	movwf	(??_get_color_code+1)^0,c
  2017   000752  0EDC               	movlw	220
  2018   000754  6E32               	movwf	??_get_color_code^0,c
  2019   000756  0E60               	movlw	96
  2020   000758                     u4287:
  2021   000758  2EE8               	decfsz	wreg,f,c
  2022   00075A  D7FE               	bra	u4287
  2023   00075C  2E32               	decfsz	??_get_color_code^0,f,c
  2024   00075E  D7FC               	bra	u4287
  2025   000760  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2026   000762  D7FA               	bra	u4287
  2027                           
  2028                           ;color.c: 198:     RGB.G = color_read_Green();
  2029   000764  EC7D  F00F         	call	_color_read_Green	;wreg free
  2030   000768  C012  F0EA         	movff	?_color_read_Green,_RGB+4
  2031   00076C  C013  F0EB         	movff	?_color_read_Green+1,_RGB+5
  2032   000770  0100               	movlb	0	; () banked
  2033   000772  6BEC               	clrf	(_RGB+6)& (0+255),b
  2034   000774  6BED               	clrf	(_RGB+7)& (0+255),b
  2035   000776                     
  2036                           ; BSR set to: 0
  2037                           ;color.c: 199:     set_led_color(0b001);
  2038   000776  0E00               	movlw	0
  2039   000778  6E0F               	movwf	(set_led_color@color+1)^0,c
  2040   00077A  0E01               	movlw	1
  2041   00077C  6E0E               	movwf	set_led_color@color^0,c
  2042   00077E  EC8A  F010         	call	_set_led_color	;wreg free
  2043   000782                     
  2044                           ;color.c: 200:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2045   000782  0E12               	movlw	18
  2046   000784  6E33               	movwf	(??_get_color_code+1)^0,c
  2047   000786  0EDC               	movlw	220
  2048   000788  6E32               	movwf	??_get_color_code^0,c
  2049   00078A  0E60               	movlw	96
  2050   00078C                     u4297:
  2051   00078C  2EE8               	decfsz	wreg,f,c
  2052   00078E  D7FE               	bra	u4297
  2053   000790  2E32               	decfsz	??_get_color_code^0,f,c
  2054   000792  D7FC               	bra	u4297
  2055   000794  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2056   000796  D7FA               	bra	u4297
  2057   000798                     
  2058                           ;color.c: 201:     RGB.B = color_read_Blue();
  2059   000798  ECCD  F00F         	call	_color_read_Blue	;wreg free
  2060   00079C  C012  F0EE         	movff	?_color_read_Blue,_RGB+8
  2061   0007A0  C013  F0EF         	movff	?_color_read_Blue+1,_RGB+9
  2062   0007A4  0100               	movlb	0	; () banked
  2063   0007A6  6BF0               	clrf	(_RGB+10)& (0+255),b
  2064   0007A8  6BF1               	clrf	(_RGB+11)& (0+255),b
  2065   0007AA                     
  2066                           ; BSR set to: 0
  2067                           ;color.c: 202:     set_led_color(0b000);
  2068   0007AA  0E00               	movlw	0
  2069   0007AC  6E0F               	movwf	(set_led_color@color+1)^0,c
  2070   0007AE  0E00               	movlw	0
  2071   0007B0  6E0E               	movwf	set_led_color@color^0,c
  2072   0007B2  EC8A  F010         	call	_set_led_color	;wreg free
  2073   0007B6                     
  2074                           ;color.c: 204:     struct RGB_val NormalizedRGB;;color.c: 205:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  2075   0007B6  5039               	movf	_Black_setup^0,w,c
  2076   0007B8  0100               	movlb	0	; () banked
  2077   0007BA  5DE6               	subwf	_RGB& (0+255),w,b
  2078   0007BC  503A               	movf	(_Black_setup+1)^0,w,c
  2079   0007BE  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2080   0007C0  503B               	movf	(_Black_setup+2)^0,w,c
  2081   0007C2  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2082   0007C4  503C               	movf	(_Black_setup+3)^0,w,c
  2083   0007C6  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2084   0007C8  B0D8               	btfsc	status,0,c
  2085   0007CA  EFE9  F003         	goto	u3411
  2086   0007CE  EFEB  F003         	goto	u3410
  2087   0007D2                     u3411:
  2088   0007D2  EFF5  F003         	goto	l4181
  2089   0007D6                     u3410:
  2090   0007D6                     
  2091                           ; BSR set to: 0
  2092   0007D6  0E00               	movlw	0
  2093   0007D8  6FC6               	movwf	_get_color_code$464& (0+255),b
  2094   0007DA  0E00               	movlw	0
  2095   0007DC  6FC7               	movwf	(_get_color_code$464+1)& (0+255),b
  2096   0007DE  0E00               	movlw	0
  2097   0007E0  6FC8               	movwf	(_get_color_code$464+2)& (0+255),b
  2098   0007E2  0E00               	movlw	0
  2099   0007E4  6FC9               	movwf	(_get_color_code$464+3)& (0+255),b
  2100   0007E6  EF2A  F004         	goto	l4183
  2101   0007EA                     l4181:
  2102                           
  2103                           ; BSR set to: 0
  2104   0007EA  5039               	movf	_Black_setup^0,w,c
  2105   0007EC  5DE6               	subwf	_RGB& (0+255),w,b
  2106   0007EE  6E0E               	movwf	___lmul@multiplier^0,c
  2107   0007F0  503A               	movf	(_Black_setup+1)^0,w,c
  2108   0007F2  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2109   0007F4  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2110   0007F6  503B               	movf	(_Black_setup+2)^0,w,c
  2111   0007F8  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2112   0007FA  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2113   0007FC  503C               	movf	(_Black_setup+3)^0,w,c
  2114   0007FE  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2115   000800  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2116   000802  0E64               	movlw	100
  2117   000804  6E12               	movwf	___lmul@multiplicand^0,c
  2118   000806  0E00               	movlw	0
  2119   000808  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2120   00080A  0E00               	movlw	0
  2121   00080C  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2122   00080E  0E00               	movlw	0
  2123   000810  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2124   000812  ECC1  F00E         	call	___lmul	;wreg free
  2125   000816  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2126   00081A  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2127   00081E  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2128   000822  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2129   000826  5039               	movf	_Black_setup^0,w,c
  2130   000828  0100               	movlb	0	; () banked
  2131   00082A  5D60               	subwf	_White_setup& (0+255),w,b
  2132   00082C  6E1E               	movwf	___lldiv@divisor^0,c
  2133   00082E  503A               	movf	(_Black_setup+1)^0,w,c
  2134   000830  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  2135   000832  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2136   000834  503B               	movf	(_Black_setup+2)^0,w,c
  2137   000836  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  2138   000838  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2139   00083A  503C               	movf	(_Black_setup+3)^0,w,c
  2140   00083C  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  2141   00083E  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2142   000840  ECF3  F00C         	call	___lldiv	;wreg free
  2143   000844  C01A  F0C6         	movff	?___lldiv,_get_color_code$464
  2144   000848  C01B  F0C7         	movff	?___lldiv+1,_get_color_code$464+1
  2145   00084C  C01C  F0C8         	movff	?___lldiv+2,_get_color_code$464+2
  2146   000850  C01D  F0C9         	movff	?___lldiv+3,_get_color_code$464+3
  2147   000854                     l4183:
  2148   000854  C0C6  F0DA         	movff	_get_color_code$464,get_color_code@NormalizedRGB
  2149   000858  C0C7  F0DB         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+1
  2150   00085C  C0C8  F0DC         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+2
  2151   000860  C0C9  F0DD         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+3
  2152   000864                     
  2153                           ;color.c: 206:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2154   000864  503D               	movf	(_Black_setup+4)^0,w,c
  2155   000866  0100               	movlb	0	; () banked
  2156   000868  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2157   00086A  503E               	movf	(_Black_setup+5)^0,w,c
  2158   00086C  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2159   00086E  503F               	movf	(_Black_setup+6)^0,w,c
  2160   000870  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2161   000872  5040               	movf	(_Black_setup+7)^0,w,c
  2162   000874  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2163   000876  B0D8               	btfsc	status,0,c
  2164   000878  EF40  F004         	goto	u3421
  2165   00087C  EF42  F004         	goto	u3420
  2166   000880                     u3421:
  2167   000880  EF4C  F004         	goto	l4189
  2168   000884                     u3420:
  2169   000884                     
  2170                           ; BSR set to: 0
  2171   000884  0E00               	movlw	0
  2172   000886  6FCA               	movwf	_get_color_code$465& (0+255),b
  2173   000888  0E00               	movlw	0
  2174   00088A  6FCB               	movwf	(_get_color_code$465+1)& (0+255),b
  2175   00088C  0E00               	movlw	0
  2176   00088E  6FCC               	movwf	(_get_color_code$465+2)& (0+255),b
  2177   000890  0E00               	movlw	0
  2178   000892  6FCD               	movwf	(_get_color_code$465+3)& (0+255),b
  2179   000894  EF81  F004         	goto	l4191
  2180   000898                     l4189:
  2181                           
  2182                           ; BSR set to: 0
  2183   000898  503D               	movf	(_Black_setup+4)^0,w,c
  2184   00089A  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2185   00089C  6E0E               	movwf	___lmul@multiplier^0,c
  2186   00089E  503E               	movf	(_Black_setup+5)^0,w,c
  2187   0008A0  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2188   0008A2  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2189   0008A4  503F               	movf	(_Black_setup+6)^0,w,c
  2190   0008A6  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2191   0008A8  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2192   0008AA  5040               	movf	(_Black_setup+7)^0,w,c
  2193   0008AC  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2194   0008AE  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2195   0008B0  0E64               	movlw	100
  2196   0008B2  6E12               	movwf	___lmul@multiplicand^0,c
  2197   0008B4  0E00               	movlw	0
  2198   0008B6  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2199   0008B8  0E00               	movlw	0
  2200   0008BA  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2201   0008BC  0E00               	movlw	0
  2202   0008BE  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2203   0008C0  ECC1  F00E         	call	___lmul	;wreg free
  2204   0008C4  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2205   0008C8  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2206   0008CC  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2207   0008D0  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2208   0008D4  503D               	movf	(_Black_setup+4)^0,w,c
  2209   0008D6  0100               	movlb	0	; () banked
  2210   0008D8  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  2211   0008DA  6E1E               	movwf	___lldiv@divisor^0,c
  2212   0008DC  503E               	movf	(_Black_setup+5)^0,w,c
  2213   0008DE  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  2214   0008E0  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2215   0008E2  503F               	movf	(_Black_setup+6)^0,w,c
  2216   0008E4  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  2217   0008E6  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2218   0008E8  5040               	movf	(_Black_setup+7)^0,w,c
  2219   0008EA  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  2220   0008EC  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2221   0008EE  ECF3  F00C         	call	___lldiv	;wreg free
  2222   0008F2  C01A  F0CA         	movff	?___lldiv,_get_color_code$465
  2223   0008F6  C01B  F0CB         	movff	?___lldiv+1,_get_color_code$465+1
  2224   0008FA  C01C  F0CC         	movff	?___lldiv+2,_get_color_code$465+2
  2225   0008FE  C01D  F0CD         	movff	?___lldiv+3,_get_color_code$465+3
  2226   000902                     l4191:
  2227   000902  C0CA  F0DE         	movff	_get_color_code$465,get_color_code@NormalizedRGB+4
  2228   000906  C0CB  F0DF         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+5
  2229   00090A  C0CC  F0E0         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+6
  2230   00090E  C0CD  F0E1         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+7
  2231   000912                     
  2232                           ;color.c: 207:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2233   000912  5041               	movf	(_Black_setup+8)^0,w,c
  2234   000914  0100               	movlb	0	; () banked
  2235   000916  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2236   000918  5042               	movf	(_Black_setup+9)^0,w,c
  2237   00091A  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2238   00091C  5043               	movf	(_Black_setup+10)^0,w,c
  2239   00091E  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2240   000920  5044               	movf	(_Black_setup+11)^0,w,c
  2241   000922  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2242   000924  B0D8               	btfsc	status,0,c
  2243   000926  EF97  F004         	goto	u3431
  2244   00092A  EF99  F004         	goto	u3430
  2245   00092E                     u3431:
  2246   00092E  EFA3  F004         	goto	l4197
  2247   000932                     u3430:
  2248   000932                     
  2249                           ; BSR set to: 0
  2250   000932  0E00               	movlw	0
  2251   000934  6FCE               	movwf	_get_color_code$466& (0+255),b
  2252   000936  0E00               	movlw	0
  2253   000938  6FCF               	movwf	(_get_color_code$466+1)& (0+255),b
  2254   00093A  0E00               	movlw	0
  2255   00093C  6FD0               	movwf	(_get_color_code$466+2)& (0+255),b
  2256   00093E  0E00               	movlw	0
  2257   000940  6FD1               	movwf	(_get_color_code$466+3)& (0+255),b
  2258   000942  EFD8  F004         	goto	l4199
  2259   000946                     l4197:
  2260                           
  2261                           ; BSR set to: 0
  2262   000946  5041               	movf	(_Black_setup+8)^0,w,c
  2263   000948  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2264   00094A  6E0E               	movwf	___lmul@multiplier^0,c
  2265   00094C  5042               	movf	(_Black_setup+9)^0,w,c
  2266   00094E  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2267   000950  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2268   000952  5043               	movf	(_Black_setup+10)^0,w,c
  2269   000954  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2270   000956  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2271   000958  5044               	movf	(_Black_setup+11)^0,w,c
  2272   00095A  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2273   00095C  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2274   00095E  0E64               	movlw	100
  2275   000960  6E12               	movwf	___lmul@multiplicand^0,c
  2276   000962  0E00               	movlw	0
  2277   000964  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2278   000966  0E00               	movlw	0
  2279   000968  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2280   00096A  0E00               	movlw	0
  2281   00096C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2282   00096E  ECC1  F00E         	call	___lmul	;wreg free
  2283   000972  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2284   000976  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2285   00097A  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2286   00097E  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2287   000982  5041               	movf	(_Black_setup+8)^0,w,c
  2288   000984  0100               	movlb	0	; () banked
  2289   000986  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  2290   000988  6E1E               	movwf	___lldiv@divisor^0,c
  2291   00098A  5042               	movf	(_Black_setup+9)^0,w,c
  2292   00098C  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  2293   00098E  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2294   000990  5043               	movf	(_Black_setup+10)^0,w,c
  2295   000992  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  2296   000994  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2297   000996  5044               	movf	(_Black_setup+11)^0,w,c
  2298   000998  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  2299   00099A  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2300   00099C  ECF3  F00C         	call	___lldiv	;wreg free
  2301   0009A0  C01A  F0CE         	movff	?___lldiv,_get_color_code$466
  2302   0009A4  C01B  F0CF         	movff	?___lldiv+1,_get_color_code$466+1
  2303   0009A8  C01C  F0D0         	movff	?___lldiv+2,_get_color_code$466+2
  2304   0009AC  C01D  F0D1         	movff	?___lldiv+3,_get_color_code$466+3
  2305   0009B0                     l4199:
  2306   0009B0  C0CE  F0E2         	movff	_get_color_code$466,get_color_code@NormalizedRGB+8
  2307   0009B4  C0CF  F0E3         	movff	_get_color_code$466+1,get_color_code@NormalizedRGB+9
  2308   0009B8  C0D0  F0E4         	movff	_get_color_code$466+2,get_color_code@NormalizedRGB+10
  2309   0009BC  C0D1  F0E5         	movff	_get_color_code$466+3,get_color_code@NormalizedRGB+11
  2310   0009C0                     
  2311                           ;color.c: 209:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2312   0009C0  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2313   0009C4  EE00  F014         	lfsr	0,get_color_distance@color1
  2314   0009C8  0E0B               	movlw	11
  2315   0009CA                     u3441:
  2316   0009CA  CFDB FFEB          	movff	plusw2,plusw0
  2317   0009CE  06E8               	decf	wreg,f,c
  2318   0009D0  E2FC               	bc	u3441
  2319   0009D2  EE21  F000         	lfsr	2,_Color_rules
  2320   0009D6  EE00  F020         	lfsr	0,get_color_distance@color2
  2321   0009DA  0E0B               	movlw	11
  2322   0009DC                     u3451:
  2323   0009DC  CFDB FFEB          	movff	plusw2,plusw0
  2324   0009E0  06E8               	decf	wreg,f,c
  2325   0009E2  E2FC               	bc	u3451
  2326   0009E4  EC4E  F007         	call	_get_color_distance	;wreg free
  2327   0009E8  C014  F0D2         	movff	?_get_color_distance,get_color_code@min_value
  2328   0009EC  C015  F0D3         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2329   0009F0                     
  2330                           ;color.c: 210:     unsigned int min_index = 0;
  2331   0009F0  0E00               	movlw	0
  2332   0009F2  0100               	movlb	0	; () banked
  2333   0009F4  6FD5               	movwf	(get_color_code@min_index+1)& (0+255),b
  2334   0009F6  0E00               	movlw	0
  2335   0009F8  6FD4               	movwf	get_color_code@min_index& (0+255),b
  2336   0009FA                     
  2337                           ; BSR set to: 0
  2338                           ;color.c: 211:     for(unsigned int i = 1;i < 9; i++){
  2339   0009FA  0E00               	movlw	0
  2340   0009FC  6FD9               	movwf	(get_color_code@i+1)& (0+255),b
  2341   0009FE  0E01               	movlw	1
  2342   000A00  6FD8               	movwf	get_color_code@i& (0+255),b
  2343   000A02                     l4211:
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;color.c: 212:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2347   000A02  C0D8  F00E         	movff	get_color_code@i,___wmul@multiplier
  2348   000A06  C0D9  F00F         	movff	get_color_code@i+1,___wmul@multiplier+1
  2349   000A0A  0E00               	movlw	0
  2350   000A0C  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  2351   000A0E  0E0C               	movlw	12
  2352   000A10  6E10               	movwf	___wmul@multiplicand^0,c
  2353   000A12  EC65  F011         	call	___wmul	;wreg free
  2354   000A16  0E00               	movlw	low _Color_rules
  2355   000A18  240E               	addwf	?___wmul^0,w,c
  2356   000A1A  6ED9               	movwf	fsr2l,c
  2357   000A1C  0E01               	movlw	high _Color_rules
  2358   000A1E  200F               	addwfc	(?___wmul+1)^0,w,c
  2359   000A20  6EDA               	movwf	fsr2h,c
  2360   000A22  EE10  F0BA         	lfsr	1,_get_color_code$2466
  2361   000A26  0E0B               	movlw	11
  2362   000A28                     u3461:
  2363   000A28  CFDB FFE3          	movff	plusw2,plusw1
  2364   000A2C  06E8               	decf	wreg,f,c
  2365   000A2E  E2FC               	bc	u3461
  2366   000A30                     
  2367                           ;color.c: 212:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2368   000A30  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2369   000A34  EE00  F014         	lfsr	0,get_color_distance@color1
  2370   000A38  0E0B               	movlw	11
  2371   000A3A                     u3471:
  2372   000A3A  CFDB FFEB          	movff	plusw2,plusw0
  2373   000A3E  06E8               	decf	wreg,f,c
  2374   000A40  E2FC               	bc	u3471
  2375   000A42  EE20  F0BA         	lfsr	2,_get_color_code$2466
  2376   000A46  EE00  F020         	lfsr	0,get_color_distance@color2
  2377   000A4A  0E0B               	movlw	11
  2378   000A4C                     u3481:
  2379   000A4C  CFDB FFEB          	movff	plusw2,plusw0
  2380   000A50  06E8               	decf	wreg,f,c
  2381   000A52  E2FC               	bc	u3481
  2382   000A54  EC4E  F007         	call	_get_color_distance	;wreg free
  2383   000A58  C014  F0D6         	movff	?_get_color_distance,get_color_code@value
  2384   000A5C  C015  F0D7         	movff	?_get_color_distance+1,get_color_code@value+1
  2385   000A60                     
  2386                           ;color.c: 213:         if(value < min_value){
  2387   000A60  0100               	movlb	0	; () banked
  2388   000A62  51D2               	movf	get_color_code@min_value& (0+255),w,b
  2389   000A64  5DD6               	subwf	get_color_code@value& (0+255),w,b
  2390   000A66  51D3               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2391   000A68  59D7               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2392   000A6A  B0D8               	btfsc	status,0,c
  2393   000A6C  EF3A  F005         	goto	u3491
  2394   000A70  EF3C  F005         	goto	u3490
  2395   000A74                     u3491:
  2396   000A74  EF44  F005         	goto	l4219
  2397   000A78                     u3490:
  2398   000A78                     
  2399                           ; BSR set to: 0
  2400                           ;color.c: 214:             min_index = i;
  2401   000A78  C0D8  F0D4         	movff	get_color_code@i,get_color_code@min_index
  2402   000A7C  C0D9  F0D5         	movff	get_color_code@i+1,get_color_code@min_index+1
  2403                           
  2404                           ;color.c: 215:             min_value = value;
  2405   000A80  C0D6  F0D2         	movff	get_color_code@value,get_color_code@min_value
  2406   000A84  C0D7  F0D3         	movff	get_color_code@value+1,get_color_code@min_value+1
  2407   000A88                     l4219:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;color.c: 217:     }
  2411   000A88  4BD8               	infsnz	get_color_code@i& (0+255),f,b
  2412   000A8A  2BD9               	incf	(get_color_code@i+1)& (0+255),f,b
  2413   000A8C                     
  2414                           ; BSR set to: 0
  2415   000A8C  51D9               	movf	(get_color_code@i+1)& (0+255),w,b
  2416   000A8E  E109               	bnz	u3500
  2417   000A90  0E09               	movlw	9
  2418   000A92  5DD8               	subwf	get_color_code@i& (0+255),w,b
  2419   000A94  A0D8               	btfss	status,0,c
  2420   000A96  EF4F  F005         	goto	u3501
  2421   000A9A  EF51  F005         	goto	u3500
  2422   000A9E                     u3501:
  2423   000A9E  EF01  F005         	goto	l4211
  2424   000AA2                     u3500:
  2425   000AA2                     
  2426                           ; BSR set to: 0
  2427                           ;color.c: 218:     return min_index;
  2428   000AA2  C0D4  F030         	movff	get_color_code@min_index,?_get_color_code
  2429   000AA6  C0D5  F031         	movff	get_color_code@min_index+1,?_get_color_code+1
  2430   000AAA                     
  2431                           ; BSR set to: 0
  2432   000AAA  0012               	return		;funcret
  2433   000AAC                     __end_of_get_color_code:
  2434                           	callstack 0
  2435                           
  2436 ;; *************** function _get_color_distance *****************
  2437 ;; Defined at:
  2438 ;;		line 155 in file "color.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;  color1         12   19[COMRAM] struct RGB_val
  2441 ;;  color2         12   31[COMRAM] struct RGB_val
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2444 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2445 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  2   19[COMRAM] unsigned int 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2455 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2457 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;Total ram usage:       46 bytes
  2460 ;; Hardware stack levels used: 1
  2461 ;; Hardware stack levels required when called: 6
  2462 ;; This function calls:
  2463 ;;		___wmul
  2464 ;; This function is called by:
  2465 ;;		_get_color_code
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text7
  2470   000E9C                     __ptext7:
  2471                           	callstack 0
  2472   000E9C                     _get_color_distance:
  2473                           	callstack 23
  2474   000E9C                     
  2475                           ;color.c: 156:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2476   000E9C  5020               	movf	get_color_distance@color2^0,w,c
  2477   000E9E  5C14               	subwf	get_color_distance@color1^0,w,c
  2478   000EA0  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2479   000EA2  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2480   000EA4  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2481   000EA6  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2482   000EA8  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2483   000EAA  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2484   000EAC  B0D8               	btfsc	status,0,c
  2485   000EAE  EF5B  F007         	goto	u3051
  2486   000EB2  EF5D  F007         	goto	u3050
  2487   000EB6                     u3051:
  2488   000EB6  EF6C  F007         	goto	l3801
  2489   000EBA                     u3050:
  2490   000EBA  5014               	movf	get_color_distance@color1^0,w,c
  2491   000EBC  5C20               	subwf	get_color_distance@color2^0,w,c
  2492   000EBE  0100               	movlb	0	; () banked
  2493   000EC0  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2494   000EC2  5015               	movf	(get_color_distance@color1+1)^0,w,c
  2495   000EC4  5821               	subwfb	(get_color_distance@color2+1)^0,w,c
  2496   000EC6  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2497   000EC8  5016               	movf	(get_color_distance@color1+2)^0,w,c
  2498   000ECA  5822               	subwfb	(get_color_distance@color2+2)^0,w,c
  2499   000ECC  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2500   000ECE  5017               	movf	(get_color_distance@color1+3)^0,w,c
  2501   000ED0  5823               	subwfb	(get_color_distance@color2+3)^0,w,c
  2502   000ED2  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2503   000ED4  EF79  F007         	goto	l3803
  2504   000ED8                     l3801:
  2505   000ED8  5020               	movf	get_color_distance@color2^0,w,c
  2506   000EDA  5C14               	subwf	get_color_distance@color1^0,w,c
  2507   000EDC  0100               	movlb	0	; () banked
  2508   000EDE  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2509   000EE0  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2510   000EE2  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2511   000EE4  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2512   000EE6  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2513   000EE8  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2514   000EEA  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2515   000EEC  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2516   000EEE  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2517   000EF0  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2518   000EF2                     l3803:
  2519                           
  2520                           ; BSR set to: 0
  2521   000EF2  C0A8  F0B4         	movff	_get_color_distance$422,get_color_distance@R_offset
  2522   000EF6  C0A9  F0B5         	movff	_get_color_distance$422+1,get_color_distance@R_offset+1
  2523                           
  2524                           ;color.c: 157:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2525   000EFA  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2526   000EFC  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2527   000EFE  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2528   000F00  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2529   000F02  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2530   000F04  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2531   000F06  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2532   000F08  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2533   000F0A  B0D8               	btfsc	status,0,c
  2534   000F0C  EF8A  F007         	goto	u3061
  2535   000F10  EF8C  F007         	goto	u3060
  2536   000F14                     u3061:
  2537   000F14  EF9A  F007         	goto	l3807
  2538   000F18                     u3060:
  2539   000F18                     
  2540                           ; BSR set to: 0
  2541   000F18  5018               	movf	(get_color_distance@color1+4)^0,w,c
  2542   000F1A  5C24               	subwf	(get_color_distance@color2+4)^0,w,c
  2543   000F1C  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2544   000F1E  5019               	movf	(get_color_distance@color1+5)^0,w,c
  2545   000F20  5825               	subwfb	(get_color_distance@color2+5)^0,w,c
  2546   000F22  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2547   000F24  501A               	movf	(get_color_distance@color1+6)^0,w,c
  2548   000F26  5826               	subwfb	(get_color_distance@color2+6)^0,w,c
  2549   000F28  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2550   000F2A  501B               	movf	(get_color_distance@color1+7)^0,w,c
  2551   000F2C  5827               	subwfb	(get_color_distance@color2+7)^0,w,c
  2552   000F2E  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2553   000F30  EFA6  F007         	goto	l3809
  2554   000F34                     l3807:
  2555                           
  2556                           ; BSR set to: 0
  2557   000F34  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2558   000F36  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2559   000F38  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2560   000F3A  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2561   000F3C  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2562   000F3E  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2563   000F40  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2564   000F42  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2565   000F44  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2566   000F46  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2567   000F48  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2568   000F4A  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2569   000F4C                     l3809:
  2570                           
  2571                           ; BSR set to: 0
  2572   000F4C  C0AC  F0B6         	movff	_get_color_distance$424,get_color_distance@G_offset
  2573   000F50  C0AD  F0B7         	movff	_get_color_distance$424+1,get_color_distance@G_offset+1
  2574                           
  2575                           ;color.c: 158:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2576   000F54  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2577   000F56  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2578   000F58  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2579   000F5A  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2580   000F5C  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2581   000F5E  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2582   000F60  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2583   000F62  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2584   000F64  B0D8               	btfsc	status,0,c
  2585   000F66  EFB7  F007         	goto	u3071
  2586   000F6A  EFB9  F007         	goto	u3070
  2587   000F6E                     u3071:
  2588   000F6E  EFC7  F007         	goto	l3813
  2589   000F72                     u3070:
  2590   000F72                     
  2591                           ; BSR set to: 0
  2592   000F72  501C               	movf	(get_color_distance@color1+8)^0,w,c
  2593   000F74  5C28               	subwf	(get_color_distance@color2+8)^0,w,c
  2594   000F76  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2595   000F78  501D               	movf	(get_color_distance@color1+9)^0,w,c
  2596   000F7A  5829               	subwfb	(get_color_distance@color2+9)^0,w,c
  2597   000F7C  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2598   000F7E  501E               	movf	(get_color_distance@color1+10)^0,w,c
  2599   000F80  582A               	subwfb	(get_color_distance@color2+10)^0,w,c
  2600   000F82  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2601   000F84  501F               	movf	(get_color_distance@color1+11)^0,w,c
  2602   000F86  582B               	subwfb	(get_color_distance@color2+11)^0,w,c
  2603   000F88  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2604   000F8A  EFD3  F007         	goto	l3815
  2605   000F8E                     l3813:
  2606                           
  2607                           ; BSR set to: 0
  2608   000F8E  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2609   000F90  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2610   000F92  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2611   000F94  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2612   000F96  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2613   000F98  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2614   000F9A  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2615   000F9C  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2616   000F9E  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2617   000FA0  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2618   000FA2  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2619   000FA4  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2620   000FA6                     l3815:
  2621                           
  2622                           ; BSR set to: 0
  2623   000FA6  C0B0  F0B8         	movff	_get_color_distance$426,get_color_distance@B_offset
  2624   000FAA  C0B1  F0B9         	movff	_get_color_distance$426+1,get_color_distance@B_offset+1
  2625   000FAE                     
  2626                           ; BSR set to: 0
  2627                           ;color.c: 160:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2628   000FAE  C0B4  F00E         	movff	get_color_distance@R_offset,___wmul@multiplier
  2629   000FB2  C0B5  F00F         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2630   000FB6  C0B4  F010         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2631   000FBA  C0B5  F011         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2632   000FBE  EC65  F011         	call	___wmul	;wreg free
  2633   000FC2  C00E  F02C         	movff	?___wmul,??_get_color_distance
  2634   000FC6  C00F  F02D         	movff	?___wmul+1,??_get_color_distance+1
  2635   000FCA  C0B6  F00E         	movff	get_color_distance@G_offset,___wmul@multiplier
  2636   000FCE  C0B7  F00F         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2637   000FD2  C0B6  F010         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2638   000FD6  C0B7  F011         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2639   000FDA  EC65  F011         	call	___wmul	;wreg free
  2640   000FDE  500E               	movf	?___wmul^0,w,c
  2641   000FE0  242C               	addwf	??_get_color_distance^0,w,c
  2642   000FE2  6E2E               	movwf	(??_get_color_distance+2)^0,c
  2643   000FE4  500F               	movf	(?___wmul+1)^0,w,c
  2644   000FE6  202D               	addwfc	(??_get_color_distance+1)^0,w,c
  2645   000FE8  6E2F               	movwf	(??_get_color_distance+3)^0,c
  2646   000FEA  C0B8  F00E         	movff	get_color_distance@B_offset,___wmul@multiplier
  2647   000FEE  C0B9  F00F         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2648   000FF2  C0B8  F010         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2649   000FF6  C0B9  F011         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2650   000FFA  EC65  F011         	call	___wmul	;wreg free
  2651   000FFE  500E               	movf	?___wmul^0,w,c
  2652   001000  242E               	addwf	(??_get_color_distance+2)^0,w,c
  2653   001002  6E14               	movwf	?_get_color_distance^0,c
  2654   001004  500F               	movf	(?___wmul+1)^0,w,c
  2655   001006  202F               	addwfc	(??_get_color_distance+3)^0,w,c
  2656   001008  6E15               	movwf	(?_get_color_distance+1)^0,c
  2657   00100A  0012               	return		;funcret
  2658   00100C                     __end_of_get_color_distance:
  2659                           	callstack 0
  2660                           
  2661 ;; *************** function ___lmul *****************
  2662 ;; Defined at:
  2663 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2664 ;; Parameters:    Size  Location     Type
  2665 ;;  multiplier      4   13[COMRAM] unsigned long 
  2666 ;;  multiplicand    4   17[COMRAM] unsigned long 
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;  product         4   21[COMRAM] unsigned long 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  4   13[COMRAM] unsigned long 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2678 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2681 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2682 ;;Total ram usage:       12 bytes
  2683 ;; Hardware stack levels used: 1
  2684 ;; Hardware stack levels required when called: 5
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_get_color_code
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text8
  2693   001D82                     __ptext8:
  2694                           	callstack 0
  2695   001D82                     ___lmul:
  2696                           	callstack 24
  2697   001D82  0E00               	movlw	0
  2698   001D84  6E16               	movwf	___lmul@product^0,c
  2699   001D86  0E00               	movlw	0
  2700   001D88  6E17               	movwf	(___lmul@product+1)^0,c
  2701   001D8A  0E00               	movlw	0
  2702   001D8C  6E18               	movwf	(___lmul@product+2)^0,c
  2703   001D8E  0E00               	movlw	0
  2704   001D90  6E19               	movwf	(___lmul@product+3)^0,c
  2705   001D92                     l4075:
  2706   001D92  A00E               	btfss	___lmul@multiplier^0,0,c
  2707   001D94  EFCE  F00E         	goto	u3221
  2708   001D98  EFD0  F00E         	goto	u3220
  2709   001D9C                     u3221:
  2710   001D9C  EFD8  F00E         	goto	l4079
  2711   001DA0                     u3220:
  2712   001DA0  5012               	movf	___lmul@multiplicand^0,w,c
  2713   001DA2  2616               	addwf	___lmul@product^0,f,c
  2714   001DA4  5013               	movf	(___lmul@multiplicand+1)^0,w,c
  2715   001DA6  2217               	addwfc	(___lmul@product+1)^0,f,c
  2716   001DA8  5014               	movf	(___lmul@multiplicand+2)^0,w,c
  2717   001DAA  2218               	addwfc	(___lmul@product+2)^0,f,c
  2718   001DAC  5015               	movf	(___lmul@multiplicand+3)^0,w,c
  2719   001DAE  2219               	addwfc	(___lmul@product+3)^0,f,c
  2720   001DB0                     l4079:
  2721   001DB0  90D8               	bcf	status,0,c
  2722   001DB2  3612               	rlcf	___lmul@multiplicand^0,f,c
  2723   001DB4  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2724   001DB6  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2725   001DB8  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2726   001DBA  90D8               	bcf	status,0,c
  2727   001DBC  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
  2728   001DBE  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
  2729   001DC0  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
  2730   001DC2  320E               	rrcf	___lmul@multiplier^0,f,c
  2731   001DC4  500E               	movf	___lmul@multiplier^0,w,c
  2732   001DC6  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
  2733   001DC8  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
  2734   001DCA  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
  2735   001DCC  A4D8               	btfss	status,2,c
  2736   001DCE  EFEB  F00E         	goto	u3231
  2737   001DD2  EFED  F00E         	goto	u3230
  2738   001DD6                     u3231:
  2739   001DD6  EFC9  F00E         	goto	l4075
  2740   001DDA                     u3230:
  2741   001DDA  C016  F00E         	movff	___lmul@product,?___lmul
  2742   001DDE  C017  F00F         	movff	___lmul@product+1,?___lmul+1
  2743   001DE2  C018  F010         	movff	___lmul@product+2,?___lmul+2
  2744   001DE6  C019  F011         	movff	___lmul@product+3,?___lmul+3
  2745   001DEA  0012               	return		;funcret
  2746   001DEC                     __end_of___lmul:
  2747                           	callstack 0
  2748                           
  2749 ;; *************** function ___lldiv *****************
  2750 ;; Defined at:
  2751 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  dividend        4   25[COMRAM] unsigned long 
  2754 ;;  divisor         4   29[COMRAM] unsigned long 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  quotient        4   33[COMRAM] unsigned long 
  2757 ;;  counter         1   37[COMRAM] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  4   25[COMRAM] unsigned long 
  2760 ;; Registers used:
  2761 ;;		wreg, status,2, status,0
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2767 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2770 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2771 ;;Total ram usage:       13 bytes
  2772 ;; Hardware stack levels used: 1
  2773 ;; Hardware stack levels required when called: 5
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_get_color_code
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text9
  2782   0019E6                     __ptext9:
  2783                           	callstack 0
  2784   0019E6                     ___lldiv:
  2785                           	callstack 24
  2786   0019E6  0E00               	movlw	0
  2787   0019E8  6E22               	movwf	___lldiv@quotient^0,c
  2788   0019EA  0E00               	movlw	0
  2789   0019EC  6E23               	movwf	(___lldiv@quotient+1)^0,c
  2790   0019EE  0E00               	movlw	0
  2791   0019F0  6E24               	movwf	(___lldiv@quotient+2)^0,c
  2792   0019F2  0E00               	movlw	0
  2793   0019F4  6E25               	movwf	(___lldiv@quotient+3)^0,c
  2794   0019F6  501E               	movf	___lldiv@divisor^0,w,c
  2795   0019F8  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
  2796   0019FA  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
  2797   0019FC  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
  2798   0019FE  B4D8               	btfsc	status,2,c
  2799   001A00  EF04  F00D         	goto	u3241
  2800   001A04  EF06  F00D         	goto	u3240
  2801   001A08                     u3241:
  2802   001A08  EF3C  F00D         	goto	l535
  2803   001A0C                     u3240:
  2804   001A0C  0E01               	movlw	1
  2805   001A0E  6E26               	movwf	___lldiv@counter^0,c
  2806   001A10  EF10  F00D         	goto	l4091
  2807   001A14                     l4089:
  2808   001A14  90D8               	bcf	status,0,c
  2809   001A16  361E               	rlcf	___lldiv@divisor^0,f,c
  2810   001A18  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
  2811   001A1A  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
  2812   001A1C  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
  2813   001A1E  2A26               	incf	___lldiv@counter^0,f,c
  2814   001A20                     l4091:
  2815   001A20  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
  2816   001A22  EF15  F00D         	goto	u3251
  2817   001A26  EF17  F00D         	goto	u3250
  2818   001A2A                     u3251:
  2819   001A2A  EF0A  F00D         	goto	l4089
  2820   001A2E                     u3250:
  2821   001A2E                     l4093:
  2822   001A2E  90D8               	bcf	status,0,c
  2823   001A30  3622               	rlcf	___lldiv@quotient^0,f,c
  2824   001A32  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
  2825   001A34  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
  2826   001A36  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
  2827   001A38  501E               	movf	___lldiv@divisor^0,w,c
  2828   001A3A  5C1A               	subwf	___lldiv@dividend^0,w,c
  2829   001A3C  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2830   001A3E  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
  2831   001A40  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2832   001A42  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
  2833   001A44  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2834   001A46  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
  2835   001A48  A0D8               	btfss	status,0,c
  2836   001A4A  EF29  F00D         	goto	u3261
  2837   001A4E  EF2B  F00D         	goto	u3260
  2838   001A52                     u3261:
  2839   001A52  EF34  F00D         	goto	l4101
  2840   001A56                     u3260:
  2841   001A56  501E               	movf	___lldiv@divisor^0,w,c
  2842   001A58  5E1A               	subwf	___lldiv@dividend^0,f,c
  2843   001A5A  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2844   001A5C  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
  2845   001A5E  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2846   001A60  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
  2847   001A62  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2848   001A64  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
  2849   001A66  8022               	bsf	___lldiv@quotient^0,0,c
  2850   001A68                     l4101:
  2851   001A68  90D8               	bcf	status,0,c
  2852   001A6A  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
  2853   001A6C  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
  2854   001A6E  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
  2855   001A70  321E               	rrcf	___lldiv@divisor^0,f,c
  2856   001A72  2E26               	decfsz	___lldiv@counter^0,f,c
  2857   001A74  EF17  F00D         	goto	l4093
  2858   001A78                     l535:
  2859   001A78  C022  F01A         	movff	___lldiv@quotient,?___lldiv
  2860   001A7C  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
  2861   001A80  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
  2862   001A84  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
  2863   001A88  0012               	return		;funcret
  2864   001A8A                     __end_of___lldiv:
  2865                           	callstack 0
  2866                           
  2867 ;; *************** function _fullSpeedAhead *****************
  2868 ;; Defined at:
  2869 ;;		line 268 in file "dc_motor.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2872 ;;		 -> main@motorL(9), 
  2873 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2874 ;;		 -> main@motorR(9), 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;		None
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2886 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2889 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2890 ;;Total ram usage:        4 bytes
  2891 ;; Hardware stack levels used: 1
  2892 ;; Hardware stack levels required when called: 7
  2893 ;; This function calls:
  2894 ;;		_setMotorPWM
  2895 ;; This function is called by:
  2896 ;;		_main
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text10
  2901   001E50                     __ptext10:
  2902                           	callstack 0
  2903   001E50                     _fullSpeedAhead:
  2904                           	callstack 23
  2905   001E50                     
  2906                           ;dc_motor.c: 268: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 269: {;dc_motor.c: 270:     seconds = 0;
  2907   001E50  0E00               	movlw	0
  2908   001E52  6E4A               	movwf	(_seconds+1)^0,c
  2909   001E54  0E00               	movlw	0
  2910   001E56  6E49               	movwf	_seconds^0,c
  2911   001E58                     
  2912                           ;dc_motor.c: 271:     (*mL).direction=0;
  2913   001E58  EE20 F001          	lfsr	2,1
  2914   001E5C  5021               	movf	fullSpeedAhead@mL^0,w,c
  2915   001E5E  26D9               	addwf	fsr2l,f,c
  2916   001E60  5022               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2917   001E62  22DA               	addwfc	fsr2h,f,c
  2918   001E64  0E00               	movlw	0
  2919   001E66  6EDF               	movwf	indf2,c
  2920   001E68                     
  2921                           ;dc_motor.c: 272:     (*mR).direction=0;
  2922   001E68  EE20 F001          	lfsr	2,1
  2923   001E6C  5023               	movf	fullSpeedAhead@mR^0,w,c
  2924   001E6E  26D9               	addwf	fsr2l,f,c
  2925   001E70  5024               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2926   001E72  22DA               	addwfc	fsr2h,f,c
  2927   001E74  0E00               	movlw	0
  2928   001E76  6EDF               	movwf	indf2,c
  2929   001E78                     
  2930                           ;dc_motor.c: 273:     (*mL).power=68;
  2931   001E78  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2932   001E7C  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2933   001E80  0E44               	movlw	68
  2934   001E82  6EDF               	movwf	indf2,c
  2935   001E84                     
  2936                           ;dc_motor.c: 274:     (*mR).power=68;
  2937   001E84  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2938   001E88  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2939   001E8C  0E44               	movlw	68
  2940   001E8E  6EDF               	movwf	indf2,c
  2941   001E90                     
  2942                           ;dc_motor.c: 275:     setMotorPWM(mL);
  2943   001E90  C021  F01B         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2944   001E94  C022  F01C         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2945   001E98  EC06  F008         	call	_setMotorPWM	;wreg free
  2946   001E9C                     
  2947                           ;dc_motor.c: 276:     setMotorPWM(mR);
  2948   001E9C  C023  F01B         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2949   001EA0  C024  F01C         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2950   001EA4  EC06  F008         	call	_setMotorPWM	;wreg free
  2951   001EA8  0012               	return		;funcret
  2952   001EAA                     __end_of_fullSpeedAhead:
  2953                           	callstack 0
  2954                           
  2955 ;; *************** function _color_click_init *****************
  2956 ;; Defined at:
  2957 ;;		line 39 in file "color.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;		None
  2960 ;; Auto vars:     Size  Location     Type
  2961 ;;		None
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2975 ;;Total ram usage:        1 bytes
  2976 ;; Hardware stack levels used: 1
  2977 ;; Hardware stack levels required when called: 9
  2978 ;; This function calls:
  2979 ;;		_I2C_2_Master_Init
  2980 ;;		_calibrate_black
  2981 ;;		_calibrate_white
  2982 ;;		_color_writetoaddr
  2983 ;; This function is called by:
  2984 ;;		_main
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text11
  2989   0016CC                     __ptext11:
  2990                           	callstack 0
  2991   0016CC                     _color_click_init:
  2992                           	callstack 21
  2993   0016CC                     
  2994                           ;color.c: 42:     I2C_2_Master_Init();
  2995   0016CC  EC28  F011         	call	_I2C_2_Master_Init	;wreg free
  2996   0016D0                     
  2997                           ;color.c: 45:   color_writetoaddr(0x00, 0x01);
  2998   0016D0  0E01               	movlw	1
  2999   0016D2  6E10               	movwf	color_writetoaddr@value^0,c
  3000   0016D4  0E00               	movlw	0
  3001   0016D6  EC78  F011         	call	_color_writetoaddr
  3002   0016DA                     
  3003                           ;color.c: 46:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3004   0016DA  0E3F               	movlw	63
  3005   0016DC  6E23               	movwf	??_color_click_init^0,c
  3006   0016DE  0E55               	movlw	85
  3007   0016E0                     u4307:
  3008   0016E0  2EE8               	decfsz	wreg,f,c
  3009   0016E2  D7FE               	bra	u4307
  3010   0016E4  2E23               	decfsz	??_color_click_init^0,f,c
  3011   0016E6  D7FC               	bra	u4307
  3012   0016E8  F000               	nop	
  3013   0016EA                     
  3014                           ;color.c: 49:  color_writetoaddr(0x00, 0x03);
  3015   0016EA  0E03               	movlw	3
  3016   0016EC  6E10               	movwf	color_writetoaddr@value^0,c
  3017   0016EE  0E00               	movlw	0
  3018   0016F0  EC78  F011         	call	_color_writetoaddr
  3019   0016F4                     
  3020                           ;color.c: 52:  color_writetoaddr(0x01, 0xD5);
  3021   0016F4  0ED5               	movlw	213
  3022   0016F6  6E10               	movwf	color_writetoaddr@value^0,c
  3023   0016F8  0E01               	movlw	1
  3024   0016FA  EC78  F011         	call	_color_writetoaddr
  3025   0016FE                     
  3026                           ;color.c: 54:     TRISFbits.TRISF7 = 0;
  3027   0016FE  9E86               	bcf	134,7,c	;volatile
  3028   001700                     
  3029                           ;color.c: 55:     TRISGbits.TRISG1 = 0;
  3030   001700  9287               	bcf	135,1,c	;volatile
  3031   001702                     
  3032                           ;color.c: 56:     TRISAbits.TRISA4 = 0;
  3033   001702  9881               	bcf	129,4,c	;volatile
  3034   001704                     
  3035                           ;color.c: 58:     Color_rules[0] = Red_rule;
  3036   001704  EE20  F090         	lfsr	2,_Red_rule
  3037   001708  EE11  F000         	lfsr	1,_Color_rules
  3038   00170C  0E0B               	movlw	11
  3039   00170E                     u3271:
  3040   00170E  CFDB FFE3          	movff	plusw2,plusw1
  3041   001712  06E8               	decf	wreg,f,c
  3042   001714  E2FC               	bc	u3271
  3043   001716                     
  3044                           ;color.c: 59:     Color_rules[1] = Green_rule;
  3045   001716  EE20  F084         	lfsr	2,_Green_rule
  3046   00171A  EE11  F00C         	lfsr	1,_Color_rules+12
  3047   00171E  0E0B               	movlw	11
  3048   001720                     u3281:
  3049   001720  CFDB FFE3          	movff	plusw2,plusw1
  3050   001724  06E8               	decf	wreg,f,c
  3051   001726  E2FC               	bc	u3281
  3052   001728                     
  3053                           ;color.c: 60:     Color_rules[2] = Blue_rule;
  3054   001728  EE20  F078         	lfsr	2,_Blue_rule
  3055   00172C  EE11  F018         	lfsr	1,_Color_rules+24
  3056   001730  0E0B               	movlw	11
  3057   001732                     u3291:
  3058   001732  CFDB FFE3          	movff	plusw2,plusw1
  3059   001736  06E8               	decf	wreg,f,c
  3060   001738  E2FC               	bc	u3291
  3061   00173A                     
  3062                           ;color.c: 61:     Color_rules[3] = Yellow_rule;
  3063   00173A  EE20  F06C         	lfsr	2,_Yellow_rule
  3064   00173E  EE11  F024         	lfsr	1,_Color_rules+36
  3065   001742  0E0B               	movlw	11
  3066   001744                     u3301:
  3067   001744  CFDB FFE3          	movff	plusw2,plusw1
  3068   001748  06E8               	decf	wreg,f,c
  3069   00174A  E2FC               	bc	u3301
  3070   00174C                     
  3071                           ;color.c: 62:     Color_rules[4] = Pink_rule;
  3072   00174C  EE21  F09C         	lfsr	2,_Pink_rule
  3073   001750  EE11  F030         	lfsr	1,_Color_rules+48
  3074   001754  0E0B               	movlw	11
  3075   001756                     u3311:
  3076   001756  CFDB FFE3          	movff	plusw2,plusw1
  3077   00175A  06E8               	decf	wreg,f,c
  3078   00175C  E2FC               	bc	u3311
  3079   00175E                     
  3080                           ;color.c: 63:     Color_rules[5] = Orange_rule;
  3081   00175E  EE21  F090         	lfsr	2,_Orange_rule
  3082   001762  EE11  F03C         	lfsr	1,_Color_rules+60
  3083   001766  0E0B               	movlw	11
  3084   001768                     u3321:
  3085   001768  CFDB FFE3          	movff	plusw2,plusw1
  3086   00176C  06E8               	decf	wreg,f,c
  3087   00176E  E2FC               	bc	u3321
  3088   001770                     
  3089                           ;color.c: 64:     Color_rules[6] = Lightblue_rule;
  3090   001770  EE21  F084         	lfsr	2,_Lightblue_rule
  3091   001774  EE11  F048         	lfsr	1,_Color_rules+72
  3092   001778  0E0B               	movlw	11
  3093   00177A                     u3331:
  3094   00177A  CFDB FFE3          	movff	plusw2,plusw1
  3095   00177E  06E8               	decf	wreg,f,c
  3096   001780  E2FC               	bc	u3331
  3097   001782                     
  3098                           ;color.c: 65:     Color_rules[7] = White_rule;
  3099   001782  EE21  F078         	lfsr	2,_White_rule
  3100   001786  EE11  F054         	lfsr	1,_Color_rules+84
  3101   00178A  0E0B               	movlw	11
  3102   00178C                     u3341:
  3103   00178C  CFDB FFE3          	movff	plusw2,plusw1
  3104   001790  06E8               	decf	wreg,f,c
  3105   001792  E2FC               	bc	u3341
  3106   001794                     
  3107                           ;color.c: 66:     Color_rules[8] = Black_rule;
  3108   001794  EE21  F06C         	lfsr	2,_Black_rule
  3109   001798  EE11  F060         	lfsr	1,_Color_rules+96
  3110   00179C  0E0B               	movlw	11
  3111   00179E                     u3351:
  3112   00179E  CFDB FFE3          	movff	plusw2,plusw1
  3113   0017A2  06E8               	decf	wreg,f,c
  3114   0017A4  E2FC               	bc	u3351
  3115   0017A6                     
  3116                           ;color.c: 75:     TRISFbits.TRISF3=1;
  3117   0017A6  8686               	bsf	134,3,c	;volatile
  3118   0017A8                     
  3119                           ;color.c: 76:     ANSELFbits.ANSELF3=0;
  3120   0017A8  010E               	movlb	14	; () banked
  3121   0017AA  97B4               	bcf	180,3,b	;volatile
  3122   0017AC                     
  3123                           ; BSR set to: 14
  3124                           ;color.c: 77:     TRISFbits.TRISF2=1;
  3125   0017AC  8486               	bsf	134,2,c	;volatile
  3126   0017AE                     
  3127                           ; BSR set to: 14
  3128                           ;color.c: 78:     ANSELFbits.ANSELF2=0;
  3129   0017AE  95B4               	bcf	180,2,b	;volatile
  3130   0017B0                     l76:
  3131   0017B0  A68E               	btfss	142,3,c	;volatile
  3132   0017B2  EFDD  F00B         	goto	u3361
  3133   0017B6  EFDF  F00B         	goto	u3360
  3134   0017BA                     u3361:
  3135   0017BA  EFE6  F00B         	goto	l80
  3136   0017BE                     u3360:
  3137   0017BE  B48E               	btfsc	142,2,c	;volatile
  3138   0017C0  EFE4  F00B         	goto	u3371
  3139   0017C4  EFE6  F00B         	goto	u3370
  3140   0017C8                     u3371:
  3141   0017C8  EFD8  F00B         	goto	l76
  3142   0017CC                     u3370:
  3143   0017CC                     l80:
  3144                           
  3145                           ;color.c: 81:     if(!PORTFbits.RF2){
  3146   0017CC  B48E               	btfsc	142,2,c	;volatile
  3147   0017CE  EFEB  F00B         	goto	u3381
  3148   0017D2  EFED  F00B         	goto	u3380
  3149   0017D6                     u3381:
  3150   0017D6  EFEF  F00B         	goto	l4155
  3151   0017DA                     u3380:
  3152   0017DA  EF01  F00C         	goto	l82
  3153   0017DE                     l4155:
  3154                           
  3155                           ;color.c: 84:     calibrate_white();
  3156   0017DE  EC9E  F00C         	call	_calibrate_white	;wreg free
  3157   0017E2                     l83:
  3158   0017E2  B68E               	btfsc	142,3,c	;volatile
  3159   0017E4  EFF6  F00B         	goto	u3391
  3160   0017E8  EFF8  F00B         	goto	u3390
  3161   0017EC                     u3391:
  3162   0017EC  EFF1  F00B         	goto	l83
  3163   0017F0                     u3390:
  3164   0017F0                     
  3165                           ;color.c: 86:     calibrate_black();
  3166   0017F0  EC02  F00C         	call	_calibrate_black	;wreg free
  3167   0017F4                     l86:
  3168   0017F4  B68E               	btfsc	142,3,c	;volatile
  3169   0017F6  EFFF  F00B         	goto	u3401
  3170   0017FA  EF01  F00C         	goto	u3400
  3171   0017FE                     u3401:
  3172   0017FE  EFFA  F00B         	goto	l86
  3173   001802                     u3400:
  3174   001802                     l82:
  3175   001802  0012               	return		;funcret
  3176   001804                     __end_of_color_click_init:
  3177                           	callstack 0
  3178                           
  3179 ;; *************** function _color_writetoaddr *****************
  3180 ;; Defined at:
  3181 ;;		line 91 in file "color.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  address         1    wreg     unsigned char 
  3184 ;;  value           1   15[COMRAM] unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  address         1   16[COMRAM] unsigned char 
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3196 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3200 ;;Total ram usage:        2 bytes
  3201 ;; Hardware stack levels used: 1
  3202 ;; Hardware stack levels required when called: 7
  3203 ;; This function calls:
  3204 ;;		_I2C_2_Master_Start
  3205 ;;		_I2C_2_Master_Stop
  3206 ;;		_I2C_2_Master_Write
  3207 ;; This function is called by:
  3208 ;;		_color_click_init
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text12
  3213   0022F0                     __ptext12:
  3214                           	callstack 0
  3215   0022F0                     _color_writetoaddr:
  3216                           	callstack 22
  3217                           
  3218                           ;incstack = 0
  3219                           ;color_writetoaddr@address stored from wreg
  3220   0022F0  6E11               	movwf	color_writetoaddr@address^0,c
  3221   0022F2                     
  3222                           ;color.c: 92:     I2C_2_Master_Start();
  3223   0022F2  ECC8  F011         	call	_I2C_2_Master_Start	;wreg free
  3224                           
  3225                           ;color.c: 93:     I2C_2_Master_Write(0x52 | 0x00);
  3226   0022F6  0E52               	movlw	82
  3227   0022F8  ECAC  F011         	call	_I2C_2_Master_Write
  3228                           
  3229                           ;color.c: 94:     I2C_2_Master_Write(0x80 | address);
  3230   0022FC  5011               	movf	color_writetoaddr@address^0,w,c
  3231   0022FE  0980               	iorlw	128
  3232   002300  ECAC  F011         	call	_I2C_2_Master_Write
  3233                           
  3234                           ;color.c: 95:     I2C_2_Master_Write(value);
  3235   002304  5010               	movf	color_writetoaddr@value^0,w,c
  3236   002306  ECAC  F011         	call	_I2C_2_Master_Write
  3237                           
  3238                           ;color.c: 96:     I2C_2_Master_Stop();
  3239   00230A  ECC3  F011         	call	_I2C_2_Master_Stop	;wreg free
  3240   00230E  0012               	return		;funcret
  3241   002310                     __end_of_color_writetoaddr:
  3242                           	callstack 0
  3243                           
  3244 ;; *************** function _calibrate_white *****************
  3245 ;; Defined at:
  3246 ;;		line 243 in file "color.c"
  3247 ;; Parameters:    Size  Location     Type
  3248 ;;		None
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;		None
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3262 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3263 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3264 ;;Total ram usage:        2 bytes
  3265 ;; Hardware stack levels used: 1
  3266 ;; Hardware stack levels required when called: 8
  3267 ;; This function calls:
  3268 ;;		_color_read_Blue
  3269 ;;		_color_read_Green
  3270 ;;		_color_read_Red
  3271 ;;		_set_led_color
  3272 ;; This function is called by:
  3273 ;;		_color_click_init
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text13
  3278   00193C                     __ptext13:
  3279                           	callstack 0
  3280   00193C                     _calibrate_white:
  3281                           	callstack 21
  3282   00193C                     
  3283                           ;color.c: 244:     set_led_color(0b100);
  3284   00193C  0E00               	movlw	0
  3285   00193E  6E0F               	movwf	(set_led_color@color+1)^0,c
  3286   001940  0E04               	movlw	4
  3287   001942  6E0E               	movwf	set_led_color@color^0,c
  3288   001944  EC8A  F010         	call	_set_led_color	;wreg free
  3289   001948                     
  3290                           ;color.c: 245:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3291   001948  0E12               	movlw	18
  3292   00194A  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3293   00194C  0EDC               	movlw	220
  3294   00194E  6E19               	movwf	??_calibrate_white^0,c
  3295   001950  0E60               	movlw	96
  3296   001952                     u4317:
  3297   001952  2EE8               	decfsz	wreg,f,c
  3298   001954  D7FE               	bra	u4317
  3299   001956  2E19               	decfsz	??_calibrate_white^0,f,c
  3300   001958  D7FC               	bra	u4317
  3301   00195A  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3302   00195C  D7FA               	bra	u4317
  3303   00195E                     
  3304                           ;color.c: 246:     White_setup.R = color_read_Red();
  3305   00195E  EC55  F00F         	call	_color_read_Red	;wreg free
  3306   001962  C012  F060         	movff	?_color_read_Red,_White_setup
  3307   001966  C013  F061         	movff	?_color_read_Red+1,_White_setup+1
  3308   00196A  0100               	movlb	0	; () banked
  3309   00196C  6B62               	clrf	(_White_setup+2)& (0+255),b
  3310   00196E  6B63               	clrf	(_White_setup+3)& (0+255),b
  3311   001970                     
  3312                           ; BSR set to: 0
  3313                           ;color.c: 247:     set_led_color(0b010);
  3314   001970  0E00               	movlw	0
  3315   001972  6E0F               	movwf	(set_led_color@color+1)^0,c
  3316   001974  0E02               	movlw	2
  3317   001976  6E0E               	movwf	set_led_color@color^0,c
  3318   001978  EC8A  F010         	call	_set_led_color	;wreg free
  3319   00197C                     
  3320                           ;color.c: 248:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3321   00197C  0E12               	movlw	18
  3322   00197E  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3323   001980  0EDC               	movlw	220
  3324   001982  6E19               	movwf	??_calibrate_white^0,c
  3325   001984  0E60               	movlw	96
  3326   001986                     u4327:
  3327   001986  2EE8               	decfsz	wreg,f,c
  3328   001988  D7FE               	bra	u4327
  3329   00198A  2E19               	decfsz	??_calibrate_white^0,f,c
  3330   00198C  D7FC               	bra	u4327
  3331   00198E  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3332   001990  D7FA               	bra	u4327
  3333                           
  3334                           ;color.c: 249:     White_setup.G = color_read_Green();
  3335   001992  EC7D  F00F         	call	_color_read_Green	;wreg free
  3336   001996  C012  F064         	movff	?_color_read_Green,_White_setup+4
  3337   00199A  C013  F065         	movff	?_color_read_Green+1,_White_setup+5
  3338   00199E  0100               	movlb	0	; () banked
  3339   0019A0  6B66               	clrf	(_White_setup+6)& (0+255),b
  3340   0019A2  6B67               	clrf	(_White_setup+7)& (0+255),b
  3341   0019A4                     
  3342                           ; BSR set to: 0
  3343                           ;color.c: 250:     set_led_color(0b001);
  3344   0019A4  0E00               	movlw	0
  3345   0019A6  6E0F               	movwf	(set_led_color@color+1)^0,c
  3346   0019A8  0E01               	movlw	1
  3347   0019AA  6E0E               	movwf	set_led_color@color^0,c
  3348   0019AC  EC8A  F010         	call	_set_led_color	;wreg free
  3349   0019B0                     
  3350                           ;color.c: 251:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3351   0019B0  0E12               	movlw	18
  3352   0019B2  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3353   0019B4  0EDC               	movlw	220
  3354   0019B6  6E19               	movwf	??_calibrate_white^0,c
  3355   0019B8  0E60               	movlw	96
  3356   0019BA                     u4337:
  3357   0019BA  2EE8               	decfsz	wreg,f,c
  3358   0019BC  D7FE               	bra	u4337
  3359   0019BE  2E19               	decfsz	??_calibrate_white^0,f,c
  3360   0019C0  D7FC               	bra	u4337
  3361   0019C2  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3362   0019C4  D7FA               	bra	u4337
  3363   0019C6                     
  3364                           ;color.c: 252:     White_setup.B = color_read_Blue();
  3365   0019C6  ECCD  F00F         	call	_color_read_Blue	;wreg free
  3366   0019CA  C012  F068         	movff	?_color_read_Blue,_White_setup+8
  3367   0019CE  C013  F069         	movff	?_color_read_Blue+1,_White_setup+9
  3368   0019D2  0100               	movlb	0	; () banked
  3369   0019D4  6B6A               	clrf	(_White_setup+10)& (0+255),b
  3370   0019D6  6B6B               	clrf	(_White_setup+11)& (0+255),b
  3371   0019D8                     
  3372                           ; BSR set to: 0
  3373                           ;color.c: 253:     set_led_color(0b000);
  3374   0019D8  0E00               	movlw	0
  3375   0019DA  6E0F               	movwf	(set_led_color@color+1)^0,c
  3376   0019DC  0E00               	movlw	0
  3377   0019DE  6E0E               	movwf	set_led_color@color^0,c
  3378   0019E0  EC8A  F010         	call	_set_led_color	;wreg free
  3379   0019E4  0012               	return		;funcret
  3380   0019E6                     __end_of_calibrate_white:
  3381                           	callstack 0
  3382                           
  3383 ;; *************** function _calibrate_black *****************
  3384 ;; Defined at:
  3385 ;;		line 223 in file "color.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  clear2          2   30[COMRAM] unsigned int 
  3390 ;;  clear1          2   28[COMRAM] unsigned int 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, status,2, status,0, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3403 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3404 ;;Total ram usage:        8 bytes
  3405 ;; Hardware stack levels used: 1
  3406 ;; Hardware stack levels required when called: 8
  3407 ;; This function calls:
  3408 ;;		___lwdiv
  3409 ;;		_color_read_Blue
  3410 ;;		_color_read_Clear
  3411 ;;		_color_read_Green
  3412 ;;		_color_read_Red
  3413 ;;		_set_led_color
  3414 ;; This function is called by:
  3415 ;;		_color_click_init
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text14
  3420   001804                     __ptext14:
  3421                           	callstack 0
  3422   001804                     _calibrate_black:
  3423                           	callstack 21
  3424   001804                     
  3425                           ;color.c: 224:     set_led_color(0b100);
  3426   001804  0E00               	movlw	0
  3427   001806  6E0F               	movwf	(set_led_color@color+1)^0,c
  3428   001808  0E04               	movlw	4
  3429   00180A  6E0E               	movwf	set_led_color@color^0,c
  3430   00180C  EC8A  F010         	call	_set_led_color	;wreg free
  3431   001810                     
  3432                           ;color.c: 225:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3433   001810  0E12               	movlw	18
  3434   001812  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3435   001814  0EDC               	movlw	220
  3436   001816  6E1B               	movwf	??_calibrate_black^0,c
  3437   001818  0E60               	movlw	96
  3438   00181A                     u4347:
  3439   00181A  2EE8               	decfsz	wreg,f,c
  3440   00181C  D7FE               	bra	u4347
  3441   00181E  2E1B               	decfsz	??_calibrate_black^0,f,c
  3442   001820  D7FC               	bra	u4347
  3443   001822  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3444   001824  D7FA               	bra	u4347
  3445   001826                     
  3446                           ;color.c: 226:     Black_setup.R = color_read_Red();
  3447   001826  EC55  F00F         	call	_color_read_Red	;wreg free
  3448   00182A  C012  F039         	movff	?_color_read_Red,_Black_setup
  3449   00182E  C013  F03A         	movff	?_color_read_Red+1,_Black_setup+1
  3450   001832  6A3B               	clrf	(_Black_setup+2)^0,c
  3451   001834  6A3C               	clrf	(_Black_setup+3)^0,c
  3452   001836                     
  3453                           ;color.c: 227:     set_led_color(0b010);
  3454   001836  0E00               	movlw	0
  3455   001838  6E0F               	movwf	(set_led_color@color+1)^0,c
  3456   00183A  0E02               	movlw	2
  3457   00183C  6E0E               	movwf	set_led_color@color^0,c
  3458   00183E  EC8A  F010         	call	_set_led_color	;wreg free
  3459   001842                     
  3460                           ;color.c: 228:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3461   001842  0E12               	movlw	18
  3462   001844  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3463   001846  0EDC               	movlw	220
  3464   001848  6E1B               	movwf	??_calibrate_black^0,c
  3465   00184A  0E60               	movlw	96
  3466   00184C                     u4357:
  3467   00184C  2EE8               	decfsz	wreg,f,c
  3468   00184E  D7FE               	bra	u4357
  3469   001850  2E1B               	decfsz	??_calibrate_black^0,f,c
  3470   001852  D7FC               	bra	u4357
  3471   001854  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3472   001856  D7FA               	bra	u4357
  3473                           
  3474                           ;color.c: 229:     Black_setup.G = color_read_Green();
  3475   001858  EC7D  F00F         	call	_color_read_Green	;wreg free
  3476   00185C  C012  F03D         	movff	?_color_read_Green,_Black_setup+4
  3477   001860  C013  F03E         	movff	?_color_read_Green+1,_Black_setup+5
  3478   001864  6A3F               	clrf	(_Black_setup+6)^0,c
  3479   001866  6A40               	clrf	(_Black_setup+7)^0,c
  3480   001868                     
  3481                           ;color.c: 230:     set_led_color(0b001);
  3482   001868  0E00               	movlw	0
  3483   00186A  6E0F               	movwf	(set_led_color@color+1)^0,c
  3484   00186C  0E01               	movlw	1
  3485   00186E  6E0E               	movwf	set_led_color@color^0,c
  3486   001870  EC8A  F010         	call	_set_led_color	;wreg free
  3487   001874                     
  3488                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3489   001874  0E12               	movlw	18
  3490   001876  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3491   001878  0EDC               	movlw	220
  3492   00187A  6E1B               	movwf	??_calibrate_black^0,c
  3493   00187C  0E60               	movlw	96
  3494   00187E                     u4367:
  3495   00187E  2EE8               	decfsz	wreg,f,c
  3496   001880  D7FE               	bra	u4367
  3497   001882  2E1B               	decfsz	??_calibrate_black^0,f,c
  3498   001884  D7FC               	bra	u4367
  3499   001886  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3500   001888  D7FA               	bra	u4367
  3501   00188A                     
  3502                           ;color.c: 232:     Black_setup.B = color_read_Blue();
  3503   00188A  ECCD  F00F         	call	_color_read_Blue	;wreg free
  3504   00188E  C012  F041         	movff	?_color_read_Blue,_Black_setup+8
  3505   001892  C013  F042         	movff	?_color_read_Blue+1,_Black_setup+9
  3506   001896  6A43               	clrf	(_Black_setup+10)^0,c
  3507   001898  6A44               	clrf	(_Black_setup+11)^0,c
  3508   00189A                     
  3509                           ;color.c: 233:     set_led_color(0b000);
  3510   00189A  0E00               	movlw	0
  3511   00189C  6E0F               	movwf	(set_led_color@color+1)^0,c
  3512   00189E  0E00               	movlw	0
  3513   0018A0  6E0E               	movwf	set_led_color@color^0,c
  3514   0018A2  EC8A  F010         	call	_set_led_color	;wreg free
  3515                           
  3516                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3517   0018A6  0E12               	movlw	18
  3518   0018A8  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3519   0018AA  0EDC               	movlw	220
  3520   0018AC  6E1B               	movwf	??_calibrate_black^0,c
  3521   0018AE  0E60               	movlw	96
  3522   0018B0                     u4377:
  3523   0018B0  2EE8               	decfsz	wreg,f,c
  3524   0018B2  D7FE               	bra	u4377
  3525   0018B4  2E1B               	decfsz	??_calibrate_black^0,f,c
  3526   0018B6  D7FC               	bra	u4377
  3527   0018B8  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3528   0018BA  D7FA               	bra	u4377
  3529   0018BC                     
  3530                           ;color.c: 235:     unsigned int clear1 = color_read_Clear();
  3531   0018BC  ECA5  F00F         	call	_color_read_Clear	;wreg free
  3532   0018C0  C012  F01D         	movff	?_color_read_Clear,calibrate_black@clear1
  3533   0018C4  C013  F01E         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3534   0018C8                     
  3535                           ;color.c: 236:     set_led_color(0b111);
  3536   0018C8  0E00               	movlw	0
  3537   0018CA  6E0F               	movwf	(set_led_color@color+1)^0,c
  3538   0018CC  0E07               	movlw	7
  3539   0018CE  6E0E               	movwf	set_led_color@color^0,c
  3540   0018D0  EC8A  F010         	call	_set_led_color	;wreg free
  3541   0018D4                     
  3542                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3543   0018D4  0E12               	movlw	18
  3544   0018D6  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3545   0018D8  0EDC               	movlw	220
  3546   0018DA  6E1B               	movwf	??_calibrate_black^0,c
  3547   0018DC  0E60               	movlw	96
  3548   0018DE                     u4387:
  3549   0018DE  2EE8               	decfsz	wreg,f,c
  3550   0018E0  D7FE               	bra	u4387
  3551   0018E2  2E1B               	decfsz	??_calibrate_black^0,f,c
  3552   0018E4  D7FC               	bra	u4387
  3553   0018E6  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3554   0018E8  D7FA               	bra	u4387
  3555   0018EA                     
  3556                           ;color.c: 238:     unsigned int clear2 = color_read_Clear();
  3557   0018EA  ECA5  F00F         	call	_color_read_Clear	;wreg free
  3558   0018EE  C012  F01F         	movff	?_color_read_Clear,calibrate_black@clear2
  3559   0018F2  C013  F020         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3560                           
  3561                           ;color.c: 239:     set_led_color(0b000);
  3562   0018F6  0E00               	movlw	0
  3563   0018F8  6E0F               	movwf	(set_led_color@color+1)^0,c
  3564   0018FA  0E00               	movlw	0
  3565   0018FC  6E0E               	movwf	set_led_color@color^0,c
  3566   0018FE  EC8A  F010         	call	_set_led_color	;wreg free
  3567   001902                     
  3568                           ;color.c: 240:     wall_coef = clear2/clear1/5;
  3569   001902  C01D  F016         	movff	calibrate_black@clear1,___lwdiv@divisor
  3570   001906  C01E  F017         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3571   00190A  C01F  F014         	movff	calibrate_black@clear2,___lwdiv@dividend
  3572   00190E  C020  F015         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3573   001912  EC4E  F00E         	call	___lwdiv	;wreg free
  3574   001916  C014  F021         	movff	?___lwdiv,_calibrate_black$2467
  3575   00191A  C015  F022         	movff	?___lwdiv+1,_calibrate_black$2467+1
  3576   00191E                     
  3577                           ;color.c: 240:     wall_coef = clear2/clear1/5;
  3578   00191E  C021  F014         	movff	_calibrate_black$2467,___lwdiv@dividend
  3579   001922  C022  F015         	movff	_calibrate_black$2467+1,___lwdiv@dividend+1
  3580   001926  0E00               	movlw	0
  3581   001928  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  3582   00192A  0E05               	movlw	5
  3583   00192C  6E16               	movwf	___lwdiv@divisor^0,c
  3584   00192E  EC4E  F00E         	call	___lwdiv	;wreg free
  3585   001932  C014  F0A6         	movff	?___lwdiv,_wall_coef
  3586   001936  C015  F0A7         	movff	?___lwdiv+1,_wall_coef+1
  3587   00193A  0012               	return		;funcret
  3588   00193C                     __end_of_calibrate_black:
  3589                           	callstack 0
  3590                           
  3591 ;; *************** function _set_led_color *****************
  3592 ;; Defined at:
  3593 ;;		line 163 in file "color.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;  color           2   13[COMRAM] unsigned int 
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		None
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3607 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3610 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3611 ;;Total ram usage:        2 bytes
  3612 ;; Hardware stack levels used: 1
  3613 ;; Hardware stack levels required when called: 5
  3614 ;; This function calls:
  3615 ;;		Nothing
  3616 ;; This function is called by:
  3617 ;;		_get_color_code
  3618 ;;		_calibrate_black
  3619 ;;		_calibrate_white
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text15
  3624   002114                     __ptext15:
  3625                           	callstack 0
  3626   002114                     _set_led_color:
  3627                           	callstack 24
  3628   002114                     
  3629                           ;color.c: 167:     if(color & 0b100){
  3630   002114  A40E               	btfss	set_led_color@color^0,2,c
  3631   002116  EF8F  F010         	goto	u3001
  3632   00211A  EF91  F010         	goto	u3000
  3633   00211E                     u3001:
  3634   00211E  EF94  F010         	goto	l121
  3635   002122                     u3000:
  3636   002122                     
  3637                           ;color.c: 168:         LATGbits.LATG1 = 1;
  3638   002122  827F               	bsf	127,1,c	;volatile
  3639                           
  3640                           ;color.c: 169:     }else{
  3641   002124  EF95  F010         	goto	l122
  3642   002128                     l121:
  3643                           
  3644                           ;color.c: 170:         LATGbits.LATG1 = 0;
  3645   002128  927F               	bcf	127,1,c	;volatile
  3646   00212A                     l122:
  3647                           
  3648                           ;color.c: 172:     if(color & 0b010){
  3649   00212A  A20E               	btfss	set_led_color@color^0,1,c
  3650   00212C  EF9A  F010         	goto	u3011
  3651   002130  EF9C  F010         	goto	u3010
  3652   002134                     u3011:
  3653   002134  EF9F  F010         	goto	l123
  3654   002138                     u3010:
  3655   002138                     
  3656                           ;color.c: 173:         LATAbits.LATA4 = 1;
  3657   002138  8879               	bsf	121,4,c	;volatile
  3658                           
  3659                           ;color.c: 174:     }else{
  3660   00213A  EFA0  F010         	goto	l124
  3661   00213E                     l123:
  3662                           
  3663                           ;color.c: 175:         LATAbits.LATA4 = 0;
  3664   00213E  9879               	bcf	121,4,c	;volatile
  3665   002140                     l124:
  3666                           
  3667                           ;color.c: 177:     if(color & 0b001){
  3668   002140  A00E               	btfss	set_led_color@color^0,0,c
  3669   002142  EFA5  F010         	goto	u3021
  3670   002146  EFA7  F010         	goto	u3020
  3671   00214A                     u3021:
  3672   00214A  EFAA  F010         	goto	l125
  3673   00214E                     u3020:
  3674   00214E                     
  3675                           ;color.c: 178:         LATFbits.LATF7 = 1;
  3676   00214E  8E7E               	bsf	126,7,c	;volatile
  3677                           
  3678                           ;color.c: 179:     }else{
  3679   002150  EFAB  F010         	goto	l127
  3680   002154                     l125:
  3681                           
  3682                           ;color.c: 180:         LATFbits.LATF7 = 0;
  3683   002154  9E7E               	bcf	126,7,c	;volatile
  3684   002156                     l127:
  3685   002156  0012               	return		;funcret
  3686   002158                     __end_of_set_led_color:
  3687                           	callstack 0
  3688                           
  3689 ;; *************** function _color_read_Red *****************
  3690 ;; Defined at:
  3691 ;;		line 99 in file "color.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  tmp             2   22[COMRAM] unsigned int 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  2   17[COMRAM] unsigned int 
  3698 ;; Registers used:
  3699 ;;		wreg, status,2, status,0, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3705 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3706 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3707 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3708 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3709 ;;Total ram usage:        7 bytes
  3710 ;; Hardware stack levels used: 1
  3711 ;; Hardware stack levels required when called: 7
  3712 ;; This function calls:
  3713 ;;		_I2C_2_Master_Read
  3714 ;;		_I2C_2_Master_RepStart
  3715 ;;		_I2C_2_Master_Start
  3716 ;;		_I2C_2_Master_Stop
  3717 ;;		_I2C_2_Master_Write
  3718 ;; This function is called by:
  3719 ;;		_get_color_code
  3720 ;;		_calibrate_black
  3721 ;;		_calibrate_white
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text16
  3726   001EAA                     __ptext16:
  3727                           	callstack 0
  3728   001EAA                     _color_read_Red:
  3729                           	callstack 22
  3730   001EAA                     
  3731                           ;color.c: 101:  unsigned int tmp;;color.c: 102:  I2C_2_Master_Start();
  3732   001EAA  ECC8  F011         	call	_I2C_2_Master_Start	;wreg free
  3733                           
  3734                           ;color.c: 103:  I2C_2_Master_Write(0x52 | 0x00);
  3735   001EAE  0E52               	movlw	82
  3736   001EB0  ECAC  F011         	call	_I2C_2_Master_Write
  3737                           
  3738                           ;color.c: 104:  I2C_2_Master_Write(0xA0 | 0x16);
  3739   001EB4  0EB6               	movlw	182
  3740   001EB6  ECAC  F011         	call	_I2C_2_Master_Write
  3741                           
  3742                           ;color.c: 105:  I2C_2_Master_RepStart();
  3743   001EBA  ECCD  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3744                           
  3745                           ;color.c: 106:  I2C_2_Master_Write(0x52 | 0x01);
  3746   001EBE  0E53               	movlw	83
  3747   001EC0  ECAC  F011         	call	_I2C_2_Master_Write
  3748                           
  3749                           ;color.c: 107:  tmp=I2C_2_Master_Read(1);
  3750   001EC4  0E01               	movlw	1
  3751   001EC6  ECCE  F010         	call	_I2C_2_Master_Read
  3752   001ECA  6E14               	movwf	??_color_read_Red^0,c
  3753   001ECC  5014               	movf	??_color_read_Red^0,w,c
  3754   001ECE  6E17               	movwf	color_read_Red@tmp^0,c
  3755   001ED0  6A18               	clrf	(color_read_Red@tmp+1)^0,c
  3756                           
  3757                           ;color.c: 108:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3758   001ED2  0E00               	movlw	0
  3759   001ED4  ECCE  F010         	call	_I2C_2_Master_Read
  3760   001ED8  6E14               	movwf	??_color_read_Red^0,c
  3761   001EDA  5014               	movf	??_color_read_Red^0,w,c
  3762   001EDC  6E16               	movwf	(??_color_read_Red+2)^0,c
  3763   001EDE  6A15               	clrf	(??_color_read_Red+1)^0,c
  3764   001EE0  5017               	movf	color_read_Red@tmp^0,w,c
  3765   001EE2  1015               	iorwf	(??_color_read_Red+1)^0,w,c
  3766   001EE4  6E17               	movwf	color_read_Red@tmp^0,c
  3767   001EE6  5018               	movf	(color_read_Red@tmp+1)^0,w,c
  3768   001EE8  1016               	iorwf	(??_color_read_Red+2)^0,w,c
  3769   001EEA  6E18               	movwf	(color_read_Red@tmp+1)^0,c
  3770                           
  3771                           ;color.c: 109:  I2C_2_Master_Stop();
  3772   001EEC  ECC3  F011         	call	_I2C_2_Master_Stop	;wreg free
  3773   001EF0                     
  3774                           ;color.c: 110:  return tmp;
  3775   001EF0  C017  F012         	movff	color_read_Red@tmp,?_color_read_Red
  3776   001EF4  C018  F013         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3777   001EF8  0012               	return		;funcret
  3778   001EFA                     __end_of_color_read_Red:
  3779                           	callstack 0
  3780                           
  3781 ;; *************** function _color_read_Green *****************
  3782 ;; Defined at:
  3783 ;;		line 127 in file "color.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;		None
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  tmp             2   22[COMRAM] unsigned int 
  3788 ;; Return value:  Size  Location     Type
  3789 ;;                  2   17[COMRAM] unsigned int 
  3790 ;; Registers used:
  3791 ;;		wreg, status,2, status,0, cstack
  3792 ;; Tracked objects:
  3793 ;;		On entry : 0/0
  3794 ;;		On exit  : 0/0
  3795 ;;		Unchanged: 0/0
  3796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3797 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3799 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3800 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3801 ;;Total ram usage:        7 bytes
  3802 ;; Hardware stack levels used: 1
  3803 ;; Hardware stack levels required when called: 7
  3804 ;; This function calls:
  3805 ;;		_I2C_2_Master_Read
  3806 ;;		_I2C_2_Master_RepStart
  3807 ;;		_I2C_2_Master_Start
  3808 ;;		_I2C_2_Master_Stop
  3809 ;;		_I2C_2_Master_Write
  3810 ;; This function is called by:
  3811 ;;		_get_color_code
  3812 ;;		_calibrate_black
  3813 ;;		_calibrate_white
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text17
  3818   001EFA                     __ptext17:
  3819                           	callstack 0
  3820   001EFA                     _color_read_Green:
  3821                           	callstack 22
  3822   001EFA                     
  3823                           ;color.c: 129:  unsigned int tmp;;color.c: 130:  I2C_2_Master_Start();
  3824   001EFA  ECC8  F011         	call	_I2C_2_Master_Start	;wreg free
  3825                           
  3826                           ;color.c: 131:  I2C_2_Master_Write(0x52 | 0x00);
  3827   001EFE  0E52               	movlw	82
  3828   001F00  ECAC  F011         	call	_I2C_2_Master_Write
  3829                           
  3830                           ;color.c: 132:  I2C_2_Master_Write(0xA0 | 0x18);
  3831   001F04  0EB8               	movlw	184
  3832   001F06  ECAC  F011         	call	_I2C_2_Master_Write
  3833                           
  3834                           ;color.c: 133:  I2C_2_Master_RepStart();
  3835   001F0A  ECCD  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3836                           
  3837                           ;color.c: 134:  I2C_2_Master_Write(0x52 | 0x01);
  3838   001F0E  0E53               	movlw	83
  3839   001F10  ECAC  F011         	call	_I2C_2_Master_Write
  3840                           
  3841                           ;color.c: 135:  tmp=I2C_2_Master_Read(1);
  3842   001F14  0E01               	movlw	1
  3843   001F16  ECCE  F010         	call	_I2C_2_Master_Read
  3844   001F1A  6E14               	movwf	??_color_read_Green^0,c
  3845   001F1C  5014               	movf	??_color_read_Green^0,w,c
  3846   001F1E  6E17               	movwf	color_read_Green@tmp^0,c
  3847   001F20  6A18               	clrf	(color_read_Green@tmp+1)^0,c
  3848                           
  3849                           ;color.c: 136:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3850   001F22  0E00               	movlw	0
  3851   001F24  ECCE  F010         	call	_I2C_2_Master_Read
  3852   001F28  6E14               	movwf	??_color_read_Green^0,c
  3853   001F2A  5014               	movf	??_color_read_Green^0,w,c
  3854   001F2C  6E16               	movwf	(??_color_read_Green+2)^0,c
  3855   001F2E  6A15               	clrf	(??_color_read_Green+1)^0,c
  3856   001F30  5017               	movf	color_read_Green@tmp^0,w,c
  3857   001F32  1015               	iorwf	(??_color_read_Green+1)^0,w,c
  3858   001F34  6E17               	movwf	color_read_Green@tmp^0,c
  3859   001F36  5018               	movf	(color_read_Green@tmp+1)^0,w,c
  3860   001F38  1016               	iorwf	(??_color_read_Green+2)^0,w,c
  3861   001F3A  6E18               	movwf	(color_read_Green@tmp+1)^0,c
  3862                           
  3863                           ;color.c: 137:  I2C_2_Master_Stop();
  3864   001F3C  ECC3  F011         	call	_I2C_2_Master_Stop	;wreg free
  3865   001F40                     
  3866                           ;color.c: 138:  return tmp;
  3867   001F40  C017  F012         	movff	color_read_Green@tmp,?_color_read_Green
  3868   001F44  C018  F013         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3869   001F48  0012               	return		;funcret
  3870   001F4A                     __end_of_color_read_Green:
  3871                           	callstack 0
  3872                           
  3873 ;; *************** function _color_read_Clear *****************
  3874 ;; Defined at:
  3875 ;;		line 141 in file "color.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;		None
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  tmp             2   22[COMRAM] unsigned int 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  2   17[COMRAM] unsigned int 
  3882 ;; Registers used:
  3883 ;;		wreg, status,2, status,0, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3889 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3891 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3892 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3893 ;;Total ram usage:        7 bytes
  3894 ;; Hardware stack levels used: 1
  3895 ;; Hardware stack levels required when called: 7
  3896 ;; This function calls:
  3897 ;;		_I2C_2_Master_Read
  3898 ;;		_I2C_2_Master_RepStart
  3899 ;;		_I2C_2_Master_Start
  3900 ;;		_I2C_2_Master_Stop
  3901 ;;		_I2C_2_Master_Write
  3902 ;; This function is called by:
  3903 ;;		_calibrate_black
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text18
  3908   001F4A                     __ptext18:
  3909                           	callstack 0
  3910   001F4A                     _color_read_Clear:
  3911                           	callstack 21
  3912   001F4A                     
  3913                           ;color.c: 143:  unsigned int tmp;;color.c: 144:  I2C_2_Master_Start();
  3914   001F4A  ECC8  F011         	call	_I2C_2_Master_Start	;wreg free
  3915                           
  3916                           ;color.c: 145:  I2C_2_Master_Write(0x52 | 0x00);
  3917   001F4E  0E52               	movlw	82
  3918   001F50  ECAC  F011         	call	_I2C_2_Master_Write
  3919                           
  3920                           ;color.c: 146:  I2C_2_Master_Write(0xA0 | 0x14);
  3921   001F54  0EB4               	movlw	180
  3922   001F56  ECAC  F011         	call	_I2C_2_Master_Write
  3923                           
  3924                           ;color.c: 147:  I2C_2_Master_RepStart();
  3925   001F5A  ECCD  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3926                           
  3927                           ;color.c: 148:  I2C_2_Master_Write(0x52 | 0x01);
  3928   001F5E  0E53               	movlw	83
  3929   001F60  ECAC  F011         	call	_I2C_2_Master_Write
  3930                           
  3931                           ;color.c: 149:  tmp=I2C_2_Master_Read(1);
  3932   001F64  0E01               	movlw	1
  3933   001F66  ECCE  F010         	call	_I2C_2_Master_Read
  3934   001F6A  6E14               	movwf	??_color_read_Clear^0,c
  3935   001F6C  5014               	movf	??_color_read_Clear^0,w,c
  3936   001F6E  6E17               	movwf	color_read_Clear@tmp^0,c
  3937   001F70  6A18               	clrf	(color_read_Clear@tmp+1)^0,c
  3938                           
  3939                           ;color.c: 150:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3940   001F72  0E00               	movlw	0
  3941   001F74  ECCE  F010         	call	_I2C_2_Master_Read
  3942   001F78  6E14               	movwf	??_color_read_Clear^0,c
  3943   001F7A  5014               	movf	??_color_read_Clear^0,w,c
  3944   001F7C  6E16               	movwf	(??_color_read_Clear+2)^0,c
  3945   001F7E  6A15               	clrf	(??_color_read_Clear+1)^0,c
  3946   001F80  5017               	movf	color_read_Clear@tmp^0,w,c
  3947   001F82  1015               	iorwf	(??_color_read_Clear+1)^0,w,c
  3948   001F84  6E17               	movwf	color_read_Clear@tmp^0,c
  3949   001F86  5018               	movf	(color_read_Clear@tmp+1)^0,w,c
  3950   001F88  1016               	iorwf	(??_color_read_Clear+2)^0,w,c
  3951   001F8A  6E18               	movwf	(color_read_Clear@tmp+1)^0,c
  3952                           
  3953                           ;color.c: 151:  I2C_2_Master_Stop();
  3954   001F8C  ECC3  F011         	call	_I2C_2_Master_Stop	;wreg free
  3955   001F90                     
  3956                           ;color.c: 152:  return tmp;
  3957   001F90  C017  F012         	movff	color_read_Clear@tmp,?_color_read_Clear
  3958   001F94  C018  F013         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3959   001F98  0012               	return		;funcret
  3960   001F9A                     __end_of_color_read_Clear:
  3961                           	callstack 0
  3962                           
  3963 ;; *************** function _color_read_Blue *****************
  3964 ;; Defined at:
  3965 ;;		line 113 in file "color.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  tmp             2   22[COMRAM] unsigned int 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  2   17[COMRAM] unsigned int 
  3972 ;; Registers used:
  3973 ;;		wreg, status,2, status,0, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3979 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3981 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3982 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3983 ;;Total ram usage:        7 bytes
  3984 ;; Hardware stack levels used: 1
  3985 ;; Hardware stack levels required when called: 7
  3986 ;; This function calls:
  3987 ;;		_I2C_2_Master_Read
  3988 ;;		_I2C_2_Master_RepStart
  3989 ;;		_I2C_2_Master_Start
  3990 ;;		_I2C_2_Master_Stop
  3991 ;;		_I2C_2_Master_Write
  3992 ;; This function is called by:
  3993 ;;		_get_color_code
  3994 ;;		_calibrate_black
  3995 ;;		_calibrate_white
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text19
  4000   001F9A                     __ptext19:
  4001                           	callstack 0
  4002   001F9A                     _color_read_Blue:
  4003                           	callstack 22
  4004   001F9A                     
  4005                           ;color.c: 115:  unsigned int tmp;;color.c: 116:  I2C_2_Master_Start();
  4006   001F9A  ECC8  F011         	call	_I2C_2_Master_Start	;wreg free
  4007                           
  4008                           ;color.c: 117:  I2C_2_Master_Write(0x52 | 0x00);
  4009   001F9E  0E52               	movlw	82
  4010   001FA0  ECAC  F011         	call	_I2C_2_Master_Write
  4011                           
  4012                           ;color.c: 118:  I2C_2_Master_Write(0xA0 | 0x1A);
  4013   001FA4  0EBA               	movlw	186
  4014   001FA6  ECAC  F011         	call	_I2C_2_Master_Write
  4015                           
  4016                           ;color.c: 119:  I2C_2_Master_RepStart();
  4017   001FAA  ECCD  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4018                           
  4019                           ;color.c: 120:  I2C_2_Master_Write(0x52 | 0x01);
  4020   001FAE  0E53               	movlw	83
  4021   001FB0  ECAC  F011         	call	_I2C_2_Master_Write
  4022                           
  4023                           ;color.c: 121:  tmp=I2C_2_Master_Read(1);
  4024   001FB4  0E01               	movlw	1
  4025   001FB6  ECCE  F010         	call	_I2C_2_Master_Read
  4026   001FBA  6E14               	movwf	??_color_read_Blue^0,c
  4027   001FBC  5014               	movf	??_color_read_Blue^0,w,c
  4028   001FBE  6E17               	movwf	color_read_Blue@tmp^0,c
  4029   001FC0  6A18               	clrf	(color_read_Blue@tmp+1)^0,c
  4030                           
  4031                           ;color.c: 122:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4032   001FC2  0E00               	movlw	0
  4033   001FC4  ECCE  F010         	call	_I2C_2_Master_Read
  4034   001FC8  6E14               	movwf	??_color_read_Blue^0,c
  4035   001FCA  5014               	movf	??_color_read_Blue^0,w,c
  4036   001FCC  6E16               	movwf	(??_color_read_Blue+2)^0,c
  4037   001FCE  6A15               	clrf	(??_color_read_Blue+1)^0,c
  4038   001FD0  5017               	movf	color_read_Blue@tmp^0,w,c
  4039   001FD2  1015               	iorwf	(??_color_read_Blue+1)^0,w,c
  4040   001FD4  6E17               	movwf	color_read_Blue@tmp^0,c
  4041   001FD6  5018               	movf	(color_read_Blue@tmp+1)^0,w,c
  4042   001FD8  1016               	iorwf	(??_color_read_Blue+2)^0,w,c
  4043   001FDA  6E18               	movwf	(color_read_Blue@tmp+1)^0,c
  4044                           
  4045                           ;color.c: 123:  I2C_2_Master_Stop();
  4046   001FDC  ECC3  F011         	call	_I2C_2_Master_Stop	;wreg free
  4047   001FE0                     
  4048                           ;color.c: 124:  return tmp;
  4049   001FE0  C017  F012         	movff	color_read_Blue@tmp,?_color_read_Blue
  4050   001FE4  C018  F013         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4051   001FE8  0012               	return		;funcret
  4052   001FEA                     __end_of_color_read_Blue:
  4053                           	callstack 0
  4054                           
  4055 ;; *************** function _I2C_2_Master_Write *****************
  4056 ;; Defined at:
  4057 ;;		line 45 in file "i2c.c"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  data_byte       1    wreg     unsigned char 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;  data_byte       1   14[COMRAM] unsigned char 
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, status,2, status,0, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;Total ram usage:        1 bytes
  4076 ;; Hardware stack levels used: 1
  4077 ;; Hardware stack levels required when called: 6
  4078 ;; This function calls:
  4079 ;;		_I2C_2_Master_Idle
  4080 ;; This function is called by:
  4081 ;;		_color_writetoaddr
  4082 ;;		_color_read_Red
  4083 ;;		_color_read_Blue
  4084 ;;		_color_read_Green
  4085 ;;		_color_read_Clear
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text20
  4090   002358                     __ptext20:
  4091                           	callstack 0
  4092   002358                     _I2C_2_Master_Write:
  4093                           	callstack 22
  4094                           
  4095                           ;incstack = 0
  4096                           ;I2C_2_Master_Write@data_byte stored from wreg
  4097   002358  6E0F               	movwf	I2C_2_Master_Write@data_byte^0,c
  4098   00235A                     
  4099                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4100   00235A  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4101   00235E                     
  4102                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4103   00235E  C00F  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4104   002362  0012               	return		;funcret
  4105   002364                     __end_of_I2C_2_Master_Write:
  4106                           	callstack 0
  4107                           
  4108 ;; *************** function _I2C_2_Master_Stop *****************
  4109 ;; Defined at:
  4110 ;;		line 39 in file "i2c.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;		None
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;Total ram usage:        0 bytes
  4129 ;; Hardware stack levels used: 1
  4130 ;; Hardware stack levels required when called: 6
  4131 ;; This function calls:
  4132 ;;		_I2C_2_Master_Idle
  4133 ;; This function is called by:
  4134 ;;		_color_writetoaddr
  4135 ;;		_color_read_Red
  4136 ;;		_color_read_Blue
  4137 ;;		_color_read_Green
  4138 ;;		_color_read_Clear
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text21
  4143   002386                     __ptext21:
  4144                           	callstack 0
  4145   002386                     _I2C_2_Master_Stop:
  4146                           	callstack 22
  4147   002386                     
  4148                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4149   002386  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4150   00238A                     
  4151                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4152   00238A  010E               	movlb	14	; () banked
  4153   00238C  85DA               	bsf	218,2,b	;volatile
  4154   00238E                     
  4155                           ; BSR set to: 14
  4156   00238E  0012               	return		;funcret
  4157   002390                     __end_of_I2C_2_Master_Stop:
  4158                           	callstack 0
  4159                           
  4160 ;; *************** function _I2C_2_Master_Start *****************
  4161 ;; Defined at:
  4162 ;;		line 27 in file "i2c.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 6
  4183 ;; This function calls:
  4184 ;;		_I2C_2_Master_Idle
  4185 ;; This function is called by:
  4186 ;;		_color_writetoaddr
  4187 ;;		_color_read_Red
  4188 ;;		_color_read_Blue
  4189 ;;		_color_read_Green
  4190 ;;		_color_read_Clear
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text22
  4195   002390                     __ptext22:
  4196                           	callstack 0
  4197   002390                     _I2C_2_Master_Start:
  4198                           	callstack 22
  4199   002390                     
  4200                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4201   002390  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4202   002394                     
  4203                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4204   002394  010E               	movlb	14	; () banked
  4205   002396  81DA               	bsf	218,0,b	;volatile
  4206   002398                     
  4207                           ; BSR set to: 14
  4208   002398  0012               	return		;funcret
  4209   00239A                     __end_of_I2C_2_Master_Start:
  4210                           	callstack 0
  4211                           
  4212 ;; *************** function _I2C_2_Master_RepStart *****************
  4213 ;; Defined at:
  4214 ;;		line 33 in file "i2c.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used: 1
  4234 ;; Hardware stack levels required when called: 6
  4235 ;; This function calls:
  4236 ;;		_I2C_2_Master_Idle
  4237 ;; This function is called by:
  4238 ;;		_color_read_Red
  4239 ;;		_color_read_Blue
  4240 ;;		_color_read_Green
  4241 ;;		_color_read_Clear
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text23
  4246   00239A                     __ptext23:
  4247                           	callstack 0
  4248   00239A                     _I2C_2_Master_RepStart:
  4249                           	callstack 22
  4250   00239A                     
  4251                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4252   00239A  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4253   00239E                     
  4254                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4255   00239E  010E               	movlb	14	; () banked
  4256   0023A0  83DA               	bsf	218,1,b	;volatile
  4257   0023A2                     
  4258                           ; BSR set to: 14
  4259   0023A2  0012               	return		;funcret
  4260   0023A4                     __end_of_I2C_2_Master_RepStart:
  4261                           	callstack 0
  4262                           
  4263 ;; *************** function _I2C_2_Master_Read *****************
  4264 ;; Defined at:
  4265 ;;		line 51 in file "i2c.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  ack             1    wreg     unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  ack             1   15[COMRAM] unsigned char 
  4270 ;;  tmp             1   16[COMRAM] unsigned char 
  4271 ;; Return value:  Size  Location     Type
  4272 ;;                  1    wreg      unsigned char 
  4273 ;; Registers used:
  4274 ;;		wreg, status,2, status,0, cstack
  4275 ;; Tracked objects:
  4276 ;;		On entry : 0/0
  4277 ;;		On exit  : 0/0
  4278 ;;		Unchanged: 0/0
  4279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4281 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4282 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4283 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4284 ;;Total ram usage:        3 bytes
  4285 ;; Hardware stack levels used: 1
  4286 ;; Hardware stack levels required when called: 6
  4287 ;; This function calls:
  4288 ;;		_I2C_2_Master_Idle
  4289 ;; This function is called by:
  4290 ;;		_color_read_Red
  4291 ;;		_color_read_Blue
  4292 ;;		_color_read_Green
  4293 ;;		_color_read_Clear
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296                           
  4297                           	psect	text24
  4298   00219C                     __ptext24:
  4299                           	callstack 0
  4300   00219C                     _I2C_2_Master_Read:
  4301                           	callstack 22
  4302                           
  4303                           ; BSR set to: 14
  4304                           ;incstack = 0
  4305                           ;I2C_2_Master_Read@ack stored from wreg
  4306   00219C  6E10               	movwf	I2C_2_Master_Read@ack^0,c
  4307   00219E                     
  4308                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4309   00219E  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4310   0021A2                     
  4311                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4312   0021A2  010E               	movlb	14	; () banked
  4313   0021A4  87DA               	bsf	218,3,b	;volatile
  4314                           
  4315                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4316   0021A6  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4317   0021AA                     
  4318                           ;i2c.c: 57:   tmp = SSP2BUF;
  4319   0021AA  CED5 F011          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4320                           
  4321                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4322   0021AE  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4323   0021B2                     
  4324                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4325   0021B2  5010               	movf	I2C_2_Master_Read@ack^0,w,c
  4326   0021B4  B4D8               	btfsc	status,2,c
  4327   0021B6  EFDF  F010         	goto	u2951
  4328   0021BA  EFE3  F010         	goto	u2950
  4329   0021BE                     u2951:
  4330   0021BE  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4331   0021C0  2A0F               	incf	??_I2C_2_Master_Read^0,f,c
  4332   0021C2  EFE4  F010         	goto	u2968
  4333   0021C6                     u2950:
  4334   0021C6  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4335   0021C8                     u2968:
  4336   0021C8  3A0F               	swapf	??_I2C_2_Master_Read^0,f,c
  4337   0021CA  460F               	rlncf	??_I2C_2_Master_Read^0,f,c
  4338   0021CC  010E               	movlb	14	; () banked
  4339   0021CE  51DA               	movf	218,w,b	;volatile
  4340   0021D0  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4341   0021D2  0BDF               	andlw	-33
  4342   0021D4  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4343   0021D6  6FDA               	movwf	218,b	;volatile
  4344   0021D8                     
  4345                           ; BSR set to: 14
  4346                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4347   0021D8  89DA               	bsf	218,4,b	;volatile
  4348   0021DA                     
  4349                           ; BSR set to: 14
  4350                           ;i2c.c: 61:   return tmp;
  4351   0021DA  5011               	movf	I2C_2_Master_Read@tmp^0,w,c
  4352   0021DC                     
  4353                           ; BSR set to: 14
  4354   0021DC  0012               	return		;funcret
  4355   0021DE                     __end_of_I2C_2_Master_Read:
  4356                           	callstack 0
  4357                           
  4358 ;; *************** function _I2C_2_Master_Idle *****************
  4359 ;; Defined at:
  4360 ;;		line 22 in file "i2c.c"
  4361 ;; Parameters:    Size  Location     Type
  4362 ;;		None
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;		None
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  1    wreg      void 
  4367 ;; Registers used:
  4368 ;;		wreg, status,2, status,0
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4378 ;;Total ram usage:        1 bytes
  4379 ;; Hardware stack levels used: 1
  4380 ;; Hardware stack levels required when called: 5
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_I2C_2_Master_Start
  4385 ;;		_I2C_2_Master_RepStart
  4386 ;;		_I2C_2_Master_Stop
  4387 ;;		_I2C_2_Master_Write
  4388 ;;		_I2C_2_Master_Read
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text25
  4393   00227A                     __ptext25:
  4394                           	callstack 0
  4395   00227A                     _I2C_2_Master_Idle:
  4396                           	callstack 22
  4397   00227A                     l389:
  4398   00227A  010E               	movlb	14	; () banked
  4399   00227C  B5D8               	btfsc	216,2,b	;volatile
  4400   00227E  EF43  F011         	goto	u2931
  4401   002282  EF45  F011         	goto	u2930
  4402   002286                     u2931:
  4403   002286  EF3D  F011         	goto	l389
  4404   00228A                     u2930:
  4405   00228A                     
  4406                           ; BSR set to: 14
  4407   00228A  CEDA F00E          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4408   00228E  0E1F               	movlw	31
  4409   002290  160E               	andwf	??_I2C_2_Master_Idle^0,f,c
  4410   002292  A4D8               	btfss	status,2,c
  4411   002294  EF4E  F011         	goto	u2941
  4412   002298  EF50  F011         	goto	u2940
  4413   00229C                     u2941:
  4414   00229C  EF3D  F011         	goto	l389
  4415   0022A0                     u2940:
  4416   0022A0                     
  4417                           ; BSR set to: 14
  4418   0022A0  0012               	return		;funcret
  4419   0022A2                     __end_of_I2C_2_Master_Idle:
  4420                           	callstack 0
  4421                           
  4422 ;; *************** function _I2C_2_Master_Init *****************
  4423 ;; Defined at:
  4424 ;;		line 4 in file "i2c.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used: 1
  4444 ;; Hardware stack levels required when called: 5
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_color_click_init
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text26
  4453   002250                     __ptext26:
  4454                           	callstack 0
  4455   002250                     _I2C_2_Master_Init:
  4456                           	callstack 24
  4457   002250                     
  4458                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4459   002250  010E               	movlb	14	; () banked
  4460   002252  51D9               	movf	217,w,b	;volatile
  4461   002254  0BF0               	andlw	-16
  4462   002256  0908               	iorlw	8
  4463   002258  6FD9               	movwf	217,b	;volatile
  4464   00225A                     
  4465                           ; BSR set to: 14
  4466                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4467   00225A  8BD9               	bsf	217,5,b	;volatile
  4468                           
  4469                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4470   00225C  0E9F               	movlw	159
  4471   00225E  6FD6               	movwf	214,b	;volatile
  4472   002260                     
  4473                           ; BSR set to: 14
  4474                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4475   002260  8A84               	bsf	132,5,c	;volatile
  4476   002262                     
  4477                           ; BSR set to: 14
  4478                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4479   002262  8C84               	bsf	132,6,c	;volatile
  4480   002264                     
  4481                           ; BSR set to: 14
  4482                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4483   002264  9BA7               	bcf	167,5,b	;volatile
  4484   002266                     
  4485                           ; BSR set to: 14
  4486                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4487   002266  9DA7               	bcf	167,6,b	;volatile
  4488                           
  4489                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4490   002268  0E1D               	movlw	29
  4491   00226A  6F1D               	movwf	29,b	;volatile
  4492                           
  4493                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4494   00226C  0E1E               	movlw	30
  4495   00226E  6F1C               	movwf	28,b	;volatile
  4496                           
  4497                           ;i2c.c: 18:   RD5PPS=0x1C;
  4498   002270  0E1C               	movlw	28
  4499   002272  6F6F               	movwf	111,b	;volatile
  4500                           
  4501                           ;i2c.c: 19:   RD6PPS=0x1B;
  4502   002274  0E1B               	movlw	27
  4503   002276  6F70               	movwf	112,b	;volatile
  4504   002278                     
  4505                           ; BSR set to: 14
  4506   002278  0012               	return		;funcret
  4507   00227A                     __end_of_I2C_2_Master_Init:
  4508                           	callstack 0
  4509                           
  4510 ;; *************** function _add_seconds_to_list *****************
  4511 ;; Defined at:
  4512 ;;		line 472 in file "dc_motor.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;		None
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;                  1    wreg      void 
  4519 ;; Registers used:
  4520 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4528 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4530 ;;Total ram usage:        2 bytes
  4531 ;; Hardware stack levels used: 1
  4532 ;; Hardware stack levels required when called: 5
  4533 ;; This function calls:
  4534 ;;		Nothing
  4535 ;; This function is called by:
  4536 ;;		_main
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           	psect	text27
  4541   0020CC                     __ptext27:
  4542                           	callstack 0
  4543   0020CC                     _add_seconds_to_list:
  4544                           	callstack 25
  4545   0020CC                     
  4546                           ;dc_motor.c: 474:     if (seconds > 11)
  4547   0020CC  BE4A               	btfsc	(_seconds+1)^0,7,c
  4548   0020CE  EF72  F010         	goto	u3761
  4549   0020D2  504A               	movf	(_seconds+1)^0,w,c
  4550   0020D4  E109               	bnz	u3760
  4551   0020D6  0E0C               	movlw	12
  4552   0020D8  5C49               	subwf	_seconds^0,w,c
  4553   0020DA  A0D8               	btfss	status,0,c
  4554   0020DC  EF72  F010         	goto	u3761
  4555   0020E0  EF74  F010         	goto	u3760
  4556   0020E4                     u3761:
  4557   0020E4  EF89  F010         	goto	l341
  4558   0020E8                     u3760:
  4559   0020E8                     
  4560                           ;dc_motor.c: 475:     {;dc_motor.c: 476:         movement_list[index] = seconds - 5;
  4561   0020E8  0EFB               	movlw	251
  4562   0020EA  2449               	addwf	_seconds^0,w,c
  4563   0020EC  6E0E               	movwf	??_add_seconds_to_list^0,c
  4564   0020EE  0EFF               	movlw	255
  4565   0020F0  204A               	addwfc	(_seconds+1)^0,w,c
  4566   0020F2  6E0F               	movwf	(??_add_seconds_to_list+1)^0,c
  4567   0020F4  90D8               	bcf	status,0,c
  4568   0020F6  3447               	rlcf	_index^0,w,c
  4569   0020F8  6ED9               	movwf	fsr2l,c
  4570   0020FA  3448               	rlcf	(_index+1)^0,w,c
  4571   0020FC  6EDA               	movwf	fsr2h,c
  4572   0020FE  0E00               	movlw	low _movement_list
  4573   002100  26D9               	addwf	fsr2l,f,c
  4574   002102  0E02               	movlw	high _movement_list
  4575   002104  22DA               	addwfc	fsr2h,f,c
  4576   002106  C00E  FFDE         	movff	??_add_seconds_to_list,postinc2
  4577   00210A  C00F  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4578   00210E                     
  4579                           ;dc_motor.c: 477:         index++;
  4580   00210E  4A47               	infsnz	_index^0,f,c
  4581   002110  2A48               	incf	(_index+1)^0,f,c
  4582   002112                     l341:
  4583   002112  0012               	return		;funcret
  4584   002114                     __end_of_add_seconds_to_list:
  4585                           	callstack 0
  4586                           
  4587 ;; *************** function _Timer0_init *****************
  4588 ;; Defined at:
  4589 ;;		line 7 in file "timers.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, status,2
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4607 ;;Total ram usage:        0 bytes
  4608 ;; Hardware stack levels used: 1
  4609 ;; Hardware stack levels required when called: 5
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_main
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text28
  4618   002310                     __ptext28:
  4619                           	callstack 0
  4620   002310                     _Timer0_init:
  4621                           	callstack 25
  4622   002310                     
  4623                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4624   002310  50D6               	movf	214,w,c	;volatile
  4625   002312  0B1F               	andlw	-225
  4626   002314  0940               	iorlw	64
  4627   002316  6ED6               	movwf	214,c	;volatile
  4628   002318                     
  4629                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4630   002318  88D6               	bsf	214,4,c	;volatile
  4631                           
  4632                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4633   00231A  50D6               	movf	214,w,c	;volatile
  4634   00231C  0BF0               	andlw	-16
  4635   00231E  0908               	iorlw	8
  4636   002320  6ED6               	movwf	214,c	;volatile
  4637                           
  4638                           ;timers.c: 13:     TMR0H=0b11111101;
  4639   002322  0EFD               	movlw	253
  4640   002324  6ED4               	movwf	212,c	;volatile
  4641                           
  4642                           ;timers.c: 14:     TMR0L=0b10010000;
  4643   002326  0E90               	movlw	144
  4644   002328  6ED3               	movwf	211,c	;volatile
  4645   00232A                     
  4646                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4647   00232A  88D5               	bsf	213,4,c	;volatile
  4648   00232C                     
  4649                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4650   00232C  8ED5               	bsf	213,7,c	;volatile
  4651   00232E  0012               	return		;funcret
  4652   002330                     __end_of_Timer0_init:
  4653                           	callstack 0
  4654                           
  4655 ;; *************** function _RobotMovement *****************
  4656 ;; Defined at:
  4657 ;;		line 315 in file "dc_motor.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  color           2   42[COMRAM] unsigned int 
  4660 ;;  motorL          2   44[COMRAM] PTR struct DC_motor
  4661 ;;		 -> main@motorL(9), 
  4662 ;;  motorR          2   46[COMRAM] PTR struct DC_motor
  4663 ;;		 -> main@motorR(9), 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;  i               2   52[COMRAM] int 
  4666 ;;  i               2   50[COMRAM] int 
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4676 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4678 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4679 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4680 ;;Total ram usage:       12 bytes
  4681 ;; Hardware stack levels used: 1
  4682 ;; Hardware stack levels required when called: 8
  4683 ;; This function calls:
  4684 ;;		_TimedfullSpeedAhead
  4685 ;;		_moveBack
  4686 ;;		_stop
  4687 ;;		_turnLeft
  4688 ;;		_turnLeftLong
  4689 ;;		_turnRight
  4690 ;;		_turnRightLong
  4691 ;; This function is called by:
  4692 ;;		_main
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696                           	psect	text29
  4697   0000A6                     __ptext29:
  4698                           	callstack 0
  4699   0000A6                     _RobotMovement:
  4700                           	callstack 22
  4701   0000A6                     
  4702                           ;dc_motor.c: 315: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 316: {;dc_motor.c: 317:     moveBack(motorL, motorR, 5);
  4703   0000A6  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4704   0000AA  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4705   0000AE  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4706   0000B2  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4707   0000B6  0E00               	movlw	0
  4708   0000B8  6E26               	movwf	(moveBack@time+1)^0,c
  4709   0000BA  0E05               	movlw	5
  4710   0000BC  6E25               	movwf	moveBack@time^0,c
  4711   0000BE  ECDA  F00D         	call	_moveBack	;wreg free
  4712                           
  4713                           ;dc_motor.c: 318:     stop(motorL,motorR);
  4714   0000C2  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4715   0000C6  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4716   0000CA  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4717   0000CE  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4718   0000D2  EC1D  F010         	call	_stop	;wreg free
  4719   0000D6                     
  4720                           ;dc_motor.c: 321:     if(color == 0){
  4721   0000D6  502B               	movf	RobotMovement@color^0,w,c
  4722   0000D8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4723   0000DA  A4D8               	btfss	status,2,c
  4724   0000DC  EF72  F000         	goto	u3551
  4725   0000E0  EF74  F000         	goto	u3550
  4726   0000E4                     u3551:
  4727   0000E4  EF8D  F000         	goto	l4281
  4728   0000E8                     u3550:
  4729   0000E8                     
  4730                           ;dc_motor.c: 322:         turnRight(motorL, motorR);
  4731   0000E8  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4732   0000EC  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4733   0000F0  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4734   0000F4  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4735   0000F8  ECBE  F00A         	call	_turnRight	;wreg free
  4736   0000FC                     
  4737                           ;dc_motor.c: 323:         movement_list[index] = -1;
  4738   0000FC  90D8               	bcf	status,0,c
  4739   0000FE  3447               	rlcf	_index^0,w,c
  4740   000100  6ED9               	movwf	fsr2l,c
  4741   000102  3448               	rlcf	(_index+1)^0,w,c
  4742   000104  6EDA               	movwf	fsr2h,c
  4743   000106  0E00               	movlw	low _movement_list
  4744   000108  26D9               	addwf	fsr2l,f,c
  4745   00010A  0E02               	movlw	high _movement_list
  4746   00010C  22DA               	addwfc	fsr2h,f,c
  4747   00010E  0EFF               	movlw	255
  4748   000110  6EDE               	movwf	postinc2,c
  4749   000112  0EFF               	movlw	255
  4750   000114  6EDD               	movwf	postdec2,c
  4751   000116                     
  4752                           ;dc_motor.c: 324:         index++;
  4753   000116  4A47               	infsnz	_index^0,f,c
  4754   000118  2A48               	incf	(_index+1)^0,f,c
  4755   00011A                     l4281:
  4756                           
  4757                           ;dc_motor.c: 327:     if(color == 1){
  4758   00011A  042B               	decf	RobotMovement@color^0,w,c
  4759   00011C  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4760   00011E  A4D8               	btfss	status,2,c
  4761   000120  EF94  F000         	goto	u3561
  4762   000124  EF96  F000         	goto	u3560
  4763   000128                     u3561:
  4764   000128  EFAF  F000         	goto	l4289
  4765   00012C                     u3560:
  4766   00012C                     
  4767                           ;dc_motor.c: 328:         turnLeft(motorL, motorR);
  4768   00012C  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  4769   000130  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4770   000134  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  4771   000138  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4772   00013C  EC69  F009         	call	_turnLeft	;wreg free
  4773   000140                     
  4774                           ;dc_motor.c: 329:         movement_list[index] = -2;
  4775   000140  90D8               	bcf	status,0,c
  4776   000142  3447               	rlcf	_index^0,w,c
  4777   000144  6ED9               	movwf	fsr2l,c
  4778   000146  3448               	rlcf	(_index+1)^0,w,c
  4779   000148  6EDA               	movwf	fsr2h,c
  4780   00014A  0E00               	movlw	low _movement_list
  4781   00014C  26D9               	addwf	fsr2l,f,c
  4782   00014E  0E02               	movlw	high _movement_list
  4783   000150  22DA               	addwfc	fsr2h,f,c
  4784   000152  0EFE               	movlw	254
  4785   000154  6EDE               	movwf	postinc2,c
  4786   000156  0EFF               	movlw	255
  4787   000158  6EDD               	movwf	postdec2,c
  4788   00015A                     
  4789                           ;dc_motor.c: 330:         index++;
  4790   00015A  4A47               	infsnz	_index^0,f,c
  4791   00015C  2A48               	incf	(_index+1)^0,f,c
  4792   00015E                     l4289:
  4793                           
  4794                           ;dc_motor.c: 333:     if(color == 2){
  4795   00015E  0E02               	movlw	2
  4796   000160  182B               	xorwf	RobotMovement@color^0,w,c
  4797   000162  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4798   000164  A4D8               	btfss	status,2,c
  4799   000166  EFB7  F000         	goto	u3571
  4800   00016A  EFB9  F000         	goto	u3570
  4801   00016E                     u3571:
  4802   00016E  EFE6  F000         	goto	l4307
  4803   000172                     u3570:
  4804   000172                     
  4805                           ;dc_motor.c: 334:         int i;;dc_motor.c: 335:         for (i=0;i<2;i++){
  4806   000172  0E00               	movlw	0
  4807   000174  6E34               	movwf	(RobotMovement@i+1)^0,c
  4808   000176  0E00               	movlw	0
  4809   000178  6E33               	movwf	RobotMovement@i^0,c
  4810   00017A                     l4297:
  4811                           
  4812                           ;dc_motor.c: 336:             turnRight(motorL, motorR);
  4813   00017A  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4814   00017E  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4815   000182  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4816   000186  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4817   00018A  ECBE  F00A         	call	_turnRight	;wreg free
  4818   00018E                     
  4819                           ;dc_motor.c: 337:             movement_list[index] = -1;
  4820   00018E  90D8               	bcf	status,0,c
  4821   000190  3447               	rlcf	_index^0,w,c
  4822   000192  6ED9               	movwf	fsr2l,c
  4823   000194  3448               	rlcf	(_index+1)^0,w,c
  4824   000196  6EDA               	movwf	fsr2h,c
  4825   000198  0E00               	movlw	low _movement_list
  4826   00019A  26D9               	addwf	fsr2l,f,c
  4827   00019C  0E02               	movlw	high _movement_list
  4828   00019E  22DA               	addwfc	fsr2h,f,c
  4829   0001A0  0EFF               	movlw	255
  4830   0001A2  6EDE               	movwf	postinc2,c
  4831   0001A4  0EFF               	movlw	255
  4832   0001A6  6EDD               	movwf	postdec2,c
  4833   0001A8                     
  4834                           ;dc_motor.c: 338:             index++;
  4835   0001A8  4A47               	infsnz	_index^0,f,c
  4836   0001AA  2A48               	incf	(_index+1)^0,f,c
  4837   0001AC                     
  4838                           ;dc_motor.c: 339:         }
  4839   0001AC  4A33               	infsnz	RobotMovement@i^0,f,c
  4840   0001AE  2A34               	incf	(RobotMovement@i+1)^0,f,c
  4841   0001B0  BE34               	btfsc	(RobotMovement@i+1)^0,7,c
  4842   0001B2  EFE4  F000         	goto	u3581
  4843   0001B6  5034               	movf	(RobotMovement@i+1)^0,w,c
  4844   0001B8  E109               	bnz	u3580
  4845   0001BA  0E02               	movlw	2
  4846   0001BC  5C33               	subwf	RobotMovement@i^0,w,c
  4847   0001BE  A0D8               	btfss	status,0,c
  4848   0001C0  EFE4  F000         	goto	u3581
  4849   0001C4  EFE6  F000         	goto	u3580
  4850   0001C8                     u3581:
  4851   0001C8  EFBD  F000         	goto	l4297
  4852   0001CC                     u3580:
  4853   0001CC                     l4307:
  4854                           
  4855                           ;dc_motor.c: 342:     if(color == 3){
  4856   0001CC  0E03               	movlw	3
  4857   0001CE  182B               	xorwf	RobotMovement@color^0,w,c
  4858   0001D0  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4859   0001D2  A4D8               	btfss	status,2,c
  4860   0001D4  EFEE  F000         	goto	u3591
  4861   0001D8  EFF0  F000         	goto	u3590
  4862   0001DC                     u3591:
  4863   0001DC  EFF0  F001         	goto	l4337
  4864   0001E0                     u3590:
  4865   0001E0                     
  4866                           ;dc_motor.c: 344:         moveBack(motorL, motorR, 16);
  4867   0001E0  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4868   0001E4  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4869   0001E8  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4870   0001EC  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4871   0001F0  0E00               	movlw	0
  4872   0001F2  6E26               	movwf	(moveBack@time+1)^0,c
  4873   0001F4  0E10               	movlw	16
  4874   0001F6  6E25               	movwf	moveBack@time^0,c
  4875   0001F8  ECDA  F00D         	call	_moveBack	;wreg free
  4876                           
  4877                           ;dc_motor.c: 345:         stop(motorL, motorR);
  4878   0001FC  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4879   000200  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4880   000204  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4881   000208  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4882   00020C  EC1D  F010         	call	_stop	;wreg free
  4883                           
  4884                           ;dc_motor.c: 346:         turnRight(motorL, motorR);
  4885   000210  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4886   000214  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4887   000218  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4888   00021C  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4889   000220  ECBE  F00A         	call	_turnRight	;wreg free
  4890   000224                     
  4891                           ;dc_motor.c: 348:         if (movement_list[index-1] > 5)
  4892   000224  90D8               	bcf	status,0,c
  4893   000226  3447               	rlcf	_index^0,w,c
  4894   000228  6ED9               	movwf	fsr2l,c
  4895   00022A  3448               	rlcf	(_index+1)^0,w,c
  4896   00022C  6EDA               	movwf	fsr2h,c
  4897   00022E  0EFE               	movlw	low (_movement_list+65534)
  4898   000230  26D9               	addwf	fsr2l,f,c
  4899   000232  0E01               	movlw	high (_movement_list+65534)
  4900   000234  22DA               	addwfc	fsr2h,f,c
  4901   000236  0E01               	movlw	1
  4902   000238  BEDB               	btfsc	plusw2,7,c
  4903   00023A  EF29  F001         	goto	u3601
  4904   00023E  0E01               	movlw	1
  4905   000240  50DB               	movf	plusw2,w,c
  4906   000242  E109               	bnz	u3600
  4907   000244  0E06               	movlw	6
  4908   000246  5CDE               	subwf	postinc2,w,c
  4909   000248  A0D8               	btfss	status,0,c
  4910   00024A  EF29  F001         	goto	u3601
  4911   00024E  EF2B  F001         	goto	u3600
  4912   000252                     u3601:
  4913   000252  EF49  F001         	goto	l4317
  4914   000256                     u3600:
  4915   000256                     
  4916                           ;dc_motor.c: 349:         {;dc_motor.c: 351:             movement_list[index-1] -= 11;
  4917   000256  90D8               	bcf	status,0,c
  4918   000258  3447               	rlcf	_index^0,w,c
  4919   00025A  6ED9               	movwf	fsr2l,c
  4920   00025C  3448               	rlcf	(_index+1)^0,w,c
  4921   00025E  6EDA               	movwf	fsr2h,c
  4922   000260  0EFE               	movlw	low (_movement_list+65534)
  4923   000262  26D9               	addwf	fsr2l,f,c
  4924   000264  0E01               	movlw	high (_movement_list+65534)
  4925   000266  22DA               	addwfc	fsr2h,f,c
  4926   000268  0EF5               	movlw	245
  4927   00026A  26DE               	addwf	postinc2,f,c
  4928   00026C  0EFF               	movlw	255
  4929   00026E  22DD               	addwfc	postdec2,f,c
  4930                           
  4931                           ;dc_motor.c: 353:             movement_list[index] = -1;
  4932   000270  90D8               	bcf	status,0,c
  4933   000272  3447               	rlcf	_index^0,w,c
  4934   000274  6ED9               	movwf	fsr2l,c
  4935   000276  3448               	rlcf	(_index+1)^0,w,c
  4936   000278  6EDA               	movwf	fsr2h,c
  4937   00027A  0E00               	movlw	low _movement_list
  4938   00027C  26D9               	addwf	fsr2l,f,c
  4939   00027E  0E02               	movlw	high _movement_list
  4940   000280  22DA               	addwfc	fsr2h,f,c
  4941   000282  0EFF               	movlw	255
  4942   000284  6EDE               	movwf	postinc2,c
  4943   000286  0EFF               	movlw	255
  4944   000288  6EDD               	movwf	postdec2,c
  4945   00028A                     
  4946                           ;dc_motor.c: 354:             index += 1;
  4947   00028A  4A47               	infsnz	_index^0,f,c
  4948   00028C  2A48               	incf	(_index+1)^0,f,c
  4949                           
  4950                           ;dc_motor.c: 355:         }else{
  4951   00028E  EFF0  F001         	goto	l4337
  4952   000292                     l4317:
  4953                           
  4954                           ;dc_motor.c: 357:             if (movement_list[index-1] == -1)
  4955   000292  90D8               	bcf	status,0,c
  4956   000294  3447               	rlcf	_index^0,w,c
  4957   000296  6ED9               	movwf	fsr2l,c
  4958   000298  3448               	rlcf	(_index+1)^0,w,c
  4959   00029A  6EDA               	movwf	fsr2h,c
  4960   00029C  0EFE               	movlw	low (_movement_list+65534)
  4961   00029E  26D9               	addwf	fsr2l,f,c
  4962   0002A0  0E01               	movlw	high (_movement_list+65534)
  4963   0002A2  22DA               	addwfc	fsr2h,f,c
  4964   0002A4  28DE               	incf	postinc2,w,c
  4965   0002A6  E106               	bnz	u3611
  4966   0002A8  28DE               	incf	postinc2,w,c
  4967   0002AA  A4D8               	btfss	status,2,c
  4968   0002AC  EF5A  F001         	goto	u3611
  4969   0002B0  EF5C  F001         	goto	u3610
  4970   0002B4                     u3611:
  4971   0002B4  EF6B  F001         	goto	l4321
  4972   0002B8                     u3610:
  4973   0002B8                     
  4974                           ;dc_motor.c: 358:             {;dc_motor.c: 360:                 movement_list[index-1] 
      +                          = -2;
  4975   0002B8  90D8               	bcf	status,0,c
  4976   0002BA  3447               	rlcf	_index^0,w,c
  4977   0002BC  6ED9               	movwf	fsr2l,c
  4978   0002BE  3448               	rlcf	(_index+1)^0,w,c
  4979   0002C0  6EDA               	movwf	fsr2h,c
  4980   0002C2  0EFE               	movlw	low (_movement_list+65534)
  4981   0002C4  26D9               	addwf	fsr2l,f,c
  4982   0002C6  0E01               	movlw	high (_movement_list+65534)
  4983   0002C8  22DA               	addwfc	fsr2h,f,c
  4984   0002CA  0EFE               	movlw	254
  4985   0002CC  6EDE               	movwf	postinc2,c
  4986   0002CE  0EFF               	movlw	255
  4987   0002D0  6EDD               	movwf	postdec2,c
  4988                           
  4989                           ;dc_motor.c: 361:             }
  4990   0002D2  EFD2  F001         	goto	l312
  4991   0002D6                     l4321:
  4992   0002D6  90D8               	bcf	status,0,c
  4993   0002D8  3447               	rlcf	_index^0,w,c
  4994   0002DA  6ED9               	movwf	fsr2l,c
  4995   0002DC  3448               	rlcf	(_index+1)^0,w,c
  4996   0002DE  6EDA               	movwf	fsr2h,c
  4997   0002E0  0EFE               	movlw	low (_movement_list+65534)
  4998   0002E2  26D9               	addwf	fsr2l,f,c
  4999   0002E4  0E01               	movlw	high (_movement_list+65534)
  5000   0002E6  22DA               	addwfc	fsr2h,f,c
  5001   0002E8  0EFE               	movlw	254
  5002   0002EA  18DE               	xorwf	postinc2,w,c
  5003   0002EC  E106               	bnz	u3621
  5004   0002EE  28DE               	incf	postinc2,w,c
  5005   0002F0  A4D8               	btfss	status,2,c
  5006   0002F2  EF7D  F001         	goto	u3621
  5007   0002F6  EF7F  F001         	goto	u3620
  5008   0002FA                     u3621:
  5009   0002FA  EF8E  F001         	goto	l4325
  5010   0002FE                     u3620:
  5011   0002FE                     
  5012                           ;dc_motor.c: 364:             {;dc_motor.c: 366:                 movement_list[index-1] 
      +                          = -1;
  5013   0002FE  90D8               	bcf	status,0,c
  5014   000300  3447               	rlcf	_index^0,w,c
  5015   000302  6ED9               	movwf	fsr2l,c
  5016   000304  3448               	rlcf	(_index+1)^0,w,c
  5017   000306  6EDA               	movwf	fsr2h,c
  5018   000308  0EFE               	movlw	low (_movement_list+65534)
  5019   00030A  26D9               	addwf	fsr2l,f,c
  5020   00030C  0E01               	movlw	high (_movement_list+65534)
  5021   00030E  22DA               	addwfc	fsr2h,f,c
  5022   000310  0EFF               	movlw	255
  5023   000312  6EDE               	movwf	postinc2,c
  5024   000314  0EFF               	movlw	255
  5025   000316  6EDD               	movwf	postdec2,c
  5026                           
  5027                           ;dc_motor.c: 367:             }
  5028   000318  EFD2  F001         	goto	l312
  5029   00031C                     l4325:
  5030   00031C  90D8               	bcf	status,0,c
  5031   00031E  3447               	rlcf	_index^0,w,c
  5032   000320  6ED9               	movwf	fsr2l,c
  5033   000322  3448               	rlcf	(_index+1)^0,w,c
  5034   000324  6EDA               	movwf	fsr2h,c
  5035   000326  0EFE               	movlw	low (_movement_list+65534)
  5036   000328  26D9               	addwf	fsr2l,f,c
  5037   00032A  0E01               	movlw	high (_movement_list+65534)
  5038   00032C  22DA               	addwfc	fsr2h,f,c
  5039   00032E  0EFD               	movlw	253
  5040   000330  18DE               	xorwf	postinc2,w,c
  5041   000332  E106               	bnz	u3631
  5042   000334  28DE               	incf	postinc2,w,c
  5043   000336  A4D8               	btfss	status,2,c
  5044   000338  EFA0  F001         	goto	u3631
  5045   00033C  EFA2  F001         	goto	u3630
  5046   000340                     u3631:
  5047   000340  EFB1  F001         	goto	l4329
  5048   000344                     u3630:
  5049   000344                     
  5050                           ;dc_motor.c: 370:             {;dc_motor.c: 372:                 movement_list[index-1] 
      +                          = -4;
  5051   000344  90D8               	bcf	status,0,c
  5052   000346  3447               	rlcf	_index^0,w,c
  5053   000348  6ED9               	movwf	fsr2l,c
  5054   00034A  3448               	rlcf	(_index+1)^0,w,c
  5055   00034C  6EDA               	movwf	fsr2h,c
  5056   00034E  0EFE               	movlw	low (_movement_list+65534)
  5057   000350  26D9               	addwf	fsr2l,f,c
  5058   000352  0E01               	movlw	high (_movement_list+65534)
  5059   000354  22DA               	addwfc	fsr2h,f,c
  5060   000356  0EFC               	movlw	252
  5061   000358  6EDE               	movwf	postinc2,c
  5062   00035A  0EFF               	movlw	255
  5063   00035C  6EDD               	movwf	postdec2,c
  5064                           
  5065                           ;dc_motor.c: 373:             }
  5066   00035E  EFD2  F001         	goto	l312
  5067   000362                     l4329:
  5068   000362  90D8               	bcf	status,0,c
  5069   000364  3447               	rlcf	_index^0,w,c
  5070   000366  6ED9               	movwf	fsr2l,c
  5071   000368  3448               	rlcf	(_index+1)^0,w,c
  5072   00036A  6EDA               	movwf	fsr2h,c
  5073   00036C  0EFE               	movlw	low (_movement_list+65534)
  5074   00036E  26D9               	addwf	fsr2l,f,c
  5075   000370  0E01               	movlw	high (_movement_list+65534)
  5076   000372  22DA               	addwfc	fsr2h,f,c
  5077   000374  0EFC               	movlw	252
  5078   000376  18DE               	xorwf	postinc2,w,c
  5079   000378  E106               	bnz	u3641
  5080   00037A  28DE               	incf	postinc2,w,c
  5081   00037C  A4D8               	btfss	status,2,c
  5082   00037E  EFC3  F001         	goto	u3641
  5083   000382  EFC5  F001         	goto	u3640
  5084   000386                     u3641:
  5085   000386  EFD2  F001         	goto	l312
  5086   00038A                     u3640:
  5087   00038A                     
  5088                           ;dc_motor.c: 376:             {;dc_motor.c: 378:                 movement_list[index-1] 
      +                          = -3;
  5089   00038A  90D8               	bcf	status,0,c
  5090   00038C  3447               	rlcf	_index^0,w,c
  5091   00038E  6ED9               	movwf	fsr2l,c
  5092   000390  3448               	rlcf	(_index+1)^0,w,c
  5093   000392  6EDA               	movwf	fsr2h,c
  5094   000394  0EFE               	movlw	low (_movement_list+65534)
  5095   000396  26D9               	addwf	fsr2l,f,c
  5096   000398  0E01               	movlw	high (_movement_list+65534)
  5097   00039A  22DA               	addwfc	fsr2h,f,c
  5098   00039C  0EFD               	movlw	253
  5099   00039E  6EDE               	movwf	postinc2,c
  5100   0003A0  0EFF               	movlw	255
  5101   0003A2  6EDD               	movwf	postdec2,c
  5102   0003A4                     l312:
  5103                           
  5104                           ;dc_motor.c: 381:             movement_list[index] = 16;
  5105   0003A4  90D8               	bcf	status,0,c
  5106   0003A6  3447               	rlcf	_index^0,w,c
  5107   0003A8  6ED9               	movwf	fsr2l,c
  5108   0003AA  3448               	rlcf	(_index+1)^0,w,c
  5109   0003AC  6EDA               	movwf	fsr2h,c
  5110   0003AE  0E00               	movlw	low _movement_list
  5111   0003B0  26D9               	addwf	fsr2l,f,c
  5112   0003B2  0E02               	movlw	high _movement_list
  5113   0003B4  22DA               	addwfc	fsr2h,f,c
  5114   0003B6  0E10               	movlw	16
  5115   0003B8  6EDE               	movwf	postinc2,c
  5116   0003BA  0E00               	movlw	0
  5117   0003BC  6EDD               	movwf	postdec2,c
  5118   0003BE                     
  5119                           ;dc_motor.c: 382:             index += 1;
  5120   0003BE  4A47               	infsnz	_index^0,f,c
  5121   0003C0  2A48               	incf	(_index+1)^0,f,c
  5122   0003C2                     
  5123                           ;dc_motor.c: 384:             movement_list[index] = -2;
  5124   0003C2  90D8               	bcf	status,0,c
  5125   0003C4  3447               	rlcf	_index^0,w,c
  5126   0003C6  6ED9               	movwf	fsr2l,c
  5127   0003C8  3448               	rlcf	(_index+1)^0,w,c
  5128   0003CA  6EDA               	movwf	fsr2h,c
  5129   0003CC  0E00               	movlw	low _movement_list
  5130   0003CE  26D9               	addwf	fsr2l,f,c
  5131   0003D0  0E02               	movlw	high _movement_list
  5132   0003D2  22DA               	addwfc	fsr2h,f,c
  5133   0003D4  0EFE               	movlw	254
  5134   0003D6  6EDE               	movwf	postinc2,c
  5135   0003D8  0EFF               	movlw	255
  5136   0003DA  6EDD               	movwf	postdec2,c
  5137                           
  5138                           ;dc_motor.c: 385:             index += 1;
  5139   0003DC  4A47               	infsnz	_index^0,f,c
  5140   0003DE  2A48               	incf	(_index+1)^0,f,c
  5141   0003E0                     l4337:
  5142                           
  5143                           ;dc_motor.c: 390:     if(color == 4){
  5144   0003E0  0E04               	movlw	4
  5145   0003E2  182B               	xorwf	RobotMovement@color^0,w,c
  5146   0003E4  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5147   0003E6  A4D8               	btfss	status,2,c
  5148   0003E8  EFF8  F001         	goto	u3651
  5149   0003EC  EFFA  F001         	goto	u3650
  5150   0003F0                     u3651:
  5151   0003F0  EFFA  F002         	goto	l4367
  5152   0003F4                     u3650:
  5153   0003F4                     
  5154                           ;dc_motor.c: 392:         moveBack(motorL, motorR, 16);
  5155   0003F4  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  5156   0003F8  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  5157   0003FC  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  5158   000400  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  5159   000404  0E00               	movlw	0
  5160   000406  6E26               	movwf	(moveBack@time+1)^0,c
  5161   000408  0E10               	movlw	16
  5162   00040A  6E25               	movwf	moveBack@time^0,c
  5163   00040C  ECDA  F00D         	call	_moveBack	;wreg free
  5164                           
  5165                           ;dc_motor.c: 393:         stop(motorL, motorR);
  5166   000410  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  5167   000414  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  5168   000418  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  5169   00041C  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  5170   000420  EC1D  F010         	call	_stop	;wreg free
  5171                           
  5172                           ;dc_motor.c: 394:         turnLeft(motorL, motorR);
  5173   000424  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  5174   000428  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  5175   00042C  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  5176   000430  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  5177   000434  EC69  F009         	call	_turnLeft	;wreg free
  5178   000438                     
  5179                           ;dc_motor.c: 396:         if (movement_list[index-1] > 5)
  5180   000438  90D8               	bcf	status,0,c
  5181   00043A  3447               	rlcf	_index^0,w,c
  5182   00043C  6ED9               	movwf	fsr2l,c
  5183   00043E  3448               	rlcf	(_index+1)^0,w,c
  5184   000440  6EDA               	movwf	fsr2h,c
  5185   000442  0EFE               	movlw	low (_movement_list+65534)
  5186   000444  26D9               	addwf	fsr2l,f,c
  5187   000446  0E01               	movlw	high (_movement_list+65534)
  5188   000448  22DA               	addwfc	fsr2h,f,c
  5189   00044A  0E01               	movlw	1
  5190   00044C  BEDB               	btfsc	plusw2,7,c
  5191   00044E  EF33  F002         	goto	u3661
  5192   000452  0E01               	movlw	1
  5193   000454  50DB               	movf	plusw2,w,c
  5194   000456  E109               	bnz	u3660
  5195   000458  0E06               	movlw	6
  5196   00045A  5CDE               	subwf	postinc2,w,c
  5197   00045C  A0D8               	btfss	status,0,c
  5198   00045E  EF33  F002         	goto	u3661
  5199   000462  EF35  F002         	goto	u3660
  5200   000466                     u3661:
  5201   000466  EF53  F002         	goto	l4347
  5202   00046A                     u3660:
  5203   00046A                     
  5204                           ;dc_motor.c: 397:         {;dc_motor.c: 399:             movement_list[index-1] -= 11;
  5205   00046A  90D8               	bcf	status,0,c
  5206   00046C  3447               	rlcf	_index^0,w,c
  5207   00046E  6ED9               	movwf	fsr2l,c
  5208   000470  3448               	rlcf	(_index+1)^0,w,c
  5209   000472  6EDA               	movwf	fsr2h,c
  5210   000474  0EFE               	movlw	low (_movement_list+65534)
  5211   000476  26D9               	addwf	fsr2l,f,c
  5212   000478  0E01               	movlw	high (_movement_list+65534)
  5213   00047A  22DA               	addwfc	fsr2h,f,c
  5214   00047C  0EF5               	movlw	245
  5215   00047E  26DE               	addwf	postinc2,f,c
  5216   000480  0EFF               	movlw	255
  5217   000482  22DD               	addwfc	postdec2,f,c
  5218                           
  5219                           ;dc_motor.c: 401:             movement_list[index] = -2;
  5220   000484  90D8               	bcf	status,0,c
  5221   000486  3447               	rlcf	_index^0,w,c
  5222   000488  6ED9               	movwf	fsr2l,c
  5223   00048A  3448               	rlcf	(_index+1)^0,w,c
  5224   00048C  6EDA               	movwf	fsr2h,c
  5225   00048E  0E00               	movlw	low _movement_list
  5226   000490  26D9               	addwf	fsr2l,f,c
  5227   000492  0E02               	movlw	high _movement_list
  5228   000494  22DA               	addwfc	fsr2h,f,c
  5229   000496  0EFE               	movlw	254
  5230   000498  6EDE               	movwf	postinc2,c
  5231   00049A  0EFF               	movlw	255
  5232   00049C  6EDD               	movwf	postdec2,c
  5233   00049E                     
  5234                           ;dc_motor.c: 402:             index += 1;
  5235   00049E  4A47               	infsnz	_index^0,f,c
  5236   0004A0  2A48               	incf	(_index+1)^0,f,c
  5237                           
  5238                           ;dc_motor.c: 403:         }else{
  5239   0004A2  EFFA  F002         	goto	l4367
  5240   0004A6                     l4347:
  5241                           
  5242                           ;dc_motor.c: 405:             if (movement_list[index-1] == -1)
  5243   0004A6  90D8               	bcf	status,0,c
  5244   0004A8  3447               	rlcf	_index^0,w,c
  5245   0004AA  6ED9               	movwf	fsr2l,c
  5246   0004AC  3448               	rlcf	(_index+1)^0,w,c
  5247   0004AE  6EDA               	movwf	fsr2h,c
  5248   0004B0  0EFE               	movlw	low (_movement_list+65534)
  5249   0004B2  26D9               	addwf	fsr2l,f,c
  5250   0004B4  0E01               	movlw	high (_movement_list+65534)
  5251   0004B6  22DA               	addwfc	fsr2h,f,c
  5252   0004B8  28DE               	incf	postinc2,w,c
  5253   0004BA  E106               	bnz	u3671
  5254   0004BC  28DE               	incf	postinc2,w,c
  5255   0004BE  A4D8               	btfss	status,2,c
  5256   0004C0  EF64  F002         	goto	u3671
  5257   0004C4  EF66  F002         	goto	u3670
  5258   0004C8                     u3671:
  5259   0004C8  EF75  F002         	goto	l4351
  5260   0004CC                     u3670:
  5261   0004CC                     
  5262                           ;dc_motor.c: 406:             {;dc_motor.c: 408:                 movement_list[index-1] 
      +                          = -2;
  5263   0004CC  90D8               	bcf	status,0,c
  5264   0004CE  3447               	rlcf	_index^0,w,c
  5265   0004D0  6ED9               	movwf	fsr2l,c
  5266   0004D2  3448               	rlcf	(_index+1)^0,w,c
  5267   0004D4  6EDA               	movwf	fsr2h,c
  5268   0004D6  0EFE               	movlw	low (_movement_list+65534)
  5269   0004D8  26D9               	addwf	fsr2l,f,c
  5270   0004DA  0E01               	movlw	high (_movement_list+65534)
  5271   0004DC  22DA               	addwfc	fsr2h,f,c
  5272   0004DE  0EFE               	movlw	254
  5273   0004E0  6EDE               	movwf	postinc2,c
  5274   0004E2  0EFF               	movlw	255
  5275   0004E4  6EDD               	movwf	postdec2,c
  5276                           
  5277                           ;dc_motor.c: 409:             }
  5278   0004E6  EFDC  F002         	goto	l322
  5279   0004EA                     l4351:
  5280   0004EA  90D8               	bcf	status,0,c
  5281   0004EC  3447               	rlcf	_index^0,w,c
  5282   0004EE  6ED9               	movwf	fsr2l,c
  5283   0004F0  3448               	rlcf	(_index+1)^0,w,c
  5284   0004F2  6EDA               	movwf	fsr2h,c
  5285   0004F4  0EFE               	movlw	low (_movement_list+65534)
  5286   0004F6  26D9               	addwf	fsr2l,f,c
  5287   0004F8  0E01               	movlw	high (_movement_list+65534)
  5288   0004FA  22DA               	addwfc	fsr2h,f,c
  5289   0004FC  0EFE               	movlw	254
  5290   0004FE  18DE               	xorwf	postinc2,w,c
  5291   000500  E106               	bnz	u3681
  5292   000502  28DE               	incf	postinc2,w,c
  5293   000504  A4D8               	btfss	status,2,c
  5294   000506  EF87  F002         	goto	u3681
  5295   00050A  EF89  F002         	goto	u3680
  5296   00050E                     u3681:
  5297   00050E  EF98  F002         	goto	l4355
  5298   000512                     u3680:
  5299   000512                     
  5300                           ;dc_motor.c: 412:             {;dc_motor.c: 414:                 movement_list[index-1] 
      +                          = -1;
  5301   000512  90D8               	bcf	status,0,c
  5302   000514  3447               	rlcf	_index^0,w,c
  5303   000516  6ED9               	movwf	fsr2l,c
  5304   000518  3448               	rlcf	(_index+1)^0,w,c
  5305   00051A  6EDA               	movwf	fsr2h,c
  5306   00051C  0EFE               	movlw	low (_movement_list+65534)
  5307   00051E  26D9               	addwf	fsr2l,f,c
  5308   000520  0E01               	movlw	high (_movement_list+65534)
  5309   000522  22DA               	addwfc	fsr2h,f,c
  5310   000524  0EFF               	movlw	255
  5311   000526  6EDE               	movwf	postinc2,c
  5312   000528  0EFF               	movlw	255
  5313   00052A  6EDD               	movwf	postdec2,c
  5314                           
  5315                           ;dc_motor.c: 415:             }
  5316   00052C  EFDC  F002         	goto	l322
  5317   000530                     l4355:
  5318   000530  90D8               	bcf	status,0,c
  5319   000532  3447               	rlcf	_index^0,w,c
  5320   000534  6ED9               	movwf	fsr2l,c
  5321   000536  3448               	rlcf	(_index+1)^0,w,c
  5322   000538  6EDA               	movwf	fsr2h,c
  5323   00053A  0EFE               	movlw	low (_movement_list+65534)
  5324   00053C  26D9               	addwf	fsr2l,f,c
  5325   00053E  0E01               	movlw	high (_movement_list+65534)
  5326   000540  22DA               	addwfc	fsr2h,f,c
  5327   000542  0EFD               	movlw	253
  5328   000544  18DE               	xorwf	postinc2,w,c
  5329   000546  E106               	bnz	u3691
  5330   000548  28DE               	incf	postinc2,w,c
  5331   00054A  A4D8               	btfss	status,2,c
  5332   00054C  EFAA  F002         	goto	u3691
  5333   000550  EFAC  F002         	goto	u3690
  5334   000554                     u3691:
  5335   000554  EFBB  F002         	goto	l4359
  5336   000558                     u3690:
  5337   000558                     
  5338                           ;dc_motor.c: 418:             {;dc_motor.c: 420:                 movement_list[index-1] 
      +                          = -4;
  5339   000558  90D8               	bcf	status,0,c
  5340   00055A  3447               	rlcf	_index^0,w,c
  5341   00055C  6ED9               	movwf	fsr2l,c
  5342   00055E  3448               	rlcf	(_index+1)^0,w,c
  5343   000560  6EDA               	movwf	fsr2h,c
  5344   000562  0EFE               	movlw	low (_movement_list+65534)
  5345   000564  26D9               	addwf	fsr2l,f,c
  5346   000566  0E01               	movlw	high (_movement_list+65534)
  5347   000568  22DA               	addwfc	fsr2h,f,c
  5348   00056A  0EFC               	movlw	252
  5349   00056C  6EDE               	movwf	postinc2,c
  5350   00056E  0EFF               	movlw	255
  5351   000570  6EDD               	movwf	postdec2,c
  5352                           
  5353                           ;dc_motor.c: 421:             }
  5354   000572  EFDC  F002         	goto	l322
  5355   000576                     l4359:
  5356   000576  90D8               	bcf	status,0,c
  5357   000578  3447               	rlcf	_index^0,w,c
  5358   00057A  6ED9               	movwf	fsr2l,c
  5359   00057C  3448               	rlcf	(_index+1)^0,w,c
  5360   00057E  6EDA               	movwf	fsr2h,c
  5361   000580  0EFE               	movlw	low (_movement_list+65534)
  5362   000582  26D9               	addwf	fsr2l,f,c
  5363   000584  0E01               	movlw	high (_movement_list+65534)
  5364   000586  22DA               	addwfc	fsr2h,f,c
  5365   000588  0EFC               	movlw	252
  5366   00058A  18DE               	xorwf	postinc2,w,c
  5367   00058C  E106               	bnz	u3701
  5368   00058E  28DE               	incf	postinc2,w,c
  5369   000590  A4D8               	btfss	status,2,c
  5370   000592  EFCD  F002         	goto	u3701
  5371   000596  EFCF  F002         	goto	u3700
  5372   00059A                     u3701:
  5373   00059A  EFDC  F002         	goto	l322
  5374   00059E                     u3700:
  5375   00059E                     
  5376                           ;dc_motor.c: 424:             {;dc_motor.c: 426:                 movement_list[index-1] 
      +                          = -3;
  5377   00059E  90D8               	bcf	status,0,c
  5378   0005A0  3447               	rlcf	_index^0,w,c
  5379   0005A2  6ED9               	movwf	fsr2l,c
  5380   0005A4  3448               	rlcf	(_index+1)^0,w,c
  5381   0005A6  6EDA               	movwf	fsr2h,c
  5382   0005A8  0EFE               	movlw	low (_movement_list+65534)
  5383   0005AA  26D9               	addwf	fsr2l,f,c
  5384   0005AC  0E01               	movlw	high (_movement_list+65534)
  5385   0005AE  22DA               	addwfc	fsr2h,f,c
  5386   0005B0  0EFD               	movlw	253
  5387   0005B2  6EDE               	movwf	postinc2,c
  5388   0005B4  0EFF               	movlw	255
  5389   0005B6  6EDD               	movwf	postdec2,c
  5390   0005B8                     l322:
  5391                           
  5392                           ;dc_motor.c: 429:         movement_list[index] = 16;
  5393   0005B8  90D8               	bcf	status,0,c
  5394   0005BA  3447               	rlcf	_index^0,w,c
  5395   0005BC  6ED9               	movwf	fsr2l,c
  5396   0005BE  3448               	rlcf	(_index+1)^0,w,c
  5397   0005C0  6EDA               	movwf	fsr2h,c
  5398   0005C2  0E00               	movlw	low _movement_list
  5399   0005C4  26D9               	addwf	fsr2l,f,c
  5400   0005C6  0E02               	movlw	high _movement_list
  5401   0005C8  22DA               	addwfc	fsr2h,f,c
  5402   0005CA  0E10               	movlw	16
  5403   0005CC  6EDE               	movwf	postinc2,c
  5404   0005CE  0E00               	movlw	0
  5405   0005D0  6EDD               	movwf	postdec2,c
  5406   0005D2                     
  5407                           ;dc_motor.c: 430:         index += 1;
  5408   0005D2  4A47               	infsnz	_index^0,f,c
  5409   0005D4  2A48               	incf	(_index+1)^0,f,c
  5410   0005D6                     
  5411                           ;dc_motor.c: 432:         movement_list[index] = -1;
  5412   0005D6  90D8               	bcf	status,0,c
  5413   0005D8  3447               	rlcf	_index^0,w,c
  5414   0005DA  6ED9               	movwf	fsr2l,c
  5415   0005DC  3448               	rlcf	(_index+1)^0,w,c
  5416   0005DE  6EDA               	movwf	fsr2h,c
  5417   0005E0  0E00               	movlw	low _movement_list
  5418   0005E2  26D9               	addwf	fsr2l,f,c
  5419   0005E4  0E02               	movlw	high _movement_list
  5420   0005E6  22DA               	addwfc	fsr2h,f,c
  5421   0005E8  0EFF               	movlw	255
  5422   0005EA  6EDE               	movwf	postinc2,c
  5423   0005EC  0EFF               	movlw	255
  5424   0005EE  6EDD               	movwf	postdec2,c
  5425                           
  5426                           ;dc_motor.c: 433:         index += 1;
  5427   0005F0  4A47               	infsnz	_index^0,f,c
  5428   0005F2  2A48               	incf	(_index+1)^0,f,c
  5429   0005F4                     l4367:
  5430                           
  5431                           ;dc_motor.c: 437:     if(color == 5){
  5432   0005F4  0E05               	movlw	5
  5433   0005F6  182B               	xorwf	RobotMovement@color^0,w,c
  5434   0005F8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5435   0005FA  A4D8               	btfss	status,2,c
  5436   0005FC  EF02  F003         	goto	u3711
  5437   000600  EF04  F003         	goto	u3710
  5438   000604                     u3711:
  5439   000604  EF1D  F003         	goto	l4375
  5440   000608                     u3710:
  5441   000608                     
  5442                           ;dc_motor.c: 438:         turnRightLong(motorL, motorR);
  5443   000608  C02D  F021         	movff	RobotMovement@motorL,turnRightLong@mL
  5444   00060C  C02E  F022         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5445   000610  C02F  F023         	movff	RobotMovement@motorR,turnRightLong@mR
  5446   000614  C030  F024         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5447   000618  EC16  F00A         	call	_turnRightLong	;wreg free
  5448   00061C                     
  5449                           ;dc_motor.c: 439:         movement_list[index] = -3;
  5450   00061C  90D8               	bcf	status,0,c
  5451   00061E  3447               	rlcf	_index^0,w,c
  5452   000620  6ED9               	movwf	fsr2l,c
  5453   000622  3448               	rlcf	(_index+1)^0,w,c
  5454   000624  6EDA               	movwf	fsr2h,c
  5455   000626  0E00               	movlw	low _movement_list
  5456   000628  26D9               	addwf	fsr2l,f,c
  5457   00062A  0E02               	movlw	high _movement_list
  5458   00062C  22DA               	addwfc	fsr2h,f,c
  5459   00062E  0EFD               	movlw	253
  5460   000630  6EDE               	movwf	postinc2,c
  5461   000632  0EFF               	movlw	255
  5462   000634  6EDD               	movwf	postdec2,c
  5463   000636                     
  5464                           ;dc_motor.c: 440:         index += 1;
  5465   000636  4A47               	infsnz	_index^0,f,c
  5466   000638  2A48               	incf	(_index+1)^0,f,c
  5467   00063A                     l4375:
  5468                           
  5469                           ;dc_motor.c: 443:     if(color == 6){
  5470   00063A  0E06               	movlw	6
  5471   00063C  182B               	xorwf	RobotMovement@color^0,w,c
  5472   00063E  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5473   000640  A4D8               	btfss	status,2,c
  5474   000642  EF25  F003         	goto	u3721
  5475   000646  EF27  F003         	goto	u3720
  5476   00064A                     u3721:
  5477   00064A  EF40  F003         	goto	l4383
  5478   00064E                     u3720:
  5479   00064E                     
  5480                           ;dc_motor.c: 444:         turnLeftLong(motorL, motorR);
  5481   00064E  C02D  F021         	movff	RobotMovement@motorL,turnLeftLong@mL
  5482   000652  C02E  F022         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5483   000656  C02F  F023         	movff	RobotMovement@motorR,turnLeftLong@mR
  5484   00065A  C030  F024         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5485   00065E  ECBC  F008         	call	_turnLeftLong	;wreg free
  5486   000662                     
  5487                           ;dc_motor.c: 445:         movement_list[index] = -4;
  5488   000662  90D8               	bcf	status,0,c
  5489   000664  3447               	rlcf	_index^0,w,c
  5490   000666  6ED9               	movwf	fsr2l,c
  5491   000668  3448               	rlcf	(_index+1)^0,w,c
  5492   00066A  6EDA               	movwf	fsr2h,c
  5493   00066C  0E00               	movlw	low _movement_list
  5494   00066E  26D9               	addwf	fsr2l,f,c
  5495   000670  0E02               	movlw	high _movement_list
  5496   000672  22DA               	addwfc	fsr2h,f,c
  5497   000674  0EFC               	movlw	252
  5498   000676  6EDE               	movwf	postinc2,c
  5499   000678  0EFF               	movlw	255
  5500   00067A  6EDD               	movwf	postdec2,c
  5501   00067C                     
  5502                           ;dc_motor.c: 446:         index += 1;
  5503   00067C  4A47               	infsnz	_index^0,f,c
  5504   00067E  2A48               	incf	(_index+1)^0,f,c
  5505   000680                     l4383:
  5506                           
  5507                           ;dc_motor.c: 449:     if(color == 7){
  5508   000680  0E07               	movlw	7
  5509   000682  182B               	xorwf	RobotMovement@color^0,w,c
  5510   000684  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5511   000686  A4D8               	btfss	status,2,c
  5512   000688  EF48  F003         	goto	u3731
  5513   00068C  EF4A  F003         	goto	u3730
  5514   000690                     u3731:
  5515   000690  EF6D  F003         	goto	l4399
  5516   000694                     u3730:
  5517   000694                     
  5518                           ;dc_motor.c: 450:         int i;;dc_motor.c: 451:         for (i=0;i<2;i++)
  5519   000694  0E00               	movlw	0
  5520   000696  6E36               	movwf	(RobotMovement@i_1277+1)^0,c
  5521   000698  0E00               	movlw	0
  5522   00069A  6E35               	movwf	RobotMovement@i_1277^0,c
  5523   00069C                     l4391:
  5524                           
  5525                           ;dc_motor.c: 452:         {;dc_motor.c: 453:             turnRight(motorL, motorR);
  5526   00069C  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  5527   0006A0  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5528   0006A4  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  5529   0006A8  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5530   0006AC  ECBE  F00A         	call	_turnRight	;wreg free
  5531   0006B0                     
  5532                           ;dc_motor.c: 454:         }
  5533   0006B0  4A35               	infsnz	RobotMovement@i_1277^0,f,c
  5534   0006B2  2A36               	incf	(RobotMovement@i_1277+1)^0,f,c
  5535   0006B4  BE36               	btfsc	(RobotMovement@i_1277+1)^0,7,c
  5536   0006B6  EF66  F003         	goto	u3741
  5537   0006BA  5036               	movf	(RobotMovement@i_1277+1)^0,w,c
  5538   0006BC  E109               	bnz	u3740
  5539   0006BE  0E02               	movlw	2
  5540   0006C0  5C35               	subwf	RobotMovement@i_1277^0,w,c
  5541   0006C2  A0D8               	btfss	status,0,c
  5542   0006C4  EF66  F003         	goto	u3741
  5543   0006C8  EF68  F003         	goto	u3740
  5544   0006CC                     u3741:
  5545   0006CC  EF4E  F003         	goto	l4391
  5546   0006D0                     u3740:
  5547   0006D0                     
  5548                           ;dc_motor.c: 456:         state = 1;
  5549   0006D0  0E00               	movlw	0
  5550   0006D2  0100               	movlb	0	; () banked
  5551   0006D4  6FF5               	movwf	(_state+1)& (0+255),b
  5552   0006D6  0E01               	movlw	1
  5553   0006D8  6FF4               	movwf	_state& (0+255),b
  5554   0006DA                     l4399:
  5555                           
  5556                           ;dc_motor.c: 459:     if (color > 7)
  5557   0006DA  502C               	movf	(RobotMovement@color+1)^0,w,c
  5558   0006DC  E109               	bnz	u3750
  5559   0006DE  0E08               	movlw	8
  5560   0006E0  5C2B               	subwf	RobotMovement@color^0,w,c
  5561   0006E2  A0D8               	btfss	status,0,c
  5562   0006E4  EF76  F003         	goto	u3751
  5563   0006E8  EF78  F003         	goto	u3750
  5564   0006EC                     u3751:
  5565   0006EC  EF86  F003         	goto	l334
  5566   0006F0                     u3750:
  5567   0006F0                     
  5568                           ;dc_motor.c: 460:     {;dc_motor.c: 461:         TimedfullSpeedAhead(motorL, motorR, 5);
  5569   0006F0  C02D  F021         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5570   0006F4  C02E  F022         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5571   0006F8  C02F  F023         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5572   0006FC  C030  F024         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5573   000700  0E00               	movlw	0
  5574   000702  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5575   000704  0E05               	movlw	5
  5576   000706  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  5577   000708  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  5578   00070C                     l334:
  5579   00070C  0012               	return		;funcret
  5580   00070E                     __end_of_RobotMovement:
  5581                           	callstack 0
  5582                           
  5583 ;; *************** function _turnRightLong *****************
  5584 ;; Defined at:
  5585 ;;		line 239 in file "dc_motor.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5588 ;;		 -> main@motorL(9), 
  5589 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5590 ;;		 -> main@motorR(9), 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  i               2   40[COMRAM] int 
  5593 ;;  k               2   38[COMRAM] int 
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5606 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5607 ;;Total ram usage:       10 bytes
  5608 ;; Hardware stack levels used: 1
  5609 ;; Hardware stack levels required when called: 7
  5610 ;; This function calls:
  5611 ;;		_setMotorPWM
  5612 ;; This function is called by:
  5613 ;;		_RobotMovement
  5614 ;;		_return_back
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           	psect	text30
  5619   00142C                     __ptext30:
  5620                           	callstack 0
  5621   00142C                     _turnRightLong:
  5622                           	callstack 22
  5623   00142C                     
  5624                           ;dc_motor.c: 239: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 240: {;dc_motor.c: 242:     int k;;dc_motor.c: 243:     for (k=0;k<3;k++)
  5625   00142C  0E00               	movlw	0
  5626   00142E  6E28               	movwf	(turnRightLong@k+1)^0,c
  5627   001430  0E00               	movlw	0
  5628   001432  6E27               	movwf	turnRightLong@k^0,c
  5629   001434                     l3997:
  5630                           
  5631                           ;dc_motor.c: 244:     {;dc_motor.c: 245:         int i;;dc_motor.c: 246:         for(i=2
      +                          3;i<38;i+=5){
  5632   001434  0E00               	movlw	0
  5633   001436  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5634   001438  0E17               	movlw	23
  5635   00143A  6E29               	movwf	turnRightLong@i^0,c
  5636   00143C                     l4003:
  5637                           
  5638                           ;dc_motor.c: 247:         (*mL).direction=0;
  5639   00143C  EE20 F001          	lfsr	2,1
  5640   001440  5021               	movf	turnRightLong@mL^0,w,c
  5641   001442  26D9               	addwf	fsr2l,f,c
  5642   001444  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5643   001446  22DA               	addwfc	fsr2h,f,c
  5644   001448  0E00               	movlw	0
  5645   00144A  6EDF               	movwf	indf2,c
  5646                           
  5647                           ;dc_motor.c: 248:         (*mR).direction=1;
  5648   00144C  EE20 F001          	lfsr	2,1
  5649   001450  5023               	movf	turnRightLong@mR^0,w,c
  5650   001452  26D9               	addwf	fsr2l,f,c
  5651   001454  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5652   001456  22DA               	addwfc	fsr2h,f,c
  5653   001458  0E01               	movlw	1
  5654   00145A  6EDF               	movwf	indf2,c
  5655   00145C                     
  5656                           ;dc_motor.c: 249:         (*mL).power=i;
  5657   00145C  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5658   001460  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5659   001464  C029  FFDF         	movff	turnRightLong@i,indf2
  5660   001468                     
  5661                           ;dc_motor.c: 250:         (*mR).power=i;
  5662   001468  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5663   00146C  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5664   001470  C029  FFDF         	movff	turnRightLong@i,indf2
  5665   001474                     
  5666                           ;dc_motor.c: 251:         setMotorPWM(mL);
  5667   001474  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5668   001478  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5669   00147C  EC06  F008         	call	_setMotorPWM	;wreg free
  5670   001480                     
  5671                           ;dc_motor.c: 252:         setMotorPWM(mR);
  5672   001480  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5673   001484  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5674   001488  EC06  F008         	call	_setMotorPWM	;wreg free
  5675   00148C                     
  5676                           ;dc_motor.c: 253:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5677   00148C  0E09               	movlw	9
  5678   00148E  6E26               	movwf	(??_turnRightLong+1)^0,c
  5679   001490  0EB0               	movlw	176
  5680   001492  6E25               	movwf	??_turnRightLong^0,c
  5681   001494  0E58               	movlw	88
  5682   001496                     u4397:
  5683   001496  2EE8               	decfsz	wreg,f,c
  5684   001498  D7FE               	bra	u4397
  5685   00149A  2E25               	decfsz	??_turnRightLong^0,f,c
  5686   00149C  D7FC               	bra	u4397
  5687   00149E  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5688   0014A0  D7FA               	bra	u4397
  5689   0014A2  D000               	nop2	
  5690   0014A4                     
  5691                           ;dc_motor.c: 254:         }
  5692   0014A4  0E05               	movlw	5
  5693   0014A6  2629               	addwf	turnRightLong@i^0,f,c
  5694   0014A8  0E00               	movlw	0
  5695   0014AA  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5696   0014AC  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5697   0014AE  EF62  F00A         	goto	u3171
  5698   0014B2  502A               	movf	(turnRightLong@i+1)^0,w,c
  5699   0014B4  E109               	bnz	u3170
  5700   0014B6  0E26               	movlw	38
  5701   0014B8  5C29               	subwf	turnRightLong@i^0,w,c
  5702   0014BA  A0D8               	btfss	status,0,c
  5703   0014BC  EF62  F00A         	goto	u3171
  5704   0014C0  EF64  F00A         	goto	u3170
  5705   0014C4                     u3171:
  5706   0014C4  EF1E  F00A         	goto	l4003
  5707   0014C8                     u3170:
  5708   0014C8                     
  5709                           ;dc_motor.c: 255:         for(i=28;i>13;i-=5){
  5710   0014C8  0E00               	movlw	0
  5711   0014CA  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5712   0014CC  0E1C               	movlw	28
  5713   0014CE  6E29               	movwf	turnRightLong@i^0,c
  5714   0014D0                     l4025:
  5715                           
  5716                           ;dc_motor.c: 256:         (*mL).direction=0;
  5717   0014D0  EE20 F001          	lfsr	2,1
  5718   0014D4  5021               	movf	turnRightLong@mL^0,w,c
  5719   0014D6  26D9               	addwf	fsr2l,f,c
  5720   0014D8  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5721   0014DA  22DA               	addwfc	fsr2h,f,c
  5722   0014DC  0E00               	movlw	0
  5723   0014DE  6EDF               	movwf	indf2,c
  5724                           
  5725                           ;dc_motor.c: 257:         (*mR).direction=1;
  5726   0014E0  EE20 F001          	lfsr	2,1
  5727   0014E4  5023               	movf	turnRightLong@mR^0,w,c
  5728   0014E6  26D9               	addwf	fsr2l,f,c
  5729   0014E8  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5730   0014EA  22DA               	addwfc	fsr2h,f,c
  5731   0014EC  0E01               	movlw	1
  5732   0014EE  6EDF               	movwf	indf2,c
  5733   0014F0                     
  5734                           ;dc_motor.c: 258:         (*mL).power=i;
  5735   0014F0  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5736   0014F4  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5737   0014F8  C029  FFDF         	movff	turnRightLong@i,indf2
  5738   0014FC                     
  5739                           ;dc_motor.c: 259:         (*mR).power=i;
  5740   0014FC  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5741   001500  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5742   001504  C029  FFDF         	movff	turnRightLong@i,indf2
  5743   001508                     
  5744                           ;dc_motor.c: 260:         setMotorPWM(mL);
  5745   001508  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5746   00150C  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5747   001510  EC06  F008         	call	_setMotorPWM	;wreg free
  5748   001514                     
  5749                           ;dc_motor.c: 261:         setMotorPWM(mR);
  5750   001514  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5751   001518  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5752   00151C  EC06  F008         	call	_setMotorPWM	;wreg free
  5753   001520                     
  5754                           ;dc_motor.c: 262:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5755   001520  0E09               	movlw	9
  5756   001522  6E26               	movwf	(??_turnRightLong+1)^0,c
  5757   001524  0E86               	movlw	134
  5758   001526  6E25               	movwf	??_turnRightLong^0,c
  5759   001528  0ECA               	movlw	202
  5760   00152A                     u4407:
  5761   00152A  2EE8               	decfsz	wreg,f,c
  5762   00152C  D7FE               	bra	u4407
  5763   00152E  2E25               	decfsz	??_turnRightLong^0,f,c
  5764   001530  D7FC               	bra	u4407
  5765   001532  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5766   001534  D7FA               	bra	u4407
  5767   001536                     
  5768                           ;dc_motor.c: 264:         }
  5769   001536  0EFB               	movlw	251
  5770   001538  2629               	addwf	turnRightLong@i^0,f,c
  5771   00153A  0EFF               	movlw	255
  5772   00153C  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5773   00153E  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5774   001540  EFAD  F00A         	goto	u3180
  5775   001544  502A               	movf	(turnRightLong@i+1)^0,w,c
  5776   001546  E107               	bnz	u3181
  5777   001548  0E0E               	movlw	14
  5778   00154A  5C29               	subwf	turnRightLong@i^0,w,c
  5779   00154C  B0D8               	btfsc	status,0,c
  5780   00154E  EFAB  F00A         	goto	u3181
  5781   001552  EFAD  F00A         	goto	u3180
  5782   001556                     u3181:
  5783   001556  EF68  F00A         	goto	l4025
  5784   00155A                     u3180:
  5785   00155A                     
  5786                           ;dc_motor.c: 265:     }
  5787   00155A  4A27               	infsnz	turnRightLong@k^0,f,c
  5788   00155C  2A28               	incf	(turnRightLong@k+1)^0,f,c
  5789   00155E  BE28               	btfsc	(turnRightLong@k+1)^0,7,c
  5790   001560  EFBB  F00A         	goto	u3191
  5791   001564  5028               	movf	(turnRightLong@k+1)^0,w,c
  5792   001566  E109               	bnz	u3190
  5793   001568  0E03               	movlw	3
  5794   00156A  5C27               	subwf	turnRightLong@k^0,w,c
  5795   00156C  A0D8               	btfss	status,0,c
  5796   00156E  EFBB  F00A         	goto	u3191
  5797   001572  EFBD  F00A         	goto	u3190
  5798   001576                     u3191:
  5799   001576  EF1A  F00A         	goto	l3997
  5800   00157A                     u3190:
  5801   00157A  0012               	return		;funcret
  5802   00157C                     __end_of_turnRightLong:
  5803                           	callstack 0
  5804                           
  5805 ;; *************** function _turnRight *****************
  5806 ;; Defined at:
  5807 ;;		line 159 in file "dc_motor.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5810 ;;		 -> main@motorL(9), 
  5811 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5812 ;;		 -> main@motorR(9), 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  i               2   40[COMRAM] int 
  5815 ;;  k               2   38[COMRAM] int 
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  1    wreg      void 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5825 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5828 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5829 ;;Total ram usage:       10 bytes
  5830 ;; Hardware stack levels used: 1
  5831 ;; Hardware stack levels required when called: 7
  5832 ;; This function calls:
  5833 ;;		_setMotorPWM
  5834 ;; This function is called by:
  5835 ;;		_RobotMovement
  5836 ;;		_return_back
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text31
  5841   00157C                     __ptext31:
  5842                           	callstack 0
  5843   00157C                     _turnRight:
  5844                           	callstack 22
  5845   00157C                     
  5846                           ;dc_motor.c: 159: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          60: {;dc_motor.c: 185:     int k;;dc_motor.c: 186:     for (k=0;k<2;k++)
  5847   00157C  0E00               	movlw	0
  5848   00157E  6E28               	movwf	(turnRight@k+1)^0,c
  5849   001580  0E00               	movlw	0
  5850   001582  6E27               	movwf	turnRight@k^0,c
  5851   001584                     l3889:
  5852                           
  5853                           ;dc_motor.c: 187:     {;dc_motor.c: 188:         int i;;dc_motor.c: 189:         for(i=2
      +                          3;i<38;i+=5){
  5854   001584  0E00               	movlw	0
  5855   001586  6E2A               	movwf	(turnRight@i+1)^0,c
  5856   001588  0E17               	movlw	23
  5857   00158A  6E29               	movwf	turnRight@i^0,c
  5858   00158C                     l3895:
  5859                           
  5860                           ;dc_motor.c: 190:         (*mL).direction=0;
  5861   00158C  EE20 F001          	lfsr	2,1
  5862   001590  5021               	movf	turnRight@mL^0,w,c
  5863   001592  26D9               	addwf	fsr2l,f,c
  5864   001594  5022               	movf	(turnRight@mL+1)^0,w,c
  5865   001596  22DA               	addwfc	fsr2h,f,c
  5866   001598  0E00               	movlw	0
  5867   00159A  6EDF               	movwf	indf2,c
  5868                           
  5869                           ;dc_motor.c: 191:         (*mR).direction=1;
  5870   00159C  EE20 F001          	lfsr	2,1
  5871   0015A0  5023               	movf	turnRight@mR^0,w,c
  5872   0015A2  26D9               	addwf	fsr2l,f,c
  5873   0015A4  5024               	movf	(turnRight@mR+1)^0,w,c
  5874   0015A6  22DA               	addwfc	fsr2h,f,c
  5875   0015A8  0E01               	movlw	1
  5876   0015AA  6EDF               	movwf	indf2,c
  5877   0015AC                     
  5878                           ;dc_motor.c: 192:         (*mL).power=i;
  5879   0015AC  C021  FFD9         	movff	turnRight@mL,fsr2l
  5880   0015B0  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5881   0015B4  C029  FFDF         	movff	turnRight@i,indf2
  5882   0015B8                     
  5883                           ;dc_motor.c: 193:         (*mR).power=i;
  5884   0015B8  C023  FFD9         	movff	turnRight@mR,fsr2l
  5885   0015BC  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5886   0015C0  C029  FFDF         	movff	turnRight@i,indf2
  5887   0015C4                     
  5888                           ;dc_motor.c: 194:         setMotorPWM(mL);
  5889   0015C4  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5890   0015C8  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5891   0015CC  EC06  F008         	call	_setMotorPWM	;wreg free
  5892   0015D0                     
  5893                           ;dc_motor.c: 195:         setMotorPWM(mR);
  5894   0015D0  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5895   0015D4  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5896   0015D8  EC06  F008         	call	_setMotorPWM	;wreg free
  5897   0015DC                     
  5898                           ;dc_motor.c: 196:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5899   0015DC  0E09               	movlw	9
  5900   0015DE  6E26               	movwf	(??_turnRight+1)^0,c
  5901   0015E0  0EB0               	movlw	176
  5902   0015E2  6E25               	movwf	??_turnRight^0,c
  5903   0015E4  0E58               	movlw	88
  5904   0015E6                     u4417:
  5905   0015E6  2EE8               	decfsz	wreg,f,c
  5906   0015E8  D7FE               	bra	u4417
  5907   0015EA  2E25               	decfsz	??_turnRight^0,f,c
  5908   0015EC  D7FC               	bra	u4417
  5909   0015EE  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5910   0015F0  D7FA               	bra	u4417
  5911   0015F2  D000               	nop2	
  5912   0015F4                     
  5913                           ;dc_motor.c: 197:         }
  5914   0015F4  0E05               	movlw	5
  5915   0015F6  2629               	addwf	turnRight@i^0,f,c
  5916   0015F8  0E00               	movlw	0
  5917   0015FA  222A               	addwfc	(turnRight@i+1)^0,f,c
  5918   0015FC  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5919   0015FE  EF0A  F00B         	goto	u3111
  5920   001602  502A               	movf	(turnRight@i+1)^0,w,c
  5921   001604  E109               	bnz	u3110
  5922   001606  0E26               	movlw	38
  5923   001608  5C29               	subwf	turnRight@i^0,w,c
  5924   00160A  A0D8               	btfss	status,0,c
  5925   00160C  EF0A  F00B         	goto	u3111
  5926   001610  EF0C  F00B         	goto	u3110
  5927   001614                     u3111:
  5928   001614  EFC6  F00A         	goto	l3895
  5929   001618                     u3110:
  5930   001618                     
  5931                           ;dc_motor.c: 198:         for(i=28;i>13;i-=5){
  5932   001618  0E00               	movlw	0
  5933   00161A  6E2A               	movwf	(turnRight@i+1)^0,c
  5934   00161C  0E1C               	movlw	28
  5935   00161E  6E29               	movwf	turnRight@i^0,c
  5936   001620                     l3917:
  5937                           
  5938                           ;dc_motor.c: 199:         (*mL).direction=0;
  5939   001620  EE20 F001          	lfsr	2,1
  5940   001624  5021               	movf	turnRight@mL^0,w,c
  5941   001626  26D9               	addwf	fsr2l,f,c
  5942   001628  5022               	movf	(turnRight@mL+1)^0,w,c
  5943   00162A  22DA               	addwfc	fsr2h,f,c
  5944   00162C  0E00               	movlw	0
  5945   00162E  6EDF               	movwf	indf2,c
  5946                           
  5947                           ;dc_motor.c: 200:         (*mR).direction=1;
  5948   001630  EE20 F001          	lfsr	2,1
  5949   001634  5023               	movf	turnRight@mR^0,w,c
  5950   001636  26D9               	addwf	fsr2l,f,c
  5951   001638  5024               	movf	(turnRight@mR+1)^0,w,c
  5952   00163A  22DA               	addwfc	fsr2h,f,c
  5953   00163C  0E01               	movlw	1
  5954   00163E  6EDF               	movwf	indf2,c
  5955   001640                     
  5956                           ;dc_motor.c: 201:         (*mL).power=i;
  5957   001640  C021  FFD9         	movff	turnRight@mL,fsr2l
  5958   001644  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5959   001648  C029  FFDF         	movff	turnRight@i,indf2
  5960   00164C                     
  5961                           ;dc_motor.c: 202:         (*mR).power=i;
  5962   00164C  C023  FFD9         	movff	turnRight@mR,fsr2l
  5963   001650  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5964   001654  C029  FFDF         	movff	turnRight@i,indf2
  5965   001658                     
  5966                           ;dc_motor.c: 203:         setMotorPWM(mL);
  5967   001658  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5968   00165C  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5969   001660  EC06  F008         	call	_setMotorPWM	;wreg free
  5970   001664                     
  5971                           ;dc_motor.c: 204:         setMotorPWM(mR);
  5972   001664  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5973   001668  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5974   00166C  EC06  F008         	call	_setMotorPWM	;wreg free
  5975   001670                     
  5976                           ;dc_motor.c: 205:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5977   001670  0E09               	movlw	9
  5978   001672  6E26               	movwf	(??_turnRight+1)^0,c
  5979   001674  0E86               	movlw	134
  5980   001676  6E25               	movwf	??_turnRight^0,c
  5981   001678  0ECA               	movlw	202
  5982   00167A                     u4427:
  5983   00167A  2EE8               	decfsz	wreg,f,c
  5984   00167C  D7FE               	bra	u4427
  5985   00167E  2E25               	decfsz	??_turnRight^0,f,c
  5986   001680  D7FC               	bra	u4427
  5987   001682  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5988   001684  D7FA               	bra	u4427
  5989   001686                     
  5990                           ;dc_motor.c: 207:         }
  5991   001686  0EFB               	movlw	251
  5992   001688  2629               	addwf	turnRight@i^0,f,c
  5993   00168A  0EFF               	movlw	255
  5994   00168C  222A               	addwfc	(turnRight@i+1)^0,f,c
  5995   00168E  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5996   001690  EF55  F00B         	goto	u3120
  5997   001694  502A               	movf	(turnRight@i+1)^0,w,c
  5998   001696  E107               	bnz	u3121
  5999   001698  0E0E               	movlw	14
  6000   00169A  5C29               	subwf	turnRight@i^0,w,c
  6001   00169C  B0D8               	btfsc	status,0,c
  6002   00169E  EF53  F00B         	goto	u3121
  6003   0016A2  EF55  F00B         	goto	u3120
  6004   0016A6                     u3121:
  6005   0016A6  EF10  F00B         	goto	l3917
  6006   0016AA                     u3120:
  6007   0016AA                     
  6008                           ;dc_motor.c: 208:     }
  6009   0016AA  4A27               	infsnz	turnRight@k^0,f,c
  6010   0016AC  2A28               	incf	(turnRight@k+1)^0,f,c
  6011   0016AE  BE28               	btfsc	(turnRight@k+1)^0,7,c
  6012   0016B0  EF63  F00B         	goto	u3131
  6013   0016B4  5028               	movf	(turnRight@k+1)^0,w,c
  6014   0016B6  E109               	bnz	u3130
  6015   0016B8  0E02               	movlw	2
  6016   0016BA  5C27               	subwf	turnRight@k^0,w,c
  6017   0016BC  A0D8               	btfss	status,0,c
  6018   0016BE  EF63  F00B         	goto	u3131
  6019   0016C2  EF65  F00B         	goto	u3130
  6020   0016C6                     u3131:
  6021   0016C6  EFC2  F00A         	goto	l3889
  6022   0016CA                     u3130:
  6023   0016CA  0012               	return		;funcret
  6024   0016CC                     __end_of_turnRight:
  6025                           	callstack 0
  6026                           
  6027 ;; *************** function _turnLeftLong *****************
  6028 ;; Defined at:
  6029 ;;		line 211 in file "dc_motor.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6032 ;;		 -> main@motorL(9), 
  6033 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6034 ;;		 -> main@motorR(9), 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  i               2   40[COMRAM] int 
  6037 ;;  k               2   38[COMRAM] int 
  6038 ;; Return value:  Size  Location     Type
  6039 ;;                  1    wreg      void 
  6040 ;; Registers used:
  6041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6042 ;; Tracked objects:
  6043 ;;		On entry : 0/0
  6044 ;;		On exit  : 0/0
  6045 ;;		Unchanged: 0/0
  6046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6047 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6048 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6049 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6050 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6051 ;;Total ram usage:       10 bytes
  6052 ;; Hardware stack levels used: 1
  6053 ;; Hardware stack levels required when called: 7
  6054 ;; This function calls:
  6055 ;;		_setMotorPWM
  6056 ;; This function is called by:
  6057 ;;		_RobotMovement
  6058 ;;		_return_back
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text32
  6063   001178                     __ptext32:
  6064                           	callstack 0
  6065   001178                     _turnLeftLong:
  6066                           	callstack 22
  6067   001178                     
  6068                           ;dc_motor.c: 211: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 212: {;dc_motor.c: 213:     int k = 0;
  6069   001178  0E00               	movlw	0
  6070   00117A  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6071   00117C  0E00               	movlw	0
  6072   00117E  6E27               	movwf	turnLeftLong@k^0,c
  6073                           
  6074                           ;dc_motor.c: 214:     for (k=0;k<3;k++)
  6075   001180  0E00               	movlw	0
  6076   001182  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6077   001184  0E00               	movlw	0
  6078   001186  6E27               	movwf	turnLeftLong@k^0,c
  6079   001188                     l3943:
  6080                           
  6081                           ;dc_motor.c: 215:     {;dc_motor.c: 216:         int i;;dc_motor.c: 217:         for(i=4
      +                          1;i<56;i+=5){
  6082   001188  0E00               	movlw	0
  6083   00118A  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6084   00118C  0E29               	movlw	41
  6085   00118E  6E29               	movwf	turnLeftLong@i^0,c
  6086   001190                     l3949:
  6087                           
  6088                           ;dc_motor.c: 218:         (*mL).direction=1;
  6089   001190  EE20 F001          	lfsr	2,1
  6090   001194  5021               	movf	turnLeftLong@mL^0,w,c
  6091   001196  26D9               	addwf	fsr2l,f,c
  6092   001198  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6093   00119A  22DA               	addwfc	fsr2h,f,c
  6094   00119C  0E01               	movlw	1
  6095   00119E  6EDF               	movwf	indf2,c
  6096                           
  6097                           ;dc_motor.c: 219:         (*mR).direction=0;
  6098   0011A0  EE20 F001          	lfsr	2,1
  6099   0011A4  5023               	movf	turnLeftLong@mR^0,w,c
  6100   0011A6  26D9               	addwf	fsr2l,f,c
  6101   0011A8  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6102   0011AA  22DA               	addwfc	fsr2h,f,c
  6103   0011AC  0E00               	movlw	0
  6104   0011AE  6EDF               	movwf	indf2,c
  6105   0011B0                     
  6106                           ;dc_motor.c: 220:         (*mL).power=i;
  6107   0011B0  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6108   0011B4  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6109   0011B8  C029  FFDF         	movff	turnLeftLong@i,indf2
  6110   0011BC                     
  6111                           ;dc_motor.c: 221:         (*mR).power=i;
  6112   0011BC  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6113   0011C0  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6114   0011C4  C029  FFDF         	movff	turnLeftLong@i,indf2
  6115   0011C8                     
  6116                           ;dc_motor.c: 222:         setMotorPWM(mL);
  6117   0011C8  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6118   0011CC  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6119   0011D0  EC06  F008         	call	_setMotorPWM	;wreg free
  6120   0011D4                     
  6121                           ;dc_motor.c: 223:         setMotorPWM(mR);
  6122   0011D4  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6123   0011D8  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6124   0011DC  EC06  F008         	call	_setMotorPWM	;wreg free
  6125   0011E0                     
  6126                           ;dc_motor.c: 224:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6127   0011E0  0E05               	movlw	5
  6128   0011E2  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6129   0011E4  0EB6               	movlw	182
  6130   0011E6  6E25               	movwf	??_turnLeftLong^0,c
  6131   0011E8  0E2C               	movlw	44
  6132   0011EA                     u4437:
  6133   0011EA  2EE8               	decfsz	wreg,f,c
  6134   0011EC  D7FE               	bra	u4437
  6135   0011EE  2E25               	decfsz	??_turnLeftLong^0,f,c
  6136   0011F0  D7FC               	bra	u4437
  6137   0011F2  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6138   0011F4  D7FA               	bra	u4437
  6139   0011F6  D000               	nop2	
  6140   0011F8                     
  6141                           ;dc_motor.c: 225:         }
  6142   0011F8  0E05               	movlw	5
  6143   0011FA  2629               	addwf	turnLeftLong@i^0,f,c
  6144   0011FC  0E00               	movlw	0
  6145   0011FE  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6146   001200  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6147   001202  EF0C  F009         	goto	u3141
  6148   001206  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6149   001208  E109               	bnz	u3140
  6150   00120A  0E38               	movlw	56
  6151   00120C  5C29               	subwf	turnLeftLong@i^0,w,c
  6152   00120E  A0D8               	btfss	status,0,c
  6153   001210  EF0C  F009         	goto	u3141
  6154   001214  EF0E  F009         	goto	u3140
  6155   001218                     u3141:
  6156   001218  EFC8  F008         	goto	l3949
  6157   00121C                     u3140:
  6158   00121C                     
  6159                           ;dc_motor.c: 226:         for(i=46;i>31;i-=5){
  6160   00121C  0E00               	movlw	0
  6161   00121E  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6162   001220  0E2E               	movlw	46
  6163   001222  6E29               	movwf	turnLeftLong@i^0,c
  6164   001224                     l3971:
  6165                           
  6166                           ;dc_motor.c: 227:         (*mL).direction=1;
  6167   001224  EE20 F001          	lfsr	2,1
  6168   001228  5021               	movf	turnLeftLong@mL^0,w,c
  6169   00122A  26D9               	addwf	fsr2l,f,c
  6170   00122C  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6171   00122E  22DA               	addwfc	fsr2h,f,c
  6172   001230  0E01               	movlw	1
  6173   001232  6EDF               	movwf	indf2,c
  6174                           
  6175                           ;dc_motor.c: 228:         (*mR).direction=0;
  6176   001234  EE20 F001          	lfsr	2,1
  6177   001238  5023               	movf	turnLeftLong@mR^0,w,c
  6178   00123A  26D9               	addwf	fsr2l,f,c
  6179   00123C  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6180   00123E  22DA               	addwfc	fsr2h,f,c
  6181   001240  0E00               	movlw	0
  6182   001242  6EDF               	movwf	indf2,c
  6183   001244                     
  6184                           ;dc_motor.c: 229:         (*mL).power=i;
  6185   001244  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6186   001248  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6187   00124C  C029  FFDF         	movff	turnLeftLong@i,indf2
  6188   001250                     
  6189                           ;dc_motor.c: 230:         (*mR).power=i;
  6190   001250  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6191   001254  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6192   001258  C029  FFDF         	movff	turnLeftLong@i,indf2
  6193   00125C                     
  6194                           ;dc_motor.c: 231:         setMotorPWM(mL);
  6195   00125C  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6196   001260  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6197   001264  EC06  F008         	call	_setMotorPWM	;wreg free
  6198   001268                     
  6199                           ;dc_motor.c: 232:         setMotorPWM(mR);
  6200   001268  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6201   00126C  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6202   001270  EC06  F008         	call	_setMotorPWM	;wreg free
  6203   001274                     
  6204                           ;dc_motor.c: 233:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6205   001274  0E05               	movlw	5
  6206   001276  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6207   001278  0EA1               	movlw	161
  6208   00127A  6E25               	movwf	??_turnLeftLong^0,c
  6209   00127C  0E65               	movlw	101
  6210   00127E                     u4447:
  6211   00127E  2EE8               	decfsz	wreg,f,c
  6212   001280  D7FE               	bra	u4447
  6213   001282  2E25               	decfsz	??_turnLeftLong^0,f,c
  6214   001284  D7FC               	bra	u4447
  6215   001286  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6216   001288  D7FA               	bra	u4447
  6217   00128A  F000               	nop	
  6218   00128C                     
  6219                           ;dc_motor.c: 235:         }
  6220   00128C  0EFB               	movlw	251
  6221   00128E  2629               	addwf	turnLeftLong@i^0,f,c
  6222   001290  0EFF               	movlw	255
  6223   001292  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6224   001294  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6225   001296  EF58  F009         	goto	u3150
  6226   00129A  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6227   00129C  E107               	bnz	u3151
  6228   00129E  0E20               	movlw	32
  6229   0012A0  5C29               	subwf	turnLeftLong@i^0,w,c
  6230   0012A2  B0D8               	btfsc	status,0,c
  6231   0012A4  EF56  F009         	goto	u3151
  6232   0012A8  EF58  F009         	goto	u3150
  6233   0012AC                     u3151:
  6234   0012AC  EF12  F009         	goto	l3971
  6235   0012B0                     u3150:
  6236   0012B0                     
  6237                           ;dc_motor.c: 236:     }
  6238   0012B0  4A27               	infsnz	turnLeftLong@k^0,f,c
  6239   0012B2  2A28               	incf	(turnLeftLong@k+1)^0,f,c
  6240   0012B4  BE28               	btfsc	(turnLeftLong@k+1)^0,7,c
  6241   0012B6  EF66  F009         	goto	u3161
  6242   0012BA  5028               	movf	(turnLeftLong@k+1)^0,w,c
  6243   0012BC  E109               	bnz	u3160
  6244   0012BE  0E03               	movlw	3
  6245   0012C0  5C27               	subwf	turnLeftLong@k^0,w,c
  6246   0012C2  A0D8               	btfss	status,0,c
  6247   0012C4  EF66  F009         	goto	u3161
  6248   0012C8  EF68  F009         	goto	u3160
  6249   0012CC                     u3161:
  6250   0012CC  EFC4  F008         	goto	l3943
  6251   0012D0                     u3160:
  6252   0012D0  0012               	return		;funcret
  6253   0012D2                     __end_of_turnLeftLong:
  6254                           	callstack 0
  6255                           
  6256 ;; *************** function _turnLeft *****************
  6257 ;; Defined at:
  6258 ;;		line 107 in file "dc_motor.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6261 ;;		 -> main@motorL(9), 
  6262 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6263 ;;		 -> main@motorR(9), 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  i               2   40[COMRAM] int 
  6266 ;;  k               2   38[COMRAM] int 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  1    wreg      void 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6276 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6280 ;;Total ram usage:       10 bytes
  6281 ;; Hardware stack levels used: 1
  6282 ;; Hardware stack levels required when called: 7
  6283 ;; This function calls:
  6284 ;;		_setMotorPWM
  6285 ;; This function is called by:
  6286 ;;		_RobotMovement
  6287 ;;		_return_back
  6288 ;; This function uses a non-reentrant model
  6289 ;;
  6290                           
  6291                           	psect	text33
  6292   0012D2                     __ptext33:
  6293                           	callstack 0
  6294   0012D2                     _turnLeft:
  6295                           	callstack 22
  6296   0012D2                     
  6297                           ;dc_motor.c: 107: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 108: {;dc_motor.
      +                          c: 133:     int k = 0;
  6298   0012D2  0E00               	movlw	0
  6299   0012D4  6E28               	movwf	(turnLeft@k+1)^0,c
  6300   0012D6  0E00               	movlw	0
  6301   0012D8  6E27               	movwf	turnLeft@k^0,c
  6302                           
  6303                           ;dc_motor.c: 134:     for (k=0;k<2;k++)
  6304   0012DA  0E00               	movlw	0
  6305   0012DC  6E28               	movwf	(turnLeft@k+1)^0,c
  6306   0012DE  0E00               	movlw	0
  6307   0012E0  6E27               	movwf	turnLeft@k^0,c
  6308   0012E2                     l3835:
  6309                           
  6310                           ;dc_motor.c: 135:     {;dc_motor.c: 136:         int i;;dc_motor.c: 137:         for(i=4
      +                          1;i<56;i+=5){
  6311   0012E2  0E00               	movlw	0
  6312   0012E4  6E2A               	movwf	(turnLeft@i+1)^0,c
  6313   0012E6  0E29               	movlw	41
  6314   0012E8  6E29               	movwf	turnLeft@i^0,c
  6315   0012EA                     l3841:
  6316                           
  6317                           ;dc_motor.c: 138:         (*mL).direction=1;
  6318   0012EA  EE20 F001          	lfsr	2,1
  6319   0012EE  5021               	movf	turnLeft@mL^0,w,c
  6320   0012F0  26D9               	addwf	fsr2l,f,c
  6321   0012F2  5022               	movf	(turnLeft@mL+1)^0,w,c
  6322   0012F4  22DA               	addwfc	fsr2h,f,c
  6323   0012F6  0E01               	movlw	1
  6324   0012F8  6EDF               	movwf	indf2,c
  6325                           
  6326                           ;dc_motor.c: 139:         (*mR).direction=0;
  6327   0012FA  EE20 F001          	lfsr	2,1
  6328   0012FE  5023               	movf	turnLeft@mR^0,w,c
  6329   001300  26D9               	addwf	fsr2l,f,c
  6330   001302  5024               	movf	(turnLeft@mR+1)^0,w,c
  6331   001304  22DA               	addwfc	fsr2h,f,c
  6332   001306  0E00               	movlw	0
  6333   001308  6EDF               	movwf	indf2,c
  6334   00130A                     
  6335                           ;dc_motor.c: 140:         (*mL).power=i;
  6336   00130A  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6337   00130E  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6338   001312  C029  FFDF         	movff	turnLeft@i,indf2
  6339   001316                     
  6340                           ;dc_motor.c: 141:         (*mR).power=i;
  6341   001316  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6342   00131A  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6343   00131E  C029  FFDF         	movff	turnLeft@i,indf2
  6344   001322                     
  6345                           ;dc_motor.c: 142:         setMotorPWM(mL);
  6346   001322  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6347   001326  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6348   00132A  EC06  F008         	call	_setMotorPWM	;wreg free
  6349   00132E                     
  6350                           ;dc_motor.c: 143:         setMotorPWM(mR);
  6351   00132E  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6352   001332  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6353   001336  EC06  F008         	call	_setMotorPWM	;wreg free
  6354   00133A                     
  6355                           ;dc_motor.c: 144:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6356   00133A  0E05               	movlw	5
  6357   00133C  6E26               	movwf	(??_turnLeft+1)^0,c
  6358   00133E  0EB6               	movlw	182
  6359   001340  6E25               	movwf	??_turnLeft^0,c
  6360   001342  0E2C               	movlw	44
  6361   001344                     u4457:
  6362   001344  2EE8               	decfsz	wreg,f,c
  6363   001346  D7FE               	bra	u4457
  6364   001348  2E25               	decfsz	??_turnLeft^0,f,c
  6365   00134A  D7FC               	bra	u4457
  6366   00134C  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6367   00134E  D7FA               	bra	u4457
  6368   001350  D000               	nop2	
  6369   001352                     
  6370                           ;dc_motor.c: 145:         }
  6371   001352  0E05               	movlw	5
  6372   001354  2629               	addwf	turnLeft@i^0,f,c
  6373   001356  0E00               	movlw	0
  6374   001358  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6375   00135A  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6376   00135C  EFB9  F009         	goto	u3081
  6377   001360  502A               	movf	(turnLeft@i+1)^0,w,c
  6378   001362  E109               	bnz	u3080
  6379   001364  0E38               	movlw	56
  6380   001366  5C29               	subwf	turnLeft@i^0,w,c
  6381   001368  A0D8               	btfss	status,0,c
  6382   00136A  EFB9  F009         	goto	u3081
  6383   00136E  EFBB  F009         	goto	u3080
  6384   001372                     u3081:
  6385   001372  EF75  F009         	goto	l3841
  6386   001376                     u3080:
  6387   001376                     
  6388                           ;dc_motor.c: 146:         for(i=46;i>31;i-=5){
  6389   001376  0E00               	movlw	0
  6390   001378  6E2A               	movwf	(turnLeft@i+1)^0,c
  6391   00137A  0E2E               	movlw	46
  6392   00137C  6E29               	movwf	turnLeft@i^0,c
  6393   00137E                     l3863:
  6394                           
  6395                           ;dc_motor.c: 147:         (*mL).direction=1;
  6396   00137E  EE20 F001          	lfsr	2,1
  6397   001382  5021               	movf	turnLeft@mL^0,w,c
  6398   001384  26D9               	addwf	fsr2l,f,c
  6399   001386  5022               	movf	(turnLeft@mL+1)^0,w,c
  6400   001388  22DA               	addwfc	fsr2h,f,c
  6401   00138A  0E01               	movlw	1
  6402   00138C  6EDF               	movwf	indf2,c
  6403                           
  6404                           ;dc_motor.c: 148:         (*mR).direction=0;
  6405   00138E  EE20 F001          	lfsr	2,1
  6406   001392  5023               	movf	turnLeft@mR^0,w,c
  6407   001394  26D9               	addwf	fsr2l,f,c
  6408   001396  5024               	movf	(turnLeft@mR+1)^0,w,c
  6409   001398  22DA               	addwfc	fsr2h,f,c
  6410   00139A  0E00               	movlw	0
  6411   00139C  6EDF               	movwf	indf2,c
  6412   00139E                     
  6413                           ;dc_motor.c: 149:         (*mL).power=i;
  6414   00139E  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6415   0013A2  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6416   0013A6  C029  FFDF         	movff	turnLeft@i,indf2
  6417   0013AA                     
  6418                           ;dc_motor.c: 150:         (*mR).power=i;
  6419   0013AA  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6420   0013AE  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6421   0013B2  C029  FFDF         	movff	turnLeft@i,indf2
  6422   0013B6                     
  6423                           ;dc_motor.c: 151:         setMotorPWM(mL);
  6424   0013B6  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6425   0013BA  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6426   0013BE  EC06  F008         	call	_setMotorPWM	;wreg free
  6427   0013C2                     
  6428                           ;dc_motor.c: 152:         setMotorPWM(mR);
  6429   0013C2  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6430   0013C6  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6431   0013CA  EC06  F008         	call	_setMotorPWM	;wreg free
  6432   0013CE                     
  6433                           ;dc_motor.c: 153:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6434   0013CE  0E05               	movlw	5
  6435   0013D0  6E26               	movwf	(??_turnLeft+1)^0,c
  6436   0013D2  0EA1               	movlw	161
  6437   0013D4  6E25               	movwf	??_turnLeft^0,c
  6438   0013D6  0E65               	movlw	101
  6439   0013D8                     u4467:
  6440   0013D8  2EE8               	decfsz	wreg,f,c
  6441   0013DA  D7FE               	bra	u4467
  6442   0013DC  2E25               	decfsz	??_turnLeft^0,f,c
  6443   0013DE  D7FC               	bra	u4467
  6444   0013E0  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6445   0013E2  D7FA               	bra	u4467
  6446   0013E4  F000               	nop	
  6447   0013E6                     
  6448                           ;dc_motor.c: 155:         }
  6449   0013E6  0EFB               	movlw	251
  6450   0013E8  2629               	addwf	turnLeft@i^0,f,c
  6451   0013EA  0EFF               	movlw	255
  6452   0013EC  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6453   0013EE  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6454   0013F0  EF05  F00A         	goto	u3090
  6455   0013F4  502A               	movf	(turnLeft@i+1)^0,w,c
  6456   0013F6  E107               	bnz	u3091
  6457   0013F8  0E20               	movlw	32
  6458   0013FA  5C29               	subwf	turnLeft@i^0,w,c
  6459   0013FC  B0D8               	btfsc	status,0,c
  6460   0013FE  EF03  F00A         	goto	u3091
  6461   001402  EF05  F00A         	goto	u3090
  6462   001406                     u3091:
  6463   001406  EFBF  F009         	goto	l3863
  6464   00140A                     u3090:
  6465   00140A                     
  6466                           ;dc_motor.c: 156:     }
  6467   00140A  4A27               	infsnz	turnLeft@k^0,f,c
  6468   00140C  2A28               	incf	(turnLeft@k+1)^0,f,c
  6469   00140E  BE28               	btfsc	(turnLeft@k+1)^0,7,c
  6470   001410  EF13  F00A         	goto	u3101
  6471   001414  5028               	movf	(turnLeft@k+1)^0,w,c
  6472   001416  E109               	bnz	u3100
  6473   001418  0E02               	movlw	2
  6474   00141A  5C27               	subwf	turnLeft@k^0,w,c
  6475   00141C  A0D8               	btfss	status,0,c
  6476   00141E  EF13  F00A         	goto	u3101
  6477   001422  EF15  F00A         	goto	u3100
  6478   001426                     u3101:
  6479   001426  EF71  F009         	goto	l3835
  6480   00142A                     u3100:
  6481   00142A  0012               	return		;funcret
  6482   00142C                     __end_of_turnLeft:
  6483                           	callstack 0
  6484                           
  6485 ;; *************** function _stop *****************
  6486 ;; Defined at:
  6487 ;;		line 97 in file "dc_motor.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6490 ;;		 -> main@motorL(9), 
  6491 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6492 ;;		 -> main@motorR(9), 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6506 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6507 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6508 ;;Total ram usage:        6 bytes
  6509 ;; Hardware stack levels used: 1
  6510 ;; Hardware stack levels required when called: 7
  6511 ;; This function calls:
  6512 ;;		_setMotorPWM
  6513 ;; This function is called by:
  6514 ;;		_RobotMovement
  6515 ;;		_return_back
  6516 ;;		_main
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text34
  6521   00203A                     __ptext34:
  6522                           	callstack 0
  6523   00203A                     _stop:
  6524                           	callstack 23
  6525   00203A                     
  6526                           ;dc_motor.c: 97: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 98: {;d
      +                          c_motor.c: 99:     (*mL).power=0;
  6527   00203A  C021  FFD9         	movff	stop@mL,fsr2l
  6528   00203E  C022  FFDA         	movff	stop@mL+1,fsr2h
  6529   002042  0E00               	movlw	0
  6530   002044  6EDF               	movwf	indf2,c
  6531                           
  6532                           ;dc_motor.c: 100:     (*mR).power=0;
  6533   002046  C023  FFD9         	movff	stop@mR,fsr2l
  6534   00204A  C024  FFDA         	movff	stop@mR+1,fsr2h
  6535   00204E  0E00               	movlw	0
  6536   002050  6EDF               	movwf	indf2,c
  6537   002052                     
  6538                           ;dc_motor.c: 101:     setMotorPWM(mL);
  6539   002052  C021  F01B         	movff	stop@mL,setMotorPWM@m
  6540   002056  C022  F01C         	movff	stop@mL+1,setMotorPWM@m+1
  6541   00205A  EC06  F008         	call	_setMotorPWM	;wreg free
  6542   00205E                     
  6543                           ;dc_motor.c: 102:     setMotorPWM(mR);
  6544   00205E  C023  F01B         	movff	stop@mR,setMotorPWM@m
  6545   002062  C024  F01C         	movff	stop@mR+1,setMotorPWM@m+1
  6546   002066  EC06  F008         	call	_setMotorPWM	;wreg free
  6547   00206A                     
  6548                           ;dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6549   00206A  0E29               	movlw	41
  6550   00206C  6E26               	movwf	(??_stop+1)^0,c
  6551   00206E  0E96               	movlw	150
  6552   002070  6E25               	movwf	??_stop^0,c
  6553   002072  0E7F               	movlw	127
  6554   002074                     u4477:
  6555   002074  2EE8               	decfsz	wreg,f,c
  6556   002076  D7FE               	bra	u4477
  6557   002078  2E25               	decfsz	??_stop^0,f,c
  6558   00207A  D7FC               	bra	u4477
  6559   00207C  2E26               	decfsz	(??_stop+1)^0,f,c
  6560   00207E  D7FA               	bra	u4477
  6561   002080  F000               	nop	
  6562   002082  0012               	return		;funcret
  6563   002084                     __end_of_stop:
  6564                           	callstack 0
  6565                           
  6566 ;; *************** function _moveBack *****************
  6567 ;; Defined at:
  6568 ;;		line 294 in file "dc_motor.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6571 ;;		 -> main@motorL(9), 
  6572 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6573 ;;		 -> main@motorR(9), 
  6574 ;;  time            2   36[COMRAM] unsigned int 
  6575 ;; Auto vars:     Size  Location     Type
  6576 ;;		None
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      void 
  6579 ;; Registers used:
  6580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6586 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6589 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6590 ;;Total ram usage:        6 bytes
  6591 ;; Hardware stack levels used: 1
  6592 ;; Hardware stack levels required when called: 7
  6593 ;; This function calls:
  6594 ;;		_setMotorPWM
  6595 ;; This function is called by:
  6596 ;;		_RobotMovement
  6597 ;;		_return_back
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text35
  6602   001BB4                     __ptext35:
  6603                           	callstack 0
  6604   001BB4                     _moveBack:
  6605                           	callstack 22
  6606   001BB4                     
  6607                           ;dc_motor.c: 294: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 295: {;dc_motor.c: 296:     seconds = 0;
  6608   001BB4  0E00               	movlw	0
  6609   001BB6  6E4A               	movwf	(_seconds+1)^0,c
  6610   001BB8  0E00               	movlw	0
  6611   001BBA  6E49               	movwf	_seconds^0,c
  6612                           
  6613                           ;dc_motor.c: 297:     while (seconds<time)
  6614   001BBC  EF08  F00E         	goto	l4071
  6615   001BC0                     l4061:
  6616                           
  6617                           ;dc_motor.c: 298:     {;dc_motor.c: 299:         (*mL).direction=1;
  6618   001BC0  EE20 F001          	lfsr	2,1
  6619   001BC4  5021               	movf	moveBack@mL^0,w,c
  6620   001BC6  26D9               	addwf	fsr2l,f,c
  6621   001BC8  5022               	movf	(moveBack@mL+1)^0,w,c
  6622   001BCA  22DA               	addwfc	fsr2h,f,c
  6623   001BCC  0E01               	movlw	1
  6624   001BCE  6EDF               	movwf	indf2,c
  6625                           
  6626                           ;dc_motor.c: 300:         (*mR).direction=1;
  6627   001BD0  EE20 F001          	lfsr	2,1
  6628   001BD4  5023               	movf	moveBack@mR^0,w,c
  6629   001BD6  26D9               	addwf	fsr2l,f,c
  6630   001BD8  5024               	movf	(moveBack@mR+1)^0,w,c
  6631   001BDA  22DA               	addwfc	fsr2h,f,c
  6632   001BDC  0E01               	movlw	1
  6633   001BDE  6EDF               	movwf	indf2,c
  6634   001BE0                     
  6635                           ;dc_motor.c: 301:         (*mL).power=70;
  6636   001BE0  C021  FFD9         	movff	moveBack@mL,fsr2l
  6637   001BE4  C022  FFDA         	movff	moveBack@mL+1,fsr2h
  6638   001BE8  0E46               	movlw	70
  6639   001BEA  6EDF               	movwf	indf2,c
  6640   001BEC                     
  6641                           ;dc_motor.c: 302:         (*mR).power=68;
  6642   001BEC  C023  FFD9         	movff	moveBack@mR,fsr2l
  6643   001BF0  C024  FFDA         	movff	moveBack@mR+1,fsr2h
  6644   001BF4  0E44               	movlw	68
  6645   001BF6  6EDF               	movwf	indf2,c
  6646   001BF8                     
  6647                           ;dc_motor.c: 303:         setMotorPWM(mL);
  6648   001BF8  C021  F01B         	movff	moveBack@mL,setMotorPWM@m
  6649   001BFC  C022  F01C         	movff	moveBack@mL+1,setMotorPWM@m+1
  6650   001C00  EC06  F008         	call	_setMotorPWM	;wreg free
  6651   001C04                     
  6652                           ;dc_motor.c: 304:         setMotorPWM(mR);
  6653   001C04  C023  F01B         	movff	moveBack@mR,setMotorPWM@m
  6654   001C08  C024  F01C         	movff	moveBack@mR+1,setMotorPWM@m+1
  6655   001C0C  EC06  F008         	call	_setMotorPWM	;wreg free
  6656   001C10                     l4071:
  6657                           
  6658                           ;dc_motor.c: 297:     while (seconds<time)
  6659   001C10  5025               	movf	moveBack@time^0,w,c
  6660   001C12  5C49               	subwf	_seconds^0,w,c
  6661   001C14  5026               	movf	(moveBack@time+1)^0,w,c
  6662   001C16  584A               	subwfb	(_seconds+1)^0,w,c
  6663   001C18  A0D8               	btfss	status,0,c
  6664   001C1A  EF11  F00E         	goto	u3211
  6665   001C1E  EF13  F00E         	goto	u3210
  6666   001C22                     u3211:
  6667   001C22  EFE0  F00D         	goto	l4061
  6668   001C26                     u3210:
  6669   001C26  0012               	return		;funcret
  6670   001C28                     __end_of_moveBack:
  6671                           	callstack 0
  6672                           
  6673 ;; *************** function _TimedfullSpeedAhead *****************
  6674 ;; Defined at:
  6675 ;;		line 279 in file "dc_motor.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6678 ;;		 -> main@motorL(9), 
  6679 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6680 ;;		 -> main@motorR(9), 
  6681 ;;  time            2   36[COMRAM] unsigned int 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6693 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6696 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;Total ram usage:        6 bytes
  6698 ;; Hardware stack levels used: 1
  6699 ;; Hardware stack levels required when called: 7
  6700 ;; This function calls:
  6701 ;;		_setMotorPWM
  6702 ;; This function is called by:
  6703 ;;		_RobotMovement
  6704 ;;		_return_back
  6705 ;;		_main
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text36
  6710   001C28                     __ptext36:
  6711                           	callstack 0
  6712   001C28                     _TimedfullSpeedAhead:
  6713                           	callstack 22
  6714   001C28                     
  6715                           ;dc_motor.c: 279: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 280: {;dc_motor.c: 281:     seconds = 0;
  6716   001C28  0E00               	movlw	0
  6717   001C2A  6E4A               	movwf	(_seconds+1)^0,c
  6718   001C2C  0E00               	movlw	0
  6719   001C2E  6E49               	movwf	_seconds^0,c
  6720                           
  6721                           ;dc_motor.c: 282:     while (seconds<time)
  6722   001C30  EF42  F00E         	goto	l4057
  6723   001C34                     l4047:
  6724                           
  6725                           ;dc_motor.c: 283:     {;dc_motor.c: 285:         (*mL).direction=0;
  6726   001C34  EE20 F001          	lfsr	2,1
  6727   001C38  5021               	movf	TimedfullSpeedAhead@mL^0,w,c
  6728   001C3A  26D9               	addwf	fsr2l,f,c
  6729   001C3C  5022               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6730   001C3E  22DA               	addwfc	fsr2h,f,c
  6731   001C40  0E00               	movlw	0
  6732   001C42  6EDF               	movwf	indf2,c
  6733                           
  6734                           ;dc_motor.c: 286:         (*mR).direction=0;
  6735   001C44  EE20 F001          	lfsr	2,1
  6736   001C48  5023               	movf	TimedfullSpeedAhead@mR^0,w,c
  6737   001C4A  26D9               	addwf	fsr2l,f,c
  6738   001C4C  5024               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6739   001C4E  22DA               	addwfc	fsr2h,f,c
  6740   001C50  0E00               	movlw	0
  6741   001C52  6EDF               	movwf	indf2,c
  6742   001C54                     
  6743                           ;dc_motor.c: 287:         (*mL).power=68;
  6744   001C54  C021  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6745   001C58  C022  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6746   001C5C  0E44               	movlw	68
  6747   001C5E  6EDF               	movwf	indf2,c
  6748   001C60                     
  6749                           ;dc_motor.c: 288:         (*mR).power=68;
  6750   001C60  C023  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6751   001C64  C024  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6752   001C68  0E44               	movlw	68
  6753   001C6A  6EDF               	movwf	indf2,c
  6754   001C6C                     
  6755                           ;dc_motor.c: 289:         setMotorPWM(mL);
  6756   001C6C  C021  F01B         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6757   001C70  C022  F01C         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6758   001C74  EC06  F008         	call	_setMotorPWM	;wreg free
  6759   001C78                     
  6760                           ;dc_motor.c: 290:         setMotorPWM(mR);
  6761   001C78  C023  F01B         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6762   001C7C  C024  F01C         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6763   001C80  EC06  F008         	call	_setMotorPWM	;wreg free
  6764   001C84                     l4057:
  6765                           
  6766                           ;dc_motor.c: 282:     while (seconds<time)
  6767   001C84  5025               	movf	TimedfullSpeedAhead@time^0,w,c
  6768   001C86  5C49               	subwf	_seconds^0,w,c
  6769   001C88  5026               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6770   001C8A  584A               	subwfb	(_seconds+1)^0,w,c
  6771   001C8C  A0D8               	btfss	status,0,c
  6772   001C8E  EF4B  F00E         	goto	u3201
  6773   001C92  EF4D  F00E         	goto	u3200
  6774   001C96                     u3201:
  6775   001C96  EF1A  F00E         	goto	l4047
  6776   001C9A                     u3200:
  6777   001C9A  0012               	return		;funcret
  6778   001C9C                     __end_of_TimedfullSpeedAhead:
  6779                           	callstack 0
  6780                           
  6781 ;; *************** function _setMotorPWM *****************
  6782 ;; Defined at:
  6783 ;;		line 74 in file "dc_motor.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;  m               2   26[COMRAM] PTR struct DC_motor
  6786 ;;		 -> main@motorR(9), main@motorL(9), 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  negDuty         1   31[COMRAM] unsigned char 
  6789 ;;  posDuty         1   30[COMRAM] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6803 ;;Total ram usage:        6 bytes
  6804 ;; Hardware stack levels used: 1
  6805 ;; Hardware stack levels required when called: 6
  6806 ;; This function calls:
  6807 ;;		___lwdiv
  6808 ;;		___wmul
  6809 ;; This function is called by:
  6810 ;;		_stop
  6811 ;;		_turnLeft
  6812 ;;		_turnRight
  6813 ;;		_turnLeftLong
  6814 ;;		_turnRightLong
  6815 ;;		_fullSpeedAhead
  6816 ;;		_TimedfullSpeedAhead
  6817 ;;		_moveBack
  6818 ;; This function uses a non-reentrant model
  6819 ;;
  6820                           
  6821                           	psect	text37
  6822   00100C                     __ptext37:
  6823                           	callstack 0
  6824   00100C                     _setMotorPWM:
  6825                           	callstack 23
  6826   00100C                     
  6827                           ;dc_motor.c: 74: void setMotorPWM(DC_motor *m);dc_motor.c: 75: {;dc_motor.c: 76:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 78:     if(m->brakemode) {
  6828   00100C  EE20 F002          	lfsr	2,2
  6829   001010  501B               	movf	setMotorPWM@m^0,w,c
  6830   001012  26D9               	addwf	fsr2l,f,c
  6831   001014  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6832   001016  22DA               	addwfc	fsr2h,f,c
  6833   001018  50DF               	movf	indf2,w,c
  6834   00101A  B4D8               	btfsc	status,2,c
  6835   00101C  EF12  F008         	goto	u3031
  6836   001020  EF14  F008         	goto	u3030
  6837   001024                     u3031:
  6838   001024  EF48  F008         	goto	l3725
  6839   001028                     u3030:
  6840   001028                     
  6841                           ;dc_motor.c: 79:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6842   001028  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6843   00102C  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6844   001030  50DF               	movf	indf2,w,c
  6845   001032  6E1D               	movwf	??_setMotorPWM^0,c
  6846   001034  501D               	movf	??_setMotorPWM^0,w,c
  6847   001036  6E0E               	movwf	___wmul@multiplier^0,c
  6848   001038  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6849   00103A  EE20 F003          	lfsr	2,3
  6850   00103E  501B               	movf	setMotorPWM@m^0,w,c
  6851   001040  26D9               	addwf	fsr2l,f,c
  6852   001042  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6853   001044  22DA               	addwfc	fsr2h,f,c
  6854   001046  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6855   00104A  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6856   00104E  EC65  F011         	call	___wmul	;wreg free
  6857   001052  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6858   001056  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6859   00105A  0E00               	movlw	0
  6860   00105C  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6861   00105E  0E64               	movlw	100
  6862   001060  6E16               	movwf	___lwdiv@divisor^0,c
  6863   001062  EC4E  F00E         	call	___lwdiv	;wreg free
  6864   001066  EE20 F003          	lfsr	2,3
  6865   00106A  501B               	movf	setMotorPWM@m^0,w,c
  6866   00106C  26D9               	addwf	fsr2l,f,c
  6867   00106E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6868   001070  22DA               	addwfc	fsr2h,f,c
  6869   001072  50DF               	movf	indf2,w,c
  6870   001074  6E1E               	movwf	(??_setMotorPWM+1)^0,c
  6871   001076  5014               	movf	?___lwdiv^0,w,c
  6872   001078  5C1E               	subwf	(??_setMotorPWM+1)^0,w,c
  6873   00107A  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6874   00107C                     
  6875                           ;dc_motor.c: 80:         negDuty=m->PWMperiod;
  6876   00107C  EE20 F003          	lfsr	2,3
  6877   001080  501B               	movf	setMotorPWM@m^0,w,c
  6878   001082  26D9               	addwf	fsr2l,f,c
  6879   001084  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6880   001086  22DA               	addwfc	fsr2h,f,c
  6881   001088  50DF               	movf	indf2,w,c
  6882   00108A  6E20               	movwf	setMotorPWM@negDuty^0,c
  6883                           
  6884                           ;dc_motor.c: 81:     }
  6885   00108C  EF6B  F008         	goto	l3729
  6886   001090                     l3725:
  6887                           
  6888                           ;dc_motor.c: 83:         posDuty=0;
  6889   001090  0E00               	movlw	0
  6890   001092  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6891   001094                     
  6892                           ;dc_motor.c: 84:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6893   001094  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6894   001098  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6895   00109C  50DF               	movf	indf2,w,c
  6896   00109E  6E1D               	movwf	??_setMotorPWM^0,c
  6897   0010A0  501D               	movf	??_setMotorPWM^0,w,c
  6898   0010A2  6E0E               	movwf	___wmul@multiplier^0,c
  6899   0010A4  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6900   0010A6  EE20 F003          	lfsr	2,3
  6901   0010AA  501B               	movf	setMotorPWM@m^0,w,c
  6902   0010AC  26D9               	addwf	fsr2l,f,c
  6903   0010AE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6904   0010B0  22DA               	addwfc	fsr2h,f,c
  6905   0010B2  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6906   0010B6  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6907   0010BA  EC65  F011         	call	___wmul	;wreg free
  6908   0010BE  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6909   0010C2  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6910   0010C6  0E00               	movlw	0
  6911   0010C8  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6912   0010CA  0E64               	movlw	100
  6913   0010CC  6E16               	movwf	___lwdiv@divisor^0,c
  6914   0010CE  EC4E  F00E         	call	___lwdiv	;wreg free
  6915   0010D2  5014               	movf	?___lwdiv^0,w,c
  6916   0010D4  6E20               	movwf	setMotorPWM@negDuty^0,c
  6917   0010D6                     l3729:
  6918                           
  6919                           ;dc_motor.c: 87:     if (m->direction) {
  6920   0010D6  EE20 F001          	lfsr	2,1
  6921   0010DA  501B               	movf	setMotorPWM@m^0,w,c
  6922   0010DC  26D9               	addwf	fsr2l,f,c
  6923   0010DE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6924   0010E0  22DA               	addwfc	fsr2h,f,c
  6925   0010E2  50DF               	movf	indf2,w,c
  6926   0010E4  B4D8               	btfsc	status,2,c
  6927   0010E6  EF77  F008         	goto	u3041
  6928   0010EA  EF79  F008         	goto	u3040
  6929   0010EE                     u3041:
  6930   0010EE  EF9B  F008         	goto	l3733
  6931   0010F2                     u3040:
  6932   0010F2                     
  6933                           ;dc_motor.c: 88:         *(m->posDutyHighByte)=posDuty;
  6934   0010F2  EE20 F005          	lfsr	2,5
  6935   0010F6  501B               	movf	setMotorPWM@m^0,w,c
  6936   0010F8  26D9               	addwf	fsr2l,f,c
  6937   0010FA  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6938   0010FC  22DA               	addwfc	fsr2h,f,c
  6939   0010FE  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6940   001102  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6941   001106  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6942   00110A  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6943   00110E  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6944                           
  6945                           ;dc_motor.c: 89:         *(m->negDutyHighByte)=negDuty;
  6946   001112  EE20 F007          	lfsr	2,7
  6947   001116  501B               	movf	setMotorPWM@m^0,w,c
  6948   001118  26D9               	addwf	fsr2l,f,c
  6949   00111A  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6950   00111C  22DA               	addwfc	fsr2h,f,c
  6951   00111E  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6952   001122  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6953   001126  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6954   00112A  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6955   00112E  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6956                           
  6957                           ;dc_motor.c: 90:     } else {
  6958   001132  EFBB  F008         	goto	l243
  6959   001136                     l3733:
  6960                           
  6961                           ;dc_motor.c: 91:         *(m->posDutyHighByte)=negDuty;
  6962   001136  EE20 F005          	lfsr	2,5
  6963   00113A  501B               	movf	setMotorPWM@m^0,w,c
  6964   00113C  26D9               	addwf	fsr2l,f,c
  6965   00113E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6966   001140  22DA               	addwfc	fsr2h,f,c
  6967   001142  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6968   001146  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6969   00114A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6970   00114E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6971   001152  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6972                           
  6973                           ;dc_motor.c: 92:         *(m->negDutyHighByte)=posDuty;
  6974   001156  EE20 F007          	lfsr	2,7
  6975   00115A  501B               	movf	setMotorPWM@m^0,w,c
  6976   00115C  26D9               	addwf	fsr2l,f,c
  6977   00115E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6978   001160  22DA               	addwfc	fsr2h,f,c
  6979   001162  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6980   001166  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6981   00116A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6982   00116E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6983   001172  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6984   001176                     l243:
  6985   001176  0012               	return		;funcret
  6986   001178                     __end_of_setMotorPWM:
  6987                           	callstack 0
  6988                           
  6989 ;; *************** function ___wmul *****************
  6990 ;; Defined at:
  6991 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  multiplier      2   13[COMRAM] unsigned int 
  6994 ;;  multiplicand    2   15[COMRAM] unsigned int 
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;  product         2   17[COMRAM] unsigned int 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  2   13[COMRAM] unsigned int 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0, prodl, prodh
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7006 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;Total ram usage:        6 bytes
  7011 ;; Hardware stack levels used: 1
  7012 ;; Hardware stack levels required when called: 5
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_get_color_distance
  7017 ;;		_get_color_code
  7018 ;;		_get_wall_detection
  7019 ;;		_setMotorPWM
  7020 ;; This function uses a non-reentrant model
  7021 ;;
  7022                           
  7023                           	psect	text38
  7024   0022CA                     __ptext38:
  7025                           	callstack 0
  7026   0022CA                     ___wmul:
  7027                           	callstack 23
  7028   0022CA  500E               	movf	___wmul@multiplier^0,w,c
  7029   0022CC  0210               	mulwf	___wmul@multiplicand^0,c
  7030   0022CE  CFF3 F012          	movff	prodl,___wmul@product
  7031   0022D2  CFF4 F013          	movff	prodh,___wmul@product+1
  7032   0022D6  500E               	movf	___wmul@multiplier^0,w,c
  7033   0022D8  0211               	mulwf	(___wmul@multiplicand+1)^0,c
  7034   0022DA  50F3               	movf	243,w,c
  7035   0022DC  2613               	addwf	(___wmul@product+1)^0,f,c
  7036   0022DE  500F               	movf	(___wmul@multiplier+1)^0,w,c
  7037   0022E0  0210               	mulwf	___wmul@multiplicand^0,c
  7038   0022E2  50F3               	movf	243,w,c
  7039   0022E4  2613               	addwf	(___wmul@product+1)^0,f,c
  7040   0022E6  C012  F00E         	movff	___wmul@product,?___wmul
  7041   0022EA  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  7042   0022EE  0012               	return		;funcret
  7043   0022F0                     __end_of___wmul:
  7044                           	callstack 0
  7045                           
  7046 ;; *************** function ___lwdiv *****************
  7047 ;; Defined at:
  7048 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  dividend        2   19[COMRAM] unsigned int 
  7051 ;;  divisor         2   21[COMRAM] unsigned int 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  quotient        2   24[COMRAM] unsigned int 
  7054 ;;  counter         1   23[COMRAM] unsigned char 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  2   19[COMRAM] unsigned int 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7064 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7067 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7068 ;;Total ram usage:        7 bytes
  7069 ;; Hardware stack levels used: 1
  7070 ;; Hardware stack levels required when called: 5
  7071 ;; This function calls:
  7072 ;;		Nothing
  7073 ;; This function is called by:
  7074 ;;		_calibrate_black
  7075 ;;		_setMotorPWM
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           	psect	text39
  7080   001C9C                     __ptext39:
  7081                           	callstack 0
  7082   001C9C                     ___lwdiv:
  7083                           	callstack 23
  7084   001C9C  0E00               	movlw	0
  7085   001C9E  6E1A               	movwf	(___lwdiv@quotient+1)^0,c
  7086   001CA0  0E00               	movlw	0
  7087   001CA2  6E19               	movwf	___lwdiv@quotient^0,c
  7088   001CA4  5016               	movf	___lwdiv@divisor^0,w,c
  7089   001CA6  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7090   001CA8  B4D8               	btfsc	status,2,c
  7091   001CAA  EF59  F00E         	goto	u2971
  7092   001CAE  EF5B  F00E         	goto	u2970
  7093   001CB2                     u2971:
  7094   001CB2  EF83  F00E         	goto	l999
  7095   001CB6                     u2970:
  7096   001CB6  0E01               	movlw	1
  7097   001CB8  6E18               	movwf	___lwdiv@counter^0,c
  7098   001CBA  EF63  F00E         	goto	l3673
  7099   001CBE                     l3671:
  7100   001CBE  90D8               	bcf	status,0,c
  7101   001CC0  3616               	rlcf	___lwdiv@divisor^0,f,c
  7102   001CC2  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7103   001CC4  2A18               	incf	___lwdiv@counter^0,f,c
  7104   001CC6                     l3673:
  7105   001CC6  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
  7106   001CC8  EF68  F00E         	goto	u2981
  7107   001CCC  EF6A  F00E         	goto	u2980
  7108   001CD0                     u2981:
  7109   001CD0  EF5F  F00E         	goto	l3671
  7110   001CD4                     u2980:
  7111   001CD4                     l3675:
  7112   001CD4  90D8               	bcf	status,0,c
  7113   001CD6  3619               	rlcf	___lwdiv@quotient^0,f,c
  7114   001CD8  361A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7115   001CDA  5016               	movf	___lwdiv@divisor^0,w,c
  7116   001CDC  5C14               	subwf	___lwdiv@dividend^0,w,c
  7117   001CDE  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7118   001CE0  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7119   001CE2  A0D8               	btfss	status,0,c
  7120   001CE4  EF76  F00E         	goto	u2991
  7121   001CE8  EF78  F00E         	goto	u2990
  7122   001CEC                     u2991:
  7123   001CEC  EF7D  F00E         	goto	l3683
  7124   001CF0                     u2990:
  7125   001CF0  5016               	movf	___lwdiv@divisor^0,w,c
  7126   001CF2  5E14               	subwf	___lwdiv@dividend^0,f,c
  7127   001CF4  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7128   001CF6  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7129   001CF8  8019               	bsf	___lwdiv@quotient^0,0,c
  7130   001CFA                     l3683:
  7131   001CFA  90D8               	bcf	status,0,c
  7132   001CFC  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7133   001CFE  3216               	rrcf	___lwdiv@divisor^0,f,c
  7134   001D00  2E18               	decfsz	___lwdiv@counter^0,f,c
  7135   001D02  EF6A  F00E         	goto	l3675
  7136   001D06                     l999:
  7137   001D06  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  7138   001D0A  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7139   001D0E  0012               	return		;funcret
  7140   001D10                     __end_of___lwdiv:
  7141                           	callstack 0
  7142                           
  7143 ;; *************** function _Interrupts_init *****************
  7144 ;; Defined at:
  7145 ;;		line 11 in file "interrupts.c"
  7146 ;; Parameters:    Size  Location     Type
  7147 ;;		None
  7148 ;; Auto vars:     Size  Location     Type
  7149 ;;		None
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		None
  7154 ;; Tracked objects:
  7155 ;;		On entry : 0/0
  7156 ;;		On exit  : 0/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7163 ;;Total ram usage:        0 bytes
  7164 ;; Hardware stack levels used: 1
  7165 ;; Hardware stack levels required when called: 5
  7166 ;; This function calls:
  7167 ;;		Nothing
  7168 ;; This function is called by:
  7169 ;;		_main
  7170 ;; This function uses a non-reentrant model
  7171 ;;
  7172                           
  7173                           	psect	text40
  7174   002364                     __ptext40:
  7175                           	callstack 0
  7176   002364                     _Interrupts_init:
  7177                           	callstack 25
  7178   002364                     
  7179                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  7180   002364  8CF2               	bsf	242,6,c	;volatile
  7181                           
  7182                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  7183   002366  010E               	movlb	14	; () banked
  7184   002368  8B29               	bsf	41,5,b	;volatile
  7185                           
  7186                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  7187   00236A  812B               	bsf	43,0,b	;volatile
  7188                           
  7189                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  7190   00236C  8EF2               	bsf	242,7,c	;volatile
  7191   00236E                     
  7192                           ; BSR set to: 14
  7193   00236E  0012               	return		;funcret
  7194   002370                     __end_of_Interrupts_init:
  7195                           	callstack 0
  7196                           
  7197 ;; *************** function _HighISR *****************
  7198 ;; Defined at:
  7199 ;;		line 25 in file "interrupts.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;		None
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;		None
  7204 ;; Return value:  Size  Location     Type
  7205 ;;                  1    wreg      void 
  7206 ;; Registers used:
  7207 ;;		wreg, status,2, status,0, cstack
  7208 ;; Tracked objects:
  7209 ;;		On entry : 0/0
  7210 ;;		On exit  : 0/0
  7211 ;;		Unchanged: 0/0
  7212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7217 ;;Total ram usage:        0 bytes
  7218 ;; Hardware stack levels used: 1
  7219 ;; Hardware stack levels required when called: 4
  7220 ;; This function calls:
  7221 ;;		_increment_seconds
  7222 ;;		_set_wall_detection
  7223 ;; This function is called by:
  7224 ;;		Interrupt level 2
  7225 ;; This function uses a non-reentrant model
  7226 ;;
  7227                           
  7228                           	psect	intcode
  7229   000008                     __pintcode:
  7230                           	callstack 0
  7231   000008                     _HighISR:
  7232                           	callstack 21
  7233                           
  7234                           ; BSR set to: 14
  7235                           ;incstack = 0
  7236   000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7237   00000A                     
  7238                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  7239   00000A  010E               	movlb	14	; () banked
  7240   00000C  AB33               	btfss	51,5,b	;volatile
  7241   00000E  EF0B  F000         	goto	i2u249_41
  7242   000012  EF0D  F000         	goto	i2u249_40
  7243   000016                     i2u249_41:
  7244   000016  EF4F  F000         	goto	i2l440
  7245   00001A                     i2u249_40:
  7246   00001A                     
  7247                           ; BSR set to: 14
  7248                           ;interrupts.c: 28:         incr_sec_counter += 1;
  7249   00001A  0100               	movlb	0	; () banked
  7250   00001C  4BF2               	infsnz	_incr_sec_counter& (0+255),f,b
  7251   00001E  2BF3               	incf	(_incr_sec_counter+1)& (0+255),f,b
  7252                           
  7253                           ;interrupts.c: 29:         wall_detection_counter += 1;
  7254   000020  4A45               	infsnz	_wall_detection_counter^0,f,c
  7255   000022  2A46               	incf	(_wall_detection_counter+1)^0,f,c
  7256   000024                     
  7257                           ; BSR set to: 0
  7258                           ;interrupts.c: 31:         if(incr_sec_counter == 10){
  7259   000024  0E0A               	movlw	10
  7260   000026  19F2               	xorwf	_incr_sec_counter& (0+255),w,b
  7261   000028  11F3               	iorwf	(_incr_sec_counter+1)& (0+255),w,b
  7262   00002A  A4D8               	btfss	status,2,c
  7263   00002C  EF1A  F000         	goto	i2u250_41
  7264   000030  EF1C  F000         	goto	i2u250_40
  7265   000034                     i2u250_41:
  7266   000034  EF23  F000         	goto	i2l3315
  7267   000038                     i2u250_40:
  7268   000038                     
  7269                           ; BSR set to: 0
  7270                           ;interrupts.c: 32:             increment_seconds();
  7271   000038  ECE1  F011         	call	_increment_seconds	;wreg free
  7272   00003C                     
  7273                           ;interrupts.c: 33:             incr_sec_counter = 0;
  7274   00003C  0E00               	movlw	0
  7275   00003E  0100               	movlb	0	; () banked
  7276   000040  6FF3               	movwf	(_incr_sec_counter+1)& (0+255),b
  7277   000042  0E00               	movlw	0
  7278   000044  6FF2               	movwf	_incr_sec_counter& (0+255),b
  7279   000046                     i2l3315:
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;interrupts.c: 36:         if(wall_detection_counter == 22){
  7283   000046  0E16               	movlw	22
  7284   000048  1845               	xorwf	_wall_detection_counter^0,w,c
  7285   00004A  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7286   00004C  A4D8               	btfss	status,2,c
  7287   00004E  EF2B  F000         	goto	i2u251_41
  7288   000052  EF2D  F000         	goto	i2u251_40
  7289   000056                     i2u251_41:
  7290   000056  EF35  F000         	goto	i2l3319
  7291   00005A                     i2u251_40:
  7292   00005A                     
  7293                           ; BSR set to: 0
  7294                           ;interrupts.c: 37:             set_wall_detection(0);
  7295   00005A  0E00               	movlw	0
  7296   00005C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7297   00005E  0E00               	movlw	0
  7298   000060  6E0C               	movwf	set_wall_detection@mode^0,c
  7299   000062  EC88  F00E         	call	_set_wall_detection	;wreg free
  7300                           
  7301                           ;interrupts.c: 38:         }
  7302   000066  EF49  F000         	goto	i2l3325
  7303   00006A                     i2l3319:
  7304                           
  7305                           ; BSR set to: 0
  7306   00006A  0E2C               	movlw	44
  7307   00006C  1845               	xorwf	_wall_detection_counter^0,w,c
  7308   00006E  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7309   000070  A4D8               	btfss	status,2,c
  7310   000072  EF3D  F000         	goto	i2u252_41
  7311   000076  EF3F  F000         	goto	i2u252_40
  7312   00007A                     i2u252_41:
  7313   00007A  EF49  F000         	goto	i2l3325
  7314   00007E                     i2u252_40:
  7315   00007E                     
  7316                           ; BSR set to: 0
  7317                           ;interrupts.c: 40:             set_wall_detection(1);
  7318   00007E  0E00               	movlw	0
  7319   000080  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7320   000082  0E01               	movlw	1
  7321   000084  6E0C               	movwf	set_wall_detection@mode^0,c
  7322   000086  EC88  F00E         	call	_set_wall_detection	;wreg free
  7323   00008A                     
  7324                           ;interrupts.c: 41:             wall_detection_counter = 0;
  7325   00008A  0E00               	movlw	0
  7326   00008C  6E46               	movwf	(_wall_detection_counter+1)^0,c
  7327   00008E  0E00               	movlw	0
  7328   000090  6E45               	movwf	_wall_detection_counter^0,c
  7329   000092                     i2l3325:
  7330                           
  7331                           ;interrupts.c: 44:         TMR0H=0b11111101;
  7332   000092  0EFD               	movlw	253
  7333   000094  6ED4               	movwf	212,c	;volatile
  7334   000096                     
  7335                           ;interrupts.c: 45:         TMR0L=0b10010000;
  7336   000096  0E90               	movlw	144
  7337   000098  6ED3               	movwf	211,c	;volatile
  7338   00009A                     
  7339                           ;interrupts.c: 47:         PIR0bits.TMR0IF = 0;
  7340   00009A  010E               	movlb	14	; () banked
  7341   00009C  9B33               	bcf	51,5,b	;volatile
  7342   00009E                     i2l440:
  7343                           
  7344                           ; BSR set to: 14
  7345   00009E  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7346   0000A0  0011               	retfie		f
  7347   0000A2                     __end_of_HighISR:
  7348                           	callstack 0
  7349                           
  7350 ;; *************** function _set_wall_detection *****************
  7351 ;; Defined at:
  7352 ;;		line 263 in file "color.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  mode            2   11[COMRAM] unsigned int 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;                  1    wreg      void 
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, status,0, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;Total ram usage:        2 bytes
  7371 ;; Hardware stack levels used: 1
  7372 ;; Hardware stack levels required when called: 3
  7373 ;; This function calls:
  7374 ;;		i2_color_read_Clear
  7375 ;;		i2_set_led_color
  7376 ;; This function is called by:
  7377 ;;		_HighISR
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text42
  7382   001D10                     __ptext42:
  7383                           	callstack 0
  7384   001D10                     _set_wall_detection:
  7385                           	callstack 21
  7386   001D10                     
  7387                           ;color.c: 264:     if(wall_detection_mode == 0){
  7388   001D10  0100               	movlb	0	; () banked
  7389   001D12  51F6               	movf	_wall_detection_mode& (0+255),w,b
  7390   001D14  11F7               	iorwf	(_wall_detection_mode+1)& (0+255),w,b
  7391   001D16  A4D8               	btfss	status,2,c
  7392   001D18  EF90  F00E         	goto	i2u216_41
  7393   001D1C  EF92  F00E         	goto	i2u216_40
  7394   001D20                     i2u216_41:
  7395   001D20  EF94  F00E         	goto	i2l3067
  7396   001D24                     i2u216_40:
  7397   001D24  EFC0  F00E         	goto	i2l166
  7398   001D28                     i2l3067:
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;color.c: 267:     if(mode == 0){
  7402   001D28  500C               	movf	set_wall_detection@mode^0,w,c
  7403   001D2A  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7404   001D2C  A4D8               	btfss	status,2,c
  7405   001D2E  EF9B  F00E         	goto	i2u217_41
  7406   001D32  EF9D  F00E         	goto	i2u217_40
  7407   001D36                     i2u217_41:
  7408   001D36  EFAB  F00E         	goto	i2l3073
  7409   001D3A                     i2u217_40:
  7410   001D3A                     
  7411                           ; BSR set to: 0
  7412                           ;color.c: 268:         clear1 = color_read_Clear();
  7413   001D3A  ECF5  F00F         	call	i2_color_read_Clear	;wreg free
  7414   001D3E  C005  F04D         	movff	?i2_color_read_Clear,_clear1
  7415   001D42  C006  F04E         	movff	?i2_color_read_Clear+1,_clear1+1
  7416   001D46                     
  7417                           ;color.c: 269:         set_led_color(0b111);
  7418   001D46  0E00               	movlw	0
  7419   001D48  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7420   001D4A  0E07               	movlw	7
  7421   001D4C  6E01               	movwf	i2set_led_color@color^0,c
  7422   001D4E  ECAC  F010         	call	i2_set_led_color	;wreg free
  7423                           
  7424                           ;color.c: 270:     }else if(mode == 1){
  7425   001D52  EFC0  F00E         	goto	i2l166
  7426   001D56                     i2l3073:
  7427                           
  7428                           ; BSR set to: 0
  7429   001D56  040C               	decf	set_wall_detection@mode^0,w,c
  7430   001D58  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7431   001D5A  A4D8               	btfss	status,2,c
  7432   001D5C  EFB2  F00E         	goto	i2u218_41
  7433   001D60  EFB4  F00E         	goto	i2u218_40
  7434   001D64                     i2u218_41:
  7435   001D64  EFC0  F00E         	goto	i2l166
  7436   001D68                     i2u218_40:
  7437   001D68                     
  7438                           ; BSR set to: 0
  7439                           ;color.c: 271:         clear2 = color_read_Clear();
  7440   001D68  ECF5  F00F         	call	i2_color_read_Clear	;wreg free
  7441   001D6C  C005  F04B         	movff	?i2_color_read_Clear,_clear2
  7442   001D70  C006  F04C         	movff	?i2_color_read_Clear+1,_clear2+1
  7443   001D74                     
  7444                           ;color.c: 272:         set_led_color(0b000);
  7445   001D74  0E00               	movlw	0
  7446   001D76  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7447   001D78  0E00               	movlw	0
  7448   001D7A  6E01               	movwf	i2set_led_color@color^0,c
  7449   001D7C  ECAC  F010         	call	i2_set_led_color	;wreg free
  7450   001D80                     i2l166:
  7451   001D80  0012               	return		;funcret
  7452   001D82                     __end_of_set_wall_detection:
  7453                           	callstack 0
  7454                           
  7455 ;; *************** function i2_set_led_color *****************
  7456 ;; Defined at:
  7457 ;;		line 163 in file "color.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  color           2    0[COMRAM] unsigned int 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		None
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7475 ;;Total ram usage:        2 bytes
  7476 ;; Hardware stack levels used: 1
  7477 ;; This function calls:
  7478 ;;		Nothing
  7479 ;; This function is called by:
  7480 ;;		_set_wall_detection
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text43
  7485   002158                     __ptext43:
  7486                           	callstack 0
  7487   002158                     i2_set_led_color:
  7488                           	callstack 23
  7489   002158                     
  7490                           ;color.c: 167:     if(color & 0b100){
  7491   002158  A401               	btfss	i2set_led_color@color^0,2,c
  7492   00215A  EFB1  F010         	goto	i2u185_41
  7493   00215E  EFB3  F010         	goto	i2u185_40
  7494   002162                     i2u185_41:
  7495   002162  EFB6  F010         	goto	i2l121
  7496   002166                     i2u185_40:
  7497   002166                     
  7498                           ;color.c: 168:         LATGbits.LATG1 = 1;
  7499   002166  827F               	bsf	127,1,c	;volatile
  7500                           
  7501                           ;color.c: 169:     }else{
  7502   002168  EFB7  F010         	goto	i2l122
  7503   00216C                     i2l121:
  7504                           
  7505                           ;color.c: 170:         LATGbits.LATG1 = 0;
  7506   00216C  927F               	bcf	127,1,c	;volatile
  7507   00216E                     i2l122:
  7508                           
  7509                           ;color.c: 172:     if(color & 0b010){
  7510   00216E  A201               	btfss	i2set_led_color@color^0,1,c
  7511   002170  EFBC  F010         	goto	i2u186_41
  7512   002174  EFBE  F010         	goto	i2u186_40
  7513   002178                     i2u186_41:
  7514   002178  EFC1  F010         	goto	i2l123
  7515   00217C                     i2u186_40:
  7516   00217C                     
  7517                           ;color.c: 173:         LATAbits.LATA4 = 1;
  7518   00217C  8879               	bsf	121,4,c	;volatile
  7519                           
  7520                           ;color.c: 174:     }else{
  7521   00217E  EFC2  F010         	goto	i2l124
  7522   002182                     i2l123:
  7523                           
  7524                           ;color.c: 175:         LATAbits.LATA4 = 0;
  7525   002182  9879               	bcf	121,4,c	;volatile
  7526   002184                     i2l124:
  7527                           
  7528                           ;color.c: 177:     if(color & 0b001){
  7529   002184  A001               	btfss	i2set_led_color@color^0,0,c
  7530   002186  EFC7  F010         	goto	i2u187_41
  7531   00218A  EFC9  F010         	goto	i2u187_40
  7532   00218E                     i2u187_41:
  7533   00218E  EFCC  F010         	goto	i2l125
  7534   002192                     i2u187_40:
  7535   002192                     
  7536                           ;color.c: 178:         LATFbits.LATF7 = 1;
  7537   002192  8E7E               	bsf	126,7,c	;volatile
  7538                           
  7539                           ;color.c: 179:     }else{
  7540   002194  EFCD  F010         	goto	i2l127
  7541   002198                     i2l125:
  7542                           
  7543                           ;color.c: 180:         LATFbits.LATF7 = 0;
  7544   002198  9E7E               	bcf	126,7,c	;volatile
  7545   00219A                     i2l127:
  7546   00219A  0012               	return		;funcret
  7547   00219C                     __end_ofi2_set_led_color:
  7548                           	callstack 0
  7549                           
  7550 ;; *************** function i2_color_read_Clear *****************
  7551 ;; Defined at:
  7552 ;;		line 141 in file "color.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;		None
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  tmp             2    9[COMRAM] unsigned int 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  2    4[COMRAM] unsigned int 
  7559 ;; Registers used:
  7560 ;;		wreg, status,2, status,0, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7569 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7570 ;;Total ram usage:        7 bytes
  7571 ;; Hardware stack levels used: 1
  7572 ;; Hardware stack levels required when called: 2
  7573 ;; This function calls:
  7574 ;;		i2_I2C_2_Master_Read
  7575 ;;		i2_I2C_2_Master_RepStart
  7576 ;;		i2_I2C_2_Master_Start
  7577 ;;		i2_I2C_2_Master_Stop
  7578 ;;		i2_I2C_2_Master_Write
  7579 ;; This function is called by:
  7580 ;;		_set_wall_detection
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text44
  7585   001FEA                     __ptext44:
  7586                           	callstack 0
  7587   001FEA                     i2_color_read_Clear:
  7588                           	callstack 21
  7589   001FEA                     
  7590                           ;color.c: 143:  unsigned int tmp;;color.c: 144:  I2C_2_Master_Start();
  7591   001FEA  ECD7  F011         	call	i2_I2C_2_Master_Start	;wreg free
  7592                           
  7593                           ;color.c: 145:  I2C_2_Master_Write(0x52 | 0x00);
  7594   001FEE  0E52               	movlw	82
  7595   001FF0  ECB8  F011         	call	i2_I2C_2_Master_Write
  7596                           
  7597                           ;color.c: 146:  I2C_2_Master_Write(0xA0 | 0x14);
  7598   001FF4  0EB4               	movlw	180
  7599   001FF6  ECB8  F011         	call	i2_I2C_2_Master_Write
  7600                           
  7601                           ;color.c: 147:  I2C_2_Master_RepStart();
  7602   001FFA  ECDC  F011         	call	i2_I2C_2_Master_RepStart	;wreg free
  7603                           
  7604                           ;color.c: 148:  I2C_2_Master_Write(0x52 | 0x01);
  7605   001FFE  0E53               	movlw	83
  7606   002000  ECB8  F011         	call	i2_I2C_2_Master_Write
  7607                           
  7608                           ;color.c: 149:  tmp=I2C_2_Master_Read(1);
  7609   002004  0E01               	movlw	1
  7610   002006  ECEF  F010         	call	i2_I2C_2_Master_Read
  7611   00200A  6E07               	movwf	??i2_color_read_Clear^0,c
  7612   00200C  5007               	movf	??i2_color_read_Clear^0,w,c
  7613   00200E  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7614   002010  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7615                           
  7616                           ;color.c: 150:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7617   002012  0E00               	movlw	0
  7618   002014  ECEF  F010         	call	i2_I2C_2_Master_Read
  7619   002018  6E07               	movwf	??i2_color_read_Clear^0,c
  7620   00201A  5007               	movf	??i2_color_read_Clear^0,w,c
  7621   00201C  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7622   00201E  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7623   002020  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7624   002022  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7625   002024  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7626   002026  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7627   002028  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7628   00202A  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7629                           
  7630                           ;color.c: 151:  I2C_2_Master_Stop();
  7631   00202C  ECD2  F011         	call	i2_I2C_2_Master_Stop	;wreg free
  7632   002030                     
  7633                           ;color.c: 152:  return tmp;
  7634   002030  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7635   002034  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7636   002038  0012               	return		;funcret
  7637   00203A                     __end_ofi2_color_read_Clear:
  7638                           	callstack 0
  7639                           
  7640 ;; *************** function i2_I2C_2_Master_Write *****************
  7641 ;; Defined at:
  7642 ;;		line 45 in file "i2c.c"
  7643 ;; Parameters:    Size  Location     Type
  7644 ;;  data_byte       1    wreg     unsigned char 
  7645 ;; Auto vars:     Size  Location     Type
  7646 ;;  data_byte       1    1[COMRAM] unsigned char 
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, status,2, status,0, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7660 ;;Total ram usage:        1 bytes
  7661 ;; Hardware stack levels used: 1
  7662 ;; Hardware stack levels required when called: 1
  7663 ;; This function calls:
  7664 ;;		i2_I2C_2_Master_Idle
  7665 ;; This function is called by:
  7666 ;;		i2_color_read_Clear
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           	psect	text45
  7671   002370                     __ptext45:
  7672                           	callstack 0
  7673   002370                     i2_I2C_2_Master_Write:
  7674                           	callstack 21
  7675                           
  7676                           ;incstack = 0
  7677                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7678   002370  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7679   002372                     
  7680                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7681   002372  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7682   002376                     
  7683                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7684   002376  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7685   00237A  0012               	return		;funcret
  7686   00237C                     __end_ofi2_I2C_2_Master_Write:
  7687                           	callstack 0
  7688                           
  7689 ;; *************** function i2_I2C_2_Master_Stop *****************
  7690 ;; Defined at:
  7691 ;;		line 39 in file "i2c.c"
  7692 ;; Parameters:    Size  Location     Type
  7693 ;;		None
  7694 ;; Auto vars:     Size  Location     Type
  7695 ;;		None
  7696 ;; Return value:  Size  Location     Type
  7697 ;;                  1    wreg      void 
  7698 ;; Registers used:
  7699 ;;		wreg, status,2, status,0, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7709 ;;Total ram usage:        0 bytes
  7710 ;; Hardware stack levels used: 1
  7711 ;; Hardware stack levels required when called: 1
  7712 ;; This function calls:
  7713 ;;		i2_I2C_2_Master_Idle
  7714 ;; This function is called by:
  7715 ;;		i2_color_read_Clear
  7716 ;; This function uses a non-reentrant model
  7717 ;;
  7718                           
  7719                           	psect	text46
  7720   0023A4                     __ptext46:
  7721                           	callstack 0
  7722   0023A4                     i2_I2C_2_Master_Stop:
  7723                           	callstack 21
  7724   0023A4                     
  7725                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7726   0023A4  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7727   0023A8                     
  7728                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7729   0023A8  010E               	movlb	14	; () banked
  7730   0023AA  85DA               	bsf	218,2,b	;volatile
  7731   0023AC                     
  7732                           ; BSR set to: 14
  7733   0023AC  0012               	return		;funcret
  7734   0023AE                     __end_ofi2_I2C_2_Master_Stop:
  7735                           	callstack 0
  7736                           
  7737 ;; *************** function i2_I2C_2_Master_Start *****************
  7738 ;; Defined at:
  7739 ;;		line 27 in file "i2c.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;		None
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  1    wreg      void 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7757 ;;Total ram usage:        0 bytes
  7758 ;; Hardware stack levels used: 1
  7759 ;; Hardware stack levels required when called: 1
  7760 ;; This function calls:
  7761 ;;		i2_I2C_2_Master_Idle
  7762 ;; This function is called by:
  7763 ;;		i2_color_read_Clear
  7764 ;; This function uses a non-reentrant model
  7765 ;;
  7766                           
  7767                           	psect	text47
  7768   0023AE                     __ptext47:
  7769                           	callstack 0
  7770   0023AE                     i2_I2C_2_Master_Start:
  7771                           	callstack 21
  7772   0023AE                     
  7773                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7774   0023AE  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7775   0023B2                     
  7776                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7777   0023B2  010E               	movlb	14	; () banked
  7778   0023B4  81DA               	bsf	218,0,b	;volatile
  7779   0023B6                     
  7780                           ; BSR set to: 14
  7781   0023B6  0012               	return		;funcret
  7782   0023B8                     __end_ofi2_I2C_2_Master_Start:
  7783                           	callstack 0
  7784                           
  7785 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7786 ;; Defined at:
  7787 ;;		line 33 in file "i2c.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;		None
  7792 ;; Return value:  Size  Location     Type
  7793 ;;                  1    wreg      void 
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, status,0, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7805 ;;Total ram usage:        0 bytes
  7806 ;; Hardware stack levels used: 1
  7807 ;; Hardware stack levels required when called: 1
  7808 ;; This function calls:
  7809 ;;		i2_I2C_2_Master_Idle
  7810 ;; This function is called by:
  7811 ;;		i2_color_read_Clear
  7812 ;; This function uses a non-reentrant model
  7813 ;;
  7814                           
  7815                           	psect	text48
  7816   0023B8                     __ptext48:
  7817                           	callstack 0
  7818   0023B8                     i2_I2C_2_Master_RepStart:
  7819                           	callstack 21
  7820   0023B8                     
  7821                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7822   0023B8  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7823   0023BC                     
  7824                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7825   0023BC  010E               	movlb	14	; () banked
  7826   0023BE  83DA               	bsf	218,1,b	;volatile
  7827   0023C0                     
  7828                           ; BSR set to: 14
  7829   0023C0  0012               	return		;funcret
  7830   0023C2                     __end_ofi2_I2C_2_Master_RepStart:
  7831                           	callstack 0
  7832                           
  7833 ;; *************** function i2_I2C_2_Master_Read *****************
  7834 ;; Defined at:
  7835 ;;		line 51 in file "i2c.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  ack             1    wreg     unsigned char 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  ack             1    2[COMRAM] unsigned char 
  7840 ;;  tmp             1    3[COMRAM] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      unsigned char 
  7843 ;; Registers used:
  7844 ;;		wreg, status,2, status,0, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7854 ;;Total ram usage:        3 bytes
  7855 ;; Hardware stack levels used: 1
  7856 ;; Hardware stack levels required when called: 1
  7857 ;; This function calls:
  7858 ;;		i2_I2C_2_Master_Idle
  7859 ;; This function is called by:
  7860 ;;		i2_color_read_Clear
  7861 ;; This function uses a non-reentrant model
  7862 ;;
  7863                           
  7864                           	psect	text49
  7865   0021DE                     __ptext49:
  7866                           	callstack 0
  7867   0021DE                     i2_I2C_2_Master_Read:
  7868                           	callstack 21
  7869                           
  7870                           ; BSR set to: 14
  7871                           ;incstack = 0
  7872                           ;i2I2C_2_Master_Read@ack stored from wreg
  7873   0021DE  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7874   0021E0                     
  7875                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7876   0021E0  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7877   0021E4                     
  7878                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7879   0021E4  010E               	movlb	14	; () banked
  7880   0021E6  87DA               	bsf	218,3,b	;volatile
  7881                           
  7882                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7883   0021E8  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7884   0021EC                     
  7885                           ;i2c.c: 57:   tmp = SSP2BUF;
  7886   0021EC  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7887                           
  7888                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7889   0021F0  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7890   0021F4                     
  7891                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7892   0021F4  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7893   0021F6  B4D8               	btfsc	status,2,c
  7894   0021F8  EF00  F011         	goto	i2u161_41
  7895   0021FC  EF04  F011         	goto	i2u161_40
  7896   002200                     i2u161_41:
  7897   002200  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7898   002202  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7899   002204  EF05  F011         	goto	i2u162_48
  7900   002208                     i2u161_40:
  7901   002208  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7902   00220A                     i2u162_48:
  7903   00220A  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7904   00220C  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7905   00220E  010E               	movlb	14	; () banked
  7906   002210  51DA               	movf	218,w,b	;volatile
  7907   002212  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7908   002214  0BDF               	andlw	-33
  7909   002216  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7910   002218  6FDA               	movwf	218,b	;volatile
  7911   00221A                     
  7912                           ; BSR set to: 14
  7913                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7914   00221A  89DA               	bsf	218,4,b	;volatile
  7915   00221C                     
  7916                           ; BSR set to: 14
  7917                           ;i2c.c: 61:   return tmp;
  7918   00221C  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7919   00221E                     
  7920                           ; BSR set to: 14
  7921   00221E  0012               	return		;funcret
  7922   002220                     __end_ofi2_I2C_2_Master_Read:
  7923                           	callstack 0
  7924                           
  7925 ;; *************** function i2_I2C_2_Master_Idle *****************
  7926 ;; Defined at:
  7927 ;;		line 22 in file "i2c.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;                  1    wreg      void 
  7934 ;; Registers used:
  7935 ;;		wreg, status,2, status,0
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7945 ;;Total ram usage:        1 bytes
  7946 ;; Hardware stack levels used: 1
  7947 ;; This function calls:
  7948 ;;		Nothing
  7949 ;; This function is called by:
  7950 ;;		i2_I2C_2_Master_Start
  7951 ;;		i2_I2C_2_Master_RepStart
  7952 ;;		i2_I2C_2_Master_Stop
  7953 ;;		i2_I2C_2_Master_Write
  7954 ;;		i2_I2C_2_Master_Read
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text50
  7959   0022A2                     __ptext50:
  7960                           	callstack 0
  7961   0022A2                     i2_I2C_2_Master_Idle:
  7962                           	callstack 21
  7963   0022A2                     i2l389:
  7964   0022A2  010E               	movlb	14	; () banked
  7965   0022A4  B5D8               	btfsc	216,2,b	;volatile
  7966   0022A6  EF57  F011         	goto	i2u154_41
  7967   0022AA  EF59  F011         	goto	i2u154_40
  7968   0022AE                     i2u154_41:
  7969   0022AE  EF51  F011         	goto	i2l389
  7970   0022B2                     i2u154_40:
  7971   0022B2                     
  7972                           ; BSR set to: 14
  7973   0022B2  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7974   0022B6  0E1F               	movlw	31
  7975   0022B8  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7976   0022BA  A4D8               	btfss	status,2,c
  7977   0022BC  EF62  F011         	goto	i2u155_41
  7978   0022C0  EF64  F011         	goto	i2u155_40
  7979   0022C4                     i2u155_41:
  7980   0022C4  EF51  F011         	goto	i2l389
  7981   0022C8                     i2u155_40:
  7982   0022C8                     
  7983                           ; BSR set to: 14
  7984   0022C8  0012               	return		;funcret
  7985   0022CA                     __end_ofi2_I2C_2_Master_Idle:
  7986                           	callstack 0
  7987                           
  7988 ;; *************** function _increment_seconds *****************
  7989 ;; Defined at:
  7990 ;;		line 309 in file "dc_motor.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		status,2, status,0
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8008 ;;Total ram usage:        0 bytes
  8009 ;; Hardware stack levels used: 1
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_HighISR
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text51
  8018   0023C2                     __ptext51:
  8019                           	callstack 0
  8020   0023C2                     _increment_seconds:
  8021                           	callstack 24
  8022   0023C2                     
  8023                           ;dc_motor.c: 311:     seconds += 1;
  8024   0023C2  4A49               	infsnz	_seconds^0,f,c
  8025   0023C4  2A4A               	incf	(_seconds+1)^0,f,c
  8026   0023C6  0012               	return		;funcret
  8027   0023C8                     __end_of_increment_seconds:
  8028                           	callstack 0
  8029   000000                     
  8030                           	psect	rparam
  8031   000000                     
  8032                           	psect	temp
  8033   00004F                     btemp:
  8034                           	callstack 0
  8035   00004F                     	ds	1
  8036   000000                     int$flags	set	btemp
  8037   000000                     wtemp8	set	btemp+1
  8038   000000                     ttemp5	set	btemp+1
  8039   000000                     ttemp6	set	btemp+4
  8040   000000                     ttemp7	set	btemp+8
  8041                           
  8042                           	psect	idloc
  8043                           
  8044                           ;Config register IDLOC0 @ 0x200000
  8045                           ;	unspecified, using default values
  8046   200000                     	org	2097152
  8047   200000  0FFF               	dw	4095
  8048                           
  8049                           ;Config register IDLOC1 @ 0x200002
  8050                           ;	unspecified, using default values
  8051   200002                     	org	2097154
  8052   200002  0FFF               	dw	4095
  8053                           
  8054                           ;Config register IDLOC2 @ 0x200004
  8055                           ;	unspecified, using default values
  8056   200004                     	org	2097156
  8057   200004  0FFF               	dw	4095
  8058                           
  8059                           ;Config register IDLOC3 @ 0x200006
  8060                           ;	unspecified, using default values
  8061   200006                     	org	2097158
  8062   200006  0FFF               	dw	4095
  8063                           
  8064                           ;Config register IDLOC4 @ 0x200008
  8065                           ;	unspecified, using default values
  8066   200008                     	org	2097160
  8067   200008  0FFF               	dw	4095
  8068                           
  8069                           ;Config register IDLOC5 @ 0x20000A
  8070                           ;	unspecified, using default values
  8071   20000A                     	org	2097162
  8072   20000A  0FFF               	dw	4095
  8073                           
  8074                           ;Config register IDLOC6 @ 0x20000C
  8075                           ;	unspecified, using default values
  8076   20000C                     	org	2097164
  8077   20000C  0FFF               	dw	4095
  8078                           
  8079                           ;Config register IDLOC7 @ 0x20000E
  8080                           ;	unspecified, using default values
  8081   20000E                     	org	2097166
  8082   20000E  0FFF               	dw	4095
  8083                           
  8084                           	psect	config
  8085                           
  8086                           ;Config register CONFIG1L @ 0x300000
  8087                           ;	External Oscillator mode Selection bits
  8088                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8089                           ;	Power-up default value for COSC bits
  8090                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8091   300000                     	org	3145728
  8092   300000  AA                 	db	170
  8093                           
  8094                           ;Config register CONFIG1H @ 0x300001
  8095                           ;	unspecified, using default values
  8096                           ;	Clock Out Enable bit
  8097                           ;	CLKOUTEN = 0x1, unprogrammed default
  8098                           ;	Clock Switch Enable bit
  8099                           ;	CSWEN = 0x1, unprogrammed default
  8100                           ;	Fail-Safe Clock Monitor Enable bit
  8101                           ;	FCMEN = 0x1, unprogrammed default
  8102   300001                     	org	3145729
  8103   300001  FF                 	db	255
  8104                           
  8105                           ;Config register CONFIG2L @ 0x300002
  8106                           ;	unspecified, using default values
  8107                           ;	Master Clear Enable bit
  8108                           ;	MCLRE = 0x1, unprogrammed default
  8109                           ;	Power-up Timer Enable bit
  8110                           ;	PWRTE = 0x1, unprogrammed default
  8111                           ;	Low-power BOR enable bit
  8112                           ;	LPBOREN = 0x1, unprogrammed default
  8113                           ;	Brown-out Reset Enable bits
  8114                           ;	BOREN = 0x3, unprogrammed default
  8115   300002                     	org	3145730
  8116   300002  FF                 	db	255
  8117                           
  8118                           ;Config register CONFIG2H @ 0x300003
  8119                           ;	unspecified, using default values
  8120                           ;	Brown Out Reset Voltage selection bits
  8121                           ;	BORV = 0x3, unprogrammed default
  8122                           ;	ZCD Disable bit
  8123                           ;	ZCD = 0x1, unprogrammed default
  8124                           ;	PPSLOCK bit One-Way Set Enable bit
  8125                           ;	PPS1WAY = 0x1, unprogrammed default
  8126                           ;	Stack Full/Underflow Reset Enable bit
  8127                           ;	STVREN = 0x1, unprogrammed default
  8128                           ;	Debugger Enable bit
  8129                           ;	DEBUG = 0x1, unprogrammed default
  8130                           ;	Extended Instruction Set Enable bit
  8131                           ;	XINST = 0x1, unprogrammed default
  8132   300003                     	org	3145731
  8133   300003  FF                 	db	255
  8134                           
  8135                           ;Config register CONFIG3L @ 0x300004
  8136                           ;	WDT Period Select bits
  8137                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8138                           ;	WDT operating mode
  8139                           ;	WDTE = OFF, WDT Disabled
  8140   300004                     	org	3145732
  8141   300004  9F                 	db	159
  8142                           
  8143                           ;Config register CONFIG3H @ 0x300005
  8144                           ;	unspecified, using default values
  8145                           ;	WDT Window Select bits
  8146                           ;	WDTCWS = 0x7, unprogrammed default
  8147                           ;	WDT input clock selector
  8148                           ;	WDTCCS = 0x7, unprogrammed default
  8149   300005                     	org	3145733
  8150   300005  FF                 	db	255
  8151                           
  8152                           ;Config register CONFIG4L @ 0x300006
  8153                           ;	unspecified, using default values
  8154                           ;	Write Protection Block 0
  8155                           ;	WRT0 = 0x1, unprogrammed default
  8156                           ;	Write Protection Block 1
  8157                           ;	WRT1 = 0x1, unprogrammed default
  8158                           ;	Write Protection Block 2
  8159                           ;	WRT2 = 0x1, unprogrammed default
  8160                           ;	Write Protection Block 3
  8161                           ;	WRT3 = 0x1, unprogrammed default
  8162                           ;	Write Protection Block 3
  8163                           ;	WRT4 = 0x1, unprogrammed default
  8164                           ;	Write Protection Block 3
  8165                           ;	WRT5 = 0x1, unprogrammed default
  8166                           ;	Write Protection Block 3
  8167                           ;	WRT6 = 0x1, unprogrammed default
  8168                           ;	Write Protection Block 3
  8169                           ;	WRT7 = 0x1, unprogrammed default
  8170   300006                     	org	3145734
  8171   300006  FF                 	db	255
  8172                           
  8173                           ;Config register CONFIG4H @ 0x300007
  8174                           ;	unspecified, using default values
  8175                           ;	Configuration Register Write Protection bit
  8176                           ;	WRTC = 0x1, unprogrammed default
  8177                           ;	Boot Block Write Protection bit
  8178                           ;	WRTB = 0x1, unprogrammed default
  8179                           ;	Data EEPROM Write Protection bit
  8180                           ;	WRTD = 0x1, unprogrammed default
  8181                           ;	Scanner Enable bit
  8182                           ;	SCANE = 0x1, unprogrammed default
  8183                           ;	Low Voltage Programming Enable bit
  8184                           ;	LVP = 0x1, unprogrammed default
  8185   300007                     	org	3145735
  8186   300007  FF                 	db	255
  8187                           
  8188                           ;Config register CONFIG5L @ 0x300008
  8189                           ;	unspecified, using default values
  8190                           ;	UserNVM Program Memory Code Protection bit
  8191                           ;	CP = 0x1, unprogrammed default
  8192                           ;	DataNVM Memory Code Protection bit
  8193                           ;	CPD = 0x1, unprogrammed default
  8194   300008                     	org	3145736
  8195   300008  FF                 	db	255
  8196                           
  8197                           ;Config register CONFIG5H @ 0x300009
  8198                           ;	unspecified, using default values
  8199   300009                     	org	3145737
  8200   300009  FF                 	db	255
  8201                           
  8202                           ;Config register CONFIG6L @ 0x30000A
  8203                           ;	unspecified, using default values
  8204                           ;	Table Read Protection Block 0
  8205                           ;	EBTR0 = 0x1, unprogrammed default
  8206                           ;	Table Read Protection Block 1
  8207                           ;	EBTR1 = 0x1, unprogrammed default
  8208                           ;	Table Read Protection Block 2
  8209                           ;	EBTR2 = 0x1, unprogrammed default
  8210                           ;	Table Read Protection Block 3
  8211                           ;	EBTR3 = 0x1, unprogrammed default
  8212                           ;	Table Read Protection Block 4
  8213                           ;	EBTR4 = 0x1, unprogrammed default
  8214                           ;	Table Read Protection Block 5
  8215                           ;	EBTR5 = 0x1, unprogrammed default
  8216                           ;	Table Read Protection Block 6
  8217                           ;	EBTR6 = 0x1, unprogrammed default
  8218                           ;	Table Read Protection Block 7
  8219                           ;	EBTR7 = 0x1, unprogrammed default
  8220   30000A                     	org	3145738
  8221   30000A  FF                 	db	255
  8222                           
  8223                           ;Config register CONFIG6H @ 0x30000B
  8224                           ;	unspecified, using default values
  8225                           ;	Boot Block Table Read Protection bit
  8226                           ;	EBTRB = 0x1, unprogrammed default
  8227   30000B                     	org	3145739
  8228   30000B  FF                 	db	255
  8229                           tosu	equ	0xFFF
  8230                           tosh	equ	0xFFE
  8231                           tosl	equ	0xFFD
  8232                           stkptr	equ	0xFFC
  8233                           pclatu	equ	0xFFB
  8234                           pclath	equ	0xFFA
  8235                           pcl	equ	0xFF9
  8236                           tblptru	equ	0xFF8
  8237                           tblptrh	equ	0xFF7
  8238                           tblptrl	equ	0xFF6
  8239                           tablat	equ	0xFF5
  8240                           prodh	equ	0xFF4
  8241                           prodl	equ	0xFF3
  8242                           indf0	equ	0xFEF
  8243                           postinc0	equ	0xFEE
  8244                           postdec0	equ	0xFED
  8245                           preinc0	equ	0xFEC
  8246                           plusw0	equ	0xFEB
  8247                           fsr0h	equ	0xFEA
  8248                           fsr0l	equ	0xFE9
  8249                           wreg	equ	0xFE8
  8250                           indf1	equ	0xFE7
  8251                           postinc1	equ	0xFE6
  8252                           postdec1	equ	0xFE5
  8253                           preinc1	equ	0xFE4
  8254                           plusw1	equ	0xFE3
  8255                           fsr1h	equ	0xFE2
  8256                           fsr1l	equ	0xFE1
  8257                           bsr	equ	0xFE0
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           postdec2	equ	0xFDD
  8261                           preinc2	equ	0xFDC
  8262                           plusw2	equ	0xFDB
  8263                           fsr2h	equ	0xFDA
  8264                           fsr2l	equ	0xFD9
  8265                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        134
    BSS         346
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      78
    BANK0           160     62     152
    BANK1           256     22     190
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1021DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1021DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnLeftLong
    _return_back->_turnRight
    _return_back->_turnRightLong
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  122538
                                             54 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
            _set_wall_detection_mode
                               _stop
 ---------------------------------------------------------------------------------
 (1) _set_wall_detection_mode                              2     0      2     391
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43607
                                             42 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             19 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8109
                                             47 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             19 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             25 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             32 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5380
                                             34 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             15 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1955
                                             24 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3062
                                             26 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1463
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             14 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             14 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44546
                                             42 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                       10     6      4    5941
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                        10     6      4    5944
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             32 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             26 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             19 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     427
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   2     0      2     427
                                             11 COMRAM     2     0      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     118
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _set_wall_detection_mode
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      BE       7       74.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4E       1       83.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26C      60        0.0%
DATA                 0      0     26C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 15:49:10 2022

                 _color_read_Red 1EAA               RobotMovement@color 002B  
                _color_read_Blue 1F9A                               l80 17CC  
                             l73 2348                               l82 1802  
                             l91 230E                               l83 17E2  
                             l76 17B0                               l94 1EF8  
                             l86 17F4                               l97 1FE8  
            ___wmul@multiplicand 0010                 _color_read_Clear 1F4A  
               ?_calibrate_black 0001                 _color_read_Green 1EFA  
            RobotMovement@motorL 002D              RobotMovement@motorR 002F  
              ??_Interrupts_init 000E                              l100 1F48  
                            l103 1F98                              l121 2128  
                            l122 212A                              l123 213E  
                            l124 2140                              l125 2154  
                            l118 100A                              l150 0AAA  
                            l127 2156                              l312 03A4  
                            l401 238E                              l153 193A  
                            l322 05B8                              l162 1E4E  
                            l243 1176                              l404 2362  
                            l156 19E4                              l148 0AA2  
                            l236 1BB2                              l341 2112  
                            l246 2082                              l334 070C  
                            l255 142A                              l407 21DC  
                            l264 16CA                              l520 1DEA  
                            l344 0CAA                              l273 12D0  
                            l505 232E                              l337 2384  
                            l426 236E                              l282 157A  
                            l291 1C9A                              l508 22EE  
                            l285 1EA8                              l349 0C90  
                            l542 1A88                              l535 1A78  
                            l519 1DDA                              l359 0CE0  
                            l392 22A0                              l297 1C26  
                            l386 2278                              l395 2398  
                            l389 227A                              l398 23A2  
                            l999 1D06                              _RGB 00E6  
               ?_calibrate_white 0001                              wreg 000FE8  
                           l1006 1D0E                             l4011 1480  
                           l4003 143C                             l4013 148C  
                           l4005 145C                             l4101 1A68  
                           l4031 1508                             l4015 14A4  
                           l4007 1468                             l4111 16D0  
                           l4103 1A72                             l4041 155A  
                           l4033 1514                             l4025 14D0  
                           l4017 14AC                             l4009 1474  
                           l4121 1700                             l4113 16DA  
                           l4201 09C0                             l4105 2330  
                           l4051 1C60                             l4043 155E  
                           l4035 1520                             l4027 14F0  
                           l4019 14C8                             l4131 173A  
                           l4123 1702                             l4115 16EA  
                           l4211 0A02                             l4203 09F0  
                           l4107 2338                             l4053 1C6C  
                           l4045 1C28                             l4061 1BC0  
                           l4037 1536                             l4029 14FC  
                           l4301 01A8                             l4141 1794  
                           l4133 174C                             l4125 1704  
                           l4117 16F4                             l4109 16CC  
                           l4221 0A8C                             l4213 0A30  
                           l4205 09FA                             l4055 1C78  
                           l4047 1C34                             l4063 1BE0  
                           l4071 1C10                             l4039 153E  
                           l4311 0224                             l4303 01AC  
                           l4151 17BE                             l4143 17A6  
                           l4135 175E                             l4127 1716  
                           l4119 16FE                             l4215 0A60  
                           l4231 1E1C                             l4223 1DEC  
                           l4049 1C54                             l4057 1C84  
                           l4065 1BEC                             l4401 06F0  
                           l4321 02D6                             l4313 0256  
                           l4305 01B0                             l4145 17A8  
                           l4137 1770                             l4129 1728  
                           l4081 1DBA                             l4073 1D82  
                           l4217 0A78                             l4161 071A  
                           l4225 1DFE                             l4241 1B82  
                           l4067 1BF8                             l4059 1BB4  
                           l4331 038A                             l4323 02FE  
                           l4315 028A                             l4307 01CC  
                           l4155 17DE                             l4147 17AC  
                           l4139 1782                             l4091 1A20  
                           l4083 19E6                             l4075 1D92  
                           l4219 0A88                             l4171 0782  
                           l4163 0730                             l4403 237C  
                           l4227 1E10                             l4251 1BA4  
                           l4243 1B8C                             l4235 1B24  
                           l4411 0AAC                             l4069 1C04  
                           l4341 0438                             l4333 03BE  
                           l4325 031C                             l4317 0292  
                           l4309 01E0                             l4405 20CC  
                           l3701 1F40                             l4157 17F0  
                           l4149 17AE                             l4261 1E68  
                           l4093 1A2E                             l4085 19F6  
                           l4077 1DA0                             l4181 07EA  
                           l4173 0798                             l4165 0742  
                           l4253 1BA6                             l4245 1B8E  
                           l4237 1B34                             l4421 0B2E  
                           l4413 0AB0                             l4501 0D76  
                           l4351 04EA                             l4343 046A  
                           l4335 03C2                             l4327 0344  
                           l4319 02B8                             l4271 00A6  
                           l4407 20E8                             l3631 2394  
                           l3711 2114                             l4263 1E78  
                           l4095 1A38                             l4087 1A0C  
                           l4079 1DB0                             l4191 0902  
                           l4183 0854                             l4175 07AA  
                           l4167 074E                             l4159 070E  
                           l4255 1BB0                             l4247 1B98  
                           l4239 1B5E                             l4431 0BDE  
                           l4423 0B56                             l4415 0AD6  
                           l4511 0DC4                             l4503 0D82  
                           l3721 1028                             l4361 059E  
                           l4353 0512                             l4345 049E  
                           l4329 0362                             l4337 03E0  
                           l4281 011A                             l4273 00D6  
                           l4409 210E                             l3625 227A  
                           l3641 239A                             l3633 235A  
                           l3705 1F4A                             l3713 2122  
                           l4265 1E84                             l4257 1E50  
                           l4097 1A56                             l4089 1A14  
                           l3801 0ED8                             l4193 0912  
                           l4185 0864                             l4177 07B6  
                           l4169 0776                             l4249 1B9A  
                           l4433 0C0E                             l4425 0B6E  
                           l4441 0C90                             l4417 0AEE  
                           l4521 0E20                             l4513 0DC8  
                           l4505 0D8E                             l3731 10F2  
                           l3723 107C                             l4371 061C  
                           l4363 05D2                             l4355 0530  
                           l4347 04A6                             l4339 03F4  
                           l4291 0172                             l4283 012C  
                           l4275 00E8                             l4451 2310  
                           l3627 228A                             l3651 21B2  
                           l3643 239E                             l3635 235E  
                           l3707 1F90                             l3715 2138  
                           l4267 1E90                             l4259 1E58  
                           l4099 1A66                             l3811 0F72  
                           l3803 0EF2                             l4195 0932  
                           l4187 0884                             l4179 07D6  
                           l4443 0CA4                             l4435 0C3C  
                           l4427 0B96                             l4419 0B16  
                           l4531 0E80                             l4523 0E34  
                           l4515 0DDC                             l4507 0DA4  
                           l3661 22E6                             l3733 1136  
                           l3725 1090                             l3821 203A  
                           l3901 15C4                             l4381 067C  
                           l4373 0636                             l4365 05D6  
                           l4357 0558                             l4349 04CC  
                           l4285 0140                             l4277 00FC  
                           l4453 2318                             l3741 2262  
                           l3653 21D8                             l3645 219E  
                           l3629 2390                             l3637 2386  
                           l3717 214E                             l4269 1E9C  
                           l3813 0F8E                             l3805 0F18  
                           l4197 0946                             l4189 0898  
                           l4445 0CC4                             l4437 0C54  
                           l4429 0BAE                             l4517 0DE8  
                           l4509 0DB8                             l4461 0CE6  
                           l3671 1CBE                             l3727 1094  
                           l3719 100C                             l3823 2052  
                           l3911 1618                             l3903 15D0  
                           l4391 069C                             l4383 0680  
                           l4375 063A                             l4359 0576  
                           l4367 05F4                             l4287 015A  
                           l4279 0116                             l4455 232A  
                           l3743 2264                             l3735 2250  
                           l3655 21DA                             l3647 21A2  
                           l3639 238A                             l3751 1948  
                           l3815 0FA6                             l3807 0F34  
                           l4199 09B0                             l4447 0CD6  
                           l4439 0C70                             l4519 0E04  
                           l4527 0E60                             l4471 0CFE  
                           l4463 0CEA                             l4449 2364  
                           l3681 1CF8                             l3673 1CC6  
                           l3665 1C9C                             l3729 10D6  
                           l3825 205E                             l3841 12EA  
                           l3921 164C                             l3905 15DC  
                           l4393 06B0                             l4385 0694  
                           l4377 064E                             l4369 0608  
                           l4297 017A                             l4289 015E  
                           l4457 232C                             l3745 2266  
                           l3737 225A                             l3649 21AA  
                           l3761 19B0                             l3753 195E  
                           l3817 0FAE                             l3809 0F4C  
                           l4529 0E74                             l4481 0D16  
                           l4473 0D00                             l4465 0CEE  
                           l3683 1CFA                             l3675 1CD4  
                           l3667 1CA4                             l3659 22CA  
                           l3827 206A                             l3851 133A  
                           l3843 130A                             l3835 12E2  
                           l3931 168E                             l3923 1658  
                           l3907 15F4                             l4395 06B4  
                           l4379 0662                             l4299 018E  
                           l3739 2260                             l3771 1826  
                           l3763 19C6                             l3755 1970  
                           l3747 22F2                             l4491 0D32  
                           l4483 0D1E                             l4475 0D06  
                           l4467 0CFA                             l4459 0CE2  
                           l3685 1D00                             l3677 1CDA  
                           l3669 1CB6                             l3853 1352  
                           l3845 1316                             l3829 12D2  
                           l3933 16AA                             l3925 1664  
                           l3917 1620                             l3909 15FC  
                           l4397 06D0                             l3693 1F9A  
                           l3781 188A                             l3773 1836  
                           l3765 19D8                             l3757 197C  
                           l3749 193C                             l4493 0D3A  
                           l4485 0D26                             l4477 0D0A  
                           l4469 0CFA                             l3679 1CF0  
                           l3871 13C2                             l3863 137E  
                           l3855 135A                             l3847 1322  
                           l3951 11B0                             l3943 1188  
                           l3935 16AE                             l3927 1670  
                           l3919 1640                             l4399 06DA  
                           l3695 1FE0                             l3687 1EAA  
                           l3791 18EA                             l3783 189A  
                           l3775 1842                             l3767 1804  
                           l3759 19A4                             l4495 0D42  
                           l4487 0D2A                             l4479 0D0E  
                           l3881 140E                             l3873 13CE  
                           l3865 139E                             l3857 1376  
                           l3849 132E                             l3961 11F8  
                           l3953 11BC                             l3937 1178  
                           l3929 1686                             l3689 1EF0  
                           l3793 1902                             l3785 18BC  
                           l3777 1868                             l3769 1810  
                           l4497 0D4A                             l4489 0D2E  
                           l3875 13E6                             l3867 13AA  
                           l3971 1224                             l3963 1200  
                           l3955 11C8                             l3883 157C  
                           l3699 1EFA                             l3795 191E  
                           l3787 18C8                             l3779 1874  
                           l4499 0D62                             l3877 13EE  
                           l3869 13B6                             l3981 1274  
                           l3973 1244                             l3965 121C  
                           l3957 11D4                             l3949 1190  
                           l3789 18D4                             l3797 0E9C  
                           l3879 140A                             l3983 128C  
                           l3975 1250                             l3959 11E0  
                           l3895 158C                             l3991 142C  
                           l3799 0EBA                             l3985 1294  
                           l3977 125C                             l3897 15AC  
                           l3889 1584                             l3987 12B0  
                           l3979 1268                             l3899 15B8  
                           l3989 12B4                             l3997 1434  
                           u3000 2122                             u3001 211E  
                           u3010 2138                             u3011 2134  
                           u3100 142A                             u3020 214E  
                           u3101 1426                             u3021 214A  
                           u3030 1028                             u3110 1618  
                           u3031 1024                             u3111 1614  
                           u3040 10F2                             u3200 1C9A  
                           u3120 16AA                             u3041 10EE  
                           u3201 1C96                             u3121 16A6  
                           u3210 1C26                             u3130 16CA  
                           u3050 0EBA                             u3211 1C22  
                           u3131 16C6                             u3051 0EB6  
                           u3140 121C                             u3220 1DA0  
                           u3060 0F18                             u3141 1218  
                           u3301 1744                             u3221 1D9C  
                           u3061 0F14                             u3150 12B0  
                           u3230 1DDA                             u3070 0F72  
                           u3151 12AC                             u3311 1756  
                           u3231 1DD6                             u3071 0F6E  
                           u3080 1376                             u3160 12D0  
                           u3400 1802                             u3240 1A0C  
                           u3081 1372                             u3161 12CC  
                           u3401 17FE                             u3321 1768  
                           u3241 1A08                             u3090 140A  
                           u3170 14C8                             u3250 1A2E  
                           u3410 07D6                             _T2PR 000FBC  
                     _Black_rule 016C                             u3091 1406  
                           u3171 14C4                             u3331 177A  
                           u3251 1A2A                             u3411 07D2  
                           u3180 155A                             u3260 1A56  
                           u3500 0AA2                             u3420 0884  
                           u3181 1556                             u3341 178C  
                           u3261 1A52                             u3501 0A9E  
                           u3421 0880                             u3190 157A  
                           u3430 0932                             u3510 1DFE  
                           u3191 1576                             u3351 179E  
                           u3271 170E                             u3431 092E  
                           u3511 1DFA                             u3600 0256  
                           u3360 17BE                             u3520 1E10  
                           u3601 0252                             u3361 17BA  
                           u3281 1720                             u3441 09CA  
                           u3521 1E0C                             u3610 02B8  
                           u3370 17CC                             u3530 1E48  
                           u3611 02B4                             u3371 17C8  
                           u3291 1732                             u4307 16E0  
                           u3451 09DC                             u3531 1E42  
                           u3700 059E                             u3620 02FE  
                           u3380 17DA                             u3540 1E4A  
                           u3701 059A                             u3621 02FA  
                           u4317 1952                             u3381 17D6  
                           u3461 0A28                             u3710 0608  
                           u3630 0344                             u3550 00E8  
                           u3390 17F0                             u4407 152A  
                           u3711 0604                             u3631 0340  
                           u3551 00E4                             u4327 1986  
                           u3391 17EC                             u3471 0A3A  
                           u3720 064E                             u3640 038A  
                           u3560 012C                             u3800 0B96  
                           u4417 15E6                             u3721 064A  
                           u3641 0386                             u3561 0128  
                           u4337 19BA                             u3481 0A4C  
                           u3801 0B92                             u4257 0D54  
                           u3730 0694                             u3650 03F4  
                           u3570 0172                             u2930 228A  
                           u3490 0A78                             u3810 0BDE  
                           u4427 167A                             u3731 0690  
                           u3651 03F0                             u3571 016E  
                           u2931 2286                             u4347 181A  
                           u3491 0A74                             u4267 0C46  
                           u3811 0BDA                             u3740 06D0  
                           u3660 046A                             u3580 01CC  
                           u2940 22A0                             u3820 0C0E  
                           u4437 11EA                             u3741 06CC  
                           u3661 0466                             u3581 01C8  
                           u2941 229C                             u4357 184C  
                           u4277 0724                             u3821 0C0A  
                           u3750 06F0                             u3670 04CC  
                           u3590 01E0                             u2950 21C6  
                           u3830 0CC4                             u4447 127E  
                           u3751 06EC                             u3671 04C8  
                           u3591 01DC                             u2951 21BE  
                           u4367 187E                             u4287 0758  
                           u3831 0CC0                             u3680 0512  
                           u3760 20E8                             u3840 0CD6  
                           u4457 1344                             u3681 050E  
                           u3761 20E4                             u4377 18B0  
                           u4297 078C                             u3841 0CD2  
                           u2970 1CB6                             u3690 0558  
                           u3770 0AD6                             u3850 0DA4  
                           u2971 1CB2                             u4467 13D8  
                           u3691 0554                             u4387 18DE  
                           u3771 0AD2                             u3851 0DA0  
                           u2980 1CD4                             u3780 0B16  
                           u3860 0DB8                             u2981 1CD0  
                           u4477 2074                             u4397 1496  
                           u3781 0B12                             u3861 0DB4  
                           u2990 1CF0                             u3790 0B56  
                           u3870 0E34                             u2991 1CEC  
                           u3791 0B52                             u3871 0E30  
                           u2968 21C8                             u3880 0E74  
                           u3881 0E70                             _main 0CE2  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 004F                             _stop 203A  
                           prodh 000FF4                             prodl 000FF3  
                           start 00A2           __end_of_color_read_Red 1EFA  
                __end_of_HighISR 00A2                     ___param_bank 000000  
     __end_ofi2_color_read_Clear 203A               _get_color_code$464 00C6  
             _get_color_code$465 00CA               _get_color_code$466 00CE  
                          ?_main 0001                  __end_of___lldiv 1A8A  
                          ?_stop 0021              _add_seconds_to_list 20CC  
                    _Black_setup 0039                  __end_of___lwdiv 1D10  
                          i2l103 2038                            i2l121 216C  
                          i2l122 216E                            i2l123 2182  
                          i2l300 23C6                            i2l124 2184  
                          i2l125 2198                            i2l127 219A  
                          i2l401 23AC                            i2l404 237A  
                          i2l166 1D80                            i2l407 221E  
                          i2l440 009E                            i2l392 22C8  
                          i2l395 23B6                            i2l389 22A2  
                          i2l398 23C0                            _TMR0H 000FD4  
                          _TMR0L 000FD3              ___lmul@multiplicand 0012  
     __end_of_I2C_2_Master_Start 239A       __end_of_I2C_2_Master_Write 2364  
             _get_color_distance 0E9C                            _index 0047  
                          _state 00F4                            tablat 000FF5  
                          plusw0 000FEB                            plusw1 000FE3  
                          plusw2 000FDB              ?_get_color_distance 0014  
                          ttemp5 0050                            ttemp6 0053  
                          ttemp7 0057                            status 000FD8  
                          wtemp8 0050             ?_add_seconds_to_list 0001  
                     _Green_rule 0084          __end_of_color_read_Blue 1FEA  
          _I2C_2_Master_RepStart 239A                  ?_color_read_Red 0012  
                __initialization 1A8A                     __end_of_main 0E9C  
                i2_set_led_color 2158                     __end_of_stop 2084  
                   _turnLeftLong 1178             i2set_led_color@color 0001  
           ??_get_color_distance 002C                           ??_main 0037  
                         ??_stop 0025                    __activetblptr 000000  
            _get_color_code$2466 00BA                     ?_setMotorPWM 001B  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         _RE4PPS 000E76                           i2l3115 23C2  
                         i2l3071 1D46                           i2l3063 1D10  
                         i2l3311 0038                           i2l2521 23B2  
                         i2l3073 1D56                           i2l3321 007E  
                         i2l3313 003C                           i2l3305 000A  
                         i2l2523 23B8                           i2l2531 2372  
                         i2l3075 1D68                           i2l3067 1D28  
                         i2l3323 008A                           i2l3315 0046  
                         i2l3307 001A                           i2l2541 21F4  
                         i2l2525 23BC                           i2l2533 2376  
                         i2l3077 1D74                           i2l3069 1D3A  
                         i2l3325 0092                           i2l3317 005A  
                         i2l3309 0024                           i2l2543 221A  
                         i2l2535 21E0                           i2l2519 23AE  
                         i2l2527 23A4                           i2l3327 0096  
                         i2l3319 006A                           i2l2545 221C  
                         i2l2537 21E4                           i2l2529 23A8  
                         i2l3329 009A                           i2l2467 22A2  
                         i2l2539 21EC                           i2l2469 22B2  
                         i2l2921 2030                           i2l2931 2192  
                         i2l2925 2158                           i2l2919 1FEA  
                         i2l2927 2166                           i2l2929 217C  
                         _RG6PPS 000E88                        ??_HighISR 000E  
       __end_of_color_click_init 1804            ??_add_seconds_to_list 000E  
                 RobotMovement@i 0033            __end_of_RobotMovement 070E  
               ??_get_color_code 0032                    ??_Timer0_init 000E  
                   _CCPTMRS0bits 000FAD         ?_set_wall_detection_mode 000E  
                         ___lmul 1D82         get_color_distance@color1 0014  
       get_color_distance@color2 0020                           ___wmul 22CA  
                         _clear1 004D                           _clear2 004B  
                      ??___lldiv 0022                        ??___lwdiv 0018  
                    _Color_rules 0100                           clear_0 1AF0  
                         clear_1 1AFC                           clear_2 1B08  
                         clear_3 1B14                           isa$std 000001  
               __end_of_moveBack 1C28            calibrate_black@clear1 001D  
          calibrate_black@clear2 001F                     __pdataCOMRAM 0039  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                     ?_return_back 002B  
                 _Lightblue_rule 0184                       _White_rule 0178  
                         stop@mL 0021                           stop@mR 0023  
              ??_initDCmotorsPWM 0010                 __end_of_turnLeft 142C  
            _wall_detection_mode 00F6            __end_of_set_led_color 2158  
                     __accesstop 0060          __end_of__initialization 1B1A  
       __end_of_color_read_Clear 1F9A         __end_of_color_read_Green 1F4A  
         ?_I2C_2_Master_RepStart 0001          __end_ofi2_set_led_color 219C  
                  ___rparam_used 000001                 ?_color_read_Blue 0012  
                _Interrupts_init 2364                   __pcstackCOMRAM 0001  
                   __pidataBANK0 2084                     __pidataBANK1 2220  
         i2I2C_2_Master_Read@ack 0003              __end_of_Timer0_init 2330  
         i2I2C_2_Master_Read@tmp 0004                       __pbssBANK0 00E6  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
        i2_I2C_2_Master_RepStart 23B8                    _turnRightLong 142C  
              _color_writetoaddr 22F0                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0010                          ?___lmul 000E  
                        ?___wmul 000E                   main@color_code 01A8  
                     _blockahead 00A2                   ___lmul@product 0016  
                get_color_code@i 00D8              ??_color_writetoaddr 0011  
          i2color_read_Clear@tmp 000A                return_back@motorL 002B  
              return_back@motorR 002D               i2_color_read_Clear 1FEA  
        get_color_code@min_index 00D4                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5          get_color_code@min_value 00D2  
                    _Orange_rule 0190          __end_of_Interrupts_init 2370  
         color_writetoaddr@value 0010                 ??_color_read_Red 0014  
            ?i2_color_read_Clear 0005       __end_of_get_wall_detection 1E50  
                        _HighISR 0008       __end_of_set_wall_detection 1D82  
      __end_of_color_writetoaddr 2310                 ?i2_set_led_color 0001  
                 ?_turnRightLong 0021               _I2C_2_Master_Start 2390  
            i2_I2C_2_Master_Idle 22A2               _I2C_2_Master_Write 2358  
                      ?_moveBack 0021              i2_I2C_2_Master_Read 21DE  
                        __Hparam 0000              i2_I2C_2_Master_Stop 23A4  
                        __Lparam 0000                color_read_Red@tmp 0017  
                    _Timer0_init 2310                __end_of_get_state 2386  
                        ___lldiv 19E6              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1C9C              ?_I2C_2_Master_Write 0001  
                        __pcinit 1A8A             ??i2_color_read_Clear 0007  
                        __ramtop 0E00                        ?_turnLeft 0021  
                        __ptext0 0CE2                          __ptext1 2330  
                        __ptext2 0AAC                          __ptext3 1B24  
                        __ptext4 1DEC                          __ptext5 237C  
                        __ptext6 070E                          __ptext7 0E9C  
                        __ptext8 1D82                          __ptext9 19E6  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 000FBD  
           ?i2_I2C_2_Master_Read 0001             ?i2_I2C_2_Master_Stop 0001  
                        _seconds 0049                        _T2HLTbits 000FBE  
           ??_I2C_2_Master_Start 000F             ??_I2C_2_Master_Write 000F  
           end_of_initialization 1B1A        ??i2_I2C_2_Master_RepStart 0002  
              ?_color_click_init 0001                       ??_moveBack 0027  
                ___lldiv@divisor 001E               ??_color_click_init 0023  
                ___lldiv@counter 0026                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                      _White_setup 0060  
                _initDCmotorsPWM 1B24                       ??_turnLeft 0025  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0020  
          ??i2_I2C_2_Master_Idle 0001            ??i2_I2C_2_Master_Read 0002  
              __end_of_turnRight 16CC            ??i2_I2C_2_Master_Stop 0002  
                    _Yellow_rule 006C                        _TRISAbits 000F81  
             setMotorPWM@posDuty 001F                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
           _calibrate_black$2467 0021      __end_of_add_seconds_to_list 2114  
               fullSpeedAhead@mL 0021                 fullSpeedAhead@mR 0023  
       color_writetoaddr@address 0011       get_color_distance@B_offset 00B8  
        ??_I2C_2_Master_RepStart 000F                 ?_Interrupts_init 0001  
                ??_turnRightLong 0025                      _CCP1CONbits 000FAB  
     get_color_distance@G_offset 00B6                _increment_seconds 23C2  
              ?_color_read_Clear 0012                      _CCP2CONbits 000FA7  
              ??_calibrate_black 001B                ?_color_read_Green 0012  
                    _CCP3CONbits 000F26                      _CCP4CONbits 000F22  
                     main@motorL 01AC                       main@motorR 01B5  
              ??_calibrate_white 0019               ?_increment_seconds 0001  
             ??_color_read_Clear 0014               ??_color_read_Green 0014  
                 _fullSpeedAhead 1E50       get_color_distance@R_offset 00B4  
                      _Blue_rule 0078              ??_increment_seconds 0001  
                 __end_of___lmul 1DEC                   __end_of___wmul 22F0  
                  __pidataCOMRAM 234A              color_read_Clear@tmp 0017  
            start_initialization 1A8A              _TimedfullSpeedAhead 1C28  
               _incr_sec_counter 00F2        __end_of_increment_seconds 23C8  
                      _Pink_rule 019C              color_read_Green@tmp 0017  
        __end_of_initDCmotorsPWM 1BB4             ?_TimedfullSpeedAhead 0021  
         __end_of_fullSpeedAhead 1EAA                         ??___lmul 0016  
                       ??___wmul 0012                      __pdataBANK0 0060  
                    __pdataBANK1 0178    i2I2C_2_Master_Write@data_byte 0002  
   __end_ofi2_I2C_2_Master_Start 23B8     __end_ofi2_I2C_2_Master_Write 237C  
         _get_color_distance$422 00A8           _get_color_distance$424 00AC  
         _get_color_distance$426 00B0                      __pbssCOMRAM 0047  
                  __pcstackBANK0 00A8                    __pcstackBANK1 01A8  
            get_color_code@value 00D6                         ?_HighISR 0001  
    set_wall_detection_mode@mode 000E                    _RobotMovement 00A6  
               ___lwdiv@dividend 0014            ??_TimedfullSpeedAhead 0027  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 0021  
                     moveBack@mL 0021                       moveBack@mR 0023  
                      __pintcode 0008                        _blockback 00A0  
                       ?___lldiv 001A                         ?___lwdiv 0014  
             _get_wall_detection 1DEC               _set_wall_detection 1D10  
                  ?_turnLeftLong 0021                     moveBack@time 0025  
                      _get_state 237C             I2C_2_Master_Read@ack 0010  
           I2C_2_Master_Read@tmp 0011          _set_wall_detection_mode 2330  
          TimedfullSpeedAhead@mL 0021            TimedfullSpeedAhead@mR 0023  
            ?_get_wall_detection 0014              ?_set_wall_detection 000C  
    get_color_code@NormalizedRGB 00DA                _I2C_2_Master_Idle 227A  
              _I2C_2_Master_Init 2250                _I2C_2_Master_Read 219C  
              _I2C_2_Master_Stop 2386               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 001D               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 0019         initDCmotorsPWM@PWMperiod 000E  
                turnRightLong@mL 0021                  turnRightLong@mR 0023  
                 turnLeftLong@mL 0021                   turnLeftLong@mR 0023  
            ??_I2C_2_Master_Idle 000E              ??_I2C_2_Master_Init 000E  
            ??_I2C_2_Master_Read 000F                   ___wmul@product 0012  
                       _LATAbits 000F79                    _set_led_color 2114  
            ??_I2C_2_Master_Stop 000F                         _LATCbits 000F7B  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                       _LATGbits 000F7F             ??_get_wall_detection 0016  
                       _PIE0bits 000E29                   ?_RobotMovement 002B  
                       _PIE2bits 000E2B             ??_set_wall_detection 000E  
                    turnRight@mL 0021                      turnRight@mR 0023  
                       i2u216_40 1D24                         i2u216_41 1D20  
                       i2u161_40 2208                         i2u217_40 1D3A  
                       i2u161_41 2200                         i2u217_41 1D36  
                       i2u154_40 22B2                         i2u218_40 1D68  
                       i2u250_40 0038                         i2u154_41 22AE  
                       i2u218_41 1D64                         i2u250_41 0034  
                       i2u155_40 22C8                         i2u162_48 220A  
                       i2u251_40 005A                         i2u155_41 22C4  
                       i2u251_41 0056                         i2u252_40 007E  
                       i2u252_41 007A                         _PIR0bits 000E33  
                       i2u185_40 2166                         i2u249_40 001A  
                       i2u185_41 2162                         i2u249_41 0016  
                       i2u186_40 217C                         i2u186_41 2178  
                       i2u187_40 2192                         i2u187_41 218E  
               ?_initDCmotorsPWM 000E                        _wall_coef 00A6  
                      _wait_time 00A4                         _SSP2CON2 000EDA  
                 ??_turnLeftLong 0025                         _SSP2STAT 000ED8  
             set_led_color@color 000E                       ?_get_state 000E  
      __end_of_I2C_2_Master_Idle 22A2        __end_of_I2C_2_Master_Init 227A  
      __end_of_I2C_2_Master_Read 21DE                ___wmul@multiplier 000E  
      __end_of_I2C_2_Master_Stop 2390                     setMotorPWM@m 001B  
    I2C_2_Master_Write@data_byte 000F                    _movement_list 0200  
                      main@state 01AA                ??_color_read_Blue 0014  
                  ??_return_back 002F                  _calibrate_black 1804  
        TimedfullSpeedAhead@time 0025                        _turnRight 157C  
                _calibrate_white 193C                ___lmul@multiplier 000E  
                      copy_data0 1A9E                        copy_data1 1ABE  
                      copy_data2 1ADE                        _twothirds 009C  
                 ?_set_led_color 000E    __end_of_I2C_2_Master_RepStart 23A4  
             color_read_Blue@tmp 0017              __end_of_setMotorPWM 1178  
                       _Red_rule 0090             i2_I2C_2_Master_Start 23AE  
           i2_I2C_2_Master_Write 2370                         __Hrparam 0000  
                       __Lrparam 0000      __end_ofi2_I2C_2_Master_Idle 22CA  
    __end_ofi2_I2C_2_Master_Read 2220       __end_of_get_color_distance 100C  
    __end_ofi2_I2C_2_Master_Stop 23AE        ??_set_wall_detection_mode 0010  
                 _get_color_code 070E                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6         ?i2_I2C_2_Master_RepStart 0001  
                ___lwdiv@divisor 0016                         _halfback 009E  
                ___lwdiv@counter 0018                       ?_turnRight 0021  
                       __ptext10 1E50                         __ptext11 16CC  
                       __ptext20 2358                         __ptext12 22F0  
                       __ptext21 2386                         __ptext13 193C  
                       __ptext30 142C                         __ptext22 2390  
                       __ptext14 1804                         __ptext31 157C  
                       __ptext23 239A                         __ptext15 2114  
                       __ptext40 2364                         __ptext32 1178  
                       __ptext24 219C                         __ptext16 1EAA  
                       __ptext33 12D2                         __ptext25 227A  
                       __ptext17 1EFA                         __ptext50 22A2  
                       __ptext42 1D10                         __ptext34 203A  
                       __ptext26 2250                         __ptext18 1F4A  
                       __ptext51 23C2                         __ptext43 2158  
                       __ptext35 1BB4                         __ptext27 20CC  
                       __ptext19 1F9A                         __ptext44 1FEA  
                       __ptext36 1C28                         __ptext28 2310  
                       __ptext45 2370                         __ptext37 100C  
                       __ptext29 00A6                         __ptext46 23A4  
                       __ptext38 22CA                         __ptext47 23AE  
                       __ptext39 1C9C                         __ptext48 23B8  
                       __ptext49 21DE                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA                  ??_RobotMovement 0031  
            __end_of_return_back 0CE2                       turnLeft@mL 0021  
                     turnLeft@mR 0023            ?i2_I2C_2_Master_Start 0001  
                 turnRightLong@i 0029                   turnRightLong@k 0027  
          ?i2_I2C_2_Master_Write 0001                    turnLeftLong@i 0029  
                  turnLeftLong@k 0027            __end_of_turnRightLong 157C  
                       _moveBack 1BB4                       turnRight@i 0029  
                     turnRight@k 0027                         isa$xinst 000000  
                       int$flags 004F           __end_of_get_color_code 0AAC  
        __end_of_calibrate_black 193C                         _turnLeft 12D2  
                    ??_get_state 0010          __end_of_calibrate_white 19E6  
                     _INTCONbits 000FF2                ??i2_set_led_color 0003  
                    _setMotorPWM 100C                  ??_set_led_color 0010  
           __end_of_turnLeftLong 12D2                         intlevel2 0000  
__end_of_set_wall_detection_mode 234A                 ___lldiv@dividend 001A  
               ??_fullSpeedAhead 0025                        turnLeft@i 0029  
                      turnLeft@k 0027                  ?_get_color_code 0030  
               _color_click_init 16CC  __end_ofi2_I2C_2_Master_RepStart 23C2  
         _wall_detection_counter 0045                       _SSP2DATPPS 000E1D  
               ___lldiv@quotient 0022                       _SSP2CLKPPS 000E1C  
         set_wall_detection@mode 000C                      _return_back 0AAC  
                    ??_turnRight 0025      __end_of_TimedfullSpeedAhead 1C9C  
         ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002  
            RobotMovement@i_1277 0035  
