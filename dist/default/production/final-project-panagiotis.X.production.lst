

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 14:51:49 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    45                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    46   000000                     
    47                           ; Generated 06/04/2022 GMT
    48                           ; 
    49                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution. Publication is not required when
    63                           ;        this file is used in an embedded application.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F67K40 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81   000000                     
    82                           	psect	idataCOMRAM
    83   000B0A                     __pidataCOMRAM:
    84                           	callstack 0
    85                           
    86                           ;initializer for _Black_setup
    87   000B0A  0404               	dw	1028
    88   000B0C  0000               	dw	0
    89   000B0E  024B               	dw	587
    90   000B10  0000               	dw	0
    91   000B12  00A1               	dw	161
    92   000B14  0000               	dw	0
    93                           
    94                           ;initializer for _White_setup
    95   000B16  28FC               	dw	10492
    96   000B18  0000               	dw	0
    97   000B1A  1B55               	dw	6997
    98   000B1C  0000               	dw	0
    99   000B1E  0770               	dw	1904
   100   000B20  0000               	dw	0
   101                           
   102                           ;initializer for _wait_time
   103   000B22  00DC               	dw	220
   104                           
   105                           ;initializer for _wall_coef
   106   000B24  000F               	dw	15
   107                           
   108                           	psect	idataBANK0
   109   0007E2                     __pidataBANK0:
   110                           	callstack 0
   111                           
   112                           ;initializer for _White_rule
   113   0007E2  0064               	dw	100
   114   0007E4  0000               	dw	0
   115   0007E6  0064               	dw	100
   116   0007E8  0000               	dw	0
   117   0007EA  0064               	dw	100
   118   0007EC  0000               	dw	0
   119                           
   120                           ;initializer for _Lightblue_rule
   121   0007EE  0026               	dw	38
   122   0007F0  0000               	dw	0
   123   0007F2  0048               	dw	72
   124   0007F4  0000               	dw	0
   125   0007F6  0054               	dw	84
   126   0007F8  0000               	dw	0
   127                           
   128                           ;initializer for _Orange_rule
   129   0007FA  005C               	dw	92
   130   0007FC  0000               	dw	0
   131   0007FE  0027               	dw	39
   132   000800  0000               	dw	0
   133   000802  001C               	dw	28
   134   000804  0000               	dw	0
   135                           
   136                           ;initializer for _Pink_rule
   137   000806  004D               	dw	77
   138   000808  0000               	dw	0
   139   00080A  003C               	dw	60
   140   00080C  0000               	dw	0
   141   00080E  0040               	dw	64
   142   000810  0000               	dw	0
   143                           
   144                           ;initializer for _Yellow_rule
   145   000812  005D               	dw	93
   146   000814  0000               	dw	0
   147   000816  004C               	dw	76
   148   000818  0000               	dw	0
   149   00081A  0014               	dw	20
   150   00081C  0000               	dw	0
   151                           
   152                           ;initializer for _Blue_rule
   153   00081E  0003               	dw	3
   154   000820  0000               	dw	0
   155   000822  0009               	dw	9
   156   000824  0000               	dw	0
   157   000826  0024               	dw	36
   158   000828  0000               	dw	0
   159                           
   160                           ;initializer for _Green_rule
   161   00082A  0019               	dw	25
   162   00082C  0000               	dw	0
   163   00082E  0036               	dw	54
   164   000830  0000               	dw	0
   165   000832  0008               	dw	8
   166   000834  0000               	dw	0
   167                           
   168                           ;initializer for _Red_rule
   169   000836  0048               	dw	72
   170   000838  0000               	dw	0
   171   00083A  0002               	dw	2
   172   00083C  0000               	dw	0
   173   00083E  0002               	dw	2
   174   000840  0000               	dw	0
   175   000000                     _T0CON0bits	set	4053
   176   000000                     _T0CON1bits	set	4054
   177   000000                     _TRISDbits	set	3972
   178   000000                     _SSP2CON2bits	set	3802
   179   000000                     _SSP2CLKPPS	set	3612
   180   000000                     _SSP2DATPPS	set	3613
   181   000000                     _RC7PPS	set	3689
   182   000000                     _RE2PPS	set	3700
   183   000000                     _ANSELFbits	set	3764
   184   000000                     _TRISAbits	set	3969
   185   000000                     _TRISFbits	set	3974
   186   000000                     _PORTFbits	set	3982
   187   000000                     _TRISGbits	set	3975
   188   000000                     _TRISCbits	set	3971
   189   000000                     _TRISEbits	set	3973
   190   000000                     _SSP2BUF	set	3797
   191   000000                     _SSP2ADD	set	3798
   192   000000                     _SSP2CON1bits	set	3801
   193   000000                     _LATAbits	set	3961
   194   000000                     _LATGbits	set	3967
   195   000000                     _CCPR4H	set	3873
   196   000000                     _CCPR3H	set	3877
   197   000000                     _T2PR	set	4028
   198   000000                     _T2CONbits	set	4029
   199   000000                     _CCPR2H	set	4006
   200   000000                     _CCPR1H	set	4010
   201   000000                     _LATCbits	set	3963
   202   000000                     _LATEbits	set	3965
   203   000000                     _LATFbits	set	3966
   204   000000                     _RE4PPS	set	3702
   205   000000                     _RG6PPS	set	3720
   206   000000                     _RD5PPS	set	3695
   207   000000                     _ANSELDbits	set	3751
   208   000000                     _TMR0L	set	4051
   209   000000                     _TMR0H	set	4052
   210   000000                     _INTCONbits	set	4082
   211   000000                     _T2CLKCONbits	set	4031
   212   000000                     _T2HLTbits	set	4030
   213   000000                     _CCP1CONbits	set	4011
   214   000000                     _CCPTMRS0bits	set	4013
   215   000000                     _CCP2CONbits	set	4007
   216   000000                     _CCP3CONbits	set	3878
   217   000000                     _CCP4CONbits	set	3874
   218   000000                     _SSP2CON2	set	3802
   219   000000                     _SSP2STAT	set	3800
   220   000000                     _PIE0bits	set	3625
   221   000000                     _RD6PPS	set	3696
   222   000000                     _PIE2bits	set	3627
   223   000000                     _PIR0bits	set	3635
   224                           
   225                           ; #config settings
   226                           
   227                           	psect	cinit
   228   000774                     __pcinit:
   229                           	callstack 0
   230   000774                     start_initialization:
   231                           	callstack 0
   232   000774                     __initialization:
   233                           	callstack 0
   234                           
   235                           ; Initialize objects allocated to BANK0 (96 bytes)
   236                           ; load TBLPTR registers with __pidataBANK0
   237   000774  0EE2               	movlw	low __pidataBANK0
   238   000776  6EF6               	movwf	tblptrl,c
   239   000778  0E07               	movlw	high __pidataBANK0
   240   00077A  6EF7               	movwf	tblptrh,c
   241   00077C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   242   00077E  6EF8               	movwf	tblptru,c
   243   000780  EE00  F060         	lfsr	0,__pdataBANK0
   244   000784  EE10 F060          	lfsr	1,96
   245   000788                     copy_data0:
   246   000788  0009               	tblrd		*+
   247   00078A  CFF5 FFEE          	movff	tablat,postinc0
   248   00078E  50E5               	movf	postdec1,w,c
   249   000790  50E1               	movf	fsr1l,w,c
   250   000792  E1FA               	bnz	copy_data0
   251                           
   252                           ; Initialize objects allocated to COMRAM (28 bytes)
   253                           ; load TBLPTR registers with __pidataCOMRAM
   254   000794  0E0A               	movlw	low __pidataCOMRAM
   255   000796  6EF6               	movwf	tblptrl,c
   256   000798  0E0B               	movlw	high __pidataCOMRAM
   257   00079A  6EF7               	movwf	tblptrh,c
   258   00079C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   259   00079E  6EF8               	movwf	tblptru,c
   260   0007A0  EE00  F02E         	lfsr	0,__pdataCOMRAM
   261   0007A4  EE10 F01C          	lfsr	1,28
   262   0007A8                     copy_data1:
   263   0007A8  0009               	tblrd		*+
   264   0007AA  CFF5 FFEE          	movff	tablat,postinc0
   265   0007AE  50E5               	movf	postdec1,w,c
   266   0007B0  50E1               	movf	fsr1l,w,c
   267   0007B2  E1FA               	bnz	copy_data1
   268                           
   269                           ; Clear objects allocated to BANK1 (208 bytes)
   270   0007B4  EE01  F000         	lfsr	0,__pbssBANK1
   271   0007B8  0ED0               	movlw	208
   272   0007BA                     clear_0:
   273   0007BA  6AEE               	clrf	postinc0,c
   274   0007BC  06E8               	decf	wreg,f,c
   275   0007BE  E1FD               	bnz	clear_0
   276                           
   277                           ; Clear objects allocated to BANK0 (12 bytes)
   278   0007C0  EE00  F0C0         	lfsr	0,__pbssBANK0
   279   0007C4  0E0C               	movlw	12
   280   0007C6                     clear_1:
   281   0007C6  6AEE               	clrf	postinc0,c
   282   0007C8  06E8               	decf	wreg,f,c
   283   0007CA  E1FD               	bnz	clear_1
   284                           
   285                           ; Clear objects allocated to COMRAM (16 bytes)
   286   0007CC  EE00  F04A         	lfsr	0,__pbssCOMRAM
   287   0007D0  0E10               	movlw	16
   288   0007D2                     clear_2:
   289   0007D2  6AEE               	clrf	postinc0,c
   290   0007D4  06E8               	decf	wreg,f,c
   291   0007D6  E1FD               	bnz	clear_2
   292   0007D8                     end_of_initialization:
   293                           	callstack 0
   294   0007D8                     __end_of__initialization:
   295                           	callstack 0
   296   0007D8  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   297   0007DA  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   298   0007DC  0100               	movlb	0
   299   0007DE  EFED  F002         	goto	_main	;jump to C main() function
   300                           
   301                           	psect	bssCOMRAM
   302   00004A                     __pbssCOMRAM:
   303                           	callstack 0
   304   00004A                     _RGB:
   305                           	callstack 0
   306   00004A                     	ds	12
   307   000056                     _index:
   308                           	callstack 0
   309   000056                     	ds	2
   310   000058                     _seconds:
   311                           	callstack 0
   312   000058                     	ds	2
   313                           
   314                           	psect	dataCOMRAM
   315   00002E                     __pdataCOMRAM:
   316                           	callstack 0
   317   00002E                     _Black_setup:
   318                           	callstack 0
   319   00002E                     	ds	12
   320   00003A                     _White_setup:
   321                           	callstack 0
   322   00003A                     	ds	12
   323   000046                     _wait_time:
   324                           	callstack 0
   325   000046                     	ds	2
   326   000048                     _wall_coef:
   327                           	callstack 0
   328   000048                     	ds	2
   329                           
   330                           	psect	bssBANK0
   331   0000C0                     __pbssBANK0:
   332                           	callstack 0
   333   0000C0                     _Black_rule:
   334                           	callstack 0
   335   0000C0                     	ds	12
   336                           
   337                           	psect	dataBANK0
   338   000060                     __pdataBANK0:
   339                           	callstack 0
   340   000060                     _White_rule:
   341                           	callstack 0
   342   000060                     	ds	12
   343   00006C                     _Lightblue_rule:
   344                           	callstack 0
   345   00006C                     	ds	12
   346   000078                     _Orange_rule:
   347                           	callstack 0
   348   000078                     	ds	12
   349   000084                     _Pink_rule:
   350                           	callstack 0
   351   000084                     	ds	12
   352   000090                     _Yellow_rule:
   353                           	callstack 0
   354   000090                     	ds	12
   355   00009C                     _Blue_rule:
   356                           	callstack 0
   357   00009C                     	ds	12
   358   0000A8                     _Green_rule:
   359                           	callstack 0
   360   0000A8                     	ds	12
   361   0000B4                     _Red_rule:
   362                           	callstack 0
   363   0000B4                     	ds	12
   364                           
   365                           	psect	bssBANK1
   366   000100                     __pbssBANK1:
   367                           	callstack 0
   368   000100                     _Color_rules:
   369                           	callstack 0
   370   000100                     	ds	108
   371   00016C                     _movement_list:
   372                           	callstack 0
   373   00016C                     	ds	100
   374                           
   375                           	psect	cstackCOMRAM
   376   000001                     __pcstackCOMRAM:
   377                           	callstack 0
   378   000001                     ??_I2C_2_Master_Idle:
   379   000001                     ?___wmul:
   380                           	callstack 0
   381   000001                     set_led_color@color:
   382                           	callstack 0
   383   000001                     initDCmotorsPWM@PWMperiod:
   384                           	callstack 0
   385   000001                     ___wmul@multiplier:
   386                           	callstack 0
   387                           
   388                           ; 2 bytes @ 0x0
   389   000001                     	ds	1
   390   000002                     ??_I2C_2_Master_Read:
   391   000002                     I2C_2_Master_Write@data_byte:
   392                           	callstack 0
   393                           
   394                           ; 1 bytes @ 0x1
   395   000002                     	ds	1
   396   000003                     color_writetoaddr@value:
   397                           	callstack 0
   398   000003                     I2C_2_Master_Read@ack:
   399                           	callstack 0
   400   000003                     ___wmul@multiplicand:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x2
   404   000003                     	ds	1
   405   000004                     color_writetoaddr@address:
   406                           	callstack 0
   407   000004                     I2C_2_Master_Read@tmp:
   408                           	callstack 0
   409                           
   410                           ; 1 bytes @ 0x3
   411   000004                     	ds	1
   412   000005                     ?_color_read_Red:
   413                           	callstack 0
   414   000005                     ?_color_read_Blue:
   415                           	callstack 0
   416   000005                     ?_color_read_Green:
   417                           	callstack 0
   418   000005                     ?_color_read_Clear:
   419                           	callstack 0
   420   000005                     ___wmul@product:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x4
   424   000005                     	ds	2
   425   000007                     ??_color_read_Red:
   426   000007                     ??_color_read_Blue:
   427   000007                     ??_color_read_Green:
   428   000007                     ??_color_read_Clear:
   429   000007                     ?___lwdiv:
   430                           	callstack 0
   431   000007                     ___lwdiv@dividend:
   432                           	callstack 0
   433                           
   434                           ; 2 bytes @ 0x6
   435   000007                     	ds	2
   436   000009                     ___lwdiv@divisor:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x8
   440   000009                     	ds	1
   441   00000A                     color_read_Red@tmp:
   442                           	callstack 0
   443   00000A                     color_read_Blue@tmp:
   444                           	callstack 0
   445   00000A                     color_read_Green@tmp:
   446                           	callstack 0
   447   00000A                     color_read_Clear@tmp:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x9
   451   00000A                     	ds	1
   452   00000B                     ___lwdiv@quotient:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0xA
   456   00000B                     	ds	1
   457   00000C                     ??_calibrate_white:
   458                           
   459                           ; 1 bytes @ 0xB
   460   00000C                     	ds	1
   461   00000D                     ___lwdiv@counter:
   462                           	callstack 0
   463                           
   464                           ; 1 bytes @ 0xC
   465   00000D                     	ds	1
   466   00000E                     ??_calibrate_black:
   467   00000E                     setMotorPWM@m:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0xD
   471   00000E                     	ds	2
   472   000010                     ??_setMotorPWM:
   473   000010                     calibrate_black@clear1:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0xF
   477   000010                     	ds	2
   478   000012                     setMotorPWM@posDuty:
   479                           	callstack 0
   480   000012                     calibrate_black@clear2:
   481                           	callstack 0
   482                           
   483                           ; 2 bytes @ 0x11
   484   000012                     	ds	1
   485   000013                     setMotorPWM@negDuty:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0x12
   489   000013                     	ds	1
   490   000014                     stop@mL:
   491                           	callstack 0
   492   000014                     turnLeft@mL:
   493                           	callstack 0
   494   000014                     _calibrate_black$2445:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x13
   498   000014                     	ds	2
   499   000016                     ??_color_click_init:
   500   000016                     stop@mR:
   501                           	callstack 0
   502   000016                     turnLeft@mR:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x15
   506   000016                     	ds	2
   507   000018                     ??_stop:
   508   000018                     ??_turnLeft:
   509                           
   510                           ; 1 bytes @ 0x17
   511   000018                     	ds	2
   512   00001A                     turnLeft@i:
   513                           	callstack 0
   514                           
   515                           ; 2 bytes @ 0x19
   516   00001A                     	ds	2
   517   00001C                     main@motorL:
   518                           	callstack 0
   519                           
   520                           ; 9 bytes @ 0x1B
   521   00001C                     	ds	9
   522   000025                     main@motorR:
   523                           	callstack 0
   524                           
   525                           ; 9 bytes @ 0x24
   526   000025                     	ds	9
   527                           
   528 ;;
   529 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   530 ;;
   531 ;; *************** function _main *****************
   532 ;; Defined at:
   533 ;;		line 17 in file "main.c"
   534 ;; Parameters:    Size  Location     Type
   535 ;;		None
   536 ;; Auto vars:     Size  Location     Type
   537 ;;  motorR          9   36[COMRAM] struct DC_motor
   538 ;;  motorL          9   27[COMRAM] struct DC_motor
   539 ;;  PWMcycle        2    0        unsigned int 
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   550 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   552 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   553 ;;Total ram usage:       18 bytes
   554 ;; Hardware stack levels required when called: 7
   555 ;; This function calls:
   556 ;;		_Interrupts_init
   557 ;;		_Timer0_init
   558 ;;		_color_click_init
   559 ;;		_initDCmotorsPWM
   560 ;;		_stop
   561 ;;		_turnLeft
   562 ;; This function is called by:
   563 ;;		Startup code after reset
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           	psect	text0
   568   0005DA                     __ptext0:
   569                           	callstack 0
   570   0005DA                     _main:
   571                           	callstack 24
   572   0005DA                     
   573                           ;main.c: 18:     Timer0_init();
   574   0005DA  EC75  F005         	call	_Timer0_init	;wreg free
   575   0005DE                     
   576                           ;main.c: 19:     Interrupts_init();
   577   0005DE  EC99  F005         	call	_Interrupts_init	;wreg free
   578   0005E2                     
   579                           ;main.c: 20:     initDCmotorsPWM(99);
   580   0005E2  0E00               	movlw	0
   581   0005E4  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   582   0005E6  0E63               	movlw	99
   583   0005E8  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   584   0005EA  EC38  F003         	call	_initDCmotorsPWM	;wreg free
   585   0005EE                     
   586                           ;main.c: 22:     color_click_init();
   587   0005EE  ECCF  F000         	call	_color_click_init	;wreg free
   588   0005F2                     
   589                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   590   0005F2  010E               	movlb	14	; () banked
   591   0005F4  95B4               	bcf	180,2,b	;volatile
   592   0005F6                     
   593                           ; BSR set to: 14
   594                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   595   0005F6  8486               	bsf	134,2,c	;volatile
   596   0005F8                     
   597                           ; BSR set to: 14
   598                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   599   0005F8  0E00               	movlw	0
   600   0005FA  6E1C               	movwf	main@motorL^0,c
   601   0005FC                     
   602                           ; BSR set to: 14
   603                           ;main.c: 29:     motorL.direction=1;
   604   0005FC  0E01               	movlw	1
   605   0005FE  6E1D               	movwf	(main@motorL+1)^0,c
   606   000600                     
   607                           ; BSR set to: 14
   608                           ;main.c: 30:     motorL.brakemode=1;
   609   000600  0E01               	movlw	1
   610   000602  6E1E               	movwf	(main@motorL+2)^0,c
   611   000604                     
   612                           ; BSR set to: 14
   613                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   614   000604  0EAA               	movlw	170
   615   000606  6E21               	movwf	(main@motorL+5)^0,c
   616   000608  0E0F               	movlw	15
   617   00060A  6E22               	movwf	(main@motorL+6)^0,c
   618   00060C                     
   619                           ; BSR set to: 14
   620                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   621   00060C  0EA6               	movlw	166
   622   00060E  6E23               	movwf	(main@motorL+7)^0,c
   623   000610  0E0F               	movlw	15
   624   000612  6E24               	movwf	(main@motorL+8)^0,c
   625   000614                     
   626                           ; BSR set to: 14
   627                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   628   000614  0E00               	movlw	0
   629   000616  6E20               	movwf	(main@motorL+4)^0,c
   630   000618  0E63               	movlw	99
   631   00061A  6E1F               	movwf	(main@motorL+3)^0,c
   632   00061C                     
   633                           ; BSR set to: 14
   634                           ;main.c: 35:     motorR.power=0;
   635   00061C  0E00               	movlw	0
   636   00061E  6E25               	movwf	main@motorR^0,c
   637   000620                     
   638                           ; BSR set to: 14
   639                           ;main.c: 36:     motorR.direction=1;
   640   000620  0E01               	movlw	1
   641   000622  6E26               	movwf	(main@motorR+1)^0,c
   642   000624                     
   643                           ; BSR set to: 14
   644                           ;main.c: 37:     motorR.brakemode=1;
   645   000624  0E01               	movlw	1
   646   000626  6E27               	movwf	(main@motorR+2)^0,c
   647   000628                     
   648                           ; BSR set to: 14
   649                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   650   000628  0E25               	movlw	37
   651   00062A  6E2A               	movwf	(main@motorR+5)^0,c
   652   00062C  0E0F               	movlw	15
   653   00062E  6E2B               	movwf	(main@motorR+6)^0,c
   654   000630                     
   655                           ; BSR set to: 14
   656                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   657   000630  0E21               	movlw	33
   658   000632  6E2C               	movwf	(main@motorR+7)^0,c
   659   000634  0E0F               	movlw	15
   660   000636  6E2D               	movwf	(main@motorR+8)^0,c
   661   000638                     
   662                           ; BSR set to: 14
   663                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   664   000638  0E00               	movlw	0
   665   00063A  6E29               	movwf	(main@motorR+4)^0,c
   666   00063C  0E63               	movlw	99
   667   00063E  6E28               	movwf	(main@motorR+3)^0,c
   668   000640                     l2851:
   669                           
   670                           ;main.c: 56:         turnLeft(&motorL, &motorR);
   671   000640  0E1C               	movlw	low main@motorL
   672   000642  6E14               	movwf	turnLeft@mL^0,c
   673   000644  0E00               	movlw	high main@motorL
   674   000646  6E15               	movwf	(turnLeft@mL+1)^0,c
   675   000648  0E25               	movlw	low main@motorR
   676   00064A  6E16               	movwf	turnLeft@mR^0,c
   677   00064C  0E00               	movlw	high main@motorR
   678   00064E  6E17               	movwf	(turnLeft@mR+1)^0,c
   679   000650  EC07  F002         	call	_turnLeft	;wreg free
   680   000654                     
   681                           ;main.c: 57:         stop(&motorL,&motorR);
   682   000654  0E1C               	movlw	low main@motorL
   683   000656  6E14               	movwf	stop@mL^0,c
   684   000658  0E00               	movlw	high main@motorL
   685   00065A  6E15               	movwf	(stop@mL+1)^0,c
   686   00065C  0E25               	movlw	low main@motorR
   687   00065E  6E16               	movwf	stop@mR^0,c
   688   000660  0E00               	movlw	high main@motorR
   689   000662  6E17               	movwf	(stop@mR+1)^0,c
   690   000664  ECC1  F004         	call	_stop	;wreg free
   691   000668  EF20  F003         	goto	l2851
   692   00066C  EF17  F000         	goto	start
   693   000670                     __end_of_main:
   694                           	callstack 0
   695                           
   696 ;; *************** function _turnLeft *****************
   697 ;; Defined at:
   698 ;;		line 102 in file "dc_motor.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   701 ;;		 -> main@motorL(9), return_back@motorL(2), 
   702 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   703 ;;		 -> main@motorR(9), return_back@motorR(2), 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  i               2   25[COMRAM] int 
   706 ;; Return value:  Size  Location     Type
   707 ;;                  1    wreg      void 
   708 ;; Registers used:
   709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   710 ;; Tracked objects:
   711 ;;		On entry : 0/0
   712 ;;		On exit  : 0/0
   713 ;;		Unchanged: 0/0
   714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   716 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   717 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   718 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   719 ;;Total ram usage:        8 bytes
   720 ;; Hardware stack levels used: 1
   721 ;; Hardware stack levels required when called: 4
   722 ;; This function calls:
   723 ;;		_setMotorPWM
   724 ;; This function is called by:
   725 ;;		_main
   726 ;;		_RobotMovement
   727 ;;		_return_back
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732   00040E                     __ptext1:
   733                           	callstack 0
   734   00040E                     _turnLeft:
   735                           	callstack 26
   736   00040E                     
   737                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int i;;dc_motor.c: 129:     for(i=27;i<42;i+=5){
   738   00040E  0E00               	movlw	0
   739   000410  6E1B               	movwf	(turnLeft@i+1)^0,c
   740   000412  0E1B               	movlw	27
   741   000414  6E1A               	movwf	turnLeft@i^0,c
   742   000416                     l2377:
   743                           
   744                           ;dc_motor.c: 130:     (*mL).direction=1;
   745   000416  EE20 F001          	lfsr	2,1
   746   00041A  5014               	movf	turnLeft@mL^0,w,c
   747   00041C  26D9               	addwf	fsr2l,f,c
   748   00041E  5015               	movf	(turnLeft@mL+1)^0,w,c
   749   000420  22DA               	addwfc	fsr2h,f,c
   750   000422  0E01               	movlw	1
   751   000424  6EDF               	movwf	indf2,c
   752                           
   753                           ;dc_motor.c: 131:     (*mR).direction=0;
   754   000426  EE20 F001          	lfsr	2,1
   755   00042A  5016               	movf	turnLeft@mR^0,w,c
   756   00042C  26D9               	addwf	fsr2l,f,c
   757   00042E  5017               	movf	(turnLeft@mR+1)^0,w,c
   758   000430  22DA               	addwfc	fsr2h,f,c
   759   000432  0E00               	movlw	0
   760   000434  6EDF               	movwf	indf2,c
   761   000436                     
   762                           ;dc_motor.c: 132:     (*mL).power=i;
   763   000436  C014  FFD9         	movff	turnLeft@mL,fsr2l
   764   00043A  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
   765   00043E  C01A  FFDF         	movff	turnLeft@i,indf2
   766   000442                     
   767                           ;dc_motor.c: 133:     (*mR).power=i;
   768   000442  C016  FFD9         	movff	turnLeft@mR,fsr2l
   769   000446  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
   770   00044A  C01A  FFDF         	movff	turnLeft@i,indf2
   771   00044E                     
   772                           ;dc_motor.c: 134:     setMotorPWM(mL);
   773   00044E  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
   774   000452  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
   775   000456  EC19  F000         	call	_setMotorPWM	;wreg free
   776   00045A                     
   777                           ;dc_motor.c: 135:     setMotorPWM(mR);
   778   00045A  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
   779   00045E  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
   780   000462  EC19  F000         	call	_setMotorPWM	;wreg free
   781   000466                     
   782                           ;dc_motor.c: 136:     _delay((unsigned long)((104)*(64000000/4000.0)));
   783   000466  0E09               	movlw	9
   784   000468  6E19               	movwf	(??_turnLeft+1)^0,c
   785   00046A  0E72               	movlw	114
   786   00046C  6E18               	movwf	??_turnLeft^0,c
   787   00046E  0E02               	movlw	2
   788   000470                     u2277:
   789   000470  2EE8               	decfsz	wreg,f,c
   790   000472  D7FE               	bra	u2277
   791   000474  2E18               	decfsz	??_turnLeft^0,f,c
   792   000476  D7FC               	bra	u2277
   793   000478  2E19               	decfsz	(??_turnLeft+1)^0,f,c
   794   00047A  D7FA               	bra	u2277
   795   00047C                     
   796                           ;dc_motor.c: 137:     }
   797   00047C  0E05               	movlw	5
   798   00047E  261A               	addwf	turnLeft@i^0,f,c
   799   000480  0E00               	movlw	0
   800   000482  221B               	addwfc	(turnLeft@i+1)^0,f,c
   801   000484  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
   802   000486  EF4E  F002         	goto	u1411
   803   00048A  501B               	movf	(turnLeft@i+1)^0,w,c
   804   00048C  E109               	bnz	u1410
   805   00048E  0E2A               	movlw	42
   806   000490  5C1A               	subwf	turnLeft@i^0,w,c
   807   000492  A0D8               	btfss	status,0,c
   808   000494  EF4E  F002         	goto	u1411
   809   000498  EF50  F002         	goto	u1410
   810   00049C                     u1411:
   811   00049C  EF0B  F002         	goto	l2377
   812   0004A0                     u1410:
   813   0004A0                     
   814                           ;dc_motor.c: 138:     for(i=32;i>17;i-=5){
   815   0004A0  0E00               	movlw	0
   816   0004A2  6E1B               	movwf	(turnLeft@i+1)^0,c
   817   0004A4  0E20               	movlw	32
   818   0004A6  6E1A               	movwf	turnLeft@i^0,c
   819   0004A8                     l2399:
   820                           
   821                           ;dc_motor.c: 139:     (*mL).direction=1;
   822   0004A8  EE20 F001          	lfsr	2,1
   823   0004AC  5014               	movf	turnLeft@mL^0,w,c
   824   0004AE  26D9               	addwf	fsr2l,f,c
   825   0004B0  5015               	movf	(turnLeft@mL+1)^0,w,c
   826   0004B2  22DA               	addwfc	fsr2h,f,c
   827   0004B4  0E01               	movlw	1
   828   0004B6  6EDF               	movwf	indf2,c
   829                           
   830                           ;dc_motor.c: 140:     (*mR).direction=0;
   831   0004B8  EE20 F001          	lfsr	2,1
   832   0004BC  5016               	movf	turnLeft@mR^0,w,c
   833   0004BE  26D9               	addwf	fsr2l,f,c
   834   0004C0  5017               	movf	(turnLeft@mR+1)^0,w,c
   835   0004C2  22DA               	addwfc	fsr2h,f,c
   836   0004C4  0E00               	movlw	0
   837   0004C6  6EDF               	movwf	indf2,c
   838   0004C8                     
   839                           ;dc_motor.c: 141:     (*mL).power=i;
   840   0004C8  C014  FFD9         	movff	turnLeft@mL,fsr2l
   841   0004CC  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
   842   0004D0  C01A  FFDF         	movff	turnLeft@i,indf2
   843   0004D4                     
   844                           ;dc_motor.c: 142:     (*mR).power=i;
   845   0004D4  C016  FFD9         	movff	turnLeft@mR,fsr2l
   846   0004D8  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
   847   0004DC  C01A  FFDF         	movff	turnLeft@i,indf2
   848   0004E0                     
   849                           ;dc_motor.c: 143:     setMotorPWM(mL);
   850   0004E0  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
   851   0004E4  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
   852   0004E8  EC19  F000         	call	_setMotorPWM	;wreg free
   853   0004EC                     
   854                           ;dc_motor.c: 144:     setMotorPWM(mR);
   855   0004EC  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
   856   0004F0  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
   857   0004F4  EC19  F000         	call	_setMotorPWM	;wreg free
   858   0004F8                     
   859                           ;dc_motor.c: 145:     _delay((unsigned long)((100)*(64000000/4000.0)));
   860   0004F8  0E09               	movlw	9
   861   0004FA  6E19               	movwf	(??_turnLeft+1)^0,c
   862   0004FC  0E1E               	movlw	30
   863   0004FE  6E18               	movwf	??_turnLeft^0,c
   864   000500  0EE4               	movlw	228
   865   000502                     u2287:
   866   000502  2EE8               	decfsz	wreg,f,c
   867   000504  D7FE               	bra	u2287
   868   000506  2E18               	decfsz	??_turnLeft^0,f,c
   869   000508  D7FC               	bra	u2287
   870   00050A  2E19               	decfsz	(??_turnLeft+1)^0,f,c
   871   00050C  D7FA               	bra	u2287
   872   00050E  D000               	nop2	
   873   000510                     
   874                           ;dc_motor.c: 147:     }
   875   000510  0EFB               	movlw	251
   876   000512  261A               	addwf	turnLeft@i^0,f,c
   877   000514  0EFF               	movlw	255
   878   000516  221B               	addwfc	(turnLeft@i+1)^0,f,c
   879   000518  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
   880   00051A  EF9A  F002         	goto	u1420
   881   00051E  501B               	movf	(turnLeft@i+1)^0,w,c
   882   000520  E107               	bnz	u1421
   883   000522  0E12               	movlw	18
   884   000524  5C1A               	subwf	turnLeft@i^0,w,c
   885   000526  B0D8               	btfsc	status,0,c
   886   000528  EF98  F002         	goto	u1421
   887   00052C  EF9A  F002         	goto	u1420
   888   000530                     u1421:
   889   000530  EF54  F002         	goto	l2399
   890   000534                     u1420:
   891   000534  0012               	return		;funcret
   892   000536                     __end_of_turnLeft:
   893                           	callstack 0
   894                           
   895 ;; *************** function _stop *****************
   896 ;; Defined at:
   897 ;;		line 92 in file "dc_motor.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   900 ;;		 -> main@motorL(9), return_back@motorL(2), 
   901 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   902 ;;		 -> main@motorR(9), return_back@motorR(2), 
   903 ;; Auto vars:     Size  Location     Type
   904 ;;		None
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   917 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   918 ;;Total ram usage:        6 bytes
   919 ;; Hardware stack levels used: 1
   920 ;; Hardware stack levels required when called: 4
   921 ;; This function calls:
   922 ;;		_setMotorPWM
   923 ;; This function is called by:
   924 ;;		_main
   925 ;;		_RobotMovement
   926 ;;		_return_back
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text2
   931   000982                     __ptext2:
   932                           	callstack 0
   933   000982                     _stop:
   934                           	callstack 26
   935   000982                     
   936                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
   937   000982  C014  FFD9         	movff	stop@mL,fsr2l
   938   000986  C015  FFDA         	movff	stop@mL+1,fsr2h
   939   00098A  0E00               	movlw	0
   940   00098C  6EDF               	movwf	indf2,c
   941                           
   942                           ;dc_motor.c: 95:     (*mR).power=0;
   943   00098E  C016  FFD9         	movff	stop@mR,fsr2l
   944   000992  C017  FFDA         	movff	stop@mR+1,fsr2h
   945   000996  0E00               	movlw	0
   946   000998  6EDF               	movwf	indf2,c
   947   00099A                     
   948                           ;dc_motor.c: 96:     setMotorPWM(mL);
   949   00099A  C014  F00E         	movff	stop@mL,setMotorPWM@m
   950   00099E  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
   951   0009A2  EC19  F000         	call	_setMotorPWM	;wreg free
   952   0009A6                     
   953                           ;dc_motor.c: 97:     setMotorPWM(mR);
   954   0009A6  C016  F00E         	movff	stop@mR,setMotorPWM@m
   955   0009AA  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
   956   0009AE  EC19  F000         	call	_setMotorPWM	;wreg free
   957   0009B2                     
   958                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   959   0009B2  0E52               	movlw	82
   960   0009B4  6E19               	movwf	(??_stop+1)^0,c
   961   0009B6  0E2B               	movlw	43
   962   0009B8  6E18               	movwf	??_stop^0,c
   963   0009BA  0E00               	movlw	0
   964   0009BC                     u2297:
   965   0009BC  2EE8               	decfsz	wreg,f,c
   966   0009BE  D7FE               	bra	u2297
   967   0009C0  2E18               	decfsz	??_stop^0,f,c
   968   0009C2  D7FC               	bra	u2297
   969   0009C4  2E19               	decfsz	(??_stop+1)^0,f,c
   970   0009C6  D7FA               	bra	u2297
   971   0009C8  D000               	nop2	
   972   0009CA  0012               	return		;funcret
   973   0009CC                     __end_of_stop:
   974                           	callstack 0
   975                           
   976 ;; *************** function _setMotorPWM *****************
   977 ;; Defined at:
   978 ;;		line 69 in file "dc_motor.c"
   979 ;; Parameters:    Size  Location     Type
   980 ;;  m               2   13[COMRAM] PTR struct DC_motor
   981 ;;		 -> main@motorR(9), main@motorL(9), return_back@motorR(2), return_back@motorL(2), 
   982 ;; Auto vars:     Size  Location     Type
   983 ;;  negDuty         1   18[COMRAM] unsigned char 
   984 ;;  posDuty         1   17[COMRAM] unsigned char 
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   994 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   996 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   998 ;;Total ram usage:        6 bytes
   999 ;; Hardware stack levels used: 1
  1000 ;; Hardware stack levels required when called: 3
  1001 ;; This function calls:
  1002 ;;		___lwdiv
  1003 ;;		___wmul
  1004 ;; This function is called by:
  1005 ;;		_stop
  1006 ;;		_turnLeft
  1007 ;;		_turnRight
  1008 ;;		_turnLeftLong
  1009 ;;		_turnRightLong
  1010 ;;		_fullSpeedAhead
  1011 ;;		_TimedfullSpeedAhead
  1012 ;;		_moveBack
  1013 ;;		_Calibrate
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017                           	psect	text3
  1018   000032                     __ptext3:
  1019                           	callstack 0
  1020   000032                     _setMotorPWM:
  1021                           	callstack 26
  1022   000032                     
  1023                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  1024   000032  EE20 F002          	lfsr	2,2
  1025   000036  500E               	movf	setMotorPWM@m^0,w,c
  1026   000038  26D9               	addwf	fsr2l,f,c
  1027   00003A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1028   00003C  22DA               	addwfc	fsr2h,f,c
  1029   00003E  50DF               	movf	indf2,w,c
  1030   000040  B4D8               	btfsc	status,2,c
  1031   000042  EF25  F000         	goto	u1221
  1032   000046  EF27  F000         	goto	u1220
  1033   00004A                     u1221:
  1034   00004A  EF5B  F000         	goto	l2257
  1035   00004E                     u1220:
  1036   00004E                     
  1037                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  1038   00004E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1039   000052  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1040   000056  50DF               	movf	indf2,w,c
  1041   000058  6E10               	movwf	??_setMotorPWM^0,c
  1042   00005A  5010               	movf	??_setMotorPWM^0,w,c
  1043   00005C  6E01               	movwf	___wmul@multiplier^0,c
  1044   00005E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1045   000060  EE20 F003          	lfsr	2,3
  1046   000064  500E               	movf	setMotorPWM@m^0,w,c
  1047   000066  26D9               	addwf	fsr2l,f,c
  1048   000068  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1049   00006A  22DA               	addwfc	fsr2h,f,c
  1050   00006C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1051   000070  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1052   000074  EC52  F005         	call	___wmul	;wreg free
  1053   000078  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1054   00007C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1055   000080  0E00               	movlw	0
  1056   000082  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1057   000084  0E64               	movlw	100
  1058   000086  6E09               	movwf	___lwdiv@divisor^0,c
  1059   000088  EC80  F003         	call	___lwdiv	;wreg free
  1060   00008C  EE20 F003          	lfsr	2,3
  1061   000090  500E               	movf	setMotorPWM@m^0,w,c
  1062   000092  26D9               	addwf	fsr2l,f,c
  1063   000094  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1064   000096  22DA               	addwfc	fsr2h,f,c
  1065   000098  50DF               	movf	indf2,w,c
  1066   00009A  6E11               	movwf	(??_setMotorPWM+1)^0,c
  1067   00009C  5007               	movf	?___lwdiv^0,w,c
  1068   00009E  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  1069   0000A0  6E12               	movwf	setMotorPWM@posDuty^0,c
  1070   0000A2                     
  1071                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  1072   0000A2  EE20 F003          	lfsr	2,3
  1073   0000A6  500E               	movf	setMotorPWM@m^0,w,c
  1074   0000A8  26D9               	addwf	fsr2l,f,c
  1075   0000AA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1076   0000AC  22DA               	addwfc	fsr2h,f,c
  1077   0000AE  50DF               	movf	indf2,w,c
  1078   0000B0  6E13               	movwf	setMotorPWM@negDuty^0,c
  1079                           
  1080                           ;dc_motor.c: 76:     }
  1081   0000B2  EF7E  F000         	goto	l2261
  1082   0000B6                     l2257:
  1083                           
  1084                           ;dc_motor.c: 78:         posDuty=0;
  1085   0000B6  0E00               	movlw	0
  1086   0000B8  6E12               	movwf	setMotorPWM@posDuty^0,c
  1087   0000BA                     
  1088                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  1089   0000BA  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  1090   0000BE  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  1091   0000C2  50DF               	movf	indf2,w,c
  1092   0000C4  6E10               	movwf	??_setMotorPWM^0,c
  1093   0000C6  5010               	movf	??_setMotorPWM^0,w,c
  1094   0000C8  6E01               	movwf	___wmul@multiplier^0,c
  1095   0000CA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1096   0000CC  EE20 F003          	lfsr	2,3
  1097   0000D0  500E               	movf	setMotorPWM@m^0,w,c
  1098   0000D2  26D9               	addwf	fsr2l,f,c
  1099   0000D4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1100   0000D6  22DA               	addwfc	fsr2h,f,c
  1101   0000D8  CFDE F003          	movff	postinc2,___wmul@multiplicand
  1102   0000DC  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  1103   0000E0  EC52  F005         	call	___wmul	;wreg free
  1104   0000E4  C001  F007         	movff	?___wmul,___lwdiv@dividend
  1105   0000E8  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  1106   0000EC  0E00               	movlw	0
  1107   0000EE  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  1108   0000F0  0E64               	movlw	100
  1109   0000F2  6E09               	movwf	___lwdiv@divisor^0,c
  1110   0000F4  EC80  F003         	call	___lwdiv	;wreg free
  1111   0000F8  5007               	movf	?___lwdiv^0,w,c
  1112   0000FA  6E13               	movwf	setMotorPWM@negDuty^0,c
  1113   0000FC                     l2261:
  1114                           
  1115                           ;dc_motor.c: 82:     if (m->direction) {
  1116   0000FC  EE20 F001          	lfsr	2,1
  1117   000100  500E               	movf	setMotorPWM@m^0,w,c
  1118   000102  26D9               	addwf	fsr2l,f,c
  1119   000104  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1120   000106  22DA               	addwfc	fsr2h,f,c
  1121   000108  50DF               	movf	indf2,w,c
  1122   00010A  B4D8               	btfsc	status,2,c
  1123   00010C  EF8A  F000         	goto	u1231
  1124   000110  EF8C  F000         	goto	u1230
  1125   000114                     u1231:
  1126   000114  EFAE  F000         	goto	l2265
  1127   000118                     u1230:
  1128   000118                     
  1129                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  1130   000118  EE20 F005          	lfsr	2,5
  1131   00011C  500E               	movf	setMotorPWM@m^0,w,c
  1132   00011E  26D9               	addwf	fsr2l,f,c
  1133   000120  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1134   000122  22DA               	addwfc	fsr2h,f,c
  1135   000124  CFDE F010          	movff	postinc2,??_setMotorPWM
  1136   000128  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1137   00012C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1138   000130  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1139   000134  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1140                           
  1141                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  1142   000138  EE20 F007          	lfsr	2,7
  1143   00013C  500E               	movf	setMotorPWM@m^0,w,c
  1144   00013E  26D9               	addwf	fsr2l,f,c
  1145   000140  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1146   000142  22DA               	addwfc	fsr2h,f,c
  1147   000144  CFDE F010          	movff	postinc2,??_setMotorPWM
  1148   000148  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1149   00014C  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1150   000150  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1151   000154  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1152                           
  1153                           ;dc_motor.c: 85:     } else {
  1154   000158  EFCE  F000         	goto	l213
  1155   00015C                     l2265:
  1156                           
  1157                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  1158   00015C  EE20 F005          	lfsr	2,5
  1159   000160  500E               	movf	setMotorPWM@m^0,w,c
  1160   000162  26D9               	addwf	fsr2l,f,c
  1161   000164  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1162   000166  22DA               	addwfc	fsr2h,f,c
  1163   000168  CFDE F010          	movff	postinc2,??_setMotorPWM
  1164   00016C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1165   000170  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1166   000174  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1167   000178  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  1168                           
  1169                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  1170   00017C  EE20 F007          	lfsr	2,7
  1171   000180  500E               	movf	setMotorPWM@m^0,w,c
  1172   000182  26D9               	addwf	fsr2l,f,c
  1173   000184  500F               	movf	(setMotorPWM@m+1)^0,w,c
  1174   000186  22DA               	addwfc	fsr2h,f,c
  1175   000188  CFDE F010          	movff	postinc2,??_setMotorPWM
  1176   00018C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  1177   000190  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  1178   000194  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  1179   000198  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  1180   00019C                     l213:
  1181   00019C  0012               	return		;funcret
  1182   00019E                     __end_of_setMotorPWM:
  1183                           	callstack 0
  1184                           
  1185 ;; *************** function ___wmul *****************
  1186 ;; Defined at:
  1187 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  multiplier      2    0[COMRAM] unsigned int 
  1190 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  product         2    4[COMRAM] unsigned int 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  2    0[COMRAM] unsigned int 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, prodl, prodh
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1202 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1203 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1205 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1206 ;;Total ram usage:        6 bytes
  1207 ;; Hardware stack levels used: 1
  1208 ;; Hardware stack levels required when called: 2
  1209 ;; This function calls:
  1210 ;;		Nothing
  1211 ;; This function is called by:
  1212 ;;		_setMotorPWM
  1213 ;;		_get_color_distance
  1214 ;;		_get_color_code
  1215 ;;		_get_wall_presence
  1216 ;; This function uses a non-reentrant model
  1217 ;;
  1218                           
  1219                           	psect	text4
  1220   000AA4                     __ptext4:
  1221                           	callstack 0
  1222   000AA4                     ___wmul:
  1223                           	callstack 26
  1224   000AA4  5001               	movf	___wmul@multiplier^0,w,c
  1225   000AA6  0203               	mulwf	___wmul@multiplicand^0,c
  1226   000AA8  CFF3 F005          	movff	prodl,___wmul@product
  1227   000AAC  CFF4 F006          	movff	prodh,___wmul@product+1
  1228   000AB0  5001               	movf	___wmul@multiplier^0,w,c
  1229   000AB2  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1230   000AB4  50F3               	movf	243,w,c
  1231   000AB6  2606               	addwf	(___wmul@product+1)^0,f,c
  1232   000AB8  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1233   000ABA  0203               	mulwf	___wmul@multiplicand^0,c
  1234   000ABC  50F3               	movf	243,w,c
  1235   000ABE  2606               	addwf	(___wmul@product+1)^0,f,c
  1236   000AC0  C005  F001         	movff	___wmul@product,?___wmul
  1237   000AC4  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1238   000AC8  0012               	return		;funcret
  1239   000ACA                     __end_of___wmul:
  1240                           	callstack 0
  1241                           
  1242 ;; *************** function _initDCmotorsPWM *****************
  1243 ;; Defined at:
  1244 ;;		line 9 in file "dc_motor.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  PWMperiod       2    0[COMRAM] int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  1    wreg      void 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels used: 1
  1264 ;; Hardware stack levels required when called: 2
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_main
  1269 ;; This function uses a non-reentrant model
  1270 ;;
  1271                           
  1272                           	psect	text5
  1273   000670                     __ptext5:
  1274                           	callstack 0
  1275   000670                     _initDCmotorsPWM:
  1276                           	callstack 28
  1277   000670                     
  1278                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1279   000670  9485               	bcf	133,2,c	;volatile
  1280                           
  1281                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1282   000672  9E83               	bcf	131,7,c	;volatile
  1283                           
  1284                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1285   000674  9C87               	bcf	135,6,c	;volatile
  1286                           
  1287                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1288   000676  9885               	bcf	133,4,c	;volatile
  1289                           
  1290                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1291   000678  947D               	bcf	125,2,c	;volatile
  1292                           
  1293                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1294   00067A  9E7B               	bcf	123,7,c	;volatile
  1295                           
  1296                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1297   00067C  9C7F               	bcf	127,6,c	;volatile
  1298                           
  1299                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1300   00067E  987D               	bcf	125,4,c	;volatile
  1301   000680                     
  1302                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1303   000680  0E05               	movlw	5
  1304   000682  010E               	movlb	14	; () banked
  1305   000684  6F74               	movwf	116,b	;volatile
  1306                           
  1307                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1308   000686  0E06               	movlw	6
  1309   000688  6F76               	movwf	118,b	;volatile
  1310                           
  1311                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1312   00068A  0E07               	movlw	7
  1313   00068C  6F69               	movwf	105,b	;volatile
  1314                           
  1315                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1316   00068E  0E08               	movlw	8
  1317   000690  6F88               	movwf	136,b	;volatile
  1318                           
  1319                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1320   000692  50BD               	movf	189,w,c	;volatile
  1321   000694  0B8F               	andlw	-113
  1322   000696  0940               	iorlw	64
  1323   000698  6EBD               	movwf	189,c	;volatile
  1324                           
  1325                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1326   00069A  0EE0               	movlw	-32
  1327   00069C  16BE               	andwf	190,f,c	;volatile
  1328                           
  1329                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1330   00069E  50BF               	movf	191,w,c	;volatile
  1331   0006A0  0BF0               	andlw	-16
  1332   0006A2  0901               	iorlw	1
  1333   0006A4  6EBF               	movwf	191,c	;volatile
  1334                           
  1335                           ;dc_motor.c: 34:     T2PR=99;
  1336   0006A6  0E63               	movlw	99
  1337   0006A8  6EBC               	movwf	188,c	;volatile
  1338   0006AA                     
  1339                           ; BSR set to: 14
  1340                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1341   0006AA  8EBD               	bsf	189,7,c	;volatile
  1342                           
  1343                           ;dc_motor.c: 39:     CCPR1H=0;
  1344   0006AC  0E00               	movlw	0
  1345   0006AE  6EAA               	movwf	170,c	;volatile
  1346                           
  1347                           ;dc_motor.c: 40:     CCPR2H=0;
  1348   0006B0  0E00               	movlw	0
  1349   0006B2  6EA6               	movwf	166,c	;volatile
  1350                           
  1351                           ;dc_motor.c: 41:     CCPR3H=0;
  1352   0006B4  0E00               	movlw	0
  1353   0006B6  010F               	movlb	15	; () banked
  1354   0006B8  6F25               	movwf	37,b	;volatile
  1355                           
  1356                           ;dc_motor.c: 42:     CCPR4H=0;
  1357   0006BA  0E00               	movlw	0
  1358   0006BC  6F21               	movwf	33,b	;volatile
  1359                           
  1360                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1361   0006BE  0EFC               	movlw	-4
  1362   0006C0  16AD               	andwf	173,f,c	;volatile
  1363                           
  1364                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1365   0006C2  0EF3               	movlw	-13
  1366   0006C4  16AD               	andwf	173,f,c	;volatile
  1367                           
  1368                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1369   0006C6  0ECF               	movlw	-49
  1370   0006C8  16AD               	andwf	173,f,c	;volatile
  1371                           
  1372                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1373   0006CA  0E3F               	movlw	-193
  1374   0006CC  16AD               	andwf	173,f,c	;volatile
  1375   0006CE                     
  1376                           ; BSR set to: 15
  1377                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1378   0006CE  88AB               	bsf	171,4,c	;volatile
  1379                           
  1380                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1381   0006D0  50AB               	movf	171,w,c	;volatile
  1382   0006D2  0BF0               	andlw	-16
  1383   0006D4  090C               	iorlw	12
  1384   0006D6  6EAB               	movwf	171,c	;volatile
  1385   0006D8                     
  1386                           ; BSR set to: 15
  1387                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1388   0006D8  8EAB               	bsf	171,7,c	;volatile
  1389   0006DA                     
  1390                           ; BSR set to: 15
  1391                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1392   0006DA  88A7               	bsf	167,4,c	;volatile
  1393                           
  1394                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1395   0006DC  50A7               	movf	167,w,c	;volatile
  1396   0006DE  0BF0               	andlw	-16
  1397   0006E0  090C               	iorlw	12
  1398   0006E2  6EA7               	movwf	167,c	;volatile
  1399   0006E4                     
  1400                           ; BSR set to: 15
  1401                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1402   0006E4  8EA7               	bsf	167,7,c	;volatile
  1403   0006E6                     
  1404                           ; BSR set to: 15
  1405                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1406   0006E6  8926               	bsf	38,4,b	;volatile
  1407                           
  1408                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1409   0006E8  5126               	movf	38,w,b	;volatile
  1410   0006EA  0BF0               	andlw	-16
  1411   0006EC  090C               	iorlw	12
  1412   0006EE  6F26               	movwf	38,b	;volatile
  1413   0006F0                     
  1414                           ; BSR set to: 15
  1415                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1416   0006F0  8F26               	bsf	38,7,b	;volatile
  1417   0006F2                     
  1418                           ; BSR set to: 15
  1419                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1420   0006F2  8922               	bsf	34,4,b	;volatile
  1421                           
  1422                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1423   0006F4  5122               	movf	34,w,b	;volatile
  1424   0006F6  0BF0               	andlw	-16
  1425   0006F8  090C               	iorlw	12
  1426   0006FA  6F22               	movwf	34,b	;volatile
  1427   0006FC                     
  1428                           ; BSR set to: 15
  1429                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1430   0006FC  8F22               	bsf	34,7,b	;volatile
  1431   0006FE                     
  1432                           ; BSR set to: 15
  1433   0006FE  0012               	return		;funcret
  1434   000700                     __end_of_initDCmotorsPWM:
  1435                           	callstack 0
  1436                           
  1437 ;; *************** function _color_click_init *****************
  1438 ;; Defined at:
  1439 ;;		line 30 in file "color.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1455 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1456 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;Total ram usage:        1 bytes
  1458 ;; Hardware stack levels used: 1
  1459 ;; Hardware stack levels required when called: 6
  1460 ;; This function calls:
  1461 ;;		_I2C_2_Master_Init
  1462 ;;		_calibrate_black
  1463 ;;		_calibrate_white
  1464 ;;		_color_writetoaddr
  1465 ;; This function is called by:
  1466 ;;		_main
  1467 ;; This function uses a non-reentrant model
  1468 ;;
  1469                           
  1470                           	psect	text6
  1471   00019E                     __ptext6:
  1472                           	callstack 0
  1473   00019E                     _color_click_init:
  1474                           	callstack 24
  1475   00019E                     
  1476                           ;color.c: 33:     I2C_2_Master_Init();
  1477   00019E  EC29  F005         	call	_I2C_2_Master_Init	;wreg free
  1478   0001A2                     
  1479                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  1480   0001A2  0E01               	movlw	1
  1481   0001A4  6E03               	movwf	color_writetoaddr@value^0,c
  1482   0001A6  0E00               	movlw	0
  1483   0001A8  EC65  F005         	call	_color_writetoaddr
  1484   0001AC                     
  1485                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  1486   0001AC  0E3F               	movlw	63
  1487   0001AE  6E16               	movwf	??_color_click_init^0,c
  1488   0001B0  0E55               	movlw	85
  1489   0001B2                     u2307:
  1490   0001B2  2EE8               	decfsz	wreg,f,c
  1491   0001B4  D7FE               	bra	u2307
  1492   0001B6  2E16               	decfsz	??_color_click_init^0,f,c
  1493   0001B8  D7FC               	bra	u2307
  1494   0001BA  F000               	nop	
  1495   0001BC                     
  1496                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  1497   0001BC  0E03               	movlw	3
  1498   0001BE  6E03               	movwf	color_writetoaddr@value^0,c
  1499   0001C0  0E00               	movlw	0
  1500   0001C2  EC65  F005         	call	_color_writetoaddr
  1501   0001C6                     
  1502                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  1503   0001C6  0ED5               	movlw	213
  1504   0001C8  6E03               	movwf	color_writetoaddr@value^0,c
  1505   0001CA  0E01               	movlw	1
  1506   0001CC  EC65  F005         	call	_color_writetoaddr
  1507   0001D0                     
  1508                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  1509   0001D0  9E86               	bcf	134,7,c	;volatile
  1510   0001D2                     
  1511                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  1512   0001D2  9287               	bcf	135,1,c	;volatile
  1513   0001D4                     
  1514                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  1515   0001D4  9881               	bcf	129,4,c	;volatile
  1516   0001D6                     
  1517                           ;color.c: 49:     Color_rules[0] = Red_rule;
  1518   0001D6  EE20  F0B4         	lfsr	2,_Red_rule
  1519   0001DA  EE11  F000         	lfsr	1,_Color_rules
  1520   0001DE  0E0B               	movlw	11
  1521   0001E0                     u1241:
  1522   0001E0  CFDB FFE3          	movff	plusw2,plusw1
  1523   0001E4  06E8               	decf	wreg,f,c
  1524   0001E6  E2FC               	bc	u1241
  1525   0001E8                     
  1526                           ;color.c: 50:     Color_rules[1] = Green_rule;
  1527   0001E8  EE20  F0A8         	lfsr	2,_Green_rule
  1528   0001EC  EE11  F00C         	lfsr	1,_Color_rules+12
  1529   0001F0  0E0B               	movlw	11
  1530   0001F2                     u1251:
  1531   0001F2  CFDB FFE3          	movff	plusw2,plusw1
  1532   0001F6  06E8               	decf	wreg,f,c
  1533   0001F8  E2FC               	bc	u1251
  1534   0001FA                     
  1535                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  1536   0001FA  EE20  F09C         	lfsr	2,_Blue_rule
  1537   0001FE  EE11  F018         	lfsr	1,_Color_rules+24
  1538   000202  0E0B               	movlw	11
  1539   000204                     u1261:
  1540   000204  CFDB FFE3          	movff	plusw2,plusw1
  1541   000208  06E8               	decf	wreg,f,c
  1542   00020A  E2FC               	bc	u1261
  1543   00020C                     
  1544                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  1545   00020C  EE20  F090         	lfsr	2,_Yellow_rule
  1546   000210  EE11  F024         	lfsr	1,_Color_rules+36
  1547   000214  0E0B               	movlw	11
  1548   000216                     u1271:
  1549   000216  CFDB FFE3          	movff	plusw2,plusw1
  1550   00021A  06E8               	decf	wreg,f,c
  1551   00021C  E2FC               	bc	u1271
  1552   00021E                     
  1553                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  1554   00021E  EE20  F084         	lfsr	2,_Pink_rule
  1555   000222  EE11  F030         	lfsr	1,_Color_rules+48
  1556   000226  0E0B               	movlw	11
  1557   000228                     u1281:
  1558   000228  CFDB FFE3          	movff	plusw2,plusw1
  1559   00022C  06E8               	decf	wreg,f,c
  1560   00022E  E2FC               	bc	u1281
  1561   000230                     
  1562                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  1563   000230  EE20  F078         	lfsr	2,_Orange_rule
  1564   000234  EE11  F03C         	lfsr	1,_Color_rules+60
  1565   000238  0E0B               	movlw	11
  1566   00023A                     u1291:
  1567   00023A  CFDB FFE3          	movff	plusw2,plusw1
  1568   00023E  06E8               	decf	wreg,f,c
  1569   000240  E2FC               	bc	u1291
  1570   000242                     
  1571                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  1572   000242  EE20  F06C         	lfsr	2,_Lightblue_rule
  1573   000246  EE11  F048         	lfsr	1,_Color_rules+72
  1574   00024A  0E0B               	movlw	11
  1575   00024C                     u1301:
  1576   00024C  CFDB FFE3          	movff	plusw2,plusw1
  1577   000250  06E8               	decf	wreg,f,c
  1578   000252  E2FC               	bc	u1301
  1579   000254                     
  1580                           ;color.c: 56:     Color_rules[7] = White_rule;
  1581   000254  EE20  F060         	lfsr	2,_White_rule
  1582   000258  EE11  F054         	lfsr	1,_Color_rules+84
  1583   00025C  0E0B               	movlw	11
  1584   00025E                     u1311:
  1585   00025E  CFDB FFE3          	movff	plusw2,plusw1
  1586   000262  06E8               	decf	wreg,f,c
  1587   000264  E2FC               	bc	u1311
  1588   000266                     
  1589                           ;color.c: 57:     Color_rules[8] = Black_rule;
  1590   000266  EE20  F0C0         	lfsr	2,_Black_rule
  1591   00026A  EE11  F060         	lfsr	1,_Color_rules+96
  1592   00026E  0E0B               	movlw	11
  1593   000270                     u1321:
  1594   000270  CFDB FFE3          	movff	plusw2,plusw1
  1595   000274  06E8               	decf	wreg,f,c
  1596   000276  E2FC               	bc	u1321
  1597   000278                     
  1598                           ;color.c: 66:     TRISFbits.TRISF3=1;
  1599   000278  8686               	bsf	134,3,c	;volatile
  1600   00027A                     
  1601                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  1602   00027A  010E               	movlb	14	; () banked
  1603   00027C  97B4               	bcf	180,3,b	;volatile
  1604   00027E                     
  1605                           ; BSR set to: 14
  1606                           ;color.c: 68:     TRISFbits.TRISF2=1;
  1607   00027E  8486               	bsf	134,2,c	;volatile
  1608   000280                     
  1609                           ; BSR set to: 14
  1610                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  1611   000280  95B4               	bcf	180,2,b	;volatile
  1612   000282                     l67:
  1613   000282  A68E               	btfss	142,3,c	;volatile
  1614   000284  EF46  F001         	goto	u1331
  1615   000288  EF48  F001         	goto	u1330
  1616   00028C                     u1331:
  1617   00028C  EF4F  F001         	goto	l71
  1618   000290                     u1330:
  1619   000290  B48E               	btfsc	142,2,c	;volatile
  1620   000292  EF4D  F001         	goto	u1341
  1621   000296  EF4F  F001         	goto	u1340
  1622   00029A                     u1341:
  1623   00029A  EF41  F001         	goto	l67
  1624   00029E                     u1340:
  1625   00029E                     l71:
  1626                           
  1627                           ;color.c: 72:     if(!PORTFbits.RF2){
  1628   00029E  B48E               	btfsc	142,2,c	;volatile
  1629   0002A0  EF54  F001         	goto	u1351
  1630   0002A4  EF56  F001         	goto	u1350
  1631   0002A8                     u1351:
  1632   0002A8  EF58  F001         	goto	l2313
  1633   0002AC                     u1350:
  1634   0002AC  EF6A  F001         	goto	l73
  1635   0002B0                     l2313:
  1636                           
  1637                           ;color.c: 75:     calibrate_white();
  1638   0002B0  EC9B  F002         	call	_calibrate_white	;wreg free
  1639   0002B4                     l74:
  1640   0002B4  B68E               	btfsc	142,3,c	;volatile
  1641   0002B6  EF5F  F001         	goto	u1361
  1642   0002BA  EF61  F001         	goto	u1360
  1643   0002BE                     u1361:
  1644   0002BE  EF5A  F001         	goto	l74
  1645   0002C2                     u1360:
  1646   0002C2                     
  1647                           ;color.c: 77:     calibrate_black();
  1648   0002C2  EC6B  F001         	call	_calibrate_black	;wreg free
  1649   0002C6                     l77:
  1650   0002C6  B68E               	btfsc	142,3,c	;volatile
  1651   0002C8  EF68  F001         	goto	u1371
  1652   0002CC  EF6A  F001         	goto	u1370
  1653   0002D0                     u1371:
  1654   0002D0  EF63  F001         	goto	l77
  1655   0002D4                     u1370:
  1656   0002D4                     l73:
  1657   0002D4  0012               	return		;funcret
  1658   0002D6                     __end_of_color_click_init:
  1659                           	callstack 0
  1660                           
  1661 ;; *************** function _color_writetoaddr *****************
  1662 ;; Defined at:
  1663 ;;		line 82 in file "color.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  address         1    wreg     unsigned char 
  1666 ;;  value           1    2[COMRAM] unsigned char 
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;  address         1    3[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      void 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1678 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1679 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1681 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1682 ;;Total ram usage:        2 bytes
  1683 ;; Hardware stack levels used: 1
  1684 ;; Hardware stack levels required when called: 4
  1685 ;; This function calls:
  1686 ;;		_I2C_2_Master_Start
  1687 ;;		_I2C_2_Master_Stop
  1688 ;;		_I2C_2_Master_Write
  1689 ;; This function is called by:
  1690 ;;		_color_click_init
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text7
  1695   000ACA                     __ptext7:
  1696                           	callstack 0
  1697   000ACA                     _color_writetoaddr:
  1698                           	callstack 25
  1699                           
  1700                           ;incstack = 0
  1701                           ;color_writetoaddr@address stored from wreg
  1702   000ACA  6E04               	movwf	color_writetoaddr@address^0,c
  1703   000ACC                     
  1704                           ;color.c: 83:     I2C_2_Master_Start();
  1705   000ACC  ECA4  F005         	call	_I2C_2_Master_Start	;wreg free
  1706                           
  1707                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  1708   000AD0  0E52               	movlw	82
  1709   000AD2  EC93  F005         	call	_I2C_2_Master_Write
  1710                           
  1711                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  1712   000AD6  5004               	movf	color_writetoaddr@address^0,w,c
  1713   000AD8  0980               	iorlw	128
  1714   000ADA  EC93  F005         	call	_I2C_2_Master_Write
  1715                           
  1716                           ;color.c: 86:     I2C_2_Master_Write(value);
  1717   000ADE  5003               	movf	color_writetoaddr@value^0,w,c
  1718   000AE0  EC93  F005         	call	_I2C_2_Master_Write
  1719                           
  1720                           ;color.c: 87:     I2C_2_Master_Stop();
  1721   000AE4  EC9F  F005         	call	_I2C_2_Master_Stop	;wreg free
  1722   000AE8  0012               	return		;funcret
  1723   000AEA                     __end_of_color_writetoaddr:
  1724                           	callstack 0
  1725                           
  1726 ;; *************** function _calibrate_white *****************
  1727 ;; Defined at:
  1728 ;;		line 229 in file "color.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;		None
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, status,2, status,0, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1746 ;;Total ram usage:        2 bytes
  1747 ;; Hardware stack levels used: 1
  1748 ;; Hardware stack levels required when called: 5
  1749 ;; This function calls:
  1750 ;;		_color_read_Blue
  1751 ;;		_color_read_Green
  1752 ;;		_color_read_Red
  1753 ;;		_set_led_color
  1754 ;; This function is called by:
  1755 ;;		_color_click_init
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text8
  1760   000536                     __ptext8:
  1761                           	callstack 0
  1762   000536                     _calibrate_white:
  1763                           	callstack 24
  1764   000536                     
  1765                           ;color.c: 230:     set_led_color(0b100);
  1766   000536  0E00               	movlw	0
  1767   000538  6E02               	movwf	(set_led_color@color+1)^0,c
  1768   00053A  0E04               	movlw	4
  1769   00053C  6E01               	movwf	set_led_color@color^0,c
  1770   00053E  ECE6  F004         	call	_set_led_color	;wreg free
  1771   000542                     
  1772                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1773   000542  0E12               	movlw	18
  1774   000544  6E0D               	movwf	(??_calibrate_white+1)^0,c
  1775   000546  0EDC               	movlw	220
  1776   000548  6E0C               	movwf	??_calibrate_white^0,c
  1777   00054A  0E60               	movlw	96
  1778   00054C                     u2317:
  1779   00054C  2EE8               	decfsz	wreg,f,c
  1780   00054E  D7FE               	bra	u2317
  1781   000550  2E0C               	decfsz	??_calibrate_white^0,f,c
  1782   000552  D7FC               	bra	u2317
  1783   000554  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  1784   000556  D7FA               	bra	u2317
  1785   000558                     
  1786                           ;color.c: 232:     White_setup.R = color_read_Red();
  1787   000558  EC21  F004         	call	_color_read_Red	;wreg free
  1788   00055C  C005  F03A         	movff	?_color_read_Red,_White_setup
  1789   000560  C006  F03B         	movff	?_color_read_Red+1,_White_setup+1
  1790   000564  6A3C               	clrf	(_White_setup+2)^0,c
  1791   000566  6A3D               	clrf	(_White_setup+3)^0,c
  1792   000568                     
  1793                           ;color.c: 233:     set_led_color(0b010);
  1794   000568  0E00               	movlw	0
  1795   00056A  6E02               	movwf	(set_led_color@color+1)^0,c
  1796   00056C  0E02               	movlw	2
  1797   00056E  6E01               	movwf	set_led_color@color^0,c
  1798   000570  ECE6  F004         	call	_set_led_color	;wreg free
  1799   000574                     
  1800                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1801   000574  0E12               	movlw	18
  1802   000576  6E0D               	movwf	(??_calibrate_white+1)^0,c
  1803   000578  0EDC               	movlw	220
  1804   00057A  6E0C               	movwf	??_calibrate_white^0,c
  1805   00057C  0E60               	movlw	96
  1806   00057E                     u2327:
  1807   00057E  2EE8               	decfsz	wreg,f,c
  1808   000580  D7FE               	bra	u2327
  1809   000582  2E0C               	decfsz	??_calibrate_white^0,f,c
  1810   000584  D7FC               	bra	u2327
  1811   000586  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  1812   000588  D7FA               	bra	u2327
  1813                           
  1814                           ;color.c: 235:     White_setup.G = color_read_Green();
  1815   00058A  EC49  F004         	call	_color_read_Green	;wreg free
  1816   00058E  C005  F03E         	movff	?_color_read_Green,_White_setup+4
  1817   000592  C006  F03F         	movff	?_color_read_Green+1,_White_setup+5
  1818   000596  6A40               	clrf	(_White_setup+6)^0,c
  1819   000598  6A41               	clrf	(_White_setup+7)^0,c
  1820   00059A                     
  1821                           ;color.c: 236:     set_led_color(0b001);
  1822   00059A  0E00               	movlw	0
  1823   00059C  6E02               	movwf	(set_led_color@color+1)^0,c
  1824   00059E  0E01               	movlw	1
  1825   0005A0  6E01               	movwf	set_led_color@color^0,c
  1826   0005A2  ECE6  F004         	call	_set_led_color	;wreg free
  1827   0005A6                     
  1828                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1829   0005A6  0E12               	movlw	18
  1830   0005A8  6E0D               	movwf	(??_calibrate_white+1)^0,c
  1831   0005AA  0EDC               	movlw	220
  1832   0005AC  6E0C               	movwf	??_calibrate_white^0,c
  1833   0005AE  0E60               	movlw	96
  1834   0005B0                     u2337:
  1835   0005B0  2EE8               	decfsz	wreg,f,c
  1836   0005B2  D7FE               	bra	u2337
  1837   0005B4  2E0C               	decfsz	??_calibrate_white^0,f,c
  1838   0005B6  D7FC               	bra	u2337
  1839   0005B8  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  1840   0005BA  D7FA               	bra	u2337
  1841   0005BC                     
  1842                           ;color.c: 238:     White_setup.B = color_read_Blue();
  1843   0005BC  EC99  F004         	call	_color_read_Blue	;wreg free
  1844   0005C0  C005  F042         	movff	?_color_read_Blue,_White_setup+8
  1845   0005C4  C006  F043         	movff	?_color_read_Blue+1,_White_setup+9
  1846   0005C8  6A44               	clrf	(_White_setup+10)^0,c
  1847   0005CA  6A45               	clrf	(_White_setup+11)^0,c
  1848   0005CC                     
  1849                           ;color.c: 239:     set_led_color(0b000);
  1850   0005CC  0E00               	movlw	0
  1851   0005CE  6E02               	movwf	(set_led_color@color+1)^0,c
  1852   0005D0  0E00               	movlw	0
  1853   0005D2  6E01               	movwf	set_led_color@color^0,c
  1854   0005D4  ECE6  F004         	call	_set_led_color	;wreg free
  1855   0005D8  0012               	return		;funcret
  1856   0005DA                     __end_of_calibrate_white:
  1857                           	callstack 0
  1858                           
  1859 ;; *************** function _calibrate_black *****************
  1860 ;; Defined at:
  1861 ;;		line 209 in file "color.c"
  1862 ;; Parameters:    Size  Location     Type
  1863 ;;		None
  1864 ;; Auto vars:     Size  Location     Type
  1865 ;;  clear2          2   17[COMRAM] unsigned int 
  1866 ;;  clear1          2   15[COMRAM] unsigned int 
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1880 ;;Total ram usage:        8 bytes
  1881 ;; Hardware stack levels used: 1
  1882 ;; Hardware stack levels required when called: 5
  1883 ;; This function calls:
  1884 ;;		___lwdiv
  1885 ;;		_color_read_Blue
  1886 ;;		_color_read_Clear
  1887 ;;		_color_read_Green
  1888 ;;		_color_read_Red
  1889 ;;		_set_led_color
  1890 ;; This function is called by:
  1891 ;;		_color_click_init
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text9
  1896   0002D6                     __ptext9:
  1897                           	callstack 0
  1898   0002D6                     _calibrate_black:
  1899                           	callstack 24
  1900   0002D6                     
  1901                           ;color.c: 210:     set_led_color(0b100);
  1902   0002D6  0E00               	movlw	0
  1903   0002D8  6E02               	movwf	(set_led_color@color+1)^0,c
  1904   0002DA  0E04               	movlw	4
  1905   0002DC  6E01               	movwf	set_led_color@color^0,c
  1906   0002DE  ECE6  F004         	call	_set_led_color	;wreg free
  1907   0002E2                     
  1908                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1909   0002E2  0E12               	movlw	18
  1910   0002E4  6E0F               	movwf	(??_calibrate_black+1)^0,c
  1911   0002E6  0EDC               	movlw	220
  1912   0002E8  6E0E               	movwf	??_calibrate_black^0,c
  1913   0002EA  0E60               	movlw	96
  1914   0002EC                     u2347:
  1915   0002EC  2EE8               	decfsz	wreg,f,c
  1916   0002EE  D7FE               	bra	u2347
  1917   0002F0  2E0E               	decfsz	??_calibrate_black^0,f,c
  1918   0002F2  D7FC               	bra	u2347
  1919   0002F4  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  1920   0002F6  D7FA               	bra	u2347
  1921   0002F8                     
  1922                           ;color.c: 212:     Black_setup.R = color_read_Red();
  1923   0002F8  EC21  F004         	call	_color_read_Red	;wreg free
  1924   0002FC  C005  F02E         	movff	?_color_read_Red,_Black_setup
  1925   000300  C006  F02F         	movff	?_color_read_Red+1,_Black_setup+1
  1926   000304  6A30               	clrf	(_Black_setup+2)^0,c
  1927   000306  6A31               	clrf	(_Black_setup+3)^0,c
  1928   000308                     
  1929                           ;color.c: 213:     set_led_color(0b010);
  1930   000308  0E00               	movlw	0
  1931   00030A  6E02               	movwf	(set_led_color@color+1)^0,c
  1932   00030C  0E02               	movlw	2
  1933   00030E  6E01               	movwf	set_led_color@color^0,c
  1934   000310  ECE6  F004         	call	_set_led_color	;wreg free
  1935   000314                     
  1936                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1937   000314  0E12               	movlw	18
  1938   000316  6E0F               	movwf	(??_calibrate_black+1)^0,c
  1939   000318  0EDC               	movlw	220
  1940   00031A  6E0E               	movwf	??_calibrate_black^0,c
  1941   00031C  0E60               	movlw	96
  1942   00031E                     u2357:
  1943   00031E  2EE8               	decfsz	wreg,f,c
  1944   000320  D7FE               	bra	u2357
  1945   000322  2E0E               	decfsz	??_calibrate_black^0,f,c
  1946   000324  D7FC               	bra	u2357
  1947   000326  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  1948   000328  D7FA               	bra	u2357
  1949                           
  1950                           ;color.c: 215:     Black_setup.G = color_read_Green();
  1951   00032A  EC49  F004         	call	_color_read_Green	;wreg free
  1952   00032E  C005  F032         	movff	?_color_read_Green,_Black_setup+4
  1953   000332  C006  F033         	movff	?_color_read_Green+1,_Black_setup+5
  1954   000336  6A34               	clrf	(_Black_setup+6)^0,c
  1955   000338  6A35               	clrf	(_Black_setup+7)^0,c
  1956   00033A                     
  1957                           ;color.c: 216:     set_led_color(0b001);
  1958   00033A  0E00               	movlw	0
  1959   00033C  6E02               	movwf	(set_led_color@color+1)^0,c
  1960   00033E  0E01               	movlw	1
  1961   000340  6E01               	movwf	set_led_color@color^0,c
  1962   000342  ECE6  F004         	call	_set_led_color	;wreg free
  1963   000346                     
  1964                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1965   000346  0E12               	movlw	18
  1966   000348  6E0F               	movwf	(??_calibrate_black+1)^0,c
  1967   00034A  0EDC               	movlw	220
  1968   00034C  6E0E               	movwf	??_calibrate_black^0,c
  1969   00034E  0E60               	movlw	96
  1970   000350                     u2367:
  1971   000350  2EE8               	decfsz	wreg,f,c
  1972   000352  D7FE               	bra	u2367
  1973   000354  2E0E               	decfsz	??_calibrate_black^0,f,c
  1974   000356  D7FC               	bra	u2367
  1975   000358  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  1976   00035A  D7FA               	bra	u2367
  1977   00035C                     
  1978                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  1979   00035C  EC99  F004         	call	_color_read_Blue	;wreg free
  1980   000360  C005  F036         	movff	?_color_read_Blue,_Black_setup+8
  1981   000364  C006  F037         	movff	?_color_read_Blue+1,_Black_setup+9
  1982   000368  6A38               	clrf	(_Black_setup+10)^0,c
  1983   00036A  6A39               	clrf	(_Black_setup+11)^0,c
  1984   00036C                     
  1985                           ;color.c: 219:     set_led_color(0b000);
  1986   00036C  0E00               	movlw	0
  1987   00036E  6E02               	movwf	(set_led_color@color+1)^0,c
  1988   000370  0E00               	movlw	0
  1989   000372  6E01               	movwf	set_led_color@color^0,c
  1990   000374  ECE6  F004         	call	_set_led_color	;wreg free
  1991                           
  1992                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1993   000378  0E12               	movlw	18
  1994   00037A  6E0F               	movwf	(??_calibrate_black+1)^0,c
  1995   00037C  0EDC               	movlw	220
  1996   00037E  6E0E               	movwf	??_calibrate_black^0,c
  1997   000380  0E60               	movlw	96
  1998   000382                     u2377:
  1999   000382  2EE8               	decfsz	wreg,f,c
  2000   000384  D7FE               	bra	u2377
  2001   000386  2E0E               	decfsz	??_calibrate_black^0,f,c
  2002   000388  D7FC               	bra	u2377
  2003   00038A  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2004   00038C  D7FA               	bra	u2377
  2005   00038E                     
  2006                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  2007   00038E  EC71  F004         	call	_color_read_Clear	;wreg free
  2008   000392  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  2009   000396  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  2010   00039A                     
  2011                           ;color.c: 222:     set_led_color(0b111);
  2012   00039A  0E00               	movlw	0
  2013   00039C  6E02               	movwf	(set_led_color@color+1)^0,c
  2014   00039E  0E07               	movlw	7
  2015   0003A0  6E01               	movwf	set_led_color@color^0,c
  2016   0003A2  ECE6  F004         	call	_set_led_color	;wreg free
  2017   0003A6                     
  2018                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2019   0003A6  0E12               	movlw	18
  2020   0003A8  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2021   0003AA  0EDC               	movlw	220
  2022   0003AC  6E0E               	movwf	??_calibrate_black^0,c
  2023   0003AE  0E60               	movlw	96
  2024   0003B0                     u2387:
  2025   0003B0  2EE8               	decfsz	wreg,f,c
  2026   0003B2  D7FE               	bra	u2387
  2027   0003B4  2E0E               	decfsz	??_calibrate_black^0,f,c
  2028   0003B6  D7FC               	bra	u2387
  2029   0003B8  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2030   0003BA  D7FA               	bra	u2387
  2031   0003BC                     
  2032                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  2033   0003BC  EC71  F004         	call	_color_read_Clear	;wreg free
  2034   0003C0  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  2035   0003C4  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  2036                           
  2037                           ;color.c: 225:     set_led_color(0b000);
  2038   0003C8  0E00               	movlw	0
  2039   0003CA  6E02               	movwf	(set_led_color@color+1)^0,c
  2040   0003CC  0E00               	movlw	0
  2041   0003CE  6E01               	movwf	set_led_color@color^0,c
  2042   0003D0  ECE6  F004         	call	_set_led_color	;wreg free
  2043   0003D4                     
  2044                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  2045   0003D4  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  2046   0003D8  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  2047   0003DC  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  2048   0003E0  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  2049   0003E4  EC80  F003         	call	___lwdiv	;wreg free
  2050   0003E8  C007  F014         	movff	?___lwdiv,_calibrate_black$2445
  2051   0003EC  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2445+1
  2052   0003F0                     
  2053                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  2054   0003F0  C014  F007         	movff	_calibrate_black$2445,___lwdiv@dividend
  2055   0003F4  C015  F008         	movff	_calibrate_black$2445+1,___lwdiv@dividend+1
  2056   0003F8  0E00               	movlw	0
  2057   0003FA  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  2058   0003FC  0E05               	movlw	5
  2059   0003FE  6E09               	movwf	___lwdiv@divisor^0,c
  2060   000400  EC80  F003         	call	___lwdiv	;wreg free
  2061   000404  C007  F048         	movff	?___lwdiv,_wall_coef
  2062   000408  C008  F049         	movff	?___lwdiv+1,_wall_coef+1
  2063   00040C  0012               	return		;funcret
  2064   00040E                     __end_of_calibrate_black:
  2065                           	callstack 0
  2066                           
  2067 ;; *************** function _set_led_color *****************
  2068 ;; Defined at:
  2069 ;;		line 154 in file "color.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  color           2    0[COMRAM] unsigned int 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		None
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2083 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2086 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2087 ;;Total ram usage:        2 bytes
  2088 ;; Hardware stack levels used: 1
  2089 ;; Hardware stack levels required when called: 2
  2090 ;; This function calls:
  2091 ;;		Nothing
  2092 ;; This function is called by:
  2093 ;;		_calibrate_black
  2094 ;;		_calibrate_white
  2095 ;;		_get_color_code
  2096 ;;		_get_wall_presence
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           	psect	text10
  2101   0009CC                     __ptext10:
  2102                           	callstack 0
  2103   0009CC                     _set_led_color:
  2104                           	callstack 26
  2105   0009CC                     
  2106                           ;color.c: 158:     if(color & 0b100){
  2107   0009CC  A401               	btfss	set_led_color@color^0,2,c
  2108   0009CE  EFEB  F004         	goto	u1161
  2109   0009D2  EFED  F004         	goto	u1160
  2110   0009D6                     u1161:
  2111   0009D6  EFF0  F004         	goto	l112
  2112   0009DA                     u1160:
  2113   0009DA                     
  2114                           ;color.c: 159:         LATGbits.LATG1 = 1;
  2115   0009DA  827F               	bsf	127,1,c	;volatile
  2116                           
  2117                           ;color.c: 160:     }else{
  2118   0009DC  EFF1  F004         	goto	l113
  2119   0009E0                     l112:
  2120                           
  2121                           ;color.c: 161:         LATGbits.LATG1 = 0;
  2122   0009E0  927F               	bcf	127,1,c	;volatile
  2123   0009E2                     l113:
  2124                           
  2125                           ;color.c: 163:     if(color & 0b010){
  2126   0009E2  A201               	btfss	set_led_color@color^0,1,c
  2127   0009E4  EFF6  F004         	goto	u1171
  2128   0009E8  EFF8  F004         	goto	u1170
  2129   0009EC                     u1171:
  2130   0009EC  EFFB  F004         	goto	l114
  2131   0009F0                     u1170:
  2132   0009F0                     
  2133                           ;color.c: 164:         LATAbits.LATA4 = 1;
  2134   0009F0  8879               	bsf	121,4,c	;volatile
  2135                           
  2136                           ;color.c: 165:     }else{
  2137   0009F2  EFFC  F004         	goto	l115
  2138   0009F6                     l114:
  2139                           
  2140                           ;color.c: 166:         LATAbits.LATA4 = 0;
  2141   0009F6  9879               	bcf	121,4,c	;volatile
  2142   0009F8                     l115:
  2143                           
  2144                           ;color.c: 168:     if(color & 0b001){
  2145   0009F8  A001               	btfss	set_led_color@color^0,0,c
  2146   0009FA  EF01  F005         	goto	u1181
  2147   0009FE  EF03  F005         	goto	u1180
  2148   000A02                     u1181:
  2149   000A02  EF06  F005         	goto	l116
  2150   000A06                     u1180:
  2151   000A06                     
  2152                           ;color.c: 169:         LATFbits.LATF7 = 1;
  2153   000A06  8E7E               	bsf	126,7,c	;volatile
  2154                           
  2155                           ;color.c: 170:     }else{
  2156   000A08  EF07  F005         	goto	l118
  2157   000A0C                     l116:
  2158                           
  2159                           ;color.c: 171:         LATFbits.LATF7 = 0;
  2160   000A0C  9E7E               	bcf	126,7,c	;volatile
  2161   000A0E                     l118:
  2162   000A0E  0012               	return		;funcret
  2163   000A10                     __end_of_set_led_color:
  2164                           	callstack 0
  2165                           
  2166 ;; *************** function _color_read_Red *****************
  2167 ;; Defined at:
  2168 ;;		line 90 in file "color.c"
  2169 ;; Parameters:    Size  Location     Type
  2170 ;;		None
  2171 ;; Auto vars:     Size  Location     Type
  2172 ;;  tmp             2    9[COMRAM] unsigned int 
  2173 ;; Return value:  Size  Location     Type
  2174 ;;                  2    4[COMRAM] unsigned int 
  2175 ;; Registers used:
  2176 ;;		wreg, status,2, status,0, cstack
  2177 ;; Tracked objects:
  2178 ;;		On entry : 0/0
  2179 ;;		On exit  : 0/0
  2180 ;;		Unchanged: 0/0
  2181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2182 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2183 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2185 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2186 ;;Total ram usage:        7 bytes
  2187 ;; Hardware stack levels used: 1
  2188 ;; Hardware stack levels required when called: 4
  2189 ;; This function calls:
  2190 ;;		_I2C_2_Master_Read
  2191 ;;		_I2C_2_Master_RepStart
  2192 ;;		_I2C_2_Master_Start
  2193 ;;		_I2C_2_Master_Stop
  2194 ;;		_I2C_2_Master_Write
  2195 ;; This function is called by:
  2196 ;;		_calibrate_black
  2197 ;;		_calibrate_white
  2198 ;;		_get_color_code
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text11
  2203   000842                     __ptext11:
  2204                           	callstack 0
  2205   000842                     _color_read_Red:
  2206                           	callstack 24
  2207   000842                     
  2208                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  2209   000842  ECA4  F005         	call	_I2C_2_Master_Start	;wreg free
  2210                           
  2211                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  2212   000846  0E52               	movlw	82
  2213   000848  EC93  F005         	call	_I2C_2_Master_Write
  2214                           
  2215                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  2216   00084C  0EB6               	movlw	182
  2217   00084E  EC93  F005         	call	_I2C_2_Master_Write
  2218                           
  2219                           ;color.c: 96:  I2C_2_Master_RepStart();
  2220   000852  ECA9  F005         	call	_I2C_2_Master_RepStart	;wreg free
  2221                           
  2222                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  2223   000856  0E53               	movlw	83
  2224   000858  EC93  F005         	call	_I2C_2_Master_Write
  2225                           
  2226                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  2227   00085C  0E01               	movlw	1
  2228   00085E  EC08  F005         	call	_I2C_2_Master_Read
  2229   000862  6E07               	movwf	??_color_read_Red^0,c
  2230   000864  5007               	movf	??_color_read_Red^0,w,c
  2231   000866  6E0A               	movwf	color_read_Red@tmp^0,c
  2232   000868  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  2233                           
  2234                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2235   00086A  0E00               	movlw	0
  2236   00086C  EC08  F005         	call	_I2C_2_Master_Read
  2237   000870  6E07               	movwf	??_color_read_Red^0,c
  2238   000872  5007               	movf	??_color_read_Red^0,w,c
  2239   000874  6E09               	movwf	(??_color_read_Red+2)^0,c
  2240   000876  6A08               	clrf	(??_color_read_Red+1)^0,c
  2241   000878  500A               	movf	color_read_Red@tmp^0,w,c
  2242   00087A  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  2243   00087C  6E0A               	movwf	color_read_Red@tmp^0,c
  2244   00087E  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  2245   000880  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  2246   000882  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  2247                           
  2248                           ;color.c: 100:  I2C_2_Master_Stop();
  2249   000884  EC9F  F005         	call	_I2C_2_Master_Stop	;wreg free
  2250   000888                     
  2251                           ;color.c: 101:  return tmp;
  2252   000888  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  2253   00088C  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  2254   000890  0012               	return		;funcret
  2255   000892                     __end_of_color_read_Red:
  2256                           	callstack 0
  2257                           
  2258 ;; *************** function _color_read_Green *****************
  2259 ;; Defined at:
  2260 ;;		line 118 in file "color.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  tmp             2    9[COMRAM] unsigned int 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  2    4[COMRAM] unsigned int 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2, status,0, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2274 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2276 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2277 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2278 ;;Total ram usage:        7 bytes
  2279 ;; Hardware stack levels used: 1
  2280 ;; Hardware stack levels required when called: 4
  2281 ;; This function calls:
  2282 ;;		_I2C_2_Master_Read
  2283 ;;		_I2C_2_Master_RepStart
  2284 ;;		_I2C_2_Master_Start
  2285 ;;		_I2C_2_Master_Stop
  2286 ;;		_I2C_2_Master_Write
  2287 ;; This function is called by:
  2288 ;;		_calibrate_black
  2289 ;;		_calibrate_white
  2290 ;;		_get_color_code
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text12
  2295   000892                     __ptext12:
  2296                           	callstack 0
  2297   000892                     _color_read_Green:
  2298                           	callstack 24
  2299   000892                     
  2300                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  2301   000892  ECA4  F005         	call	_I2C_2_Master_Start	;wreg free
  2302                           
  2303                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  2304   000896  0E52               	movlw	82
  2305   000898  EC93  F005         	call	_I2C_2_Master_Write
  2306                           
  2307                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  2308   00089C  0EB8               	movlw	184
  2309   00089E  EC93  F005         	call	_I2C_2_Master_Write
  2310                           
  2311                           ;color.c: 124:  I2C_2_Master_RepStart();
  2312   0008A2  ECA9  F005         	call	_I2C_2_Master_RepStart	;wreg free
  2313                           
  2314                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  2315   0008A6  0E53               	movlw	83
  2316   0008A8  EC93  F005         	call	_I2C_2_Master_Write
  2317                           
  2318                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  2319   0008AC  0E01               	movlw	1
  2320   0008AE  EC08  F005         	call	_I2C_2_Master_Read
  2321   0008B2  6E07               	movwf	??_color_read_Green^0,c
  2322   0008B4  5007               	movf	??_color_read_Green^0,w,c
  2323   0008B6  6E0A               	movwf	color_read_Green@tmp^0,c
  2324   0008B8  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  2325                           
  2326                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2327   0008BA  0E00               	movlw	0
  2328   0008BC  EC08  F005         	call	_I2C_2_Master_Read
  2329   0008C0  6E07               	movwf	??_color_read_Green^0,c
  2330   0008C2  5007               	movf	??_color_read_Green^0,w,c
  2331   0008C4  6E09               	movwf	(??_color_read_Green+2)^0,c
  2332   0008C6  6A08               	clrf	(??_color_read_Green+1)^0,c
  2333   0008C8  500A               	movf	color_read_Green@tmp^0,w,c
  2334   0008CA  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  2335   0008CC  6E0A               	movwf	color_read_Green@tmp^0,c
  2336   0008CE  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  2337   0008D0  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  2338   0008D2  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  2339                           
  2340                           ;color.c: 128:  I2C_2_Master_Stop();
  2341   0008D4  EC9F  F005         	call	_I2C_2_Master_Stop	;wreg free
  2342   0008D8                     
  2343                           ;color.c: 129:  return tmp;
  2344   0008D8  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  2345   0008DC  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  2346   0008E0  0012               	return		;funcret
  2347   0008E2                     __end_of_color_read_Green:
  2348                           	callstack 0
  2349                           
  2350 ;; *************** function _color_read_Clear *****************
  2351 ;; Defined at:
  2352 ;;		line 132 in file "color.c"
  2353 ;; Parameters:    Size  Location     Type
  2354 ;;		None
  2355 ;; Auto vars:     Size  Location     Type
  2356 ;;  tmp             2    9[COMRAM] unsigned int 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  2    4[COMRAM] unsigned int 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0, cstack
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2368 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2369 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2370 ;;Total ram usage:        7 bytes
  2371 ;; Hardware stack levels used: 1
  2372 ;; Hardware stack levels required when called: 4
  2373 ;; This function calls:
  2374 ;;		_I2C_2_Master_Read
  2375 ;;		_I2C_2_Master_RepStart
  2376 ;;		_I2C_2_Master_Start
  2377 ;;		_I2C_2_Master_Stop
  2378 ;;		_I2C_2_Master_Write
  2379 ;; This function is called by:
  2380 ;;		_calibrate_black
  2381 ;;		_get_wall_presence
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text13
  2386   0008E2                     __ptext13:
  2387                           	callstack 0
  2388   0008E2                     _color_read_Clear:
  2389                           	callstack 24
  2390   0008E2                     
  2391                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  2392   0008E2  ECA4  F005         	call	_I2C_2_Master_Start	;wreg free
  2393                           
  2394                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  2395   0008E6  0E52               	movlw	82
  2396   0008E8  EC93  F005         	call	_I2C_2_Master_Write
  2397                           
  2398                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  2399   0008EC  0EB4               	movlw	180
  2400   0008EE  EC93  F005         	call	_I2C_2_Master_Write
  2401                           
  2402                           ;color.c: 138:  I2C_2_Master_RepStart();
  2403   0008F2  ECA9  F005         	call	_I2C_2_Master_RepStart	;wreg free
  2404                           
  2405                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  2406   0008F6  0E53               	movlw	83
  2407   0008F8  EC93  F005         	call	_I2C_2_Master_Write
  2408                           
  2409                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  2410   0008FC  0E01               	movlw	1
  2411   0008FE  EC08  F005         	call	_I2C_2_Master_Read
  2412   000902  6E07               	movwf	??_color_read_Clear^0,c
  2413   000904  5007               	movf	??_color_read_Clear^0,w,c
  2414   000906  6E0A               	movwf	color_read_Clear@tmp^0,c
  2415   000908  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  2416                           
  2417                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2418   00090A  0E00               	movlw	0
  2419   00090C  EC08  F005         	call	_I2C_2_Master_Read
  2420   000910  6E07               	movwf	??_color_read_Clear^0,c
  2421   000912  5007               	movf	??_color_read_Clear^0,w,c
  2422   000914  6E09               	movwf	(??_color_read_Clear+2)^0,c
  2423   000916  6A08               	clrf	(??_color_read_Clear+1)^0,c
  2424   000918  500A               	movf	color_read_Clear@tmp^0,w,c
  2425   00091A  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  2426   00091C  6E0A               	movwf	color_read_Clear@tmp^0,c
  2427   00091E  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  2428   000920  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  2429   000922  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  2430                           
  2431                           ;color.c: 142:  I2C_2_Master_Stop();
  2432   000924  EC9F  F005         	call	_I2C_2_Master_Stop	;wreg free
  2433   000928                     
  2434                           ;color.c: 143:  return tmp;
  2435   000928  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  2436   00092C  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  2437   000930  0012               	return		;funcret
  2438   000932                     __end_of_color_read_Clear:
  2439                           	callstack 0
  2440                           
  2441 ;; *************** function _color_read_Blue *****************
  2442 ;; Defined at:
  2443 ;;		line 104 in file "color.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  tmp             2    9[COMRAM] unsigned int 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  2    4[COMRAM] unsigned int 
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2459 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2460 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2461 ;;Total ram usage:        7 bytes
  2462 ;; Hardware stack levels used: 1
  2463 ;; Hardware stack levels required when called: 4
  2464 ;; This function calls:
  2465 ;;		_I2C_2_Master_Read
  2466 ;;		_I2C_2_Master_RepStart
  2467 ;;		_I2C_2_Master_Start
  2468 ;;		_I2C_2_Master_Stop
  2469 ;;		_I2C_2_Master_Write
  2470 ;; This function is called by:
  2471 ;;		_calibrate_black
  2472 ;;		_calibrate_white
  2473 ;;		_get_color_code
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text14
  2478   000932                     __ptext14:
  2479                           	callstack 0
  2480   000932                     _color_read_Blue:
  2481                           	callstack 24
  2482   000932                     
  2483                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  2484   000932  ECA4  F005         	call	_I2C_2_Master_Start	;wreg free
  2485                           
  2486                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  2487   000936  0E52               	movlw	82
  2488   000938  EC93  F005         	call	_I2C_2_Master_Write
  2489                           
  2490                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  2491   00093C  0EBA               	movlw	186
  2492   00093E  EC93  F005         	call	_I2C_2_Master_Write
  2493                           
  2494                           ;color.c: 110:  I2C_2_Master_RepStart();
  2495   000942  ECA9  F005         	call	_I2C_2_Master_RepStart	;wreg free
  2496                           
  2497                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  2498   000946  0E53               	movlw	83
  2499   000948  EC93  F005         	call	_I2C_2_Master_Write
  2500                           
  2501                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  2502   00094C  0E01               	movlw	1
  2503   00094E  EC08  F005         	call	_I2C_2_Master_Read
  2504   000952  6E07               	movwf	??_color_read_Blue^0,c
  2505   000954  5007               	movf	??_color_read_Blue^0,w,c
  2506   000956  6E0A               	movwf	color_read_Blue@tmp^0,c
  2507   000958  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  2508                           
  2509                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  2510   00095A  0E00               	movlw	0
  2511   00095C  EC08  F005         	call	_I2C_2_Master_Read
  2512   000960  6E07               	movwf	??_color_read_Blue^0,c
  2513   000962  5007               	movf	??_color_read_Blue^0,w,c
  2514   000964  6E09               	movwf	(??_color_read_Blue+2)^0,c
  2515   000966  6A08               	clrf	(??_color_read_Blue+1)^0,c
  2516   000968  500A               	movf	color_read_Blue@tmp^0,w,c
  2517   00096A  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  2518   00096C  6E0A               	movwf	color_read_Blue@tmp^0,c
  2519   00096E  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  2520   000970  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  2521   000972  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  2522                           
  2523                           ;color.c: 114:  I2C_2_Master_Stop();
  2524   000974  EC9F  F005         	call	_I2C_2_Master_Stop	;wreg free
  2525   000978                     
  2526                           ;color.c: 115:  return tmp;
  2527   000978  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  2528   00097C  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  2529   000980  0012               	return		;funcret
  2530   000982                     __end_of_color_read_Blue:
  2531                           	callstack 0
  2532                           
  2533 ;; *************** function _I2C_2_Master_Write *****************
  2534 ;; Defined at:
  2535 ;;		line 45 in file "i2c.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  data_byte       1    wreg     unsigned char 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  data_byte       1    1[COMRAM] unsigned char 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2553 ;;Total ram usage:        1 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; Hardware stack levels required when called: 3
  2556 ;; This function calls:
  2557 ;;		_I2C_2_Master_Idle
  2558 ;; This function is called by:
  2559 ;;		_color_writetoaddr
  2560 ;;		_color_read_Red
  2561 ;;		_color_read_Blue
  2562 ;;		_color_read_Green
  2563 ;;		_color_read_Clear
  2564 ;; This function uses a non-reentrant model
  2565 ;;
  2566                           
  2567                           	psect	text15
  2568   000B26                     __ptext15:
  2569                           	callstack 0
  2570   000B26                     _I2C_2_Master_Write:
  2571                           	callstack 25
  2572                           
  2573                           ;incstack = 0
  2574                           ;I2C_2_Master_Write@data_byte stored from wreg
  2575   000B26  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  2576   000B28                     
  2577                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  2578   000B28  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2579   000B2C                     
  2580                           ;i2c.c: 48:   SSP2BUF = data_byte;
  2581   000B2C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  2582   000B30  0012               	return		;funcret
  2583   000B32                     __end_of_I2C_2_Master_Write:
  2584                           	callstack 0
  2585                           
  2586 ;; *************** function _I2C_2_Master_Stop *****************
  2587 ;; Defined at:
  2588 ;;		line 39 in file "i2c.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  1    wreg      void 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2606 ;;Total ram usage:        0 bytes
  2607 ;; Hardware stack levels used: 1
  2608 ;; Hardware stack levels required when called: 3
  2609 ;; This function calls:
  2610 ;;		_I2C_2_Master_Idle
  2611 ;; This function is called by:
  2612 ;;		_color_writetoaddr
  2613 ;;		_color_read_Red
  2614 ;;		_color_read_Blue
  2615 ;;		_color_read_Green
  2616 ;;		_color_read_Clear
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           	psect	text16
  2621   000B3E                     __ptext16:
  2622                           	callstack 0
  2623   000B3E                     _I2C_2_Master_Stop:
  2624                           	callstack 25
  2625   000B3E                     
  2626                           ;i2c.c: 41:   I2C_2_Master_Idle();
  2627   000B3E  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2628   000B42                     
  2629                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  2630   000B42  010E               	movlb	14	; () banked
  2631   000B44  85DA               	bsf	218,2,b	;volatile
  2632   000B46                     
  2633                           ; BSR set to: 14
  2634   000B46  0012               	return		;funcret
  2635   000B48                     __end_of_I2C_2_Master_Stop:
  2636                           	callstack 0
  2637                           
  2638 ;; *************** function _I2C_2_Master_Start *****************
  2639 ;; Defined at:
  2640 ;;		line 27 in file "i2c.c"
  2641 ;; Parameters:    Size  Location     Type
  2642 ;;		None
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  1    wreg      void 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0, cstack
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;Total ram usage:        0 bytes
  2659 ;; Hardware stack levels used: 1
  2660 ;; Hardware stack levels required when called: 3
  2661 ;; This function calls:
  2662 ;;		_I2C_2_Master_Idle
  2663 ;; This function is called by:
  2664 ;;		_color_writetoaddr
  2665 ;;		_color_read_Red
  2666 ;;		_color_read_Blue
  2667 ;;		_color_read_Green
  2668 ;;		_color_read_Clear
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text17
  2673   000B48                     __ptext17:
  2674                           	callstack 0
  2675   000B48                     _I2C_2_Master_Start:
  2676                           	callstack 25
  2677   000B48                     
  2678                           ;i2c.c: 29:   I2C_2_Master_Idle();
  2679   000B48  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2680   000B4C                     
  2681                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  2682   000B4C  010E               	movlb	14	; () banked
  2683   000B4E  81DA               	bsf	218,0,b	;volatile
  2684   000B50                     
  2685                           ; BSR set to: 14
  2686   000B50  0012               	return		;funcret
  2687   000B52                     __end_of_I2C_2_Master_Start:
  2688                           	callstack 0
  2689                           
  2690 ;; *************** function _I2C_2_Master_RepStart *****************
  2691 ;; Defined at:
  2692 ;;		line 33 in file "i2c.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;		None
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2, status,0, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2710 ;;Total ram usage:        0 bytes
  2711 ;; Hardware stack levels used: 1
  2712 ;; Hardware stack levels required when called: 3
  2713 ;; This function calls:
  2714 ;;		_I2C_2_Master_Idle
  2715 ;; This function is called by:
  2716 ;;		_color_read_Red
  2717 ;;		_color_read_Blue
  2718 ;;		_color_read_Green
  2719 ;;		_color_read_Clear
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text18
  2724   000B52                     __ptext18:
  2725                           	callstack 0
  2726   000B52                     _I2C_2_Master_RepStart:
  2727                           	callstack 24
  2728   000B52                     
  2729                           ;i2c.c: 35:   I2C_2_Master_Idle();
  2730   000B52  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2731   000B56                     
  2732                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  2733   000B56  010E               	movlb	14	; () banked
  2734   000B58  83DA               	bsf	218,1,b	;volatile
  2735   000B5A                     
  2736                           ; BSR set to: 14
  2737   000B5A  0012               	return		;funcret
  2738   000B5C                     __end_of_I2C_2_Master_RepStart:
  2739                           	callstack 0
  2740                           
  2741 ;; *************** function _I2C_2_Master_Read *****************
  2742 ;; Defined at:
  2743 ;;		line 51 in file "i2c.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;  ack             1    wreg     unsigned char 
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;  ack             1    2[COMRAM] unsigned char 
  2748 ;;  tmp             1    3[COMRAM] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      unsigned char 
  2751 ;; Registers used:
  2752 ;;		wreg, status,2, status,0, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2759 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2761 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2762 ;;Total ram usage:        3 bytes
  2763 ;; Hardware stack levels used: 1
  2764 ;; Hardware stack levels required when called: 3
  2765 ;; This function calls:
  2766 ;;		_I2C_2_Master_Idle
  2767 ;; This function is called by:
  2768 ;;		_color_read_Red
  2769 ;;		_color_read_Blue
  2770 ;;		_color_read_Green
  2771 ;;		_color_read_Clear
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text19
  2776   000A10                     __ptext19:
  2777                           	callstack 0
  2778   000A10                     _I2C_2_Master_Read:
  2779                           	callstack 24
  2780                           
  2781                           ; BSR set to: 14
  2782                           ;incstack = 0
  2783                           ;I2C_2_Master_Read@ack stored from wreg
  2784   000A10  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  2785   000A12                     
  2786                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  2787   000A12  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2788   000A16                     
  2789                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  2790   000A16  010E               	movlb	14	; () banked
  2791   000A18  87DA               	bsf	218,3,b	;volatile
  2792                           
  2793                           ;i2c.c: 56:   I2C_2_Master_Idle();
  2794   000A1A  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2795   000A1E                     
  2796                           ;i2c.c: 57:   tmp = SSP2BUF;
  2797   000A1E  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  2798                           
  2799                           ;i2c.c: 58:   I2C_2_Master_Idle();
  2800   000A22  EC3E  F005         	call	_I2C_2_Master_Idle	;wreg free
  2801   000A26                     
  2802                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  2803   000A26  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  2804   000A28  B4D8               	btfsc	status,2,c
  2805   000A2A  EF19  F005         	goto	u1141
  2806   000A2E  EF1D  F005         	goto	u1140
  2807   000A32                     u1141:
  2808   000A32  6A02               	clrf	??_I2C_2_Master_Read^0,c
  2809   000A34  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  2810   000A36  EF1E  F005         	goto	u1158
  2811   000A3A                     u1140:
  2812   000A3A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  2813   000A3C                     u1158:
  2814   000A3C  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  2815   000A3E  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  2816   000A40  010E               	movlb	14	; () banked
  2817   000A42  51DA               	movf	218,w,b	;volatile
  2818   000A44  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  2819   000A46  0BDF               	andlw	-33
  2820   000A48  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  2821   000A4A  6FDA               	movwf	218,b	;volatile
  2822   000A4C                     
  2823                           ; BSR set to: 14
  2824                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  2825   000A4C  89DA               	bsf	218,4,b	;volatile
  2826   000A4E                     
  2827                           ; BSR set to: 14
  2828                           ;i2c.c: 61:   return tmp;
  2829   000A4E  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  2830   000A50                     
  2831                           ; BSR set to: 14
  2832   000A50  0012               	return		;funcret
  2833   000A52                     __end_of_I2C_2_Master_Read:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _I2C_2_Master_Idle *****************
  2837 ;; Defined at:
  2838 ;;		line 22 in file "i2c.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2856 ;;Total ram usage:        1 bytes
  2857 ;; Hardware stack levels used: 1
  2858 ;; Hardware stack levels required when called: 2
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_I2C_2_Master_Start
  2863 ;;		_I2C_2_Master_RepStart
  2864 ;;		_I2C_2_Master_Stop
  2865 ;;		_I2C_2_Master_Write
  2866 ;;		_I2C_2_Master_Read
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           	psect	text20
  2871   000A7C                     __ptext20:
  2872                           	callstack 0
  2873   000A7C                     _I2C_2_Master_Idle:
  2874                           	callstack 25
  2875   000A7C                     l343:
  2876   000A7C  010E               	movlb	14	; () banked
  2877   000A7E  B5D8               	btfsc	216,2,b	;volatile
  2878   000A80  EF44  F005         	goto	u1121
  2879   000A84  EF46  F005         	goto	u1120
  2880   000A88                     u1121:
  2881   000A88  EF3E  F005         	goto	l343
  2882   000A8C                     u1120:
  2883   000A8C                     
  2884                           ; BSR set to: 14
  2885   000A8C  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  2886   000A90  0E1F               	movlw	31
  2887   000A92  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  2888   000A94  A4D8               	btfss	status,2,c
  2889   000A96  EF4F  F005         	goto	u1131
  2890   000A9A  EF51  F005         	goto	u1130
  2891   000A9E                     u1131:
  2892   000A9E  EF3E  F005         	goto	l343
  2893   000AA2                     u1130:
  2894   000AA2                     
  2895                           ; BSR set to: 14
  2896   000AA2  0012               	return		;funcret
  2897   000AA4                     __end_of_I2C_2_Master_Idle:
  2898                           	callstack 0
  2899                           
  2900 ;; *************** function ___lwdiv *****************
  2901 ;; Defined at:
  2902 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  dividend        2    6[COMRAM] unsigned int 
  2905 ;;  divisor         2    8[COMRAM] unsigned int 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  quotient        2   10[COMRAM] unsigned int 
  2908 ;;  counter         1   12[COMRAM] unsigned char 
  2909 ;; Return value:  Size  Location     Type
  2910 ;;                  2    6[COMRAM] unsigned int 
  2911 ;; Registers used:
  2912 ;;		wreg, status,2, status,0
  2913 ;; Tracked objects:
  2914 ;;		On entry : 0/0
  2915 ;;		On exit  : 0/0
  2916 ;;		Unchanged: 0/0
  2917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2918 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2919 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2921 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2922 ;;Total ram usage:        7 bytes
  2923 ;; Hardware stack levels used: 1
  2924 ;; Hardware stack levels required when called: 2
  2925 ;; This function calls:
  2926 ;;		Nothing
  2927 ;; This function is called by:
  2928 ;;		_calibrate_black
  2929 ;;		_setMotorPWM
  2930 ;; This function uses a non-reentrant model
  2931 ;;
  2932                           
  2933                           	psect	text21
  2934   000700                     __ptext21:
  2935                           	callstack 0
  2936   000700                     ___lwdiv:
  2937                           	callstack 26
  2938   000700  0E00               	movlw	0
  2939   000702  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  2940   000704  0E00               	movlw	0
  2941   000706  6E0B               	movwf	___lwdiv@quotient^0,c
  2942   000708  5009               	movf	___lwdiv@divisor^0,w,c
  2943   00070A  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  2944   00070C  B4D8               	btfsc	status,2,c
  2945   00070E  EF8B  F003         	goto	u1191
  2946   000712  EF8D  F003         	goto	u1190
  2947   000716                     u1191:
  2948   000716  EFB5  F003         	goto	l921
  2949   00071A                     u1190:
  2950   00071A  0E01               	movlw	1
  2951   00071C  6E0D               	movwf	___lwdiv@counter^0,c
  2952   00071E  EF95  F003         	goto	l2175
  2953   000722                     l2173:
  2954   000722  90D8               	bcf	status,0,c
  2955   000724  3609               	rlcf	___lwdiv@divisor^0,f,c
  2956   000726  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  2957   000728  2A0D               	incf	___lwdiv@counter^0,f,c
  2958   00072A                     l2175:
  2959   00072A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  2960   00072C  EF9A  F003         	goto	u1201
  2961   000730  EF9C  F003         	goto	u1200
  2962   000734                     u1201:
  2963   000734  EF91  F003         	goto	l2173
  2964   000738                     u1200:
  2965   000738                     l2177:
  2966   000738  90D8               	bcf	status,0,c
  2967   00073A  360B               	rlcf	___lwdiv@quotient^0,f,c
  2968   00073C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  2969   00073E  5009               	movf	___lwdiv@divisor^0,w,c
  2970   000740  5C07               	subwf	___lwdiv@dividend^0,w,c
  2971   000742  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2972   000744  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  2973   000746  A0D8               	btfss	status,0,c
  2974   000748  EFA8  F003         	goto	u1211
  2975   00074C  EFAA  F003         	goto	u1210
  2976   000750                     u1211:
  2977   000750  EFAF  F003         	goto	l2185
  2978   000754                     u1210:
  2979   000754  5009               	movf	___lwdiv@divisor^0,w,c
  2980   000756  5E07               	subwf	___lwdiv@dividend^0,f,c
  2981   000758  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  2982   00075A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  2983   00075C  800B               	bsf	___lwdiv@quotient^0,0,c
  2984   00075E                     l2185:
  2985   00075E  90D8               	bcf	status,0,c
  2986   000760  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  2987   000762  3209               	rrcf	___lwdiv@divisor^0,f,c
  2988   000764  2E0D               	decfsz	___lwdiv@counter^0,f,c
  2989   000766  EF9C  F003         	goto	l2177
  2990   00076A                     l921:
  2991   00076A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  2992   00076E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2993   000772  0012               	return		;funcret
  2994   000774                     __end_of___lwdiv:
  2995                           	callstack 0
  2996                           
  2997 ;; *************** function _I2C_2_Master_Init *****************
  2998 ;; Defined at:
  2999 ;;		line 4 in file "i2c.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 2
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_color_click_init
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text22
  3028   000A52                     __ptext22:
  3029                           	callstack 0
  3030   000A52                     _I2C_2_Master_Init:
  3031                           	callstack 27
  3032   000A52                     
  3033                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3034   000A52  010E               	movlb	14	; () banked
  3035   000A54  51D9               	movf	217,w,b	;volatile
  3036   000A56  0BF0               	andlw	-16
  3037   000A58  0908               	iorlw	8
  3038   000A5A  6FD9               	movwf	217,b	;volatile
  3039   000A5C                     
  3040                           ; BSR set to: 14
  3041                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3042   000A5C  8BD9               	bsf	217,5,b	;volatile
  3043                           
  3044                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3045   000A5E  0E9F               	movlw	159
  3046   000A60  6FD6               	movwf	214,b	;volatile
  3047   000A62                     
  3048                           ; BSR set to: 14
  3049                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3050   000A62  8A84               	bsf	132,5,c	;volatile
  3051   000A64                     
  3052                           ; BSR set to: 14
  3053                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3054   000A64  8C84               	bsf	132,6,c	;volatile
  3055   000A66                     
  3056                           ; BSR set to: 14
  3057                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3058   000A66  9BA7               	bcf	167,5,b	;volatile
  3059   000A68                     
  3060                           ; BSR set to: 14
  3061                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3062   000A68  9DA7               	bcf	167,6,b	;volatile
  3063                           
  3064                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3065   000A6A  0E1D               	movlw	29
  3066   000A6C  6F1D               	movwf	29,b	;volatile
  3067                           
  3068                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3069   000A6E  0E1E               	movlw	30
  3070   000A70  6F1C               	movwf	28,b	;volatile
  3071                           
  3072                           ;i2c.c: 18:   RD5PPS=0x1C;
  3073   000A72  0E1C               	movlw	28
  3074   000A74  6F6F               	movwf	111,b	;volatile
  3075                           
  3076                           ;i2c.c: 19:   RD6PPS=0x1B;
  3077   000A76  0E1B               	movlw	27
  3078   000A78  6F70               	movwf	112,b	;volatile
  3079   000A7A                     
  3080                           ; BSR set to: 14
  3081   000A7A  0012               	return		;funcret
  3082   000A7C                     __end_of_I2C_2_Master_Init:
  3083                           	callstack 0
  3084                           
  3085 ;; *************** function _Timer0_init *****************
  3086 ;; Defined at:
  3087 ;;		line 7 in file "timers.c"
  3088 ;; Parameters:    Size  Location     Type
  3089 ;;		None
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;		None
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;Total ram usage:        0 bytes
  3106 ;; Hardware stack levels used: 1
  3107 ;; Hardware stack levels required when called: 2
  3108 ;; This function calls:
  3109 ;;		Nothing
  3110 ;; This function is called by:
  3111 ;;		_main
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text23
  3116   000AEA                     __ptext23:
  3117                           	callstack 0
  3118   000AEA                     _Timer0_init:
  3119                           	callstack 28
  3120   000AEA                     
  3121                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  3122   000AEA  50D6               	movf	214,w,c	;volatile
  3123   000AEC  0B1F               	andlw	-225
  3124   000AEE  0940               	iorlw	64
  3125   000AF0  6ED6               	movwf	214,c	;volatile
  3126   000AF2                     
  3127                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  3128   000AF2  88D6               	bsf	214,4,c	;volatile
  3129                           
  3130                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  3131   000AF4  50D6               	movf	214,w,c	;volatile
  3132   000AF6  0BF0               	andlw	-16
  3133   000AF8  0908               	iorlw	8
  3134   000AFA  6ED6               	movwf	214,c	;volatile
  3135                           
  3136                           ;timers.c: 13:     TMR0H=0b11100111;
  3137   000AFC  0EE7               	movlw	231
  3138   000AFE  6ED4               	movwf	212,c	;volatile
  3139                           
  3140                           ;timers.c: 14:     TMR0L=0b10010101;
  3141   000B00  0E95               	movlw	149
  3142   000B02  6ED3               	movwf	211,c	;volatile
  3143   000B04                     
  3144                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  3145   000B04  88D5               	bsf	213,4,c	;volatile
  3146   000B06                     
  3147                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  3148   000B06  8ED5               	bsf	213,7,c	;volatile
  3149   000B08  0012               	return		;funcret
  3150   000B0A                     __end_of_Timer0_init:
  3151                           	callstack 0
  3152                           
  3153 ;; *************** function _Interrupts_init *****************
  3154 ;; Defined at:
  3155 ;;		line 10 in file "interrupts.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;		None
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      void 
  3162 ;; Registers used:
  3163 ;;		None
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3173 ;;Total ram usage:        0 bytes
  3174 ;; Hardware stack levels used: 1
  3175 ;; Hardware stack levels required when called: 2
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_main
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text24
  3184   000B32                     __ptext24:
  3185                           	callstack 0
  3186   000B32                     _Interrupts_init:
  3187                           	callstack 28
  3188   000B32                     
  3189                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  3190   000B32  8CF2               	bsf	242,6,c	;volatile
  3191                           
  3192                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  3193   000B34  010E               	movlb	14	; () banked
  3194   000B36  8B29               	bsf	41,5,b	;volatile
  3195                           
  3196                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  3197   000B38  812B               	bsf	43,0,b	;volatile
  3198                           
  3199                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  3200   000B3A  8EF2               	bsf	242,7,c	;volatile
  3201   000B3C                     
  3202                           ; BSR set to: 14
  3203   000B3C  0012               	return		;funcret
  3204   000B3E                     __end_of_Interrupts_init:
  3205                           	callstack 0
  3206                           
  3207 ;; *************** function _HighISR *****************
  3208 ;; Defined at:
  3209 ;;		line 22 in file "interrupts.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;		None
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;		None
  3214 ;; Return value:  Size  Location     Type
  3215 ;;                  1    wreg      void 
  3216 ;; Registers used:
  3217 ;;		wreg, status,2, status,0, cstack
  3218 ;; Tracked objects:
  3219 ;;		On entry : 0/0
  3220 ;;		On exit  : 0/0
  3221 ;;		Unchanged: 0/0
  3222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3227 ;;Total ram usage:        0 bytes
  3228 ;; Hardware stack levels used: 1
  3229 ;; Hardware stack levels required when called: 1
  3230 ;; This function calls:
  3231 ;;		_increment_seconds
  3232 ;; This function is called by:
  3233 ;;		Interrupt level 2
  3234 ;; This function uses a non-reentrant model
  3235 ;;
  3236                           
  3237                           	psect	intcode
  3238   000008                     __pintcode:
  3239                           	callstack 0
  3240   000008                     _HighISR:
  3241                           	callstack 24
  3242                           
  3243                           ; BSR set to: 14
  3244                           ;incstack = 0
  3245   000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3246   00000A                     
  3247                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  3248   00000A  010E               	movlb	14	; () banked
  3249   00000C  AB33               	btfss	51,5,b	;volatile
  3250   00000E  EF0B  F000         	goto	i2u75_41
  3251   000012  EF0D  F000         	goto	i2u75_40
  3252   000016                     i2u75_41:
  3253   000016  EF15  F000         	goto	i2l384
  3254   00001A                     i2u75_40:
  3255   00001A                     
  3256                           ; BSR set to: 14
  3257                           ;interrupts.c: 25:     increment_seconds();
  3258   00001A  ECAE  F005         	call	_increment_seconds	;wreg free
  3259   00001E                     
  3260                           ;interrupts.c: 27:     TMR0H=0b11100111;
  3261   00001E  0EE7               	movlw	231
  3262   000020  6ED4               	movwf	212,c	;volatile
  3263   000022                     
  3264                           ;interrupts.c: 28:     TMR0L=0b10010101;
  3265   000022  0E95               	movlw	149
  3266   000024  6ED3               	movwf	211,c	;volatile
  3267   000026                     
  3268                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  3269   000026  010E               	movlb	14	; () banked
  3270   000028  9B33               	bcf	51,5,b	;volatile
  3271   00002A                     i2l384:
  3272                           
  3273                           ; BSR set to: 14
  3274   00002A  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3275   00002C  0011               	retfie		f
  3276   00002E                     __end_of_HighISR:
  3277                           	callstack 0
  3278                           
  3279 ;; *************** function _increment_seconds *****************
  3280 ;; Defined at:
  3281 ;;		line 313 in file "dc_motor.c"
  3282 ;; Parameters:    Size  Location     Type
  3283 ;;		None
  3284 ;; Auto vars:     Size  Location     Type
  3285 ;;		None
  3286 ;; Return value:  Size  Location     Type
  3287 ;;                  1    wreg      void 
  3288 ;; Registers used:
  3289 ;;		status,2, status,0
  3290 ;; Tracked objects:
  3291 ;;		On entry : 0/0
  3292 ;;		On exit  : 0/0
  3293 ;;		Unchanged: 0/0
  3294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3299 ;;Total ram usage:        0 bytes
  3300 ;; Hardware stack levels used: 1
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_HighISR
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text26
  3309   000B5C                     __ptext26:
  3310                           	callstack 0
  3311   000B5C                     _increment_seconds:
  3312                           	callstack 24
  3313   000B5C                     
  3314                           ;dc_motor.c: 315:     seconds += 1;
  3315   000B5C  4A58               	infsnz	_seconds^0,f,c
  3316   000B5E  2A59               	incf	(_seconds+1)^0,f,c
  3317   000B60  0012               	return		;funcret
  3318   000B62                     __end_of_increment_seconds:
  3319                           	callstack 0
  3320   000000                     
  3321                           	psect	rparam
  3322   000000                     
  3323                           	psect	temp
  3324   00005A                     btemp:
  3325                           	callstack 0
  3326   00005A                     	ds	1
  3327   000000                     int$flags	set	btemp
  3328   000000                     wtemp8	set	btemp+1
  3329   000000                     ttemp5	set	btemp+1
  3330   000000                     ttemp6	set	btemp+4
  3331   000000                     ttemp7	set	btemp+8
  3332                           
  3333                           	psect	idloc
  3334                           
  3335                           ;Config register IDLOC0 @ 0x200000
  3336                           ;	unspecified, using default values
  3337   200000                     	org	2097152
  3338   200000  0FFF               	dw	4095
  3339                           
  3340                           ;Config register IDLOC1 @ 0x200002
  3341                           ;	unspecified, using default values
  3342   200002                     	org	2097154
  3343   200002  0FFF               	dw	4095
  3344                           
  3345                           ;Config register IDLOC2 @ 0x200004
  3346                           ;	unspecified, using default values
  3347   200004                     	org	2097156
  3348   200004  0FFF               	dw	4095
  3349                           
  3350                           ;Config register IDLOC3 @ 0x200006
  3351                           ;	unspecified, using default values
  3352   200006                     	org	2097158
  3353   200006  0FFF               	dw	4095
  3354                           
  3355                           ;Config register IDLOC4 @ 0x200008
  3356                           ;	unspecified, using default values
  3357   200008                     	org	2097160
  3358   200008  0FFF               	dw	4095
  3359                           
  3360                           ;Config register IDLOC5 @ 0x20000A
  3361                           ;	unspecified, using default values
  3362   20000A                     	org	2097162
  3363   20000A  0FFF               	dw	4095
  3364                           
  3365                           ;Config register IDLOC6 @ 0x20000C
  3366                           ;	unspecified, using default values
  3367   20000C                     	org	2097164
  3368   20000C  0FFF               	dw	4095
  3369                           
  3370                           ;Config register IDLOC7 @ 0x20000E
  3371                           ;	unspecified, using default values
  3372   20000E                     	org	2097166
  3373   20000E  0FFF               	dw	4095
  3374                           
  3375                           	psect	config
  3376                           
  3377                           ;Config register CONFIG1L @ 0x300000
  3378                           ;	External Oscillator mode Selection bits
  3379                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  3380                           ;	Power-up default value for COSC bits
  3381                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  3382   300000                     	org	3145728
  3383   300000  AA                 	db	170
  3384                           
  3385                           ;Config register CONFIG1H @ 0x300001
  3386                           ;	unspecified, using default values
  3387                           ;	Clock Out Enable bit
  3388                           ;	CLKOUTEN = 0x1, unprogrammed default
  3389                           ;	Clock Switch Enable bit
  3390                           ;	CSWEN = 0x1, unprogrammed default
  3391                           ;	Fail-Safe Clock Monitor Enable bit
  3392                           ;	FCMEN = 0x1, unprogrammed default
  3393   300001                     	org	3145729
  3394   300001  FF                 	db	255
  3395                           
  3396                           ;Config register CONFIG2L @ 0x300002
  3397                           ;	unspecified, using default values
  3398                           ;	Master Clear Enable bit
  3399                           ;	MCLRE = 0x1, unprogrammed default
  3400                           ;	Power-up Timer Enable bit
  3401                           ;	PWRTE = 0x1, unprogrammed default
  3402                           ;	Low-power BOR enable bit
  3403                           ;	LPBOREN = 0x1, unprogrammed default
  3404                           ;	Brown-out Reset Enable bits
  3405                           ;	BOREN = 0x3, unprogrammed default
  3406   300002                     	org	3145730
  3407   300002  FF                 	db	255
  3408                           
  3409                           ;Config register CONFIG2H @ 0x300003
  3410                           ;	unspecified, using default values
  3411                           ;	Brown Out Reset Voltage selection bits
  3412                           ;	BORV = 0x3, unprogrammed default
  3413                           ;	ZCD Disable bit
  3414                           ;	ZCD = 0x1, unprogrammed default
  3415                           ;	PPSLOCK bit One-Way Set Enable bit
  3416                           ;	PPS1WAY = 0x1, unprogrammed default
  3417                           ;	Stack Full/Underflow Reset Enable bit
  3418                           ;	STVREN = 0x1, unprogrammed default
  3419                           ;	Debugger Enable bit
  3420                           ;	DEBUG = 0x1, unprogrammed default
  3421                           ;	Extended Instruction Set Enable bit
  3422                           ;	XINST = 0x1, unprogrammed default
  3423   300003                     	org	3145731
  3424   300003  FF                 	db	255
  3425                           
  3426                           ;Config register CONFIG3L @ 0x300004
  3427                           ;	WDT Period Select bits
  3428                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3429                           ;	WDT operating mode
  3430                           ;	WDTE = OFF, WDT Disabled
  3431   300004                     	org	3145732
  3432   300004  9F                 	db	159
  3433                           
  3434                           ;Config register CONFIG3H @ 0x300005
  3435                           ;	unspecified, using default values
  3436                           ;	WDT Window Select bits
  3437                           ;	WDTCWS = 0x7, unprogrammed default
  3438                           ;	WDT input clock selector
  3439                           ;	WDTCCS = 0x7, unprogrammed default
  3440   300005                     	org	3145733
  3441   300005  FF                 	db	255
  3442                           
  3443                           ;Config register CONFIG4L @ 0x300006
  3444                           ;	unspecified, using default values
  3445                           ;	Write Protection Block 0
  3446                           ;	WRT0 = 0x1, unprogrammed default
  3447                           ;	Write Protection Block 1
  3448                           ;	WRT1 = 0x1, unprogrammed default
  3449                           ;	Write Protection Block 2
  3450                           ;	WRT2 = 0x1, unprogrammed default
  3451                           ;	Write Protection Block 3
  3452                           ;	WRT3 = 0x1, unprogrammed default
  3453                           ;	Write Protection Block 3
  3454                           ;	WRT4 = 0x1, unprogrammed default
  3455                           ;	Write Protection Block 3
  3456                           ;	WRT5 = 0x1, unprogrammed default
  3457                           ;	Write Protection Block 3
  3458                           ;	WRT6 = 0x1, unprogrammed default
  3459                           ;	Write Protection Block 3
  3460                           ;	WRT7 = 0x1, unprogrammed default
  3461   300006                     	org	3145734
  3462   300006  FF                 	db	255
  3463                           
  3464                           ;Config register CONFIG4H @ 0x300007
  3465                           ;	unspecified, using default values
  3466                           ;	Configuration Register Write Protection bit
  3467                           ;	WRTC = 0x1, unprogrammed default
  3468                           ;	Boot Block Write Protection bit
  3469                           ;	WRTB = 0x1, unprogrammed default
  3470                           ;	Data EEPROM Write Protection bit
  3471                           ;	WRTD = 0x1, unprogrammed default
  3472                           ;	Scanner Enable bit
  3473                           ;	SCANE = 0x1, unprogrammed default
  3474                           ;	Low Voltage Programming Enable bit
  3475                           ;	LVP = 0x1, unprogrammed default
  3476   300007                     	org	3145735
  3477   300007  FF                 	db	255
  3478                           
  3479                           ;Config register CONFIG5L @ 0x300008
  3480                           ;	unspecified, using default values
  3481                           ;	UserNVM Program Memory Code Protection bit
  3482                           ;	CP = 0x1, unprogrammed default
  3483                           ;	DataNVM Memory Code Protection bit
  3484                           ;	CPD = 0x1, unprogrammed default
  3485   300008                     	org	3145736
  3486   300008  FF                 	db	255
  3487                           
  3488                           ;Config register CONFIG5H @ 0x300009
  3489                           ;	unspecified, using default values
  3490   300009                     	org	3145737
  3491   300009  FF                 	db	255
  3492                           
  3493                           ;Config register CONFIG6L @ 0x30000A
  3494                           ;	unspecified, using default values
  3495                           ;	Table Read Protection Block 0
  3496                           ;	EBTR0 = 0x1, unprogrammed default
  3497                           ;	Table Read Protection Block 1
  3498                           ;	EBTR1 = 0x1, unprogrammed default
  3499                           ;	Table Read Protection Block 2
  3500                           ;	EBTR2 = 0x1, unprogrammed default
  3501                           ;	Table Read Protection Block 3
  3502                           ;	EBTR3 = 0x1, unprogrammed default
  3503                           ;	Table Read Protection Block 4
  3504                           ;	EBTR4 = 0x1, unprogrammed default
  3505                           ;	Table Read Protection Block 5
  3506                           ;	EBTR5 = 0x1, unprogrammed default
  3507                           ;	Table Read Protection Block 6
  3508                           ;	EBTR6 = 0x1, unprogrammed default
  3509                           ;	Table Read Protection Block 7
  3510                           ;	EBTR7 = 0x1, unprogrammed default
  3511   30000A                     	org	3145738
  3512   30000A  FF                 	db	255
  3513                           
  3514                           ;Config register CONFIG6H @ 0x30000B
  3515                           ;	unspecified, using default values
  3516                           ;	Boot Block Table Read Protection bit
  3517                           ;	EBTRB = 0x1, unprogrammed default
  3518   30000B                     	org	3145739
  3519   30000B  FF                 	db	255
  3520                           tosu	equ	0xFFF
  3521                           tosh	equ	0xFFE
  3522                           tosl	equ	0xFFD
  3523                           stkptr	equ	0xFFC
  3524                           pclatu	equ	0xFFB
  3525                           pclath	equ	0xFFA
  3526                           pcl	equ	0xFF9
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           indf0	equ	0xFEF
  3534                           postinc0	equ	0xFEE
  3535                           postdec0	equ	0xFED
  3536                           preinc0	equ	0xFEC
  3537                           plusw0	equ	0xFEB
  3538                           fsr0h	equ	0xFEA
  3539                           fsr0l	equ	0xFE9
  3540                           wreg	equ	0xFE8
  3541                           indf1	equ	0xFE7
  3542                           postinc1	equ	0xFE6
  3543                           postdec1	equ	0xFE5
  3544                           preinc1	equ	0xFE4
  3545                           plusw1	equ	0xFE3
  3546                           fsr1h	equ	0xFE2
  3547                           fsr1l	equ	0xFE1
  3548                           bsr	equ	0xFE0
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           preinc2	equ	0xFDC
  3553                           plusw2	equ	0xFDB
  3554                           fsr2h	equ	0xFDA
  3555                           fsr2l	equ	0xFD9
  3556                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      89
    BANK0           160      0     108
    BANK1           256      0     208
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    return_back@motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    Calibrate@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), return_back@motorR(COMRAM[2]), return_back@motorL(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_turnLeft
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _setMotorPWM->___lwdiv
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   15297
                                             27 COMRAM    18    18      0
                    _Interrupts_init
                        _Timer0_init
                   _color_click_init
                    _initDCmotorsPWM
                               _stop
                           _turnLeft
 ---------------------------------------------------------------------------------
 (1) _turnLeft                                             8     4      4    5313
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4261
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (3) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _Timer0_init
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
         ___wmul (ARG)
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _initDCmotorsPWM
   _stop
     _setMotorPWM
       ___lwdiv
       ___wmul
   _turnLeft
     _setMotorPWM

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      D0       7       81.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      6C       5       67.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      59       1       94.7%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     195      60        0.0%
DATA                 0      0     195       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 14:51:49 2022

               _color_read_Red 0842                _color_read_Blue 0932                             l71 029E  
                           l73 02D4                             l82 0AE8                             l74 02B4  
                           l91 08E0                             l67 0282                             l85 0890  
                           l77 02C6                             l94 0930                             l88 0980  
          ___wmul@multiplicand 0003               _color_read_Clear 08E2               ?_calibrate_black 0001  
             _color_read_Green 0892              ??_Interrupts_init 0001                            l112 09E0  
                          l113 09E2                            l114 09F6                            l115 09F8  
                          l116 0A0C                            l141 040C                            l213 019C  
                          l118 0A0E                            l206 06FE                            l223 0534  
                          l144 05D8                            l216 09CA                            l340 0A7A  
                          l430 0AC8                            l343 0A7C                            l352 0B5A  
                          l361 0A50                            l346 0AA2                            l427 0B08  
                          l355 0B46                            l349 0B50                            l358 0B30  
                          l378 0B3C                            l921 076A                            l928 0772  
                          _RGB 004A               ?_calibrate_white 0001                            wreg 000FE8  
                         l2101 0B4C                           l2111 0B52                           l2103 0B28  
                         l2121 0A26                           l2113 0B56                           l2105 0B2C  
                         l2201 0ACC                           l2123 0A4C                           l2115 0A12  
                         l2107 0B3E                           l2131 0888                           l2211 0574  
                         l2203 0536                           l2125 0A4E                           l2117 0A16  
                         l2109 0B42                           l2141 0892                           l2221 02D6  
                         l2213 059A                           l2205 0542                           l2301 0278  
                         l2119 0A1E                           l2135 0932                           l2143 08D8  
                         l2231 033A                           l2223 02E2                           l2215 05A6  
                         l2207 0558                           l2303 027A                           l2137 0978  
                         l2129 0842                           l2153 09CC                           l2241 039A  
                         l2233 0346                           l2225 02F8                           l2217 05BC  
                         l2209 0568                           l2313 02B0                           l2305 027E  
                         l2161 0AA4                           l2401 04C8                           l2171 071A  
                         l2147 08E2                           l2155 09DA                           l2243 03A6  
                         l2235 035C                           l2227 0308                           l2219 05CC  
                         l2315 02C2                           l2307 0280                           l2163 0AC0  
                         l2251 0032                           l2411 0510                           l2403 04D4  
                         l2181 0754                           l2173 0722                           l2149 0928  
                         l2157 09F0                           l2245 03BC                           l2237 036C  
                         l2229 0314                           l2309 0290                           l2341 0670  
                         l2261 00FC                           l2253 004E                           l2413 0518  
                         l2405 04E0                           l2191 0A5C                           l2183 075C  
                         l2175 072A                           l2167 0700                           l2095 0A7C  
                         l2159 0A06                           l2247 03D4                           l2239 038E  
                         l2271 01AC                           l2351 06DA                           l2343 0680  
                         l2263 0118                           l2255 00A2                           l2407 04EC  
                         l2193 0A62                           l2185 075E                           l2177 0738  
                         l2169 0708                           l2097 0A8C                           l2249 03F0  
                         l2281 01D4                           l2273 01BC                           l2361 06FC  
                         l2353 06E4                           l2345 06AA                           l2265 015C  
                         l2257 00B6                           l2409 04F8                           l2195 0A64  
                         l2187 0764                           l2179 073E                           l2099 0B48  
                         l2291 021E                           l2283 01D6                           l2275 01C6  
                         l2267 019E                           l2355 06E6                           l2347 06CE  
                         l2259 00BA                           l2363 0982                           l2371 040E  
                         l1581 0AF2                           l2197 0A66                           l2189 0A52  
                         l2293 0230                           l2285 01E8                           l2277 01D0  
                         l2269 01A2                           l2357 06F0                           l2349 06D8  
                         l2365 099A                           l2381 0442                           l1583 0B04  
                         l2199 0A68                           l2295 0242                           l2287 01FA  
                         l2279 01D2                           l2359 06F2                           l2367 09A6  
                         l2391 0484                           l2383 044E                           l1577 0B32  
                         l1585 0B06                           l2297 0254                           l2289 020C  
                         l2369 09B2                           l2393 04A0                           l2385 045A  
                         l2377 0416                           l1579 0AEA                           l2299 0266  
                         l2387 0466                           l2379 0436                           l2389 047C  
                         l2821 05EE                           l2813 05DA                           l2399 04A8  
                         l2831 0600                           l2823 05F2                           l2815 05DE  
                         l2841 0620                           l2833 0604                           l2825 05F6  
                         l2817 05E2                           l2851 0640                           l2843 0624  
                         l2835 060C                           l2827 05F8                           l2819 05EE  
                         l2853 0654                           l2845 0628                           l2837 0614  
                         l2829 05FC                           l2847 0630                           l2839 061C  
                         l2849 0638                           u1200 0738                           u1120 0A8C  
                         u1201 0734                           u1121 0A88                           u1210 0754  
                         u1130 0AA2                           u1211 0750                           u1131 0A9E  
                         u1140 0A3A                           u1220 004E                           u1141 0A32  
                         u1301 024C                           u1221 004A                           u1230 0118  
                         u1311 025E                           u1231 0114                           u1160 09DA  
                         u1161 09D6                           u1321 0270                           u1241 01E0  
                         u1170 09F0                           u1330 0290                           u1410 04A0  
                         u1171 09EC                           u1331 028C                           u1251 01F2  
                         u1411 049C                           u1180 0A06                           u1340 029E  
                         u1420 0534                           u1181 0A02                           u1341 029A  
                         u1261 0204                           u1421 0530                           u1190 071A  
                         u1158 0A3C                           u1350 02AC                           u1191 0716  
                         u1351 02A8                           u1271 0216                           u1360 02C2  
                         u1361 02BE                           u1281 0228                           u1370 02D4  
                         u1371 02D0                           u1291 023A                           u2307 01B2  
                         u2317 054C                           u2327 057E                           u2337 05B0  
                         _T2PR 000FBC                     _Black_rule 00C0                           u2347 02EC  
                         u2357 031E                           u2277 0470                           u2367 0350  
                         u2287 0502                           u2377 0382                           u2297 09BC  
                         u2387 03B0                           _main 05DA                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 005A                           _stop 0982                           prodh 000FF4  
                         prodl 000FF3                           start 002E         __end_of_color_read_Red 0892  
              __end_of_HighISR 002E                   ___param_bank 000000                          ?_main 0001  
                        ?_stop 0014                    _Black_setup 002E                __end_of___lwdiv 0774  
                        i2l271 0B60                          i2l384 002A                          _TMR0H 000FD4  
                        _TMR0L 000FD3     __end_of_I2C_2_Master_Start 0B52     __end_of_I2C_2_Master_Write 0B32  
                        _index 0056                          tablat 000FF5                          plusw1 000FE3  
                        plusw2 000FDB                          ttemp5 005B                          ttemp6 005E  
                        ttemp7 0062                          status 000FD8                          wtemp8 005B  
                   _Green_rule 00A8        __end_of_color_read_Blue 0982          _I2C_2_Master_RepStart 0B52  
              ?_color_read_Red 0005                __initialization 0774                   __end_of_main 0670  
                 __end_of_stop 09CC                         ??_main 001C                         ??_stop 0018  
                __activetblptr 000000                   ?_setMotorPWM 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         i2l1575 0B5C  
                       i2l1831 0026                         i2l1823 000A                         i2l1825 001A  
                       i2l1827 001E                         i2l1829 0022                         _RG6PPS 000E88  
                    ??_HighISR 0001       __end_of_color_click_init 02D6                  ??_Timer0_init 0001  
                 _CCPTMRS0bits 000FAD                         ___wmul 0AA4                      ??___lwdiv 000B  
                  _Color_rules 0100                         clear_0 07BA                         clear_1 07C6  
                       clear_2 07D2                         isa$std 000001          calibrate_black@clear1 0010  
        calibrate_black@clear2 0012                   __pdataCOMRAM 002E                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                 _Lightblue_rule 006C  
                   _White_rule 0060                         stop@mL 0014                         stop@mR 0016  
            ??_initDCmotorsPWM 0003               __end_of_turnLeft 0536          __end_of_set_led_color 0A10  
                   __accesstop 0060        __end_of__initialization 07D8       __end_of_color_read_Clear 0932  
     __end_of_color_read_Green 08E2         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001  
             ?_color_read_Blue 0005                _Interrupts_init 0B32                 __pcstackCOMRAM 0001  
                 __pidataBANK0 07E2            __end_of_Timer0_init 0B0A                     __pbssBANK0 00C0  
                   __pbssBANK1 0100              _color_writetoaddr 0ACA                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0003                        ?___wmul 0001            ??_color_writetoaddr 0004  
                      i2u75_40 001A                        i2u75_41 0016                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5                    _Orange_rule 0078        __end_of_Interrupts_init 0B3E  
       color_writetoaddr@value 0003               ??_color_read_Red 0007                        _HighISR 0008  
    __end_of_color_writetoaddr 0AEA             _I2C_2_Master_Start 0B48             _I2C_2_Master_Write 0B26  
                      __Hparam 0000                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 0AEA            ?_I2C_2_Master_Start 0001                        ___lwdiv 0700  
          ?_I2C_2_Master_Write 0001                        __pcinit 0774                        __ramtop 0E00  
                    ?_turnLeft 0014                        __ptext0 05DA                        __ptext1 040E  
                      __ptext2 0982                        __ptext3 0032                        __ptext4 0AA4  
                      __ptext5 0670                        __ptext6 019E                        __ptext7 0ACA  
                      __ptext8 0536                        __ptext9 02D6                      _T2CONbits 000FBD  
                      _seconds 0058                      _T2HLTbits 000FBE           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 07D8              ?_color_click_init 0001  
           ??_color_click_init 0016                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                    _White_setup 003A  
              _initDCmotorsPWM 0670                     ??_turnLeft 0018                      _PORTFbits 000F8E  
           setMotorPWM@negDuty 0013                    _Yellow_rule 0090                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
         _calibrate_black$2445 0014       color_writetoaddr@address 0004        ??_I2C_2_Master_RepStart 0002  
             ?_Interrupts_init 0001                    _CCP1CONbits 000FAB              _increment_seconds 0B5C  
            ?_color_read_Clear 0005                    _CCP2CONbits 000FA7              ??_calibrate_black 000E  
            ?_color_read_Green 0005                    _CCP3CONbits 000F26                    _CCP4CONbits 000F22  
                   main@motorL 001C                     main@motorR 0025              ??_calibrate_white 000C  
           ?_increment_seconds 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
                    _Blue_rule 009C            ??_increment_seconds 0001                 __end_of___wmul 0ACA  
                __pidataCOMRAM 0B0A            color_read_Clear@tmp 000A            start_initialization 0774  
    __end_of_increment_seconds 0B62                      _Pink_rule 0084            color_read_Green@tmp 000A  
      __end_of_initDCmotorsPWM 0700                       ??___wmul 0005                    __pdataBANK0 0060  
                  __pbssCOMRAM 004A                       ?_HighISR 0001               ___lwdiv@dividend 0007  
                 ?_Timer0_init 0001                      __pintcode 0008                       ?___lwdiv 0007  
         I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004              _I2C_2_Master_Idle 0A7C  
            _I2C_2_Master_Init 0A52              _I2C_2_Master_Read 0A10              _I2C_2_Master_Stop 0B3E  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 000F79  
                _set_led_color 09CC            ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B  
                     _LATEbits 000F7D                       _LATFbits 000F7E                       _LATGbits 000F7F  
                     _PIE0bits 000E29                       _PIE2bits 000E2B                       _PIR0bits 000E33  
             ?_initDCmotorsPWM 0001                      _wall_coef 0048                      _wait_time 0046  
                     _SSP2CON2 000EDA                       _SSP2STAT 000ED8             set_led_color@color 0001  
    __end_of_I2C_2_Master_Idle 0AA4      __end_of_I2C_2_Master_Init 0A7C      __end_of_I2C_2_Master_Read 0A52  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 0B48                   setMotorPWM@m 000E  
  I2C_2_Master_Write@data_byte 0002                  _movement_list 016C              ??_color_read_Blue 0007  
              _calibrate_black 02D6                _calibrate_white 0536                      copy_data0 0788  
                    copy_data1 07A8                 ?_set_led_color 0001  __end_of_I2C_2_Master_RepStart 0B5C  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 019E                       _Red_rule 00B4  
                     __Hrparam 0000                       __Lrparam 0000                     _ANSELDbits 000EA7  
                   _ANSELFbits 000EB4                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 0009                ___lwdiv@counter 000D                       __ptext10 09CC  
                     __ptext11 0842                       __ptext20 0A7C                       __ptext12 0892  
                     __ptext21 0700                       __ptext13 08E2                       __ptext22 0A52  
                     __ptext14 0932                       __ptext23 0AEA                       __ptext15 0B26  
                     __ptext24 0B32                       __ptext16 0B3E                       __ptext17 0B48  
                     __ptext26 0B5C                       __ptext18 0B52                       __ptext19 0A10  
                 _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA                     turnLeft@mL 0014  
                   turnLeft@mR 0016                       isa$xinst 000000                       int$flags 005A  
      __end_of_calibrate_black 040E                       _turnLeft 040E        __end_of_calibrate_white 05DA  
                   _INTCONbits 000FF2                    _setMotorPWM 0032                ??_set_led_color 0003  
                     intlevel2 0000                      turnLeft@i 001A               _color_click_init 019E  
                   _SSP2DATPPS 000E1D                     _SSP2CLKPPS 000E1C  
