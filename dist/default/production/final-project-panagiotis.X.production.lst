

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 08 11:39:45 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 06/04/2022 GMT
    63                           ; 
    64                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F67K40 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000000                     
    97                           	psect	idataCOMRAM
    98   001B76                     __pidataCOMRAM:
    99                           	callstack 0
   100                           
   101                           ;initializer for _Black_setup
   102   001B76  0404               	dw	1028
   103   001B78  0000               	dw	0
   104   001B7A  024B               	dw	587
   105   001B7C  0000               	dw	0
   106   001B7E  00A1               	dw	161
   107   001B80  0000               	dw	0
   108                           
   109                           ;initializer for _wall_coef
   110   001B82  000F               	dw	15
   111                           
   112                           	psect	idataBANK0
   113   0017AA                     __pidataBANK0:
   114                           	callstack 0
   115                           
   116                           ;initializer for _White_setup
   117   0017AA  28FC               	dw	10492
   118   0017AC  0000               	dw	0
   119   0017AE  1B55               	dw	6997
   120   0017B0  0000               	dw	0
   121   0017B2  0770               	dw	1904
   122   0017B4  0000               	dw	0
   123                           
   124                           ;initializer for _Lightblue_rule
   125   0017B6  0026               	dw	38
   126   0017B8  0000               	dw	0
   127   0017BA  0048               	dw	72
   128   0017BC  0000               	dw	0
   129   0017BE  0054               	dw	84
   130   0017C0  0000               	dw	0
   131                           
   132                           ;initializer for _Orange_rule
   133   0017C2  005C               	dw	92
   134   0017C4  0000               	dw	0
   135   0017C6  0027               	dw	39
   136   0017C8  0000               	dw	0
   137   0017CA  001C               	dw	28
   138   0017CC  0000               	dw	0
   139                           
   140                           ;initializer for _Pink_rule
   141   0017CE  004D               	dw	77
   142   0017D0  0000               	dw	0
   143   0017D2  003C               	dw	60
   144   0017D4  0000               	dw	0
   145   0017D6  0040               	dw	64
   146   0017D8  0000               	dw	0
   147                           
   148                           ;initializer for _Yellow_rule
   149   0017DA  005D               	dw	93
   150   0017DC  0000               	dw	0
   151   0017DE  004C               	dw	76
   152   0017E0  0000               	dw	0
   153   0017E2  0014               	dw	20
   154   0017E4  0000               	dw	0
   155                           
   156                           ;initializer for _Blue_rule
   157   0017E6  0003               	dw	3
   158   0017E8  0000               	dw	0
   159   0017EA  0009               	dw	9
   160   0017EC  0000               	dw	0
   161   0017EE  0024               	dw	36
   162   0017F0  0000               	dw	0
   163                           
   164                           ;initializer for _Green_rule
   165   0017F2  0019               	dw	25
   166   0017F4  0000               	dw	0
   167   0017F6  0036               	dw	54
   168   0017F8  0000               	dw	0
   169   0017FA  0008               	dw	8
   170   0017FC  0000               	dw	0
   171                           
   172                           ;initializer for _Red_rule
   173   0017FE  0048               	dw	72
   174   001800  0000               	dw	0
   175   001802  0002               	dw	2
   176   001804  0000               	dw	0
   177   001806  0002               	dw	2
   178   001808  0000               	dw	0
   179                           
   180                           ;initializer for _wait_time
   181   00180A  00DC               	dw	220
   182                           
   183                           	psect	idataBANK1
   184   001B84                     __pidataBANK1:
   185                           	callstack 0
   186                           
   187                           ;initializer for _White_rule
   188   001B84  0064               	dw	100
   189   001B86  0000               	dw	0
   190   001B88  0064               	dw	100
   191   001B8A  0000               	dw	0
   192   001B8C  0064               	dw	100
   193   001B8E  0000               	dw	0
   194   000000                     _T0CON0bits	set	4053
   195   000000                     _T0CON1bits	set	4054
   196   000000                     _TRISDbits	set	3972
   197   000000                     _SSP2CON2bits	set	3802
   198   000000                     _SSP2CLKPPS	set	3612
   199   000000                     _SSP2DATPPS	set	3613
   200   000000                     _RC7PPS	set	3689
   201   000000                     _RE2PPS	set	3700
   202   000000                     _ANSELFbits	set	3764
   203   000000                     _TRISAbits	set	3969
   204   000000                     _TRISFbits	set	3974
   205   000000                     _PORTFbits	set	3982
   206   000000                     _TRISGbits	set	3975
   207   000000                     _TRISCbits	set	3971
   208   000000                     _TRISEbits	set	3973
   209   000000                     _SSP2BUF	set	3797
   210   000000                     _SSP2ADD	set	3798
   211   000000                     _SSP2CON1bits	set	3801
   212   000000                     _LATAbits	set	3961
   213   000000                     _LATGbits	set	3967
   214   000000                     _CCPR4H	set	3873
   215   000000                     _CCPR3H	set	3877
   216   000000                     _T2PR	set	4028
   217   000000                     _T2CONbits	set	4029
   218   000000                     _CCPR2H	set	4006
   219   000000                     _CCPR1H	set	4010
   220   000000                     _LATCbits	set	3963
   221   000000                     _LATEbits	set	3965
   222   000000                     _LATFbits	set	3966
   223   000000                     _RE4PPS	set	3702
   224   000000                     _RG6PPS	set	3720
   225   000000                     _RD5PPS	set	3695
   226   000000                     _ANSELDbits	set	3751
   227   000000                     _TMR0L	set	4051
   228   000000                     _TMR0H	set	4052
   229   000000                     _INTCONbits	set	4082
   230   000000                     _T2CLKCONbits	set	4031
   231   000000                     _T2HLTbits	set	4030
   232   000000                     _CCP1CONbits	set	4011
   233   000000                     _CCPTMRS0bits	set	4013
   234   000000                     _CCP2CONbits	set	4007
   235   000000                     _CCP3CONbits	set	3878
   236   000000                     _CCP4CONbits	set	3874
   237   000000                     _SSP2CON2	set	3802
   238   000000                     _SSP2STAT	set	3800
   239   000000                     _PIE0bits	set	3625
   240   000000                     _RD6PPS	set	3696
   241   000000                     _PIE2bits	set	3627
   242   000000                     _PIR0bits	set	3635
   243                           
   244                           ; #config settings
   245                           
   246                           	psect	cinit
   247   001642                     __pcinit:
   248                           	callstack 0
   249   001642                     start_initialization:
   250                           	callstack 0
   251   001642                     __initialization:
   252                           	callstack 0
   253                           
   254                           ; Initialize objects allocated to BANK1 (12 bytes)
   255                           ; load TBLPTR registers with __pidataBANK1
   256   001642  0E84               	movlw	low __pidataBANK1
   257   001644  6EF6               	movwf	tblptrl,c
   258   001646  0E1B               	movlw	high __pidataBANK1
   259   001648  6EF7               	movwf	tblptrh,c
   260   00164A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   261   00164C  6EF8               	movwf	tblptru,c
   262   00164E  EE01  F0DC         	lfsr	0,__pdataBANK1
   263   001652  EE10 F00C          	lfsr	1,12
   264   001656                     copy_data0:
   265   001656  0009               	tblrd		*+
   266   001658  CFF5 FFEE          	movff	tablat,postinc0
   267   00165C  50E5               	movf	postdec1,w,c
   268   00165E  50E1               	movf	fsr1l,w,c
   269   001660  E1FA               	bnz	copy_data0
   270                           
   271                           ; Initialize objects allocated to BANK0 (98 bytes)
   272                           ; load TBLPTR registers with __pidataBANK0
   273   001662  0EAA               	movlw	low __pidataBANK0
   274   001664  6EF6               	movwf	tblptrl,c
   275   001666  0E17               	movlw	high __pidataBANK0
   276   001668  6EF7               	movwf	tblptrh,c
   277   00166A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   278   00166C  6EF8               	movwf	tblptru,c
   279   00166E  EE00  F060         	lfsr	0,__pdataBANK0
   280   001672  EE10 F062          	lfsr	1,98
   281   001676                     copy_data1:
   282   001676  0009               	tblrd		*+
   283   001678  CFF5 FFEE          	movff	tablat,postinc0
   284   00167C  50E5               	movf	postdec1,w,c
   285   00167E  50E1               	movf	fsr1l,w,c
   286   001680  E1FA               	bnz	copy_data1
   287                           
   288                           ; Initialize objects allocated to COMRAM (14 bytes)
   289                           ; load TBLPTR registers with __pidataCOMRAM
   290   001682  0E76               	movlw	low __pidataCOMRAM
   291   001684  6EF6               	movwf	tblptrl,c
   292   001686  0E1B               	movlw	high __pidataCOMRAM
   293   001688  6EF7               	movwf	tblptrh,c
   294   00168A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   295   00168C  6EF8               	movwf	tblptru,c
   296   00168E  EE00  F04D         	lfsr	0,__pdataCOMRAM
   297   001692  EE10 F00E          	lfsr	1,14
   298   001696                     copy_data2:
   299   001696  0009               	tblrd		*+
   300   001698  CFF5 FFEE          	movff	tablat,postinc0
   301   00169C  50E5               	movf	postdec1,w,c
   302   00169E  50E1               	movf	fsr1l,w,c
   303   0016A0  E1FA               	bnz	copy_data2
   304                           
   305                           ; Clear objects allocated to BANK1 (220 bytes)
   306   0016A2  EE01  F000         	lfsr	0,__pbssBANK1
   307   0016A6  0EDC               	movlw	220
   308   0016A8                     clear_0:
   309   0016A8  6AEE               	clrf	postinc0,c
   310   0016AA  06E8               	decf	wreg,f,c
   311   0016AC  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to BANK0 (12 bytes)
   314   0016AE  EE00  F0EE         	lfsr	0,__pbssBANK0
   315   0016B2  0E0C               	movlw	12
   316   0016B4                     clear_1:
   317   0016B4  6AEE               	clrf	postinc0,c
   318   0016B6  06E8               	decf	wreg,f,c
   319   0016B8  E1FD               	bnz	clear_1
   320                           
   321                           ; Clear objects allocated to COMRAM (4 bytes)
   322   0016BA  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   323   0016BC  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   324   0016BE  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   325   0016C0  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   326   0016C2                     end_of_initialization:
   327                           	callstack 0
   328   0016C2                     __end_of__initialization:
   329                           	callstack 0
   330   0016C2  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   331   0016C4  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   332   0016C6  0100               	movlb	0
   333   0016C8  EF06  F009         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMRAM
   336   00005B                     __pbssCOMRAM:
   337                           	callstack 0
   338   00005B                     _index:
   339                           	callstack 0
   340   00005B                     	ds	2
   341   00005D                     _seconds:
   342                           	callstack 0
   343   00005D                     	ds	2
   344                           
   345                           	psect	dataCOMRAM
   346   00004D                     __pdataCOMRAM:
   347                           	callstack 0
   348   00004D                     _Black_setup:
   349                           	callstack 0
   350   00004D                     	ds	12
   351   000059                     _wall_coef:
   352                           	callstack 0
   353   000059                     	ds	2
   354                           
   355                           	psect	bssBANK0
   356   0000EE                     __pbssBANK0:
   357                           	callstack 0
   358   0000EE                     _RGB:
   359                           	callstack 0
   360   0000EE                     	ds	12
   361                           
   362                           	psect	dataBANK0
   363   000060                     __pdataBANK0:
   364                           	callstack 0
   365   000060                     _White_setup:
   366                           	callstack 0
   367   000060                     	ds	12
   368   00006C                     _Lightblue_rule:
   369                           	callstack 0
   370   00006C                     	ds	12
   371   000078                     _Orange_rule:
   372                           	callstack 0
   373   000078                     	ds	12
   374   000084                     _Pink_rule:
   375                           	callstack 0
   376   000084                     	ds	12
   377   000090                     _Yellow_rule:
   378                           	callstack 0
   379   000090                     	ds	12
   380   00009C                     _Blue_rule:
   381                           	callstack 0
   382   00009C                     	ds	12
   383   0000A8                     _Green_rule:
   384                           	callstack 0
   385   0000A8                     	ds	12
   386   0000B4                     _Red_rule:
   387                           	callstack 0
   388   0000B4                     	ds	12
   389   0000C0                     _wait_time:
   390                           	callstack 0
   391   0000C0                     	ds	2
   392                           
   393                           	psect	bssBANK1
   394   000100                     __pbssBANK1:
   395                           	callstack 0
   396   000100                     _Color_rules:
   397                           	callstack 0
   398   000100                     	ds	108
   399   00016C                     _movement_list:
   400                           	callstack 0
   401   00016C                     	ds	100
   402   0001D0                     _Black_rule:
   403                           	callstack 0
   404   0001D0                     	ds	12
   405                           
   406                           	psect	dataBANK1
   407   0001DC                     __pdataBANK1:
   408                           	callstack 0
   409   0001DC                     _White_rule:
   410                           	callstack 0
   411   0001DC                     	ds	12
   412                           
   413                           	psect	cstackBANK0
   414   0000C2                     __pcstackBANK0:
   415                           	callstack 0
   416   0000C2                     _get_color_code$2447:
   417                           	callstack 0
   418                           
   419                           ; 12 bytes @ 0x0
   420   0000C2                     	ds	12
   421   0000CE                     _get_color_code$458:
   422                           	callstack 0
   423                           
   424                           ; 4 bytes @ 0xC
   425   0000CE                     	ds	4
   426   0000D2                     _get_color_code$459:
   427                           	callstack 0
   428                           
   429                           ; 4 bytes @ 0x10
   430   0000D2                     	ds	4
   431   0000D6                     _get_color_code$460:
   432                           	callstack 0
   433                           
   434                           ; 4 bytes @ 0x14
   435   0000D6                     	ds	4
   436   0000DA                     get_color_code@min_value:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x18
   440   0000DA                     	ds	2
   441   0000DC                     get_color_code@min_index:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x1A
   445   0000DC                     	ds	2
   446   0000DE                     get_color_code@value:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x1C
   450   0000DE                     	ds	2
   451   0000E0                     get_color_code@i:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x1E
   455   0000E0                     	ds	2
   456   0000E2                     get_color_code@NormalizedRGB:
   457                           	callstack 0
   458                           
   459                           ; 12 bytes @ 0x20
   460   0000E2                     	ds	12
   461                           
   462                           	psect	cstackCOMRAM
   463   000001                     __pcstackCOMRAM:
   464                           	callstack 0
   465   000001                     ??_add_seconds_to_list:
   466   000001                     ??_I2C_2_Master_Idle:
   467   000001                     ?___wmul:
   468                           	callstack 0
   469   000001                     ?___lmul:
   470                           	callstack 0
   471   000001                     set_led_color@color:
   472                           	callstack 0
   473   000001                     initDCmotorsPWM@PWMperiod:
   474                           	callstack 0
   475   000001                     ___wmul@multiplier:
   476                           	callstack 0
   477   000001                     ___lmul@multiplier:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0x0
   481   000001                     	ds	1
   482   000002                     ??_I2C_2_Master_Read:
   483   000002                     I2C_2_Master_Write@data_byte:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487   000002                     	ds	1
   488   000003                     color_writetoaddr@value:
   489                           	callstack 0
   490   000003                     I2C_2_Master_Read@ack:
   491                           	callstack 0
   492   000003                     ___wmul@multiplicand:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496   000003                     	ds	1
   497   000004                     color_writetoaddr@address:
   498                           	callstack 0
   499   000004                     I2C_2_Master_Read@tmp:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0x3
   503   000004                     	ds	1
   504   000005                     ?_color_read_Red:
   505                           	callstack 0
   506   000005                     ?_color_read_Blue:
   507                           	callstack 0
   508   000005                     ?_color_read_Green:
   509                           	callstack 0
   510   000005                     ?_color_read_Clear:
   511                           	callstack 0
   512   000005                     ___wmul@product:
   513                           	callstack 0
   514   000005                     ___lmul@multiplicand:
   515                           	callstack 0
   516                           
   517                           ; 4 bytes @ 0x4
   518   000005                     	ds	2
   519   000007                     ??_color_read_Red:
   520   000007                     ??_color_read_Blue:
   521   000007                     ??_color_read_Green:
   522   000007                     ??_color_read_Clear:
   523   000007                     ?_get_color_distance:
   524                           	callstack 0
   525   000007                     ?___lwdiv:
   526                           	callstack 0
   527   000007                     ___lwdiv@dividend:
   528                           	callstack 0
   529   000007                     get_color_distance@color1:
   530                           	callstack 0
   531                           
   532                           ; 12 bytes @ 0x6
   533   000007                     	ds	2
   534   000009                     ___lwdiv@divisor:
   535                           	callstack 0
   536   000009                     ___lmul@product:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x8
   540   000009                     	ds	1
   541   00000A                     color_read_Red@tmp:
   542                           	callstack 0
   543   00000A                     color_read_Blue@tmp:
   544                           	callstack 0
   545   00000A                     color_read_Green@tmp:
   546                           	callstack 0
   547   00000A                     color_read_Clear@tmp:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x9
   551   00000A                     	ds	1
   552   00000B                     ___lwdiv@quotient:
   553                           	callstack 0
   554                           
   555                           ; 2 bytes @ 0xA
   556   00000B                     	ds	1
   557   00000C                     ??_calibrate_white:
   558   00000C                     ?_get_wall_presence:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0xB
   562   00000C                     	ds	1
   563   00000D                     ?___lldiv:
   564                           	callstack 0
   565   00000D                     ___lwdiv@counter:
   566                           	callstack 0
   567   00000D                     ___lldiv@dividend:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0xC
   571   00000D                     	ds	1
   572   00000E                     ??_calibrate_black:
   573   00000E                     ??_get_wall_presence:
   574   00000E                     setMotorPWM@m:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0xD
   578   00000E                     	ds	2
   579   000010                     ??_setMotorPWM:
   580   000010                     calibrate_black@clear1:
   581                           	callstack 0
   582   000010                     get_wall_presence@clear1:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0xF
   586   000010                     	ds	1
   587   000011                     ___lldiv@divisor:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x10
   591   000011                     	ds	1
   592   000012                     setMotorPWM@posDuty:
   593                           	callstack 0
   594   000012                     calibrate_black@clear2:
   595                           	callstack 0
   596   000012                     get_wall_presence@clear2:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x11
   600   000012                     	ds	1
   601   000013                     setMotorPWM@negDuty:
   602                           	callstack 0
   603   000013                     get_color_distance@color2:
   604                           	callstack 0
   605                           
   606                           ; 12 bytes @ 0x12
   607   000013                     	ds	1
   608   000014                     stop@mL:
   609                           	callstack 0
   610   000014                     turnLeft@mL:
   611                           	callstack 0
   612   000014                     turnRight@mL:
   613                           	callstack 0
   614   000014                     turnLeftLong@mL:
   615                           	callstack 0
   616   000014                     turnRightLong@mL:
   617                           	callstack 0
   618   000014                     fullSpeedAhead@mL:
   619                           	callstack 0
   620   000014                     _calibrate_black$2448:
   621                           	callstack 0
   622                           
   623                           ; 2 bytes @ 0x13
   624   000014                     	ds	1
   625   000015                     ___lldiv@quotient:
   626                           	callstack 0
   627                           
   628                           ; 4 bytes @ 0x14
   629   000015                     	ds	1
   630   000016                     ??_color_click_init:
   631   000016                     stop@mR:
   632                           	callstack 0
   633   000016                     turnLeft@mR:
   634                           	callstack 0
   635   000016                     turnRight@mR:
   636                           	callstack 0
   637   000016                     turnLeftLong@mR:
   638                           	callstack 0
   639   000016                     turnRightLong@mR:
   640                           	callstack 0
   641   000016                     fullSpeedAhead@mR:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0x15
   645   000016                     	ds	2
   646   000018                     ??_stop:
   647   000018                     ??_turnLeft:
   648   000018                     ??_turnRight:
   649   000018                     ??_turnLeftLong:
   650   000018                     ??_turnRightLong:
   651   000018                     
   652                           ; 1 bytes @ 0x17
   653   000018                     	ds	1
   654   000019                     ___lldiv@counter:
   655                           	callstack 0
   656                           
   657                           ; 1 bytes @ 0x18
   658   000019                     	ds	1
   659   00001A                     turnLeft@i:
   660                           	callstack 0
   661   00001A                     turnRight@i:
   662                           	callstack 0
   663   00001A                     turnLeftLong@i:
   664                           	callstack 0
   665   00001A                     turnRightLong@i:
   666                           	callstack 0
   667   00001A                     moveBack@mL:
   668                           	callstack 0
   669                           
   670                           ; 2 bytes @ 0x19
   671   00001A                     	ds	2
   672   00001C                     moveBack@mR:
   673                           	callstack 0
   674   00001C                     RobotMovement@color:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x1B
   678   00001C                     	ds	2
   679   00001E                     moveBack@time:
   680                           	callstack 0
   681   00001E                     RobotMovement@motorL:
   682                           	callstack 0
   683                           
   684                           ; 2 bytes @ 0x1D
   685   00001E                     	ds	1
   686   00001F                     ??_get_color_distance:
   687                           
   688                           ; 1 bytes @ 0x1E
   689   00001F                     	ds	1
   690   000020                     ??_moveBack:
   691   000020                     RobotMovement@motorR:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x1F
   695   000020                     	ds	2
   696   000022                     
   697                           ; 1 bytes @ 0x21
   698   000022                     	ds	1
   699   000023                     _get_color_distance$417:
   700                           	callstack 0
   701                           
   702                           ; 4 bytes @ 0x22
   703   000023                     	ds	1
   704   000024                     RobotMovement@i:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x23
   708   000024                     	ds	2
   709   000026                     RobotMovement@i_1276:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x25
   713   000026                     	ds	1
   714   000027                     _get_color_distance$419:
   715                           	callstack 0
   716                           
   717                           ; 4 bytes @ 0x26
   718   000027                     	ds	4
   719   00002B                     _get_color_distance$421:
   720                           	callstack 0
   721                           
   722                           ; 4 bytes @ 0x2A
   723   00002B                     	ds	4
   724   00002F                     get_color_distance@R_offset:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x2E
   728   00002F                     	ds	2
   729   000031                     get_color_distance@G_offset:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x30
   733   000031                     	ds	2
   734   000033                     get_color_distance@B_offset:
   735                           	callstack 0
   736                           
   737                           ; 2 bytes @ 0x32
   738   000033                     	ds	2
   739   000035                     ?_get_color_code:
   740                           	callstack 0
   741                           
   742                           ; 2 bytes @ 0x34
   743   000035                     	ds	2
   744   000037                     ??_get_color_code:
   745                           
   746                           ; 1 bytes @ 0x36
   747   000037                     	ds	2
   748   000039                     main@color_code:
   749                           	callstack 0
   750                           
   751                           ; 2 bytes @ 0x38
   752   000039                     	ds	2
   753   00003B                     main@motorL:
   754                           	callstack 0
   755                           
   756                           ; 9 bytes @ 0x3A
   757   00003B                     	ds	9
   758   000044                     main@motorR:
   759                           	callstack 0
   760                           
   761                           ; 9 bytes @ 0x43
   762   000044                     	ds	9
   763                           
   764 ;;
   765 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   766 ;;
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 17 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  color_code      2   56[COMRAM] unsigned int 
   774 ;;  motorR          9   67[COMRAM] struct DC_motor
   775 ;;  motorL          9   58[COMRAM] struct DC_motor
   776 ;;  PWMcycle        2    0        unsigned int 
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   789 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   790 ;;Total ram usage:       20 bytes
   791 ;; Hardware stack levels required when called: 7
   792 ;; This function calls:
   793 ;;		_Interrupts_init
   794 ;;		_RobotMovement
   795 ;;		_Timer0_init
   796 ;;		_add_seconds_to_list
   797 ;;		_color_click_init
   798 ;;		_fullSpeedAhead
   799 ;;		_get_color_code
   800 ;;		_get_wall_presence
   801 ;;		_initDCmotorsPWM
   802 ;;		_moveBack
   803 ;;		_stop
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           	psect	text0
   810   00120C                     __ptext0:
   811                           	callstack 0
   812   00120C                     _main:
   813                           	callstack 24
   814   00120C                     
   815                           ;main.c: 18:     Timer0_init();
   816   00120C  ECAB  F00D         	call	_Timer0_init	;wreg free
   817   001210                     
   818                           ;main.c: 19:     Interrupts_init();
   819   001210  ECCE  F00D         	call	_Interrupts_init	;wreg free
   820   001214                     
   821                           ;main.c: 20:     initDCmotorsPWM(99);
   822   001214  0E00               	movlw	0
   823   001216  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   824   001218  0E63               	movlw	99
   825   00121A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   826   00121C  ECD9  F00A         	call	_initDCmotorsPWM	;wreg free
   827   001220                     
   828                           ;main.c: 22:     color_click_init();
   829   001220  EC7E  F005         	call	_color_click_init	;wreg free
   830   001224                     
   831                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   832   001224  010E               	movlb	14	; () banked
   833   001226  95B4               	bcf	180,2,b	;volatile
   834   001228                     
   835                           ; BSR set to: 14
   836                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   837   001228  8486               	bsf	134,2,c	;volatile
   838   00122A                     
   839                           ; BSR set to: 14
   840                           ;main.c: 26:     DC_motor motorL, motorR;;main.c: 27:     motorL.power=0;
   841   00122A  0E00               	movlw	0
   842   00122C  6E3B               	movwf	main@motorL^0,c
   843   00122E                     
   844                           ; BSR set to: 14
   845                           ;main.c: 28:     motorL.direction=1;
   846   00122E  0E01               	movlw	1
   847   001230  6E3C               	movwf	(main@motorL+1)^0,c
   848   001232                     
   849                           ; BSR set to: 14
   850                           ;main.c: 29:     motorL.brakemode=1;
   851   001232  0E01               	movlw	1
   852   001234  6E3D               	movwf	(main@motorL+2)^0,c
   853   001236                     
   854                           ; BSR set to: 14
   855                           ;main.c: 30:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   856   001236  0EAA               	movlw	170
   857   001238  6E40               	movwf	(main@motorL+5)^0,c
   858   00123A  0E0F               	movlw	15
   859   00123C  6E41               	movwf	(main@motorL+6)^0,c
   860   00123E                     
   861                           ; BSR set to: 14
   862                           ;main.c: 31:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   863   00123E  0EA6               	movlw	166
   864   001240  6E42               	movwf	(main@motorL+7)^0,c
   865   001242  0E0F               	movlw	15
   866   001244  6E43               	movwf	(main@motorL+8)^0,c
   867   001246                     
   868                           ; BSR set to: 14
   869                           ;main.c: 32:     motorL.PWMperiod=PWMcycle;
   870   001246  0E00               	movlw	0
   871   001248  6E3F               	movwf	(main@motorL+4)^0,c
   872   00124A  0E63               	movlw	99
   873   00124C  6E3E               	movwf	(main@motorL+3)^0,c
   874   00124E                     
   875                           ; BSR set to: 14
   876                           ;main.c: 34:     motorR.power=0;
   877   00124E  0E00               	movlw	0
   878   001250  6E44               	movwf	main@motorR^0,c
   879   001252                     
   880                           ; BSR set to: 14
   881                           ;main.c: 35:     motorR.direction=1;
   882   001252  0E01               	movlw	1
   883   001254  6E45               	movwf	(main@motorR+1)^0,c
   884   001256                     
   885                           ; BSR set to: 14
   886                           ;main.c: 36:     motorR.brakemode=1;
   887   001256  0E01               	movlw	1
   888   001258  6E46               	movwf	(main@motorR+2)^0,c
   889   00125A                     
   890                           ; BSR set to: 14
   891                           ;main.c: 37:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   892   00125A  0E25               	movlw	37
   893   00125C  6E49               	movwf	(main@motorR+5)^0,c
   894   00125E  0E0F               	movlw	15
   895   001260  6E4A               	movwf	(main@motorR+6)^0,c
   896   001262                     
   897                           ; BSR set to: 14
   898                           ;main.c: 38:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   899   001262  0E21               	movlw	33
   900   001264  6E4B               	movwf	(main@motorR+7)^0,c
   901   001266  0E0F               	movlw	15
   902   001268  6E4C               	movwf	(main@motorR+8)^0,c
   903   00126A                     
   904                           ; BSR set to: 14
   905                           ;main.c: 39:     motorR.PWMperiod=PWMcycle;
   906   00126A  0E00               	movlw	0
   907   00126C  6E48               	movwf	(main@motorR+4)^0,c
   908   00126E  0E63               	movlw	99
   909   001270  6E47               	movwf	(main@motorR+3)^0,c
   910   001272                     l2968:
   911                           
   912                           ;main.c: 41:     fullSpeedAhead(&motorL,&motorR);
   913   001272  0E3B               	movlw	low main@motorL
   914   001274  6E14               	movwf	fullSpeedAhead@mL^0,c
   915   001276  0E00               	movlw	high main@motorL
   916   001278  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   917   00127A  0E44               	movlw	low main@motorR
   918   00127C  6E16               	movwf	fullSpeedAhead@mR^0,c
   919   00127E  0E00               	movlw	high main@motorR
   920   001280  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   921   001282  EC06  F00C         	call	_fullSpeedAhead	;wreg free
   922   001286                     l2970:
   923                           
   924                           ;main.c: 43:         if(get_wall_presence() == 1){
   925   001286  EC8B  F00A         	call	_get_wall_presence	;wreg free
   926   00128A  040C               	decf	?_get_wall_presence^0,w,c
   927   00128C  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
   928   00128E  A4D8               	btfss	status,2,c
   929   001290  EF4C  F009         	goto	u2011
   930   001294  EF4E  F009         	goto	u2010
   931   001298                     u2011:
   932   001298  EF43  F009         	goto	l2970
   933   00129C                     u2010:
   934   00129C                     
   935                           ;main.c: 44:             add_seconds_to_list();
   936   00129C  ECF8  F00C         	call	_add_seconds_to_list	;wreg free
   937   0012A0                     
   938                           ;main.c: 45:             stop(&motorL,&motorR);
   939   0012A0  0E3B               	movlw	low main@motorL
   940   0012A2  6E14               	movwf	stop@mL^0,c
   941   0012A4  0E00               	movlw	high main@motorL
   942   0012A6  6E15               	movwf	(stop@mL+1)^0,c
   943   0012A8  0E44               	movlw	low main@motorR
   944   0012AA  6E16               	movwf	stop@mR^0,c
   945   0012AC  0E00               	movlw	high main@motorR
   946   0012AE  6E17               	movwf	(stop@mR+1)^0,c
   947   0012B0  ECD3  F00C         	call	_stop	;wreg free
   948   0012B4                     
   949                           ;main.c: 46:             unsigned int color_code = get_color_code();
   950   0012B4  EC43  F002         	call	_get_color_code	;wreg free
   951   0012B8  C035  F039         	movff	?_get_color_code,main@color_code
   952   0012BC  C036  F03A         	movff	?_get_color_code+1,main@color_code+1
   953   0012C0                     
   954                           ;main.c: 47:             moveBack(&motorL, &motorR, 10);
   955   0012C0  0E3B               	movlw	low main@motorL
   956   0012C2  6E1A               	movwf	moveBack@mL^0,c
   957   0012C4  0E00               	movlw	high main@motorL
   958   0012C6  6E1B               	movwf	(moveBack@mL+1)^0,c
   959   0012C8  0E44               	movlw	low main@motorR
   960   0012CA  6E1C               	movwf	moveBack@mR^0,c
   961   0012CC  0E00               	movlw	high main@motorR
   962   0012CE  6E1D               	movwf	(moveBack@mR+1)^0,c
   963   0012D0  0E00               	movlw	0
   964   0012D2  6E1F               	movwf	(moveBack@time+1)^0,c
   965   0012D4  0E0A               	movlw	10
   966   0012D6  6E1E               	movwf	moveBack@time^0,c
   967   0012D8  EC3B  F00A         	call	_moveBack	;wreg free
   968   0012DC                     
   969                           ;main.c: 48:             stop(&motorL,&motorR);
   970   0012DC  0E3B               	movlw	low main@motorL
   971   0012DE  6E14               	movwf	stop@mL^0,c
   972   0012E0  0E00               	movlw	high main@motorL
   973   0012E2  6E15               	movwf	(stop@mL+1)^0,c
   974   0012E4  0E44               	movlw	low main@motorR
   975   0012E6  6E16               	movwf	stop@mR^0,c
   976   0012E8  0E00               	movlw	high main@motorR
   977   0012EA  6E17               	movwf	(stop@mR+1)^0,c
   978   0012EC  ECD3  F00C         	call	_stop	;wreg free
   979   0012F0                     
   980                           ;main.c: 52:             RobotMovement(color_code, &motorL, &motorR);
   981   0012F0  C039  F01C         	movff	main@color_code,RobotMovement@color
   982   0012F4  C03A  F01D         	movff	main@color_code+1,RobotMovement@color+1
   983   0012F8  0E3B               	movlw	low main@motorL
   984   0012FA  6E1E               	movwf	RobotMovement@motorL^0,c
   985   0012FC  0E00               	movlw	high main@motorL
   986   0012FE  6E1F               	movwf	(RobotMovement@motorL+1)^0,c
   987   001300  0E44               	movlw	low main@motorR
   988   001302  6E20               	movwf	RobotMovement@motorR^0,c
   989   001304  0E00               	movlw	high main@motorR
   990   001306  6E21               	movwf	(RobotMovement@motorR+1)^0,c
   991   001308  EC19  F000         	call	_RobotMovement	;wreg free
   992   00130C                     
   993                           ;main.c: 53:             stop(&motorL,&motorR);
   994   00130C  0E3B               	movlw	low main@motorL
   995   00130E  6E14               	movwf	stop@mL^0,c
   996   001310  0E00               	movlw	high main@motorL
   997   001312  6E15               	movwf	(stop@mL+1)^0,c
   998   001314  0E44               	movlw	low main@motorR
   999   001316  6E16               	movwf	stop@mR^0,c
  1000   001318  0E00               	movlw	high main@motorR
  1001   00131A  6E17               	movwf	(stop@mR+1)^0,c
  1002   00131C  ECD3  F00C         	call	_stop	;wreg free
  1003   001320  EF39  F009         	goto	l2968
  1004   001324  EF17  F000         	goto	start
  1005   001328                     __end_of_main:
  1006                           	callstack 0
  1007                           
  1008 ;; *************** function _moveBack *****************
  1009 ;; Defined at:
  1010 ;;		line 274 in file "dc_motor.c"
  1011 ;; Parameters:    Size  Location     Type
  1012 ;;  mL              2   25[COMRAM] PTR struct DC_motor
  1013 ;;		 -> main@motorR(9), main@motorL(9), 
  1014 ;;  mR              2   27[COMRAM] PTR struct DC_motor
  1015 ;;		 -> main@motorR(9), main@motorL(9), 
  1016 ;;  time            2   29[COMRAM] unsigned int 
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      void 
  1021 ;; Registers used:
  1022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1028 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1030 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1032 ;;Total ram usage:        8 bytes
  1033 ;; Hardware stack levels used: 1
  1034 ;; Hardware stack levels required when called: 5
  1035 ;; This function calls:
  1036 ;;		_setMotorPWM
  1037 ;;		_stop
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text1
  1044   001476                     __ptext1:
  1045                           	callstack 0
  1046   001476                     _moveBack:
  1047                           	callstack 25
  1048   001476                     
  1049                           ;dc_motor.c: 274: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 275: {;dc_motor.c: 276:     seconds = 0;
  1050   001476  0E00               	movlw	0
  1051   001478  6E5E               	movwf	(_seconds+1)^0,c
  1052   00147A  0E00               	movlw	0
  1053   00147C  6E5D               	movwf	_seconds^0,c
  1054                           
  1055                           ;dc_motor.c: 277:     while (seconds<time)
  1056   00147E  EF75  F00A         	goto	l2772
  1057   001482                     l2760:
  1058                           
  1059                           ;dc_motor.c: 278:     {;dc_motor.c: 279:         (*mL).direction=0;
  1060   001482  EE20 F001          	lfsr	2,1
  1061   001486  501A               	movf	moveBack@mL^0,w,c
  1062   001488  26D9               	addwf	fsr2l,f,c
  1063   00148A  501B               	movf	(moveBack@mL+1)^0,w,c
  1064   00148C  22DA               	addwfc	fsr2h,f,c
  1065   00148E  0E00               	movlw	0
  1066   001490  6EDF               	movwf	indf2,c
  1067                           
  1068                           ;dc_motor.c: 280:         (*mR).direction=0;
  1069   001492  EE20 F001          	lfsr	2,1
  1070   001496  501C               	movf	moveBack@mR^0,w,c
  1071   001498  26D9               	addwf	fsr2l,f,c
  1072   00149A  501D               	movf	(moveBack@mR+1)^0,w,c
  1073   00149C  22DA               	addwfc	fsr2h,f,c
  1074   00149E  0E00               	movlw	0
  1075   0014A0  6EDF               	movwf	indf2,c
  1076   0014A2                     
  1077                           ;dc_motor.c: 281:         (*mL).power=50;
  1078   0014A2  C01A  FFD9         	movff	moveBack@mL,fsr2l
  1079   0014A6  C01B  FFDA         	movff	moveBack@mL+1,fsr2h
  1080   0014AA  0E32               	movlw	50
  1081   0014AC  6EDF               	movwf	indf2,c
  1082   0014AE                     
  1083                           ;dc_motor.c: 282:         (*mR).power=50;
  1084   0014AE  C01C  FFD9         	movff	moveBack@mR,fsr2l
  1085   0014B2  C01D  FFDA         	movff	moveBack@mR+1,fsr2h
  1086   0014B6  0E32               	movlw	50
  1087   0014B8  6EDF               	movwf	indf2,c
  1088   0014BA                     
  1089                           ;dc_motor.c: 283:         setMotorPWM(mL);
  1090   0014BA  C01A  F00E         	movff	moveBack@mL,setMotorPWM@m
  1091   0014BE  C01B  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  1092   0014C2  ECC8  F004         	call	_setMotorPWM	;wreg free
  1093   0014C6                     
  1094                           ;dc_motor.c: 284:         setMotorPWM(mR);
  1095   0014C6  C01C  F00E         	movff	moveBack@mR,setMotorPWM@m
  1096   0014CA  C01D  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  1097   0014CE  ECC8  F004         	call	_setMotorPWM	;wreg free
  1098   0014D2                     
  1099                           ;dc_motor.c: 285:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1100   0014D2  0E29               	movlw	41
  1101   0014D4  6E21               	movwf	(??_moveBack+1)^0,c
  1102   0014D6  0E96               	movlw	150
  1103   0014D8  6E20               	movwf	??_moveBack^0,c
  1104   0014DA  0E7F               	movlw	127
  1105   0014DC                     u2387:
  1106   0014DC  2EE8               	decfsz	wreg,f,c
  1107   0014DE  D7FE               	bra	u2387
  1108   0014E0  2E20               	decfsz	??_moveBack^0,f,c
  1109   0014E2  D7FC               	bra	u2387
  1110   0014E4  2E21               	decfsz	(??_moveBack+1)^0,f,c
  1111   0014E6  D7FA               	bra	u2387
  1112   0014E8  F000               	nop	
  1113   0014EA                     l2772:
  1114                           
  1115                           ;dc_motor.c: 277:     while (seconds<time)
  1116   0014EA  501E               	movf	moveBack@time^0,w,c
  1117   0014EC  5C5D               	subwf	_seconds^0,w,c
  1118   0014EE  501F               	movf	(moveBack@time+1)^0,w,c
  1119   0014F0  585E               	subwfb	(_seconds+1)^0,w,c
  1120   0014F2  A0D8               	btfss	status,0,c
  1121   0014F4  EF7E  F00A         	goto	u1751
  1122   0014F8  EF80  F00A         	goto	u1750
  1123   0014FC                     u1751:
  1124   0014FC  EF41  F00A         	goto	l2760
  1125   001500                     u1750:
  1126   001500                     
  1127                           ;dc_motor.c: 287:     stop(&mL,&mR);
  1128   001500  0E1A               	movlw	low moveBack@mL
  1129   001502  6E14               	movwf	stop@mL^0,c
  1130   001504  0E00               	movlw	high moveBack@mL
  1131   001506  6E15               	movwf	(stop@mL+1)^0,c
  1132   001508  0E1C               	movlw	low moveBack@mR
  1133   00150A  6E16               	movwf	stop@mR^0,c
  1134   00150C  0E00               	movlw	high moveBack@mR
  1135   00150E  6E17               	movwf	(stop@mR+1)^0,c
  1136   001510  ECD3  F00C         	call	_stop	;wreg free
  1137   001514  0012               	return		;funcret
  1138   001516                     __end_of_moveBack:
  1139                           	callstack 0
  1140                           
  1141 ;; *************** function _stop *****************
  1142 ;; Defined at:
  1143 ;;		line 92 in file "dc_motor.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1146 ;;		 -> main@motorL(9), moveBack@mL(2), 
  1147 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1148 ;;		 -> main@motorR(9), moveBack@mR(2), 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1160 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1162 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1163 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1164 ;;Total ram usage:        6 bytes
  1165 ;; Hardware stack levels used: 1
  1166 ;; Hardware stack levels required when called: 4
  1167 ;; This function calls:
  1168 ;;		_setMotorPWM
  1169 ;; This function is called by:
  1170 ;;		_moveBack
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text2
  1176   0019A6                     __ptext2:
  1177                           	callstack 0
  1178   0019A6                     _stop:
  1179                           	callstack 26
  1180   0019A6                     
  1181                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  1182   0019A6  C014  FFD9         	movff	stop@mL,fsr2l
  1183   0019AA  C015  FFDA         	movff	stop@mL+1,fsr2h
  1184   0019AE  0E00               	movlw	0
  1185   0019B0  6EDF               	movwf	indf2,c
  1186                           
  1187                           ;dc_motor.c: 95:     (*mR).power=0;
  1188   0019B2  C016  FFD9         	movff	stop@mR,fsr2l
  1189   0019B6  C017  FFDA         	movff	stop@mR+1,fsr2h
  1190   0019BA  0E00               	movlw	0
  1191   0019BC  6EDF               	movwf	indf2,c
  1192   0019BE                     
  1193                           ;dc_motor.c: 96:     setMotorPWM(mL);
  1194   0019BE  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1195   0019C2  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1196   0019C6  ECC8  F004         	call	_setMotorPWM	;wreg free
  1197   0019CA                     
  1198                           ;dc_motor.c: 97:     setMotorPWM(mR);
  1199   0019CA  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1200   0019CE  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1201   0019D2  ECC8  F004         	call	_setMotorPWM	;wreg free
  1202   0019D6                     
  1203                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1204   0019D6  0E52               	movlw	82
  1205   0019D8  6E19               	movwf	(??_stop+1)^0,c
  1206   0019DA  0E2B               	movlw	43
  1207   0019DC  6E18               	movwf	??_stop^0,c
  1208   0019DE  0E00               	movlw	0
  1209   0019E0                     u2397:
  1210   0019E0  2EE8               	decfsz	wreg,f,c
  1211   0019E2  D7FE               	bra	u2397
  1212   0019E4  2E18               	decfsz	??_stop^0,f,c
  1213   0019E6  D7FC               	bra	u2397
  1214   0019E8  2E19               	decfsz	(??_stop+1)^0,f,c
  1215   0019EA  D7FA               	bra	u2397
  1216   0019EC  D000               	nop2	
  1217   0019EE  0012               	return		;funcret
  1218   0019F0                     __end_of_stop:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function _initDCmotorsPWM *****************
  1222 ;; Defined at:
  1223 ;;		line 9 in file "dc_motor.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  PWMperiod       2    0[COMRAM] int 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1240 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;Total ram usage:        2 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 2
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text3
  1252   0015B2                     __ptext3:
  1253                           	callstack 0
  1254   0015B2                     _initDCmotorsPWM:
  1255                           	callstack 28
  1256   0015B2                     
  1257                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1258   0015B2  9485               	bcf	133,2,c	;volatile
  1259                           
  1260                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1261   0015B4  9E83               	bcf	131,7,c	;volatile
  1262                           
  1263                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1264   0015B6  9C87               	bcf	135,6,c	;volatile
  1265                           
  1266                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1267   0015B8  9885               	bcf	133,4,c	;volatile
  1268                           
  1269                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1270   0015BA  947D               	bcf	125,2,c	;volatile
  1271                           
  1272                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1273   0015BC  9E7B               	bcf	123,7,c	;volatile
  1274                           
  1275                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1276   0015BE  9C7F               	bcf	127,6,c	;volatile
  1277                           
  1278                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1279   0015C0  987D               	bcf	125,4,c	;volatile
  1280   0015C2                     
  1281                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1282   0015C2  0E05               	movlw	5
  1283   0015C4  010E               	movlb	14	; () banked
  1284   0015C6  6F74               	movwf	116,b	;volatile
  1285                           
  1286                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1287   0015C8  0E06               	movlw	6
  1288   0015CA  6F76               	movwf	118,b	;volatile
  1289                           
  1290                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1291   0015CC  0E07               	movlw	7
  1292   0015CE  6F69               	movwf	105,b	;volatile
  1293                           
  1294                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1295   0015D0  0E08               	movlw	8
  1296   0015D2  6F88               	movwf	136,b	;volatile
  1297                           
  1298                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1299   0015D4  50BD               	movf	189,w,c	;volatile
  1300   0015D6  0B8F               	andlw	-113
  1301   0015D8  0940               	iorlw	64
  1302   0015DA  6EBD               	movwf	189,c	;volatile
  1303                           
  1304                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1305   0015DC  0EE0               	movlw	-32
  1306   0015DE  16BE               	andwf	190,f,c	;volatile
  1307                           
  1308                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1309   0015E0  50BF               	movf	191,w,c	;volatile
  1310   0015E2  0BF0               	andlw	-16
  1311   0015E4  0901               	iorlw	1
  1312   0015E6  6EBF               	movwf	191,c	;volatile
  1313                           
  1314                           ;dc_motor.c: 34:     T2PR=99;
  1315   0015E8  0E63               	movlw	99
  1316   0015EA  6EBC               	movwf	188,c	;volatile
  1317   0015EC                     
  1318                           ; BSR set to: 14
  1319                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1320   0015EC  8EBD               	bsf	189,7,c	;volatile
  1321                           
  1322                           ;dc_motor.c: 39:     CCPR1H=0;
  1323   0015EE  0E00               	movlw	0
  1324   0015F0  6EAA               	movwf	170,c	;volatile
  1325                           
  1326                           ;dc_motor.c: 40:     CCPR2H=0;
  1327   0015F2  0E00               	movlw	0
  1328   0015F4  6EA6               	movwf	166,c	;volatile
  1329                           
  1330                           ;dc_motor.c: 41:     CCPR3H=0;
  1331   0015F6  0E00               	movlw	0
  1332   0015F8  010F               	movlb	15	; () banked
  1333   0015FA  6F25               	movwf	37,b	;volatile
  1334                           
  1335                           ;dc_motor.c: 42:     CCPR4H=0;
  1336   0015FC  0E00               	movlw	0
  1337   0015FE  6F21               	movwf	33,b	;volatile
  1338                           
  1339                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1340   001600  0EFC               	movlw	-4
  1341   001602  16AD               	andwf	173,f,c	;volatile
  1342                           
  1343                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1344   001604  0EF3               	movlw	-13
  1345   001606  16AD               	andwf	173,f,c	;volatile
  1346                           
  1347                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1348   001608  0ECF               	movlw	-49
  1349   00160A  16AD               	andwf	173,f,c	;volatile
  1350                           
  1351                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1352   00160C  0E3F               	movlw	-193
  1353   00160E  16AD               	andwf	173,f,c	;volatile
  1354   001610                     
  1355                           ; BSR set to: 15
  1356                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1357   001610  88AB               	bsf	171,4,c	;volatile
  1358                           
  1359                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1360   001612  50AB               	movf	171,w,c	;volatile
  1361   001614  0BF0               	andlw	-16
  1362   001616  090C               	iorlw	12
  1363   001618  6EAB               	movwf	171,c	;volatile
  1364   00161A                     
  1365                           ; BSR set to: 15
  1366                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1367   00161A  8EAB               	bsf	171,7,c	;volatile
  1368   00161C                     
  1369                           ; BSR set to: 15
  1370                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1371   00161C  88A7               	bsf	167,4,c	;volatile
  1372                           
  1373                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1374   00161E  50A7               	movf	167,w,c	;volatile
  1375   001620  0BF0               	andlw	-16
  1376   001622  090C               	iorlw	12
  1377   001624  6EA7               	movwf	167,c	;volatile
  1378   001626                     
  1379                           ; BSR set to: 15
  1380                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1381   001626  8EA7               	bsf	167,7,c	;volatile
  1382   001628                     
  1383                           ; BSR set to: 15
  1384                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1385   001628  8926               	bsf	38,4,b	;volatile
  1386                           
  1387                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1388   00162A  5126               	movf	38,w,b	;volatile
  1389   00162C  0BF0               	andlw	-16
  1390   00162E  090C               	iorlw	12
  1391   001630  6F26               	movwf	38,b	;volatile
  1392   001632                     
  1393                           ; BSR set to: 15
  1394                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1395   001632  8F26               	bsf	38,7,b	;volatile
  1396   001634                     
  1397                           ; BSR set to: 15
  1398                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1399   001634  8922               	bsf	34,4,b	;volatile
  1400                           
  1401                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1402   001636  5122               	movf	34,w,b	;volatile
  1403   001638  0BF0               	andlw	-16
  1404   00163A  090C               	iorlw	12
  1405   00163C  6F22               	movwf	34,b	;volatile
  1406   00163E                     
  1407                           ; BSR set to: 15
  1408                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1409   00163E  8F22               	bsf	34,7,b	;volatile
  1410   001640                     
  1411                           ; BSR set to: 15
  1412   001640  0012               	return		;funcret
  1413   001642                     __end_of_initDCmotorsPWM:
  1414                           	callstack 0
  1415                           
  1416 ;; *************** function _get_wall_presence *****************
  1417 ;; Defined at:
  1418 ;;		line 242 in file "color.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;		None
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  clear2          2   17[COMRAM] unsigned int 
  1423 ;;  clear1          2   15[COMRAM] unsigned int 
  1424 ;; Return value:  Size  Location     Type
  1425 ;;                  2   11[COMRAM] unsigned int 
  1426 ;; Registers used:
  1427 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1428 ;; Tracked objects:
  1429 ;;		On entry : 0/0
  1430 ;;		On exit  : 0/0
  1431 ;;		Unchanged: 0/0
  1432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1433 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1434 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1436 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1437 ;;Total ram usage:        8 bytes
  1438 ;; Hardware stack levels used: 1
  1439 ;; Hardware stack levels required when called: 5
  1440 ;; This function calls:
  1441 ;;		___wmul
  1442 ;;		_color_read_Clear
  1443 ;;		_set_led_color
  1444 ;; This function is called by:
  1445 ;;		_main
  1446 ;; This function uses a non-reentrant model
  1447 ;;
  1448                           
  1449                           	psect	text4
  1450   001516                     __ptext4:
  1451                           	callstack 0
  1452   001516                     _get_wall_presence:
  1453                           	callstack 25
  1454   001516                     
  1455                           ;color.c: 243:     set_led_color(0b000);
  1456   001516  0E00               	movlw	0
  1457   001518  6E02               	movwf	(set_led_color@color+1)^0,c
  1458   00151A  0E00               	movlw	0
  1459   00151C  6E01               	movwf	set_led_color@color^0,c
  1460   00151E  EC1C  F00D         	call	_set_led_color	;wreg free
  1461   001522                     
  1462                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1463   001522  0E12               	movlw	18
  1464   001524  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1465   001526  0EDC               	movlw	220
  1466   001528  6E0E               	movwf	??_get_wall_presence^0,c
  1467   00152A  0E60               	movlw	96
  1468   00152C                     u2407:
  1469   00152C  2EE8               	decfsz	wreg,f,c
  1470   00152E  D7FE               	bra	u2407
  1471   001530  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1472   001532  D7FC               	bra	u2407
  1473   001534  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1474   001536  D7FA               	bra	u2407
  1475   001538                     
  1476                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1477   001538  EC83  F00C         	call	_color_read_Clear	;wreg free
  1478   00153C  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1479   001540  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1480   001544                     
  1481                           ;color.c: 246:     set_led_color(0b111);
  1482   001544  0E00               	movlw	0
  1483   001546  6E02               	movwf	(set_led_color@color+1)^0,c
  1484   001548  0E07               	movlw	7
  1485   00154A  6E01               	movwf	set_led_color@color^0,c
  1486   00154C  EC1C  F00D         	call	_set_led_color	;wreg free
  1487   001550                     
  1488                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1489   001550  0E12               	movlw	18
  1490   001552  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1491   001554  0EDC               	movlw	220
  1492   001556  6E0E               	movwf	??_get_wall_presence^0,c
  1493   001558  0E60               	movlw	96
  1494   00155A                     u2417:
  1495   00155A  2EE8               	decfsz	wreg,f,c
  1496   00155C  D7FE               	bra	u2417
  1497   00155E  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1498   001560  D7FC               	bra	u2417
  1499   001562  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1500   001564  D7FA               	bra	u2417
  1501                           
  1502                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1503   001566  EC83  F00C         	call	_color_read_Clear	;wreg free
  1504   00156A  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1505   00156E  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1506   001572                     
  1507                           ;color.c: 249:     set_led_color(0b000);
  1508   001572  0E00               	movlw	0
  1509   001574  6E02               	movwf	(set_led_color@color+1)^0,c
  1510   001576  0E00               	movlw	0
  1511   001578  6E01               	movwf	set_led_color@color^0,c
  1512   00157A  EC1C  F00D         	call	_set_led_color	;wreg free
  1513   00157E                     
  1514                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1515   00157E  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1516   001582  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1517   001586  C059  F003         	movff	_wall_coef,___wmul@multiplicand
  1518   00158A  C05A  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1519   00158E  EC88  F00D         	call	___wmul	;wreg free
  1520   001592  5001               	movf	?___wmul^0,w,c
  1521   001594  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1522   001596  5002               	movf	(?___wmul+1)^0,w,c
  1523   001598  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1524   00159A  B0D8               	btfsc	status,0,c
  1525   00159C  EFD2  F00A         	goto	u1721
  1526   0015A0  EFD5  F00A         	goto	u1720
  1527   0015A4                     u1721:
  1528   0015A4  0E01               	movlw	1
  1529   0015A6  EFD6  F00A         	goto	u1730
  1530   0015AA                     u1720:
  1531   0015AA  0E00               	movlw	0
  1532   0015AC                     u1730:
  1533   0015AC  6E0C               	movwf	?_get_wall_presence^0,c
  1534   0015AE  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1535   0015B0  0012               	return		;funcret
  1536   0015B2                     __end_of_get_wall_presence:
  1537                           	callstack 0
  1538                           
  1539 ;; *************** function _get_color_code *****************
  1540 ;; Defined at:
  1541 ;;		line 176 in file "color.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;  value           2   28[BANK0 ] unsigned int 
  1546 ;;  i               2   30[BANK0 ] unsigned int 
  1547 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1548 ;;  min_index       2   26[BANK0 ] unsigned int 
  1549 ;;  min_value       2   24[BANK0 ] unsigned int 
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  2   52[COMRAM] unsigned int 
  1552 ;; Registers used:
  1553 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1559 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1560 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1561 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1562 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1563 ;;Total ram usage:       48 bytes
  1564 ;; Hardware stack levels used: 1
  1565 ;; Hardware stack levels required when called: 5
  1566 ;; This function calls:
  1567 ;;		___lldiv
  1568 ;;		___lmul
  1569 ;;		___wmul
  1570 ;;		_color_read_Blue
  1571 ;;		_color_read_Green
  1572 ;;		_color_read_Red
  1573 ;;		_get_color_distance
  1574 ;;		_set_led_color
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text5
  1581   000486                     __ptext5:
  1582                           	callstack 0
  1583   000486                     _get_color_code:
  1584                           	callstack 25
  1585   000486                     
  1586                           ;color.c: 179:     set_led_color(0b100);
  1587   000486  0E00               	movlw	0
  1588   000488  6E02               	movwf	(set_led_color@color+1)^0,c
  1589   00048A  0E04               	movlw	4
  1590   00048C  6E01               	movwf	set_led_color@color^0,c
  1591   00048E  EC1C  F00D         	call	_set_led_color	;wreg free
  1592   000492                     
  1593                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1594   000492  0E12               	movlw	18
  1595   000494  6E38               	movwf	(??_get_color_code+1)^0,c
  1596   000496  0EDC               	movlw	220
  1597   000498  6E37               	movwf	??_get_color_code^0,c
  1598   00049A  0E60               	movlw	96
  1599   00049C                     u2427:
  1600   00049C  2EE8               	decfsz	wreg,f,c
  1601   00049E  D7FE               	bra	u2427
  1602   0004A0  2E37               	decfsz	??_get_color_code^0,f,c
  1603   0004A2  D7FC               	bra	u2427
  1604   0004A4  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1605   0004A6  D7FA               	bra	u2427
  1606   0004A8                     
  1607                           ;color.c: 181:     RGB.R = color_read_Red();
  1608   0004A8  EC33  F00C         	call	_color_read_Red	;wreg free
  1609   0004AC  C005  F0EE         	movff	?_color_read_Red,_RGB
  1610   0004B0  C006  F0EF         	movff	?_color_read_Red+1,_RGB+1
  1611   0004B4  0100               	movlb	0	; () banked
  1612   0004B6  6BF0               	clrf	(_RGB+2)& (0+255),b
  1613   0004B8  6BF1               	clrf	(_RGB+3)& (0+255),b
  1614   0004BA                     
  1615                           ; BSR set to: 0
  1616                           ;color.c: 182:     set_led_color(0b010);
  1617   0004BA  0E00               	movlw	0
  1618   0004BC  6E02               	movwf	(set_led_color@color+1)^0,c
  1619   0004BE  0E02               	movlw	2
  1620   0004C0  6E01               	movwf	set_led_color@color^0,c
  1621   0004C2  EC1C  F00D         	call	_set_led_color	;wreg free
  1622   0004C6                     
  1623                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1624   0004C6  0E12               	movlw	18
  1625   0004C8  6E38               	movwf	(??_get_color_code+1)^0,c
  1626   0004CA  0EDC               	movlw	220
  1627   0004CC  6E37               	movwf	??_get_color_code^0,c
  1628   0004CE  0E60               	movlw	96
  1629   0004D0                     u2437:
  1630   0004D0  2EE8               	decfsz	wreg,f,c
  1631   0004D2  D7FE               	bra	u2437
  1632   0004D4  2E37               	decfsz	??_get_color_code^0,f,c
  1633   0004D6  D7FC               	bra	u2437
  1634   0004D8  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1635   0004DA  D7FA               	bra	u2437
  1636                           
  1637                           ;color.c: 184:     RGB.G = color_read_Green();
  1638   0004DC  EC5B  F00C         	call	_color_read_Green	;wreg free
  1639   0004E0  C005  F0F2         	movff	?_color_read_Green,_RGB+4
  1640   0004E4  C006  F0F3         	movff	?_color_read_Green+1,_RGB+5
  1641   0004E8  0100               	movlb	0	; () banked
  1642   0004EA  6BF4               	clrf	(_RGB+6)& (0+255),b
  1643   0004EC  6BF5               	clrf	(_RGB+7)& (0+255),b
  1644   0004EE                     
  1645                           ; BSR set to: 0
  1646                           ;color.c: 185:     set_led_color(0b001);
  1647   0004EE  0E00               	movlw	0
  1648   0004F0  6E02               	movwf	(set_led_color@color+1)^0,c
  1649   0004F2  0E01               	movlw	1
  1650   0004F4  6E01               	movwf	set_led_color@color^0,c
  1651   0004F6  EC1C  F00D         	call	_set_led_color	;wreg free
  1652   0004FA                     
  1653                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1654   0004FA  0E12               	movlw	18
  1655   0004FC  6E38               	movwf	(??_get_color_code+1)^0,c
  1656   0004FE  0EDC               	movlw	220
  1657   000500  6E37               	movwf	??_get_color_code^0,c
  1658   000502  0E60               	movlw	96
  1659   000504                     u2447:
  1660   000504  2EE8               	decfsz	wreg,f,c
  1661   000506  D7FE               	bra	u2447
  1662   000508  2E37               	decfsz	??_get_color_code^0,f,c
  1663   00050A  D7FC               	bra	u2447
  1664   00050C  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1665   00050E  D7FA               	bra	u2447
  1666   000510                     
  1667                           ;color.c: 187:     RGB.B = color_read_Blue();
  1668   000510  ECAB  F00C         	call	_color_read_Blue	;wreg free
  1669   000514  C005  F0F6         	movff	?_color_read_Blue,_RGB+8
  1670   000518  C006  F0F7         	movff	?_color_read_Blue+1,_RGB+9
  1671   00051C  0100               	movlb	0	; () banked
  1672   00051E  6BF8               	clrf	(_RGB+10)& (0+255),b
  1673   000520  6BF9               	clrf	(_RGB+11)& (0+255),b
  1674   000522                     
  1675                           ; BSR set to: 0
  1676                           ;color.c: 188:     set_led_color(0b000);
  1677   000522  0E00               	movlw	0
  1678   000524  6E02               	movwf	(set_led_color@color+1)^0,c
  1679   000526  0E00               	movlw	0
  1680   000528  6E01               	movwf	set_led_color@color^0,c
  1681   00052A  EC1C  F00D         	call	_set_led_color	;wreg free
  1682   00052E                     
  1683                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1684   00052E  504D               	movf	_Black_setup^0,w,c
  1685   000530  0100               	movlb	0	; () banked
  1686   000532  5DEE               	subwf	_RGB& (0+255),w,b
  1687   000534  504E               	movf	(_Black_setup+1)^0,w,c
  1688   000536  59EF               	subwfb	(_RGB+1)& (0+255),w,b
  1689   000538  504F               	movf	(_Black_setup+2)^0,w,c
  1690   00053A  59F0               	subwfb	(_RGB+2)& (0+255),w,b
  1691   00053C  5050               	movf	(_Black_setup+3)^0,w,c
  1692   00053E  59F1               	subwfb	(_RGB+3)& (0+255),w,b
  1693   000540  B0D8               	btfsc	status,0,c
  1694   000542  EFA5  F002         	goto	u1621
  1695   000546  EFA7  F002         	goto	u1620
  1696   00054A                     u1621:
  1697   00054A  EFB1  F002         	goto	l2650
  1698   00054E                     u1620:
  1699   00054E                     
  1700                           ; BSR set to: 0
  1701   00054E  0E00               	movlw	0
  1702   000550  6FCE               	movwf	_get_color_code$458& (0+255),b
  1703   000552  0E00               	movlw	0
  1704   000554  6FCF               	movwf	(_get_color_code$458+1)& (0+255),b
  1705   000556  0E00               	movlw	0
  1706   000558  6FD0               	movwf	(_get_color_code$458+2)& (0+255),b
  1707   00055A  0E00               	movlw	0
  1708   00055C  6FD1               	movwf	(_get_color_code$458+3)& (0+255),b
  1709   00055E  EFE6  F002         	goto	l2652
  1710   000562                     l2650:
  1711                           
  1712                           ; BSR set to: 0
  1713   000562  504D               	movf	_Black_setup^0,w,c
  1714   000564  5DEE               	subwf	_RGB& (0+255),w,b
  1715   000566  6E01               	movwf	___lmul@multiplier^0,c
  1716   000568  504E               	movf	(_Black_setup+1)^0,w,c
  1717   00056A  59EF               	subwfb	(_RGB+1)& (0+255),w,b
  1718   00056C  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1719   00056E  504F               	movf	(_Black_setup+2)^0,w,c
  1720   000570  59F0               	subwfb	(_RGB+2)& (0+255),w,b
  1721   000572  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1722   000574  5050               	movf	(_Black_setup+3)^0,w,c
  1723   000576  59F1               	subwfb	(_RGB+3)& (0+255),w,b
  1724   000578  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1725   00057A  0E64               	movlw	100
  1726   00057C  6E05               	movwf	___lmul@multiplicand^0,c
  1727   00057E  0E00               	movlw	0
  1728   000580  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1729   000582  0E00               	movlw	0
  1730   000584  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1731   000586  0E00               	movlw	0
  1732   000588  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1733   00058A  ECA0  F00B         	call	___lmul	;wreg free
  1734   00058E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1735   000592  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1736   000596  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1737   00059A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1738   00059E  504D               	movf	_Black_setup^0,w,c
  1739   0005A0  0100               	movlb	0	; () banked
  1740   0005A2  5D60               	subwf	_White_setup& (0+255),w,b
  1741   0005A4  6E11               	movwf	___lldiv@divisor^0,c
  1742   0005A6  504E               	movf	(_Black_setup+1)^0,w,c
  1743   0005A8  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  1744   0005AA  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1745   0005AC  504F               	movf	(_Black_setup+2)^0,w,c
  1746   0005AE  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  1747   0005B0  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1748   0005B2  5050               	movf	(_Black_setup+3)^0,w,c
  1749   0005B4  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  1750   0005B6  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1751   0005B8  ECE9  F009         	call	___lldiv	;wreg free
  1752   0005BC  C00D  F0CE         	movff	?___lldiv,_get_color_code$458
  1753   0005C0  C00E  F0CF         	movff	?___lldiv+1,_get_color_code$458+1
  1754   0005C4  C00F  F0D0         	movff	?___lldiv+2,_get_color_code$458+2
  1755   0005C8  C010  F0D1         	movff	?___lldiv+3,_get_color_code$458+3
  1756   0005CC                     l2652:
  1757   0005CC  C0CE  F0E2         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  1758   0005D0  C0CF  F0E3         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  1759   0005D4  C0D0  F0E4         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  1760   0005D8  C0D1  F0E5         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  1761   0005DC                     
  1762                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  1763   0005DC  5051               	movf	(_Black_setup+4)^0,w,c
  1764   0005DE  0100               	movlb	0	; () banked
  1765   0005E0  5DF2               	subwf	(_RGB+4)& (0+255),w,b
  1766   0005E2  5052               	movf	(_Black_setup+5)^0,w,c
  1767   0005E4  59F3               	subwfb	(_RGB+5)& (0+255),w,b
  1768   0005E6  5053               	movf	(_Black_setup+6)^0,w,c
  1769   0005E8  59F4               	subwfb	(_RGB+6)& (0+255),w,b
  1770   0005EA  5054               	movf	(_Black_setup+7)^0,w,c
  1771   0005EC  59F5               	subwfb	(_RGB+7)& (0+255),w,b
  1772   0005EE  B0D8               	btfsc	status,0,c
  1773   0005F0  EFFC  F002         	goto	u1631
  1774   0005F4  EFFE  F002         	goto	u1630
  1775   0005F8                     u1631:
  1776   0005F8  EF08  F003         	goto	l2658
  1777   0005FC                     u1630:
  1778   0005FC                     
  1779                           ; BSR set to: 0
  1780   0005FC  0E00               	movlw	0
  1781   0005FE  6FD2               	movwf	_get_color_code$459& (0+255),b
  1782   000600  0E00               	movlw	0
  1783   000602  6FD3               	movwf	(_get_color_code$459+1)& (0+255),b
  1784   000604  0E00               	movlw	0
  1785   000606  6FD4               	movwf	(_get_color_code$459+2)& (0+255),b
  1786   000608  0E00               	movlw	0
  1787   00060A  6FD5               	movwf	(_get_color_code$459+3)& (0+255),b
  1788   00060C  EF3D  F003         	goto	l2660
  1789   000610                     l2658:
  1790                           
  1791                           ; BSR set to: 0
  1792   000610  5051               	movf	(_Black_setup+4)^0,w,c
  1793   000612  5DF2               	subwf	(_RGB+4)& (0+255),w,b
  1794   000614  6E01               	movwf	___lmul@multiplier^0,c
  1795   000616  5052               	movf	(_Black_setup+5)^0,w,c
  1796   000618  59F3               	subwfb	(_RGB+5)& (0+255),w,b
  1797   00061A  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1798   00061C  5053               	movf	(_Black_setup+6)^0,w,c
  1799   00061E  59F4               	subwfb	(_RGB+6)& (0+255),w,b
  1800   000620  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1801   000622  5054               	movf	(_Black_setup+7)^0,w,c
  1802   000624  59F5               	subwfb	(_RGB+7)& (0+255),w,b
  1803   000626  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1804   000628  0E64               	movlw	100
  1805   00062A  6E05               	movwf	___lmul@multiplicand^0,c
  1806   00062C  0E00               	movlw	0
  1807   00062E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1808   000630  0E00               	movlw	0
  1809   000632  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1810   000634  0E00               	movlw	0
  1811   000636  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1812   000638  ECA0  F00B         	call	___lmul	;wreg free
  1813   00063C  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1814   000640  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1815   000644  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1816   000648  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1817   00064C  5051               	movf	(_Black_setup+4)^0,w,c
  1818   00064E  0100               	movlb	0	; () banked
  1819   000650  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  1820   000652  6E11               	movwf	___lldiv@divisor^0,c
  1821   000654  5052               	movf	(_Black_setup+5)^0,w,c
  1822   000656  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  1823   000658  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1824   00065A  5053               	movf	(_Black_setup+6)^0,w,c
  1825   00065C  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  1826   00065E  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1827   000660  5054               	movf	(_Black_setup+7)^0,w,c
  1828   000662  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  1829   000664  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1830   000666  ECE9  F009         	call	___lldiv	;wreg free
  1831   00066A  C00D  F0D2         	movff	?___lldiv,_get_color_code$459
  1832   00066E  C00E  F0D3         	movff	?___lldiv+1,_get_color_code$459+1
  1833   000672  C00F  F0D4         	movff	?___lldiv+2,_get_color_code$459+2
  1834   000676  C010  F0D5         	movff	?___lldiv+3,_get_color_code$459+3
  1835   00067A                     l2660:
  1836   00067A  C0D2  F0E6         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  1837   00067E  C0D3  F0E7         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  1838   000682  C0D4  F0E8         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  1839   000686  C0D5  F0E9         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  1840   00068A                     
  1841                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  1842   00068A  5055               	movf	(_Black_setup+8)^0,w,c
  1843   00068C  0100               	movlb	0	; () banked
  1844   00068E  5DF6               	subwf	(_RGB+8)& (0+255),w,b
  1845   000690  5056               	movf	(_Black_setup+9)^0,w,c
  1846   000692  59F7               	subwfb	(_RGB+9)& (0+255),w,b
  1847   000694  5057               	movf	(_Black_setup+10)^0,w,c
  1848   000696  59F8               	subwfb	(_RGB+10)& (0+255),w,b
  1849   000698  5058               	movf	(_Black_setup+11)^0,w,c
  1850   00069A  59F9               	subwfb	(_RGB+11)& (0+255),w,b
  1851   00069C  B0D8               	btfsc	status,0,c
  1852   00069E  EF53  F003         	goto	u1641
  1853   0006A2  EF55  F003         	goto	u1640
  1854   0006A6                     u1641:
  1855   0006A6  EF5F  F003         	goto	l2666
  1856   0006AA                     u1640:
  1857   0006AA                     
  1858                           ; BSR set to: 0
  1859   0006AA  0E00               	movlw	0
  1860   0006AC  6FD6               	movwf	_get_color_code$460& (0+255),b
  1861   0006AE  0E00               	movlw	0
  1862   0006B0  6FD7               	movwf	(_get_color_code$460+1)& (0+255),b
  1863   0006B2  0E00               	movlw	0
  1864   0006B4  6FD8               	movwf	(_get_color_code$460+2)& (0+255),b
  1865   0006B6  0E00               	movlw	0
  1866   0006B8  6FD9               	movwf	(_get_color_code$460+3)& (0+255),b
  1867   0006BA  EF94  F003         	goto	l2668
  1868   0006BE                     l2666:
  1869                           
  1870                           ; BSR set to: 0
  1871   0006BE  5055               	movf	(_Black_setup+8)^0,w,c
  1872   0006C0  5DF6               	subwf	(_RGB+8)& (0+255),w,b
  1873   0006C2  6E01               	movwf	___lmul@multiplier^0,c
  1874   0006C4  5056               	movf	(_Black_setup+9)^0,w,c
  1875   0006C6  59F7               	subwfb	(_RGB+9)& (0+255),w,b
  1876   0006C8  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1877   0006CA  5057               	movf	(_Black_setup+10)^0,w,c
  1878   0006CC  59F8               	subwfb	(_RGB+10)& (0+255),w,b
  1879   0006CE  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1880   0006D0  5058               	movf	(_Black_setup+11)^0,w,c
  1881   0006D2  59F9               	subwfb	(_RGB+11)& (0+255),w,b
  1882   0006D4  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1883   0006D6  0E64               	movlw	100
  1884   0006D8  6E05               	movwf	___lmul@multiplicand^0,c
  1885   0006DA  0E00               	movlw	0
  1886   0006DC  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1887   0006DE  0E00               	movlw	0
  1888   0006E0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1889   0006E2  0E00               	movlw	0
  1890   0006E4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1891   0006E6  ECA0  F00B         	call	___lmul	;wreg free
  1892   0006EA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1893   0006EE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1894   0006F2  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1895   0006F6  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1896   0006FA  5055               	movf	(_Black_setup+8)^0,w,c
  1897   0006FC  0100               	movlb	0	; () banked
  1898   0006FE  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  1899   000700  6E11               	movwf	___lldiv@divisor^0,c
  1900   000702  5056               	movf	(_Black_setup+9)^0,w,c
  1901   000704  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  1902   000706  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1903   000708  5057               	movf	(_Black_setup+10)^0,w,c
  1904   00070A  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  1905   00070C  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1906   00070E  5058               	movf	(_Black_setup+11)^0,w,c
  1907   000710  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  1908   000712  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1909   000714  ECE9  F009         	call	___lldiv	;wreg free
  1910   000718  C00D  F0D6         	movff	?___lldiv,_get_color_code$460
  1911   00071C  C00E  F0D7         	movff	?___lldiv+1,_get_color_code$460+1
  1912   000720  C00F  F0D8         	movff	?___lldiv+2,_get_color_code$460+2
  1913   000724  C010  F0D9         	movff	?___lldiv+3,_get_color_code$460+3
  1914   000728                     l2668:
  1915   000728  C0D6  F0EA         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  1916   00072C  C0D7  F0EB         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  1917   000730  C0D8  F0EC         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  1918   000734  C0D9  F0ED         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  1919   000738                     
  1920                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  1921   000738  EE20  F0E2         	lfsr	2,get_color_code@NormalizedRGB
  1922   00073C  EE00  F007         	lfsr	0,get_color_distance@color1
  1923   000740  0E0B               	movlw	11
  1924   000742                     u1651:
  1925   000742  CFDB FFEB          	movff	plusw2,plusw0
  1926   000746  06E8               	decf	wreg,f,c
  1927   000748  E2FC               	bc	u1651
  1928   00074A  EE21  F000         	lfsr	2,_Color_rules
  1929   00074E  EE00  F013         	lfsr	0,get_color_distance@color2
  1930   000752  0E0B               	movlw	11
  1931   000754                     u1661:
  1932   000754  CFDB FFEB          	movff	plusw2,plusw0
  1933   000758  06E8               	decf	wreg,f,c
  1934   00075A  E2FC               	bc	u1661
  1935   00075C  EC12  F004         	call	_get_color_distance	;wreg free
  1936   000760  C007  F0DA         	movff	?_get_color_distance,get_color_code@min_value
  1937   000764  C008  F0DB         	movff	?_get_color_distance+1,get_color_code@min_value+1
  1938   000768                     
  1939                           ;color.c: 196:     unsigned int min_index = 0;
  1940   000768  0E00               	movlw	0
  1941   00076A  0100               	movlb	0	; () banked
  1942   00076C  6FDD               	movwf	(get_color_code@min_index+1)& (0+255),b
  1943   00076E  0E00               	movlw	0
  1944   000770  6FDC               	movwf	get_color_code@min_index& (0+255),b
  1945   000772                     
  1946                           ; BSR set to: 0
  1947                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  1948   000772  0E00               	movlw	0
  1949   000774  6FE1               	movwf	(get_color_code@i+1)& (0+255),b
  1950   000776  0E01               	movlw	1
  1951   000778  6FE0               	movwf	get_color_code@i& (0+255),b
  1952   00077A                     l2680:
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1956   00077A  C0E0  F001         	movff	get_color_code@i,___wmul@multiplier
  1957   00077E  C0E1  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  1958   000782  0E00               	movlw	0
  1959   000784  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1960   000786  0E0C               	movlw	12
  1961   000788  6E03               	movwf	___wmul@multiplicand^0,c
  1962   00078A  EC88  F00D         	call	___wmul	;wreg free
  1963   00078E  0E00               	movlw	low _Color_rules
  1964   000790  2401               	addwf	?___wmul^0,w,c
  1965   000792  6ED9               	movwf	fsr2l,c
  1966   000794  0E01               	movlw	high _Color_rules
  1967   000796  2002               	addwfc	(?___wmul+1)^0,w,c
  1968   000798  6EDA               	movwf	fsr2h,c
  1969   00079A  EE10  F0C2         	lfsr	1,_get_color_code$2447
  1970   00079E  0E0B               	movlw	11
  1971   0007A0                     u1671:
  1972   0007A0  CFDB FFE3          	movff	plusw2,plusw1
  1973   0007A4  06E8               	decf	wreg,f,c
  1974   0007A6  E2FC               	bc	u1671
  1975   0007A8                     
  1976                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1977   0007A8  EE20  F0E2         	lfsr	2,get_color_code@NormalizedRGB
  1978   0007AC  EE00  F007         	lfsr	0,get_color_distance@color1
  1979   0007B0  0E0B               	movlw	11
  1980   0007B2                     u1681:
  1981   0007B2  CFDB FFEB          	movff	plusw2,plusw0
  1982   0007B6  06E8               	decf	wreg,f,c
  1983   0007B8  E2FC               	bc	u1681
  1984   0007BA  EE20  F0C2         	lfsr	2,_get_color_code$2447
  1985   0007BE  EE00  F013         	lfsr	0,get_color_distance@color2
  1986   0007C2  0E0B               	movlw	11
  1987   0007C4                     u1691:
  1988   0007C4  CFDB FFEB          	movff	plusw2,plusw0
  1989   0007C8  06E8               	decf	wreg,f,c
  1990   0007CA  E2FC               	bc	u1691
  1991   0007CC  EC12  F004         	call	_get_color_distance	;wreg free
  1992   0007D0  C007  F0DE         	movff	?_get_color_distance,get_color_code@value
  1993   0007D4  C008  F0DF         	movff	?_get_color_distance+1,get_color_code@value+1
  1994   0007D8                     
  1995                           ;color.c: 199:         if(value < min_value){
  1996   0007D8  0100               	movlb	0	; () banked
  1997   0007DA  51DA               	movf	get_color_code@min_value& (0+255),w,b
  1998   0007DC  5DDE               	subwf	get_color_code@value& (0+255),w,b
  1999   0007DE  51DB               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2000   0007E0  59DF               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2001   0007E2  B0D8               	btfsc	status,0,c
  2002   0007E4  EFF6  F003         	goto	u1701
  2003   0007E8  EFF8  F003         	goto	u1700
  2004   0007EC                     u1701:
  2005   0007EC  EF00  F004         	goto	l2688
  2006   0007F0                     u1700:
  2007   0007F0                     
  2008                           ; BSR set to: 0
  2009                           ;color.c: 200:             min_index = i;
  2010   0007F0  C0E0  F0DC         	movff	get_color_code@i,get_color_code@min_index
  2011   0007F4  C0E1  F0DD         	movff	get_color_code@i+1,get_color_code@min_index+1
  2012                           
  2013                           ;color.c: 201:             min_value = value;
  2014   0007F8  C0DE  F0DA         	movff	get_color_code@value,get_color_code@min_value
  2015   0007FC  C0DF  F0DB         	movff	get_color_code@value+1,get_color_code@min_value+1
  2016   000800                     l2688:
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;color.c: 203:     }
  2020   000800  4BE0               	infsnz	get_color_code@i& (0+255),f,b
  2021   000802  2BE1               	incf	(get_color_code@i+1)& (0+255),f,b
  2022   000804                     
  2023                           ; BSR set to: 0
  2024   000804  51E1               	movf	(get_color_code@i+1)& (0+255),w,b
  2025   000806  E109               	bnz	u1710
  2026   000808  0E09               	movlw	9
  2027   00080A  5DE0               	subwf	get_color_code@i& (0+255),w,b
  2028   00080C  A0D8               	btfss	status,0,c
  2029   00080E  EF0B  F004         	goto	u1711
  2030   000812  EF0D  F004         	goto	u1710
  2031   000816                     u1711:
  2032   000816  EFBD  F003         	goto	l2680
  2033   00081A                     u1710:
  2034   00081A                     
  2035                           ; BSR set to: 0
  2036                           ;color.c: 204:     return min_index;
  2037   00081A  C0DC  F035         	movff	get_color_code@min_index,?_get_color_code
  2038   00081E  C0DD  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  2039   000822                     
  2040                           ; BSR set to: 0
  2041   000822  0012               	return		;funcret
  2042   000824                     __end_of_get_color_code:
  2043                           	callstack 0
  2044                           
  2045 ;; *************** function _get_color_distance *****************
  2046 ;; Defined at:
  2047 ;;		line 146 in file "color.c"
  2048 ;; Parameters:    Size  Location     Type
  2049 ;;  color1         12    6[COMRAM] struct RGB_val
  2050 ;;  color2         12   18[COMRAM] struct RGB_val
  2051 ;; Auto vars:     Size  Location     Type
  2052 ;;  B_offset        2   50[COMRAM] unsigned int 
  2053 ;;  G_offset        2   48[COMRAM] unsigned int 
  2054 ;;  R_offset        2   46[COMRAM] unsigned int 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  2    6[COMRAM] unsigned int 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2064 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2065 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2066 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2067 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2068 ;;Total ram usage:       46 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 3
  2071 ;; This function calls:
  2072 ;;		___wmul
  2073 ;; This function is called by:
  2074 ;;		_get_color_code
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text6
  2079   000824                     __ptext6:
  2080                           	callstack 0
  2081   000824                     _get_color_distance:
  2082                           	callstack 26
  2083   000824                     
  2084                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2085   000824  5013               	movf	get_color_distance@color2^0,w,c
  2086   000826  5C07               	subwf	get_color_distance@color1^0,w,c
  2087   000828  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2088   00082A  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2089   00082C  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2090   00082E  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2091   000830  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2092   000832  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2093   000834  B0D8               	btfsc	status,0,c
  2094   000836  EF1F  F004         	goto	u1321
  2095   00083A  EF21  F004         	goto	u1320
  2096   00083E                     u1321:
  2097   00083E  EF2F  F004         	goto	l2342
  2098   000842                     u1320:
  2099   000842  5007               	movf	get_color_distance@color1^0,w,c
  2100   000844  5C13               	subwf	get_color_distance@color2^0,w,c
  2101   000846  6E23               	movwf	_get_color_distance$417^0,c
  2102   000848  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2103   00084A  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2104   00084C  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2105   00084E  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2106   000850  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2107   000852  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2108   000854  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2109   000856  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2110   000858  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2111   00085A  EF3B  F004         	goto	l2344
  2112   00085E                     l2342:
  2113   00085E  5013               	movf	get_color_distance@color2^0,w,c
  2114   000860  5C07               	subwf	get_color_distance@color1^0,w,c
  2115   000862  6E23               	movwf	_get_color_distance$417^0,c
  2116   000864  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2117   000866  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2118   000868  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2119   00086A  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2120   00086C  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2121   00086E  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2122   000870  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2123   000872  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2124   000874  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2125   000876                     l2344:
  2126   000876  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2127   00087A  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2128                           
  2129                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2130   00087E  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2131   000880  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2132   000882  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2133   000884  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2134   000886  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2135   000888  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2136   00088A  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2137   00088C  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2138   00088E  B0D8               	btfsc	status,0,c
  2139   000890  EF4C  F004         	goto	u1331
  2140   000894  EF4E  F004         	goto	u1330
  2141   000898                     u1331:
  2142   000898  EF5C  F004         	goto	l2348
  2143   00089C                     u1330:
  2144   00089C  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2145   00089E  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2146   0008A0  6E27               	movwf	_get_color_distance$419^0,c
  2147   0008A2  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2148   0008A4  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2149   0008A6  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2150   0008A8  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2151   0008AA  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2152   0008AC  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2153   0008AE  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2154   0008B0  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2155   0008B2  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2156   0008B4  EF68  F004         	goto	l2350
  2157   0008B8                     l2348:
  2158   0008B8  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2159   0008BA  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2160   0008BC  6E27               	movwf	_get_color_distance$419^0,c
  2161   0008BE  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2162   0008C0  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2163   0008C2  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2164   0008C4  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2165   0008C6  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2166   0008C8  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2167   0008CA  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2168   0008CC  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2169   0008CE  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2170   0008D0                     l2350:
  2171   0008D0  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2172   0008D4  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2173                           
  2174                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2175   0008D8  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2176   0008DA  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2177   0008DC  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2178   0008DE  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2179   0008E0  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2180   0008E2  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2181   0008E4  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2182   0008E6  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2183   0008E8  B0D8               	btfsc	status,0,c
  2184   0008EA  EF79  F004         	goto	u1341
  2185   0008EE  EF7B  F004         	goto	u1340
  2186   0008F2                     u1341:
  2187   0008F2  EF89  F004         	goto	l2354
  2188   0008F6                     u1340:
  2189   0008F6  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2190   0008F8  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2191   0008FA  6E2B               	movwf	_get_color_distance$421^0,c
  2192   0008FC  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2193   0008FE  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2194   000900  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2195   000902  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2196   000904  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2197   000906  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2198   000908  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2199   00090A  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2200   00090C  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2201   00090E  EF95  F004         	goto	l2356
  2202   000912                     l2354:
  2203   000912  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2204   000914  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2205   000916  6E2B               	movwf	_get_color_distance$421^0,c
  2206   000918  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2207   00091A  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2208   00091C  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2209   00091E  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2210   000920  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2211   000922  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2212   000924  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2213   000926  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2214   000928  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2215   00092A                     l2356:
  2216   00092A  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2217   00092E  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2218   000932                     
  2219                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2220   000932  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2221   000936  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2222   00093A  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2223   00093E  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2224   000942  EC88  F00D         	call	___wmul	;wreg free
  2225   000946  C001  F01F         	movff	?___wmul,??_get_color_distance
  2226   00094A  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2227   00094E  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2228   000952  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2229   000956  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2230   00095A  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2231   00095E  EC88  F00D         	call	___wmul	;wreg free
  2232   000962  5001               	movf	?___wmul^0,w,c
  2233   000964  241F               	addwf	??_get_color_distance^0,w,c
  2234   000966  6E21               	movwf	(??_get_color_distance+2)^0,c
  2235   000968  5002               	movf	(?___wmul+1)^0,w,c
  2236   00096A  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2237   00096C  6E22               	movwf	(??_get_color_distance+3)^0,c
  2238   00096E  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2239   000972  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2240   000976  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2241   00097A  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2242   00097E  EC88  F00D         	call	___wmul	;wreg free
  2243   000982  5001               	movf	?___wmul^0,w,c
  2244   000984  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2245   000986  6E07               	movwf	?_get_color_distance^0,c
  2246   000988  5002               	movf	(?___wmul+1)^0,w,c
  2247   00098A  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2248   00098C  6E08               	movwf	(?_get_color_distance+1)^0,c
  2249   00098E  0012               	return		;funcret
  2250   000990                     __end_of_get_color_distance:
  2251                           	callstack 0
  2252                           
  2253 ;; *************** function ___lmul *****************
  2254 ;; Defined at:
  2255 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  multiplier      4    0[COMRAM] unsigned long 
  2258 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  product         4    8[COMRAM] unsigned long 
  2261 ;; Return value:  Size  Location     Type
  2262 ;;                  4    0[COMRAM] unsigned long 
  2263 ;; Registers used:
  2264 ;;		wreg, status,2, status,0
  2265 ;; Tracked objects:
  2266 ;;		On entry : 0/0
  2267 ;;		On exit  : 0/0
  2268 ;;		Unchanged: 0/0
  2269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2270 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2271 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2273 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2274 ;;Total ram usage:       12 bytes
  2275 ;; Hardware stack levels used: 1
  2276 ;; Hardware stack levels required when called: 2
  2277 ;; This function calls:
  2278 ;;		Nothing
  2279 ;; This function is called by:
  2280 ;;		_get_color_code
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text7
  2285   001740                     __ptext7:
  2286                           	callstack 0
  2287   001740                     ___lmul:
  2288                           	callstack 27
  2289   001740  0E00               	movlw	0
  2290   001742  6E09               	movwf	___lmul@product^0,c
  2291   001744  0E00               	movlw	0
  2292   001746  6E0A               	movwf	(___lmul@product+1)^0,c
  2293   001748  0E00               	movlw	0
  2294   00174A  6E0B               	movwf	(___lmul@product+2)^0,c
  2295   00174C  0E00               	movlw	0
  2296   00174E  6E0C               	movwf	(___lmul@product+3)^0,c
  2297   001750                     l2548:
  2298   001750  A001               	btfss	___lmul@multiplier^0,0,c
  2299   001752  EFAD  F00B         	goto	u1431
  2300   001756  EFAF  F00B         	goto	u1430
  2301   00175A                     u1431:
  2302   00175A  EFB7  F00B         	goto	l2552
  2303   00175E                     u1430:
  2304   00175E  5005               	movf	___lmul@multiplicand^0,w,c
  2305   001760  2609               	addwf	___lmul@product^0,f,c
  2306   001762  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2307   001764  220A               	addwfc	(___lmul@product+1)^0,f,c
  2308   001766  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2309   001768  220B               	addwfc	(___lmul@product+2)^0,f,c
  2310   00176A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2311   00176C  220C               	addwfc	(___lmul@product+3)^0,f,c
  2312   00176E                     l2552:
  2313   00176E  90D8               	bcf	status,0,c
  2314   001770  3605               	rlcf	___lmul@multiplicand^0,f,c
  2315   001772  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2316   001774  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2317   001776  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2318   001778  90D8               	bcf	status,0,c
  2319   00177A  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2320   00177C  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2321   00177E  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2322   001780  3201               	rrcf	___lmul@multiplier^0,f,c
  2323   001782  5001               	movf	___lmul@multiplier^0,w,c
  2324   001784  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2325   001786  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2326   001788  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2327   00178A  A4D8               	btfss	status,2,c
  2328   00178C  EFCA  F00B         	goto	u1441
  2329   001790  EFCC  F00B         	goto	u1440
  2330   001794                     u1441:
  2331   001794  EFA8  F00B         	goto	l2548
  2332   001798                     u1440:
  2333   001798  C009  F001         	movff	___lmul@product,?___lmul
  2334   00179C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2335   0017A0  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2336   0017A4  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2337   0017A8  0012               	return		;funcret
  2338   0017AA                     __end_of___lmul:
  2339                           	callstack 0
  2340                           
  2341 ;; *************** function ___lldiv *****************
  2342 ;; Defined at:
  2343 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2344 ;; Parameters:    Size  Location     Type
  2345 ;;  dividend        4   12[COMRAM] unsigned long 
  2346 ;;  divisor         4   16[COMRAM] unsigned long 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  quotient        4   20[COMRAM] unsigned long 
  2349 ;;  counter         1   24[COMRAM] unsigned char 
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  4   12[COMRAM] unsigned long 
  2352 ;; Registers used:
  2353 ;;		wreg, status,2, status,0
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2359 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2360 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;Total ram usage:       13 bytes
  2364 ;; Hardware stack levels used: 1
  2365 ;; Hardware stack levels required when called: 2
  2366 ;; This function calls:
  2367 ;;		Nothing
  2368 ;; This function is called by:
  2369 ;;		_get_color_code
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text8
  2374   0013D2                     __ptext8:
  2375                           	callstack 0
  2376   0013D2                     ___lldiv:
  2377                           	callstack 27
  2378   0013D2  0E00               	movlw	0
  2379   0013D4  6E15               	movwf	___lldiv@quotient^0,c
  2380   0013D6  0E00               	movlw	0
  2381   0013D8  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2382   0013DA  0E00               	movlw	0
  2383   0013DC  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2384   0013DE  0E00               	movlw	0
  2385   0013E0  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2386   0013E2  5011               	movf	___lldiv@divisor^0,w,c
  2387   0013E4  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2388   0013E6  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2389   0013E8  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2390   0013EA  B4D8               	btfsc	status,2,c
  2391   0013EC  EFFA  F009         	goto	u1451
  2392   0013F0  EFFC  F009         	goto	u1450
  2393   0013F4                     u1451:
  2394   0013F4  EF32  F00A         	goto	l466
  2395   0013F8                     u1450:
  2396   0013F8  0E01               	movlw	1
  2397   0013FA  6E19               	movwf	___lldiv@counter^0,c
  2398   0013FC  EF06  F00A         	goto	l2564
  2399   001400                     l2562:
  2400   001400  90D8               	bcf	status,0,c
  2401   001402  3611               	rlcf	___lldiv@divisor^0,f,c
  2402   001404  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2403   001406  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2404   001408  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2405   00140A  2A19               	incf	___lldiv@counter^0,f,c
  2406   00140C                     l2564:
  2407   00140C  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2408   00140E  EF0B  F00A         	goto	u1461
  2409   001412  EF0D  F00A         	goto	u1460
  2410   001416                     u1461:
  2411   001416  EF00  F00A         	goto	l2562
  2412   00141A                     u1460:
  2413   00141A                     l2566:
  2414   00141A  90D8               	bcf	status,0,c
  2415   00141C  3615               	rlcf	___lldiv@quotient^0,f,c
  2416   00141E  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2417   001420  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2418   001422  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2419   001424  5011               	movf	___lldiv@divisor^0,w,c
  2420   001426  5C0D               	subwf	___lldiv@dividend^0,w,c
  2421   001428  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2422   00142A  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2423   00142C  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2424   00142E  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2425   001430  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2426   001432  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2427   001434  A0D8               	btfss	status,0,c
  2428   001436  EF1F  F00A         	goto	u1471
  2429   00143A  EF21  F00A         	goto	u1470
  2430   00143E                     u1471:
  2431   00143E  EF2A  F00A         	goto	l2574
  2432   001442                     u1470:
  2433   001442  5011               	movf	___lldiv@divisor^0,w,c
  2434   001444  5E0D               	subwf	___lldiv@dividend^0,f,c
  2435   001446  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2436   001448  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2437   00144A  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2438   00144C  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2439   00144E  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2440   001450  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2441   001452  8015               	bsf	___lldiv@quotient^0,0,c
  2442   001454                     l2574:
  2443   001454  90D8               	bcf	status,0,c
  2444   001456  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2445   001458  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2446   00145A  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2447   00145C  3211               	rrcf	___lldiv@divisor^0,f,c
  2448   00145E  2E19               	decfsz	___lldiv@counter^0,f,c
  2449   001460  EF0D  F00A         	goto	l2566
  2450   001464                     l466:
  2451   001464  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2452   001468  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2453   00146C  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2454   001470  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2455   001474  0012               	return		;funcret
  2456   001476                     __end_of___lldiv:
  2457                           	callstack 0
  2458                           
  2459 ;; *************** function _fullSpeedAhead *****************
  2460 ;; Defined at:
  2461 ;;		line 248 in file "dc_motor.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2464 ;;		 -> main@motorL(9), 
  2465 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2466 ;;		 -> main@motorR(9), 
  2467 ;; Auto vars:     Size  Location     Type
  2468 ;;		None
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2481 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2482 ;;Total ram usage:        4 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 4
  2485 ;; This function calls:
  2486 ;;		_setMotorPWM
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text9
  2493   00180C                     __ptext9:
  2494                           	callstack 0
  2495   00180C                     _fullSpeedAhead:
  2496                           	callstack 26
  2497   00180C                     
  2498                           ;dc_motor.c: 248: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 249: {;dc_motor.c: 250:     seconds = 0;
  2499   00180C  0E00               	movlw	0
  2500   00180E  6E5E               	movwf	(_seconds+1)^0,c
  2501   001810  0E00               	movlw	0
  2502   001812  6E5D               	movwf	_seconds^0,c
  2503   001814                     
  2504                           ;dc_motor.c: 251:     (*mL).direction=1;
  2505   001814  EE20 F001          	lfsr	2,1
  2506   001818  5014               	movf	fullSpeedAhead@mL^0,w,c
  2507   00181A  26D9               	addwf	fsr2l,f,c
  2508   00181C  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2509   00181E  22DA               	addwfc	fsr2h,f,c
  2510   001820  0E01               	movlw	1
  2511   001822  6EDF               	movwf	indf2,c
  2512   001824                     
  2513                           ;dc_motor.c: 252:     (*mR).direction=1;
  2514   001824  EE20 F001          	lfsr	2,1
  2515   001828  5016               	movf	fullSpeedAhead@mR^0,w,c
  2516   00182A  26D9               	addwf	fsr2l,f,c
  2517   00182C  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2518   00182E  22DA               	addwfc	fsr2h,f,c
  2519   001830  0E01               	movlw	1
  2520   001832  6EDF               	movwf	indf2,c
  2521   001834                     
  2522                           ;dc_motor.c: 253:     (*mL).power=40;
  2523   001834  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2524   001838  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2525   00183C  0E28               	movlw	40
  2526   00183E  6EDF               	movwf	indf2,c
  2527   001840                     
  2528                           ;dc_motor.c: 254:     (*mR).power=38;
  2529   001840  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2530   001844  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2531   001848  0E26               	movlw	38
  2532   00184A  6EDF               	movwf	indf2,c
  2533   00184C                     
  2534                           ;dc_motor.c: 255:     setMotorPWM(mL);
  2535   00184C  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2536   001850  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2537   001854  ECC8  F004         	call	_setMotorPWM	;wreg free
  2538   001858                     
  2539                           ;dc_motor.c: 256:     setMotorPWM(mR);
  2540   001858  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2541   00185C  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2542   001860  ECC8  F004         	call	_setMotorPWM	;wreg free
  2543   001864  0012               	return		;funcret
  2544   001866                     __end_of_fullSpeedAhead:
  2545                           	callstack 0
  2546                           
  2547 ;; *************** function _color_click_init *****************
  2548 ;; Defined at:
  2549 ;;		line 30 in file "color.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2567 ;;Total ram usage:        1 bytes
  2568 ;; Hardware stack levels used: 1
  2569 ;; Hardware stack levels required when called: 6
  2570 ;; This function calls:
  2571 ;;		_I2C_2_Master_Init
  2572 ;;		_calibrate_black
  2573 ;;		_calibrate_white
  2574 ;;		_color_writetoaddr
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;; This function uses a non-reentrant model
  2578 ;;
  2579                           
  2580                           	psect	text10
  2581   000AFC                     __ptext10:
  2582                           	callstack 0
  2583   000AFC                     _color_click_init:
  2584                           	callstack 24
  2585   000AFC                     
  2586                           ;color.c: 33:     I2C_2_Master_Init();
  2587   000AFC  EC5F  F00D         	call	_I2C_2_Master_Init	;wreg free
  2588   000B00                     
  2589                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2590   000B00  0E01               	movlw	1
  2591   000B02  6E03               	movwf	color_writetoaddr@value^0,c
  2592   000B04  0E00               	movlw	0
  2593   000B06  EC9B  F00D         	call	_color_writetoaddr
  2594   000B0A                     
  2595                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2596   000B0A  0E3F               	movlw	63
  2597   000B0C  6E16               	movwf	??_color_click_init^0,c
  2598   000B0E  0E55               	movlw	85
  2599   000B10                     u2457:
  2600   000B10  2EE8               	decfsz	wreg,f,c
  2601   000B12  D7FE               	bra	u2457
  2602   000B14  2E16               	decfsz	??_color_click_init^0,f,c
  2603   000B16  D7FC               	bra	u2457
  2604   000B18  F000               	nop	
  2605   000B1A                     
  2606                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2607   000B1A  0E03               	movlw	3
  2608   000B1C  6E03               	movwf	color_writetoaddr@value^0,c
  2609   000B1E  0E00               	movlw	0
  2610   000B20  EC9B  F00D         	call	_color_writetoaddr
  2611   000B24                     
  2612                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2613   000B24  0ED5               	movlw	213
  2614   000B26  6E03               	movwf	color_writetoaddr@value^0,c
  2615   000B28  0E01               	movlw	1
  2616   000B2A  EC9B  F00D         	call	_color_writetoaddr
  2617   000B2E                     
  2618                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2619   000B2E  9E86               	bcf	134,7,c	;volatile
  2620   000B30                     
  2621                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2622   000B30  9287               	bcf	135,1,c	;volatile
  2623   000B32                     
  2624                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2625   000B32  9881               	bcf	129,4,c	;volatile
  2626   000B34                     
  2627                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2628   000B34  EE20  F0B4         	lfsr	2,_Red_rule
  2629   000B38  EE11  F000         	lfsr	1,_Color_rules
  2630   000B3C  0E0B               	movlw	11
  2631   000B3E                     u1481:
  2632   000B3E  CFDB FFE3          	movff	plusw2,plusw1
  2633   000B42  06E8               	decf	wreg,f,c
  2634   000B44  E2FC               	bc	u1481
  2635   000B46                     
  2636                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2637   000B46  EE20  F0A8         	lfsr	2,_Green_rule
  2638   000B4A  EE11  F00C         	lfsr	1,_Color_rules+12
  2639   000B4E  0E0B               	movlw	11
  2640   000B50                     u1491:
  2641   000B50  CFDB FFE3          	movff	plusw2,plusw1
  2642   000B54  06E8               	decf	wreg,f,c
  2643   000B56  E2FC               	bc	u1491
  2644   000B58                     
  2645                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2646   000B58  EE20  F09C         	lfsr	2,_Blue_rule
  2647   000B5C  EE11  F018         	lfsr	1,_Color_rules+24
  2648   000B60  0E0B               	movlw	11
  2649   000B62                     u1501:
  2650   000B62  CFDB FFE3          	movff	plusw2,plusw1
  2651   000B66  06E8               	decf	wreg,f,c
  2652   000B68  E2FC               	bc	u1501
  2653   000B6A                     
  2654                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2655   000B6A  EE20  F090         	lfsr	2,_Yellow_rule
  2656   000B6E  EE11  F024         	lfsr	1,_Color_rules+36
  2657   000B72  0E0B               	movlw	11
  2658   000B74                     u1511:
  2659   000B74  CFDB FFE3          	movff	plusw2,plusw1
  2660   000B78  06E8               	decf	wreg,f,c
  2661   000B7A  E2FC               	bc	u1511
  2662   000B7C                     
  2663                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2664   000B7C  EE20  F084         	lfsr	2,_Pink_rule
  2665   000B80  EE11  F030         	lfsr	1,_Color_rules+48
  2666   000B84  0E0B               	movlw	11
  2667   000B86                     u1521:
  2668   000B86  CFDB FFE3          	movff	plusw2,plusw1
  2669   000B8A  06E8               	decf	wreg,f,c
  2670   000B8C  E2FC               	bc	u1521
  2671   000B8E                     
  2672                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2673   000B8E  EE20  F078         	lfsr	2,_Orange_rule
  2674   000B92  EE11  F03C         	lfsr	1,_Color_rules+60
  2675   000B96  0E0B               	movlw	11
  2676   000B98                     u1531:
  2677   000B98  CFDB FFE3          	movff	plusw2,plusw1
  2678   000B9C  06E8               	decf	wreg,f,c
  2679   000B9E  E2FC               	bc	u1531
  2680   000BA0                     
  2681                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2682   000BA0  EE20  F06C         	lfsr	2,_Lightblue_rule
  2683   000BA4  EE11  F048         	lfsr	1,_Color_rules+72
  2684   000BA8  0E0B               	movlw	11
  2685   000BAA                     u1541:
  2686   000BAA  CFDB FFE3          	movff	plusw2,plusw1
  2687   000BAE  06E8               	decf	wreg,f,c
  2688   000BB0  E2FC               	bc	u1541
  2689   000BB2                     
  2690                           ;color.c: 56:     Color_rules[7] = White_rule;
  2691   000BB2  EE21  F0DC         	lfsr	2,_White_rule
  2692   000BB6  EE11  F054         	lfsr	1,_Color_rules+84
  2693   000BBA  0E0B               	movlw	11
  2694   000BBC                     u1551:
  2695   000BBC  CFDB FFE3          	movff	plusw2,plusw1
  2696   000BC0  06E8               	decf	wreg,f,c
  2697   000BC2  E2FC               	bc	u1551
  2698   000BC4                     
  2699                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2700   000BC4  EE21  F0D0         	lfsr	2,_Black_rule
  2701   000BC8  EE11  F060         	lfsr	1,_Color_rules+96
  2702   000BCC  0E0B               	movlw	11
  2703   000BCE                     u1561:
  2704   000BCE  CFDB FFE3          	movff	plusw2,plusw1
  2705   000BD2  06E8               	decf	wreg,f,c
  2706   000BD4  E2FC               	bc	u1561
  2707   000BD6                     
  2708                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2709   000BD6  8686               	bsf	134,3,c	;volatile
  2710   000BD8                     
  2711                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2712   000BD8  010E               	movlb	14	; () banked
  2713   000BDA  97B4               	bcf	180,3,b	;volatile
  2714   000BDC                     
  2715                           ; BSR set to: 14
  2716                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2717   000BDC  8486               	bsf	134,2,c	;volatile
  2718   000BDE                     
  2719                           ; BSR set to: 14
  2720                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2721   000BDE  95B4               	bcf	180,2,b	;volatile
  2722   000BE0                     l67:
  2723   000BE0  A68E               	btfss	142,3,c	;volatile
  2724   000BE2  EFF5  F005         	goto	u1571
  2725   000BE6  EFF7  F005         	goto	u1570
  2726   000BEA                     u1571:
  2727   000BEA  EFFE  F005         	goto	l71
  2728   000BEE                     u1570:
  2729   000BEE  B48E               	btfsc	142,2,c	;volatile
  2730   000BF0  EFFC  F005         	goto	u1581
  2731   000BF4  EFFE  F005         	goto	u1580
  2732   000BF8                     u1581:
  2733   000BF8  EFF0  F005         	goto	l67
  2734   000BFC                     u1580:
  2735   000BFC                     l71:
  2736                           
  2737                           ;color.c: 72:     if(!PORTFbits.RF2){
  2738   000BFC  B48E               	btfsc	142,2,c	;volatile
  2739   000BFE  EF03  F006         	goto	u1591
  2740   000C02  EF05  F006         	goto	u1590
  2741   000C06                     u1591:
  2742   000C06  EF07  F006         	goto	l2624
  2743   000C0A                     u1590:
  2744   000C0A  EF19  F006         	goto	l73
  2745   000C0E                     l2624:
  2746                           
  2747                           ;color.c: 75:     calibrate_white();
  2748   000C0E  EC94  F009         	call	_calibrate_white	;wreg free
  2749   000C12                     l74:
  2750   000C12  B68E               	btfsc	142,3,c	;volatile
  2751   000C14  EF0E  F006         	goto	u1601
  2752   000C18  EF10  F006         	goto	u1600
  2753   000C1C                     u1601:
  2754   000C1C  EF09  F006         	goto	l74
  2755   000C20                     u1600:
  2756   000C20                     
  2757                           ;color.c: 77:     calibrate_black();
  2758   000C20  EC1A  F006         	call	_calibrate_black	;wreg free
  2759   000C24                     l77:
  2760   000C24  B68E               	btfsc	142,3,c	;volatile
  2761   000C26  EF17  F006         	goto	u1611
  2762   000C2A  EF19  F006         	goto	u1610
  2763   000C2E                     u1611:
  2764   000C2E  EF12  F006         	goto	l77
  2765   000C32                     u1610:
  2766   000C32                     l73:
  2767   000C32  0012               	return		;funcret
  2768   000C34                     __end_of_color_click_init:
  2769                           	callstack 0
  2770                           
  2771 ;; *************** function _color_writetoaddr *****************
  2772 ;; Defined at:
  2773 ;;		line 82 in file "color.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;  address         1    wreg     unsigned char 
  2776 ;;  value           1    2[COMRAM] unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  address         1    3[COMRAM] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;                  1    wreg      void 
  2781 ;; Registers used:
  2782 ;;		wreg, status,2, status,0, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2788 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2789 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2791 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2792 ;;Total ram usage:        2 bytes
  2793 ;; Hardware stack levels used: 1
  2794 ;; Hardware stack levels required when called: 4
  2795 ;; This function calls:
  2796 ;;		_I2C_2_Master_Start
  2797 ;;		_I2C_2_Master_Stop
  2798 ;;		_I2C_2_Master_Write
  2799 ;; This function is called by:
  2800 ;;		_color_click_init
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text11
  2805   001B36                     __ptext11:
  2806                           	callstack 0
  2807   001B36                     _color_writetoaddr:
  2808                           	callstack 25
  2809                           
  2810                           ;incstack = 0
  2811                           ;color_writetoaddr@address stored from wreg
  2812   001B36  6E04               	movwf	color_writetoaddr@address^0,c
  2813   001B38                     
  2814                           ;color.c: 83:     I2C_2_Master_Start();
  2815   001B38  ECD9  F00D         	call	_I2C_2_Master_Start	;wreg free
  2816                           
  2817                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  2818   001B3C  0E52               	movlw	82
  2819   001B3E  ECC8  F00D         	call	_I2C_2_Master_Write
  2820                           
  2821                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  2822   001B42  5004               	movf	color_writetoaddr@address^0,w,c
  2823   001B44  0980               	iorlw	128
  2824   001B46  ECC8  F00D         	call	_I2C_2_Master_Write
  2825                           
  2826                           ;color.c: 86:     I2C_2_Master_Write(value);
  2827   001B4A  5003               	movf	color_writetoaddr@value^0,w,c
  2828   001B4C  ECC8  F00D         	call	_I2C_2_Master_Write
  2829                           
  2830                           ;color.c: 87:     I2C_2_Master_Stop();
  2831   001B50  ECD4  F00D         	call	_I2C_2_Master_Stop	;wreg free
  2832   001B54  0012               	return		;funcret
  2833   001B56                     __end_of_color_writetoaddr:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _calibrate_white *****************
  2837 ;; Defined at:
  2838 ;;		line 229 in file "color.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;		None
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2854 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2856 ;;Total ram usage:        2 bytes
  2857 ;; Hardware stack levels used: 1
  2858 ;; Hardware stack levels required when called: 5
  2859 ;; This function calls:
  2860 ;;		_color_read_Blue
  2861 ;;		_color_read_Green
  2862 ;;		_color_read_Red
  2863 ;;		_set_led_color
  2864 ;; This function is called by:
  2865 ;;		_color_click_init
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text12
  2870   001328                     __ptext12:
  2871                           	callstack 0
  2872   001328                     _calibrate_white:
  2873                           	callstack 24
  2874   001328                     
  2875                           ;color.c: 230:     set_led_color(0b100);
  2876   001328  0E00               	movlw	0
  2877   00132A  6E02               	movwf	(set_led_color@color+1)^0,c
  2878   00132C  0E04               	movlw	4
  2879   00132E  6E01               	movwf	set_led_color@color^0,c
  2880   001330  EC1C  F00D         	call	_set_led_color	;wreg free
  2881   001334                     
  2882                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2883   001334  0E12               	movlw	18
  2884   001336  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2885   001338  0EDC               	movlw	220
  2886   00133A  6E0C               	movwf	??_calibrate_white^0,c
  2887   00133C  0E60               	movlw	96
  2888   00133E                     u2467:
  2889   00133E  2EE8               	decfsz	wreg,f,c
  2890   001340  D7FE               	bra	u2467
  2891   001342  2E0C               	decfsz	??_calibrate_white^0,f,c
  2892   001344  D7FC               	bra	u2467
  2893   001346  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2894   001348  D7FA               	bra	u2467
  2895   00134A                     
  2896                           ;color.c: 232:     White_setup.R = color_read_Red();
  2897   00134A  EC33  F00C         	call	_color_read_Red	;wreg free
  2898   00134E  C005  F060         	movff	?_color_read_Red,_White_setup
  2899   001352  C006  F061         	movff	?_color_read_Red+1,_White_setup+1
  2900   001356  0100               	movlb	0	; () banked
  2901   001358  6B62               	clrf	(_White_setup+2)& (0+255),b
  2902   00135A  6B63               	clrf	(_White_setup+3)& (0+255),b
  2903   00135C                     
  2904                           ; BSR set to: 0
  2905                           ;color.c: 233:     set_led_color(0b010);
  2906   00135C  0E00               	movlw	0
  2907   00135E  6E02               	movwf	(set_led_color@color+1)^0,c
  2908   001360  0E02               	movlw	2
  2909   001362  6E01               	movwf	set_led_color@color^0,c
  2910   001364  EC1C  F00D         	call	_set_led_color	;wreg free
  2911   001368                     
  2912                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2913   001368  0E12               	movlw	18
  2914   00136A  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2915   00136C  0EDC               	movlw	220
  2916   00136E  6E0C               	movwf	??_calibrate_white^0,c
  2917   001370  0E60               	movlw	96
  2918   001372                     u2477:
  2919   001372  2EE8               	decfsz	wreg,f,c
  2920   001374  D7FE               	bra	u2477
  2921   001376  2E0C               	decfsz	??_calibrate_white^0,f,c
  2922   001378  D7FC               	bra	u2477
  2923   00137A  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2924   00137C  D7FA               	bra	u2477
  2925                           
  2926                           ;color.c: 235:     White_setup.G = color_read_Green();
  2927   00137E  EC5B  F00C         	call	_color_read_Green	;wreg free
  2928   001382  C005  F064         	movff	?_color_read_Green,_White_setup+4
  2929   001386  C006  F065         	movff	?_color_read_Green+1,_White_setup+5
  2930   00138A  0100               	movlb	0	; () banked
  2931   00138C  6B66               	clrf	(_White_setup+6)& (0+255),b
  2932   00138E  6B67               	clrf	(_White_setup+7)& (0+255),b
  2933   001390                     
  2934                           ; BSR set to: 0
  2935                           ;color.c: 236:     set_led_color(0b001);
  2936   001390  0E00               	movlw	0
  2937   001392  6E02               	movwf	(set_led_color@color+1)^0,c
  2938   001394  0E01               	movlw	1
  2939   001396  6E01               	movwf	set_led_color@color^0,c
  2940   001398  EC1C  F00D         	call	_set_led_color	;wreg free
  2941   00139C                     
  2942                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2943   00139C  0E12               	movlw	18
  2944   00139E  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2945   0013A0  0EDC               	movlw	220
  2946   0013A2  6E0C               	movwf	??_calibrate_white^0,c
  2947   0013A4  0E60               	movlw	96
  2948   0013A6                     u2487:
  2949   0013A6  2EE8               	decfsz	wreg,f,c
  2950   0013A8  D7FE               	bra	u2487
  2951   0013AA  2E0C               	decfsz	??_calibrate_white^0,f,c
  2952   0013AC  D7FC               	bra	u2487
  2953   0013AE  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2954   0013B0  D7FA               	bra	u2487
  2955   0013B2                     
  2956                           ;color.c: 238:     White_setup.B = color_read_Blue();
  2957   0013B2  ECAB  F00C         	call	_color_read_Blue	;wreg free
  2958   0013B6  C005  F068         	movff	?_color_read_Blue,_White_setup+8
  2959   0013BA  C006  F069         	movff	?_color_read_Blue+1,_White_setup+9
  2960   0013BE  0100               	movlb	0	; () banked
  2961   0013C0  6B6A               	clrf	(_White_setup+10)& (0+255),b
  2962   0013C2  6B6B               	clrf	(_White_setup+11)& (0+255),b
  2963   0013C4                     
  2964                           ; BSR set to: 0
  2965                           ;color.c: 239:     set_led_color(0b000);
  2966   0013C4  0E00               	movlw	0
  2967   0013C6  6E02               	movwf	(set_led_color@color+1)^0,c
  2968   0013C8  0E00               	movlw	0
  2969   0013CA  6E01               	movwf	set_led_color@color^0,c
  2970   0013CC  EC1C  F00D         	call	_set_led_color	;wreg free
  2971   0013D0  0012               	return		;funcret
  2972   0013D2                     __end_of_calibrate_white:
  2973                           	callstack 0
  2974                           
  2975 ;; *************** function _calibrate_black *****************
  2976 ;; Defined at:
  2977 ;;		line 209 in file "color.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  clear2          2   17[COMRAM] unsigned int 
  2982 ;;  clear1          2   15[COMRAM] unsigned int 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2, status,0, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2993 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2995 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2996 ;;Total ram usage:        8 bytes
  2997 ;; Hardware stack levels used: 1
  2998 ;; Hardware stack levels required when called: 5
  2999 ;; This function calls:
  3000 ;;		___lwdiv
  3001 ;;		_color_read_Blue
  3002 ;;		_color_read_Clear
  3003 ;;		_color_read_Green
  3004 ;;		_color_read_Red
  3005 ;;		_set_led_color
  3006 ;; This function is called by:
  3007 ;;		_color_click_init
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text13
  3012   000C34                     __ptext13:
  3013                           	callstack 0
  3014   000C34                     _calibrate_black:
  3015                           	callstack 24
  3016   000C34                     
  3017                           ;color.c: 210:     set_led_color(0b100);
  3018   000C34  0E00               	movlw	0
  3019   000C36  6E02               	movwf	(set_led_color@color+1)^0,c
  3020   000C38  0E04               	movlw	4
  3021   000C3A  6E01               	movwf	set_led_color@color^0,c
  3022   000C3C  EC1C  F00D         	call	_set_led_color	;wreg free
  3023   000C40                     
  3024                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3025   000C40  0E12               	movlw	18
  3026   000C42  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3027   000C44  0EDC               	movlw	220
  3028   000C46  6E0E               	movwf	??_calibrate_black^0,c
  3029   000C48  0E60               	movlw	96
  3030   000C4A                     u2497:
  3031   000C4A  2EE8               	decfsz	wreg,f,c
  3032   000C4C  D7FE               	bra	u2497
  3033   000C4E  2E0E               	decfsz	??_calibrate_black^0,f,c
  3034   000C50  D7FC               	bra	u2497
  3035   000C52  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3036   000C54  D7FA               	bra	u2497
  3037   000C56                     
  3038                           ;color.c: 212:     Black_setup.R = color_read_Red();
  3039   000C56  EC33  F00C         	call	_color_read_Red	;wreg free
  3040   000C5A  C005  F04D         	movff	?_color_read_Red,_Black_setup
  3041   000C5E  C006  F04E         	movff	?_color_read_Red+1,_Black_setup+1
  3042   000C62  6A4F               	clrf	(_Black_setup+2)^0,c
  3043   000C64  6A50               	clrf	(_Black_setup+3)^0,c
  3044   000C66                     
  3045                           ;color.c: 213:     set_led_color(0b010);
  3046   000C66  0E00               	movlw	0
  3047   000C68  6E02               	movwf	(set_led_color@color+1)^0,c
  3048   000C6A  0E02               	movlw	2
  3049   000C6C  6E01               	movwf	set_led_color@color^0,c
  3050   000C6E  EC1C  F00D         	call	_set_led_color	;wreg free
  3051   000C72                     
  3052                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3053   000C72  0E12               	movlw	18
  3054   000C74  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3055   000C76  0EDC               	movlw	220
  3056   000C78  6E0E               	movwf	??_calibrate_black^0,c
  3057   000C7A  0E60               	movlw	96
  3058   000C7C                     u2507:
  3059   000C7C  2EE8               	decfsz	wreg,f,c
  3060   000C7E  D7FE               	bra	u2507
  3061   000C80  2E0E               	decfsz	??_calibrate_black^0,f,c
  3062   000C82  D7FC               	bra	u2507
  3063   000C84  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3064   000C86  D7FA               	bra	u2507
  3065                           
  3066                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3067   000C88  EC5B  F00C         	call	_color_read_Green	;wreg free
  3068   000C8C  C005  F051         	movff	?_color_read_Green,_Black_setup+4
  3069   000C90  C006  F052         	movff	?_color_read_Green+1,_Black_setup+5
  3070   000C94  6A53               	clrf	(_Black_setup+6)^0,c
  3071   000C96  6A54               	clrf	(_Black_setup+7)^0,c
  3072   000C98                     
  3073                           ;color.c: 216:     set_led_color(0b001);
  3074   000C98  0E00               	movlw	0
  3075   000C9A  6E02               	movwf	(set_led_color@color+1)^0,c
  3076   000C9C  0E01               	movlw	1
  3077   000C9E  6E01               	movwf	set_led_color@color^0,c
  3078   000CA0  EC1C  F00D         	call	_set_led_color	;wreg free
  3079   000CA4                     
  3080                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3081   000CA4  0E12               	movlw	18
  3082   000CA6  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3083   000CA8  0EDC               	movlw	220
  3084   000CAA  6E0E               	movwf	??_calibrate_black^0,c
  3085   000CAC  0E60               	movlw	96
  3086   000CAE                     u2517:
  3087   000CAE  2EE8               	decfsz	wreg,f,c
  3088   000CB0  D7FE               	bra	u2517
  3089   000CB2  2E0E               	decfsz	??_calibrate_black^0,f,c
  3090   000CB4  D7FC               	bra	u2517
  3091   000CB6  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3092   000CB8  D7FA               	bra	u2517
  3093   000CBA                     
  3094                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3095   000CBA  ECAB  F00C         	call	_color_read_Blue	;wreg free
  3096   000CBE  C005  F055         	movff	?_color_read_Blue,_Black_setup+8
  3097   000CC2  C006  F056         	movff	?_color_read_Blue+1,_Black_setup+9
  3098   000CC6  6A57               	clrf	(_Black_setup+10)^0,c
  3099   000CC8  6A58               	clrf	(_Black_setup+11)^0,c
  3100   000CCA                     
  3101                           ;color.c: 219:     set_led_color(0b000);
  3102   000CCA  0E00               	movlw	0
  3103   000CCC  6E02               	movwf	(set_led_color@color+1)^0,c
  3104   000CCE  0E00               	movlw	0
  3105   000CD0  6E01               	movwf	set_led_color@color^0,c
  3106   000CD2  EC1C  F00D         	call	_set_led_color	;wreg free
  3107                           
  3108                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3109   000CD6  0E12               	movlw	18
  3110   000CD8  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3111   000CDA  0EDC               	movlw	220
  3112   000CDC  6E0E               	movwf	??_calibrate_black^0,c
  3113   000CDE  0E60               	movlw	96
  3114   000CE0                     u2527:
  3115   000CE0  2EE8               	decfsz	wreg,f,c
  3116   000CE2  D7FE               	bra	u2527
  3117   000CE4  2E0E               	decfsz	??_calibrate_black^0,f,c
  3118   000CE6  D7FC               	bra	u2527
  3119   000CE8  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3120   000CEA  D7FA               	bra	u2527
  3121   000CEC                     
  3122                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3123   000CEC  EC83  F00C         	call	_color_read_Clear	;wreg free
  3124   000CF0  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3125   000CF4  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3126   000CF8                     
  3127                           ;color.c: 222:     set_led_color(0b111);
  3128   000CF8  0E00               	movlw	0
  3129   000CFA  6E02               	movwf	(set_led_color@color+1)^0,c
  3130   000CFC  0E07               	movlw	7
  3131   000CFE  6E01               	movwf	set_led_color@color^0,c
  3132   000D00  EC1C  F00D         	call	_set_led_color	;wreg free
  3133   000D04                     
  3134                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3135   000D04  0E12               	movlw	18
  3136   000D06  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3137   000D08  0EDC               	movlw	220
  3138   000D0A  6E0E               	movwf	??_calibrate_black^0,c
  3139   000D0C  0E60               	movlw	96
  3140   000D0E                     u2537:
  3141   000D0E  2EE8               	decfsz	wreg,f,c
  3142   000D10  D7FE               	bra	u2537
  3143   000D12  2E0E               	decfsz	??_calibrate_black^0,f,c
  3144   000D14  D7FC               	bra	u2537
  3145   000D16  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3146   000D18  D7FA               	bra	u2537
  3147   000D1A                     
  3148                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3149   000D1A  EC83  F00C         	call	_color_read_Clear	;wreg free
  3150   000D1E  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3151   000D22  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3152                           
  3153                           ;color.c: 225:     set_led_color(0b000);
  3154   000D26  0E00               	movlw	0
  3155   000D28  6E02               	movwf	(set_led_color@color+1)^0,c
  3156   000D2A  0E00               	movlw	0
  3157   000D2C  6E01               	movwf	set_led_color@color^0,c
  3158   000D2E  EC1C  F00D         	call	_set_led_color	;wreg free
  3159   000D32                     
  3160                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3161   000D32  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3162   000D36  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3163   000D3A  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3164   000D3E  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3165   000D42  EC66  F00B         	call	___lwdiv	;wreg free
  3166   000D46  C007  F014         	movff	?___lwdiv,_calibrate_black$2448
  3167   000D4A  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2448+1
  3168   000D4E                     
  3169                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3170   000D4E  C014  F007         	movff	_calibrate_black$2448,___lwdiv@dividend
  3171   000D52  C015  F008         	movff	_calibrate_black$2448+1,___lwdiv@dividend+1
  3172   000D56  0E00               	movlw	0
  3173   000D58  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3174   000D5A  0E05               	movlw	5
  3175   000D5C  6E09               	movwf	___lwdiv@divisor^0,c
  3176   000D5E  EC66  F00B         	call	___lwdiv	;wreg free
  3177   000D62  C007  F059         	movff	?___lwdiv,_wall_coef
  3178   000D66  C008  F05A         	movff	?___lwdiv+1,_wall_coef+1
  3179   000D6A  0012               	return		;funcret
  3180   000D6C                     __end_of_calibrate_black:
  3181                           	callstack 0
  3182                           
  3183 ;; *************** function _set_led_color *****************
  3184 ;; Defined at:
  3185 ;;		line 154 in file "color.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  color           2    0[COMRAM] unsigned int 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		None
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3199 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3202 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3203 ;;Total ram usage:        2 bytes
  3204 ;; Hardware stack levels used: 1
  3205 ;; Hardware stack levels required when called: 2
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_get_color_code
  3210 ;;		_calibrate_black
  3211 ;;		_calibrate_white
  3212 ;;		_get_wall_presence
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text14
  3217   001A38                     __ptext14:
  3218                           	callstack 0
  3219   001A38                     _set_led_color:
  3220                           	callstack 27
  3221   001A38                     
  3222                           ;color.c: 158:     if(color & 0b100){
  3223   001A38  A401               	btfss	set_led_color@color^0,2,c
  3224   001A3A  EF21  F00D         	goto	u1271
  3225   001A3E  EF23  F00D         	goto	u1270
  3226   001A42                     u1271:
  3227   001A42  EF26  F00D         	goto	l112
  3228   001A46                     u1270:
  3229   001A46                     
  3230                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3231   001A46  827F               	bsf	127,1,c	;volatile
  3232                           
  3233                           ;color.c: 160:     }else{
  3234   001A48  EF27  F00D         	goto	l113
  3235   001A4C                     l112:
  3236                           
  3237                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3238   001A4C  927F               	bcf	127,1,c	;volatile
  3239   001A4E                     l113:
  3240                           
  3241                           ;color.c: 163:     if(color & 0b010){
  3242   001A4E  A201               	btfss	set_led_color@color^0,1,c
  3243   001A50  EF2C  F00D         	goto	u1281
  3244   001A54  EF2E  F00D         	goto	u1280
  3245   001A58                     u1281:
  3246   001A58  EF31  F00D         	goto	l114
  3247   001A5C                     u1280:
  3248   001A5C                     
  3249                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3250   001A5C  8879               	bsf	121,4,c	;volatile
  3251                           
  3252                           ;color.c: 165:     }else{
  3253   001A5E  EF32  F00D         	goto	l115
  3254   001A62                     l114:
  3255                           
  3256                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3257   001A62  9879               	bcf	121,4,c	;volatile
  3258   001A64                     l115:
  3259                           
  3260                           ;color.c: 168:     if(color & 0b001){
  3261   001A64  A001               	btfss	set_led_color@color^0,0,c
  3262   001A66  EF37  F00D         	goto	u1291
  3263   001A6A  EF39  F00D         	goto	u1290
  3264   001A6E                     u1291:
  3265   001A6E  EF3C  F00D         	goto	l116
  3266   001A72                     u1290:
  3267   001A72                     
  3268                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3269   001A72  8E7E               	bsf	126,7,c	;volatile
  3270                           
  3271                           ;color.c: 170:     }else{
  3272   001A74  EF3D  F00D         	goto	l118
  3273   001A78                     l116:
  3274                           
  3275                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3276   001A78  9E7E               	bcf	126,7,c	;volatile
  3277   001A7A                     l118:
  3278   001A7A  0012               	return		;funcret
  3279   001A7C                     __end_of_set_led_color:
  3280                           	callstack 0
  3281                           
  3282 ;; *************** function _color_read_Red *****************
  3283 ;; Defined at:
  3284 ;;		line 90 in file "color.c"
  3285 ;; Parameters:    Size  Location     Type
  3286 ;;		None
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  tmp             2    9[COMRAM] unsigned int 
  3289 ;; Return value:  Size  Location     Type
  3290 ;;                  2    4[COMRAM] unsigned int 
  3291 ;; Registers used:
  3292 ;;		wreg, status,2, status,0, cstack
  3293 ;; Tracked objects:
  3294 ;;		On entry : 0/0
  3295 ;;		On exit  : 0/0
  3296 ;;		Unchanged: 0/0
  3297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3300 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3301 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3302 ;;Total ram usage:        7 bytes
  3303 ;; Hardware stack levels used: 1
  3304 ;; Hardware stack levels required when called: 4
  3305 ;; This function calls:
  3306 ;;		_I2C_2_Master_Read
  3307 ;;		_I2C_2_Master_RepStart
  3308 ;;		_I2C_2_Master_Start
  3309 ;;		_I2C_2_Master_Stop
  3310 ;;		_I2C_2_Master_Write
  3311 ;; This function is called by:
  3312 ;;		_get_color_code
  3313 ;;		_calibrate_black
  3314 ;;		_calibrate_white
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text15
  3319   001866                     __ptext15:
  3320                           	callstack 0
  3321   001866                     _color_read_Red:
  3322                           	callstack 25
  3323   001866                     
  3324                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3325   001866  ECD9  F00D         	call	_I2C_2_Master_Start	;wreg free
  3326                           
  3327                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3328   00186A  0E52               	movlw	82
  3329   00186C  ECC8  F00D         	call	_I2C_2_Master_Write
  3330                           
  3331                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3332   001870  0EB6               	movlw	182
  3333   001872  ECC8  F00D         	call	_I2C_2_Master_Write
  3334                           
  3335                           ;color.c: 96:  I2C_2_Master_RepStart();
  3336   001876  ECDE  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3337                           
  3338                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3339   00187A  0E53               	movlw	83
  3340   00187C  ECC8  F00D         	call	_I2C_2_Master_Write
  3341                           
  3342                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3343   001880  0E01               	movlw	1
  3344   001882  EC3E  F00D         	call	_I2C_2_Master_Read
  3345   001886  6E07               	movwf	??_color_read_Red^0,c
  3346   001888  5007               	movf	??_color_read_Red^0,w,c
  3347   00188A  6E0A               	movwf	color_read_Red@tmp^0,c
  3348   00188C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3349                           
  3350                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3351   00188E  0E00               	movlw	0
  3352   001890  EC3E  F00D         	call	_I2C_2_Master_Read
  3353   001894  6E07               	movwf	??_color_read_Red^0,c
  3354   001896  5007               	movf	??_color_read_Red^0,w,c
  3355   001898  6E09               	movwf	(??_color_read_Red+2)^0,c
  3356   00189A  6A08               	clrf	(??_color_read_Red+1)^0,c
  3357   00189C  500A               	movf	color_read_Red@tmp^0,w,c
  3358   00189E  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3359   0018A0  6E0A               	movwf	color_read_Red@tmp^0,c
  3360   0018A2  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3361   0018A4  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3362   0018A6  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3363                           
  3364                           ;color.c: 100:  I2C_2_Master_Stop();
  3365   0018A8  ECD4  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3366   0018AC                     
  3367                           ;color.c: 101:  return tmp;
  3368   0018AC  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3369   0018B0  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3370   0018B4  0012               	return		;funcret
  3371   0018B6                     __end_of_color_read_Red:
  3372                           	callstack 0
  3373                           
  3374 ;; *************** function _color_read_Green *****************
  3375 ;; Defined at:
  3376 ;;		line 118 in file "color.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;		None
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  tmp             2    9[COMRAM] unsigned int 
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  2    4[COMRAM] unsigned int 
  3383 ;; Registers used:
  3384 ;;		wreg, status,2, status,0, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3391 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3392 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3393 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3394 ;;Total ram usage:        7 bytes
  3395 ;; Hardware stack levels used: 1
  3396 ;; Hardware stack levels required when called: 4
  3397 ;; This function calls:
  3398 ;;		_I2C_2_Master_Read
  3399 ;;		_I2C_2_Master_RepStart
  3400 ;;		_I2C_2_Master_Start
  3401 ;;		_I2C_2_Master_Stop
  3402 ;;		_I2C_2_Master_Write
  3403 ;; This function is called by:
  3404 ;;		_get_color_code
  3405 ;;		_calibrate_black
  3406 ;;		_calibrate_white
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text16
  3411   0018B6                     __ptext16:
  3412                           	callstack 0
  3413   0018B6                     _color_read_Green:
  3414                           	callstack 25
  3415   0018B6                     
  3416                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3417   0018B6  ECD9  F00D         	call	_I2C_2_Master_Start	;wreg free
  3418                           
  3419                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3420   0018BA  0E52               	movlw	82
  3421   0018BC  ECC8  F00D         	call	_I2C_2_Master_Write
  3422                           
  3423                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3424   0018C0  0EB8               	movlw	184
  3425   0018C2  ECC8  F00D         	call	_I2C_2_Master_Write
  3426                           
  3427                           ;color.c: 124:  I2C_2_Master_RepStart();
  3428   0018C6  ECDE  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3429                           
  3430                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3431   0018CA  0E53               	movlw	83
  3432   0018CC  ECC8  F00D         	call	_I2C_2_Master_Write
  3433                           
  3434                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3435   0018D0  0E01               	movlw	1
  3436   0018D2  EC3E  F00D         	call	_I2C_2_Master_Read
  3437   0018D6  6E07               	movwf	??_color_read_Green^0,c
  3438   0018D8  5007               	movf	??_color_read_Green^0,w,c
  3439   0018DA  6E0A               	movwf	color_read_Green@tmp^0,c
  3440   0018DC  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3441                           
  3442                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3443   0018DE  0E00               	movlw	0
  3444   0018E0  EC3E  F00D         	call	_I2C_2_Master_Read
  3445   0018E4  6E07               	movwf	??_color_read_Green^0,c
  3446   0018E6  5007               	movf	??_color_read_Green^0,w,c
  3447   0018E8  6E09               	movwf	(??_color_read_Green+2)^0,c
  3448   0018EA  6A08               	clrf	(??_color_read_Green+1)^0,c
  3449   0018EC  500A               	movf	color_read_Green@tmp^0,w,c
  3450   0018EE  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3451   0018F0  6E0A               	movwf	color_read_Green@tmp^0,c
  3452   0018F2  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3453   0018F4  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3454   0018F6  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3455                           
  3456                           ;color.c: 128:  I2C_2_Master_Stop();
  3457   0018F8  ECD4  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3458   0018FC                     
  3459                           ;color.c: 129:  return tmp;
  3460   0018FC  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3461   001900  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3462   001904  0012               	return		;funcret
  3463   001906                     __end_of_color_read_Green:
  3464                           	callstack 0
  3465                           
  3466 ;; *************** function _color_read_Clear *****************
  3467 ;; Defined at:
  3468 ;;		line 132 in file "color.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;		None
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  tmp             2    9[COMRAM] unsigned int 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  2    4[COMRAM] unsigned int 
  3475 ;; Registers used:
  3476 ;;		wreg, status,2, status,0, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3483 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3484 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3485 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3486 ;;Total ram usage:        7 bytes
  3487 ;; Hardware stack levels used: 1
  3488 ;; Hardware stack levels required when called: 4
  3489 ;; This function calls:
  3490 ;;		_I2C_2_Master_Read
  3491 ;;		_I2C_2_Master_RepStart
  3492 ;;		_I2C_2_Master_Start
  3493 ;;		_I2C_2_Master_Stop
  3494 ;;		_I2C_2_Master_Write
  3495 ;; This function is called by:
  3496 ;;		_calibrate_black
  3497 ;;		_get_wall_presence
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text17
  3502   001906                     __ptext17:
  3503                           	callstack 0
  3504   001906                     _color_read_Clear:
  3505                           	callstack 25
  3506   001906                     
  3507                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3508   001906  ECD9  F00D         	call	_I2C_2_Master_Start	;wreg free
  3509                           
  3510                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3511   00190A  0E52               	movlw	82
  3512   00190C  ECC8  F00D         	call	_I2C_2_Master_Write
  3513                           
  3514                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3515   001910  0EB4               	movlw	180
  3516   001912  ECC8  F00D         	call	_I2C_2_Master_Write
  3517                           
  3518                           ;color.c: 138:  I2C_2_Master_RepStart();
  3519   001916  ECDE  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3520                           
  3521                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3522   00191A  0E53               	movlw	83
  3523   00191C  ECC8  F00D         	call	_I2C_2_Master_Write
  3524                           
  3525                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3526   001920  0E01               	movlw	1
  3527   001922  EC3E  F00D         	call	_I2C_2_Master_Read
  3528   001926  6E07               	movwf	??_color_read_Clear^0,c
  3529   001928  5007               	movf	??_color_read_Clear^0,w,c
  3530   00192A  6E0A               	movwf	color_read_Clear@tmp^0,c
  3531   00192C  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3532                           
  3533                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3534   00192E  0E00               	movlw	0
  3535   001930  EC3E  F00D         	call	_I2C_2_Master_Read
  3536   001934  6E07               	movwf	??_color_read_Clear^0,c
  3537   001936  5007               	movf	??_color_read_Clear^0,w,c
  3538   001938  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3539   00193A  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3540   00193C  500A               	movf	color_read_Clear@tmp^0,w,c
  3541   00193E  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3542   001940  6E0A               	movwf	color_read_Clear@tmp^0,c
  3543   001942  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3544   001944  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3545   001946  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3546                           
  3547                           ;color.c: 142:  I2C_2_Master_Stop();
  3548   001948  ECD4  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3549   00194C                     
  3550                           ;color.c: 143:  return tmp;
  3551   00194C  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3552   001950  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3553   001954  0012               	return		;funcret
  3554   001956                     __end_of_color_read_Clear:
  3555                           	callstack 0
  3556                           
  3557 ;; *************** function _color_read_Blue *****************
  3558 ;; Defined at:
  3559 ;;		line 104 in file "color.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  tmp             2    9[COMRAM] unsigned int 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  2    4[COMRAM] unsigned int 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3575 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3576 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3577 ;;Total ram usage:        7 bytes
  3578 ;; Hardware stack levels used: 1
  3579 ;; Hardware stack levels required when called: 4
  3580 ;; This function calls:
  3581 ;;		_I2C_2_Master_Read
  3582 ;;		_I2C_2_Master_RepStart
  3583 ;;		_I2C_2_Master_Start
  3584 ;;		_I2C_2_Master_Stop
  3585 ;;		_I2C_2_Master_Write
  3586 ;; This function is called by:
  3587 ;;		_get_color_code
  3588 ;;		_calibrate_black
  3589 ;;		_calibrate_white
  3590 ;; This function uses a non-reentrant model
  3591 ;;
  3592                           
  3593                           	psect	text18
  3594   001956                     __ptext18:
  3595                           	callstack 0
  3596   001956                     _color_read_Blue:
  3597                           	callstack 25
  3598   001956                     
  3599                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3600   001956  ECD9  F00D         	call	_I2C_2_Master_Start	;wreg free
  3601                           
  3602                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3603   00195A  0E52               	movlw	82
  3604   00195C  ECC8  F00D         	call	_I2C_2_Master_Write
  3605                           
  3606                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3607   001960  0EBA               	movlw	186
  3608   001962  ECC8  F00D         	call	_I2C_2_Master_Write
  3609                           
  3610                           ;color.c: 110:  I2C_2_Master_RepStart();
  3611   001966  ECDE  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3612                           
  3613                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3614   00196A  0E53               	movlw	83
  3615   00196C  ECC8  F00D         	call	_I2C_2_Master_Write
  3616                           
  3617                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3618   001970  0E01               	movlw	1
  3619   001972  EC3E  F00D         	call	_I2C_2_Master_Read
  3620   001976  6E07               	movwf	??_color_read_Blue^0,c
  3621   001978  5007               	movf	??_color_read_Blue^0,w,c
  3622   00197A  6E0A               	movwf	color_read_Blue@tmp^0,c
  3623   00197C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3624                           
  3625                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3626   00197E  0E00               	movlw	0
  3627   001980  EC3E  F00D         	call	_I2C_2_Master_Read
  3628   001984  6E07               	movwf	??_color_read_Blue^0,c
  3629   001986  5007               	movf	??_color_read_Blue^0,w,c
  3630   001988  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3631   00198A  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3632   00198C  500A               	movf	color_read_Blue@tmp^0,w,c
  3633   00198E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3634   001990  6E0A               	movwf	color_read_Blue@tmp^0,c
  3635   001992  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3636   001994  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3637   001996  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3638                           
  3639                           ;color.c: 114:  I2C_2_Master_Stop();
  3640   001998  ECD4  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3641   00199C                     
  3642                           ;color.c: 115:  return tmp;
  3643   00199C  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3644   0019A0  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3645   0019A4  0012               	return		;funcret
  3646   0019A6                     __end_of_color_read_Blue:
  3647                           	callstack 0
  3648                           
  3649 ;; *************** function _I2C_2_Master_Write *****************
  3650 ;; Defined at:
  3651 ;;		line 45 in file "i2c.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  data_byte       1    wreg     unsigned char 
  3654 ;; Auto vars:     Size  Location     Type
  3655 ;;  data_byte       1    1[COMRAM] unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, status,2, status,0, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 0/0
  3662 ;;		On exit  : 0/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3668 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3669 ;;Total ram usage:        1 bytes
  3670 ;; Hardware stack levels used: 1
  3671 ;; Hardware stack levels required when called: 3
  3672 ;; This function calls:
  3673 ;;		_I2C_2_Master_Idle
  3674 ;; This function is called by:
  3675 ;;		_color_writetoaddr
  3676 ;;		_color_read_Red
  3677 ;;		_color_read_Blue
  3678 ;;		_color_read_Green
  3679 ;;		_color_read_Clear
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text19
  3684   001B90                     __ptext19:
  3685                           	callstack 0
  3686   001B90                     _I2C_2_Master_Write:
  3687                           	callstack 25
  3688                           
  3689                           ;incstack = 0
  3690                           ;I2C_2_Master_Write@data_byte stored from wreg
  3691   001B90  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3692   001B92                     
  3693                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3694   001B92  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3695   001B96                     
  3696                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3697   001B96  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3698   001B9A  0012               	return		;funcret
  3699   001B9C                     __end_of_I2C_2_Master_Write:
  3700                           	callstack 0
  3701                           
  3702 ;; *************** function _I2C_2_Master_Stop *****************
  3703 ;; Defined at:
  3704 ;;		line 39 in file "i2c.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		wreg, status,2, status,0, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used: 1
  3724 ;; Hardware stack levels required when called: 3
  3725 ;; This function calls:
  3726 ;;		_I2C_2_Master_Idle
  3727 ;; This function is called by:
  3728 ;;		_color_writetoaddr
  3729 ;;		_color_read_Red
  3730 ;;		_color_read_Blue
  3731 ;;		_color_read_Green
  3732 ;;		_color_read_Clear
  3733 ;; This function uses a non-reentrant model
  3734 ;;
  3735                           
  3736                           	psect	text20
  3737   001BA8                     __ptext20:
  3738                           	callstack 0
  3739   001BA8                     _I2C_2_Master_Stop:
  3740                           	callstack 25
  3741   001BA8                     
  3742                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3743   001BA8  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3744   001BAC                     
  3745                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3746   001BAC  010E               	movlb	14	; () banked
  3747   001BAE  85DA               	bsf	218,2,b	;volatile
  3748   001BB0                     
  3749                           ; BSR set to: 14
  3750   001BB0  0012               	return		;funcret
  3751   001BB2                     __end_of_I2C_2_Master_Stop:
  3752                           	callstack 0
  3753                           
  3754 ;; *************** function _I2C_2_Master_Start *****************
  3755 ;; Defined at:
  3756 ;;		line 27 in file "i2c.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used: 1
  3776 ;; Hardware stack levels required when called: 3
  3777 ;; This function calls:
  3778 ;;		_I2C_2_Master_Idle
  3779 ;; This function is called by:
  3780 ;;		_color_writetoaddr
  3781 ;;		_color_read_Red
  3782 ;;		_color_read_Blue
  3783 ;;		_color_read_Green
  3784 ;;		_color_read_Clear
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text21
  3789   001BB2                     __ptext21:
  3790                           	callstack 0
  3791   001BB2                     _I2C_2_Master_Start:
  3792                           	callstack 25
  3793   001BB2                     
  3794                           ;i2c.c: 29:   I2C_2_Master_Idle();
  3795   001BB2  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3796   001BB6                     
  3797                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3798   001BB6  010E               	movlb	14	; () banked
  3799   001BB8  81DA               	bsf	218,0,b	;volatile
  3800   001BBA                     
  3801                           ; BSR set to: 14
  3802   001BBA  0012               	return		;funcret
  3803   001BBC                     __end_of_I2C_2_Master_Start:
  3804                           	callstack 0
  3805                           
  3806 ;; *************** function _I2C_2_Master_RepStart *****************
  3807 ;; Defined at:
  3808 ;;		line 33 in file "i2c.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0, cstack
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3825 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3826 ;;Total ram usage:        0 bytes
  3827 ;; Hardware stack levels used: 1
  3828 ;; Hardware stack levels required when called: 3
  3829 ;; This function calls:
  3830 ;;		_I2C_2_Master_Idle
  3831 ;; This function is called by:
  3832 ;;		_color_read_Red
  3833 ;;		_color_read_Blue
  3834 ;;		_color_read_Green
  3835 ;;		_color_read_Clear
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text22
  3840   001BBC                     __ptext22:
  3841                           	callstack 0
  3842   001BBC                     _I2C_2_Master_RepStart:
  3843                           	callstack 25
  3844   001BBC                     
  3845                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3846   001BBC  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3847   001BC0                     
  3848                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3849   001BC0  010E               	movlb	14	; () banked
  3850   001BC2  83DA               	bsf	218,1,b	;volatile
  3851   001BC4                     
  3852                           ; BSR set to: 14
  3853   001BC4  0012               	return		;funcret
  3854   001BC6                     __end_of_I2C_2_Master_RepStart:
  3855                           	callstack 0
  3856                           
  3857 ;; *************** function _I2C_2_Master_Read *****************
  3858 ;; Defined at:
  3859 ;;		line 51 in file "i2c.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  ack             1    wreg     unsigned char 
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  ack             1    2[COMRAM] unsigned char 
  3864 ;;  tmp             1    3[COMRAM] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      unsigned char 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;Total ram usage:        3 bytes
  3879 ;; Hardware stack levels used: 1
  3880 ;; Hardware stack levels required when called: 3
  3881 ;; This function calls:
  3882 ;;		_I2C_2_Master_Idle
  3883 ;; This function is called by:
  3884 ;;		_color_read_Red
  3885 ;;		_color_read_Blue
  3886 ;;		_color_read_Green
  3887 ;;		_color_read_Clear
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text23
  3892   001A7C                     __ptext23:
  3893                           	callstack 0
  3894   001A7C                     _I2C_2_Master_Read:
  3895                           	callstack 25
  3896                           
  3897                           ; BSR set to: 14
  3898                           ;incstack = 0
  3899                           ;I2C_2_Master_Read@ack stored from wreg
  3900   001A7C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3901   001A7E                     
  3902                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3903   001A7E  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3904   001A82                     
  3905                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3906   001A82  010E               	movlb	14	; () banked
  3907   001A84  87DA               	bsf	218,3,b	;volatile
  3908                           
  3909                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3910   001A86  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3911   001A8A                     
  3912                           ;i2c.c: 57:   tmp = SSP2BUF;
  3913   001A8A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3914                           
  3915                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3916   001A8E  EC74  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3917   001A92                     
  3918                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3919   001A92  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3920   001A94  B4D8               	btfsc	status,2,c
  3921   001A96  EF4F  F00D         	goto	u1221
  3922   001A9A  EF53  F00D         	goto	u1220
  3923   001A9E                     u1221:
  3924   001A9E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3925   001AA0  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3926   001AA2  EF54  F00D         	goto	u1238
  3927   001AA6                     u1220:
  3928   001AA6  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3929   001AA8                     u1238:
  3930   001AA8  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3931   001AAA  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3932   001AAC  010E               	movlb	14	; () banked
  3933   001AAE  51DA               	movf	218,w,b	;volatile
  3934   001AB0  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3935   001AB2  0BDF               	andlw	-33
  3936   001AB4  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3937   001AB6  6FDA               	movwf	218,b	;volatile
  3938   001AB8                     
  3939                           ; BSR set to: 14
  3940                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3941   001AB8  89DA               	bsf	218,4,b	;volatile
  3942   001ABA                     
  3943                           ; BSR set to: 14
  3944                           ;i2c.c: 61:   return tmp;
  3945   001ABA  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3946   001ABC                     
  3947                           ; BSR set to: 14
  3948   001ABC  0012               	return		;funcret
  3949   001ABE                     __end_of_I2C_2_Master_Read:
  3950                           	callstack 0
  3951                           
  3952 ;; *************** function _I2C_2_Master_Idle *****************
  3953 ;; Defined at:
  3954 ;;		line 22 in file "i2c.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;		None
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  1    wreg      void 
  3961 ;; Registers used:
  3962 ;;		wreg, status,2, status,0
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;Total ram usage:        1 bytes
  3973 ;; Hardware stack levels used: 1
  3974 ;; Hardware stack levels required when called: 2
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_I2C_2_Master_Start
  3979 ;;		_I2C_2_Master_RepStart
  3980 ;;		_I2C_2_Master_Stop
  3981 ;;		_I2C_2_Master_Write
  3982 ;;		_I2C_2_Master_Read
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text24
  3987   001AE8                     __ptext24:
  3988                           	callstack 0
  3989   001AE8                     _I2C_2_Master_Idle:
  3990                           	callstack 25
  3991   001AE8                     l341:
  3992   001AE8  010E               	movlb	14	; () banked
  3993   001AEA  B5D8               	btfsc	216,2,b	;volatile
  3994   001AEC  EF7A  F00D         	goto	u1201
  3995   001AF0  EF7C  F00D         	goto	u1200
  3996   001AF4                     u1201:
  3997   001AF4  EF74  F00D         	goto	l341
  3998   001AF8                     u1200:
  3999   001AF8                     
  4000                           ; BSR set to: 14
  4001   001AF8  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4002   001AFC  0E1F               	movlw	31
  4003   001AFE  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4004   001B00  A4D8               	btfss	status,2,c
  4005   001B02  EF85  F00D         	goto	u1211
  4006   001B06  EF87  F00D         	goto	u1210
  4007   001B0A                     u1211:
  4008   001B0A  EF74  F00D         	goto	l341
  4009   001B0E                     u1210:
  4010   001B0E                     
  4011                           ; BSR set to: 14
  4012   001B0E  0012               	return		;funcret
  4013   001B10                     __end_of_I2C_2_Master_Idle:
  4014                           	callstack 0
  4015                           
  4016 ;; *************** function _I2C_2_Master_Init *****************
  4017 ;; Defined at:
  4018 ;;		line 4 in file "i2c.c"
  4019 ;; Parameters:    Size  Location     Type
  4020 ;;		None
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;		None
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  1    wreg      void 
  4025 ;; Registers used:
  4026 ;;		wreg, status,2
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4036 ;;Total ram usage:        0 bytes
  4037 ;; Hardware stack levels used: 1
  4038 ;; Hardware stack levels required when called: 2
  4039 ;; This function calls:
  4040 ;;		Nothing
  4041 ;; This function is called by:
  4042 ;;		_color_click_init
  4043 ;; This function uses a non-reentrant model
  4044 ;;
  4045                           
  4046                           	psect	text25
  4047   001ABE                     __ptext25:
  4048                           	callstack 0
  4049   001ABE                     _I2C_2_Master_Init:
  4050                           	callstack 27
  4051   001ABE                     
  4052                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4053   001ABE  010E               	movlb	14	; () banked
  4054   001AC0  51D9               	movf	217,w,b	;volatile
  4055   001AC2  0BF0               	andlw	-16
  4056   001AC4  0908               	iorlw	8
  4057   001AC6  6FD9               	movwf	217,b	;volatile
  4058   001AC8                     
  4059                           ; BSR set to: 14
  4060                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4061   001AC8  8BD9               	bsf	217,5,b	;volatile
  4062                           
  4063                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4064   001ACA  0E9F               	movlw	159
  4065   001ACC  6FD6               	movwf	214,b	;volatile
  4066   001ACE                     
  4067                           ; BSR set to: 14
  4068                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4069   001ACE  8A84               	bsf	132,5,c	;volatile
  4070   001AD0                     
  4071                           ; BSR set to: 14
  4072                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4073   001AD0  8C84               	bsf	132,6,c	;volatile
  4074   001AD2                     
  4075                           ; BSR set to: 14
  4076                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4077   001AD2  9BA7               	bcf	167,5,b	;volatile
  4078   001AD4                     
  4079                           ; BSR set to: 14
  4080                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4081   001AD4  9DA7               	bcf	167,6,b	;volatile
  4082                           
  4083                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4084   001AD6  0E1D               	movlw	29
  4085   001AD8  6F1D               	movwf	29,b	;volatile
  4086                           
  4087                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4088   001ADA  0E1E               	movlw	30
  4089   001ADC  6F1C               	movwf	28,b	;volatile
  4090                           
  4091                           ;i2c.c: 18:   RD5PPS=0x1C;
  4092   001ADE  0E1C               	movlw	28
  4093   001AE0  6F6F               	movwf	111,b	;volatile
  4094                           
  4095                           ;i2c.c: 19:   RD6PPS=0x1B;
  4096   001AE2  0E1B               	movlw	27
  4097   001AE4  6F70               	movwf	112,b	;volatile
  4098   001AE6                     
  4099                           ; BSR set to: 14
  4100   001AE6  0012               	return		;funcret
  4101   001AE8                     __end_of_I2C_2_Master_Init:
  4102                           	callstack 0
  4103                           
  4104 ;; *************** function _add_seconds_to_list *****************
  4105 ;; Defined at:
  4106 ;;		line 431 in file "dc_motor.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;		None
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;		None
  4111 ;; Return value:  Size  Location     Type
  4112 ;;                  1    wreg      void 
  4113 ;; Registers used:
  4114 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4115 ;; Tracked objects:
  4116 ;;		On entry : 0/0
  4117 ;;		On exit  : 0/0
  4118 ;;		Unchanged: 0/0
  4119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4124 ;;Total ram usage:        2 bytes
  4125 ;; Hardware stack levels used: 1
  4126 ;; Hardware stack levels required when called: 2
  4127 ;; This function calls:
  4128 ;;		Nothing
  4129 ;; This function is called by:
  4130 ;;		_main
  4131 ;; This function uses a non-reentrant model
  4132 ;;
  4133                           
  4134                           	psect	text26
  4135   0019F0                     __ptext26:
  4136                           	callstack 0
  4137   0019F0                     _add_seconds_to_list:
  4138                           	callstack 28
  4139   0019F0                     
  4140                           ;dc_motor.c: 433:     if (seconds > 20)
  4141   0019F0  BE5E               	btfsc	(_seconds+1)^0,7,c
  4142   0019F2  EF04  F00D         	goto	u1921
  4143   0019F6  505E               	movf	(_seconds+1)^0,w,c
  4144   0019F8  E109               	bnz	u1920
  4145   0019FA  0E15               	movlw	21
  4146   0019FC  5C5D               	subwf	_seconds^0,w,c
  4147   0019FE  A0D8               	btfss	status,0,c
  4148   001A00  EF04  F00D         	goto	u1921
  4149   001A04  EF06  F00D         	goto	u1920
  4150   001A08                     u1921:
  4151   001A08  EF1B  F00D         	goto	l296
  4152   001A0C                     u1920:
  4153   001A0C                     
  4154                           ;dc_motor.c: 434:     {;dc_motor.c: 435:         movement_list[index] = seconds - 10;
  4155   001A0C  0EF6               	movlw	246
  4156   001A0E  245D               	addwf	_seconds^0,w,c
  4157   001A10  6E01               	movwf	??_add_seconds_to_list^0,c
  4158   001A12  0EFF               	movlw	255
  4159   001A14  205E               	addwfc	(_seconds+1)^0,w,c
  4160   001A16  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4161   001A18  90D8               	bcf	status,0,c
  4162   001A1A  345B               	rlcf	_index^0,w,c
  4163   001A1C  6ED9               	movwf	fsr2l,c
  4164   001A1E  345C               	rlcf	(_index+1)^0,w,c
  4165   001A20  6EDA               	movwf	fsr2h,c
  4166   001A22  0E6C               	movlw	low _movement_list
  4167   001A24  26D9               	addwf	fsr2l,f,c
  4168   001A26  0E01               	movlw	high _movement_list
  4169   001A28  22DA               	addwfc	fsr2h,f,c
  4170   001A2A  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4171   001A2E  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4172   001A32                     
  4173                           ;dc_motor.c: 436:         index++;
  4174   001A32  4A5B               	infsnz	_index^0,f,c
  4175   001A34  2A5C               	incf	(_index+1)^0,f,c
  4176   001A36                     l296:
  4177   001A36  0012               	return		;funcret
  4178   001A38                     __end_of_add_seconds_to_list:
  4179                           	callstack 0
  4180                           
  4181 ;; *************** function _Timer0_init *****************
  4182 ;; Defined at:
  4183 ;;		line 7 in file "timers.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; Hardware stack levels required when called: 2
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text27
  4212   001B56                     __ptext27:
  4213                           	callstack 0
  4214   001B56                     _Timer0_init:
  4215                           	callstack 28
  4216   001B56                     
  4217                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4218   001B56  50D6               	movf	214,w,c	;volatile
  4219   001B58  0B1F               	andlw	-225
  4220   001B5A  0940               	iorlw	64
  4221   001B5C  6ED6               	movwf	214,c	;volatile
  4222   001B5E                     
  4223                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4224   001B5E  88D6               	bsf	214,4,c	;volatile
  4225                           
  4226                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4227   001B60  50D6               	movf	214,w,c	;volatile
  4228   001B62  0BF0               	andlw	-16
  4229   001B64  0908               	iorlw	8
  4230   001B66  6ED6               	movwf	214,c	;volatile
  4231                           
  4232                           ;timers.c: 13:     TMR0H=0b11100111;
  4233   001B68  0EE7               	movlw	231
  4234   001B6A  6ED4               	movwf	212,c	;volatile
  4235                           
  4236                           ;timers.c: 14:     TMR0L=0b10010101;
  4237   001B6C  0E95               	movlw	149
  4238   001B6E  6ED3               	movwf	211,c	;volatile
  4239   001B70                     
  4240                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4241   001B70  88D5               	bsf	213,4,c	;volatile
  4242   001B72                     
  4243                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4244   001B72  8ED5               	bsf	213,7,c	;volatile
  4245   001B74  0012               	return		;funcret
  4246   001B76                     __end_of_Timer0_init:
  4247                           	callstack 0
  4248                           
  4249 ;; *************** function _RobotMovement *****************
  4250 ;; Defined at:
  4251 ;;		line 321 in file "dc_motor.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  color           2   27[COMRAM] unsigned int 
  4254 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  4255 ;;		 -> main@motorL(9), 
  4256 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  4257 ;;		 -> main@motorR(9), 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  i               2   37[COMRAM] int 
  4260 ;;  i               2   35[COMRAM] int 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4270 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4271 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4273 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4274 ;;Total ram usage:       12 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 5
  4277 ;; This function calls:
  4278 ;;		_turnLeft
  4279 ;;		_turnLeftLong
  4280 ;;		_turnRight
  4281 ;;		_turnRightLong
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text28
  4288   000032                     __ptext28:
  4289                           	callstack 0
  4290   000032                     _RobotMovement:
  4291                           	callstack 25
  4292   000032                     
  4293                           ;dc_motor.c: 321: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 322: {;dc_motor.c: 325:     if(color == 0){
  4294   000032  501C               	movf	RobotMovement@color^0,w,c
  4295   000034  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4296   000036  A4D8               	btfss	status,2,c
  4297   000038  EF20  F000         	goto	u1761
  4298   00003C  EF22  F000         	goto	u1760
  4299   000040                     u1761:
  4300   000040  EF3B  F000         	goto	l2784
  4301   000044                     u1760:
  4302   000044                     
  4303                           ;dc_motor.c: 326:         turnRight(motorL, motorR);
  4304   000044  C01E  F014         	movff	RobotMovement@motorL,turnRight@mL
  4305   000048  C01F  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4306   00004C  C020  F016         	movff	RobotMovement@motorR,turnRight@mR
  4307   000050  C021  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4308   000054  EC4A  F007         	call	_turnRight	;wreg free
  4309   000058                     
  4310                           ;dc_motor.c: 327:         movement_list[index] = -1;
  4311   000058  90D8               	bcf	status,0,c
  4312   00005A  345B               	rlcf	_index^0,w,c
  4313   00005C  6ED9               	movwf	fsr2l,c
  4314   00005E  345C               	rlcf	(_index+1)^0,w,c
  4315   000060  6EDA               	movwf	fsr2h,c
  4316   000062  0E6C               	movlw	low _movement_list
  4317   000064  26D9               	addwf	fsr2l,f,c
  4318   000066  0E01               	movlw	high _movement_list
  4319   000068  22DA               	addwfc	fsr2h,f,c
  4320   00006A  0EFF               	movlw	255
  4321   00006C  6EDE               	movwf	postinc2,c
  4322   00006E  0EFF               	movlw	255
  4323   000070  6EDD               	movwf	postdec2,c
  4324   000072                     
  4325                           ;dc_motor.c: 328:         index++;
  4326   000072  4A5B               	infsnz	_index^0,f,c
  4327   000074  2A5C               	incf	(_index+1)^0,f,c
  4328   000076                     l2784:
  4329                           
  4330                           ;dc_motor.c: 331:     if(color == 1){
  4331   000076  041C               	decf	RobotMovement@color^0,w,c
  4332   000078  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4333   00007A  A4D8               	btfss	status,2,c
  4334   00007C  EF42  F000         	goto	u1771
  4335   000080  EF44  F000         	goto	u1770
  4336   000084                     u1771:
  4337   000084  EF5D  F000         	goto	l2792
  4338   000088                     u1770:
  4339   000088                     
  4340                           ;dc_motor.c: 332:         turnLeft(motorL, motorR);
  4341   000088  C01E  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4342   00008C  C01F  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4343   000090  C020  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4344   000094  C021  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4345   000098  EC72  F008         	call	_turnLeft	;wreg free
  4346   00009C                     
  4347                           ;dc_motor.c: 333:         movement_list[index] = -2;
  4348   00009C  90D8               	bcf	status,0,c
  4349   00009E  345B               	rlcf	_index^0,w,c
  4350   0000A0  6ED9               	movwf	fsr2l,c
  4351   0000A2  345C               	rlcf	(_index+1)^0,w,c
  4352   0000A4  6EDA               	movwf	fsr2h,c
  4353   0000A6  0E6C               	movlw	low _movement_list
  4354   0000A8  26D9               	addwf	fsr2l,f,c
  4355   0000AA  0E01               	movlw	high _movement_list
  4356   0000AC  22DA               	addwfc	fsr2h,f,c
  4357   0000AE  0EFE               	movlw	254
  4358   0000B0  6EDE               	movwf	postinc2,c
  4359   0000B2  0EFF               	movlw	255
  4360   0000B4  6EDD               	movwf	postdec2,c
  4361   0000B6                     
  4362                           ;dc_motor.c: 334:         index++;
  4363   0000B6  4A5B               	infsnz	_index^0,f,c
  4364   0000B8  2A5C               	incf	(_index+1)^0,f,c
  4365   0000BA                     l2792:
  4366                           
  4367                           ;dc_motor.c: 337:     if(color == 2){
  4368   0000BA  0E02               	movlw	2
  4369   0000BC  181C               	xorwf	RobotMovement@color^0,w,c
  4370   0000BE  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4371   0000C0  A4D8               	btfss	status,2,c
  4372   0000C2  EF65  F000         	goto	u1781
  4373   0000C6  EF67  F000         	goto	u1780
  4374   0000CA                     u1781:
  4375   0000CA  EF94  F000         	goto	l2810
  4376   0000CE                     u1780:
  4377   0000CE                     
  4378                           ;dc_motor.c: 338:         int i;;dc_motor.c: 339:         for (i=0;i<2;i++){
  4379   0000CE  0E00               	movlw	0
  4380   0000D0  6E25               	movwf	(RobotMovement@i+1)^0,c
  4381   0000D2  0E00               	movlw	0
  4382   0000D4  6E24               	movwf	RobotMovement@i^0,c
  4383   0000D6                     l2800:
  4384                           
  4385                           ;dc_motor.c: 340:             turnRight(motorL, motorR);
  4386   0000D6  C01E  F014         	movff	RobotMovement@motorL,turnRight@mL
  4387   0000DA  C01F  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4388   0000DE  C020  F016         	movff	RobotMovement@motorR,turnRight@mR
  4389   0000E2  C021  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4390   0000E6  EC4A  F007         	call	_turnRight	;wreg free
  4391   0000EA                     
  4392                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4393   0000EA  90D8               	bcf	status,0,c
  4394   0000EC  345B               	rlcf	_index^0,w,c
  4395   0000EE  6ED9               	movwf	fsr2l,c
  4396   0000F0  345C               	rlcf	(_index+1)^0,w,c
  4397   0000F2  6EDA               	movwf	fsr2h,c
  4398   0000F4  0E6C               	movlw	low _movement_list
  4399   0000F6  26D9               	addwf	fsr2l,f,c
  4400   0000F8  0E01               	movlw	high _movement_list
  4401   0000FA  22DA               	addwfc	fsr2h,f,c
  4402   0000FC  0EFF               	movlw	255
  4403   0000FE  6EDE               	movwf	postinc2,c
  4404   000100  0EFF               	movlw	255
  4405   000102  6EDD               	movwf	postdec2,c
  4406   000104                     
  4407                           ;dc_motor.c: 342:             index++;
  4408   000104  4A5B               	infsnz	_index^0,f,c
  4409   000106  2A5C               	incf	(_index+1)^0,f,c
  4410   000108                     
  4411                           ;dc_motor.c: 343:         }
  4412   000108  4A24               	infsnz	RobotMovement@i^0,f,c
  4413   00010A  2A25               	incf	(RobotMovement@i+1)^0,f,c
  4414   00010C  BE25               	btfsc	(RobotMovement@i+1)^0,7,c
  4415   00010E  EF92  F000         	goto	u1791
  4416   000112  5025               	movf	(RobotMovement@i+1)^0,w,c
  4417   000114  E109               	bnz	u1790
  4418   000116  0E02               	movlw	2
  4419   000118  5C24               	subwf	RobotMovement@i^0,w,c
  4420   00011A  A0D8               	btfss	status,0,c
  4421   00011C  EF92  F000         	goto	u1791
  4422   000120  EF94  F000         	goto	u1790
  4423   000124                     u1791:
  4424   000124  EF6B  F000         	goto	l2800
  4425   000128                     u1790:
  4426   000128                     l2810:
  4427                           
  4428                           ;dc_motor.c: 346:     if(color == 3){
  4429   000128  0E03               	movlw	3
  4430   00012A  181C               	xorwf	RobotMovement@color^0,w,c
  4431   00012C  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4432   00012E  A4D8               	btfss	status,2,c
  4433   000130  EF9C  F000         	goto	u1801
  4434   000134  EF9E  F000         	goto	u1800
  4435   000138                     u1801:
  4436   000138  EF34  F001         	goto	l2828
  4437   00013C                     u1800:
  4438   00013C                     
  4439                           ;dc_motor.c: 348:         if (movement_list[index-1] > 10)
  4440   00013C  90D8               	bcf	status,0,c
  4441   00013E  345B               	rlcf	_index^0,w,c
  4442   000140  6ED9               	movwf	fsr2l,c
  4443   000142  345C               	rlcf	(_index+1)^0,w,c
  4444   000144  6EDA               	movwf	fsr2h,c
  4445   000146  0E6A               	movlw	low (_movement_list+65534)
  4446   000148  26D9               	addwf	fsr2l,f,c
  4447   00014A  0E01               	movlw	high (_movement_list+65534)
  4448   00014C  22DA               	addwfc	fsr2h,f,c
  4449   00014E  0E01               	movlw	1
  4450   000150  BEDB               	btfsc	plusw2,7,c
  4451   000152  EFB5  F000         	goto	u1811
  4452   000156  0E01               	movlw	1
  4453   000158  50DB               	movf	plusw2,w,c
  4454   00015A  E109               	bnz	u1810
  4455   00015C  0E0B               	movlw	11
  4456   00015E  5CDE               	subwf	postinc2,w,c
  4457   000160  A0D8               	btfss	status,0,c
  4458   000162  EFB5  F000         	goto	u1811
  4459   000166  EFB7  F000         	goto	u1810
  4460   00016A                     u1811:
  4461   00016A  EFD5  F000         	goto	l2818
  4462   00016E                     u1810:
  4463   00016E                     
  4464                           ;dc_motor.c: 349:         {;dc_motor.c: 351:             movement_list[index-1] -= 20;
  4465   00016E  90D8               	bcf	status,0,c
  4466   000170  345B               	rlcf	_index^0,w,c
  4467   000172  6ED9               	movwf	fsr2l,c
  4468   000174  345C               	rlcf	(_index+1)^0,w,c
  4469   000176  6EDA               	movwf	fsr2h,c
  4470   000178  0E6A               	movlw	low (_movement_list+65534)
  4471   00017A  26D9               	addwf	fsr2l,f,c
  4472   00017C  0E01               	movlw	high (_movement_list+65534)
  4473   00017E  22DA               	addwfc	fsr2h,f,c
  4474   000180  0EEC               	movlw	236
  4475   000182  26DE               	addwf	postinc2,f,c
  4476   000184  0EFF               	movlw	255
  4477   000186  22DD               	addwfc	postdec2,f,c
  4478                           
  4479                           ;dc_motor.c: 353:             movement_list[index] = -1;
  4480   000188  90D8               	bcf	status,0,c
  4481   00018A  345B               	rlcf	_index^0,w,c
  4482   00018C  6ED9               	movwf	fsr2l,c
  4483   00018E  345C               	rlcf	(_index+1)^0,w,c
  4484   000190  6EDA               	movwf	fsr2h,c
  4485   000192  0E6C               	movlw	low _movement_list
  4486   000194  26D9               	addwf	fsr2l,f,c
  4487   000196  0E01               	movlw	high _movement_list
  4488   000198  22DA               	addwfc	fsr2h,f,c
  4489   00019A  0EFF               	movlw	255
  4490   00019C  6EDE               	movwf	postinc2,c
  4491   00019E  0EFF               	movlw	255
  4492   0001A0  6EDD               	movwf	postdec2,c
  4493   0001A2                     
  4494                           ;dc_motor.c: 354:             index += 1;
  4495   0001A2  4A5B               	infsnz	_index^0,f,c
  4496   0001A4  2A5C               	incf	(_index+1)^0,f,c
  4497                           
  4498                           ;dc_motor.c: 355:         }else{
  4499   0001A6  EF34  F001         	goto	l2828
  4500   0001AA                     l2818:
  4501                           
  4502                           ;dc_motor.c: 357:             if (movement_list[index-1] == -1)
  4503   0001AA  90D8               	bcf	status,0,c
  4504   0001AC  345B               	rlcf	_index^0,w,c
  4505   0001AE  6ED9               	movwf	fsr2l,c
  4506   0001B0  345C               	rlcf	(_index+1)^0,w,c
  4507   0001B2  6EDA               	movwf	fsr2h,c
  4508   0001B4  0E6A               	movlw	low (_movement_list+65534)
  4509   0001B6  26D9               	addwf	fsr2l,f,c
  4510   0001B8  0E01               	movlw	high (_movement_list+65534)
  4511   0001BA  22DA               	addwfc	fsr2h,f,c
  4512   0001BC  28DE               	incf	postinc2,w,c
  4513   0001BE  E106               	bnz	u1821
  4514   0001C0  28DE               	incf	postinc2,w,c
  4515   0001C2  A4D8               	btfss	status,2,c
  4516   0001C4  EFE6  F000         	goto	u1821
  4517   0001C8  EFE8  F000         	goto	u1820
  4518   0001CC                     u1821:
  4519   0001CC  EFF5  F000         	goto	l280
  4520   0001D0                     u1820:
  4521   0001D0                     
  4522                           ;dc_motor.c: 358:             {;dc_motor.c: 360:                 movement_list[index-1] 
      +                          = -2;
  4523   0001D0  90D8               	bcf	status,0,c
  4524   0001D2  345B               	rlcf	_index^0,w,c
  4525   0001D4  6ED9               	movwf	fsr2l,c
  4526   0001D6  345C               	rlcf	(_index+1)^0,w,c
  4527   0001D8  6EDA               	movwf	fsr2h,c
  4528   0001DA  0E6A               	movlw	low (_movement_list+65534)
  4529   0001DC  26D9               	addwf	fsr2l,f,c
  4530   0001DE  0E01               	movlw	high (_movement_list+65534)
  4531   0001E0  22DA               	addwfc	fsr2h,f,c
  4532   0001E2  0EFE               	movlw	254
  4533   0001E4  6EDE               	movwf	postinc2,c
  4534   0001E6  0EFF               	movlw	255
  4535   0001E8  6EDD               	movwf	postdec2,c
  4536   0001EA                     l280:
  4537                           
  4538                           ;dc_motor.c: 363:             if (movement_list[index-1] == -2)
  4539   0001EA  90D8               	bcf	status,0,c
  4540   0001EC  345B               	rlcf	_index^0,w,c
  4541   0001EE  6ED9               	movwf	fsr2l,c
  4542   0001F0  345C               	rlcf	(_index+1)^0,w,c
  4543   0001F2  6EDA               	movwf	fsr2h,c
  4544   0001F4  0E6A               	movlw	low (_movement_list+65534)
  4545   0001F6  26D9               	addwf	fsr2l,f,c
  4546   0001F8  0E01               	movlw	high (_movement_list+65534)
  4547   0001FA  22DA               	addwfc	fsr2h,f,c
  4548   0001FC  0EFE               	movlw	254
  4549   0001FE  18DE               	xorwf	postinc2,w,c
  4550   000200  E106               	bnz	u1831
  4551   000202  28DE               	incf	postinc2,w,c
  4552   000204  A4D8               	btfss	status,2,c
  4553   000206  EF07  F001         	goto	u1831
  4554   00020A  EF09  F001         	goto	u1830
  4555   00020E                     u1831:
  4556   00020E  EF16  F001         	goto	l281
  4557   000212                     u1830:
  4558   000212                     
  4559                           ;dc_motor.c: 364:             {;dc_motor.c: 366:                 movement_list[index-1] 
      +                          = -1;
  4560   000212  90D8               	bcf	status,0,c
  4561   000214  345B               	rlcf	_index^0,w,c
  4562   000216  6ED9               	movwf	fsr2l,c
  4563   000218  345C               	rlcf	(_index+1)^0,w,c
  4564   00021A  6EDA               	movwf	fsr2h,c
  4565   00021C  0E6A               	movlw	low (_movement_list+65534)
  4566   00021E  26D9               	addwf	fsr2l,f,c
  4567   000220  0E01               	movlw	high (_movement_list+65534)
  4568   000222  22DA               	addwfc	fsr2h,f,c
  4569   000224  0EFF               	movlw	255
  4570   000226  6EDE               	movwf	postinc2,c
  4571   000228  0EFF               	movlw	255
  4572   00022A  6EDD               	movwf	postdec2,c
  4573   00022C                     l281:
  4574                           
  4575                           ;dc_motor.c: 369:         movement_list[index] = 20;
  4576   00022C  90D8               	bcf	status,0,c
  4577   00022E  345B               	rlcf	_index^0,w,c
  4578   000230  6ED9               	movwf	fsr2l,c
  4579   000232  345C               	rlcf	(_index+1)^0,w,c
  4580   000234  6EDA               	movwf	fsr2h,c
  4581   000236  0E6C               	movlw	low _movement_list
  4582   000238  26D9               	addwf	fsr2l,f,c
  4583   00023A  0E01               	movlw	high _movement_list
  4584   00023C  22DA               	addwfc	fsr2h,f,c
  4585   00023E  0E14               	movlw	20
  4586   000240  6EDE               	movwf	postinc2,c
  4587   000242  0E00               	movlw	0
  4588   000244  6EDD               	movwf	postdec2,c
  4589   000246                     
  4590                           ;dc_motor.c: 370:         index += 1;
  4591   000246  4A5B               	infsnz	_index^0,f,c
  4592   000248  2A5C               	incf	(_index+1)^0,f,c
  4593   00024A                     
  4594                           ;dc_motor.c: 372:         movement_list[index] = -2;
  4595   00024A  90D8               	bcf	status,0,c
  4596   00024C  345B               	rlcf	_index^0,w,c
  4597   00024E  6ED9               	movwf	fsr2l,c
  4598   000250  345C               	rlcf	(_index+1)^0,w,c
  4599   000252  6EDA               	movwf	fsr2h,c
  4600   000254  0E6C               	movlw	low _movement_list
  4601   000256  26D9               	addwf	fsr2l,f,c
  4602   000258  0E01               	movlw	high _movement_list
  4603   00025A  22DA               	addwfc	fsr2h,f,c
  4604   00025C  0EFE               	movlw	254
  4605   00025E  6EDE               	movwf	postinc2,c
  4606   000260  0EFF               	movlw	255
  4607   000262  6EDD               	movwf	postdec2,c
  4608                           
  4609                           ;dc_motor.c: 373:         index += 1;
  4610   000264  4A5B               	infsnz	_index^0,f,c
  4611   000266  2A5C               	incf	(_index+1)^0,f,c
  4612   000268                     l2828:
  4613                           
  4614                           ;dc_motor.c: 378:     if(color == 4){
  4615   000268  0E04               	movlw	4
  4616   00026A  181C               	xorwf	RobotMovement@color^0,w,c
  4617   00026C  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4618   00026E  A4D8               	btfss	status,2,c
  4619   000270  EF3C  F001         	goto	u1841
  4620   000274  EF3E  F001         	goto	u1840
  4621   000278                     u1841:
  4622   000278  EFD4  F001         	goto	l2846
  4623   00027C                     u1840:
  4624   00027C                     
  4625                           ;dc_motor.c: 380:         if (movement_list[index-1] > 10)
  4626   00027C  90D8               	bcf	status,0,c
  4627   00027E  345B               	rlcf	_index^0,w,c
  4628   000280  6ED9               	movwf	fsr2l,c
  4629   000282  345C               	rlcf	(_index+1)^0,w,c
  4630   000284  6EDA               	movwf	fsr2h,c
  4631   000286  0E6A               	movlw	low (_movement_list+65534)
  4632   000288  26D9               	addwf	fsr2l,f,c
  4633   00028A  0E01               	movlw	high (_movement_list+65534)
  4634   00028C  22DA               	addwfc	fsr2h,f,c
  4635   00028E  0E01               	movlw	1
  4636   000290  BEDB               	btfsc	plusw2,7,c
  4637   000292  EF55  F001         	goto	u1851
  4638   000296  0E01               	movlw	1
  4639   000298  50DB               	movf	plusw2,w,c
  4640   00029A  E109               	bnz	u1850
  4641   00029C  0E0B               	movlw	11
  4642   00029E  5CDE               	subwf	postinc2,w,c
  4643   0002A0  A0D8               	btfss	status,0,c
  4644   0002A2  EF55  F001         	goto	u1851
  4645   0002A6  EF57  F001         	goto	u1850
  4646   0002AA                     u1851:
  4647   0002AA  EF75  F001         	goto	l2836
  4648   0002AE                     u1850:
  4649   0002AE                     
  4650                           ;dc_motor.c: 381:         {;dc_motor.c: 383:             movement_list[index-1] -= 20;
  4651   0002AE  90D8               	bcf	status,0,c
  4652   0002B0  345B               	rlcf	_index^0,w,c
  4653   0002B2  6ED9               	movwf	fsr2l,c
  4654   0002B4  345C               	rlcf	(_index+1)^0,w,c
  4655   0002B6  6EDA               	movwf	fsr2h,c
  4656   0002B8  0E6A               	movlw	low (_movement_list+65534)
  4657   0002BA  26D9               	addwf	fsr2l,f,c
  4658   0002BC  0E01               	movlw	high (_movement_list+65534)
  4659   0002BE  22DA               	addwfc	fsr2h,f,c
  4660   0002C0  0EEC               	movlw	236
  4661   0002C2  26DE               	addwf	postinc2,f,c
  4662   0002C4  0EFF               	movlw	255
  4663   0002C6  22DD               	addwfc	postdec2,f,c
  4664                           
  4665                           ;dc_motor.c: 385:             movement_list[index] = -2;
  4666   0002C8  90D8               	bcf	status,0,c
  4667   0002CA  345B               	rlcf	_index^0,w,c
  4668   0002CC  6ED9               	movwf	fsr2l,c
  4669   0002CE  345C               	rlcf	(_index+1)^0,w,c
  4670   0002D0  6EDA               	movwf	fsr2h,c
  4671   0002D2  0E6C               	movlw	low _movement_list
  4672   0002D4  26D9               	addwf	fsr2l,f,c
  4673   0002D6  0E01               	movlw	high _movement_list
  4674   0002D8  22DA               	addwfc	fsr2h,f,c
  4675   0002DA  0EFE               	movlw	254
  4676   0002DC  6EDE               	movwf	postinc2,c
  4677   0002DE  0EFF               	movlw	255
  4678   0002E0  6EDD               	movwf	postdec2,c
  4679   0002E2                     
  4680                           ;dc_motor.c: 386:             index += 1;
  4681   0002E2  4A5B               	infsnz	_index^0,f,c
  4682   0002E4  2A5C               	incf	(_index+1)^0,f,c
  4683                           
  4684                           ;dc_motor.c: 387:         }else{
  4685   0002E6  EFD4  F001         	goto	l2846
  4686   0002EA                     l2836:
  4687                           
  4688                           ;dc_motor.c: 389:             if (movement_list[index-1] == -1)
  4689   0002EA  90D8               	bcf	status,0,c
  4690   0002EC  345B               	rlcf	_index^0,w,c
  4691   0002EE  6ED9               	movwf	fsr2l,c
  4692   0002F0  345C               	rlcf	(_index+1)^0,w,c
  4693   0002F2  6EDA               	movwf	fsr2h,c
  4694   0002F4  0E6A               	movlw	low (_movement_list+65534)
  4695   0002F6  26D9               	addwf	fsr2l,f,c
  4696   0002F8  0E01               	movlw	high (_movement_list+65534)
  4697   0002FA  22DA               	addwfc	fsr2h,f,c
  4698   0002FC  28DE               	incf	postinc2,w,c
  4699   0002FE  E106               	bnz	u1861
  4700   000300  28DE               	incf	postinc2,w,c
  4701   000302  A4D8               	btfss	status,2,c
  4702   000304  EF86  F001         	goto	u1861
  4703   000308  EF88  F001         	goto	u1860
  4704   00030C                     u1861:
  4705   00030C  EF95  F001         	goto	l285
  4706   000310                     u1860:
  4707   000310                     
  4708                           ;dc_motor.c: 390:             {;dc_motor.c: 392:                 movement_list[index-1] 
      +                          = -2;
  4709   000310  90D8               	bcf	status,0,c
  4710   000312  345B               	rlcf	_index^0,w,c
  4711   000314  6ED9               	movwf	fsr2l,c
  4712   000316  345C               	rlcf	(_index+1)^0,w,c
  4713   000318  6EDA               	movwf	fsr2h,c
  4714   00031A  0E6A               	movlw	low (_movement_list+65534)
  4715   00031C  26D9               	addwf	fsr2l,f,c
  4716   00031E  0E01               	movlw	high (_movement_list+65534)
  4717   000320  22DA               	addwfc	fsr2h,f,c
  4718   000322  0EFE               	movlw	254
  4719   000324  6EDE               	movwf	postinc2,c
  4720   000326  0EFF               	movlw	255
  4721   000328  6EDD               	movwf	postdec2,c
  4722   00032A                     l285:
  4723                           
  4724                           ;dc_motor.c: 395:             if (movement_list[index-1] == -2)
  4725   00032A  90D8               	bcf	status,0,c
  4726   00032C  345B               	rlcf	_index^0,w,c
  4727   00032E  6ED9               	movwf	fsr2l,c
  4728   000330  345C               	rlcf	(_index+1)^0,w,c
  4729   000332  6EDA               	movwf	fsr2h,c
  4730   000334  0E6A               	movlw	low (_movement_list+65534)
  4731   000336  26D9               	addwf	fsr2l,f,c
  4732   000338  0E01               	movlw	high (_movement_list+65534)
  4733   00033A  22DA               	addwfc	fsr2h,f,c
  4734   00033C  0EFE               	movlw	254
  4735   00033E  18DE               	xorwf	postinc2,w,c
  4736   000340  E106               	bnz	u1871
  4737   000342  28DE               	incf	postinc2,w,c
  4738   000344  A4D8               	btfss	status,2,c
  4739   000346  EFA7  F001         	goto	u1871
  4740   00034A  EFA9  F001         	goto	u1870
  4741   00034E                     u1871:
  4742   00034E  EFB6  F001         	goto	l286
  4743   000352                     u1870:
  4744   000352                     
  4745                           ;dc_motor.c: 396:             {;dc_motor.c: 398:                 movement_list[index-1] 
      +                          = -1;
  4746   000352  90D8               	bcf	status,0,c
  4747   000354  345B               	rlcf	_index^0,w,c
  4748   000356  6ED9               	movwf	fsr2l,c
  4749   000358  345C               	rlcf	(_index+1)^0,w,c
  4750   00035A  6EDA               	movwf	fsr2h,c
  4751   00035C  0E6A               	movlw	low (_movement_list+65534)
  4752   00035E  26D9               	addwf	fsr2l,f,c
  4753   000360  0E01               	movlw	high (_movement_list+65534)
  4754   000362  22DA               	addwfc	fsr2h,f,c
  4755   000364  0EFF               	movlw	255
  4756   000366  6EDE               	movwf	postinc2,c
  4757   000368  0EFF               	movlw	255
  4758   00036A  6EDD               	movwf	postdec2,c
  4759   00036C                     l286:
  4760                           
  4761                           ;dc_motor.c: 401:         movement_list[index] = 20;
  4762   00036C  90D8               	bcf	status,0,c
  4763   00036E  345B               	rlcf	_index^0,w,c
  4764   000370  6ED9               	movwf	fsr2l,c
  4765   000372  345C               	rlcf	(_index+1)^0,w,c
  4766   000374  6EDA               	movwf	fsr2h,c
  4767   000376  0E6C               	movlw	low _movement_list
  4768   000378  26D9               	addwf	fsr2l,f,c
  4769   00037A  0E01               	movlw	high _movement_list
  4770   00037C  22DA               	addwfc	fsr2h,f,c
  4771   00037E  0E14               	movlw	20
  4772   000380  6EDE               	movwf	postinc2,c
  4773   000382  0E00               	movlw	0
  4774   000384  6EDD               	movwf	postdec2,c
  4775   000386                     
  4776                           ;dc_motor.c: 402:         index += 1;
  4777   000386  4A5B               	infsnz	_index^0,f,c
  4778   000388  2A5C               	incf	(_index+1)^0,f,c
  4779   00038A                     
  4780                           ;dc_motor.c: 404:         movement_list[index] = -1;
  4781   00038A  90D8               	bcf	status,0,c
  4782   00038C  345B               	rlcf	_index^0,w,c
  4783   00038E  6ED9               	movwf	fsr2l,c
  4784   000390  345C               	rlcf	(_index+1)^0,w,c
  4785   000392  6EDA               	movwf	fsr2h,c
  4786   000394  0E6C               	movlw	low _movement_list
  4787   000396  26D9               	addwf	fsr2l,f,c
  4788   000398  0E01               	movlw	high _movement_list
  4789   00039A  22DA               	addwfc	fsr2h,f,c
  4790   00039C  0EFF               	movlw	255
  4791   00039E  6EDE               	movwf	postinc2,c
  4792   0003A0  0EFF               	movlw	255
  4793   0003A2  6EDD               	movwf	postdec2,c
  4794                           
  4795                           ;dc_motor.c: 405:         index += 1;
  4796   0003A4  4A5B               	infsnz	_index^0,f,c
  4797   0003A6  2A5C               	incf	(_index+1)^0,f,c
  4798   0003A8                     l2846:
  4799                           
  4800                           ;dc_motor.c: 409:     if(color == 5){
  4801   0003A8  0E05               	movlw	5
  4802   0003AA  181C               	xorwf	RobotMovement@color^0,w,c
  4803   0003AC  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4804   0003AE  A4D8               	btfss	status,2,c
  4805   0003B0  EFDC  F001         	goto	u1881
  4806   0003B4  EFDE  F001         	goto	u1880
  4807   0003B8                     u1881:
  4808   0003B8  EFF7  F001         	goto	l2854
  4809   0003BC                     u1880:
  4810   0003BC                     
  4811                           ;dc_motor.c: 410:         turnRightLong(motorL, motorR);
  4812   0003BC  C01E  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  4813   0003C0  C01F  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  4814   0003C4  C020  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  4815   0003C8  C021  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  4816   0003CC  ECB6  F006         	call	_turnRightLong	;wreg free
  4817   0003D0                     
  4818                           ;dc_motor.c: 411:         movement_list[index] = -3;
  4819   0003D0  90D8               	bcf	status,0,c
  4820   0003D2  345B               	rlcf	_index^0,w,c
  4821   0003D4  6ED9               	movwf	fsr2l,c
  4822   0003D6  345C               	rlcf	(_index+1)^0,w,c
  4823   0003D8  6EDA               	movwf	fsr2h,c
  4824   0003DA  0E6C               	movlw	low _movement_list
  4825   0003DC  26D9               	addwf	fsr2l,f,c
  4826   0003DE  0E01               	movlw	high _movement_list
  4827   0003E0  22DA               	addwfc	fsr2h,f,c
  4828   0003E2  0EFD               	movlw	253
  4829   0003E4  6EDE               	movwf	postinc2,c
  4830   0003E6  0EFF               	movlw	255
  4831   0003E8  6EDD               	movwf	postdec2,c
  4832   0003EA                     
  4833                           ;dc_motor.c: 412:         index += 1;
  4834   0003EA  4A5B               	infsnz	_index^0,f,c
  4835   0003EC  2A5C               	incf	(_index+1)^0,f,c
  4836   0003EE                     l2854:
  4837                           
  4838                           ;dc_motor.c: 415:     if(color == 6){
  4839   0003EE  0E06               	movlw	6
  4840   0003F0  181C               	xorwf	RobotMovement@color^0,w,c
  4841   0003F2  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4842   0003F4  A4D8               	btfss	status,2,c
  4843   0003F6  EFFF  F001         	goto	u1891
  4844   0003FA  EF01  F002         	goto	u1890
  4845   0003FE                     u1891:
  4846   0003FE  EF1A  F002         	goto	l2862
  4847   000402                     u1890:
  4848   000402                     
  4849                           ;dc_motor.c: 416:         turnLeftLong(motorL, motorR);
  4850   000402  C01E  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  4851   000406  C01F  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  4852   00040A  C020  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  4853   00040E  C021  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  4854   000412  ECDE  F007         	call	_turnLeftLong	;wreg free
  4855   000416                     
  4856                           ;dc_motor.c: 417:         movement_list[index] = -4;
  4857   000416  90D8               	bcf	status,0,c
  4858   000418  345B               	rlcf	_index^0,w,c
  4859   00041A  6ED9               	movwf	fsr2l,c
  4860   00041C  345C               	rlcf	(_index+1)^0,w,c
  4861   00041E  6EDA               	movwf	fsr2h,c
  4862   000420  0E6C               	movlw	low _movement_list
  4863   000422  26D9               	addwf	fsr2l,f,c
  4864   000424  0E01               	movlw	high _movement_list
  4865   000426  22DA               	addwfc	fsr2h,f,c
  4866   000428  0EFC               	movlw	252
  4867   00042A  6EDE               	movwf	postinc2,c
  4868   00042C  0EFF               	movlw	255
  4869   00042E  6EDD               	movwf	postdec2,c
  4870   000430                     
  4871                           ;dc_motor.c: 418:         index += 1;
  4872   000430  4A5B               	infsnz	_index^0,f,c
  4873   000432  2A5C               	incf	(_index+1)^0,f,c
  4874   000434                     l2862:
  4875                           
  4876                           ;dc_motor.c: 421:     if(color == 7){
  4877   000434  0E07               	movlw	7
  4878   000436  181C               	xorwf	RobotMovement@color^0,w,c
  4879   000438  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4880   00043A  A4D8               	btfss	status,2,c
  4881   00043C  EF22  F002         	goto	u1901
  4882   000440  EF24  F002         	goto	u1900
  4883   000444                     u1901:
  4884   000444  EF42  F002         	goto	l292
  4885   000448                     u1900:
  4886   000448                     
  4887                           ;dc_motor.c: 422:         int i;;dc_motor.c: 423:         for (i=0;i<2;i++){
  4888   000448  0E00               	movlw	0
  4889   00044A  6E27               	movwf	(RobotMovement@i_1276+1)^0,c
  4890   00044C  0E00               	movlw	0
  4891   00044E  6E26               	movwf	RobotMovement@i_1276^0,c
  4892   000450                     l2870:
  4893                           
  4894                           ;dc_motor.c: 424:         turnRight(motorL, motorR);
  4895   000450  C01E  F014         	movff	RobotMovement@motorL,turnRight@mL
  4896   000454  C01F  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4897   000458  C020  F016         	movff	RobotMovement@motorR,turnRight@mR
  4898   00045C  C021  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4899   000460  EC4A  F007         	call	_turnRight	;wreg free
  4900   000464                     
  4901                           ;dc_motor.c: 425:         }
  4902   000464  4A26               	infsnz	RobotMovement@i_1276^0,f,c
  4903   000466  2A27               	incf	(RobotMovement@i_1276+1)^0,f,c
  4904   000468  BE27               	btfsc	(RobotMovement@i_1276+1)^0,7,c
  4905   00046A  EF40  F002         	goto	u1911
  4906   00046E  5027               	movf	(RobotMovement@i_1276+1)^0,w,c
  4907   000470  E109               	bnz	u1910
  4908   000472  0E02               	movlw	2
  4909   000474  5C26               	subwf	RobotMovement@i_1276^0,w,c
  4910   000476  A0D8               	btfss	status,0,c
  4911   000478  EF40  F002         	goto	u1911
  4912   00047C  EF42  F002         	goto	u1910
  4913   000480                     u1911:
  4914   000480  EF28  F002         	goto	l2870
  4915   000484                     u1910:
  4916   000484                     l292:
  4917   000484  0012               	return		;funcret
  4918   000486                     __end_of_RobotMovement:
  4919                           	callstack 0
  4920                           
  4921 ;; *************** function _turnRightLong *****************
  4922 ;; Defined at:
  4923 ;;		line 223 in file "dc_motor.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4926 ;;		 -> main@motorL(9), return_back@motorL(2), 
  4927 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4928 ;;		 -> main@motorR(9), return_back@motorR(2), 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  i               2   25[COMRAM] int 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4943 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4944 ;;Total ram usage:        8 bytes
  4945 ;; Hardware stack levels used: 1
  4946 ;; Hardware stack levels required when called: 4
  4947 ;; This function calls:
  4948 ;;		_setMotorPWM
  4949 ;; This function is called by:
  4950 ;;		_RobotMovement
  4951 ;;		_return_back
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text29
  4956   000D6C                     __ptext29:
  4957                           	callstack 0
  4958   000D6C                     _turnRightLong:
  4959                           	callstack 25
  4960   000D6C                     
  4961                           ;dc_motor.c: 223: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 224: {;dc_motor.c: 226:     int i;;dc_motor.c: 227:     for(i=25;i<40;i+=5){
  4962   000D6C  0E00               	movlw	0
  4963   000D6E  6E1B               	movwf	(turnRightLong@i+1)^0,c
  4964   000D70  0E19               	movlw	25
  4965   000D72  6E1A               	movwf	turnRightLong@i^0,c
  4966   000D74                     l2508:
  4967                           
  4968                           ;dc_motor.c: 228:     (*mL).direction=1;
  4969   000D74  EE20 F001          	lfsr	2,1
  4970   000D78  5014               	movf	turnRightLong@mL^0,w,c
  4971   000D7A  26D9               	addwf	fsr2l,f,c
  4972   000D7C  5015               	movf	(turnRightLong@mL+1)^0,w,c
  4973   000D7E  22DA               	addwfc	fsr2h,f,c
  4974   000D80  0E01               	movlw	1
  4975   000D82  6EDF               	movwf	indf2,c
  4976                           
  4977                           ;dc_motor.c: 229:     (*mR).direction=0;
  4978   000D84  EE20 F001          	lfsr	2,1
  4979   000D88  5016               	movf	turnRightLong@mR^0,w,c
  4980   000D8A  26D9               	addwf	fsr2l,f,c
  4981   000D8C  5017               	movf	(turnRightLong@mR+1)^0,w,c
  4982   000D8E  22DA               	addwfc	fsr2h,f,c
  4983   000D90  0E00               	movlw	0
  4984   000D92  6EDF               	movwf	indf2,c
  4985   000D94                     
  4986                           ;dc_motor.c: 230:     (*mL).power=i;
  4987   000D94  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  4988   000D98  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  4989   000D9C  C01A  FFDF         	movff	turnRightLong@i,indf2
  4990   000DA0                     
  4991                           ;dc_motor.c: 231:     (*mR).power=i;
  4992   000DA0  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  4993   000DA4  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  4994   000DA8  C01A  FFDF         	movff	turnRightLong@i,indf2
  4995   000DAC                     
  4996                           ;dc_motor.c: 232:     setMotorPWM(mL);
  4997   000DAC  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  4998   000DB0  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  4999   000DB4  ECC8  F004         	call	_setMotorPWM	;wreg free
  5000   000DB8                     
  5001                           ;dc_motor.c: 233:     setMotorPWM(mR);
  5002   000DB8  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5003   000DBC  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5004   000DC0  ECC8  F004         	call	_setMotorPWM	;wreg free
  5005   000DC4                     
  5006                           ;dc_motor.c: 234:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5007   000DC4  0E0E               	movlw	14
  5008   000DC6  6E19               	movwf	(??_turnRightLong+1)^0,c
  5009   000DC8  0E12               	movlw	18
  5010   000DCA  6E18               	movwf	??_turnRightLong^0,c
  5011   000DCC  0E69               	movlw	105
  5012   000DCE                     u2547:
  5013   000DCE  2EE8               	decfsz	wreg,f,c
  5014   000DD0  D7FE               	bra	u2547
  5015   000DD2  2E18               	decfsz	??_turnRightLong^0,f,c
  5016   000DD4  D7FC               	bra	u2547
  5017   000DD6  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5018   000DD8  D7FA               	bra	u2547
  5019   000DDA  F000               	nop	
  5020   000DDC                     
  5021                           ;dc_motor.c: 235:     }
  5022   000DDC  0E05               	movlw	5
  5023   000DDE  261A               	addwf	turnRightLong@i^0,f,c
  5024   000DE0  0E00               	movlw	0
  5025   000DE2  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5026   000DE4  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5027   000DE6  EFFE  F006         	goto	u1411
  5028   000DEA  501B               	movf	(turnRightLong@i+1)^0,w,c
  5029   000DEC  E109               	bnz	u1410
  5030   000DEE  0E28               	movlw	40
  5031   000DF0  5C1A               	subwf	turnRightLong@i^0,w,c
  5032   000DF2  A0D8               	btfss	status,0,c
  5033   000DF4  EFFE  F006         	goto	u1411
  5034   000DF8  EF00  F007         	goto	u1410
  5035   000DFC                     u1411:
  5036   000DFC  EFBA  F006         	goto	l2508
  5037   000E00                     u1410:
  5038   000E00                     
  5039                           ;dc_motor.c: 236:     for(i=30;i>15;i-=5){
  5040   000E00  0E00               	movlw	0
  5041   000E02  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5042   000E04  0E1E               	movlw	30
  5043   000E06  6E1A               	movwf	turnRightLong@i^0,c
  5044   000E08                     l2530:
  5045                           
  5046                           ;dc_motor.c: 237:     (*mL).direction=1;
  5047   000E08  EE20 F001          	lfsr	2,1
  5048   000E0C  5014               	movf	turnRightLong@mL^0,w,c
  5049   000E0E  26D9               	addwf	fsr2l,f,c
  5050   000E10  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5051   000E12  22DA               	addwfc	fsr2h,f,c
  5052   000E14  0E01               	movlw	1
  5053   000E16  6EDF               	movwf	indf2,c
  5054                           
  5055                           ;dc_motor.c: 238:     (*mR).direction=0;
  5056   000E18  EE20 F001          	lfsr	2,1
  5057   000E1C  5016               	movf	turnRightLong@mR^0,w,c
  5058   000E1E  26D9               	addwf	fsr2l,f,c
  5059   000E20  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5060   000E22  22DA               	addwfc	fsr2h,f,c
  5061   000E24  0E00               	movlw	0
  5062   000E26  6EDF               	movwf	indf2,c
  5063   000E28                     
  5064                           ;dc_motor.c: 239:     (*mL).power=i;
  5065   000E28  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5066   000E2C  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5067   000E30  C01A  FFDF         	movff	turnRightLong@i,indf2
  5068   000E34                     
  5069                           ;dc_motor.c: 240:     (*mR).power=i;
  5070   000E34  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5071   000E38  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5072   000E3C  C01A  FFDF         	movff	turnRightLong@i,indf2
  5073   000E40                     
  5074                           ;dc_motor.c: 241:     setMotorPWM(mL);
  5075   000E40  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5076   000E44  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5077   000E48  ECC8  F004         	call	_setMotorPWM	;wreg free
  5078   000E4C                     
  5079                           ;dc_motor.c: 242:     setMotorPWM(mR);
  5080   000E4C  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5081   000E50  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5082   000E54  ECC8  F004         	call	_setMotorPWM	;wreg free
  5083   000E58                     
  5084                           ;dc_motor.c: 243:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5085   000E58  0E0D               	movlw	13
  5086   000E5A  6E19               	movwf	(??_turnRightLong+1)^0,c
  5087   000E5C  0EBF               	movlw	191
  5088   000E5E  6E18               	movwf	??_turnRightLong^0,c
  5089   000E60  0E4C               	movlw	76
  5090   000E62                     u2557:
  5091   000E62  2EE8               	decfsz	wreg,f,c
  5092   000E64  D7FE               	bra	u2557
  5093   000E66  2E18               	decfsz	??_turnRightLong^0,f,c
  5094   000E68  D7FC               	bra	u2557
  5095   000E6A  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5096   000E6C  D7FA               	bra	u2557
  5097   000E6E                     
  5098                           ;dc_motor.c: 245:     }
  5099   000E6E  0EFB               	movlw	251
  5100   000E70  261A               	addwf	turnRightLong@i^0,f,c
  5101   000E72  0EFF               	movlw	255
  5102   000E74  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5103   000E76  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5104   000E78  EF49  F007         	goto	u1420
  5105   000E7C  501B               	movf	(turnRightLong@i+1)^0,w,c
  5106   000E7E  E107               	bnz	u1421
  5107   000E80  0E10               	movlw	16
  5108   000E82  5C1A               	subwf	turnRightLong@i^0,w,c
  5109   000E84  B0D8               	btfsc	status,0,c
  5110   000E86  EF47  F007         	goto	u1421
  5111   000E8A  EF49  F007         	goto	u1420
  5112   000E8E                     u1421:
  5113   000E8E  EF04  F007         	goto	l2530
  5114   000E92                     u1420:
  5115   000E92  0012               	return		;funcret
  5116   000E94                     __end_of_turnRightLong:
  5117                           	callstack 0
  5118                           
  5119 ;; *************** function _turnRight *****************
  5120 ;; Defined at:
  5121 ;;		line 150 in file "dc_motor.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5124 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5125 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5126 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  i               2   25[COMRAM] int 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5138 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5140 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5141 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5142 ;;Total ram usage:        8 bytes
  5143 ;; Hardware stack levels used: 1
  5144 ;; Hardware stack levels required when called: 4
  5145 ;; This function calls:
  5146 ;;		_setMotorPWM
  5147 ;; This function is called by:
  5148 ;;		_RobotMovement
  5149 ;;		_return_back
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text30
  5154   000E94                     __ptext30:
  5155                           	callstack 0
  5156   000E94                     _turnRight:
  5157                           	callstack 25
  5158   000E94                     
  5159                           ;dc_motor.c: 150: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          51: {;dc_motor.c: 176:     int i;;dc_motor.c: 177:     for(i=25;i<40;i+=5){
  5160   000E94  0E00               	movlw	0
  5161   000E96  6E1B               	movwf	(turnRight@i+1)^0,c
  5162   000E98  0E19               	movlw	25
  5163   000E9A  6E1A               	movwf	turnRight@i^0,c
  5164   000E9C                     l2420:
  5165                           
  5166                           ;dc_motor.c: 178:     (*mL).direction=1;
  5167   000E9C  EE20 F001          	lfsr	2,1
  5168   000EA0  5014               	movf	turnRight@mL^0,w,c
  5169   000EA2  26D9               	addwf	fsr2l,f,c
  5170   000EA4  5015               	movf	(turnRight@mL+1)^0,w,c
  5171   000EA6  22DA               	addwfc	fsr2h,f,c
  5172   000EA8  0E01               	movlw	1
  5173   000EAA  6EDF               	movwf	indf2,c
  5174                           
  5175                           ;dc_motor.c: 179:     (*mR).direction=0;
  5176   000EAC  EE20 F001          	lfsr	2,1
  5177   000EB0  5016               	movf	turnRight@mR^0,w,c
  5178   000EB2  26D9               	addwf	fsr2l,f,c
  5179   000EB4  5017               	movf	(turnRight@mR+1)^0,w,c
  5180   000EB6  22DA               	addwfc	fsr2h,f,c
  5181   000EB8  0E00               	movlw	0
  5182   000EBA  6EDF               	movwf	indf2,c
  5183   000EBC                     
  5184                           ;dc_motor.c: 180:     (*mL).power=i;
  5185   000EBC  C014  FFD9         	movff	turnRight@mL,fsr2l
  5186   000EC0  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5187   000EC4  C01A  FFDF         	movff	turnRight@i,indf2
  5188   000EC8                     
  5189                           ;dc_motor.c: 181:     (*mR).power=i;
  5190   000EC8  C016  FFD9         	movff	turnRight@mR,fsr2l
  5191   000ECC  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5192   000ED0  C01A  FFDF         	movff	turnRight@i,indf2
  5193   000ED4                     
  5194                           ;dc_motor.c: 182:     setMotorPWM(mL);
  5195   000ED4  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5196   000ED8  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5197   000EDC  ECC8  F004         	call	_setMotorPWM	;wreg free
  5198   000EE0                     
  5199                           ;dc_motor.c: 183:     setMotorPWM(mR);
  5200   000EE0  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5201   000EE4  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5202   000EE8  ECC8  F004         	call	_setMotorPWM	;wreg free
  5203   000EEC                     
  5204                           ;dc_motor.c: 184:     _delay((unsigned long)((107)*(64000000/4000.0)));
  5205   000EEC  0E09               	movlw	9
  5206   000EEE  6E19               	movwf	(??_turnRight+1)^0,c
  5207   000EF0  0EB0               	movlw	176
  5208   000EF2  6E18               	movwf	??_turnRight^0,c
  5209   000EF4  0E58               	movlw	88
  5210   000EF6                     u2567:
  5211   000EF6  2EE8               	decfsz	wreg,f,c
  5212   000EF8  D7FE               	bra	u2567
  5213   000EFA  2E18               	decfsz	??_turnRight^0,f,c
  5214   000EFC  D7FC               	bra	u2567
  5215   000EFE  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5216   000F00  D7FA               	bra	u2567
  5217   000F02  D000               	nop2	
  5218   000F04                     
  5219                           ;dc_motor.c: 185:     }
  5220   000F04  0E05               	movlw	5
  5221   000F06  261A               	addwf	turnRight@i^0,f,c
  5222   000F08  0E00               	movlw	0
  5223   000F0A  221B               	addwfc	(turnRight@i+1)^0,f,c
  5224   000F0C  BE1B               	btfsc	(turnRight@i+1)^0,7,c
  5225   000F0E  EF92  F007         	goto	u1371
  5226   000F12  501B               	movf	(turnRight@i+1)^0,w,c
  5227   000F14  E109               	bnz	u1370
  5228   000F16  0E28               	movlw	40
  5229   000F18  5C1A               	subwf	turnRight@i^0,w,c
  5230   000F1A  A0D8               	btfss	status,0,c
  5231   000F1C  EF92  F007         	goto	u1371
  5232   000F20  EF94  F007         	goto	u1370
  5233   000F24                     u1371:
  5234   000F24  EF4E  F007         	goto	l2420
  5235   000F28                     u1370:
  5236   000F28                     
  5237                           ;dc_motor.c: 186:     for(i=30;i>15;i-=5){
  5238   000F28  0E00               	movlw	0
  5239   000F2A  6E1B               	movwf	(turnRight@i+1)^0,c
  5240   000F2C  0E1E               	movlw	30
  5241   000F2E  6E1A               	movwf	turnRight@i^0,c
  5242   000F30                     l2442:
  5243                           
  5244                           ;dc_motor.c: 187:     (*mL).direction=1;
  5245   000F30  EE20 F001          	lfsr	2,1
  5246   000F34  5014               	movf	turnRight@mL^0,w,c
  5247   000F36  26D9               	addwf	fsr2l,f,c
  5248   000F38  5015               	movf	(turnRight@mL+1)^0,w,c
  5249   000F3A  22DA               	addwfc	fsr2h,f,c
  5250   000F3C  0E01               	movlw	1
  5251   000F3E  6EDF               	movwf	indf2,c
  5252                           
  5253                           ;dc_motor.c: 188:     (*mR).direction=0;
  5254   000F40  EE20 F001          	lfsr	2,1
  5255   000F44  5016               	movf	turnRight@mR^0,w,c
  5256   000F46  26D9               	addwf	fsr2l,f,c
  5257   000F48  5017               	movf	(turnRight@mR+1)^0,w,c
  5258   000F4A  22DA               	addwfc	fsr2h,f,c
  5259   000F4C  0E00               	movlw	0
  5260   000F4E  6EDF               	movwf	indf2,c
  5261   000F50                     
  5262                           ;dc_motor.c: 189:     (*mL).power=i;
  5263   000F50  C014  FFD9         	movff	turnRight@mL,fsr2l
  5264   000F54  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5265   000F58  C01A  FFDF         	movff	turnRight@i,indf2
  5266   000F5C                     
  5267                           ;dc_motor.c: 190:     (*mR).power=i;
  5268   000F5C  C016  FFD9         	movff	turnRight@mR,fsr2l
  5269   000F60  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5270   000F64  C01A  FFDF         	movff	turnRight@i,indf2
  5271   000F68                     
  5272                           ;dc_motor.c: 191:     setMotorPWM(mL);
  5273   000F68  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5274   000F6C  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5275   000F70  ECC8  F004         	call	_setMotorPWM	;wreg free
  5276   000F74                     
  5277                           ;dc_motor.c: 192:     setMotorPWM(mR);
  5278   000F74  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5279   000F78  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5280   000F7C  ECC8  F004         	call	_setMotorPWM	;wreg free
  5281   000F80                     
  5282                           ;dc_motor.c: 193:     _delay((unsigned long)((105)*(64000000/4000.0)));
  5283   000F80  0E09               	movlw	9
  5284   000F82  6E19               	movwf	(??_turnRight+1)^0,c
  5285   000F84  0E86               	movlw	134
  5286   000F86  6E18               	movwf	??_turnRight^0,c
  5287   000F88  0ECA               	movlw	202
  5288   000F8A                     u2577:
  5289   000F8A  2EE8               	decfsz	wreg,f,c
  5290   000F8C  D7FE               	bra	u2577
  5291   000F8E  2E18               	decfsz	??_turnRight^0,f,c
  5292   000F90  D7FC               	bra	u2577
  5293   000F92  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5294   000F94  D7FA               	bra	u2577
  5295   000F96                     
  5296                           ;dc_motor.c: 195:     }
  5297   000F96  0EFB               	movlw	251
  5298   000F98  261A               	addwf	turnRight@i^0,f,c
  5299   000F9A  0EFF               	movlw	255
  5300   000F9C  221B               	addwfc	(turnRight@i+1)^0,f,c
  5301   000F9E  BE1B               	btfsc	(turnRight@i+1)^0,7,c
  5302   000FA0  EFDD  F007         	goto	u1380
  5303   000FA4  501B               	movf	(turnRight@i+1)^0,w,c
  5304   000FA6  E107               	bnz	u1381
  5305   000FA8  0E10               	movlw	16
  5306   000FAA  5C1A               	subwf	turnRight@i^0,w,c
  5307   000FAC  B0D8               	btfsc	status,0,c
  5308   000FAE  EFDB  F007         	goto	u1381
  5309   000FB2  EFDD  F007         	goto	u1380
  5310   000FB6                     u1381:
  5311   000FB6  EF98  F007         	goto	l2442
  5312   000FBA                     u1380:
  5313   000FBA  0012               	return		;funcret
  5314   000FBC                     __end_of_turnRight:
  5315                           	callstack 0
  5316                           
  5317 ;; *************** function _turnLeftLong *****************
  5318 ;; Defined at:
  5319 ;;		line 198 in file "dc_motor.c"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5322 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5323 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5324 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;  i               2   25[COMRAM] int 
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      void 
  5329 ;; Registers used:
  5330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5340 ;;Total ram usage:        8 bytes
  5341 ;; Hardware stack levels used: 1
  5342 ;; Hardware stack levels required when called: 4
  5343 ;; This function calls:
  5344 ;;		_setMotorPWM
  5345 ;; This function is called by:
  5346 ;;		_RobotMovement
  5347 ;;		_return_back
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text31
  5352   000FBC                     __ptext31:
  5353                           	callstack 0
  5354   000FBC                     _turnLeftLong:
  5355                           	callstack 25
  5356   000FBC                     
  5357                           ;dc_motor.c: 198: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 199: {;dc_motor.c: 201:     int i;;dc_motor.c: 202:     for(i=23;i<38;i+=5){
  5358   000FBC  0E00               	movlw	0
  5359   000FBE  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5360   000FC0  0E17               	movlw	23
  5361   000FC2  6E1A               	movwf	turnLeftLong@i^0,c
  5362   000FC4                     l2464:
  5363                           
  5364                           ;dc_motor.c: 203:     (*mL).direction=0;
  5365   000FC4  EE20 F001          	lfsr	2,1
  5366   000FC8  5014               	movf	turnLeftLong@mL^0,w,c
  5367   000FCA  26D9               	addwf	fsr2l,f,c
  5368   000FCC  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5369   000FCE  22DA               	addwfc	fsr2h,f,c
  5370   000FD0  0E00               	movlw	0
  5371   000FD2  6EDF               	movwf	indf2,c
  5372                           
  5373                           ;dc_motor.c: 204:     (*mR).direction=1;
  5374   000FD4  EE20 F001          	lfsr	2,1
  5375   000FD8  5016               	movf	turnLeftLong@mR^0,w,c
  5376   000FDA  26D9               	addwf	fsr2l,f,c
  5377   000FDC  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5378   000FDE  22DA               	addwfc	fsr2h,f,c
  5379   000FE0  0E01               	movlw	1
  5380   000FE2  6EDF               	movwf	indf2,c
  5381   000FE4                     
  5382                           ;dc_motor.c: 205:     (*mL).power=i;
  5383   000FE4  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5384   000FE8  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5385   000FEC  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5386   000FF0                     
  5387                           ;dc_motor.c: 206:     (*mR).power=i;
  5388   000FF0  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5389   000FF4  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5390   000FF8  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5391   000FFC                     
  5392                           ;dc_motor.c: 207:     setMotorPWM(mL);
  5393   000FFC  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5394   001000  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5395   001004  ECC8  F004         	call	_setMotorPWM	;wreg free
  5396   001008                     
  5397                           ;dc_motor.c: 208:     setMotorPWM(mR);
  5398   001008  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5399   00100C  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5400   001010  ECC8  F004         	call	_setMotorPWM	;wreg free
  5401   001014                     
  5402                           ;dc_motor.c: 209:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5403   001014  0E0D               	movlw	13
  5404   001016  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5405   001018  0EAA               	movlw	170
  5406   00101A  6E18               	movwf	??_turnLeftLong^0,c
  5407   00101C  0E84               	movlw	132
  5408   00101E                     u2587:
  5409   00101E  2EE8               	decfsz	wreg,f,c
  5410   001020  D7FE               	bra	u2587
  5411   001022  2E18               	decfsz	??_turnLeftLong^0,f,c
  5412   001024  D7FC               	bra	u2587
  5413   001026  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5414   001028  D7FA               	bra	u2587
  5415   00102A  D000               	nop2	
  5416   00102C                     
  5417                           ;dc_motor.c: 210:     }
  5418   00102C  0E05               	movlw	5
  5419   00102E  261A               	addwf	turnLeftLong@i^0,f,c
  5420   001030  0E00               	movlw	0
  5421   001032  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5422   001034  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5423   001036  EF26  F008         	goto	u1391
  5424   00103A  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5425   00103C  E109               	bnz	u1390
  5426   00103E  0E26               	movlw	38
  5427   001040  5C1A               	subwf	turnLeftLong@i^0,w,c
  5428   001042  A0D8               	btfss	status,0,c
  5429   001044  EF26  F008         	goto	u1391
  5430   001048  EF28  F008         	goto	u1390
  5431   00104C                     u1391:
  5432   00104C  EFE2  F007         	goto	l2464
  5433   001050                     u1390:
  5434   001050                     
  5435                           ;dc_motor.c: 211:     for(i=28;i>13;i-=5){
  5436   001050  0E00               	movlw	0
  5437   001052  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5438   001054  0E1C               	movlw	28
  5439   001056  6E1A               	movwf	turnLeftLong@i^0,c
  5440   001058                     l2486:
  5441                           
  5442                           ;dc_motor.c: 212:     (*mL).direction=0;
  5443   001058  EE20 F001          	lfsr	2,1
  5444   00105C  5014               	movf	turnLeftLong@mL^0,w,c
  5445   00105E  26D9               	addwf	fsr2l,f,c
  5446   001060  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5447   001062  22DA               	addwfc	fsr2h,f,c
  5448   001064  0E00               	movlw	0
  5449   001066  6EDF               	movwf	indf2,c
  5450                           
  5451                           ;dc_motor.c: 213:     (*mR).direction=1;
  5452   001068  EE20 F001          	lfsr	2,1
  5453   00106C  5016               	movf	turnLeftLong@mR^0,w,c
  5454   00106E  26D9               	addwf	fsr2l,f,c
  5455   001070  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5456   001072  22DA               	addwfc	fsr2h,f,c
  5457   001074  0E01               	movlw	1
  5458   001076  6EDF               	movwf	indf2,c
  5459   001078                     
  5460                           ;dc_motor.c: 214:     (*mL).power=i;
  5461   001078  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5462   00107C  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5463   001080  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5464   001084                     
  5465                           ;dc_motor.c: 215:     (*mR).power=i;
  5466   001084  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5467   001088  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5468   00108C  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5469   001090                     
  5470                           ;dc_motor.c: 216:     setMotorPWM(mL);
  5471   001090  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5472   001094  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5473   001098  ECC8  F004         	call	_setMotorPWM	;wreg free
  5474   00109C                     
  5475                           ;dc_motor.c: 217:     setMotorPWM(mR);
  5476   00109C  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5477   0010A0  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5478   0010A4  ECC8  F004         	call	_setMotorPWM	;wreg free
  5479   0010A8                     
  5480                           ;dc_motor.c: 218:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5481   0010A8  0E0D               	movlw	13
  5482   0010AA  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5483   0010AC  0E2D               	movlw	45
  5484   0010AE  6E18               	movwf	??_turnLeftLong^0,c
  5485   0010B0  0ED8               	movlw	216
  5486   0010B2                     u2597:
  5487   0010B2  2EE8               	decfsz	wreg,f,c
  5488   0010B4  D7FE               	bra	u2597
  5489   0010B6  2E18               	decfsz	??_turnLeftLong^0,f,c
  5490   0010B8  D7FC               	bra	u2597
  5491   0010BA  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5492   0010BC  D7FA               	bra	u2597
  5493   0010BE                     
  5494                           ;dc_motor.c: 220:     }
  5495   0010BE  0EFB               	movlw	251
  5496   0010C0  261A               	addwf	turnLeftLong@i^0,f,c
  5497   0010C2  0EFF               	movlw	255
  5498   0010C4  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5499   0010C6  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5500   0010C8  EF71  F008         	goto	u1400
  5501   0010CC  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5502   0010CE  E107               	bnz	u1401
  5503   0010D0  0E0E               	movlw	14
  5504   0010D2  5C1A               	subwf	turnLeftLong@i^0,w,c
  5505   0010D4  B0D8               	btfsc	status,0,c
  5506   0010D6  EF6F  F008         	goto	u1401
  5507   0010DA  EF71  F008         	goto	u1400
  5508   0010DE                     u1401:
  5509   0010DE  EF2C  F008         	goto	l2486
  5510   0010E2                     u1400:
  5511   0010E2  0012               	return		;funcret
  5512   0010E4                     __end_of_turnLeftLong:
  5513                           	callstack 0
  5514                           
  5515 ;; *************** function _turnLeft *****************
  5516 ;; Defined at:
  5517 ;;		line 102 in file "dc_motor.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5520 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5521 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5522 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  i               2   25[COMRAM] int 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5534 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5536 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5537 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5538 ;;Total ram usage:        8 bytes
  5539 ;; Hardware stack levels used: 1
  5540 ;; Hardware stack levels required when called: 4
  5541 ;; This function calls:
  5542 ;;		_setMotorPWM
  5543 ;; This function is called by:
  5544 ;;		_RobotMovement
  5545 ;;		_return_back
  5546 ;; This function uses a non-reentrant model
  5547 ;;
  5548                           
  5549                           	psect	text32
  5550   0010E4                     __ptext32:
  5551                           	callstack 0
  5552   0010E4                     _turnLeft:
  5553                           	callstack 25
  5554   0010E4                     
  5555                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int i;;dc_motor.c: 129:     for(i=23;i<38;i+=5){
  5556   0010E4  0E00               	movlw	0
  5557   0010E6  6E1B               	movwf	(turnLeft@i+1)^0,c
  5558   0010E8  0E17               	movlw	23
  5559   0010EA  6E1A               	movwf	turnLeft@i^0,c
  5560   0010EC                     l2376:
  5561                           
  5562                           ;dc_motor.c: 130:     (*mL).direction=0;
  5563   0010EC  EE20 F001          	lfsr	2,1
  5564   0010F0  5014               	movf	turnLeft@mL^0,w,c
  5565   0010F2  26D9               	addwf	fsr2l,f,c
  5566   0010F4  5015               	movf	(turnLeft@mL+1)^0,w,c
  5567   0010F6  22DA               	addwfc	fsr2h,f,c
  5568   0010F8  0E00               	movlw	0
  5569   0010FA  6EDF               	movwf	indf2,c
  5570                           
  5571                           ;dc_motor.c: 131:     (*mR).direction=1;
  5572   0010FC  EE20 F001          	lfsr	2,1
  5573   001100  5016               	movf	turnLeft@mR^0,w,c
  5574   001102  26D9               	addwf	fsr2l,f,c
  5575   001104  5017               	movf	(turnLeft@mR+1)^0,w,c
  5576   001106  22DA               	addwfc	fsr2h,f,c
  5577   001108  0E01               	movlw	1
  5578   00110A  6EDF               	movwf	indf2,c
  5579   00110C                     
  5580                           ;dc_motor.c: 132:     (*mL).power=i;
  5581   00110C  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5582   001110  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5583   001114  C01A  FFDF         	movff	turnLeft@i,indf2
  5584   001118                     
  5585                           ;dc_motor.c: 133:     (*mR).power=i;
  5586   001118  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5587   00111C  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5588   001120  C01A  FFDF         	movff	turnLeft@i,indf2
  5589   001124                     
  5590                           ;dc_motor.c: 134:     setMotorPWM(mL);
  5591   001124  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5592   001128  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5593   00112C  ECC8  F004         	call	_setMotorPWM	;wreg free
  5594   001130                     
  5595                           ;dc_motor.c: 135:     setMotorPWM(mR);
  5596   001130  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5597   001134  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5598   001138  ECC8  F004         	call	_setMotorPWM	;wreg free
  5599   00113C                     
  5600                           ;dc_motor.c: 136:     _delay((unsigned long)((104)*(64000000/4000.0)));
  5601   00113C  0E09               	movlw	9
  5602   00113E  6E19               	movwf	(??_turnLeft+1)^0,c
  5603   001140  0E72               	movlw	114
  5604   001142  6E18               	movwf	??_turnLeft^0,c
  5605   001144  0E02               	movlw	2
  5606   001146                     u2607:
  5607   001146  2EE8               	decfsz	wreg,f,c
  5608   001148  D7FE               	bra	u2607
  5609   00114A  2E18               	decfsz	??_turnLeft^0,f,c
  5610   00114C  D7FC               	bra	u2607
  5611   00114E  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5612   001150  D7FA               	bra	u2607
  5613   001152                     
  5614                           ;dc_motor.c: 137:     }
  5615   001152  0E05               	movlw	5
  5616   001154  261A               	addwf	turnLeft@i^0,f,c
  5617   001156  0E00               	movlw	0
  5618   001158  221B               	addwfc	(turnLeft@i+1)^0,f,c
  5619   00115A  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
  5620   00115C  EFB9  F008         	goto	u1351
  5621   001160  501B               	movf	(turnLeft@i+1)^0,w,c
  5622   001162  E109               	bnz	u1350
  5623   001164  0E26               	movlw	38
  5624   001166  5C1A               	subwf	turnLeft@i^0,w,c
  5625   001168  A0D8               	btfss	status,0,c
  5626   00116A  EFB9  F008         	goto	u1351
  5627   00116E  EFBB  F008         	goto	u1350
  5628   001172                     u1351:
  5629   001172  EF76  F008         	goto	l2376
  5630   001176                     u1350:
  5631   001176                     
  5632                           ;dc_motor.c: 138:     for(i=28;i>13;i-=5){
  5633   001176  0E00               	movlw	0
  5634   001178  6E1B               	movwf	(turnLeft@i+1)^0,c
  5635   00117A  0E1C               	movlw	28
  5636   00117C  6E1A               	movwf	turnLeft@i^0,c
  5637   00117E                     l2398:
  5638                           
  5639                           ;dc_motor.c: 139:     (*mL).direction=0;
  5640   00117E  EE20 F001          	lfsr	2,1
  5641   001182  5014               	movf	turnLeft@mL^0,w,c
  5642   001184  26D9               	addwf	fsr2l,f,c
  5643   001186  5015               	movf	(turnLeft@mL+1)^0,w,c
  5644   001188  22DA               	addwfc	fsr2h,f,c
  5645   00118A  0E00               	movlw	0
  5646   00118C  6EDF               	movwf	indf2,c
  5647                           
  5648                           ;dc_motor.c: 140:     (*mR).direction=1;
  5649   00118E  EE20 F001          	lfsr	2,1
  5650   001192  5016               	movf	turnLeft@mR^0,w,c
  5651   001194  26D9               	addwf	fsr2l,f,c
  5652   001196  5017               	movf	(turnLeft@mR+1)^0,w,c
  5653   001198  22DA               	addwfc	fsr2h,f,c
  5654   00119A  0E01               	movlw	1
  5655   00119C  6EDF               	movwf	indf2,c
  5656   00119E                     
  5657                           ;dc_motor.c: 141:     (*mL).power=i;
  5658   00119E  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5659   0011A2  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5660   0011A6  C01A  FFDF         	movff	turnLeft@i,indf2
  5661   0011AA                     
  5662                           ;dc_motor.c: 142:     (*mR).power=i;
  5663   0011AA  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5664   0011AE  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5665   0011B2  C01A  FFDF         	movff	turnLeft@i,indf2
  5666   0011B6                     
  5667                           ;dc_motor.c: 143:     setMotorPWM(mL);
  5668   0011B6  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5669   0011BA  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5670   0011BE  ECC8  F004         	call	_setMotorPWM	;wreg free
  5671   0011C2                     
  5672                           ;dc_motor.c: 144:     setMotorPWM(mR);
  5673   0011C2  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5674   0011C6  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5675   0011CA  ECC8  F004         	call	_setMotorPWM	;wreg free
  5676   0011CE                     
  5677                           ;dc_motor.c: 145:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5678   0011CE  0E09               	movlw	9
  5679   0011D0  6E19               	movwf	(??_turnLeft+1)^0,c
  5680   0011D2  0E1E               	movlw	30
  5681   0011D4  6E18               	movwf	??_turnLeft^0,c
  5682   0011D6  0EE4               	movlw	228
  5683   0011D8                     u2617:
  5684   0011D8  2EE8               	decfsz	wreg,f,c
  5685   0011DA  D7FE               	bra	u2617
  5686   0011DC  2E18               	decfsz	??_turnLeft^0,f,c
  5687   0011DE  D7FC               	bra	u2617
  5688   0011E0  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5689   0011E2  D7FA               	bra	u2617
  5690   0011E4  D000               	nop2	
  5691   0011E6                     
  5692                           ;dc_motor.c: 147:     }
  5693   0011E6  0EFB               	movlw	251
  5694   0011E8  261A               	addwf	turnLeft@i^0,f,c
  5695   0011EA  0EFF               	movlw	255
  5696   0011EC  221B               	addwfc	(turnLeft@i+1)^0,f,c
  5697   0011EE  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
  5698   0011F0  EF05  F009         	goto	u1360
  5699   0011F4  501B               	movf	(turnLeft@i+1)^0,w,c
  5700   0011F6  E107               	bnz	u1361
  5701   0011F8  0E0E               	movlw	14
  5702   0011FA  5C1A               	subwf	turnLeft@i^0,w,c
  5703   0011FC  B0D8               	btfsc	status,0,c
  5704   0011FE  EF03  F009         	goto	u1361
  5705   001202  EF05  F009         	goto	u1360
  5706   001206                     u1361:
  5707   001206  EFBF  F008         	goto	l2398
  5708   00120A                     u1360:
  5709   00120A  0012               	return		;funcret
  5710   00120C                     __end_of_turnLeft:
  5711                           	callstack 0
  5712                           
  5713 ;; *************** function _setMotorPWM *****************
  5714 ;; Defined at:
  5715 ;;		line 69 in file "dc_motor.c"
  5716 ;; Parameters:    Size  Location     Type
  5717 ;;  m               2   13[COMRAM] PTR struct DC_motor
  5718 ;;		 -> main@motorR(9), main@motorL(9), return_back@motorR(2), return_back@motorL(2), 
  5719 ;;		 -> moveBack@mR(2), moveBack@mL(2), 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  negDuty         1   18[COMRAM] unsigned char 
  5722 ;;  posDuty         1   17[COMRAM] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      void 
  5725 ;; Registers used:
  5726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/0
  5729 ;;		On exit  : 0/0
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5732 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5733 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5734 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5735 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5736 ;;Total ram usage:        6 bytes
  5737 ;; Hardware stack levels used: 1
  5738 ;; Hardware stack levels required when called: 3
  5739 ;; This function calls:
  5740 ;;		___lwdiv
  5741 ;;		___wmul
  5742 ;; This function is called by:
  5743 ;;		_stop
  5744 ;;		_turnLeft
  5745 ;;		_turnRight
  5746 ;;		_turnLeftLong
  5747 ;;		_turnRightLong
  5748 ;;		_fullSpeedAhead
  5749 ;;		_moveBack
  5750 ;;		_TimedfullSpeedAhead
  5751 ;;		_Calibrate
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text33
  5756   000990                     __ptext33:
  5757                           	callstack 0
  5758   000990                     _setMotorPWM:
  5759                           	callstack 26
  5760   000990                     
  5761                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  5762   000990  EE20 F002          	lfsr	2,2
  5763   000994  500E               	movf	setMotorPWM@m^0,w,c
  5764   000996  26D9               	addwf	fsr2l,f,c
  5765   000998  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5766   00099A  22DA               	addwfc	fsr2h,f,c
  5767   00099C  50DF               	movf	indf2,w,c
  5768   00099E  B4D8               	btfsc	status,2,c
  5769   0009A0  EFD4  F004         	goto	u1301
  5770   0009A4  EFD6  F004         	goto	u1300
  5771   0009A8                     u1301:
  5772   0009A8  EF0A  F005         	goto	l2266
  5773   0009AC                     u1300:
  5774   0009AC                     
  5775                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5776   0009AC  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5777   0009B0  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5778   0009B4  50DF               	movf	indf2,w,c
  5779   0009B6  6E10               	movwf	??_setMotorPWM^0,c
  5780   0009B8  5010               	movf	??_setMotorPWM^0,w,c
  5781   0009BA  6E01               	movwf	___wmul@multiplier^0,c
  5782   0009BC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5783   0009BE  EE20 F003          	lfsr	2,3
  5784   0009C2  500E               	movf	setMotorPWM@m^0,w,c
  5785   0009C4  26D9               	addwf	fsr2l,f,c
  5786   0009C6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5787   0009C8  22DA               	addwfc	fsr2h,f,c
  5788   0009CA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5789   0009CE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5790   0009D2  EC88  F00D         	call	___wmul	;wreg free
  5791   0009D6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5792   0009DA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5793   0009DE  0E00               	movlw	0
  5794   0009E0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5795   0009E2  0E64               	movlw	100
  5796   0009E4  6E09               	movwf	___lwdiv@divisor^0,c
  5797   0009E6  EC66  F00B         	call	___lwdiv	;wreg free
  5798   0009EA  EE20 F003          	lfsr	2,3
  5799   0009EE  500E               	movf	setMotorPWM@m^0,w,c
  5800   0009F0  26D9               	addwf	fsr2l,f,c
  5801   0009F2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5802   0009F4  22DA               	addwfc	fsr2h,f,c
  5803   0009F6  50DF               	movf	indf2,w,c
  5804   0009F8  6E11               	movwf	(??_setMotorPWM+1)^0,c
  5805   0009FA  5007               	movf	?___lwdiv^0,w,c
  5806   0009FC  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  5807   0009FE  6E12               	movwf	setMotorPWM@posDuty^0,c
  5808   000A00                     
  5809                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  5810   000A00  EE20 F003          	lfsr	2,3
  5811   000A04  500E               	movf	setMotorPWM@m^0,w,c
  5812   000A06  26D9               	addwf	fsr2l,f,c
  5813   000A08  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5814   000A0A  22DA               	addwfc	fsr2h,f,c
  5815   000A0C  50DF               	movf	indf2,w,c
  5816   000A0E  6E13               	movwf	setMotorPWM@negDuty^0,c
  5817                           
  5818                           ;dc_motor.c: 76:     }
  5819   000A10  EF2D  F005         	goto	l2270
  5820   000A14                     l2266:
  5821                           
  5822                           ;dc_motor.c: 78:         posDuty=0;
  5823   000A14  0E00               	movlw	0
  5824   000A16  6E12               	movwf	setMotorPWM@posDuty^0,c
  5825   000A18                     
  5826                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5827   000A18  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5828   000A1C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5829   000A20  50DF               	movf	indf2,w,c
  5830   000A22  6E10               	movwf	??_setMotorPWM^0,c
  5831   000A24  5010               	movf	??_setMotorPWM^0,w,c
  5832   000A26  6E01               	movwf	___wmul@multiplier^0,c
  5833   000A28  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5834   000A2A  EE20 F003          	lfsr	2,3
  5835   000A2E  500E               	movf	setMotorPWM@m^0,w,c
  5836   000A30  26D9               	addwf	fsr2l,f,c
  5837   000A32  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5838   000A34  22DA               	addwfc	fsr2h,f,c
  5839   000A36  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5840   000A3A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5841   000A3E  EC88  F00D         	call	___wmul	;wreg free
  5842   000A42  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5843   000A46  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5844   000A4A  0E00               	movlw	0
  5845   000A4C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5846   000A4E  0E64               	movlw	100
  5847   000A50  6E09               	movwf	___lwdiv@divisor^0,c
  5848   000A52  EC66  F00B         	call	___lwdiv	;wreg free
  5849   000A56  5007               	movf	?___lwdiv^0,w,c
  5850   000A58  6E13               	movwf	setMotorPWM@negDuty^0,c
  5851   000A5A                     l2270:
  5852                           
  5853                           ;dc_motor.c: 82:     if (m->direction) {
  5854   000A5A  EE20 F001          	lfsr	2,1
  5855   000A5E  500E               	movf	setMotorPWM@m^0,w,c
  5856   000A60  26D9               	addwf	fsr2l,f,c
  5857   000A62  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5858   000A64  22DA               	addwfc	fsr2h,f,c
  5859   000A66  50DF               	movf	indf2,w,c
  5860   000A68  B4D8               	btfsc	status,2,c
  5861   000A6A  EF39  F005         	goto	u1311
  5862   000A6E  EF3B  F005         	goto	u1310
  5863   000A72                     u1311:
  5864   000A72  EF5D  F005         	goto	l2274
  5865   000A76                     u1310:
  5866   000A76                     
  5867                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  5868   000A76  EE20 F005          	lfsr	2,5
  5869   000A7A  500E               	movf	setMotorPWM@m^0,w,c
  5870   000A7C  26D9               	addwf	fsr2l,f,c
  5871   000A7E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5872   000A80  22DA               	addwfc	fsr2h,f,c
  5873   000A82  CFDE F010          	movff	postinc2,??_setMotorPWM
  5874   000A86  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5875   000A8A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5876   000A8E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5877   000A92  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5878                           
  5879                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  5880   000A96  EE20 F007          	lfsr	2,7
  5881   000A9A  500E               	movf	setMotorPWM@m^0,w,c
  5882   000A9C  26D9               	addwf	fsr2l,f,c
  5883   000A9E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5884   000AA0  22DA               	addwfc	fsr2h,f,c
  5885   000AA2  CFDE F010          	movff	postinc2,??_setMotorPWM
  5886   000AA6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5887   000AAA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5888   000AAE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5889   000AB2  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5890                           
  5891                           ;dc_motor.c: 85:     } else {
  5892   000AB6  EF7D  F005         	goto	l211
  5893   000ABA                     l2274:
  5894                           
  5895                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  5896   000ABA  EE20 F005          	lfsr	2,5
  5897   000ABE  500E               	movf	setMotorPWM@m^0,w,c
  5898   000AC0  26D9               	addwf	fsr2l,f,c
  5899   000AC2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5900   000AC4  22DA               	addwfc	fsr2h,f,c
  5901   000AC6  CFDE F010          	movff	postinc2,??_setMotorPWM
  5902   000ACA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5903   000ACE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5904   000AD2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5905   000AD6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5906                           
  5907                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  5908   000ADA  EE20 F007          	lfsr	2,7
  5909   000ADE  500E               	movf	setMotorPWM@m^0,w,c
  5910   000AE0  26D9               	addwf	fsr2l,f,c
  5911   000AE2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5912   000AE4  22DA               	addwfc	fsr2h,f,c
  5913   000AE6  CFDE F010          	movff	postinc2,??_setMotorPWM
  5914   000AEA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5915   000AEE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5916   000AF2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5917   000AF6  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5918   000AFA                     l211:
  5919   000AFA  0012               	return		;funcret
  5920   000AFC                     __end_of_setMotorPWM:
  5921                           	callstack 0
  5922                           
  5923 ;; *************** function ___wmul *****************
  5924 ;; Defined at:
  5925 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  multiplier      2    0[COMRAM] unsigned int 
  5928 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;  product         2    4[COMRAM] unsigned int 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  2    0[COMRAM] unsigned int 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0, prodl, prodh
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5940 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5941 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5943 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5944 ;;Total ram usage:        6 bytes
  5945 ;; Hardware stack levels used: 1
  5946 ;; Hardware stack levels required when called: 2
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_get_color_distance
  5951 ;;		_get_color_code
  5952 ;;		_get_wall_presence
  5953 ;;		_setMotorPWM
  5954 ;; This function uses a non-reentrant model
  5955 ;;
  5956                           
  5957                           	psect	text34
  5958   001B10                     __ptext34:
  5959                           	callstack 0
  5960   001B10                     ___wmul:
  5961                           	callstack 26
  5962   001B10  5001               	movf	___wmul@multiplier^0,w,c
  5963   001B12  0203               	mulwf	___wmul@multiplicand^0,c
  5964   001B14  CFF3 F005          	movff	prodl,___wmul@product
  5965   001B18  CFF4 F006          	movff	prodh,___wmul@product+1
  5966   001B1C  5001               	movf	___wmul@multiplier^0,w,c
  5967   001B1E  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5968   001B20  50F3               	movf	243,w,c
  5969   001B22  2606               	addwf	(___wmul@product+1)^0,f,c
  5970   001B24  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5971   001B26  0203               	mulwf	___wmul@multiplicand^0,c
  5972   001B28  50F3               	movf	243,w,c
  5973   001B2A  2606               	addwf	(___wmul@product+1)^0,f,c
  5974   001B2C  C005  F001         	movff	___wmul@product,?___wmul
  5975   001B30  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5976   001B34  0012               	return		;funcret
  5977   001B36                     __end_of___wmul:
  5978                           	callstack 0
  5979                           
  5980 ;; *************** function ___lwdiv *****************
  5981 ;; Defined at:
  5982 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5983 ;; Parameters:    Size  Location     Type
  5984 ;;  dividend        2    6[COMRAM] unsigned int 
  5985 ;;  divisor         2    8[COMRAM] unsigned int 
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;  quotient        2   10[COMRAM] unsigned int 
  5988 ;;  counter         1   12[COMRAM] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  2    6[COMRAM] unsigned int 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5998 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6001 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6002 ;;Total ram usage:        7 bytes
  6003 ;; Hardware stack levels used: 1
  6004 ;; Hardware stack levels required when called: 2
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_calibrate_black
  6009 ;;		_setMotorPWM
  6010 ;; This function uses a non-reentrant model
  6011 ;;
  6012                           
  6013                           	psect	text35
  6014   0016CC                     __ptext35:
  6015                           	callstack 0
  6016   0016CC                     ___lwdiv:
  6017                           	callstack 26
  6018   0016CC  0E00               	movlw	0
  6019   0016CE  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6020   0016D0  0E00               	movlw	0
  6021   0016D2  6E0B               	movwf	___lwdiv@quotient^0,c
  6022   0016D4  5009               	movf	___lwdiv@divisor^0,w,c
  6023   0016D6  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6024   0016D8  B4D8               	btfsc	status,2,c
  6025   0016DA  EF71  F00B         	goto	u1241
  6026   0016DE  EF73  F00B         	goto	u1240
  6027   0016E2                     u1241:
  6028   0016E2  EF9B  F00B         	goto	l930
  6029   0016E6                     u1240:
  6030   0016E6  0E01               	movlw	1
  6031   0016E8  6E0D               	movwf	___lwdiv@counter^0,c
  6032   0016EA  EF7B  F00B         	goto	l2214
  6033   0016EE                     l2212:
  6034   0016EE  90D8               	bcf	status,0,c
  6035   0016F0  3609               	rlcf	___lwdiv@divisor^0,f,c
  6036   0016F2  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6037   0016F4  2A0D               	incf	___lwdiv@counter^0,f,c
  6038   0016F6                     l2214:
  6039   0016F6  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6040   0016F8  EF80  F00B         	goto	u1251
  6041   0016FC  EF82  F00B         	goto	u1250
  6042   001700                     u1251:
  6043   001700  EF77  F00B         	goto	l2212
  6044   001704                     u1250:
  6045   001704                     l2216:
  6046   001704  90D8               	bcf	status,0,c
  6047   001706  360B               	rlcf	___lwdiv@quotient^0,f,c
  6048   001708  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6049   00170A  5009               	movf	___lwdiv@divisor^0,w,c
  6050   00170C  5C07               	subwf	___lwdiv@dividend^0,w,c
  6051   00170E  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6052   001710  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6053   001712  A0D8               	btfss	status,0,c
  6054   001714  EF8E  F00B         	goto	u1261
  6055   001718  EF90  F00B         	goto	u1260
  6056   00171C                     u1261:
  6057   00171C  EF95  F00B         	goto	l2224
  6058   001720                     u1260:
  6059   001720  5009               	movf	___lwdiv@divisor^0,w,c
  6060   001722  5E07               	subwf	___lwdiv@dividend^0,f,c
  6061   001724  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6062   001726  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6063   001728  800B               	bsf	___lwdiv@quotient^0,0,c
  6064   00172A                     l2224:
  6065   00172A  90D8               	bcf	status,0,c
  6066   00172C  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6067   00172E  3209               	rrcf	___lwdiv@divisor^0,f,c
  6068   001730  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6069   001732  EF82  F00B         	goto	l2216
  6070   001736                     l930:
  6071   001736  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6072   00173A  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6073   00173E  0012               	return		;funcret
  6074   001740                     __end_of___lwdiv:
  6075                           	callstack 0
  6076                           
  6077 ;; *************** function _Interrupts_init *****************
  6078 ;; Defined at:
  6079 ;;		line 10 in file "interrupts.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		None
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used: 1
  6099 ;; Hardware stack levels required when called: 2
  6100 ;; This function calls:
  6101 ;;		Nothing
  6102 ;; This function is called by:
  6103 ;;		_main
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text36
  6108   001B9C                     __ptext36:
  6109                           	callstack 0
  6110   001B9C                     _Interrupts_init:
  6111                           	callstack 28
  6112   001B9C                     
  6113                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6114   001B9C  8CF2               	bsf	242,6,c	;volatile
  6115                           
  6116                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6117   001B9E  010E               	movlb	14	; () banked
  6118   001BA0  8B29               	bsf	41,5,b	;volatile
  6119                           
  6120                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6121   001BA2  812B               	bsf	43,0,b	;volatile
  6122                           
  6123                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6124   001BA4  8EF2               	bsf	242,7,c	;volatile
  6125   001BA6                     
  6126                           ; BSR set to: 14
  6127   001BA6  0012               	return		;funcret
  6128   001BA8                     __end_of_Interrupts_init:
  6129                           	callstack 0
  6130                           
  6131 ;; *************** function _HighISR *****************
  6132 ;; Defined at:
  6133 ;;		line 22 in file "interrupts.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;		None
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;Total ram usage:        0 bytes
  6152 ;; Hardware stack levels used: 1
  6153 ;; Hardware stack levels required when called: 1
  6154 ;; This function calls:
  6155 ;;		_increment_seconds
  6156 ;; This function is called by:
  6157 ;;		Interrupt level 2
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	intcode
  6162   000008                     __pintcode:
  6163                           	callstack 0
  6164   000008                     _HighISR:
  6165                           	callstack 24
  6166                           
  6167                           ; BSR set to: 14
  6168                           ;incstack = 0
  6169   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6170   00000A                     
  6171                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6172   00000A  010E               	movlb	14	; () banked
  6173   00000C  AB33               	btfss	51,5,b	;volatile
  6174   00000E  EF0B  F000         	goto	i2u82_41
  6175   000012  EF0D  F000         	goto	i2u82_40
  6176   000016                     i2u82_41:
  6177   000016  EF15  F000         	goto	i2l382
  6178   00001A                     i2u82_40:
  6179   00001A                     
  6180                           ; BSR set to: 14
  6181                           ;interrupts.c: 25:     increment_seconds();
  6182   00001A  ECE3  F00D         	call	_increment_seconds	;wreg free
  6183   00001E                     
  6184                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6185   00001E  0EE7               	movlw	231
  6186   000020  6ED4               	movwf	212,c	;volatile
  6187   000022                     
  6188                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6189   000022  0E95               	movlw	149
  6190   000024  6ED3               	movwf	211,c	;volatile
  6191   000026                     
  6192                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6193   000026  010E               	movlb	14	; () banked
  6194   000028  9B33               	bcf	51,5,b	;volatile
  6195   00002A                     i2l382:
  6196                           
  6197                           ; BSR set to: 14
  6198   00002A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6199   00002C  0011               	retfie		f
  6200   00002E                     __end_of_HighISR:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _increment_seconds *****************
  6204 ;; Defined at:
  6205 ;;		line 315 in file "dc_motor.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;		None
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;		None
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  1    wreg      void 
  6212 ;; Registers used:
  6213 ;;		status,2, status,0
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6223 ;;Total ram usage:        0 bytes
  6224 ;; Hardware stack levels used: 1
  6225 ;; This function calls:
  6226 ;;		Nothing
  6227 ;; This function is called by:
  6228 ;;		_HighISR
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text38
  6233   001BC6                     __ptext38:
  6234                           	callstack 0
  6235   001BC6                     _increment_seconds:
  6236                           	callstack 24
  6237   001BC6                     
  6238                           ;dc_motor.c: 317:     seconds += 1;
  6239   001BC6  4A5D               	infsnz	_seconds^0,f,c
  6240   001BC8  2A5E               	incf	(_seconds+1)^0,f,c
  6241   001BCA  0012               	return		;funcret
  6242   001BCC                     __end_of_increment_seconds:
  6243                           	callstack 0
  6244   000000                     
  6245                           	psect	rparam
  6246   000000                     
  6247                           	psect	temp
  6248   00005F                     btemp:
  6249                           	callstack 0
  6250   00005F                     	ds	1
  6251   000000                     int$flags	set	btemp
  6252   000000                     wtemp8	set	btemp+1
  6253   000000                     ttemp5	set	btemp+1
  6254   000000                     ttemp6	set	btemp+4
  6255   000000                     ttemp7	set	btemp+8
  6256                           
  6257                           	psect	idloc
  6258                           
  6259                           ;Config register IDLOC0 @ 0x200000
  6260                           ;	unspecified, using default values
  6261   200000                     	org	2097152
  6262   200000  0FFF               	dw	4095
  6263                           
  6264                           ;Config register IDLOC1 @ 0x200002
  6265                           ;	unspecified, using default values
  6266   200002                     	org	2097154
  6267   200002  0FFF               	dw	4095
  6268                           
  6269                           ;Config register IDLOC2 @ 0x200004
  6270                           ;	unspecified, using default values
  6271   200004                     	org	2097156
  6272   200004  0FFF               	dw	4095
  6273                           
  6274                           ;Config register IDLOC3 @ 0x200006
  6275                           ;	unspecified, using default values
  6276   200006                     	org	2097158
  6277   200006  0FFF               	dw	4095
  6278                           
  6279                           ;Config register IDLOC4 @ 0x200008
  6280                           ;	unspecified, using default values
  6281   200008                     	org	2097160
  6282   200008  0FFF               	dw	4095
  6283                           
  6284                           ;Config register IDLOC5 @ 0x20000A
  6285                           ;	unspecified, using default values
  6286   20000A                     	org	2097162
  6287   20000A  0FFF               	dw	4095
  6288                           
  6289                           ;Config register IDLOC6 @ 0x20000C
  6290                           ;	unspecified, using default values
  6291   20000C                     	org	2097164
  6292   20000C  0FFF               	dw	4095
  6293                           
  6294                           ;Config register IDLOC7 @ 0x20000E
  6295                           ;	unspecified, using default values
  6296   20000E                     	org	2097166
  6297   20000E  0FFF               	dw	4095
  6298                           
  6299                           	psect	config
  6300                           
  6301                           ;Config register CONFIG1L @ 0x300000
  6302                           ;	External Oscillator mode Selection bits
  6303                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6304                           ;	Power-up default value for COSC bits
  6305                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6306   300000                     	org	3145728
  6307   300000  AA                 	db	170
  6308                           
  6309                           ;Config register CONFIG1H @ 0x300001
  6310                           ;	unspecified, using default values
  6311                           ;	Clock Out Enable bit
  6312                           ;	CLKOUTEN = 0x1, unprogrammed default
  6313                           ;	Clock Switch Enable bit
  6314                           ;	CSWEN = 0x1, unprogrammed default
  6315                           ;	Fail-Safe Clock Monitor Enable bit
  6316                           ;	FCMEN = 0x1, unprogrammed default
  6317   300001                     	org	3145729
  6318   300001  FF                 	db	255
  6319                           
  6320                           ;Config register CONFIG2L @ 0x300002
  6321                           ;	unspecified, using default values
  6322                           ;	Master Clear Enable bit
  6323                           ;	MCLRE = 0x1, unprogrammed default
  6324                           ;	Power-up Timer Enable bit
  6325                           ;	PWRTE = 0x1, unprogrammed default
  6326                           ;	Low-power BOR enable bit
  6327                           ;	LPBOREN = 0x1, unprogrammed default
  6328                           ;	Brown-out Reset Enable bits
  6329                           ;	BOREN = 0x3, unprogrammed default
  6330   300002                     	org	3145730
  6331   300002  FF                 	db	255
  6332                           
  6333                           ;Config register CONFIG2H @ 0x300003
  6334                           ;	unspecified, using default values
  6335                           ;	Brown Out Reset Voltage selection bits
  6336                           ;	BORV = 0x3, unprogrammed default
  6337                           ;	ZCD Disable bit
  6338                           ;	ZCD = 0x1, unprogrammed default
  6339                           ;	PPSLOCK bit One-Way Set Enable bit
  6340                           ;	PPS1WAY = 0x1, unprogrammed default
  6341                           ;	Stack Full/Underflow Reset Enable bit
  6342                           ;	STVREN = 0x1, unprogrammed default
  6343                           ;	Debugger Enable bit
  6344                           ;	DEBUG = 0x1, unprogrammed default
  6345                           ;	Extended Instruction Set Enable bit
  6346                           ;	XINST = 0x1, unprogrammed default
  6347   300003                     	org	3145731
  6348   300003  FF                 	db	255
  6349                           
  6350                           ;Config register CONFIG3L @ 0x300004
  6351                           ;	WDT Period Select bits
  6352                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6353                           ;	WDT operating mode
  6354                           ;	WDTE = OFF, WDT Disabled
  6355   300004                     	org	3145732
  6356   300004  9F                 	db	159
  6357                           
  6358                           ;Config register CONFIG3H @ 0x300005
  6359                           ;	unspecified, using default values
  6360                           ;	WDT Window Select bits
  6361                           ;	WDTCWS = 0x7, unprogrammed default
  6362                           ;	WDT input clock selector
  6363                           ;	WDTCCS = 0x7, unprogrammed default
  6364   300005                     	org	3145733
  6365   300005  FF                 	db	255
  6366                           
  6367                           ;Config register CONFIG4L @ 0x300006
  6368                           ;	unspecified, using default values
  6369                           ;	Write Protection Block 0
  6370                           ;	WRT0 = 0x1, unprogrammed default
  6371                           ;	Write Protection Block 1
  6372                           ;	WRT1 = 0x1, unprogrammed default
  6373                           ;	Write Protection Block 2
  6374                           ;	WRT2 = 0x1, unprogrammed default
  6375                           ;	Write Protection Block 3
  6376                           ;	WRT3 = 0x1, unprogrammed default
  6377                           ;	Write Protection Block 3
  6378                           ;	WRT4 = 0x1, unprogrammed default
  6379                           ;	Write Protection Block 3
  6380                           ;	WRT5 = 0x1, unprogrammed default
  6381                           ;	Write Protection Block 3
  6382                           ;	WRT6 = 0x1, unprogrammed default
  6383                           ;	Write Protection Block 3
  6384                           ;	WRT7 = 0x1, unprogrammed default
  6385   300006                     	org	3145734
  6386   300006  FF                 	db	255
  6387                           
  6388                           ;Config register CONFIG4H @ 0x300007
  6389                           ;	unspecified, using default values
  6390                           ;	Configuration Register Write Protection bit
  6391                           ;	WRTC = 0x1, unprogrammed default
  6392                           ;	Boot Block Write Protection bit
  6393                           ;	WRTB = 0x1, unprogrammed default
  6394                           ;	Data EEPROM Write Protection bit
  6395                           ;	WRTD = 0x1, unprogrammed default
  6396                           ;	Scanner Enable bit
  6397                           ;	SCANE = 0x1, unprogrammed default
  6398                           ;	Low Voltage Programming Enable bit
  6399                           ;	LVP = 0x1, unprogrammed default
  6400   300007                     	org	3145735
  6401   300007  FF                 	db	255
  6402                           
  6403                           ;Config register CONFIG5L @ 0x300008
  6404                           ;	unspecified, using default values
  6405                           ;	UserNVM Program Memory Code Protection bit
  6406                           ;	CP = 0x1, unprogrammed default
  6407                           ;	DataNVM Memory Code Protection bit
  6408                           ;	CPD = 0x1, unprogrammed default
  6409   300008                     	org	3145736
  6410   300008  FF                 	db	255
  6411                           
  6412                           ;Config register CONFIG5H @ 0x300009
  6413                           ;	unspecified, using default values
  6414   300009                     	org	3145737
  6415   300009  FF                 	db	255
  6416                           
  6417                           ;Config register CONFIG6L @ 0x30000A
  6418                           ;	unspecified, using default values
  6419                           ;	Table Read Protection Block 0
  6420                           ;	EBTR0 = 0x1, unprogrammed default
  6421                           ;	Table Read Protection Block 1
  6422                           ;	EBTR1 = 0x1, unprogrammed default
  6423                           ;	Table Read Protection Block 2
  6424                           ;	EBTR2 = 0x1, unprogrammed default
  6425                           ;	Table Read Protection Block 3
  6426                           ;	EBTR3 = 0x1, unprogrammed default
  6427                           ;	Table Read Protection Block 4
  6428                           ;	EBTR4 = 0x1, unprogrammed default
  6429                           ;	Table Read Protection Block 5
  6430                           ;	EBTR5 = 0x1, unprogrammed default
  6431                           ;	Table Read Protection Block 6
  6432                           ;	EBTR6 = 0x1, unprogrammed default
  6433                           ;	Table Read Protection Block 7
  6434                           ;	EBTR7 = 0x1, unprogrammed default
  6435   30000A                     	org	3145738
  6436   30000A  FF                 	db	255
  6437                           
  6438                           ;Config register CONFIG6H @ 0x30000B
  6439                           ;	unspecified, using default values
  6440                           ;	Boot Block Table Read Protection bit
  6441                           ;	EBTRB = 0x1, unprogrammed default
  6442   30000B                     	org	3145739
  6443   30000B  FF                 	db	255
  6444                           tosu	equ	0xFFF
  6445                           tosh	equ	0xFFE
  6446                           tosl	equ	0xFFD
  6447                           stkptr	equ	0xFFC
  6448                           pclatu	equ	0xFFB
  6449                           pclath	equ	0xFFA
  6450                           pcl	equ	0xFF9
  6451                           tblptru	equ	0xFF8
  6452                           tblptrh	equ	0xFF7
  6453                           tblptrl	equ	0xFF6
  6454                           tablat	equ	0xFF5
  6455                           prodh	equ	0xFF4
  6456                           prodl	equ	0xFF3
  6457                           indf0	equ	0xFEF
  6458                           postinc0	equ	0xFEE
  6459                           postdec0	equ	0xFED
  6460                           preinc0	equ	0xFEC
  6461                           plusw0	equ	0xFEB
  6462                           fsr0h	equ	0xFEA
  6463                           fsr0l	equ	0xFE9
  6464                           wreg	equ	0xFE8
  6465                           indf1	equ	0xFE7
  6466                           postinc1	equ	0xFE6
  6467                           postdec1	equ	0xFE5
  6468                           preinc1	equ	0xFE4
  6469                           plusw1	equ	0xFE3
  6470                           fsr1h	equ	0xFE2
  6471                           fsr1l	equ	0xFE1
  6472                           bsr	equ	0xFE0
  6473                           indf2	equ	0xFDF
  6474                           postinc2	equ	0xFDE
  6475                           postdec2	equ	0xFDD
  6476                           preinc2	equ	0xFDC
  6477                           plusw2	equ	0xFDB
  6478                           fsr2h	equ	0xFDA
  6479                           fsr2l	equ	0xFD9
  6480                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      94
    BANK0           160     44     154
    BANK1           256      0     232
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    return_back@motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    Calibrate@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), moveBack@mR(COMRAM[2]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), moveBack@mL(COMRAM[2]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), return_back@motorR(COMRAM[2]), return_back@motorL(COMRAM[2]), 
		 -> moveBack@mR(COMRAM[2]), moveBack@mL(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _moveBack->_stop
    _stop->_setMotorPWM
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   54909
                                             56 COMRAM    20    20      0
                    _Interrupts_init
                      _RobotMovement
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                  _get_wall_presence
                    _initDCmotorsPWM
                           _moveBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _moveBack                                             8     2      6    9672
                                             25 COMRAM     8     2      6
                        _setMotorPWM
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4697
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   21100
                                             27 COMRAM    12     6      6
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            8     4      4    5313
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4261
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _moveBack
     _setMotorPWM
     _stop
       _setMotorPWM
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E8       7       90.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      9A       5       96.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5E       1      100.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E0      60        0.0%
DATA                 0      0     1E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 08 11:39:45 2022

               _color_read_Red 1866             RobotMovement@color 001C                _color_read_Blue 1956  
                           l71 0BFC                             l73 0C32                             l82 1B54  
                           l74 0C12                             l91 1904                             l67 0BE0  
                           l85 18B4                             l77 0C24                             l94 1954  
                           l88 19A4            ___wmul@multiplicand 0003               _color_read_Clear 1906  
             ?_calibrate_black 0001               _color_read_Green 18B6            RobotMovement@motorL 001E  
          RobotMovement@motorR 0020              ??_Interrupts_init 0001                            l112 1A4C  
                          l113 1A4E                            l114 1A62                            l211 0AFA  
                          l115 1A64                            l116 1A78                            l204 1640  
                          l221 120A                            l141 0D6A                            l109 098E  
                          l118 1A7A                            l214 19EE                            l144 13D0  
                          l136 081A                            l242 0E92                            l138 0822  
                          l235 10E2                            l147 15B0                            l228 0FBA  
                          l341 1AE8                            l245 1864                            l350 1BC4  
                          l280 01EA                            l344 1B0E                            l281 022C  
                          l353 1BB0                            l257 1514                            l338 1AE6  
                          l450 1798                            l347 1BBA                            l451 17A8  
                          l292 0484                            l436 1B74                            l356 1B9A  
                          l285 032A                            l286 036C                            l439 1B34  
                          l359 1ABC                            l376 1BA6                            l296 1A36  
                          l473 1474                            l466 1464                            l930 1736  
                          l937 173E                            _RGB 00EE               ?_calibrate_white 0001  
                          wreg 000FE8                           l2200 1B10                           l2210 16E6  
                         l2202 1B2C                           l2220 1720                           l2212 16EE  
                         l2300 1390                           l2222 1728                           l2214 16F6  
                         l2206 16CC                           l2230 18AC                           l2310 0C40  
                         l2302 139C                           l2224 172A                           l2216 1704  
                         l2208 16D4                           l2400 119E                           l2240 18B6  
                         l2320 0CA4                           l2312 0C56                           l2304 13B2  
                         l2226 1730                           l2218 170A                           l2410 11E6  
                         l2402 11AA                           l2170 1BB2                           l2234 1956  
                         l2242 18FC                           l2330 0D04                           l2322 0CBA  
                         l2314 0C66                           l2306 13C4                           l2260 0990  
                         l2412 11EE                           l2404 11B6                           l2500 10C6  
                         l2420 0E9C                           l2172 1BB6                           l2180 1BAC  
                         l2236 199C                           l2228 1866                           l2252 1A38  
                         l2332 0D1A                           l2324 0CCA                           l2316 0C72  
                         l2308 0C34                           l2340 0842                           l2270 0A5A  
                         l2262 09AC                           l2406 11C2                           l2430 0EEC  
                         l2422 0EBC                           l2414 0E94                           l2510 0D94  
                         l2502 0D6C                           l2166 1AE8                           l2190 1A8A  
                         l2182 1BBC                           l2174 1B92                           l2246 1906  
                         l2254 1A46                           l2334 0D32                           l2326 0CEC  
                         l2318 0C98                           l2350 08D0                           l2342 085E  
                         l2272 0A76                           l2264 0A00                           l2408 11CE  
                         l2432 0F04                           l2424 0EC8                           l2520 0DDC  
                         l2512 0DA0                           l2280 1ACE                           l2168 1AF8  
                         l2192 1A92                           l2184 1BC0                           l2176 1B96  
                         l2248 194C                           l2256 1A5C                           l2336 0D4E  
                         l2328 0CF8                           l2600 0B6A                           l2352 08F6  
                         l2344 0876                           l2274 0ABA                           l2266 0A14  
                         l2370 10E4                           l2450 0F74                           l2442 0F30  
                         l2434 0F0C                           l2426 0ED4                           l2530 0E08  
                         l2522 0DE4                           l2514 0DAC                           l2282 1AD0  
                         l2194 1AB8                           l2186 1A7E                           l2178 1BA8  
                         l2258 1A72                           l2290 1328                           l2610 0BC4  
                         l2602 0B7C                           l2354 0912                           l2346 089C  
                         l2338 0824                           l2362 19A6                           l2268 0A18  
                         l2380 1118                           l2452 0F80                           l2444 0F50  
                         l2436 0F28                           l2428 0EE0                           l2540 0E58  
                         l2532 0E28                           l2524 0E00                           l2516 0DB8  
                         l2508 0D74                           l2284 1AD2                           l2276 1ABE  
                         l2196 1ABA                           l2188 1A82                           l2292 1334  
                         l2620 0BEE                           l2612 0BD6                           l2604 0B8E  
                         l2356 092A                           l2348 08B8                           l2700 1550  
                         l2364 19BE                           l2390 115A                           l2382 1124  
                         l2470 0FFC                           l2454 0F96                           l2446 0F5C  
                         l2542 0E6E                           l2534 0E34                           l2518 0DC4  
                         l2286 1AD4                           l2278 1AC8                           l2294 134A  
                         l2614 0BD8                           l2606 0BA0                           l2550 175E  
                         l2358 0932                           l2630 0492                           l2702 1572  
                         l2710 15C2                           l2366 19CA                           l2392 1176  
                         l2384 1130                           l2376 10EC                           l2480 1050  
                         l2472 1008                           l2464 0FC4                           l2456 0F9E  
                         l2448 0F68                           l2544 0E76                           l2536 0E40  
                         l2800 00D6                           l2296 135C                           l2288 1B38  
                         l2624 0C0E                           l2616 0BDC                           l2608 0BB2  
                         l2560 13F8                           l2552 176E                           l2640 04FA  
                         l2632 04A8                           l2704 157E                           l2720 1626  
                         l2712 15EC                           l2368 19D6                           l2386 113C  
                         l2378 110C                           l2490 1084                           l2474 1014  
                         l2466 0FE4                           l2458 0FBC                           l2538 0E4C  
                         l2802 00EA                           l2810 0128                           l2298 1368  
                         l2626 0C20                           l2618 0BDE                           l2730 180C  
                         l2570 1442                           l2562 1400                           l2554 1778  
                         l2546 1740                           l2650 0562                           l2642 0510  
                         l2634 04BA                           l2722 1628                           l2714 1610  
                         l2388 1152                           l2492 1090                           l2476 102C  
                         l2468 0FF0                           l2820 01D0                           l2812 013C  
                         l2804 0104                           l2580 0B00                           l2740 184C  
                         l2732 1814                           l2572 1452                           l2564 140C  
                         l2556 13D2                           l2548 1750                           l2660 067A  
                         l2652 05CC                           l2644 0522                           l2636 04C6  
                         l2628 0486                           l2724 1632                           l2716 161A  
                         l2708 15B2                           l2398 117E                           l2494 109C  
                         l2486 1058                           l2478 1034                           l2830 027C  
                         l2822 0212                           l2814 016E                           l2806 0108  
                         l2590 0B30                           l2582 0B0A                           l2742 1858  
                         l2734 1824                           l2574 1454                           l2566 141A  
                         l2558 13E2                           l2670 0738                           l2662 068A  
                         l2654 05DC                           l2646 052E                           l2638 04EE  
                         l2726 1634                           l2718 161C                           l2496 10A8  
                         l2488 1078                           l2840 0352                           l2832 02AE  
                         l2824 0246                           l2816 01A2                           l2808 010C  
                         l2592 0B32                           l2584 0B1A                           l2736 1834  
                         l2576 145E                           l2568 1424                           l2680 077A  
                         l2672 0768                           l2664 06AA                           l2656 05FC  
                         l2648 054E                           l2728 163E                           l2760 1482  
                         l2498 10BE                           l2850 03D0                           l2842 0386  
                         l2834 02E2                           l2826 024A                           l2818 01AA  
                         l2594 0B34                           l2586 0B24                           l2578 0AFC  
                         l2738 1840                           l2690 0804                           l2682 07A8  
                         l2674 0772                           l2666 06BE                           l2658 0610  
                         l2770 14D2                           l2762 14A2                           l2930 120C  
                         l2860 0430                           l2852 03EA                           l2844 038A  
                         l2836 02EA                           l2828 0268                           l2780 0058  
                         l2596 0B46                           l2588 0B2E                           l2684 07D8  
                         l2668 0728                           l2692 1516                           l2764 14AE  
                         l2772 14EA                           l2940 1224                           l2932 1210  
                         l2870 0450                           l2862 0434                           l2854 03EE  
                         l2838 0310                           l2846 03A8                           l2790 00B6  
                         l2782 0072                           l2598 0B58                           l2686 07F0  
                         l2694 1522                           l2774 1500                           l2766 14BA  
                         l2758 1476                           l2950 1236                           l2942 1228  
                         l2934 1214                           l2872 0464                           l2864 0448  
                         l2856 0402                           l2848 03BC                           l2792 00BA  
                         l2784 0076                           l2776 0032                           l2880 1A32  
                         l2688 0800                           l2696 1538                           l2768 14C6  
                         l2960 1256                           l2952 123E                           l2944 122A  
                         l2936 1220                           l2882 1B9C                           l2874 0468  
                         l2858 0416                           l2794 00CE                           l2786 0088  
                         l2778 0044                           l2890 1B72                           l2698 1544  
                         l2970 1286                           l2962 125A                           l2954 1246  
                         l2946 122E                           l2938 1220                           l2788 009C  
                         l2884 1B56                           l2876 19F0                           l2980 12DC  
                         l2972 129C                           l2964 1262                           l2956 124E  
                         l2948 1232                           l2886 1B5E                           l2878 1A0C  
                         l2982 12F0                           l2974 12A0                           l2966 126A  
                         l2958 1252                           l2888 1B70                           l2984 130C  
                         l2976 12B4                           l2968 1272                           l2978 12C0  
                         u1200 1AF8                           u1201 1AF4                           u1210 1B0E  
                         u2010 129C                           u1211 1B0A                           u2011 1298  
                         u1300 09AC                           u1220 1AA6                           u1301 09A8  
                         u1221 1A9E                           u1310 0A76                           u1311 0A72  
                         u1240 16E6                           u1400 10E2                           u1320 0842  
                         u1241 16E2                           u1401 10DE                           u1321 083E  
                         u1250 1704                           u1410 0E00                           u1330 089C  
                         u1251 1700                           u1411 0DFC                           u1331 0898  
                         u1260 1720                           u1420 0E92                           u1340 08F6  
                         u1261 171C                           u1421 0E8E                           u1501 0B62  
                         u1341 08F2                           u1350 1176                           u1238 1AA8  
                         u1270 1A46                           u1430 175E                           u1351 1172  
                         u1271 1A42                           u1511 0B74                           u1431 175A  
                         u1360 120A                           u1280 1A5C                           u1600 0C20  
                         u1440 1798                           u1361 1206                           u1281 1A58  
                         u1601 0C1C                           u1521 0B86                           u1441 1794  
                         u1370 0F28                           u1290 1A72                           u1610 0C32  
                         u1450 13F8                           u1371 0F24                           u1291 1A6E  
                         u1611 0C2E                           u1531 0B98                           u1451 13F4  
                         u1380 0FBA                           u1460 141A                           u1700 07F0  
                         u1620 054E                           u1381 0FB6                           u1541 0BAA  
                         u1461 1416                           u1701 07EC                           u1621 054A  
                         u1390 1050                           u1470 1442                           u1710 081A  
                         u1630 05FC                           u1391 104C                           u1551 0BBC  
                         u1471 143E                           u1711 0816                           u1631 05F8  
                         u2407 152C                           u1800 013C                           u1640 06AA  
                         u1720 15AA                           u1801 0138                           u1561 0BCE  
                         u1481 0B3E                           u1641 06A6                           u1721 15A4  
                         u2417 155A                           u1810 016E                           u1570 0BEE  
                         u1730 15AC                           _T2PR 000FBC                     _Black_rule 01D0  
                         u1811 016A                           u2507 0C7C                           u1571 0BEA  
                         u1491 0B50                           u1651 0742                           u2427 049C  
                         u1900 0448                           u1820 01D0                           u1580 0BFC  
                         u1901 0444                           u1821 01CC                           u2517 0CAE  
                         u1581 0BF8                           u1661 0754                           u2437 04D0  
                         u1910 0484                           u1830 0212                           u1590 0C0A  
                         u1750 1500                           u2607 1146                           u1911 0480  
                         u1831 020E                           u2527 0CE0                           u1591 0C06  
                         u1671 07A0                           u2447 0504                           u1751 14FC  
                         u1840 027C                           u1760 0044                           u1920 1A0C  
                         u2617 11D8                           u1841 0278                           u1761 0040  
                         u1921 1A08                           u2537 0D0E                           u2457 0B10  
                         u1681 07B2                           u1850 02AE                           u1770 0088  
                         u2547 0DCE                           u1851 02AA                           u1771 0084  
                         u2467 133E                           u1691 07C4                           u2387 14DC  
                         u1860 0310                           u1780 00CE                           u2557 0E62  
                         u1861 030C                           u1781 00CA                           u2477 1372  
                         u2397 19E0                           u1870 0352                           u1790 0128  
                         u2567 0EF6                           u1871 034E                           u1791 0124  
                         u2487 13A6                           u1880 03BC                           u2577 0F8A  
                         u1881 03B8                           u2497 0C4A                           u1890 0402  
                         u2587 101E                           u1891 03FE                           u2597 10B2  
                         _main 120C                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 005F  
                         _stop 19A6                           prodh 000FF4                           prodl 000FF3  
                         start 002E         __end_of_color_read_Red 18B6                __end_of_HighISR 002E  
                 ___param_bank 000000             _get_color_code$460 00D6             _get_color_code$458 00CE  
           _get_color_code$459 00D2                          ?_main 0001                __end_of___lldiv 1476  
                        ?_stop 0014            _add_seconds_to_list 19F0                    _Black_setup 004D  
              __end_of___lwdiv 1740                          i2l269 1BCA                          i2l382 002A  
                        _TMR0H 000FD4                          _TMR0L 000FD3            ___lmul@multiplicand 0005  
   __end_of_I2C_2_Master_Start 1BBC     __end_of_I2C_2_Master_Write 1B9C             _get_color_distance 0824  
                        _index 005B                          tablat 000FF5                          plusw0 000FEB  
                        plusw1 000FE3                          plusw2 000FDB            ?_get_color_distance 0007  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 000FD8                          wtemp8 0060           ?_add_seconds_to_list 0001  
                   _Green_rule 00A8        __end_of_color_read_Blue 19A6          _I2C_2_Master_RepStart 1BBC  
              ?_color_read_Red 0005                __initialization 1642                   __end_of_main 1328  
                 __end_of_stop 19F0                   _turnLeftLong 0FBC           ??_get_color_distance 001F  
                       ??_main 0039                         ??_stop 0018                  __activetblptr 000000  
          _get_color_code$2447 00C2                   ?_setMotorPWM 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         i2l1722 1BC6  
                       i2l1880 001A                         i2l1882 001E                         i2l1884 0022  
                       i2l1886 0026                         i2l1878 000A                         _RG6PPS 000E88  
                    ??_HighISR 0001       __end_of_color_click_init 0C34          ??_add_seconds_to_list 0001  
               RobotMovement@i 0024          __end_of_RobotMovement 0486               ??_get_color_code 0037  
                ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD                         ___lmul 1740  
     get_color_distance@color1 0007       get_color_distance@color2 0013                         ___wmul 1B10  
                    ??___lldiv 0015                      ??___lwdiv 000B                    _Color_rules 0100  
                       clear_0 16A8                         clear_1 16B4                         isa$std 000001  
             __end_of_moveBack 1516          calibrate_black@clear1 0010          calibrate_black@clear2 0012  
                 __pdataCOMRAM 004D                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                 _Lightblue_rule 006C                     _White_rule 01DC  
                       stop@mL 0014                         stop@mR 0016              ??_initDCmotorsPWM 0003  
             __end_of_turnLeft 120C          __end_of_set_led_color 1A7C                     __accesstop 0060  
      __end_of__initialization 16C2       __end_of_color_read_Clear 1956        get_wall_presence@clear1 0010  
      get_wall_presence@clear2 0012       __end_of_color_read_Green 1906         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 1B9C  
               __pcstackCOMRAM 0001                   __pidataBANK0 17AA                   __pidataBANK1 1B84  
          __end_of_Timer0_init 1B76                     __pbssBANK0 00EE                     __pbssBANK1 0100  
                _turnRightLong 0D6C              _color_writetoaddr 1B36                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?___wmul 0001  
               main@color_code 0039                 ___lmul@product 0009                get_color_code@i 00E0  
          ??_color_writetoaddr 0004        get_color_code@min_index 00DC                        i2u82_40 001A  
                      i2u82_41 0016                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      get_color_code@min_value 00DA              _get_wall_presence 1516                    _Orange_rule 0078  
           ?_get_wall_presence 000C        __end_of_Interrupts_init 1BA8         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        _HighISR 0008      __end_of_color_writetoaddr 1B56  
               ?_turnRightLong 0014             _I2C_2_Master_Start 1BB2             _I2C_2_Master_Write 1B90  
                    ?_moveBack 001A                        __Hparam 0000            ??_get_wall_presence 000E  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 1B56  
                      ___lldiv 13D2            ?_I2C_2_Master_Start 0001                        ___lwdiv 16CC  
          ?_I2C_2_Master_Write 0001                        __pcinit 1642                        __ramtop 0E00  
                    ?_turnLeft 0014                        __ptext0 120C                        __ptext1 1476  
                      __ptext2 19A6                        __ptext3 15B2                        __ptext4 1516  
                      __ptext5 0486                        __ptext6 0824                        __ptext7 1740  
                      __ptext8 13D2                        __ptext9 180C                      _T2CONbits 000FBD  
                      _seconds 005D                      _T2HLTbits 000FBE      __end_of_get_wall_presence 15B2  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 16C2  
            ?_color_click_init 0001                     ??_moveBack 0020                ___lldiv@divisor 0011  
           ??_color_click_init 0016                ___lldiv@counter 0019                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                  _White_setup 0060                _initDCmotorsPWM 15B2                     ??_turnLeft 0018  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 0013              __end_of_turnRight 0FBC  
                  _Yellow_rule 0090                      _TRISAbits 000F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 000F83                      _TRISDbits 000F84                      _TRISEbits 000F85  
                    _TRISFbits 000F86                      _TRISGbits 000F87           _calibrate_black$2448 0014  
  __end_of_add_seconds_to_list 1A38               fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0016  
     color_writetoaddr@address 0004     get_color_distance@B_offset 0033        ??_I2C_2_Master_RepStart 0002  
             ?_Interrupts_init 0001                ??_turnRightLong 0018                    _CCP1CONbits 000FAB  
   get_color_distance@G_offset 0031              _increment_seconds 1BC6              ?_color_read_Clear 0005  
                  _CCP2CONbits 000FA7              ??_calibrate_black 000E              ?_color_read_Green 0005  
                  _CCP3CONbits 000F26                    _CCP4CONbits 000F22                     main@motorL 003B  
                   main@motorR 0044              ??_calibrate_white 000C             ?_increment_seconds 0001  
           ??_color_read_Clear 0007             ??_color_read_Green 0007                 _fullSpeedAhead 180C  
   get_color_distance@R_offset 002F                      _Blue_rule 009C            ??_increment_seconds 0001  
               __end_of___lmul 17AA                 __end_of___wmul 1B36                  __pidataCOMRAM 1B76  
          color_read_Clear@tmp 000A            start_initialization 1642      __end_of_increment_seconds 1BCC  
                    _Pink_rule 0084            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1642  
       __end_of_fullSpeedAhead 1866                       ??___lmul 0009                       ??___wmul 0005  
                  __pdataBANK0 0060                    __pdataBANK1 01DC         _get_color_distance$421 002B  
       _get_color_distance$417 0023         _get_color_distance$419 0027                    __pbssCOMRAM 005B  
                __pcstackBANK0 00C2            get_color_code@value 00DE                       ?_HighISR 0001  
                _RobotMovement 0032               ___lwdiv@dividend 0007                   ?_Timer0_init 0001  
              ?_fullSpeedAhead 0014                     moveBack@mL 001A                     moveBack@mR 001C  
                    __pintcode 0008                       ?___lldiv 000D                       ?___lwdiv 0007  
                ?_turnLeftLong 0014                   moveBack@time 001E           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004    get_color_code@NormalizedRGB 00E2              _I2C_2_Master_Idle 1AE8  
            _I2C_2_Master_Init 1ABE              _I2C_2_Master_Read 1A7C              _I2C_2_Master_Stop 1BA8  
           ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001  
                ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B  
     initDCmotorsPWM@PWMperiod 0001                turnRightLong@mL 0014                turnRightLong@mR 0016  
               turnLeftLong@mL 0014                 turnLeftLong@mR 0016            ??_I2C_2_Master_Idle 0001  
          ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002                 ___wmul@product 0005  
                     _LATAbits 000F79                  _set_led_color 1A38            ??_I2C_2_Master_Stop 0002  
                     _LATCbits 000F7B                       _LATEbits 000F7D                       _LATFbits 000F7E  
                     _LATGbits 000F7F                       _PIE0bits 000E29                 ?_RobotMovement 001C  
                     _PIE2bits 000E2B                    turnRight@mL 0014                    turnRight@mR 0016  
                     _PIR0bits 000E33               ?_initDCmotorsPWM 0001                      _wall_coef 0059  
                    _wait_time 00C0                       _SSP2CON2 000EDA                 ??_turnLeftLong 0018  
                     _SSP2STAT 000ED8             set_led_color@color 0001      __end_of_I2C_2_Master_Idle 1B10  
    __end_of_I2C_2_Master_Init 1AE8      __end_of_I2C_2_Master_Read 1ABE              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 1BB2                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
                _movement_list 016C              ??_color_read_Blue 0007                _calibrate_black 0C34  
                    _turnRight 0E94                _calibrate_white 1328              ___lmul@multiplier 0001  
                    copy_data0 1656                      copy_data1 1676                      copy_data2 1696  
               ?_set_led_color 0001  __end_of_I2C_2_Master_RepStart 1BC6             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 0AFC                       _Red_rule 00B4                       __Hrparam 0000  
                     __Lrparam 0000     __end_of_get_color_distance 0990                 _get_color_code 0486  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6                ___lwdiv@divisor 0009                ___lwdiv@counter 000D  
                   ?_turnRight 0014                       __ptext10 0AFC                       __ptext11 1B36  
                     __ptext20 1BA8                       __ptext12 1328                       __ptext21 1BB2  
                     __ptext13 0C34                       __ptext30 0E94                       __ptext22 1BBC  
                     __ptext14 1A38                       __ptext31 0FBC                       __ptext23 1A7C  
                     __ptext15 1866                       __ptext32 10E4                       __ptext24 1AE8  
                     __ptext16 18B6                       __ptext33 0990                       __ptext25 1ABE  
                     __ptext17 1906                       __ptext34 1B10                       __ptext26 19F0  
                     __ptext18 1956                       __ptext35 16CC                       __ptext27 1B56  
                     __ptext19 1B90                       __ptext36 1B9C                       __ptext28 0032  
                     __ptext29 0D6C                       __ptext38 1BC6                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                ??_RobotMovement 0022                     turnLeft@mL 0014  
                   turnLeft@mR 0016                 turnRightLong@i 001A                  turnLeftLong@i 001A  
        __end_of_turnRightLong 0E94                       _moveBack 1476                     turnRight@i 001A  
                     isa$xinst 000000                       int$flags 005F         __end_of_get_color_code 0824  
      __end_of_calibrate_black 0D6C                       _turnLeft 10E4        __end_of_calibrate_white 13D2  
                   _INTCONbits 000FF2                    _setMotorPWM 0990                ??_set_led_color 0003  
         __end_of_turnLeftLong 10E4                       intlevel2 0000               ___lldiv@dividend 000D  
             ??_fullSpeedAhead 0018                      turnLeft@i 001A                ?_get_color_code 0035  
             _color_click_init 0AFC                     _SSP2DATPPS 000E1D               ___lldiv@quotient 0015  
                   _SSP2CLKPPS 000E1C                    ??_turnRight 0018            RobotMovement@i_1276 0026  
