

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 18:41:12 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   001FF6                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _wait_time
   106   001FF6  00DC               	dw	220
   107                           
   108                           ;initializer for _wall_coef
   109   001FF8  000F               	dw	15
   110                           
   111                           	psect	idataBANK0
   112   001BCE                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _Black_setup
   116   001BCE  0404               	dw	1028
   117   001BD0  0000               	dw	0
   118   001BD2  024B               	dw	587
   119   001BD4  0000               	dw	0
   120   001BD6  00A1               	dw	161
   121   001BD8  0000               	dw	0
   122                           
   123                           ;initializer for _White_setup
   124   001BDA  28FC               	dw	10492
   125   001BDC  0000               	dw	0
   126   001BDE  1B55               	dw	6997
   127   001BE0  0000               	dw	0
   128   001BE2  0770               	dw	1904
   129   001BE4  0000               	dw	0
   130                           
   131                           ;initializer for _Orange_rule
   132   001BE6  005C               	dw	92
   133   001BE8  0000               	dw	0
   134   001BEA  0027               	dw	39
   135   001BEC  0000               	dw	0
   136   001BEE  001C               	dw	28
   137   001BF0  0000               	dw	0
   138                           
   139                           ;initializer for _Pink_rule
   140   001BF2  004D               	dw	77
   141   001BF4  0000               	dw	0
   142   001BF6  003C               	dw	60
   143   001BF8  0000               	dw	0
   144   001BFA  0040               	dw	64
   145   001BFC  0000               	dw	0
   146                           
   147                           ;initializer for _Yellow_rule
   148   001BFE  005D               	dw	93
   149   001C00  0000               	dw	0
   150   001C02  004C               	dw	76
   151   001C04  0000               	dw	0
   152   001C06  0014               	dw	20
   153   001C08  0000               	dw	0
   154                           
   155                           ;initializer for _Blue_rule
   156   001C0A  0003               	dw	3
   157   001C0C  0000               	dw	0
   158   001C0E  0009               	dw	9
   159   001C10  0000               	dw	0
   160   001C12  0024               	dw	36
   161   001C14  0000               	dw	0
   162                           
   163                           ;initializer for _Green_rule
   164   001C16  0019               	dw	25
   165   001C18  0000               	dw	0
   166   001C1A  0036               	dw	54
   167   001C1C  0000               	dw	0
   168   001C1E  0008               	dw	8
   169   001C20  0000               	dw	0
   170                           
   171                           ;initializer for _Red_rule
   172   001C22  0048               	dw	72
   173   001C24  0000               	dw	0
   174   001C26  0002               	dw	2
   175   001C28  0000               	dw	0
   176   001C2A  0002               	dw	2
   177   001C2C  0000               	dw	0
   178                           
   179                           	psect	idataBANK1
   180   001F98                     __pidataBANK1:
   181                           	callstack 0
   182                           
   183                           ;initializer for _White_rule
   184   001F98  0064               	dw	100
   185   001F9A  0000               	dw	0
   186   001F9C  0064               	dw	100
   187   001F9E  0000               	dw	0
   188   001FA0  0064               	dw	100
   189   001FA2  0000               	dw	0
   190                           
   191                           ;initializer for _Lightblue_rule
   192   001FA4  0026               	dw	38
   193   001FA6  0000               	dw	0
   194   001FA8  0048               	dw	72
   195   001FAA  0000               	dw	0
   196   001FAC  0054               	dw	84
   197   001FAE  0000               	dw	0
   198   000000                     _T0CON0bits	set	4053
   199   000000                     _T0CON1bits	set	4054
   200   000000                     _TRISDbits	set	3972
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _SSP2CLKPPS	set	3612
   203   000000                     _SSP2DATPPS	set	3613
   204   000000                     _RC7PPS	set	3689
   205   000000                     _RE2PPS	set	3700
   206   000000                     _ANSELFbits	set	3764
   207   000000                     _TRISAbits	set	3969
   208   000000                     _TRISFbits	set	3974
   209   000000                     _PORTFbits	set	3982
   210   000000                     _TRISGbits	set	3975
   211   000000                     _TRISCbits	set	3971
   212   000000                     _TRISEbits	set	3973
   213   000000                     _SSP2BUF	set	3797
   214   000000                     _SSP2ADD	set	3798
   215   000000                     _SSP2CON1bits	set	3801
   216   000000                     _LATAbits	set	3961
   217   000000                     _LATGbits	set	3967
   218   000000                     _CCPR4H	set	3873
   219   000000                     _CCPR3H	set	3877
   220   000000                     _T2PR	set	4028
   221   000000                     _T2CONbits	set	4029
   222   000000                     _CCPR2H	set	4006
   223   000000                     _CCPR1H	set	4010
   224   000000                     _LATCbits	set	3963
   225   000000                     _LATEbits	set	3965
   226   000000                     _LATFbits	set	3966
   227   000000                     _RE4PPS	set	3702
   228   000000                     _RG6PPS	set	3720
   229   000000                     _RD5PPS	set	3695
   230   000000                     _ANSELDbits	set	3751
   231   000000                     _TMR0L	set	4051
   232   000000                     _TMR0H	set	4052
   233   000000                     _INTCONbits	set	4082
   234   000000                     _T2CLKCONbits	set	4031
   235   000000                     _T2HLTbits	set	4030
   236   000000                     _CCP1CONbits	set	4011
   237   000000                     _CCPTMRS0bits	set	4013
   238   000000                     _CCP2CONbits	set	4007
   239   000000                     _CCP3CONbits	set	3878
   240   000000                     _CCP4CONbits	set	3874
   241   000000                     _SSP2CON2	set	3802
   242   000000                     _SSP2STAT	set	3800
   243   000000                     _PIE0bits	set	3625
   244   000000                     _RD6PPS	set	3696
   245   000000                     _PIE2bits	set	3627
   246   000000                     _PIR0bits	set	3635
   247                           
   248                           ; #config settings
   249                           
   250                           	psect	cinit
   251   0018DE                     __pcinit:
   252                           	callstack 0
   253   0018DE                     start_initialization:
   254                           	callstack 0
   255   0018DE                     __initialization:
   256                           	callstack 0
   257                           
   258                           ; Initialize objects allocated to BANK1 (24 bytes)
   259                           ; load TBLPTR registers with __pidataBANK1
   260   0018DE  0E98               	movlw	low __pidataBANK1
   261   0018E0  6EF6               	movwf	tblptrl,c
   262   0018E2  0E1F               	movlw	high __pidataBANK1
   263   0018E4  6EF7               	movwf	tblptrh,c
   264   0018E6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   265   0018E8  6EF8               	movwf	tblptru,c
   266   0018EA  EE01  F078         	lfsr	0,__pdataBANK1
   267   0018EE  EE10 F018          	lfsr	1,24
   268   0018F2                     copy_data0:
   269   0018F2  0009               	tblrd		*+
   270   0018F4  CFF5 FFEE          	movff	tablat,postinc0
   271   0018F8  50E5               	movf	postdec1,w,c
   272   0018FA  50E1               	movf	fsr1l,w,c
   273   0018FC  E1FA               	bnz	copy_data0
   274                           
   275                           ; Initialize objects allocated to BANK0 (96 bytes)
   276                           ; load TBLPTR registers with __pidataBANK0
   277   0018FE  0ECE               	movlw	low __pidataBANK0
   278   001900  6EF6               	movwf	tblptrl,c
   279   001902  0E1B               	movlw	high __pidataBANK0
   280   001904  6EF7               	movwf	tblptrh,c
   281   001906  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   282   001908  6EF8               	movwf	tblptru,c
   283   00190A  EE00  F060         	lfsr	0,__pdataBANK0
   284   00190E  EE10 F060          	lfsr	1,96
   285   001912                     copy_data1:
   286   001912  0009               	tblrd		*+
   287   001914  CFF5 FFEE          	movff	tablat,postinc0
   288   001918  50E5               	movf	postdec1,w,c
   289   00191A  50E1               	movf	fsr1l,w,c
   290   00191C  E1FA               	bnz	copy_data1
   291                           
   292                           ; Initialize objects allocated to COMRAM (4 bytes)
   293                           ; load TBLPTR registers with __pidataCOMRAM
   294   00191E  0EF6               	movlw	low __pidataCOMRAM
   295   001920  6EF6               	movwf	tblptrl,c
   296   001922  0E1F               	movlw	high __pidataCOMRAM
   297   001924  6EF7               	movwf	tblptrh,c
   298   001926  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   299   001928  6EF8               	movwf	tblptru,c
   300   00192A  EE00  F057         	lfsr	0,__pdataCOMRAM
   301   00192E  EE10 F004          	lfsr	1,4
   302   001932                     copy_data2:
   303   001932  0009               	tblrd		*+
   304   001934  CFF5 FFEE          	movff	tablat,postinc0
   305   001938  50E5               	movf	postdec1,w,c
   306   00193A  50E1               	movf	fsr1l,w,c
   307   00193C  E1FA               	bnz	copy_data2
   308                           
   309                           ; Clear objects allocated to BANK2 (200 bytes)
   310   00193E  EE02  F000         	lfsr	0,__pbssBANK2
   311   001942  0EC8               	movlw	200
   312   001944                     clear_0:
   313   001944  6AEE               	clrf	postinc0,c
   314   001946  06E8               	decf	wreg,f,c
   315   001948  E1FD               	bnz	clear_0
   316                           
   317                           ; Clear objects allocated to BANK1 (120 bytes)
   318   00194A  EE01  F000         	lfsr	0,__pbssBANK1
   319   00194E  0E78               	movlw	120
   320   001950                     clear_1:
   321   001950  6AEE               	clrf	postinc0,c
   322   001952  06E8               	decf	wreg,f,c
   323   001954  E1FD               	bnz	clear_1
   324                           
   325                           ; Clear objects allocated to BANK0 (12 bytes)
   326   001956  EE00  F0EC         	lfsr	0,__pbssBANK0
   327   00195A  0E0C               	movlw	12
   328   00195C                     clear_2:
   329   00195C  6AEE               	clrf	postinc0,c
   330   00195E  06E8               	decf	wreg,f,c
   331   001960  E1FD               	bnz	clear_2
   332                           
   333                           ; Clear objects allocated to COMRAM (6 bytes)
   334   001962  6A56               	clrf	(__pbssCOMRAM+5)& (0+255),c
   335   001964  6A55               	clrf	(__pbssCOMRAM+4)& (0+255),c
   336   001966  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   337   001968  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   338   00196A  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   339   00196C  6A51               	clrf	__pbssCOMRAM& (0+255),c
   340   00196E                     end_of_initialization:
   341                           	callstack 0
   342   00196E                     __end_of__initialization:
   343                           	callstack 0
   344   00196E  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   345   001970  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   346   001972  0100               	movlb	0
   347   001974  EF8D  F005         	goto	_main	;jump to C main() function
   348                           
   349                           	psect	bssCOMRAM
   350   000051                     __pbssCOMRAM:
   351                           	callstack 0
   352   000051                     _state:
   353                           	callstack 0
   354   000051                     	ds	2
   355   000053                     _index:
   356                           	callstack 0
   357   000053                     	ds	2
   358   000055                     _seconds:
   359                           	callstack 0
   360   000055                     	ds	2
   361                           
   362                           	psect	dataCOMRAM
   363   000057                     __pdataCOMRAM:
   364                           	callstack 0
   365   000057                     _wait_time:
   366                           	callstack 0
   367   000057                     	ds	2
   368   000059                     _wall_coef:
   369                           	callstack 0
   370   000059                     	ds	2
   371                           
   372                           	psect	bssBANK0
   373   0000EC                     __pbssBANK0:
   374                           	callstack 0
   375   0000EC                     _RGB:
   376                           	callstack 0
   377   0000EC                     	ds	12
   378                           
   379                           	psect	dataBANK0
   380   000060                     __pdataBANK0:
   381                           	callstack 0
   382   000060                     _Black_setup:
   383                           	callstack 0
   384   000060                     	ds	12
   385   00006C                     _White_setup:
   386                           	callstack 0
   387   00006C                     	ds	12
   388   000078                     _Orange_rule:
   389                           	callstack 0
   390   000078                     	ds	12
   391   000084                     _Pink_rule:
   392                           	callstack 0
   393   000084                     	ds	12
   394   000090                     _Yellow_rule:
   395                           	callstack 0
   396   000090                     	ds	12
   397   00009C                     _Blue_rule:
   398                           	callstack 0
   399   00009C                     	ds	12
   400   0000A8                     _Green_rule:
   401                           	callstack 0
   402   0000A8                     	ds	12
   403   0000B4                     _Red_rule:
   404                           	callstack 0
   405   0000B4                     	ds	12
   406                           
   407                           	psect	bssBANK1
   408   000100                     __pbssBANK1:
   409                           	callstack 0
   410   000100                     _Color_rules:
   411                           	callstack 0
   412   000100                     	ds	108
   413   00016C                     _Black_rule:
   414                           	callstack 0
   415   00016C                     	ds	12
   416                           
   417                           	psect	dataBANK1
   418   000178                     __pdataBANK1:
   419                           	callstack 0
   420   000178                     _White_rule:
   421                           	callstack 0
   422   000178                     	ds	12
   423   000184                     _Lightblue_rule:
   424                           	callstack 0
   425   000184                     	ds	12
   426                           
   427                           	psect	bssBANK2
   428   000200                     __pbssBANK2:
   429                           	callstack 0
   430   000200                     _movement_list:
   431                           	callstack 0
   432   000200                     	ds	200
   433                           
   434                           	psect	cstackBANK0
   435   0000C0                     __pcstackBANK0:
   436                           	callstack 0
   437   0000C0                     _get_color_code$2441:
   438                           	callstack 0
   439                           
   440                           ; 12 bytes @ 0x0
   441   0000C0                     	ds	12
   442   0000CC                     _get_color_code$458:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0xC
   446   0000CC                     	ds	4
   447   0000D0                     _get_color_code$459:
   448                           	callstack 0
   449                           
   450                           ; 4 bytes @ 0x10
   451   0000D0                     	ds	4
   452   0000D4                     _get_color_code$460:
   453                           	callstack 0
   454                           
   455                           ; 4 bytes @ 0x14
   456   0000D4                     	ds	4
   457   0000D8                     get_color_code@min_value:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x18
   461   0000D8                     	ds	2
   462   0000DA                     get_color_code@min_index:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x1A
   466   0000DA                     	ds	2
   467   0000DC                     get_color_code@value:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x1C
   471   0000DC                     	ds	2
   472   0000DE                     get_color_code@i:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x1E
   476   0000DE                     	ds	2
   477   0000E0                     get_color_code@NormalizedRGB:
   478                           	callstack 0
   479                           
   480                           ; 12 bytes @ 0x20
   481   0000E0                     	ds	12
   482                           
   483                           	psect	cstackCOMRAM
   484   000001                     __pcstackCOMRAM:
   485                           	callstack 0
   486   000001                     ??_add_seconds_to_list:
   487   000001                     ??_I2C_2_Master_Idle:
   488   000001                     ?_get_state:
   489                           	callstack 0
   490   000001                     ?___wmul:
   491                           	callstack 0
   492   000001                     ?___lmul:
   493                           	callstack 0
   494   000001                     set_led_color@color:
   495                           	callstack 0
   496   000001                     initDCmotorsPWM@PWMperiod:
   497                           	callstack 0
   498   000001                     ___wmul@multiplier:
   499                           	callstack 0
   500   000001                     ___lmul@multiplier:
   501                           	callstack 0
   502                           
   503                           ; 4 bytes @ 0x0
   504   000001                     	ds	1
   505   000002                     ??_I2C_2_Master_Read:
   506   000002                     I2C_2_Master_Write@data_byte:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0x1
   510   000002                     	ds	1
   511   000003                     color_writetoaddr@value:
   512                           	callstack 0
   513   000003                     I2C_2_Master_Read@ack:
   514                           	callstack 0
   515   000003                     ___wmul@multiplicand:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519   000003                     	ds	1
   520   000004                     color_writetoaddr@address:
   521                           	callstack 0
   522   000004                     I2C_2_Master_Read@tmp:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x3
   526   000004                     	ds	1
   527   000005                     ?_color_read_Red:
   528                           	callstack 0
   529   000005                     ?_color_read_Blue:
   530                           	callstack 0
   531   000005                     ?_color_read_Green:
   532                           	callstack 0
   533   000005                     ?_color_read_Clear:
   534                           	callstack 0
   535   000005                     ___wmul@product:
   536                           	callstack 0
   537   000005                     ___lmul@multiplicand:
   538                           	callstack 0
   539                           
   540                           ; 4 bytes @ 0x4
   541   000005                     	ds	2
   542   000007                     ??_color_read_Red:
   543   000007                     ??_color_read_Blue:
   544   000007                     ??_color_read_Green:
   545   000007                     ??_color_read_Clear:
   546   000007                     ?_get_color_distance:
   547                           	callstack 0
   548   000007                     ?___lwdiv:
   549                           	callstack 0
   550   000007                     ___lwdiv@dividend:
   551                           	callstack 0
   552   000007                     get_color_distance@color1:
   553                           	callstack 0
   554                           
   555                           ; 12 bytes @ 0x6
   556   000007                     	ds	2
   557   000009                     ___lwdiv@divisor:
   558                           	callstack 0
   559   000009                     ___lmul@product:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x8
   563   000009                     	ds	1
   564   00000A                     color_read_Red@tmp:
   565                           	callstack 0
   566   00000A                     color_read_Blue@tmp:
   567                           	callstack 0
   568   00000A                     color_read_Green@tmp:
   569                           	callstack 0
   570   00000A                     color_read_Clear@tmp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574   00000A                     	ds	1
   575   00000B                     ___lwdiv@quotient:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0xA
   579   00000B                     	ds	1
   580   00000C                     ??_calibrate_white:
   581   00000C                     ?_get_wall_presence:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0xB
   585   00000C                     	ds	1
   586   00000D                     ?___lldiv:
   587                           	callstack 0
   588   00000D                     ___lwdiv@counter:
   589                           	callstack 0
   590   00000D                     ___lldiv@dividend:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0xC
   594   00000D                     	ds	1
   595   00000E                     ??_calibrate_black:
   596   00000E                     ??_get_wall_presence:
   597   00000E                     setMotorPWM@m:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0xD
   601   00000E                     	ds	2
   602   000010                     ??_setMotorPWM:
   603   000010                     calibrate_black@clear1:
   604                           	callstack 0
   605   000010                     get_wall_presence@clear1:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0xF
   609   000010                     	ds	1
   610   000011                     ___lldiv@divisor:
   611                           	callstack 0
   612                           
   613                           ; 4 bytes @ 0x10
   614   000011                     	ds	1
   615   000012                     setMotorPWM@posDuty:
   616                           	callstack 0
   617   000012                     calibrate_black@clear2:
   618                           	callstack 0
   619   000012                     get_wall_presence@clear2:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x11
   623   000012                     	ds	1
   624   000013                     setMotorPWM@negDuty:
   625                           	callstack 0
   626   000013                     get_color_distance@color2:
   627                           	callstack 0
   628                           
   629                           ; 12 bytes @ 0x12
   630   000013                     	ds	1
   631   000014                     stop@mL:
   632                           	callstack 0
   633   000014                     turnLeft@mL:
   634                           	callstack 0
   635   000014                     turnRight@mL:
   636                           	callstack 0
   637   000014                     turnLeftLong@mL:
   638                           	callstack 0
   639   000014                     turnRightLong@mL:
   640                           	callstack 0
   641   000014                     fullSpeedAhead@mL:
   642                           	callstack 0
   643   000014                     TimedfullSpeedAhead@mL:
   644                           	callstack 0
   645   000014                     moveBack@mL:
   646                           	callstack 0
   647   000014                     _calibrate_black$2442:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x13
   651   000014                     	ds	1
   652   000015                     ___lldiv@quotient:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x14
   656   000015                     	ds	1
   657   000016                     ??_color_click_init:
   658   000016                     stop@mR:
   659                           	callstack 0
   660   000016                     turnLeft@mR:
   661                           	callstack 0
   662   000016                     turnRight@mR:
   663                           	callstack 0
   664   000016                     turnLeftLong@mR:
   665                           	callstack 0
   666   000016                     turnRightLong@mR:
   667                           	callstack 0
   668   000016                     fullSpeedAhead@mR:
   669                           	callstack 0
   670   000016                     TimedfullSpeedAhead@mR:
   671                           	callstack 0
   672   000016                     moveBack@mR:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x15
   676   000016                     	ds	2
   677   000018                     ??_stop:
   678   000018                     ??_turnLeft:
   679   000018                     ??_turnRight:
   680   000018                     ??_turnLeftLong:
   681   000018                     ??_turnRightLong:
   682   000018                     TimedfullSpeedAhead@time:
   683                           	callstack 0
   684   000018                     moveBack@time:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x17
   688   000018                     	ds	1
   689   000019                     ___lldiv@counter:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x18
   693   000019                     	ds	1
   694   00001A                     turnLeft@k:
   695                           	callstack 0
   696   00001A                     turnRight@k:
   697                           	callstack 0
   698   00001A                     turnLeftLong@i:
   699                           	callstack 0
   700   00001A                     turnRightLong@i:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x19
   704   00001A                     	ds	2
   705   00001C                     turnLeft@i:
   706                           	callstack 0
   707   00001C                     turnRight@i:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x1B
   711   00001C                     	ds	2
   712   00001E                     RobotMovement@color:
   713                           	callstack 0
   714   00001E                     return_back@motorL:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x1D
   718   00001E                     	ds	1
   719   00001F                     ??_get_color_distance:
   720                           
   721                           ; 1 bytes @ 0x1E
   722   00001F                     	ds	1
   723   000020                     RobotMovement@motorL:
   724                           	callstack 0
   725   000020                     return_back@motorR:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x1F
   729   000020                     	ds	2
   730   000022                     ??_return_back:
   731   000022                     RobotMovement@motorR:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x21
   735   000022                     	ds	1
   736   000023                     _get_color_distance$417:
   737                           	callstack 0
   738                           
   739                           ; 4 bytes @ 0x22
   740   000023                     	ds	1
   741   000024                     
   742                           ; 1 bytes @ 0x23
   743   000024                     	ds	2
   744   000026                     RobotMovement@i:
   745                           	callstack 0
   746                           
   747                           ; 2 bytes @ 0x25
   748   000026                     	ds	1
   749   000027                     _get_color_distance$419:
   750                           	callstack 0
   751                           
   752                           ; 4 bytes @ 0x26
   753   000027                     	ds	1
   754   000028                     RobotMovement@i_1265:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x27
   758   000028                     	ds	3
   759   00002B                     _get_color_distance$421:
   760                           	callstack 0
   761                           
   762                           ; 4 bytes @ 0x2A
   763   00002B                     	ds	4
   764   00002F                     get_color_distance@R_offset:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0x2E
   768   00002F                     	ds	2
   769   000031                     get_color_distance@G_offset:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x30
   773   000031                     	ds	2
   774   000033                     get_color_distance@B_offset:
   775                           	callstack 0
   776                           
   777                           ; 2 bytes @ 0x32
   778   000033                     	ds	2
   779   000035                     ?_get_color_code:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x34
   783   000035                     	ds	2
   784   000037                     ??_get_color_code:
   785                           
   786                           ; 1 bytes @ 0x36
   787   000037                     	ds	2
   788   000039                     ??_main:
   789                           
   790                           ; 1 bytes @ 0x38
   791   000039                     	ds	2
   792   00003B                     main@color_code:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x3A
   796   00003B                     	ds	2
   797   00003D                     main@state:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x3C
   801   00003D                     	ds	2
   802   00003F                     main@motorL:
   803                           	callstack 0
   804                           
   805                           ; 9 bytes @ 0x3E
   806   00003F                     	ds	9
   807   000048                     main@motorR:
   808                           	callstack 0
   809                           
   810                           ; 9 bytes @ 0x47
   811   000048                     	ds	9
   812                           
   813 ;;
   814 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   815 ;;
   816 ;; *************** function _main *****************
   817 ;; Defined at:
   818 ;;		line 17 in file "main.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;  color_code      2   58[COMRAM] unsigned int 
   823 ;;  state           2   60[COMRAM] int 
   824 ;;  motorR          9   71[COMRAM] struct DC_motor
   825 ;;  motorL          9   62[COMRAM] struct DC_motor
   826 ;;  PWMcycle        2    0        unsigned int 
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   837 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   839 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   840 ;;Total ram usage:       24 bytes
   841 ;; Hardware stack levels required when called: 7
   842 ;; This function calls:
   843 ;;		_Interrupts_init
   844 ;;		_RobotMovement
   845 ;;		_TimedfullSpeedAhead
   846 ;;		_Timer0_init
   847 ;;		_add_seconds_to_list
   848 ;;		_color_click_init
   849 ;;		_fullSpeedAhead
   850 ;;		_get_color_code
   851 ;;		_get_state
   852 ;;		_get_wall_presence
   853 ;;		_initDCmotorsPWM
   854 ;;		_return_back
   855 ;;		_stop
   856 ;; This function is called by:
   857 ;;		Startup code after reset
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text0
   862   000B1A                     __ptext0:
   863                           	callstack 0
   864   000B1A                     _main:
   865                           	callstack 24
   866   000B1A                     
   867                           ;main.c: 18:     Timer0_init();
   868   000B1A  ECBC  F00F         	call	_Timer0_init	;wreg free
   869   000B1E                     
   870                           ;main.c: 19:     Interrupts_init();
   871   000B1E  ECDE  F00F         	call	_Interrupts_init	;wreg free
   872   000B22                     
   873                           ;main.c: 20:     initDCmotorsPWM(99);
   874   000B22  0E00               	movlw	0
   875   000B24  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   876   000B26  0E63               	movlw	99
   877   000B28  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   878   000B2A  ECBC  F00C         	call	_initDCmotorsPWM	;wreg free
   879   000B2E                     
   880                           ;main.c: 22:     color_click_init();
   881   000B2E  ECB6  F009         	call	_color_click_init	;wreg free
   882   000B32                     
   883                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   884   000B32  010E               	movlb	14	; () banked
   885   000B34  95B4               	bcf	180,2,b	;volatile
   886   000B36                     
   887                           ; BSR set to: 14
   888                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   889   000B36  8486               	bsf	134,2,c	;volatile
   890   000B38                     
   891                           ; BSR set to: 14
   892                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   893   000B38  0E00               	movlw	0
   894   000B3A  6E3F               	movwf	main@motorL^0,c
   895   000B3C                     
   896                           ; BSR set to: 14
   897                           ;main.c: 29:     motorL.direction=1;
   898   000B3C  0E01               	movlw	1
   899   000B3E  6E40               	movwf	(main@motorL+1)^0,c
   900   000B40                     
   901                           ; BSR set to: 14
   902                           ;main.c: 30:     motorL.brakemode=1;
   903   000B40  0E01               	movlw	1
   904   000B42  6E41               	movwf	(main@motorL+2)^0,c
   905   000B44                     
   906                           ; BSR set to: 14
   907                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   908   000B44  0EAA               	movlw	170
   909   000B46  6E44               	movwf	(main@motorL+5)^0,c
   910   000B48  0E0F               	movlw	15
   911   000B4A  6E45               	movwf	(main@motorL+6)^0,c
   912   000B4C                     
   913                           ; BSR set to: 14
   914                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   915   000B4C  0EA6               	movlw	166
   916   000B4E  6E46               	movwf	(main@motorL+7)^0,c
   917   000B50  0E0F               	movlw	15
   918   000B52  6E47               	movwf	(main@motorL+8)^0,c
   919   000B54                     
   920                           ; BSR set to: 14
   921                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   922   000B54  0E00               	movlw	0
   923   000B56  6E43               	movwf	(main@motorL+4)^0,c
   924   000B58  0E63               	movlw	99
   925   000B5A  6E42               	movwf	(main@motorL+3)^0,c
   926   000B5C                     
   927                           ; BSR set to: 14
   928                           ;main.c: 35:     motorR.power=0;
   929   000B5C  0E00               	movlw	0
   930   000B5E  6E48               	movwf	main@motorR^0,c
   931   000B60                     
   932                           ; BSR set to: 14
   933                           ;main.c: 36:     motorR.direction=1;
   934   000B60  0E01               	movlw	1
   935   000B62  6E49               	movwf	(main@motorR+1)^0,c
   936   000B64                     
   937                           ; BSR set to: 14
   938                           ;main.c: 37:     motorR.brakemode=1;
   939   000B64  0E01               	movlw	1
   940   000B66  6E4A               	movwf	(main@motorR+2)^0,c
   941   000B68                     
   942                           ; BSR set to: 14
   943                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   944   000B68  0E25               	movlw	37
   945   000B6A  6E4D               	movwf	(main@motorR+5)^0,c
   946   000B6C  0E0F               	movlw	15
   947   000B6E  6E4E               	movwf	(main@motorR+6)^0,c
   948   000B70                     
   949                           ; BSR set to: 14
   950                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   951   000B70  0E21               	movlw	33
   952   000B72  6E4F               	movwf	(main@motorR+7)^0,c
   953   000B74  0E0F               	movlw	15
   954   000B76  6E50               	movwf	(main@motorR+8)^0,c
   955   000B78                     
   956                           ; BSR set to: 14
   957                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   958   000B78  0E00               	movlw	0
   959   000B7A  6E4C               	movwf	(main@motorR+4)^0,c
   960   000B7C  0E63               	movlw	99
   961   000B7E  6E4B               	movwf	(main@motorR+3)^0,c
   962   000B80                     
   963                           ; BSR set to: 14
   964                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   965   000B80  0E52               	movlw	82
   966   000B82  6E3A               	movwf	(??_main+1)^0,c
   967   000B84  0E2B               	movlw	43
   968   000B86  6E39               	movwf	??_main^0,c
   969   000B88  0E00               	movlw	0
   970   000B8A                     u2487:
   971   000B8A  2EE8               	decfsz	wreg,f,c
   972   000B8C  D7FE               	bra	u2487
   973   000B8E  2E39               	decfsz	??_main^0,f,c
   974   000B90  D7FC               	bra	u2487
   975   000B92  2E3A               	decfsz	(??_main+1)^0,f,c
   976   000B94  D7FA               	bra	u2487
   977   000B96  D000               	nop2	
   978   000B98                     
   979                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
   980   000B98  0E3F               	movlw	low main@motorL
   981   000B9A  6E14               	movwf	fullSpeedAhead@mL^0,c
   982   000B9C  0E00               	movlw	high main@motorL
   983   000B9E  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   984   000BA0  0E48               	movlw	low main@motorR
   985   000BA2  6E16               	movwf	fullSpeedAhead@mR^0,c
   986   000BA4  0E00               	movlw	high main@motorR
   987   000BA6  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   988   000BA8  EC17  F00E         	call	_fullSpeedAhead	;wreg free
   989   000BAC                     l3048:
   990                           
   991                           ;main.c: 45:         int state = get_state();
   992   000BAC  ECE4  F00F         	call	_get_state	;wreg free
   993   000BB0  C001  F03D         	movff	?_get_state,main@state
   994   000BB4  C002  F03E         	movff	?_get_state+1,main@state+1
   995   000BB8                     
   996                           ;main.c: 46:         if(get_wall_presence() == 1 && state == 0 ){
   997   000BB8  EC21  F00C         	call	_get_wall_presence	;wreg free
   998   000BBC  040C               	decf	?_get_wall_presence^0,w,c
   999   000BBE  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
  1000   000BC0  A4D8               	btfss	status,2,c
  1001   000BC2  EFE5  F005         	goto	u2081
  1002   000BC6  EFE7  F005         	goto	u2080
  1003   000BCA                     u2081:
  1004   000BCA  EF3D  F006         	goto	l3068
  1005   000BCE                     u2080:
  1006   000BCE  503D               	movf	main@state^0,w,c
  1007   000BD0  103E               	iorwf	(main@state+1)^0,w,c
  1008   000BD2  A4D8               	btfss	status,2,c
  1009   000BD4  EFEE  F005         	goto	u2091
  1010   000BD8  EFF0  F005         	goto	u2090
  1011   000BDC                     u2091:
  1012   000BDC  EF3D  F006         	goto	l3068
  1013   000BE0                     u2090:
  1014   000BE0                     
  1015                           ;main.c: 48:             add_seconds_to_list();
  1016   000BE0  EC09  F00F         	call	_add_seconds_to_list	;wreg free
  1017   000BE4                     
  1018                           ;main.c: 49:             stop(&motorL,&motorR);
  1019   000BE4  0E3F               	movlw	low main@motorL
  1020   000BE6  6E14               	movwf	stop@mL^0,c
  1021   000BE8  0E00               	movlw	high main@motorL
  1022   000BEA  6E15               	movwf	(stop@mL+1)^0,c
  1023   000BEC  0E48               	movlw	low main@motorR
  1024   000BEE  6E16               	movwf	stop@mR^0,c
  1025   000BF0  0E00               	movlw	high main@motorR
  1026   000BF2  6E17               	movwf	(stop@mR+1)^0,c
  1027   000BF4  ECE4  F00E         	call	_stop	;wreg free
  1028   000BF8                     
  1029                           ;main.c: 50:             unsigned int color_code = get_color_code();
  1030   000BF8  ECBC  F002         	call	_get_color_code	;wreg free
  1031   000BFC  C035  F03B         	movff	?_get_color_code,main@color_code
  1032   000C00  C036  F03C         	movff	?_get_color_code+1,main@color_code+1
  1033   000C04                     
  1034                           ;main.c: 51:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1035   000C04  0E3F               	movlw	low main@motorL
  1036   000C06  6E14               	movwf	TimedfullSpeedAhead@mL^0,c
  1037   000C08  0E00               	movlw	high main@motorL
  1038   000C0A  6E15               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1039   000C0C  0E48               	movlw	low main@motorR
  1040   000C0E  6E16               	movwf	TimedfullSpeedAhead@mR^0,c
  1041   000C10  0E00               	movlw	high main@motorR
  1042   000C12  6E17               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1043   000C14  0E00               	movlw	0
  1044   000C16  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1045   000C18  0E05               	movlw	5
  1046   000C1A  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1047   000C1C  EC3E  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1048   000C20                     
  1049                           ;main.c: 52:             RobotMovement(color_code, &motorL, &motorR);
  1050   000C20  C03B  F01E         	movff	main@color_code,RobotMovement@color
  1051   000C24  C03C  F01F         	movff	main@color_code+1,RobotMovement@color+1
  1052   000C28  0E3F               	movlw	low main@motorL
  1053   000C2A  6E20               	movwf	RobotMovement@motorL^0,c
  1054   000C2C  0E00               	movlw	high main@motorL
  1055   000C2E  6E21               	movwf	(RobotMovement@motorL+1)^0,c
  1056   000C30  0E48               	movlw	low main@motorR
  1057   000C32  6E22               	movwf	RobotMovement@motorR^0,c
  1058   000C34  0E00               	movlw	high main@motorR
  1059   000C36  6E23               	movwf	(RobotMovement@motorR+1)^0,c
  1060   000C38  EC19  F000         	call	_RobotMovement	;wreg free
  1061   000C3C                     
  1062                           ;main.c: 53:             if (state == 0)
  1063   000C3C  503D               	movf	main@state^0,w,c
  1064   000C3E  103E               	iorwf	(main@state+1)^0,w,c
  1065   000C40  A4D8               	btfss	status,2,c
  1066   000C42  EF25  F006         	goto	u2101
  1067   000C46  EF27  F006         	goto	u2100
  1068   000C4A                     u2101:
  1069   000C4A  EFD6  F005         	goto	l3048
  1070   000C4E                     u2100:
  1071   000C4E                     
  1072                           ;main.c: 54:             {;main.c: 55:                 stop(&motorL,&motorR);
  1073   000C4E  0E3F               	movlw	low main@motorL
  1074   000C50  6E14               	movwf	stop@mL^0,c
  1075   000C52  0E00               	movlw	high main@motorL
  1076   000C54  6E15               	movwf	(stop@mL+1)^0,c
  1077   000C56  0E48               	movlw	low main@motorR
  1078   000C58  6E16               	movwf	stop@mR^0,c
  1079   000C5A  0E00               	movlw	high main@motorR
  1080   000C5C  6E17               	movwf	(stop@mR+1)^0,c
  1081   000C5E  ECE4  F00E         	call	_stop	;wreg free
  1082                           
  1083                           ;main.c: 56:                 fullSpeedAhead(&motorL,&motorR);
  1084   000C62  0E3F               	movlw	low main@motorL
  1085   000C64  6E14               	movwf	fullSpeedAhead@mL^0,c
  1086   000C66  0E00               	movlw	high main@motorL
  1087   000C68  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1088   000C6A  0E48               	movlw	low main@motorR
  1089   000C6C  6E16               	movwf	fullSpeedAhead@mR^0,c
  1090   000C6E  0E00               	movlw	high main@motorR
  1091   000C70  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1092   000C72  EC17  F00E         	call	_fullSpeedAhead	;wreg free
  1093   000C76  EFD6  F005         	goto	l3048
  1094   000C7A                     l3068:
  1095   000C7A  043D               	decf	main@state^0,w,c
  1096   000C7C  103E               	iorwf	(main@state+1)^0,w,c
  1097   000C7E  A4D8               	btfss	status,2,c
  1098   000C80  EF44  F006         	goto	u2111
  1099   000C84  EF46  F006         	goto	u2110
  1100   000C88                     u2111:
  1101   000C88  EF52  F006         	goto	l432
  1102   000C8C                     u2110:
  1103   000C8C                     
  1104                           ;main.c: 59:             return_back(&motorL, &motorR);
  1105   000C8C  0E3F               	movlw	low main@motorL
  1106   000C8E  6E1E               	movwf	return_back@motorL^0,c
  1107   000C90  0E00               	movlw	high main@motorL
  1108   000C92  6E1F               	movwf	(return_back@motorL+1)^0,c
  1109   000C94  0E48               	movlw	low main@motorR
  1110   000C96  6E20               	movwf	return_back@motorR^0,c
  1111   000C98  0E00               	movlw	high main@motorR
  1112   000C9A  6E21               	movwf	(return_back@motorR+1)^0,c
  1113   000C9C  EC8B  F004         	call	_return_back	;wreg free
  1114                           
  1115                           ;main.c: 60:         }else{
  1116   000CA0  EFD6  F005         	goto	l3048
  1117   000CA4                     l432:
  1118   000CA4  EFD6  F005         	goto	l3048
  1119   000CA8  EF17  F000         	goto	start
  1120   000CAC                     __end_of_main:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _return_back *****************
  1124 ;; Defined at:
  1125 ;;		line 445 in file "dc_motor.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  1128 ;;		 -> main@motorL(9), 
  1129 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  1130 ;;		 -> main@motorR(9), 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1142 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1145 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1146 ;;Total ram usage:        6 bytes
  1147 ;; Hardware stack levels used: 1
  1148 ;; Hardware stack levels required when called: 5
  1149 ;; This function calls:
  1150 ;;		_TimedfullSpeedAhead
  1151 ;;		_moveBack
  1152 ;;		_stop
  1153 ;;		_turnLeft
  1154 ;;		_turnLeftLong
  1155 ;;		_turnRight
  1156 ;;		_turnRightLong
  1157 ;; This function is called by:
  1158 ;;		_main
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text1
  1163   000916                     __ptext1:
  1164                           	callstack 0
  1165   000916                     _return_back:
  1166                           	callstack 25
  1167   000916                     
  1168                           ;dc_motor.c: 445: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 446: {;dc_motor.c: 447:     while (index > 0){
  1169   000916  EF72  F005         	goto	l300
  1170   00091A                     l2962:
  1171                           
  1172                           ;dc_motor.c: 448:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1173   00091A  90D8               	bcf	status,0,c
  1174   00091C  3453               	rlcf	_index^0,w,c
  1175   00091E  6ED9               	movwf	fsr2l,c
  1176   000920  3454               	rlcf	(_index+1)^0,w,c
  1177   000922  6EDA               	movwf	fsr2h,c
  1178   000924  0EFE               	movlw	low (_movement_list+65534)
  1179   000926  26D9               	addwf	fsr2l,f,c
  1180   000928  0E01               	movlw	high (_movement_list+65534)
  1181   00092A  22DA               	addwfc	fsr2h,f,c
  1182   00092C  28DE               	incf	postinc2,w,c
  1183   00092E  E106               	bnz	u2011
  1184   000930  28DE               	incf	postinc2,w,c
  1185   000932  A4D8               	btfss	status,2,c
  1186   000934  EF9E  F004         	goto	u2011
  1187   000938  EFA0  F004         	goto	u2010
  1188   00093C                     u2011:
  1189   00093C  EFAC  F004         	goto	l2966
  1190   000940                     u2010:
  1191   000940  C01E  F014         	movff	return_back@motorL,turnLeft@mL
  1192   000944  C01F  F015         	movff	return_back@motorL+1,turnLeft@mL+1
  1193   000948  C020  F016         	movff	return_back@motorR,turnLeft@mR
  1194   00094C  C021  F017         	movff	return_back@motorR+1,turnLeft@mR+1
  1195   000950  ECC2  F007         	call	_turnLeft	;wreg free
  1196   000954  EF65  F005         	goto	l2988
  1197   000958                     l2966:
  1198   000958  90D8               	bcf	status,0,c
  1199   00095A  3453               	rlcf	_index^0,w,c
  1200   00095C  6ED9               	movwf	fsr2l,c
  1201   00095E  3454               	rlcf	(_index+1)^0,w,c
  1202   000960  6EDA               	movwf	fsr2h,c
  1203   000962  0EFE               	movlw	low (_movement_list+65534)
  1204   000964  26D9               	addwf	fsr2l,f,c
  1205   000966  0E01               	movlw	high (_movement_list+65534)
  1206   000968  22DA               	addwfc	fsr2h,f,c
  1207   00096A  0EFE               	movlw	254
  1208   00096C  18DE               	xorwf	postinc2,w,c
  1209   00096E  E106               	bnz	u2021
  1210   000970  28DE               	incf	postinc2,w,c
  1211   000972  A4D8               	btfss	status,2,c
  1212   000974  EFBE  F004         	goto	u2021
  1213   000978  EFC0  F004         	goto	u2020
  1214   00097C                     u2021:
  1215   00097C  EFCC  F004         	goto	l2970
  1216   000980                     u2020:
  1217   000980  C01E  F014         	movff	return_back@motorL,turnRight@mL
  1218   000984  C01F  F015         	movff	return_back@motorL+1,turnRight@mL+1
  1219   000988  C020  F016         	movff	return_back@motorR,turnRight@mR
  1220   00098C  C021  F017         	movff	return_back@motorR+1,turnRight@mR+1
  1221   000990  EC6F  F008         	call	_turnRight	;wreg free
  1222   000994  EF65  F005         	goto	l2988
  1223   000998                     l2970:
  1224   000998  90D8               	bcf	status,0,c
  1225   00099A  3453               	rlcf	_index^0,w,c
  1226   00099C  6ED9               	movwf	fsr2l,c
  1227   00099E  3454               	rlcf	(_index+1)^0,w,c
  1228   0009A0  6EDA               	movwf	fsr2h,c
  1229   0009A2  0EFE               	movlw	low (_movement_list+65534)
  1230   0009A4  26D9               	addwf	fsr2l,f,c
  1231   0009A6  0E01               	movlw	high (_movement_list+65534)
  1232   0009A8  22DA               	addwfc	fsr2h,f,c
  1233   0009AA  0EFD               	movlw	253
  1234   0009AC  18DE               	xorwf	postinc2,w,c
  1235   0009AE  E106               	bnz	u2031
  1236   0009B0  28DE               	incf	postinc2,w,c
  1237   0009B2  A4D8               	btfss	status,2,c
  1238   0009B4  EFDE  F004         	goto	u2031
  1239   0009B8  EFE0  F004         	goto	u2030
  1240   0009BC                     u2031:
  1241   0009BC  EFEC  F004         	goto	l2974
  1242   0009C0                     u2030:
  1243   0009C0  C01E  F014         	movff	return_back@motorL,turnLeftLong@mL
  1244   0009C4  C01F  F015         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1245   0009C8  C020  F016         	movff	return_back@motorR,turnLeftLong@mR
  1246   0009CC  C021  F017         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1247   0009D0  ECE6  F00A         	call	_turnLeftLong	;wreg free
  1248   0009D4  EF65  F005         	goto	l2988
  1249   0009D8                     l2974:
  1250   0009D8  90D8               	bcf	status,0,c
  1251   0009DA  3453               	rlcf	_index^0,w,c
  1252   0009DC  6ED9               	movwf	fsr2l,c
  1253   0009DE  3454               	rlcf	(_index+1)^0,w,c
  1254   0009E0  6EDA               	movwf	fsr2h,c
  1255   0009E2  0EFE               	movlw	low (_movement_list+65534)
  1256   0009E4  26D9               	addwf	fsr2l,f,c
  1257   0009E6  0E01               	movlw	high (_movement_list+65534)
  1258   0009E8  22DA               	addwfc	fsr2h,f,c
  1259   0009EA  0EFC               	movlw	252
  1260   0009EC  18DE               	xorwf	postinc2,w,c
  1261   0009EE  E106               	bnz	u2041
  1262   0009F0  28DE               	incf	postinc2,w,c
  1263   0009F2  A4D8               	btfss	status,2,c
  1264   0009F4  EFFE  F004         	goto	u2041
  1265   0009F8  EF00  F005         	goto	u2040
  1266   0009FC                     u2041:
  1267   0009FC  EF0C  F005         	goto	l2978
  1268   000A00                     u2040:
  1269   000A00  C01E  F014         	movff	return_back@motorL,turnRightLong@mL
  1270   000A04  C01F  F015         	movff	return_back@motorL+1,turnRightLong@mL+1
  1271   000A08  C020  F016         	movff	return_back@motorR,turnRightLong@mR
  1272   000A0C  C021  F017         	movff	return_back@motorR+1,turnRightLong@mR+1
  1273   000A10  EC52  F00A         	call	_turnRightLong	;wreg free
  1274   000A14  EF65  F005         	goto	l2988
  1275   000A18                     l2978:
  1276   000A18  90D8               	bcf	status,0,c
  1277   000A1A  3453               	rlcf	_index^0,w,c
  1278   000A1C  6ED9               	movwf	fsr2l,c
  1279   000A1E  3454               	rlcf	(_index+1)^0,w,c
  1280   000A20  6EDA               	movwf	fsr2h,c
  1281   000A22  0EFE               	movlw	low (_movement_list+65534)
  1282   000A24  26D9               	addwf	fsr2l,f,c
  1283   000A26  0E01               	movlw	high (_movement_list+65534)
  1284   000A28  22DA               	addwfc	fsr2h,f,c
  1285   000A2A  0E01               	movlw	1
  1286   000A2C  BEDB               	btfsc	plusw2,7,c
  1287   000A2E  EF22  F005         	goto	u2051
  1288   000A32  0E01               	movlw	1
  1289   000A34  50DB               	movf	plusw2,w,c
  1290   000A36  E108               	bnz	u2050
  1291   000A38  04DE               	decf	postinc2,w,c
  1292   000A3A  A0D8               	btfss	status,0,c
  1293   000A3C  EF22  F005         	goto	u2051
  1294   000A40  EF24  F005         	goto	u2050
  1295   000A44                     u2051:
  1296   000A44  EF65  F005         	goto	l305
  1297   000A48                     u2050:
  1298   000A48                     
  1299                           ;dc_motor.c: 453:         {;dc_motor.c: 454:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1300   000A48  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1301   000A4C  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1302   000A50  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1303   000A54  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1304   000A58  90D8               	bcf	status,0,c
  1305   000A5A  3453               	rlcf	_index^0,w,c
  1306   000A5C  6ED9               	movwf	fsr2l,c
  1307   000A5E  3454               	rlcf	(_index+1)^0,w,c
  1308   000A60  6EDA               	movwf	fsr2h,c
  1309   000A62  0EFE               	movlw	low (_movement_list+65534)
  1310   000A64  26D9               	addwf	fsr2l,f,c
  1311   000A66  0E01               	movlw	high (_movement_list+65534)
  1312   000A68  22DA               	addwfc	fsr2h,f,c
  1313   000A6A  CFDE F018          	movff	postinc2,TimedfullSpeedAhead@time
  1314   000A6E  CFDD F019          	movff	postdec2,TimedfullSpeedAhead@time+1
  1315   000A72  EC3E  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1316   000A76                     
  1317                           ;dc_motor.c: 455:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1318   000A76  0E11               	movlw	17
  1319   000A78  6E23               	movwf	(??_return_back+1)^0,c
  1320   000A7A  0E3C               	movlw	60
  1321   000A7C  6E22               	movwf	??_return_back^0,c
  1322   000A7E  0ECB               	movlw	203
  1323   000A80                     u2497:
  1324   000A80  2EE8               	decfsz	wreg,f,c
  1325   000A82  D7FE               	bra	u2497
  1326   000A84  2E22               	decfsz	??_return_back^0,f,c
  1327   000A86  D7FC               	bra	u2497
  1328   000A88  2E23               	decfsz	(??_return_back+1)^0,f,c
  1329   000A8A  D7FA               	bra	u2497
  1330   000A8C  F000               	nop	
  1331   000A8E                     
  1332                           ;dc_motor.c: 456:             TimedfullSpeedAhead(motorL, motorR, 11);
  1333   000A8E  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1334   000A92  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1335   000A96  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1336   000A9A  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1337   000A9E  0E00               	movlw	0
  1338   000AA0  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1339   000AA2  0E0B               	movlw	11
  1340   000AA4  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1341   000AA6  EC3E  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1342   000AAA                     
  1343                           ;dc_motor.c: 457:             moveBack(motorL, motorR, 11);
  1344   000AAA  C01E  F014         	movff	return_back@motorL,moveBack@mL
  1345   000AAE  C01F  F015         	movff	return_back@motorL+1,moveBack@mL+1
  1346   000AB2  C020  F016         	movff	return_back@motorR,moveBack@mR
  1347   000AB6  C021  F017         	movff	return_back@motorR+1,moveBack@mR+1
  1348   000ABA  0E00               	movlw	0
  1349   000ABC  6E19               	movwf	(moveBack@time+1)^0,c
  1350   000ABE  0E0B               	movlw	11
  1351   000AC0  6E18               	movwf	moveBack@time^0,c
  1352   000AC2  EC04  F00D         	call	_moveBack	;wreg free
  1353   000AC6  EF65  F005         	goto	l2988
  1354   000ACA                     l305:
  1355   000ACA                     l2988:
  1356                           
  1357                           ;dc_motor.c: 459:         stop(motorL,motorR);
  1358   000ACA  C01E  F014         	movff	return_back@motorL,stop@mL
  1359   000ACE  C01F  F015         	movff	return_back@motorL+1,stop@mL+1
  1360   000AD2  C020  F016         	movff	return_back@motorR,stop@mR
  1361   000AD6  C021  F017         	movff	return_back@motorR+1,stop@mR+1
  1362   000ADA  ECE4  F00E         	call	_stop	;wreg free
  1363   000ADE                     
  1364                           ;dc_motor.c: 460:         index -= 1;
  1365   000ADE  0653               	decf	_index^0,f,c
  1366   000AE0  A0D8               	btfss	status,0,c
  1367   000AE2  0654               	decf	(_index+1)^0,f,c
  1368   000AE4                     l300:
  1369                           
  1370                           ;dc_motor.c: 447:     while (index > 0){
  1371   000AE4  BE54               	btfsc	(_index+1)^0,7,c
  1372   000AE6  EF7F  F005         	goto	u2060
  1373   000AEA  5054               	movf	(_index+1)^0,w,c
  1374   000AEC  E106               	bnz	u2061
  1375   000AEE  0453               	decf	_index^0,w,c
  1376   000AF0  B0D8               	btfsc	status,0,c
  1377   000AF2  EF7D  F005         	goto	u2061
  1378   000AF6  EF7F  F005         	goto	u2060
  1379   000AFA                     u2061:
  1380   000AFA  EF8D  F004         	goto	l2962
  1381   000AFE                     u2060:
  1382   000AFE                     
  1383                           ;dc_motor.c: 462:     if (index == 0){state = 2;}
  1384   000AFE  5053               	movf	_index^0,w,c
  1385   000B00  1054               	iorwf	(_index+1)^0,w,c
  1386   000B02  A4D8               	btfss	status,2,c
  1387   000B04  EF86  F005         	goto	u2071
  1388   000B08  EF88  F005         	goto	u2070
  1389   000B0C                     u2071:
  1390   000B0C  EF8C  F005         	goto	l313
  1391   000B10                     u2070:
  1392   000B10  0E00               	movlw	0
  1393   000B12  6E52               	movwf	(_state+1)^0,c
  1394   000B14  0E02               	movlw	2
  1395   000B16  6E51               	movwf	_state^0,c
  1396   000B18                     l313:
  1397   000B18  0012               	return		;funcret
  1398   000B1A                     __end_of_return_back:
  1399                           	callstack 0
  1400                           
  1401 ;; *************** function _initDCmotorsPWM *****************
  1402 ;; Defined at:
  1403 ;;		line 9 in file "dc_motor.c"
  1404 ;; Parameters:    Size  Location     Type
  1405 ;;  PWMperiod       2    0[COMRAM] int 
  1406 ;; Auto vars:     Size  Location     Type
  1407 ;;		None
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, status,2
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1420 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1421 ;;Total ram usage:        2 bytes
  1422 ;; Hardware stack levels used: 1
  1423 ;; Hardware stack levels required when called: 2
  1424 ;; This function calls:
  1425 ;;		Nothing
  1426 ;; This function is called by:
  1427 ;;		_main
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text2
  1432   001978                     __ptext2:
  1433                           	callstack 0
  1434   001978                     _initDCmotorsPWM:
  1435                           	callstack 28
  1436   001978                     
  1437                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1438   001978  9485               	bcf	133,2,c	;volatile
  1439                           
  1440                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1441   00197A  9E83               	bcf	131,7,c	;volatile
  1442                           
  1443                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1444   00197C  9C87               	bcf	135,6,c	;volatile
  1445                           
  1446                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1447   00197E  9885               	bcf	133,4,c	;volatile
  1448                           
  1449                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1450   001980  947D               	bcf	125,2,c	;volatile
  1451                           
  1452                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1453   001982  9E7B               	bcf	123,7,c	;volatile
  1454                           
  1455                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1456   001984  9C7F               	bcf	127,6,c	;volatile
  1457                           
  1458                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1459   001986  987D               	bcf	125,4,c	;volatile
  1460   001988                     
  1461                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1462   001988  0E05               	movlw	5
  1463   00198A  010E               	movlb	14	; () banked
  1464   00198C  6F74               	movwf	116,b	;volatile
  1465                           
  1466                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1467   00198E  0E06               	movlw	6
  1468   001990  6F76               	movwf	118,b	;volatile
  1469                           
  1470                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1471   001992  0E07               	movlw	7
  1472   001994  6F69               	movwf	105,b	;volatile
  1473                           
  1474                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1475   001996  0E08               	movlw	8
  1476   001998  6F88               	movwf	136,b	;volatile
  1477                           
  1478                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1479   00199A  50BD               	movf	189,w,c	;volatile
  1480   00199C  0B8F               	andlw	-113
  1481   00199E  0940               	iorlw	64
  1482   0019A0  6EBD               	movwf	189,c	;volatile
  1483                           
  1484                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1485   0019A2  0EE0               	movlw	-32
  1486   0019A4  16BE               	andwf	190,f,c	;volatile
  1487                           
  1488                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1489   0019A6  50BF               	movf	191,w,c	;volatile
  1490   0019A8  0BF0               	andlw	-16
  1491   0019AA  0901               	iorlw	1
  1492   0019AC  6EBF               	movwf	191,c	;volatile
  1493                           
  1494                           ;dc_motor.c: 34:     T2PR=99;
  1495   0019AE  0E63               	movlw	99
  1496   0019B0  6EBC               	movwf	188,c	;volatile
  1497   0019B2                     
  1498                           ; BSR set to: 14
  1499                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1500   0019B2  8EBD               	bsf	189,7,c	;volatile
  1501                           
  1502                           ;dc_motor.c: 39:     CCPR1H=0;
  1503   0019B4  0E00               	movlw	0
  1504   0019B6  6EAA               	movwf	170,c	;volatile
  1505                           
  1506                           ;dc_motor.c: 40:     CCPR2H=0;
  1507   0019B8  0E00               	movlw	0
  1508   0019BA  6EA6               	movwf	166,c	;volatile
  1509                           
  1510                           ;dc_motor.c: 41:     CCPR3H=0;
  1511   0019BC  0E00               	movlw	0
  1512   0019BE  010F               	movlb	15	; () banked
  1513   0019C0  6F25               	movwf	37,b	;volatile
  1514                           
  1515                           ;dc_motor.c: 42:     CCPR4H=0;
  1516   0019C2  0E00               	movlw	0
  1517   0019C4  6F21               	movwf	33,b	;volatile
  1518                           
  1519                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1520   0019C6  0EFC               	movlw	-4
  1521   0019C8  16AD               	andwf	173,f,c	;volatile
  1522                           
  1523                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1524   0019CA  0EF3               	movlw	-13
  1525   0019CC  16AD               	andwf	173,f,c	;volatile
  1526                           
  1527                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1528   0019CE  0ECF               	movlw	-49
  1529   0019D0  16AD               	andwf	173,f,c	;volatile
  1530                           
  1531                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1532   0019D2  0E3F               	movlw	-193
  1533   0019D4  16AD               	andwf	173,f,c	;volatile
  1534   0019D6                     
  1535                           ; BSR set to: 15
  1536                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1537   0019D6  88AB               	bsf	171,4,c	;volatile
  1538                           
  1539                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1540   0019D8  50AB               	movf	171,w,c	;volatile
  1541   0019DA  0BF0               	andlw	-16
  1542   0019DC  090C               	iorlw	12
  1543   0019DE  6EAB               	movwf	171,c	;volatile
  1544   0019E0                     
  1545                           ; BSR set to: 15
  1546                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1547   0019E0  8EAB               	bsf	171,7,c	;volatile
  1548   0019E2                     
  1549                           ; BSR set to: 15
  1550                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1551   0019E2  88A7               	bsf	167,4,c	;volatile
  1552                           
  1553                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1554   0019E4  50A7               	movf	167,w,c	;volatile
  1555   0019E6  0BF0               	andlw	-16
  1556   0019E8  090C               	iorlw	12
  1557   0019EA  6EA7               	movwf	167,c	;volatile
  1558   0019EC                     
  1559                           ; BSR set to: 15
  1560                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1561   0019EC  8EA7               	bsf	167,7,c	;volatile
  1562   0019EE                     
  1563                           ; BSR set to: 15
  1564                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1565   0019EE  8926               	bsf	38,4,b	;volatile
  1566                           
  1567                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1568   0019F0  5126               	movf	38,w,b	;volatile
  1569   0019F2  0BF0               	andlw	-16
  1570   0019F4  090C               	iorlw	12
  1571   0019F6  6F26               	movwf	38,b	;volatile
  1572   0019F8                     
  1573                           ; BSR set to: 15
  1574                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1575   0019F8  8F26               	bsf	38,7,b	;volatile
  1576   0019FA                     
  1577                           ; BSR set to: 15
  1578                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1579   0019FA  8922               	bsf	34,4,b	;volatile
  1580                           
  1581                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1582   0019FC  5122               	movf	34,w,b	;volatile
  1583   0019FE  0BF0               	andlw	-16
  1584   001A00  090C               	iorlw	12
  1585   001A02  6F22               	movwf	34,b	;volatile
  1586   001A04                     
  1587                           ; BSR set to: 15
  1588                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1589   001A04  8F22               	bsf	34,7,b	;volatile
  1590   001A06                     
  1591                           ; BSR set to: 15
  1592   001A06  0012               	return		;funcret
  1593   001A08                     __end_of_initDCmotorsPWM:
  1594                           	callstack 0
  1595                           
  1596 ;; *************** function _get_wall_presence *****************
  1597 ;; Defined at:
  1598 ;;		line 242 in file "color.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  clear2          2   17[COMRAM] unsigned int 
  1603 ;;  clear1          2   15[COMRAM] unsigned int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  2   11[COMRAM] unsigned int 
  1606 ;; Registers used:
  1607 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1613 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1614 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1615 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1616 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1617 ;;Total ram usage:        8 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 5
  1620 ;; This function calls:
  1621 ;;		___wmul
  1622 ;;		_color_read_Clear
  1623 ;;		_set_led_color
  1624 ;; This function is called by:
  1625 ;;		_main
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           	psect	text3
  1630   001842                     __ptext3:
  1631                           	callstack 0
  1632   001842                     _get_wall_presence:
  1633                           	callstack 25
  1634   001842                     
  1635                           ;color.c: 243:     set_led_color(0b000);
  1636   001842  0E00               	movlw	0
  1637   001844  6E02               	movwf	(set_led_color@color+1)^0,c
  1638   001846  0E00               	movlw	0
  1639   001848  6E01               	movwf	set_led_color@color^0,c
  1640   00184A  EC2D  F00F         	call	_set_led_color	;wreg free
  1641   00184E                     
  1642                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1643   00184E  0E12               	movlw	18
  1644   001850  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1645   001852  0EDC               	movlw	220
  1646   001854  6E0E               	movwf	??_get_wall_presence^0,c
  1647   001856  0E60               	movlw	96
  1648   001858                     u2507:
  1649   001858  2EE8               	decfsz	wreg,f,c
  1650   00185A  D7FE               	bra	u2507
  1651   00185C  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1652   00185E  D7FC               	bra	u2507
  1653   001860  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1654   001862  D7FA               	bra	u2507
  1655   001864                     
  1656                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1657   001864  EC94  F00E         	call	_color_read_Clear	;wreg free
  1658   001868  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1659   00186C  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1660   001870                     
  1661                           ;color.c: 246:     set_led_color(0b111);
  1662   001870  0E00               	movlw	0
  1663   001872  6E02               	movwf	(set_led_color@color+1)^0,c
  1664   001874  0E07               	movlw	7
  1665   001876  6E01               	movwf	set_led_color@color^0,c
  1666   001878  EC2D  F00F         	call	_set_led_color	;wreg free
  1667   00187C                     
  1668                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1669   00187C  0E12               	movlw	18
  1670   00187E  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1671   001880  0EDC               	movlw	220
  1672   001882  6E0E               	movwf	??_get_wall_presence^0,c
  1673   001884  0E60               	movlw	96
  1674   001886                     u2517:
  1675   001886  2EE8               	decfsz	wreg,f,c
  1676   001888  D7FE               	bra	u2517
  1677   00188A  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1678   00188C  D7FC               	bra	u2517
  1679   00188E  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1680   001890  D7FA               	bra	u2517
  1681                           
  1682                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1683   001892  EC94  F00E         	call	_color_read_Clear	;wreg free
  1684   001896  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1685   00189A  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1686   00189E                     
  1687                           ;color.c: 249:     set_led_color(0b000);
  1688   00189E  0E00               	movlw	0
  1689   0018A0  6E02               	movwf	(set_led_color@color+1)^0,c
  1690   0018A2  0E00               	movlw	0
  1691   0018A4  6E01               	movwf	set_led_color@color^0,c
  1692   0018A6  EC2D  F00F         	call	_set_led_color	;wreg free
  1693   0018AA                     
  1694                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1695   0018AA  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1696   0018AE  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1697   0018B2  C059  F003         	movff	_wall_coef,___wmul@multiplicand
  1698   0018B6  C05A  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1699   0018BA  EC99  F00F         	call	___wmul	;wreg free
  1700   0018BE  5001               	movf	?___wmul^0,w,c
  1701   0018C0  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1702   0018C2  5002               	movf	(?___wmul+1)^0,w,c
  1703   0018C4  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1704   0018C6  B0D8               	btfsc	status,0,c
  1705   0018C8  EF68  F00C         	goto	u1811
  1706   0018CC  EF6B  F00C         	goto	u1810
  1707   0018D0                     u1811:
  1708   0018D0  0E01               	movlw	1
  1709   0018D2  EF6C  F00C         	goto	u1820
  1710   0018D6                     u1810:
  1711   0018D6  0E00               	movlw	0
  1712   0018D8                     u1820:
  1713   0018D8  6E0C               	movwf	?_get_wall_presence^0,c
  1714   0018DA  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1715   0018DC  0012               	return		;funcret
  1716   0018DE                     __end_of_get_wall_presence:
  1717                           	callstack 0
  1718                           
  1719 ;; *************** function _get_state *****************
  1720 ;; Defined at:
  1721 ;;		line 430 in file "dc_motor.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;		None
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;		None
  1726 ;; Return value:  Size  Location     Type
  1727 ;;                  2    0[COMRAM] int 
  1728 ;; Registers used:
  1729 ;;		None
  1730 ;; Tracked objects:
  1731 ;;		On entry : 0/0
  1732 ;;		On exit  : 0/0
  1733 ;;		Unchanged: 0/0
  1734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1735 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1739 ;;Total ram usage:        2 bytes
  1740 ;; Hardware stack levels used: 1
  1741 ;; Hardware stack levels required when called: 2
  1742 ;; This function calls:
  1743 ;;		Nothing
  1744 ;; This function is called by:
  1745 ;;		_main
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text4
  1750   001FC8                     __ptext4:
  1751                           	callstack 0
  1752   001FC8                     _get_state:
  1753                           	callstack 28
  1754   001FC8                     
  1755                           ;dc_motor.c: 432:     return state;
  1756   001FC8  C051  F001         	movff	_state,?_get_state
  1757   001FCC  C052  F002         	movff	_state+1,?_get_state+1
  1758   001FD0  0012               	return		;funcret
  1759   001FD2                     __end_of_get_state:
  1760                           	callstack 0
  1761                           
  1762 ;; *************** function _get_color_code *****************
  1763 ;; Defined at:
  1764 ;;		line 176 in file "color.c"
  1765 ;; Parameters:    Size  Location     Type
  1766 ;;		None
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  value           2   28[BANK0 ] unsigned int 
  1769 ;;  i               2   30[BANK0 ] unsigned int 
  1770 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1771 ;;  min_index       2   26[BANK0 ] unsigned int 
  1772 ;;  min_value       2   24[BANK0 ] unsigned int 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  2   52[COMRAM] unsigned int 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1784 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1785 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1786 ;;Total ram usage:       48 bytes
  1787 ;; Hardware stack levels used: 1
  1788 ;; Hardware stack levels required when called: 5
  1789 ;; This function calls:
  1790 ;;		___lldiv
  1791 ;;		___lmul
  1792 ;;		___wmul
  1793 ;;		_color_read_Blue
  1794 ;;		_color_read_Green
  1795 ;;		_color_read_Red
  1796 ;;		_get_color_distance
  1797 ;;		_set_led_color
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text5
  1804   000578                     __ptext5:
  1805                           	callstack 0
  1806   000578                     _get_color_code:
  1807                           	callstack 25
  1808   000578                     
  1809                           ;color.c: 179:     set_led_color(0b100);
  1810   000578  0E00               	movlw	0
  1811   00057A  6E02               	movwf	(set_led_color@color+1)^0,c
  1812   00057C  0E04               	movlw	4
  1813   00057E  6E01               	movwf	set_led_color@color^0,c
  1814   000580  EC2D  F00F         	call	_set_led_color	;wreg free
  1815   000584                     
  1816                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1817   000584  0E12               	movlw	18
  1818   000586  6E38               	movwf	(??_get_color_code+1)^0,c
  1819   000588  0EDC               	movlw	220
  1820   00058A  6E37               	movwf	??_get_color_code^0,c
  1821   00058C  0E60               	movlw	96
  1822   00058E                     u2527:
  1823   00058E  2EE8               	decfsz	wreg,f,c
  1824   000590  D7FE               	bra	u2527
  1825   000592  2E37               	decfsz	??_get_color_code^0,f,c
  1826   000594  D7FC               	bra	u2527
  1827   000596  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1828   000598  D7FA               	bra	u2527
  1829   00059A                     
  1830                           ;color.c: 181:     RGB.R = color_read_Red();
  1831   00059A  EC44  F00E         	call	_color_read_Red	;wreg free
  1832   00059E  C005  F0EC         	movff	?_color_read_Red,_RGB
  1833   0005A2  C006  F0ED         	movff	?_color_read_Red+1,_RGB+1
  1834   0005A6  0100               	movlb	0	; () banked
  1835   0005A8  6BEE               	clrf	(_RGB+2)& (0+255),b
  1836   0005AA  6BEF               	clrf	(_RGB+3)& (0+255),b
  1837   0005AC                     
  1838                           ; BSR set to: 0
  1839                           ;color.c: 182:     set_led_color(0b010);
  1840   0005AC  0E00               	movlw	0
  1841   0005AE  6E02               	movwf	(set_led_color@color+1)^0,c
  1842   0005B0  0E02               	movlw	2
  1843   0005B2  6E01               	movwf	set_led_color@color^0,c
  1844   0005B4  EC2D  F00F         	call	_set_led_color	;wreg free
  1845   0005B8                     
  1846                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1847   0005B8  0E12               	movlw	18
  1848   0005BA  6E38               	movwf	(??_get_color_code+1)^0,c
  1849   0005BC  0EDC               	movlw	220
  1850   0005BE  6E37               	movwf	??_get_color_code^0,c
  1851   0005C0  0E60               	movlw	96
  1852   0005C2                     u2537:
  1853   0005C2  2EE8               	decfsz	wreg,f,c
  1854   0005C4  D7FE               	bra	u2537
  1855   0005C6  2E37               	decfsz	??_get_color_code^0,f,c
  1856   0005C8  D7FC               	bra	u2537
  1857   0005CA  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1858   0005CC  D7FA               	bra	u2537
  1859                           
  1860                           ;color.c: 184:     RGB.G = color_read_Green();
  1861   0005CE  EC6C  F00E         	call	_color_read_Green	;wreg free
  1862   0005D2  C005  F0F0         	movff	?_color_read_Green,_RGB+4
  1863   0005D6  C006  F0F1         	movff	?_color_read_Green+1,_RGB+5
  1864   0005DA  0100               	movlb	0	; () banked
  1865   0005DC  6BF2               	clrf	(_RGB+6)& (0+255),b
  1866   0005DE  6BF3               	clrf	(_RGB+7)& (0+255),b
  1867   0005E0                     
  1868                           ; BSR set to: 0
  1869                           ;color.c: 185:     set_led_color(0b001);
  1870   0005E0  0E00               	movlw	0
  1871   0005E2  6E02               	movwf	(set_led_color@color+1)^0,c
  1872   0005E4  0E01               	movlw	1
  1873   0005E6  6E01               	movwf	set_led_color@color^0,c
  1874   0005E8  EC2D  F00F         	call	_set_led_color	;wreg free
  1875   0005EC                     
  1876                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1877   0005EC  0E12               	movlw	18
  1878   0005EE  6E38               	movwf	(??_get_color_code+1)^0,c
  1879   0005F0  0EDC               	movlw	220
  1880   0005F2  6E37               	movwf	??_get_color_code^0,c
  1881   0005F4  0E60               	movlw	96
  1882   0005F6                     u2547:
  1883   0005F6  2EE8               	decfsz	wreg,f,c
  1884   0005F8  D7FE               	bra	u2547
  1885   0005FA  2E37               	decfsz	??_get_color_code^0,f,c
  1886   0005FC  D7FC               	bra	u2547
  1887   0005FE  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1888   000600  D7FA               	bra	u2547
  1889   000602                     
  1890                           ;color.c: 187:     RGB.B = color_read_Blue();
  1891   000602  ECBC  F00E         	call	_color_read_Blue	;wreg free
  1892   000606  C005  F0F4         	movff	?_color_read_Blue,_RGB+8
  1893   00060A  C006  F0F5         	movff	?_color_read_Blue+1,_RGB+9
  1894   00060E  0100               	movlb	0	; () banked
  1895   000610  6BF6               	clrf	(_RGB+10)& (0+255),b
  1896   000612  6BF7               	clrf	(_RGB+11)& (0+255),b
  1897   000614                     
  1898                           ; BSR set to: 0
  1899                           ;color.c: 188:     set_led_color(0b000);
  1900   000614  0E00               	movlw	0
  1901   000616  6E02               	movwf	(set_led_color@color+1)^0,c
  1902   000618  0E00               	movlw	0
  1903   00061A  6E01               	movwf	set_led_color@color^0,c
  1904   00061C  EC2D  F00F         	call	_set_led_color	;wreg free
  1905   000620                     
  1906                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1907   000620  0100               	movlb	0	; () banked
  1908   000622  5160               	movf	_Black_setup& (0+255),w,b
  1909   000624  5DEC               	subwf	_RGB& (0+255),w,b
  1910   000626  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1911   000628  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  1912   00062A  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1913   00062C  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  1914   00062E  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1915   000630  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  1916   000632  B0D8               	btfsc	status,0,c
  1917   000634  EF1E  F003         	goto	u1711
  1918   000638  EF20  F003         	goto	u1710
  1919   00063C                     u1711:
  1920   00063C  EF2A  F003         	goto	l2746
  1921   000640                     u1710:
  1922   000640                     
  1923                           ; BSR set to: 0
  1924   000640  0E00               	movlw	0
  1925   000642  6FCC               	movwf	_get_color_code$458& (0+255),b
  1926   000644  0E00               	movlw	0
  1927   000646  6FCD               	movwf	(_get_color_code$458+1)& (0+255),b
  1928   000648  0E00               	movlw	0
  1929   00064A  6FCE               	movwf	(_get_color_code$458+2)& (0+255),b
  1930   00064C  0E00               	movlw	0
  1931   00064E  6FCF               	movwf	(_get_color_code$458+3)& (0+255),b
  1932   000650  EF5F  F003         	goto	l2748
  1933   000654                     l2746:
  1934                           
  1935                           ; BSR set to: 0
  1936   000654  5160               	movf	_Black_setup& (0+255),w,b
  1937   000656  5DEC               	subwf	_RGB& (0+255),w,b
  1938   000658  6E01               	movwf	___lmul@multiplier^0,c
  1939   00065A  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1940   00065C  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  1941   00065E  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1942   000660  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1943   000662  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  1944   000664  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1945   000666  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1946   000668  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  1947   00066A  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1948   00066C  0E64               	movlw	100
  1949   00066E  6E05               	movwf	___lmul@multiplicand^0,c
  1950   000670  0E00               	movlw	0
  1951   000672  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1952   000674  0E00               	movlw	0
  1953   000676  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1954   000678  0E00               	movlw	0
  1955   00067A  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1956   00067C  ECB2  F00D         	call	___lmul	;wreg free
  1957   000680  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1958   000684  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1959   000688  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1960   00068C  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1961   000690  0100               	movlb	0	; () banked
  1962   000692  5160               	movf	_Black_setup& (0+255),w,b
  1963   000694  5D6C               	subwf	_White_setup& (0+255),w,b
  1964   000696  6E11               	movwf	___lldiv@divisor^0,c
  1965   000698  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1966   00069A  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  1967   00069C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1968   00069E  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1969   0006A0  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  1970   0006A2  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1971   0006A4  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1972   0006A6  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  1973   0006A8  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1974   0006AA  ECCF  F00B         	call	___lldiv	;wreg free
  1975   0006AE  C00D  F0CC         	movff	?___lldiv,_get_color_code$458
  1976   0006B2  C00E  F0CD         	movff	?___lldiv+1,_get_color_code$458+1
  1977   0006B6  C00F  F0CE         	movff	?___lldiv+2,_get_color_code$458+2
  1978   0006BA  C010  F0CF         	movff	?___lldiv+3,_get_color_code$458+3
  1979   0006BE                     l2748:
  1980   0006BE  C0CC  F0E0         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  1981   0006C2  C0CD  F0E1         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  1982   0006C6  C0CE  F0E2         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  1983   0006CA  C0CF  F0E3         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  1984   0006CE                     
  1985                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  1986   0006CE  0100               	movlb	0	; () banked
  1987   0006D0  5164               	movf	(_Black_setup+4)& (0+255),w,b
  1988   0006D2  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  1989   0006D4  5165               	movf	(_Black_setup+5)& (0+255),w,b
  1990   0006D6  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  1991   0006D8  5166               	movf	(_Black_setup+6)& (0+255),w,b
  1992   0006DA  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  1993   0006DC  5167               	movf	(_Black_setup+7)& (0+255),w,b
  1994   0006DE  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  1995   0006E0  B0D8               	btfsc	status,0,c
  1996   0006E2  EF75  F003         	goto	u1721
  1997   0006E6  EF77  F003         	goto	u1720
  1998   0006EA                     u1721:
  1999   0006EA  EF81  F003         	goto	l2754
  2000   0006EE                     u1720:
  2001   0006EE                     
  2002                           ; BSR set to: 0
  2003   0006EE  0E00               	movlw	0
  2004   0006F0  6FD0               	movwf	_get_color_code$459& (0+255),b
  2005   0006F2  0E00               	movlw	0
  2006   0006F4  6FD1               	movwf	(_get_color_code$459+1)& (0+255),b
  2007   0006F6  0E00               	movlw	0
  2008   0006F8  6FD2               	movwf	(_get_color_code$459+2)& (0+255),b
  2009   0006FA  0E00               	movlw	0
  2010   0006FC  6FD3               	movwf	(_get_color_code$459+3)& (0+255),b
  2011   0006FE  EFB6  F003         	goto	l2756
  2012   000702                     l2754:
  2013                           
  2014                           ; BSR set to: 0
  2015   000702  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2016   000704  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  2017   000706  6E01               	movwf	___lmul@multiplier^0,c
  2018   000708  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2019   00070A  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  2020   00070C  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2021   00070E  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2022   000710  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  2023   000712  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2024   000714  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2025   000716  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  2026   000718  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2027   00071A  0E64               	movlw	100
  2028   00071C  6E05               	movwf	___lmul@multiplicand^0,c
  2029   00071E  0E00               	movlw	0
  2030   000720  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2031   000722  0E00               	movlw	0
  2032   000724  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2033   000726  0E00               	movlw	0
  2034   000728  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2035   00072A  ECB2  F00D         	call	___lmul	;wreg free
  2036   00072E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2037   000732  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2038   000736  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2039   00073A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2040   00073E  0100               	movlb	0	; () banked
  2041   000740  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2042   000742  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2043   000744  6E11               	movwf	___lldiv@divisor^0,c
  2044   000746  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2045   000748  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2046   00074A  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2047   00074C  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2048   00074E  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2049   000750  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2050   000752  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2051   000754  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2052   000756  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2053   000758  ECCF  F00B         	call	___lldiv	;wreg free
  2054   00075C  C00D  F0D0         	movff	?___lldiv,_get_color_code$459
  2055   000760  C00E  F0D1         	movff	?___lldiv+1,_get_color_code$459+1
  2056   000764  C00F  F0D2         	movff	?___lldiv+2,_get_color_code$459+2
  2057   000768  C010  F0D3         	movff	?___lldiv+3,_get_color_code$459+3
  2058   00076C                     l2756:
  2059   00076C  C0D0  F0E4         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  2060   000770  C0D1  F0E5         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  2061   000774  C0D2  F0E6         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  2062   000778  C0D3  F0E7         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  2063   00077C                     
  2064                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2065   00077C  0100               	movlb	0	; () banked
  2066   00077E  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2067   000780  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2068   000782  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2069   000784  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2070   000786  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2071   000788  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2072   00078A  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2073   00078C  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2074   00078E  B0D8               	btfsc	status,0,c
  2075   000790  EFCC  F003         	goto	u1731
  2076   000794  EFCE  F003         	goto	u1730
  2077   000798                     u1731:
  2078   000798  EFD8  F003         	goto	l2762
  2079   00079C                     u1730:
  2080   00079C                     
  2081                           ; BSR set to: 0
  2082   00079C  0E00               	movlw	0
  2083   00079E  6FD4               	movwf	_get_color_code$460& (0+255),b
  2084   0007A0  0E00               	movlw	0
  2085   0007A2  6FD5               	movwf	(_get_color_code$460+1)& (0+255),b
  2086   0007A4  0E00               	movlw	0
  2087   0007A6  6FD6               	movwf	(_get_color_code$460+2)& (0+255),b
  2088   0007A8  0E00               	movlw	0
  2089   0007AA  6FD7               	movwf	(_get_color_code$460+3)& (0+255),b
  2090   0007AC  EF0D  F004         	goto	l2764
  2091   0007B0                     l2762:
  2092                           
  2093                           ; BSR set to: 0
  2094   0007B0  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2095   0007B2  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2096   0007B4  6E01               	movwf	___lmul@multiplier^0,c
  2097   0007B6  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2098   0007B8  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2099   0007BA  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2100   0007BC  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2101   0007BE  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2102   0007C0  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2103   0007C2  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2104   0007C4  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2105   0007C6  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2106   0007C8  0E64               	movlw	100
  2107   0007CA  6E05               	movwf	___lmul@multiplicand^0,c
  2108   0007CC  0E00               	movlw	0
  2109   0007CE  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2110   0007D0  0E00               	movlw	0
  2111   0007D2  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2112   0007D4  0E00               	movlw	0
  2113   0007D6  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2114   0007D8  ECB2  F00D         	call	___lmul	;wreg free
  2115   0007DC  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2116   0007E0  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2117   0007E4  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2118   0007E8  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2119   0007EC  0100               	movlb	0	; () banked
  2120   0007EE  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2121   0007F0  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2122   0007F2  6E11               	movwf	___lldiv@divisor^0,c
  2123   0007F4  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2124   0007F6  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2125   0007F8  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2126   0007FA  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2127   0007FC  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2128   0007FE  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2129   000800  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2130   000802  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2131   000804  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2132   000806  ECCF  F00B         	call	___lldiv	;wreg free
  2133   00080A  C00D  F0D4         	movff	?___lldiv,_get_color_code$460
  2134   00080E  C00E  F0D5         	movff	?___lldiv+1,_get_color_code$460+1
  2135   000812  C00F  F0D6         	movff	?___lldiv+2,_get_color_code$460+2
  2136   000816  C010  F0D7         	movff	?___lldiv+3,_get_color_code$460+3
  2137   00081A                     l2764:
  2138   00081A  C0D4  F0E8         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  2139   00081E  C0D5  F0E9         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  2140   000822  C0D6  F0EA         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  2141   000826  C0D7  F0EB         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  2142   00082A                     
  2143                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2144   00082A  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2145   00082E  EE00  F007         	lfsr	0,get_color_distance@color1
  2146   000832  0E0B               	movlw	11
  2147   000834                     u1741:
  2148   000834  CFDB FFEB          	movff	plusw2,plusw0
  2149   000838  06E8               	decf	wreg,f,c
  2150   00083A  E2FC               	bc	u1741
  2151   00083C  EE21  F000         	lfsr	2,_Color_rules
  2152   000840  EE00  F013         	lfsr	0,get_color_distance@color2
  2153   000844  0E0B               	movlw	11
  2154   000846                     u1751:
  2155   000846  CFDB FFEB          	movff	plusw2,plusw0
  2156   00084A  06E8               	decf	wreg,f,c
  2157   00084C  E2FC               	bc	u1751
  2158   00084E  EC56  F006         	call	_get_color_distance	;wreg free
  2159   000852  C007  F0D8         	movff	?_get_color_distance,get_color_code@min_value
  2160   000856  C008  F0D9         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2161   00085A                     
  2162                           ;color.c: 196:     unsigned int min_index = 0;
  2163   00085A  0E00               	movlw	0
  2164   00085C  0100               	movlb	0	; () banked
  2165   00085E  6FDB               	movwf	(get_color_code@min_index+1)& (0+255),b
  2166   000860  0E00               	movlw	0
  2167   000862  6FDA               	movwf	get_color_code@min_index& (0+255),b
  2168   000864                     
  2169                           ; BSR set to: 0
  2170                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  2171   000864  0E00               	movlw	0
  2172   000866  6FDF               	movwf	(get_color_code@i+1)& (0+255),b
  2173   000868  0E01               	movlw	1
  2174   00086A  6FDE               	movwf	get_color_code@i& (0+255),b
  2175   00086C                     l2776:
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2179   00086C  C0DE  F001         	movff	get_color_code@i,___wmul@multiplier
  2180   000870  C0DF  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  2181   000874  0E00               	movlw	0
  2182   000876  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2183   000878  0E0C               	movlw	12
  2184   00087A  6E03               	movwf	___wmul@multiplicand^0,c
  2185   00087C  EC99  F00F         	call	___wmul	;wreg free
  2186   000880  0E00               	movlw	low _Color_rules
  2187   000882  2401               	addwf	?___wmul^0,w,c
  2188   000884  6ED9               	movwf	fsr2l,c
  2189   000886  0E01               	movlw	high _Color_rules
  2190   000888  2002               	addwfc	(?___wmul+1)^0,w,c
  2191   00088A  6EDA               	movwf	fsr2h,c
  2192   00088C  EE10  F0C0         	lfsr	1,_get_color_code$2441
  2193   000890  0E0B               	movlw	11
  2194   000892                     u1761:
  2195   000892  CFDB FFE3          	movff	plusw2,plusw1
  2196   000896  06E8               	decf	wreg,f,c
  2197   000898  E2FC               	bc	u1761
  2198   00089A                     
  2199                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2200   00089A  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2201   00089E  EE00  F007         	lfsr	0,get_color_distance@color1
  2202   0008A2  0E0B               	movlw	11
  2203   0008A4                     u1771:
  2204   0008A4  CFDB FFEB          	movff	plusw2,plusw0
  2205   0008A8  06E8               	decf	wreg,f,c
  2206   0008AA  E2FC               	bc	u1771
  2207   0008AC  EE20  F0C0         	lfsr	2,_get_color_code$2441
  2208   0008B0  EE00  F013         	lfsr	0,get_color_distance@color2
  2209   0008B4  0E0B               	movlw	11
  2210   0008B6                     u1781:
  2211   0008B6  CFDB FFEB          	movff	plusw2,plusw0
  2212   0008BA  06E8               	decf	wreg,f,c
  2213   0008BC  E2FC               	bc	u1781
  2214   0008BE  EC56  F006         	call	_get_color_distance	;wreg free
  2215   0008C2  C007  F0DC         	movff	?_get_color_distance,get_color_code@value
  2216   0008C6  C008  F0DD         	movff	?_get_color_distance+1,get_color_code@value+1
  2217   0008CA                     
  2218                           ;color.c: 199:         if(value < min_value){
  2219   0008CA  0100               	movlb	0	; () banked
  2220   0008CC  51D8               	movf	get_color_code@min_value& (0+255),w,b
  2221   0008CE  5DDC               	subwf	get_color_code@value& (0+255),w,b
  2222   0008D0  51D9               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2223   0008D2  59DD               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2224   0008D4  B0D8               	btfsc	status,0,c
  2225   0008D6  EF6F  F004         	goto	u1791
  2226   0008DA  EF71  F004         	goto	u1790
  2227   0008DE                     u1791:
  2228   0008DE  EF79  F004         	goto	l2784
  2229   0008E2                     u1790:
  2230   0008E2                     
  2231                           ; BSR set to: 0
  2232                           ;color.c: 200:             min_index = i;
  2233   0008E2  C0DE  F0DA         	movff	get_color_code@i,get_color_code@min_index
  2234   0008E6  C0DF  F0DB         	movff	get_color_code@i+1,get_color_code@min_index+1
  2235                           
  2236                           ;color.c: 201:             min_value = value;
  2237   0008EA  C0DC  F0D8         	movff	get_color_code@value,get_color_code@min_value
  2238   0008EE  C0DD  F0D9         	movff	get_color_code@value+1,get_color_code@min_value+1
  2239   0008F2                     l2784:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;color.c: 203:     }
  2243   0008F2  4BDE               	infsnz	get_color_code@i& (0+255),f,b
  2244   0008F4  2BDF               	incf	(get_color_code@i+1)& (0+255),f,b
  2245   0008F6                     
  2246                           ; BSR set to: 0
  2247   0008F6  51DF               	movf	(get_color_code@i+1)& (0+255),w,b
  2248   0008F8  E109               	bnz	u1800
  2249   0008FA  0E09               	movlw	9
  2250   0008FC  5DDE               	subwf	get_color_code@i& (0+255),w,b
  2251   0008FE  A0D8               	btfss	status,0,c
  2252   000900  EF84  F004         	goto	u1801
  2253   000904  EF86  F004         	goto	u1800
  2254   000908                     u1801:
  2255   000908  EF36  F004         	goto	l2776
  2256   00090C                     u1800:
  2257   00090C                     
  2258                           ; BSR set to: 0
  2259                           ;color.c: 204:     return min_index;
  2260   00090C  C0DA  F035         	movff	get_color_code@min_index,?_get_color_code
  2261   000910  C0DB  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  2262   000914                     
  2263                           ; BSR set to: 0
  2264   000914  0012               	return		;funcret
  2265   000916                     __end_of_get_color_code:
  2266                           	callstack 0
  2267                           
  2268 ;; *************** function _get_color_distance *****************
  2269 ;; Defined at:
  2270 ;;		line 146 in file "color.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  color1         12    6[COMRAM] struct RGB_val
  2273 ;;  color2         12   18[COMRAM] struct RGB_val
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  B_offset        2   50[COMRAM] unsigned int 
  2276 ;;  G_offset        2   48[COMRAM] unsigned int 
  2277 ;;  R_offset        2   46[COMRAM] unsigned int 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2    6[COMRAM] unsigned int 
  2280 ;; Registers used:
  2281 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2287 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2288 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2289 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2290 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2291 ;;Total ram usage:       46 bytes
  2292 ;; Hardware stack levels used: 1
  2293 ;; Hardware stack levels required when called: 3
  2294 ;; This function calls:
  2295 ;;		___wmul
  2296 ;; This function is called by:
  2297 ;;		_get_color_code
  2298 ;; This function uses a non-reentrant model
  2299 ;;
  2300                           
  2301                           	psect	text6
  2302   000CAC                     __ptext6:
  2303                           	callstack 0
  2304   000CAC                     _get_color_distance:
  2305                           	callstack 26
  2306   000CAC                     
  2307                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2308   000CAC  5013               	movf	get_color_distance@color2^0,w,c
  2309   000CAE  5C07               	subwf	get_color_distance@color1^0,w,c
  2310   000CB0  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2311   000CB2  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2312   000CB4  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2313   000CB6  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2314   000CB8  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2315   000CBA  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2316   000CBC  B0D8               	btfsc	status,0,c
  2317   000CBE  EF63  F006         	goto	u1371
  2318   000CC2  EF65  F006         	goto	u1370
  2319   000CC6                     u1371:
  2320   000CC6  EF73  F006         	goto	l2390
  2321   000CCA                     u1370:
  2322   000CCA  5007               	movf	get_color_distance@color1^0,w,c
  2323   000CCC  5C13               	subwf	get_color_distance@color2^0,w,c
  2324   000CCE  6E23               	movwf	_get_color_distance$417^0,c
  2325   000CD0  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2326   000CD2  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2327   000CD4  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2328   000CD6  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2329   000CD8  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2330   000CDA  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2331   000CDC  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2332   000CDE  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2333   000CE0  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2334   000CE2  EF7F  F006         	goto	l2392
  2335   000CE6                     l2390:
  2336   000CE6  5013               	movf	get_color_distance@color2^0,w,c
  2337   000CE8  5C07               	subwf	get_color_distance@color1^0,w,c
  2338   000CEA  6E23               	movwf	_get_color_distance$417^0,c
  2339   000CEC  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2340   000CEE  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2341   000CF0  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2342   000CF2  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2343   000CF4  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2344   000CF6  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2345   000CF8  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2346   000CFA  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2347   000CFC  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2348   000CFE                     l2392:
  2349   000CFE  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2350   000D02  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2351                           
  2352                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2353   000D06  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2354   000D08  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2355   000D0A  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2356   000D0C  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2357   000D0E  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2358   000D10  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2359   000D12  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2360   000D14  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2361   000D16  B0D8               	btfsc	status,0,c
  2362   000D18  EF90  F006         	goto	u1381
  2363   000D1C  EF92  F006         	goto	u1380
  2364   000D20                     u1381:
  2365   000D20  EFA0  F006         	goto	l2396
  2366   000D24                     u1380:
  2367   000D24  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2368   000D26  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2369   000D28  6E27               	movwf	_get_color_distance$419^0,c
  2370   000D2A  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2371   000D2C  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2372   000D2E  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2373   000D30  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2374   000D32  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2375   000D34  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2376   000D36  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2377   000D38  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2378   000D3A  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2379   000D3C  EFAC  F006         	goto	l2398
  2380   000D40                     l2396:
  2381   000D40  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2382   000D42  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2383   000D44  6E27               	movwf	_get_color_distance$419^0,c
  2384   000D46  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2385   000D48  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2386   000D4A  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2387   000D4C  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2388   000D4E  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2389   000D50  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2390   000D52  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2391   000D54  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2392   000D56  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2393   000D58                     l2398:
  2394   000D58  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2395   000D5C  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2396                           
  2397                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2398   000D60  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2399   000D62  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2400   000D64  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2401   000D66  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2402   000D68  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2403   000D6A  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2404   000D6C  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2405   000D6E  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2406   000D70  B0D8               	btfsc	status,0,c
  2407   000D72  EFBD  F006         	goto	u1391
  2408   000D76  EFBF  F006         	goto	u1390
  2409   000D7A                     u1391:
  2410   000D7A  EFCD  F006         	goto	l2402
  2411   000D7E                     u1390:
  2412   000D7E  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2413   000D80  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2414   000D82  6E2B               	movwf	_get_color_distance$421^0,c
  2415   000D84  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2416   000D86  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2417   000D88  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2418   000D8A  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2419   000D8C  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2420   000D8E  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2421   000D90  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2422   000D92  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2423   000D94  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2424   000D96  EFD9  F006         	goto	l2404
  2425   000D9A                     l2402:
  2426   000D9A  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2427   000D9C  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2428   000D9E  6E2B               	movwf	_get_color_distance$421^0,c
  2429   000DA0  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2430   000DA2  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2431   000DA4  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2432   000DA6  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2433   000DA8  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2434   000DAA  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2435   000DAC  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2436   000DAE  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2437   000DB0  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2438   000DB2                     l2404:
  2439   000DB2  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2440   000DB6  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2441   000DBA                     
  2442                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2443   000DBA  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2444   000DBE  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2445   000DC2  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2446   000DC6  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2447   000DCA  EC99  F00F         	call	___wmul	;wreg free
  2448   000DCE  C001  F01F         	movff	?___wmul,??_get_color_distance
  2449   000DD2  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2450   000DD6  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2451   000DDA  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2452   000DDE  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2453   000DE2  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2454   000DE6  EC99  F00F         	call	___wmul	;wreg free
  2455   000DEA  5001               	movf	?___wmul^0,w,c
  2456   000DEC  241F               	addwf	??_get_color_distance^0,w,c
  2457   000DEE  6E21               	movwf	(??_get_color_distance+2)^0,c
  2458   000DF0  5002               	movf	(?___wmul+1)^0,w,c
  2459   000DF2  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2460   000DF4  6E22               	movwf	(??_get_color_distance+3)^0,c
  2461   000DF6  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2462   000DFA  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2463   000DFE  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2464   000E02  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2465   000E06  EC99  F00F         	call	___wmul	;wreg free
  2466   000E0A  5001               	movf	?___wmul^0,w,c
  2467   000E0C  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2468   000E0E  6E07               	movwf	?_get_color_distance^0,c
  2469   000E10  5002               	movf	(?___wmul+1)^0,w,c
  2470   000E12  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2471   000E14  6E08               	movwf	(?_get_color_distance+1)^0,c
  2472   000E16  0012               	return		;funcret
  2473   000E18                     __end_of_get_color_distance:
  2474                           	callstack 0
  2475                           
  2476 ;; *************** function ___lmul *****************
  2477 ;; Defined at:
  2478 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  multiplier      4    0[COMRAM] unsigned long 
  2481 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  product         4    8[COMRAM] unsigned long 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  4    0[COMRAM] unsigned long 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2493 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2494 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2496 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2497 ;;Total ram usage:       12 bytes
  2498 ;; Hardware stack levels used: 1
  2499 ;; Hardware stack levels required when called: 2
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_get_color_code
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text7
  2508   001B64                     __ptext7:
  2509                           	callstack 0
  2510   001B64                     ___lmul:
  2511                           	callstack 27
  2512   001B64  0E00               	movlw	0
  2513   001B66  6E09               	movwf	___lmul@product^0,c
  2514   001B68  0E00               	movlw	0
  2515   001B6A  6E0A               	movwf	(___lmul@product+1)^0,c
  2516   001B6C  0E00               	movlw	0
  2517   001B6E  6E0B               	movwf	(___lmul@product+2)^0,c
  2518   001B70  0E00               	movlw	0
  2519   001B72  6E0C               	movwf	(___lmul@product+3)^0,c
  2520   001B74                     l2644:
  2521   001B74  A001               	btfss	___lmul@multiplier^0,0,c
  2522   001B76  EFBF  F00D         	goto	u1521
  2523   001B7A  EFC1  F00D         	goto	u1520
  2524   001B7E                     u1521:
  2525   001B7E  EFC9  F00D         	goto	l2648
  2526   001B82                     u1520:
  2527   001B82  5005               	movf	___lmul@multiplicand^0,w,c
  2528   001B84  2609               	addwf	___lmul@product^0,f,c
  2529   001B86  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2530   001B88  220A               	addwfc	(___lmul@product+1)^0,f,c
  2531   001B8A  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2532   001B8C  220B               	addwfc	(___lmul@product+2)^0,f,c
  2533   001B8E  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2534   001B90  220C               	addwfc	(___lmul@product+3)^0,f,c
  2535   001B92                     l2648:
  2536   001B92  90D8               	bcf	status,0,c
  2537   001B94  3605               	rlcf	___lmul@multiplicand^0,f,c
  2538   001B96  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2539   001B98  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2540   001B9A  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2541   001B9C  90D8               	bcf	status,0,c
  2542   001B9E  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2543   001BA0  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2544   001BA2  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2545   001BA4  3201               	rrcf	___lmul@multiplier^0,f,c
  2546   001BA6  5001               	movf	___lmul@multiplier^0,w,c
  2547   001BA8  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2548   001BAA  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2549   001BAC  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2550   001BAE  A4D8               	btfss	status,2,c
  2551   001BB0  EFDC  F00D         	goto	u1531
  2552   001BB4  EFDE  F00D         	goto	u1530
  2553   001BB8                     u1531:
  2554   001BB8  EFBA  F00D         	goto	l2644
  2555   001BBC                     u1530:
  2556   001BBC  C009  F001         	movff	___lmul@product,?___lmul
  2557   001BC0  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2558   001BC4  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2559   001BC8  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2560   001BCC  0012               	return		;funcret
  2561   001BCE                     __end_of___lmul:
  2562                           	callstack 0
  2563                           
  2564 ;; *************** function ___lldiv *****************
  2565 ;; Defined at:
  2566 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2567 ;; Parameters:    Size  Location     Type
  2568 ;;  dividend        4   12[COMRAM] unsigned long 
  2569 ;;  divisor         4   16[COMRAM] unsigned long 
  2570 ;; Auto vars:     Size  Location     Type
  2571 ;;  quotient        4   20[COMRAM] unsigned long 
  2572 ;;  counter         1   24[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  4   12[COMRAM] unsigned long 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2582 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2583 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2585 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2586 ;;Total ram usage:       13 bytes
  2587 ;; Hardware stack levels used: 1
  2588 ;; Hardware stack levels required when called: 2
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_get_color_code
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text8
  2597   00179E                     __ptext8:
  2598                           	callstack 0
  2599   00179E                     ___lldiv:
  2600                           	callstack 27
  2601   00179E  0E00               	movlw	0
  2602   0017A0  6E15               	movwf	___lldiv@quotient^0,c
  2603   0017A2  0E00               	movlw	0
  2604   0017A4  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2605   0017A6  0E00               	movlw	0
  2606   0017A8  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2607   0017AA  0E00               	movlw	0
  2608   0017AC  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2609   0017AE  5011               	movf	___lldiv@divisor^0,w,c
  2610   0017B0  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2611   0017B2  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2612   0017B4  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2613   0017B6  B4D8               	btfsc	status,2,c
  2614   0017B8  EFE0  F00B         	goto	u1541
  2615   0017BC  EFE2  F00B         	goto	u1540
  2616   0017C0                     u1541:
  2617   0017C0  EF18  F00C         	goto	l478
  2618   0017C4                     u1540:
  2619   0017C4  0E01               	movlw	1
  2620   0017C6  6E19               	movwf	___lldiv@counter^0,c
  2621   0017C8  EFEC  F00B         	goto	l2660
  2622   0017CC                     l2658:
  2623   0017CC  90D8               	bcf	status,0,c
  2624   0017CE  3611               	rlcf	___lldiv@divisor^0,f,c
  2625   0017D0  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2626   0017D2  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2627   0017D4  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2628   0017D6  2A19               	incf	___lldiv@counter^0,f,c
  2629   0017D8                     l2660:
  2630   0017D8  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2631   0017DA  EFF1  F00B         	goto	u1551
  2632   0017DE  EFF3  F00B         	goto	u1550
  2633   0017E2                     u1551:
  2634   0017E2  EFE6  F00B         	goto	l2658
  2635   0017E6                     u1550:
  2636   0017E6                     l2662:
  2637   0017E6  90D8               	bcf	status,0,c
  2638   0017E8  3615               	rlcf	___lldiv@quotient^0,f,c
  2639   0017EA  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2640   0017EC  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2641   0017EE  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2642   0017F0  5011               	movf	___lldiv@divisor^0,w,c
  2643   0017F2  5C0D               	subwf	___lldiv@dividend^0,w,c
  2644   0017F4  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2645   0017F6  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2646   0017F8  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2647   0017FA  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2648   0017FC  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2649   0017FE  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2650   001800  A0D8               	btfss	status,0,c
  2651   001802  EF05  F00C         	goto	u1561
  2652   001806  EF07  F00C         	goto	u1560
  2653   00180A                     u1561:
  2654   00180A  EF10  F00C         	goto	l2670
  2655   00180E                     u1560:
  2656   00180E  5011               	movf	___lldiv@divisor^0,w,c
  2657   001810  5E0D               	subwf	___lldiv@dividend^0,f,c
  2658   001812  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2659   001814  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2660   001816  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2661   001818  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2662   00181A  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2663   00181C  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2664   00181E  8015               	bsf	___lldiv@quotient^0,0,c
  2665   001820                     l2670:
  2666   001820  90D8               	bcf	status,0,c
  2667   001822  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2668   001824  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2669   001826  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2670   001828  3211               	rrcf	___lldiv@divisor^0,f,c
  2671   00182A  2E19               	decfsz	___lldiv@counter^0,f,c
  2672   00182C  EFF3  F00B         	goto	l2662
  2673   001830                     l478:
  2674   001830  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2675   001834  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2676   001838  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2677   00183C  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2678   001840  0012               	return		;funcret
  2679   001842                     __end_of___lldiv:
  2680                           	callstack 0
  2681                           
  2682 ;; *************** function _fullSpeedAhead *****************
  2683 ;; Defined at:
  2684 ;;		line 256 in file "dc_motor.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2687 ;;		 -> main@motorL(9), 
  2688 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2689 ;;		 -> main@motorR(9), 
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;		None
  2692 ;; Return value:  Size  Location     Type
  2693 ;;                  1    wreg      void 
  2694 ;; Registers used:
  2695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2696 ;; Tracked objects:
  2697 ;;		On entry : 0/0
  2698 ;;		On exit  : 0/0
  2699 ;;		Unchanged: 0/0
  2700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2701 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2704 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2705 ;;Total ram usage:        4 bytes
  2706 ;; Hardware stack levels used: 1
  2707 ;; Hardware stack levels required when called: 4
  2708 ;; This function calls:
  2709 ;;		_setMotorPWM
  2710 ;; This function is called by:
  2711 ;;		_main
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715                           	psect	text9
  2716   001C2E                     __ptext9:
  2717                           	callstack 0
  2718   001C2E                     _fullSpeedAhead:
  2719                           	callstack 26
  2720   001C2E                     
  2721                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2722   001C2E  0E00               	movlw	0
  2723   001C30  6E56               	movwf	(_seconds+1)^0,c
  2724   001C32  0E00               	movlw	0
  2725   001C34  6E55               	movwf	_seconds^0,c
  2726   001C36                     
  2727                           ;dc_motor.c: 259:     (*mL).direction=0;
  2728   001C36  EE20 F001          	lfsr	2,1
  2729   001C3A  5014               	movf	fullSpeedAhead@mL^0,w,c
  2730   001C3C  26D9               	addwf	fsr2l,f,c
  2731   001C3E  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2732   001C40  22DA               	addwfc	fsr2h,f,c
  2733   001C42  0E00               	movlw	0
  2734   001C44  6EDF               	movwf	indf2,c
  2735   001C46                     
  2736                           ;dc_motor.c: 260:     (*mR).direction=0;
  2737   001C46  EE20 F001          	lfsr	2,1
  2738   001C4A  5016               	movf	fullSpeedAhead@mR^0,w,c
  2739   001C4C  26D9               	addwf	fsr2l,f,c
  2740   001C4E  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2741   001C50  22DA               	addwfc	fsr2h,f,c
  2742   001C52  0E00               	movlw	0
  2743   001C54  6EDF               	movwf	indf2,c
  2744   001C56                     
  2745                           ;dc_motor.c: 261:     (*mL).power=50;
  2746   001C56  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2747   001C5A  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2748   001C5E  0E32               	movlw	50
  2749   001C60  6EDF               	movwf	indf2,c
  2750   001C62                     
  2751                           ;dc_motor.c: 262:     (*mR).power=50;
  2752   001C62  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2753   001C66  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2754   001C6A  0E32               	movlw	50
  2755   001C6C  6EDF               	movwf	indf2,c
  2756   001C6E                     
  2757                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2758   001C6E  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2759   001C72  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2760   001C76  EC0C  F007         	call	_setMotorPWM	;wreg free
  2761   001C7A                     
  2762                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2763   001C7A  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2764   001C7E  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2765   001C82  EC0C  F007         	call	_setMotorPWM	;wreg free
  2766   001C86  0012               	return		;funcret
  2767   001C88                     __end_of_fullSpeedAhead:
  2768                           	callstack 0
  2769                           
  2770 ;; *************** function _color_click_init *****************
  2771 ;; Defined at:
  2772 ;;		line 30 in file "color.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2788 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2789 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2790 ;;Total ram usage:        1 bytes
  2791 ;; Hardware stack levels used: 1
  2792 ;; Hardware stack levels required when called: 6
  2793 ;; This function calls:
  2794 ;;		_I2C_2_Master_Init
  2795 ;;		_calibrate_black
  2796 ;;		_calibrate_white
  2797 ;;		_color_writetoaddr
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text10
  2804   00136C                     __ptext10:
  2805                           	callstack 0
  2806   00136C                     _color_click_init:
  2807                           	callstack 24
  2808   00136C                     
  2809                           ;color.c: 33:     I2C_2_Master_Init();
  2810   00136C  EC70  F00F         	call	_I2C_2_Master_Init	;wreg free
  2811   001370                     
  2812                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2813   001370  0E01               	movlw	1
  2814   001372  6E03               	movwf	color_writetoaddr@value^0,c
  2815   001374  0E00               	movlw	0
  2816   001376  ECAC  F00F         	call	_color_writetoaddr
  2817   00137A                     
  2818                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2819   00137A  0E3F               	movlw	63
  2820   00137C  6E16               	movwf	??_color_click_init^0,c
  2821   00137E  0E55               	movlw	85
  2822   001380                     u2557:
  2823   001380  2EE8               	decfsz	wreg,f,c
  2824   001382  D7FE               	bra	u2557
  2825   001384  2E16               	decfsz	??_color_click_init^0,f,c
  2826   001386  D7FC               	bra	u2557
  2827   001388  F000               	nop	
  2828   00138A                     
  2829                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2830   00138A  0E03               	movlw	3
  2831   00138C  6E03               	movwf	color_writetoaddr@value^0,c
  2832   00138E  0E00               	movlw	0
  2833   001390  ECAC  F00F         	call	_color_writetoaddr
  2834   001394                     
  2835                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2836   001394  0ED5               	movlw	213
  2837   001396  6E03               	movwf	color_writetoaddr@value^0,c
  2838   001398  0E01               	movlw	1
  2839   00139A  ECAC  F00F         	call	_color_writetoaddr
  2840   00139E                     
  2841                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2842   00139E  9E86               	bcf	134,7,c	;volatile
  2843   0013A0                     
  2844                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2845   0013A0  9287               	bcf	135,1,c	;volatile
  2846   0013A2                     
  2847                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2848   0013A2  9881               	bcf	129,4,c	;volatile
  2849   0013A4                     
  2850                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2851   0013A4  EE20  F0B4         	lfsr	2,_Red_rule
  2852   0013A8  EE11  F000         	lfsr	1,_Color_rules
  2853   0013AC  0E0B               	movlw	11
  2854   0013AE                     u1571:
  2855   0013AE  CFDB FFE3          	movff	plusw2,plusw1
  2856   0013B2  06E8               	decf	wreg,f,c
  2857   0013B4  E2FC               	bc	u1571
  2858   0013B6                     
  2859                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2860   0013B6  EE20  F0A8         	lfsr	2,_Green_rule
  2861   0013BA  EE11  F00C         	lfsr	1,_Color_rules+12
  2862   0013BE  0E0B               	movlw	11
  2863   0013C0                     u1581:
  2864   0013C0  CFDB FFE3          	movff	plusw2,plusw1
  2865   0013C4  06E8               	decf	wreg,f,c
  2866   0013C6  E2FC               	bc	u1581
  2867   0013C8                     
  2868                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2869   0013C8  EE20  F09C         	lfsr	2,_Blue_rule
  2870   0013CC  EE11  F018         	lfsr	1,_Color_rules+24
  2871   0013D0  0E0B               	movlw	11
  2872   0013D2                     u1591:
  2873   0013D2  CFDB FFE3          	movff	plusw2,plusw1
  2874   0013D6  06E8               	decf	wreg,f,c
  2875   0013D8  E2FC               	bc	u1591
  2876   0013DA                     
  2877                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2878   0013DA  EE20  F090         	lfsr	2,_Yellow_rule
  2879   0013DE  EE11  F024         	lfsr	1,_Color_rules+36
  2880   0013E2  0E0B               	movlw	11
  2881   0013E4                     u1601:
  2882   0013E4  CFDB FFE3          	movff	plusw2,plusw1
  2883   0013E8  06E8               	decf	wreg,f,c
  2884   0013EA  E2FC               	bc	u1601
  2885   0013EC                     
  2886                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2887   0013EC  EE20  F084         	lfsr	2,_Pink_rule
  2888   0013F0  EE11  F030         	lfsr	1,_Color_rules+48
  2889   0013F4  0E0B               	movlw	11
  2890   0013F6                     u1611:
  2891   0013F6  CFDB FFE3          	movff	plusw2,plusw1
  2892   0013FA  06E8               	decf	wreg,f,c
  2893   0013FC  E2FC               	bc	u1611
  2894   0013FE                     
  2895                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2896   0013FE  EE20  F078         	lfsr	2,_Orange_rule
  2897   001402  EE11  F03C         	lfsr	1,_Color_rules+60
  2898   001406  0E0B               	movlw	11
  2899   001408                     u1621:
  2900   001408  CFDB FFE3          	movff	plusw2,plusw1
  2901   00140C  06E8               	decf	wreg,f,c
  2902   00140E  E2FC               	bc	u1621
  2903   001410                     
  2904                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2905   001410  EE21  F084         	lfsr	2,_Lightblue_rule
  2906   001414  EE11  F048         	lfsr	1,_Color_rules+72
  2907   001418  0E0B               	movlw	11
  2908   00141A                     u1631:
  2909   00141A  CFDB FFE3          	movff	plusw2,plusw1
  2910   00141E  06E8               	decf	wreg,f,c
  2911   001420  E2FC               	bc	u1631
  2912   001422                     
  2913                           ;color.c: 56:     Color_rules[7] = White_rule;
  2914   001422  EE21  F078         	lfsr	2,_White_rule
  2915   001426  EE11  F054         	lfsr	1,_Color_rules+84
  2916   00142A  0E0B               	movlw	11
  2917   00142C                     u1641:
  2918   00142C  CFDB FFE3          	movff	plusw2,plusw1
  2919   001430  06E8               	decf	wreg,f,c
  2920   001432  E2FC               	bc	u1641
  2921   001434                     
  2922                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2923   001434  EE21  F06C         	lfsr	2,_Black_rule
  2924   001438  EE11  F060         	lfsr	1,_Color_rules+96
  2925   00143C  0E0B               	movlw	11
  2926   00143E                     u1651:
  2927   00143E  CFDB FFE3          	movff	plusw2,plusw1
  2928   001442  06E8               	decf	wreg,f,c
  2929   001444  E2FC               	bc	u1651
  2930   001446                     
  2931                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2932   001446  8686               	bsf	134,3,c	;volatile
  2933   001448                     
  2934                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2935   001448  010E               	movlb	14	; () banked
  2936   00144A  97B4               	bcf	180,3,b	;volatile
  2937   00144C                     
  2938                           ; BSR set to: 14
  2939                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2940   00144C  8486               	bsf	134,2,c	;volatile
  2941   00144E                     
  2942                           ; BSR set to: 14
  2943                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2944   00144E  95B4               	bcf	180,2,b	;volatile
  2945   001450                     l67:
  2946   001450  A68E               	btfss	142,3,c	;volatile
  2947   001452  EF2D  F00A         	goto	u1661
  2948   001456  EF2F  F00A         	goto	u1660
  2949   00145A                     u1661:
  2950   00145A  EF36  F00A         	goto	l71
  2951   00145E                     u1660:
  2952   00145E  B48E               	btfsc	142,2,c	;volatile
  2953   001460  EF34  F00A         	goto	u1671
  2954   001464  EF36  F00A         	goto	u1670
  2955   001468                     u1671:
  2956   001468  EF28  F00A         	goto	l67
  2957   00146C                     u1670:
  2958   00146C                     l71:
  2959                           
  2960                           ;color.c: 72:     if(!PORTFbits.RF2){
  2961   00146C  B48E               	btfsc	142,2,c	;volatile
  2962   00146E  EF3B  F00A         	goto	u1681
  2963   001472  EF3D  F00A         	goto	u1680
  2964   001476                     u1681:
  2965   001476  EF3F  F00A         	goto	l2720
  2966   00147A                     u1680:
  2967   00147A  EF51  F00A         	goto	l73
  2968   00147E                     l2720:
  2969                           
  2970                           ;color.c: 75:     calibrate_white();
  2971   00147E  EC7A  F00B         	call	_calibrate_white	;wreg free
  2972   001482                     l74:
  2973   001482  B68E               	btfsc	142,3,c	;volatile
  2974   001484  EF46  F00A         	goto	u1691
  2975   001488  EF48  F00A         	goto	u1690
  2976   00148C                     u1691:
  2977   00148C  EF41  F00A         	goto	l74
  2978   001490                     u1690:
  2979   001490                     
  2980                           ;color.c: 77:     calibrate_black();
  2981   001490  EC17  F009         	call	_calibrate_black	;wreg free
  2982   001494                     l77:
  2983   001494  B68E               	btfsc	142,3,c	;volatile
  2984   001496  EF4F  F00A         	goto	u1701
  2985   00149A  EF51  F00A         	goto	u1700
  2986   00149E                     u1701:
  2987   00149E  EF4A  F00A         	goto	l77
  2988   0014A2                     u1700:
  2989   0014A2                     l73:
  2990   0014A2  0012               	return		;funcret
  2991   0014A4                     __end_of_color_click_init:
  2992                           	callstack 0
  2993                           
  2994 ;; *************** function _color_writetoaddr *****************
  2995 ;; Defined at:
  2996 ;;		line 82 in file "color.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  address         1    wreg     unsigned char 
  2999 ;;  value           1    2[COMRAM] unsigned char 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  address         1    3[COMRAM] unsigned char 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, status,2, status,0, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3011 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3012 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3015 ;;Total ram usage:        2 bytes
  3016 ;; Hardware stack levels used: 1
  3017 ;; Hardware stack levels required when called: 4
  3018 ;; This function calls:
  3019 ;;		_I2C_2_Master_Start
  3020 ;;		_I2C_2_Master_Stop
  3021 ;;		_I2C_2_Master_Write
  3022 ;; This function is called by:
  3023 ;;		_color_click_init
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text11
  3028   001F58                     __ptext11:
  3029                           	callstack 0
  3030   001F58                     _color_writetoaddr:
  3031                           	callstack 25
  3032                           
  3033                           ;incstack = 0
  3034                           ;color_writetoaddr@address stored from wreg
  3035   001F58  6E04               	movwf	color_writetoaddr@address^0,c
  3036   001F5A                     
  3037                           ;color.c: 83:     I2C_2_Master_Start();
  3038   001F5A  ECEE  F00F         	call	_I2C_2_Master_Start	;wreg free
  3039                           
  3040                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  3041   001F5E  0E52               	movlw	82
  3042   001F60  ECD8  F00F         	call	_I2C_2_Master_Write
  3043                           
  3044                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  3045   001F64  5004               	movf	color_writetoaddr@address^0,w,c
  3046   001F66  0980               	iorlw	128
  3047   001F68  ECD8  F00F         	call	_I2C_2_Master_Write
  3048                           
  3049                           ;color.c: 86:     I2C_2_Master_Write(value);
  3050   001F6C  5003               	movf	color_writetoaddr@value^0,w,c
  3051   001F6E  ECD8  F00F         	call	_I2C_2_Master_Write
  3052                           
  3053                           ;color.c: 87:     I2C_2_Master_Stop();
  3054   001F72  ECE9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3055   001F76  0012               	return		;funcret
  3056   001F78                     __end_of_color_writetoaddr:
  3057                           	callstack 0
  3058                           
  3059 ;; *************** function _calibrate_white *****************
  3060 ;; Defined at:
  3061 ;;		line 229 in file "color.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, status,2, status,0, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3078 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3079 ;;Total ram usage:        2 bytes
  3080 ;; Hardware stack levels used: 1
  3081 ;; Hardware stack levels required when called: 5
  3082 ;; This function calls:
  3083 ;;		_color_read_Blue
  3084 ;;		_color_read_Green
  3085 ;;		_color_read_Red
  3086 ;;		_set_led_color
  3087 ;; This function is called by:
  3088 ;;		_color_click_init
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           	psect	text12
  3093   0016F4                     __ptext12:
  3094                           	callstack 0
  3095   0016F4                     _calibrate_white:
  3096                           	callstack 24
  3097   0016F4                     
  3098                           ;color.c: 230:     set_led_color(0b100);
  3099   0016F4  0E00               	movlw	0
  3100   0016F6  6E02               	movwf	(set_led_color@color+1)^0,c
  3101   0016F8  0E04               	movlw	4
  3102   0016FA  6E01               	movwf	set_led_color@color^0,c
  3103   0016FC  EC2D  F00F         	call	_set_led_color	;wreg free
  3104   001700                     
  3105                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3106   001700  0E12               	movlw	18
  3107   001702  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3108   001704  0EDC               	movlw	220
  3109   001706  6E0C               	movwf	??_calibrate_white^0,c
  3110   001708  0E60               	movlw	96
  3111   00170A                     u2567:
  3112   00170A  2EE8               	decfsz	wreg,f,c
  3113   00170C  D7FE               	bra	u2567
  3114   00170E  2E0C               	decfsz	??_calibrate_white^0,f,c
  3115   001710  D7FC               	bra	u2567
  3116   001712  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3117   001714  D7FA               	bra	u2567
  3118   001716                     
  3119                           ;color.c: 232:     White_setup.R = color_read_Red();
  3120   001716  EC44  F00E         	call	_color_read_Red	;wreg free
  3121   00171A  C005  F06C         	movff	?_color_read_Red,_White_setup
  3122   00171E  C006  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3123   001722  0100               	movlb	0	; () banked
  3124   001724  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3125   001726  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3126   001728                     
  3127                           ; BSR set to: 0
  3128                           ;color.c: 233:     set_led_color(0b010);
  3129   001728  0E00               	movlw	0
  3130   00172A  6E02               	movwf	(set_led_color@color+1)^0,c
  3131   00172C  0E02               	movlw	2
  3132   00172E  6E01               	movwf	set_led_color@color^0,c
  3133   001730  EC2D  F00F         	call	_set_led_color	;wreg free
  3134   001734                     
  3135                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3136   001734  0E12               	movlw	18
  3137   001736  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3138   001738  0EDC               	movlw	220
  3139   00173A  6E0C               	movwf	??_calibrate_white^0,c
  3140   00173C  0E60               	movlw	96
  3141   00173E                     u2577:
  3142   00173E  2EE8               	decfsz	wreg,f,c
  3143   001740  D7FE               	bra	u2577
  3144   001742  2E0C               	decfsz	??_calibrate_white^0,f,c
  3145   001744  D7FC               	bra	u2577
  3146   001746  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3147   001748  D7FA               	bra	u2577
  3148                           
  3149                           ;color.c: 235:     White_setup.G = color_read_Green();
  3150   00174A  EC6C  F00E         	call	_color_read_Green	;wreg free
  3151   00174E  C005  F070         	movff	?_color_read_Green,_White_setup+4
  3152   001752  C006  F071         	movff	?_color_read_Green+1,_White_setup+5
  3153   001756  0100               	movlb	0	; () banked
  3154   001758  6B72               	clrf	(_White_setup+6)& (0+255),b
  3155   00175A  6B73               	clrf	(_White_setup+7)& (0+255),b
  3156   00175C                     
  3157                           ; BSR set to: 0
  3158                           ;color.c: 236:     set_led_color(0b001);
  3159   00175C  0E00               	movlw	0
  3160   00175E  6E02               	movwf	(set_led_color@color+1)^0,c
  3161   001760  0E01               	movlw	1
  3162   001762  6E01               	movwf	set_led_color@color^0,c
  3163   001764  EC2D  F00F         	call	_set_led_color	;wreg free
  3164   001768                     
  3165                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3166   001768  0E12               	movlw	18
  3167   00176A  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3168   00176C  0EDC               	movlw	220
  3169   00176E  6E0C               	movwf	??_calibrate_white^0,c
  3170   001770  0E60               	movlw	96
  3171   001772                     u2587:
  3172   001772  2EE8               	decfsz	wreg,f,c
  3173   001774  D7FE               	bra	u2587
  3174   001776  2E0C               	decfsz	??_calibrate_white^0,f,c
  3175   001778  D7FC               	bra	u2587
  3176   00177A  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3177   00177C  D7FA               	bra	u2587
  3178   00177E                     
  3179                           ;color.c: 238:     White_setup.B = color_read_Blue();
  3180   00177E  ECBC  F00E         	call	_color_read_Blue	;wreg free
  3181   001782  C005  F074         	movff	?_color_read_Blue,_White_setup+8
  3182   001786  C006  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3183   00178A  0100               	movlb	0	; () banked
  3184   00178C  6B76               	clrf	(_White_setup+10)& (0+255),b
  3185   00178E  6B77               	clrf	(_White_setup+11)& (0+255),b
  3186   001790                     
  3187                           ; BSR set to: 0
  3188                           ;color.c: 239:     set_led_color(0b000);
  3189   001790  0E00               	movlw	0
  3190   001792  6E02               	movwf	(set_led_color@color+1)^0,c
  3191   001794  0E00               	movlw	0
  3192   001796  6E01               	movwf	set_led_color@color^0,c
  3193   001798  EC2D  F00F         	call	_set_led_color	;wreg free
  3194   00179C  0012               	return		;funcret
  3195   00179E                     __end_of_calibrate_white:
  3196                           	callstack 0
  3197                           
  3198 ;; *************** function _calibrate_black *****************
  3199 ;; Defined at:
  3200 ;;		line 209 in file "color.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  clear2          2   17[COMRAM] unsigned int 
  3205 ;;  clear1          2   15[COMRAM] unsigned int 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3216 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3217 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3218 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3219 ;;Total ram usage:        8 bytes
  3220 ;; Hardware stack levels used: 1
  3221 ;; Hardware stack levels required when called: 5
  3222 ;; This function calls:
  3223 ;;		___lwdiv
  3224 ;;		_color_read_Blue
  3225 ;;		_color_read_Clear
  3226 ;;		_color_read_Green
  3227 ;;		_color_read_Red
  3228 ;;		_set_led_color
  3229 ;; This function is called by:
  3230 ;;		_color_click_init
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text13
  3235   00122E                     __ptext13:
  3236                           	callstack 0
  3237   00122E                     _calibrate_black:
  3238                           	callstack 24
  3239   00122E                     
  3240                           ;color.c: 210:     set_led_color(0b100);
  3241   00122E  0E00               	movlw	0
  3242   001230  6E02               	movwf	(set_led_color@color+1)^0,c
  3243   001232  0E04               	movlw	4
  3244   001234  6E01               	movwf	set_led_color@color^0,c
  3245   001236  EC2D  F00F         	call	_set_led_color	;wreg free
  3246   00123A                     
  3247                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3248   00123A  0E12               	movlw	18
  3249   00123C  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3250   00123E  0EDC               	movlw	220
  3251   001240  6E0E               	movwf	??_calibrate_black^0,c
  3252   001242  0E60               	movlw	96
  3253   001244                     u2597:
  3254   001244  2EE8               	decfsz	wreg,f,c
  3255   001246  D7FE               	bra	u2597
  3256   001248  2E0E               	decfsz	??_calibrate_black^0,f,c
  3257   00124A  D7FC               	bra	u2597
  3258   00124C  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3259   00124E  D7FA               	bra	u2597
  3260   001250                     
  3261                           ;color.c: 212:     Black_setup.R = color_read_Red();
  3262   001250  EC44  F00E         	call	_color_read_Red	;wreg free
  3263   001254  C005  F060         	movff	?_color_read_Red,_Black_setup
  3264   001258  C006  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3265   00125C  0100               	movlb	0	; () banked
  3266   00125E  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3267   001260  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3268   001262                     
  3269                           ; BSR set to: 0
  3270                           ;color.c: 213:     set_led_color(0b010);
  3271   001262  0E00               	movlw	0
  3272   001264  6E02               	movwf	(set_led_color@color+1)^0,c
  3273   001266  0E02               	movlw	2
  3274   001268  6E01               	movwf	set_led_color@color^0,c
  3275   00126A  EC2D  F00F         	call	_set_led_color	;wreg free
  3276   00126E                     
  3277                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3278   00126E  0E12               	movlw	18
  3279   001270  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3280   001272  0EDC               	movlw	220
  3281   001274  6E0E               	movwf	??_calibrate_black^0,c
  3282   001276  0E60               	movlw	96
  3283   001278                     u2607:
  3284   001278  2EE8               	decfsz	wreg,f,c
  3285   00127A  D7FE               	bra	u2607
  3286   00127C  2E0E               	decfsz	??_calibrate_black^0,f,c
  3287   00127E  D7FC               	bra	u2607
  3288   001280  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3289   001282  D7FA               	bra	u2607
  3290                           
  3291                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3292   001284  EC6C  F00E         	call	_color_read_Green	;wreg free
  3293   001288  C005  F064         	movff	?_color_read_Green,_Black_setup+4
  3294   00128C  C006  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3295   001290  0100               	movlb	0	; () banked
  3296   001292  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3297   001294  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3298   001296                     
  3299                           ; BSR set to: 0
  3300                           ;color.c: 216:     set_led_color(0b001);
  3301   001296  0E00               	movlw	0
  3302   001298  6E02               	movwf	(set_led_color@color+1)^0,c
  3303   00129A  0E01               	movlw	1
  3304   00129C  6E01               	movwf	set_led_color@color^0,c
  3305   00129E  EC2D  F00F         	call	_set_led_color	;wreg free
  3306   0012A2                     
  3307                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3308   0012A2  0E12               	movlw	18
  3309   0012A4  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3310   0012A6  0EDC               	movlw	220
  3311   0012A8  6E0E               	movwf	??_calibrate_black^0,c
  3312   0012AA  0E60               	movlw	96
  3313   0012AC                     u2617:
  3314   0012AC  2EE8               	decfsz	wreg,f,c
  3315   0012AE  D7FE               	bra	u2617
  3316   0012B0  2E0E               	decfsz	??_calibrate_black^0,f,c
  3317   0012B2  D7FC               	bra	u2617
  3318   0012B4  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3319   0012B6  D7FA               	bra	u2617
  3320   0012B8                     
  3321                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3322   0012B8  ECBC  F00E         	call	_color_read_Blue	;wreg free
  3323   0012BC  C005  F068         	movff	?_color_read_Blue,_Black_setup+8
  3324   0012C0  C006  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3325   0012C4  0100               	movlb	0	; () banked
  3326   0012C6  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3327   0012C8  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3328   0012CA                     
  3329                           ; BSR set to: 0
  3330                           ;color.c: 219:     set_led_color(0b000);
  3331   0012CA  0E00               	movlw	0
  3332   0012CC  6E02               	movwf	(set_led_color@color+1)^0,c
  3333   0012CE  0E00               	movlw	0
  3334   0012D0  6E01               	movwf	set_led_color@color^0,c
  3335   0012D2  EC2D  F00F         	call	_set_led_color	;wreg free
  3336                           
  3337                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3338   0012D6  0E12               	movlw	18
  3339   0012D8  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3340   0012DA  0EDC               	movlw	220
  3341   0012DC  6E0E               	movwf	??_calibrate_black^0,c
  3342   0012DE  0E60               	movlw	96
  3343   0012E0                     u2627:
  3344   0012E0  2EE8               	decfsz	wreg,f,c
  3345   0012E2  D7FE               	bra	u2627
  3346   0012E4  2E0E               	decfsz	??_calibrate_black^0,f,c
  3347   0012E6  D7FC               	bra	u2627
  3348   0012E8  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3349   0012EA  D7FA               	bra	u2627
  3350   0012EC                     
  3351                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3352   0012EC  EC94  F00E         	call	_color_read_Clear	;wreg free
  3353   0012F0  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3354   0012F4  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3355   0012F8                     
  3356                           ;color.c: 222:     set_led_color(0b111);
  3357   0012F8  0E00               	movlw	0
  3358   0012FA  6E02               	movwf	(set_led_color@color+1)^0,c
  3359   0012FC  0E07               	movlw	7
  3360   0012FE  6E01               	movwf	set_led_color@color^0,c
  3361   001300  EC2D  F00F         	call	_set_led_color	;wreg free
  3362   001304                     
  3363                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3364   001304  0E12               	movlw	18
  3365   001306  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3366   001308  0EDC               	movlw	220
  3367   00130A  6E0E               	movwf	??_calibrate_black^0,c
  3368   00130C  0E60               	movlw	96
  3369   00130E                     u2637:
  3370   00130E  2EE8               	decfsz	wreg,f,c
  3371   001310  D7FE               	bra	u2637
  3372   001312  2E0E               	decfsz	??_calibrate_black^0,f,c
  3373   001314  D7FC               	bra	u2637
  3374   001316  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3375   001318  D7FA               	bra	u2637
  3376   00131A                     
  3377                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3378   00131A  EC94  F00E         	call	_color_read_Clear	;wreg free
  3379   00131E  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3380   001322  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3381                           
  3382                           ;color.c: 225:     set_led_color(0b000);
  3383   001326  0E00               	movlw	0
  3384   001328  6E02               	movwf	(set_led_color@color+1)^0,c
  3385   00132A  0E00               	movlw	0
  3386   00132C  6E01               	movwf	set_led_color@color^0,c
  3387   00132E  EC2D  F00F         	call	_set_led_color	;wreg free
  3388   001332                     
  3389                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3390   001332  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3391   001336  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3392   00133A  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3393   00133E  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3394   001342  EC78  F00D         	call	___lwdiv	;wreg free
  3395   001346  C007  F014         	movff	?___lwdiv,_calibrate_black$2442
  3396   00134A  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2442+1
  3397   00134E                     
  3398                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3399   00134E  C014  F007         	movff	_calibrate_black$2442,___lwdiv@dividend
  3400   001352  C015  F008         	movff	_calibrate_black$2442+1,___lwdiv@dividend+1
  3401   001356  0E00               	movlw	0
  3402   001358  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3403   00135A  0E05               	movlw	5
  3404   00135C  6E09               	movwf	___lwdiv@divisor^0,c
  3405   00135E  EC78  F00D         	call	___lwdiv	;wreg free
  3406   001362  C007  F059         	movff	?___lwdiv,_wall_coef
  3407   001366  C008  F05A         	movff	?___lwdiv+1,_wall_coef+1
  3408   00136A  0012               	return		;funcret
  3409   00136C                     __end_of_calibrate_black:
  3410                           	callstack 0
  3411                           
  3412 ;; *************** function _set_led_color *****************
  3413 ;; Defined at:
  3414 ;;		line 154 in file "color.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  color           2    0[COMRAM] unsigned int 
  3417 ;; Auto vars:     Size  Location     Type
  3418 ;;		None
  3419 ;; Return value:  Size  Location     Type
  3420 ;;                  1    wreg      void 
  3421 ;; Registers used:
  3422 ;;		None
  3423 ;; Tracked objects:
  3424 ;;		On entry : 0/0
  3425 ;;		On exit  : 0/0
  3426 ;;		Unchanged: 0/0
  3427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3428 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3431 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3432 ;;Total ram usage:        2 bytes
  3433 ;; Hardware stack levels used: 1
  3434 ;; Hardware stack levels required when called: 2
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		_get_color_code
  3439 ;;		_calibrate_black
  3440 ;;		_calibrate_white
  3441 ;;		_get_wall_presence
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           	psect	text14
  3446   001E5A                     __ptext14:
  3447                           	callstack 0
  3448   001E5A                     _set_led_color:
  3449                           	callstack 27
  3450   001E5A                     
  3451                           ;color.c: 158:     if(color & 0b100){
  3452   001E5A  A401               	btfss	set_led_color@color^0,2,c
  3453   001E5C  EF32  F00F         	goto	u1321
  3454   001E60  EF34  F00F         	goto	u1320
  3455   001E64                     u1321:
  3456   001E64  EF37  F00F         	goto	l112
  3457   001E68                     u1320:
  3458   001E68                     
  3459                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3460   001E68  827F               	bsf	127,1,c	;volatile
  3461                           
  3462                           ;color.c: 160:     }else{
  3463   001E6A  EF38  F00F         	goto	l113
  3464   001E6E                     l112:
  3465                           
  3466                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3467   001E6E  927F               	bcf	127,1,c	;volatile
  3468   001E70                     l113:
  3469                           
  3470                           ;color.c: 163:     if(color & 0b010){
  3471   001E70  A201               	btfss	set_led_color@color^0,1,c
  3472   001E72  EF3D  F00F         	goto	u1331
  3473   001E76  EF3F  F00F         	goto	u1330
  3474   001E7A                     u1331:
  3475   001E7A  EF42  F00F         	goto	l114
  3476   001E7E                     u1330:
  3477   001E7E                     
  3478                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3479   001E7E  8879               	bsf	121,4,c	;volatile
  3480                           
  3481                           ;color.c: 165:     }else{
  3482   001E80  EF43  F00F         	goto	l115
  3483   001E84                     l114:
  3484                           
  3485                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3486   001E84  9879               	bcf	121,4,c	;volatile
  3487   001E86                     l115:
  3488                           
  3489                           ;color.c: 168:     if(color & 0b001){
  3490   001E86  A001               	btfss	set_led_color@color^0,0,c
  3491   001E88  EF48  F00F         	goto	u1341
  3492   001E8C  EF4A  F00F         	goto	u1340
  3493   001E90                     u1341:
  3494   001E90  EF4D  F00F         	goto	l116
  3495   001E94                     u1340:
  3496   001E94                     
  3497                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3498   001E94  8E7E               	bsf	126,7,c	;volatile
  3499                           
  3500                           ;color.c: 170:     }else{
  3501   001E96  EF4E  F00F         	goto	l118
  3502   001E9A                     l116:
  3503                           
  3504                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3505   001E9A  9E7E               	bcf	126,7,c	;volatile
  3506   001E9C                     l118:
  3507   001E9C  0012               	return		;funcret
  3508   001E9E                     __end_of_set_led_color:
  3509                           	callstack 0
  3510                           
  3511 ;; *************** function _color_read_Red *****************
  3512 ;; Defined at:
  3513 ;;		line 90 in file "color.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  tmp             2    9[COMRAM] unsigned int 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  2    4[COMRAM] unsigned int 
  3520 ;; Registers used:
  3521 ;;		wreg, status,2, status,0, cstack
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3527 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3528 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3529 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3530 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3531 ;;Total ram usage:        7 bytes
  3532 ;; Hardware stack levels used: 1
  3533 ;; Hardware stack levels required when called: 4
  3534 ;; This function calls:
  3535 ;;		_I2C_2_Master_Read
  3536 ;;		_I2C_2_Master_RepStart
  3537 ;;		_I2C_2_Master_Start
  3538 ;;		_I2C_2_Master_Stop
  3539 ;;		_I2C_2_Master_Write
  3540 ;; This function is called by:
  3541 ;;		_get_color_code
  3542 ;;		_calibrate_black
  3543 ;;		_calibrate_white
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text15
  3548   001C88                     __ptext15:
  3549                           	callstack 0
  3550   001C88                     _color_read_Red:
  3551                           	callstack 25
  3552   001C88                     
  3553                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3554   001C88  ECEE  F00F         	call	_I2C_2_Master_Start	;wreg free
  3555                           
  3556                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3557   001C8C  0E52               	movlw	82
  3558   001C8E  ECD8  F00F         	call	_I2C_2_Master_Write
  3559                           
  3560                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3561   001C92  0EB6               	movlw	182
  3562   001C94  ECD8  F00F         	call	_I2C_2_Master_Write
  3563                           
  3564                           ;color.c: 96:  I2C_2_Master_RepStart();
  3565   001C98  ECF3  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3566                           
  3567                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3568   001C9C  0E53               	movlw	83
  3569   001C9E  ECD8  F00F         	call	_I2C_2_Master_Write
  3570                           
  3571                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3572   001CA2  0E01               	movlw	1
  3573   001CA4  EC4F  F00F         	call	_I2C_2_Master_Read
  3574   001CA8  6E07               	movwf	??_color_read_Red^0,c
  3575   001CAA  5007               	movf	??_color_read_Red^0,w,c
  3576   001CAC  6E0A               	movwf	color_read_Red@tmp^0,c
  3577   001CAE  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3578                           
  3579                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3580   001CB0  0E00               	movlw	0
  3581   001CB2  EC4F  F00F         	call	_I2C_2_Master_Read
  3582   001CB6  6E07               	movwf	??_color_read_Red^0,c
  3583   001CB8  5007               	movf	??_color_read_Red^0,w,c
  3584   001CBA  6E09               	movwf	(??_color_read_Red+2)^0,c
  3585   001CBC  6A08               	clrf	(??_color_read_Red+1)^0,c
  3586   001CBE  500A               	movf	color_read_Red@tmp^0,w,c
  3587   001CC0  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3588   001CC2  6E0A               	movwf	color_read_Red@tmp^0,c
  3589   001CC4  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3590   001CC6  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3591   001CC8  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3592                           
  3593                           ;color.c: 100:  I2C_2_Master_Stop();
  3594   001CCA  ECE9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3595   001CCE                     
  3596                           ;color.c: 101:  return tmp;
  3597   001CCE  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3598   001CD2  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3599   001CD6  0012               	return		;funcret
  3600   001CD8                     __end_of_color_read_Red:
  3601                           	callstack 0
  3602                           
  3603 ;; *************** function _color_read_Green *****************
  3604 ;; Defined at:
  3605 ;;		line 118 in file "color.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;  tmp             2    9[COMRAM] unsigned int 
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  2    4[COMRAM] unsigned int 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2, status,0, cstack
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3621 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3622 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;Total ram usage:        7 bytes
  3624 ;; Hardware stack levels used: 1
  3625 ;; Hardware stack levels required when called: 4
  3626 ;; This function calls:
  3627 ;;		_I2C_2_Master_Read
  3628 ;;		_I2C_2_Master_RepStart
  3629 ;;		_I2C_2_Master_Start
  3630 ;;		_I2C_2_Master_Stop
  3631 ;;		_I2C_2_Master_Write
  3632 ;; This function is called by:
  3633 ;;		_get_color_code
  3634 ;;		_calibrate_black
  3635 ;;		_calibrate_white
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text16
  3640   001CD8                     __ptext16:
  3641                           	callstack 0
  3642   001CD8                     _color_read_Green:
  3643                           	callstack 25
  3644   001CD8                     
  3645                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3646   001CD8  ECEE  F00F         	call	_I2C_2_Master_Start	;wreg free
  3647                           
  3648                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3649   001CDC  0E52               	movlw	82
  3650   001CDE  ECD8  F00F         	call	_I2C_2_Master_Write
  3651                           
  3652                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3653   001CE2  0EB8               	movlw	184
  3654   001CE4  ECD8  F00F         	call	_I2C_2_Master_Write
  3655                           
  3656                           ;color.c: 124:  I2C_2_Master_RepStart();
  3657   001CE8  ECF3  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3658                           
  3659                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3660   001CEC  0E53               	movlw	83
  3661   001CEE  ECD8  F00F         	call	_I2C_2_Master_Write
  3662                           
  3663                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3664   001CF2  0E01               	movlw	1
  3665   001CF4  EC4F  F00F         	call	_I2C_2_Master_Read
  3666   001CF8  6E07               	movwf	??_color_read_Green^0,c
  3667   001CFA  5007               	movf	??_color_read_Green^0,w,c
  3668   001CFC  6E0A               	movwf	color_read_Green@tmp^0,c
  3669   001CFE  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3670                           
  3671                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3672   001D00  0E00               	movlw	0
  3673   001D02  EC4F  F00F         	call	_I2C_2_Master_Read
  3674   001D06  6E07               	movwf	??_color_read_Green^0,c
  3675   001D08  5007               	movf	??_color_read_Green^0,w,c
  3676   001D0A  6E09               	movwf	(??_color_read_Green+2)^0,c
  3677   001D0C  6A08               	clrf	(??_color_read_Green+1)^0,c
  3678   001D0E  500A               	movf	color_read_Green@tmp^0,w,c
  3679   001D10  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3680   001D12  6E0A               	movwf	color_read_Green@tmp^0,c
  3681   001D14  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3682   001D16  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3683   001D18  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3684                           
  3685                           ;color.c: 128:  I2C_2_Master_Stop();
  3686   001D1A  ECE9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3687   001D1E                     
  3688                           ;color.c: 129:  return tmp;
  3689   001D1E  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3690   001D22  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3691   001D26  0012               	return		;funcret
  3692   001D28                     __end_of_color_read_Green:
  3693                           	callstack 0
  3694                           
  3695 ;; *************** function _color_read_Clear *****************
  3696 ;; Defined at:
  3697 ;;		line 132 in file "color.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;  tmp             2    9[COMRAM] unsigned int 
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  2    4[COMRAM] unsigned int 
  3704 ;; Registers used:
  3705 ;;		wreg, status,2, status,0, cstack
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;Total ram usage:        7 bytes
  3716 ;; Hardware stack levels used: 1
  3717 ;; Hardware stack levels required when called: 4
  3718 ;; This function calls:
  3719 ;;		_I2C_2_Master_Read
  3720 ;;		_I2C_2_Master_RepStart
  3721 ;;		_I2C_2_Master_Start
  3722 ;;		_I2C_2_Master_Stop
  3723 ;;		_I2C_2_Master_Write
  3724 ;; This function is called by:
  3725 ;;		_calibrate_black
  3726 ;;		_get_wall_presence
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text17
  3731   001D28                     __ptext17:
  3732                           	callstack 0
  3733   001D28                     _color_read_Clear:
  3734                           	callstack 25
  3735   001D28                     
  3736                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3737   001D28  ECEE  F00F         	call	_I2C_2_Master_Start	;wreg free
  3738                           
  3739                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3740   001D2C  0E52               	movlw	82
  3741   001D2E  ECD8  F00F         	call	_I2C_2_Master_Write
  3742                           
  3743                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3744   001D32  0EB4               	movlw	180
  3745   001D34  ECD8  F00F         	call	_I2C_2_Master_Write
  3746                           
  3747                           ;color.c: 138:  I2C_2_Master_RepStart();
  3748   001D38  ECF3  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3749                           
  3750                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3751   001D3C  0E53               	movlw	83
  3752   001D3E  ECD8  F00F         	call	_I2C_2_Master_Write
  3753                           
  3754                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3755   001D42  0E01               	movlw	1
  3756   001D44  EC4F  F00F         	call	_I2C_2_Master_Read
  3757   001D48  6E07               	movwf	??_color_read_Clear^0,c
  3758   001D4A  5007               	movf	??_color_read_Clear^0,w,c
  3759   001D4C  6E0A               	movwf	color_read_Clear@tmp^0,c
  3760   001D4E  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3761                           
  3762                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3763   001D50  0E00               	movlw	0
  3764   001D52  EC4F  F00F         	call	_I2C_2_Master_Read
  3765   001D56  6E07               	movwf	??_color_read_Clear^0,c
  3766   001D58  5007               	movf	??_color_read_Clear^0,w,c
  3767   001D5A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3768   001D5C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3769   001D5E  500A               	movf	color_read_Clear@tmp^0,w,c
  3770   001D60  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3771   001D62  6E0A               	movwf	color_read_Clear@tmp^0,c
  3772   001D64  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3773   001D66  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3774   001D68  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3775                           
  3776                           ;color.c: 142:  I2C_2_Master_Stop();
  3777   001D6A  ECE9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3778   001D6E                     
  3779                           ;color.c: 143:  return tmp;
  3780   001D6E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3781   001D72  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3782   001D76  0012               	return		;funcret
  3783   001D78                     __end_of_color_read_Clear:
  3784                           	callstack 0
  3785                           
  3786 ;; *************** function _color_read_Blue *****************
  3787 ;; Defined at:
  3788 ;;		line 104 in file "color.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;		None
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;  tmp             2    9[COMRAM] unsigned int 
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  2    4[COMRAM] unsigned int 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0, cstack
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;Total ram usage:        7 bytes
  3807 ;; Hardware stack levels used: 1
  3808 ;; Hardware stack levels required when called: 4
  3809 ;; This function calls:
  3810 ;;		_I2C_2_Master_Read
  3811 ;;		_I2C_2_Master_RepStart
  3812 ;;		_I2C_2_Master_Start
  3813 ;;		_I2C_2_Master_Stop
  3814 ;;		_I2C_2_Master_Write
  3815 ;; This function is called by:
  3816 ;;		_get_color_code
  3817 ;;		_calibrate_black
  3818 ;;		_calibrate_white
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text18
  3823   001D78                     __ptext18:
  3824                           	callstack 0
  3825   001D78                     _color_read_Blue:
  3826                           	callstack 25
  3827   001D78                     
  3828                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3829   001D78  ECEE  F00F         	call	_I2C_2_Master_Start	;wreg free
  3830                           
  3831                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3832   001D7C  0E52               	movlw	82
  3833   001D7E  ECD8  F00F         	call	_I2C_2_Master_Write
  3834                           
  3835                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3836   001D82  0EBA               	movlw	186
  3837   001D84  ECD8  F00F         	call	_I2C_2_Master_Write
  3838                           
  3839                           ;color.c: 110:  I2C_2_Master_RepStart();
  3840   001D88  ECF3  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3841                           
  3842                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3843   001D8C  0E53               	movlw	83
  3844   001D8E  ECD8  F00F         	call	_I2C_2_Master_Write
  3845                           
  3846                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3847   001D92  0E01               	movlw	1
  3848   001D94  EC4F  F00F         	call	_I2C_2_Master_Read
  3849   001D98  6E07               	movwf	??_color_read_Blue^0,c
  3850   001D9A  5007               	movf	??_color_read_Blue^0,w,c
  3851   001D9C  6E0A               	movwf	color_read_Blue@tmp^0,c
  3852   001D9E  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3853                           
  3854                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3855   001DA0  0E00               	movlw	0
  3856   001DA2  EC4F  F00F         	call	_I2C_2_Master_Read
  3857   001DA6  6E07               	movwf	??_color_read_Blue^0,c
  3858   001DA8  5007               	movf	??_color_read_Blue^0,w,c
  3859   001DAA  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3860   001DAC  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3861   001DAE  500A               	movf	color_read_Blue@tmp^0,w,c
  3862   001DB0  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3863   001DB2  6E0A               	movwf	color_read_Blue@tmp^0,c
  3864   001DB4  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3865   001DB6  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3866   001DB8  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3867                           
  3868                           ;color.c: 114:  I2C_2_Master_Stop();
  3869   001DBA  ECE9  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3870   001DBE                     
  3871                           ;color.c: 115:  return tmp;
  3872   001DBE  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3873   001DC2  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3874   001DC6  0012               	return		;funcret
  3875   001DC8                     __end_of_color_read_Blue:
  3876                           	callstack 0
  3877                           
  3878 ;; *************** function _I2C_2_Master_Write *****************
  3879 ;; Defined at:
  3880 ;;		line 45 in file "i2c.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;  data_byte       1    wreg     unsigned char 
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;  data_byte       1    1[COMRAM] unsigned char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3898 ;;Total ram usage:        1 bytes
  3899 ;; Hardware stack levels used: 1
  3900 ;; Hardware stack levels required when called: 3
  3901 ;; This function calls:
  3902 ;;		_I2C_2_Master_Idle
  3903 ;; This function is called by:
  3904 ;;		_color_writetoaddr
  3905 ;;		_color_read_Red
  3906 ;;		_color_read_Blue
  3907 ;;		_color_read_Green
  3908 ;;		_color_read_Clear
  3909 ;; This function uses a non-reentrant model
  3910 ;;
  3911                           
  3912                           	psect	text19
  3913   001FB0                     __ptext19:
  3914                           	callstack 0
  3915   001FB0                     _I2C_2_Master_Write:
  3916                           	callstack 25
  3917                           
  3918                           ;incstack = 0
  3919                           ;I2C_2_Master_Write@data_byte stored from wreg
  3920   001FB0  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3921   001FB2                     
  3922                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3923   001FB2  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3924   001FB6                     
  3925                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3926   001FB6  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3927   001FBA  0012               	return		;funcret
  3928   001FBC                     __end_of_I2C_2_Master_Write:
  3929                           	callstack 0
  3930                           
  3931 ;; *************** function _I2C_2_Master_Stop *****************
  3932 ;; Defined at:
  3933 ;;		line 39 in file "i2c.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;		None
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;		None
  3938 ;; Return value:  Size  Location     Type
  3939 ;;                  1    wreg      void 
  3940 ;; Registers used:
  3941 ;;		wreg, status,2, status,0, cstack
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3951 ;;Total ram usage:        0 bytes
  3952 ;; Hardware stack levels used: 1
  3953 ;; Hardware stack levels required when called: 3
  3954 ;; This function calls:
  3955 ;;		_I2C_2_Master_Idle
  3956 ;; This function is called by:
  3957 ;;		_color_writetoaddr
  3958 ;;		_color_read_Red
  3959 ;;		_color_read_Blue
  3960 ;;		_color_read_Green
  3961 ;;		_color_read_Clear
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text20
  3966   001FD2                     __ptext20:
  3967                           	callstack 0
  3968   001FD2                     _I2C_2_Master_Stop:
  3969                           	callstack 25
  3970   001FD2                     
  3971                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3972   001FD2  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3973   001FD6                     
  3974                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3975   001FD6  010E               	movlb	14	; () banked
  3976   001FD8  85DA               	bsf	218,2,b	;volatile
  3977   001FDA                     
  3978                           ; BSR set to: 14
  3979   001FDA  0012               	return		;funcret
  3980   001FDC                     __end_of_I2C_2_Master_Stop:
  3981                           	callstack 0
  3982                           
  3983 ;; *************** function _I2C_2_Master_Start *****************
  3984 ;; Defined at:
  3985 ;;		line 27 in file "i2c.c"
  3986 ;; Parameters:    Size  Location     Type
  3987 ;;		None
  3988 ;; Auto vars:     Size  Location     Type
  3989 ;;		None
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  1    wreg      void 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2, status,0, cstack
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : 0/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4003 ;;Total ram usage:        0 bytes
  4004 ;; Hardware stack levels used: 1
  4005 ;; Hardware stack levels required when called: 3
  4006 ;; This function calls:
  4007 ;;		_I2C_2_Master_Idle
  4008 ;; This function is called by:
  4009 ;;		_color_writetoaddr
  4010 ;;		_color_read_Red
  4011 ;;		_color_read_Blue
  4012 ;;		_color_read_Green
  4013 ;;		_color_read_Clear
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	text21
  4018   001FDC                     __ptext21:
  4019                           	callstack 0
  4020   001FDC                     _I2C_2_Master_Start:
  4021                           	callstack 25
  4022   001FDC                     
  4023                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4024   001FDC  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4025   001FE0                     
  4026                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4027   001FE0  010E               	movlb	14	; () banked
  4028   001FE2  81DA               	bsf	218,0,b	;volatile
  4029   001FE4                     
  4030                           ; BSR set to: 14
  4031   001FE4  0012               	return		;funcret
  4032   001FE6                     __end_of_I2C_2_Master_Start:
  4033                           	callstack 0
  4034                           
  4035 ;; *************** function _I2C_2_Master_RepStart *****************
  4036 ;; Defined at:
  4037 ;;		line 33 in file "i2c.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;		None
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4055 ;;Total ram usage:        0 bytes
  4056 ;; Hardware stack levels used: 1
  4057 ;; Hardware stack levels required when called: 3
  4058 ;; This function calls:
  4059 ;;		_I2C_2_Master_Idle
  4060 ;; This function is called by:
  4061 ;;		_color_read_Red
  4062 ;;		_color_read_Blue
  4063 ;;		_color_read_Green
  4064 ;;		_color_read_Clear
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text22
  4069   001FE6                     __ptext22:
  4070                           	callstack 0
  4071   001FE6                     _I2C_2_Master_RepStart:
  4072                           	callstack 25
  4073   001FE6                     
  4074                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4075   001FE6  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4076   001FEA                     
  4077                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4078   001FEA  010E               	movlb	14	; () banked
  4079   001FEC  83DA               	bsf	218,1,b	;volatile
  4080   001FEE                     
  4081                           ; BSR set to: 14
  4082   001FEE  0012               	return		;funcret
  4083   001FF0                     __end_of_I2C_2_Master_RepStart:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function _I2C_2_Master_Read *****************
  4087 ;; Defined at:
  4088 ;;		line 51 in file "i2c.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  ack             1    wreg     unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  ack             1    2[COMRAM] unsigned char 
  4093 ;;  tmp             1    3[COMRAM] unsigned char 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      unsigned char 
  4096 ;; Registers used:
  4097 ;;		wreg, status,2, status,0, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;Total ram usage:        3 bytes
  4108 ;; Hardware stack levels used: 1
  4109 ;; Hardware stack levels required when called: 3
  4110 ;; This function calls:
  4111 ;;		_I2C_2_Master_Idle
  4112 ;; This function is called by:
  4113 ;;		_color_read_Red
  4114 ;;		_color_read_Blue
  4115 ;;		_color_read_Green
  4116 ;;		_color_read_Clear
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text23
  4121   001E9E                     __ptext23:
  4122                           	callstack 0
  4123   001E9E                     _I2C_2_Master_Read:
  4124                           	callstack 25
  4125                           
  4126                           ; BSR set to: 14
  4127                           ;incstack = 0
  4128                           ;I2C_2_Master_Read@ack stored from wreg
  4129   001E9E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  4130   001EA0                     
  4131                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4132   001EA0  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4133   001EA4                     
  4134                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4135   001EA4  010E               	movlb	14	; () banked
  4136   001EA6  87DA               	bsf	218,3,b	;volatile
  4137                           
  4138                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4139   001EA8  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4140   001EAC                     
  4141                           ;i2c.c: 57:   tmp = SSP2BUF;
  4142   001EAC  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4143                           
  4144                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4145   001EB0  EC85  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4146   001EB4                     
  4147                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4148   001EB4  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  4149   001EB6  B4D8               	btfsc	status,2,c
  4150   001EB8  EF60  F00F         	goto	u1271
  4151   001EBC  EF64  F00F         	goto	u1270
  4152   001EC0                     u1271:
  4153   001EC0  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4154   001EC2  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  4155   001EC4  EF65  F00F         	goto	u1288
  4156   001EC8                     u1270:
  4157   001EC8  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4158   001ECA                     u1288:
  4159   001ECA  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  4160   001ECC  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  4161   001ECE  010E               	movlb	14	; () banked
  4162   001ED0  51DA               	movf	218,w,b	;volatile
  4163   001ED2  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4164   001ED4  0BDF               	andlw	-33
  4165   001ED6  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4166   001ED8  6FDA               	movwf	218,b	;volatile
  4167   001EDA                     
  4168                           ; BSR set to: 14
  4169                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4170   001EDA  89DA               	bsf	218,4,b	;volatile
  4171   001EDC                     
  4172                           ; BSR set to: 14
  4173                           ;i2c.c: 61:   return tmp;
  4174   001EDC  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  4175   001EDE                     
  4176                           ; BSR set to: 14
  4177   001EDE  0012               	return		;funcret
  4178   001EE0                     __end_of_I2C_2_Master_Read:
  4179                           	callstack 0
  4180                           
  4181 ;; *************** function _I2C_2_Master_Idle *****************
  4182 ;; Defined at:
  4183 ;;		line 22 in file "i2c.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4201 ;;Total ram usage:        1 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; Hardware stack levels required when called: 2
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_I2C_2_Master_Start
  4208 ;;		_I2C_2_Master_RepStart
  4209 ;;		_I2C_2_Master_Stop
  4210 ;;		_I2C_2_Master_Write
  4211 ;;		_I2C_2_Master_Read
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text24
  4216   001F0A                     __ptext24:
  4217                           	callstack 0
  4218   001F0A                     _I2C_2_Master_Idle:
  4219                           	callstack 25
  4220   001F0A                     l343:
  4221   001F0A  010E               	movlb	14	; () banked
  4222   001F0C  B5D8               	btfsc	216,2,b	;volatile
  4223   001F0E  EF8B  F00F         	goto	u1251
  4224   001F12  EF8D  F00F         	goto	u1250
  4225   001F16                     u1251:
  4226   001F16  EF85  F00F         	goto	l343
  4227   001F1A                     u1250:
  4228   001F1A                     
  4229                           ; BSR set to: 14
  4230   001F1A  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4231   001F1E  0E1F               	movlw	31
  4232   001F20  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4233   001F22  A4D8               	btfss	status,2,c
  4234   001F24  EF96  F00F         	goto	u1261
  4235   001F28  EF98  F00F         	goto	u1260
  4236   001F2C                     u1261:
  4237   001F2C  EF85  F00F         	goto	l343
  4238   001F30                     u1260:
  4239   001F30                     
  4240                           ; BSR set to: 14
  4241   001F30  0012               	return		;funcret
  4242   001F32                     __end_of_I2C_2_Master_Idle:
  4243                           	callstack 0
  4244                           
  4245 ;; *************** function _I2C_2_Master_Init *****************
  4246 ;; Defined at:
  4247 ;;		line 4 in file "i2c.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used: 1
  4267 ;; Hardware stack levels required when called: 2
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_color_click_init
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text25
  4276   001EE0                     __ptext25:
  4277                           	callstack 0
  4278   001EE0                     _I2C_2_Master_Init:
  4279                           	callstack 27
  4280   001EE0                     
  4281                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4282   001EE0  010E               	movlb	14	; () banked
  4283   001EE2  51D9               	movf	217,w,b	;volatile
  4284   001EE4  0BF0               	andlw	-16
  4285   001EE6  0908               	iorlw	8
  4286   001EE8  6FD9               	movwf	217,b	;volatile
  4287   001EEA                     
  4288                           ; BSR set to: 14
  4289                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4290   001EEA  8BD9               	bsf	217,5,b	;volatile
  4291                           
  4292                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4293   001EEC  0E9F               	movlw	159
  4294   001EEE  6FD6               	movwf	214,b	;volatile
  4295   001EF0                     
  4296                           ; BSR set to: 14
  4297                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4298   001EF0  8A84               	bsf	132,5,c	;volatile
  4299   001EF2                     
  4300                           ; BSR set to: 14
  4301                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4302   001EF2  8C84               	bsf	132,6,c	;volatile
  4303   001EF4                     
  4304                           ; BSR set to: 14
  4305                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4306   001EF4  9BA7               	bcf	167,5,b	;volatile
  4307   001EF6                     
  4308                           ; BSR set to: 14
  4309                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4310   001EF6  9DA7               	bcf	167,6,b	;volatile
  4311                           
  4312                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4313   001EF8  0E1D               	movlw	29
  4314   001EFA  6F1D               	movwf	29,b	;volatile
  4315                           
  4316                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4317   001EFC  0E1E               	movlw	30
  4318   001EFE  6F1C               	movwf	28,b	;volatile
  4319                           
  4320                           ;i2c.c: 18:   RD5PPS=0x1C;
  4321   001F00  0E1C               	movlw	28
  4322   001F02  6F6F               	movwf	111,b	;volatile
  4323                           
  4324                           ;i2c.c: 19:   RD6PPS=0x1B;
  4325   001F04  0E1B               	movlw	27
  4326   001F06  6F70               	movwf	112,b	;volatile
  4327   001F08                     
  4328                           ; BSR set to: 14
  4329   001F08  0012               	return		;funcret
  4330   001F0A                     __end_of_I2C_2_Master_Init:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _add_seconds_to_list *****************
  4334 ;; Defined at:
  4335 ;;		line 436 in file "dc_motor.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4352 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4353 ;;Total ram usage:        2 bytes
  4354 ;; Hardware stack levels used: 1
  4355 ;; Hardware stack levels required when called: 2
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_main
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text26
  4364   001E12                     __ptext26:
  4365                           	callstack 0
  4366   001E12                     _add_seconds_to_list:
  4367                           	callstack 28
  4368   001E12                     
  4369                           ;dc_motor.c: 438:     if (seconds > 22)
  4370   001E12  BE56               	btfsc	(_seconds+1)^0,7,c
  4371   001E14  EF15  F00F         	goto	u2001
  4372   001E18  5056               	movf	(_seconds+1)^0,w,c
  4373   001E1A  E109               	bnz	u2000
  4374   001E1C  0E17               	movlw	23
  4375   001E1E  5C55               	subwf	_seconds^0,w,c
  4376   001E20  A0D8               	btfss	status,0,c
  4377   001E22  EF15  F00F         	goto	u2001
  4378   001E26  EF17  F00F         	goto	u2000
  4379   001E2A                     u2001:
  4380   001E2A  EF2C  F00F         	goto	l297
  4381   001E2E                     u2000:
  4382   001E2E                     
  4383                           ;dc_motor.c: 439:     {;dc_motor.c: 440:         movement_list[index] = seconds - 11;
  4384   001E2E  0EF5               	movlw	245
  4385   001E30  2455               	addwf	_seconds^0,w,c
  4386   001E32  6E01               	movwf	??_add_seconds_to_list^0,c
  4387   001E34  0EFF               	movlw	255
  4388   001E36  2056               	addwfc	(_seconds+1)^0,w,c
  4389   001E38  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4390   001E3A  90D8               	bcf	status,0,c
  4391   001E3C  3453               	rlcf	_index^0,w,c
  4392   001E3E  6ED9               	movwf	fsr2l,c
  4393   001E40  3454               	rlcf	(_index+1)^0,w,c
  4394   001E42  6EDA               	movwf	fsr2h,c
  4395   001E44  0E00               	movlw	low _movement_list
  4396   001E46  26D9               	addwf	fsr2l,f,c
  4397   001E48  0E02               	movlw	high _movement_list
  4398   001E4A  22DA               	addwfc	fsr2h,f,c
  4399   001E4C  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4400   001E50  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4401   001E54                     
  4402                           ;dc_motor.c: 441:         index++;
  4403   001E54  4A53               	infsnz	_index^0,f,c
  4404   001E56  2A54               	incf	(_index+1)^0,f,c
  4405   001E58                     l297:
  4406   001E58  0012               	return		;funcret
  4407   001E5A                     __end_of_add_seconds_to_list:
  4408                           	callstack 0
  4409                           
  4410 ;; *************** function _Timer0_init *****************
  4411 ;; Defined at:
  4412 ;;		line 7 in file "timers.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;		None
  4415 ;; Auto vars:     Size  Location     Type
  4416 ;;		None
  4417 ;; Return value:  Size  Location     Type
  4418 ;;                  1    wreg      void 
  4419 ;; Registers used:
  4420 ;;		wreg, status,2
  4421 ;; Tracked objects:
  4422 ;;		On entry : 0/0
  4423 ;;		On exit  : 0/0
  4424 ;;		Unchanged: 0/0
  4425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4430 ;;Total ram usage:        0 bytes
  4431 ;; Hardware stack levels used: 1
  4432 ;; Hardware stack levels required when called: 2
  4433 ;; This function calls:
  4434 ;;		Nothing
  4435 ;; This function is called by:
  4436 ;;		_main
  4437 ;; This function uses a non-reentrant model
  4438 ;;
  4439                           
  4440                           	psect	text27
  4441   001F78                     __ptext27:
  4442                           	callstack 0
  4443   001F78                     _Timer0_init:
  4444                           	callstack 28
  4445   001F78                     
  4446                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4447   001F78  50D6               	movf	214,w,c	;volatile
  4448   001F7A  0B1F               	andlw	-225
  4449   001F7C  0940               	iorlw	64
  4450   001F7E  6ED6               	movwf	214,c	;volatile
  4451   001F80                     
  4452                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4453   001F80  88D6               	bsf	214,4,c	;volatile
  4454                           
  4455                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4456   001F82  50D6               	movf	214,w,c	;volatile
  4457   001F84  0BF0               	andlw	-16
  4458   001F86  0908               	iorlw	8
  4459   001F88  6ED6               	movwf	214,c	;volatile
  4460                           
  4461                           ;timers.c: 13:     TMR0H=0b11100111;
  4462   001F8A  0EE7               	movlw	231
  4463   001F8C  6ED4               	movwf	212,c	;volatile
  4464                           
  4465                           ;timers.c: 14:     TMR0L=0b10010101;
  4466   001F8E  0E95               	movlw	149
  4467   001F90  6ED3               	movwf	211,c	;volatile
  4468   001F92                     
  4469                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4470   001F92  88D5               	bsf	213,4,c	;volatile
  4471   001F94                     
  4472                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4473   001F94  8ED5               	bsf	213,7,c	;volatile
  4474   001F96  0012               	return		;funcret
  4475   001F98                     __end_of_Timer0_init:
  4476                           	callstack 0
  4477                           
  4478 ;; *************** function _RobotMovement *****************
  4479 ;; Defined at:
  4480 ;;		line 303 in file "dc_motor.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  color           2   29[COMRAM] unsigned int 
  4483 ;;  motorL          2   31[COMRAM] PTR struct DC_motor
  4484 ;;		 -> main@motorL(9), 
  4485 ;;  motorR          2   33[COMRAM] PTR struct DC_motor
  4486 ;;		 -> main@motorR(9), 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;  i               2   39[COMRAM] int 
  4489 ;;  i               2   37[COMRAM] int 
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4499 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;Total ram usage:       12 bytes
  4504 ;; Hardware stack levels used: 1
  4505 ;; Hardware stack levels required when called: 5
  4506 ;; This function calls:
  4507 ;;		_TimedfullSpeedAhead
  4508 ;;		_moveBack
  4509 ;;		_stop
  4510 ;;		_turnLeft
  4511 ;;		_turnLeftLong
  4512 ;;		_turnRight
  4513 ;;		_turnRightLong
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text28
  4520   000032                     __ptext28:
  4521                           	callstack 0
  4522   000032                     _RobotMovement:
  4523                           	callstack 25
  4524   000032                     
  4525                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 305:     moveBack(motorL, motorR, 11);
  4526   000032  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4527   000036  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4528   00003A  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4529   00003E  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4530   000042  0E00               	movlw	0
  4531   000044  6E19               	movwf	(moveBack@time+1)^0,c
  4532   000046  0E0B               	movlw	11
  4533   000048  6E18               	movwf	moveBack@time^0,c
  4534   00004A  EC04  F00D         	call	_moveBack	;wreg free
  4535                           
  4536                           ;dc_motor.c: 306:     stop(motorL,motorR);
  4537   00004E  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4538   000052  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4539   000056  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4540   00005A  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4541   00005E  ECE4  F00E         	call	_stop	;wreg free
  4542   000062                     
  4543                           ;dc_motor.c: 309:     if(color == 0){
  4544   000062  501E               	movf	RobotMovement@color^0,w,c
  4545   000064  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4546   000066  A4D8               	btfss	status,2,c
  4547   000068  EF38  F000         	goto	u1831
  4548   00006C  EF3A  F000         	goto	u1830
  4549   000070                     u1831:
  4550   000070  EF53  F000         	goto	l2850
  4551   000074                     u1830:
  4552   000074                     
  4553                           ;dc_motor.c: 310:         turnRight(motorL, motorR);
  4554   000074  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4555   000078  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4556   00007C  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4557   000080  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4558   000084  EC6F  F008         	call	_turnRight	;wreg free
  4559   000088                     
  4560                           ;dc_motor.c: 311:         movement_list[index] = -1;
  4561   000088  90D8               	bcf	status,0,c
  4562   00008A  3453               	rlcf	_index^0,w,c
  4563   00008C  6ED9               	movwf	fsr2l,c
  4564   00008E  3454               	rlcf	(_index+1)^0,w,c
  4565   000090  6EDA               	movwf	fsr2h,c
  4566   000092  0E00               	movlw	low _movement_list
  4567   000094  26D9               	addwf	fsr2l,f,c
  4568   000096  0E02               	movlw	high _movement_list
  4569   000098  22DA               	addwfc	fsr2h,f,c
  4570   00009A  0EFF               	movlw	255
  4571   00009C  6EDE               	movwf	postinc2,c
  4572   00009E  0EFF               	movlw	255
  4573   0000A0  6EDD               	movwf	postdec2,c
  4574   0000A2                     
  4575                           ;dc_motor.c: 312:         index++;
  4576   0000A2  4A53               	infsnz	_index^0,f,c
  4577   0000A4  2A54               	incf	(_index+1)^0,f,c
  4578   0000A6                     l2850:
  4579                           
  4580                           ;dc_motor.c: 315:     if(color == 1){
  4581   0000A6  041E               	decf	RobotMovement@color^0,w,c
  4582   0000A8  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4583   0000AA  A4D8               	btfss	status,2,c
  4584   0000AC  EF5A  F000         	goto	u1841
  4585   0000B0  EF5C  F000         	goto	u1840
  4586   0000B4                     u1841:
  4587   0000B4  EF75  F000         	goto	l2858
  4588   0000B8                     u1840:
  4589   0000B8                     
  4590                           ;dc_motor.c: 316:         turnLeft(motorL, motorR);
  4591   0000B8  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4592   0000BC  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4593   0000C0  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4594   0000C4  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4595   0000C8  ECC2  F007         	call	_turnLeft	;wreg free
  4596   0000CC                     
  4597                           ;dc_motor.c: 317:         movement_list[index] = -2;
  4598   0000CC  90D8               	bcf	status,0,c
  4599   0000CE  3453               	rlcf	_index^0,w,c
  4600   0000D0  6ED9               	movwf	fsr2l,c
  4601   0000D2  3454               	rlcf	(_index+1)^0,w,c
  4602   0000D4  6EDA               	movwf	fsr2h,c
  4603   0000D6  0E00               	movlw	low _movement_list
  4604   0000D8  26D9               	addwf	fsr2l,f,c
  4605   0000DA  0E02               	movlw	high _movement_list
  4606   0000DC  22DA               	addwfc	fsr2h,f,c
  4607   0000DE  0EFE               	movlw	254
  4608   0000E0  6EDE               	movwf	postinc2,c
  4609   0000E2  0EFF               	movlw	255
  4610   0000E4  6EDD               	movwf	postdec2,c
  4611   0000E6                     
  4612                           ;dc_motor.c: 318:         index++;
  4613   0000E6  4A53               	infsnz	_index^0,f,c
  4614   0000E8  2A54               	incf	(_index+1)^0,f,c
  4615   0000EA                     l2858:
  4616                           
  4617                           ;dc_motor.c: 321:     if(color == 2){
  4618   0000EA  0E02               	movlw	2
  4619   0000EC  181E               	xorwf	RobotMovement@color^0,w,c
  4620   0000EE  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4621   0000F0  A4D8               	btfss	status,2,c
  4622   0000F2  EF7D  F000         	goto	u1851
  4623   0000F6  EF7F  F000         	goto	u1850
  4624   0000FA                     u1851:
  4625   0000FA  EFAC  F000         	goto	l2876
  4626   0000FE                     u1850:
  4627   0000FE                     
  4628                           ;dc_motor.c: 322:         int i;;dc_motor.c: 323:         for (i=0;i<2;i++){
  4629   0000FE  0E00               	movlw	0
  4630   000100  6E27               	movwf	(RobotMovement@i+1)^0,c
  4631   000102  0E00               	movlw	0
  4632   000104  6E26               	movwf	RobotMovement@i^0,c
  4633   000106                     l2866:
  4634                           
  4635                           ;dc_motor.c: 324:             turnRight(motorL, motorR);
  4636   000106  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4637   00010A  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4638   00010E  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4639   000112  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4640   000116  EC6F  F008         	call	_turnRight	;wreg free
  4641   00011A                     
  4642                           ;dc_motor.c: 325:             movement_list[index] = -1;
  4643   00011A  90D8               	bcf	status,0,c
  4644   00011C  3453               	rlcf	_index^0,w,c
  4645   00011E  6ED9               	movwf	fsr2l,c
  4646   000120  3454               	rlcf	(_index+1)^0,w,c
  4647   000122  6EDA               	movwf	fsr2h,c
  4648   000124  0E00               	movlw	low _movement_list
  4649   000126  26D9               	addwf	fsr2l,f,c
  4650   000128  0E02               	movlw	high _movement_list
  4651   00012A  22DA               	addwfc	fsr2h,f,c
  4652   00012C  0EFF               	movlw	255
  4653   00012E  6EDE               	movwf	postinc2,c
  4654   000130  0EFF               	movlw	255
  4655   000132  6EDD               	movwf	postdec2,c
  4656   000134                     
  4657                           ;dc_motor.c: 326:             index++;
  4658   000134  4A53               	infsnz	_index^0,f,c
  4659   000136  2A54               	incf	(_index+1)^0,f,c
  4660   000138                     
  4661                           ;dc_motor.c: 327:         }
  4662   000138  4A26               	infsnz	RobotMovement@i^0,f,c
  4663   00013A  2A27               	incf	(RobotMovement@i+1)^0,f,c
  4664   00013C  BE27               	btfsc	(RobotMovement@i+1)^0,7,c
  4665   00013E  EFAA  F000         	goto	u1861
  4666   000142  5027               	movf	(RobotMovement@i+1)^0,w,c
  4667   000144  E109               	bnz	u1860
  4668   000146  0E02               	movlw	2
  4669   000148  5C26               	subwf	RobotMovement@i^0,w,c
  4670   00014A  A0D8               	btfss	status,0,c
  4671   00014C  EFAA  F000         	goto	u1861
  4672   000150  EFAC  F000         	goto	u1860
  4673   000154                     u1861:
  4674   000154  EF83  F000         	goto	l2866
  4675   000158                     u1860:
  4676   000158                     l2876:
  4677                           
  4678                           ;dc_motor.c: 330:     if(color == 3){
  4679   000158  0E03               	movlw	3
  4680   00015A  181E               	xorwf	RobotMovement@color^0,w,c
  4681   00015C  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4682   00015E  A4D8               	btfss	status,2,c
  4683   000160  EFB4  F000         	goto	u1871
  4684   000164  EFB6  F000         	goto	u1870
  4685   000168                     u1871:
  4686   000168  EF6E  F001         	goto	l2896
  4687   00016C                     u1870:
  4688   00016C                     
  4689                           ;dc_motor.c: 332:         moveBack(motorL, motorR, 33);
  4690   00016C  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4691   000170  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4692   000174  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4693   000178  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4694   00017C  0E00               	movlw	0
  4695   00017E  6E19               	movwf	(moveBack@time+1)^0,c
  4696   000180  0E21               	movlw	33
  4697   000182  6E18               	movwf	moveBack@time^0,c
  4698   000184  EC04  F00D         	call	_moveBack	;wreg free
  4699                           
  4700                           ;dc_motor.c: 333:         stop(motorL, motorR);
  4701   000188  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4702   00018C  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4703   000190  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4704   000194  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4705   000198  ECE4  F00E         	call	_stop	;wreg free
  4706                           
  4707                           ;dc_motor.c: 334:         turnRight(motorL, motorR);
  4708   00019C  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4709   0001A0  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4710   0001A4  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4711   0001A8  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4712   0001AC  EC6F  F008         	call	_turnRight	;wreg free
  4713   0001B0                     
  4714                           ;dc_motor.c: 336:         if (movement_list[index-1] > 11)
  4715   0001B0  90D8               	bcf	status,0,c
  4716   0001B2  3453               	rlcf	_index^0,w,c
  4717   0001B4  6ED9               	movwf	fsr2l,c
  4718   0001B6  3454               	rlcf	(_index+1)^0,w,c
  4719   0001B8  6EDA               	movwf	fsr2h,c
  4720   0001BA  0EFE               	movlw	low (_movement_list+65534)
  4721   0001BC  26D9               	addwf	fsr2l,f,c
  4722   0001BE  0E01               	movlw	high (_movement_list+65534)
  4723   0001C0  22DA               	addwfc	fsr2h,f,c
  4724   0001C2  0E01               	movlw	1
  4725   0001C4  BEDB               	btfsc	plusw2,7,c
  4726   0001C6  EFEF  F000         	goto	u1881
  4727   0001CA  0E01               	movlw	1
  4728   0001CC  50DB               	movf	plusw2,w,c
  4729   0001CE  E109               	bnz	u1880
  4730   0001D0  0E0C               	movlw	12
  4731   0001D2  5CDE               	subwf	postinc2,w,c
  4732   0001D4  A0D8               	btfss	status,0,c
  4733   0001D6  EFEF  F000         	goto	u1881
  4734   0001DA  EFF1  F000         	goto	u1880
  4735   0001DE                     u1881:
  4736   0001DE  EF0F  F001         	goto	l2886
  4737   0001E2                     u1880:
  4738   0001E2                     
  4739                           ;dc_motor.c: 337:         {;dc_motor.c: 339:             movement_list[index-1] -= 22;
  4740   0001E2  90D8               	bcf	status,0,c
  4741   0001E4  3453               	rlcf	_index^0,w,c
  4742   0001E6  6ED9               	movwf	fsr2l,c
  4743   0001E8  3454               	rlcf	(_index+1)^0,w,c
  4744   0001EA  6EDA               	movwf	fsr2h,c
  4745   0001EC  0EFE               	movlw	low (_movement_list+65534)
  4746   0001EE  26D9               	addwf	fsr2l,f,c
  4747   0001F0  0E01               	movlw	high (_movement_list+65534)
  4748   0001F2  22DA               	addwfc	fsr2h,f,c
  4749   0001F4  0EEA               	movlw	234
  4750   0001F6  26DE               	addwf	postinc2,f,c
  4751   0001F8  0EFF               	movlw	255
  4752   0001FA  22DD               	addwfc	postdec2,f,c
  4753                           
  4754                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4755   0001FC  90D8               	bcf	status,0,c
  4756   0001FE  3453               	rlcf	_index^0,w,c
  4757   000200  6ED9               	movwf	fsr2l,c
  4758   000202  3454               	rlcf	(_index+1)^0,w,c
  4759   000204  6EDA               	movwf	fsr2h,c
  4760   000206  0E00               	movlw	low _movement_list
  4761   000208  26D9               	addwf	fsr2l,f,c
  4762   00020A  0E02               	movlw	high _movement_list
  4763   00020C  22DA               	addwfc	fsr2h,f,c
  4764   00020E  0EFF               	movlw	255
  4765   000210  6EDE               	movwf	postinc2,c
  4766   000212  0EFF               	movlw	255
  4767   000214  6EDD               	movwf	postdec2,c
  4768   000216                     
  4769                           ;dc_motor.c: 342:             index += 1;
  4770   000216  4A53               	infsnz	_index^0,f,c
  4771   000218  2A54               	incf	(_index+1)^0,f,c
  4772                           
  4773                           ;dc_motor.c: 343:         }else{
  4774   00021A  EF6E  F001         	goto	l2896
  4775   00021E                     l2886:
  4776                           
  4777                           ;dc_motor.c: 345:             if (movement_list[index-1] == -1)
  4778   00021E  90D8               	bcf	status,0,c
  4779   000220  3453               	rlcf	_index^0,w,c
  4780   000222  6ED9               	movwf	fsr2l,c
  4781   000224  3454               	rlcf	(_index+1)^0,w,c
  4782   000226  6EDA               	movwf	fsr2h,c
  4783   000228  0EFE               	movlw	low (_movement_list+65534)
  4784   00022A  26D9               	addwf	fsr2l,f,c
  4785   00022C  0E01               	movlw	high (_movement_list+65534)
  4786   00022E  22DA               	addwfc	fsr2h,f,c
  4787   000230  28DE               	incf	postinc2,w,c
  4788   000232  E106               	bnz	u1891
  4789   000234  28DE               	incf	postinc2,w,c
  4790   000236  A4D8               	btfss	status,2,c
  4791   000238  EF20  F001         	goto	u1891
  4792   00023C  EF22  F001         	goto	u1890
  4793   000240                     u1891:
  4794   000240  EF2F  F001         	goto	l277
  4795   000244                     u1890:
  4796   000244                     
  4797                           ;dc_motor.c: 346:             {;dc_motor.c: 348:                 movement_list[index-1] 
      +                          = -2;
  4798   000244  90D8               	bcf	status,0,c
  4799   000246  3453               	rlcf	_index^0,w,c
  4800   000248  6ED9               	movwf	fsr2l,c
  4801   00024A  3454               	rlcf	(_index+1)^0,w,c
  4802   00024C  6EDA               	movwf	fsr2h,c
  4803   00024E  0EFE               	movlw	low (_movement_list+65534)
  4804   000250  26D9               	addwf	fsr2l,f,c
  4805   000252  0E01               	movlw	high (_movement_list+65534)
  4806   000254  22DA               	addwfc	fsr2h,f,c
  4807   000256  0EFE               	movlw	254
  4808   000258  6EDE               	movwf	postinc2,c
  4809   00025A  0EFF               	movlw	255
  4810   00025C  6EDD               	movwf	postdec2,c
  4811   00025E                     l277:
  4812                           
  4813                           ;dc_motor.c: 351:             if (movement_list[index-1] == -2)
  4814   00025E  90D8               	bcf	status,0,c
  4815   000260  3453               	rlcf	_index^0,w,c
  4816   000262  6ED9               	movwf	fsr2l,c
  4817   000264  3454               	rlcf	(_index+1)^0,w,c
  4818   000266  6EDA               	movwf	fsr2h,c
  4819   000268  0EFE               	movlw	low (_movement_list+65534)
  4820   00026A  26D9               	addwf	fsr2l,f,c
  4821   00026C  0E01               	movlw	high (_movement_list+65534)
  4822   00026E  22DA               	addwfc	fsr2h,f,c
  4823   000270  0EFE               	movlw	254
  4824   000272  18DE               	xorwf	postinc2,w,c
  4825   000274  E106               	bnz	u1901
  4826   000276  28DE               	incf	postinc2,w,c
  4827   000278  A4D8               	btfss	status,2,c
  4828   00027A  EF41  F001         	goto	u1901
  4829   00027E  EF43  F001         	goto	u1900
  4830   000282                     u1901:
  4831   000282  EF50  F001         	goto	l278
  4832   000286                     u1900:
  4833   000286                     
  4834                           ;dc_motor.c: 352:             {;dc_motor.c: 354:                 movement_list[index-1] 
      +                          = -1;
  4835   000286  90D8               	bcf	status,0,c
  4836   000288  3453               	rlcf	_index^0,w,c
  4837   00028A  6ED9               	movwf	fsr2l,c
  4838   00028C  3454               	rlcf	(_index+1)^0,w,c
  4839   00028E  6EDA               	movwf	fsr2h,c
  4840   000290  0EFE               	movlw	low (_movement_list+65534)
  4841   000292  26D9               	addwf	fsr2l,f,c
  4842   000294  0E01               	movlw	high (_movement_list+65534)
  4843   000296  22DA               	addwfc	fsr2h,f,c
  4844   000298  0EFF               	movlw	255
  4845   00029A  6EDE               	movwf	postinc2,c
  4846   00029C  0EFF               	movlw	255
  4847   00029E  6EDD               	movwf	postdec2,c
  4848   0002A0                     l278:
  4849                           
  4850                           ;dc_motor.c: 357:         movement_list[index] = 22;
  4851   0002A0  90D8               	bcf	status,0,c
  4852   0002A2  3453               	rlcf	_index^0,w,c
  4853   0002A4  6ED9               	movwf	fsr2l,c
  4854   0002A6  3454               	rlcf	(_index+1)^0,w,c
  4855   0002A8  6EDA               	movwf	fsr2h,c
  4856   0002AA  0E00               	movlw	low _movement_list
  4857   0002AC  26D9               	addwf	fsr2l,f,c
  4858   0002AE  0E02               	movlw	high _movement_list
  4859   0002B0  22DA               	addwfc	fsr2h,f,c
  4860   0002B2  0E16               	movlw	22
  4861   0002B4  6EDE               	movwf	postinc2,c
  4862   0002B6  0E00               	movlw	0
  4863   0002B8  6EDD               	movwf	postdec2,c
  4864   0002BA                     
  4865                           ;dc_motor.c: 358:         index += 1;
  4866   0002BA  4A53               	infsnz	_index^0,f,c
  4867   0002BC  2A54               	incf	(_index+1)^0,f,c
  4868   0002BE                     
  4869                           ;dc_motor.c: 360:         movement_list[index] = -2;
  4870   0002BE  90D8               	bcf	status,0,c
  4871   0002C0  3453               	rlcf	_index^0,w,c
  4872   0002C2  6ED9               	movwf	fsr2l,c
  4873   0002C4  3454               	rlcf	(_index+1)^0,w,c
  4874   0002C6  6EDA               	movwf	fsr2h,c
  4875   0002C8  0E00               	movlw	low _movement_list
  4876   0002CA  26D9               	addwf	fsr2l,f,c
  4877   0002CC  0E02               	movlw	high _movement_list
  4878   0002CE  22DA               	addwfc	fsr2h,f,c
  4879   0002D0  0EFE               	movlw	254
  4880   0002D2  6EDE               	movwf	postinc2,c
  4881   0002D4  0EFF               	movlw	255
  4882   0002D6  6EDD               	movwf	postdec2,c
  4883                           
  4884                           ;dc_motor.c: 361:         index += 1;
  4885   0002D8  4A53               	infsnz	_index^0,f,c
  4886   0002DA  2A54               	incf	(_index+1)^0,f,c
  4887   0002DC                     l2896:
  4888                           
  4889                           ;dc_motor.c: 366:     if(color == 4){
  4890   0002DC  0E04               	movlw	4
  4891   0002DE  181E               	xorwf	RobotMovement@color^0,w,c
  4892   0002E0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4893   0002E2  A4D8               	btfss	status,2,c
  4894   0002E4  EF76  F001         	goto	u1911
  4895   0002E8  EF78  F001         	goto	u1910
  4896   0002EC                     u1911:
  4897   0002EC  EF30  F002         	goto	l2916
  4898   0002F0                     u1910:
  4899   0002F0                     
  4900                           ;dc_motor.c: 368:         moveBack(motorL, motorR, 33);
  4901   0002F0  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4902   0002F4  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4903   0002F8  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4904   0002FC  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4905   000300  0E00               	movlw	0
  4906   000302  6E19               	movwf	(moveBack@time+1)^0,c
  4907   000304  0E21               	movlw	33
  4908   000306  6E18               	movwf	moveBack@time^0,c
  4909   000308  EC04  F00D         	call	_moveBack	;wreg free
  4910                           
  4911                           ;dc_motor.c: 369:         stop(motorL, motorR);
  4912   00030C  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4913   000310  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4914   000314  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4915   000318  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4916   00031C  ECE4  F00E         	call	_stop	;wreg free
  4917                           
  4918                           ;dc_motor.c: 370:         turnLeft(motorL, motorR);
  4919   000320  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4920   000324  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4921   000328  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4922   00032C  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4923   000330  ECC2  F007         	call	_turnLeft	;wreg free
  4924   000334                     
  4925                           ;dc_motor.c: 372:         if (movement_list[index-1] > 11)
  4926   000334  90D8               	bcf	status,0,c
  4927   000336  3453               	rlcf	_index^0,w,c
  4928   000338  6ED9               	movwf	fsr2l,c
  4929   00033A  3454               	rlcf	(_index+1)^0,w,c
  4930   00033C  6EDA               	movwf	fsr2h,c
  4931   00033E  0EFE               	movlw	low (_movement_list+65534)
  4932   000340  26D9               	addwf	fsr2l,f,c
  4933   000342  0E01               	movlw	high (_movement_list+65534)
  4934   000344  22DA               	addwfc	fsr2h,f,c
  4935   000346  0E01               	movlw	1
  4936   000348  BEDB               	btfsc	plusw2,7,c
  4937   00034A  EFB1  F001         	goto	u1921
  4938   00034E  0E01               	movlw	1
  4939   000350  50DB               	movf	plusw2,w,c
  4940   000352  E109               	bnz	u1920
  4941   000354  0E0C               	movlw	12
  4942   000356  5CDE               	subwf	postinc2,w,c
  4943   000358  A0D8               	btfss	status,0,c
  4944   00035A  EFB1  F001         	goto	u1921
  4945   00035E  EFB3  F001         	goto	u1920
  4946   000362                     u1921:
  4947   000362  EFD1  F001         	goto	l2906
  4948   000366                     u1920:
  4949   000366                     
  4950                           ;dc_motor.c: 373:         {;dc_motor.c: 375:             movement_list[index-1] -= 22;
  4951   000366  90D8               	bcf	status,0,c
  4952   000368  3453               	rlcf	_index^0,w,c
  4953   00036A  6ED9               	movwf	fsr2l,c
  4954   00036C  3454               	rlcf	(_index+1)^0,w,c
  4955   00036E  6EDA               	movwf	fsr2h,c
  4956   000370  0EFE               	movlw	low (_movement_list+65534)
  4957   000372  26D9               	addwf	fsr2l,f,c
  4958   000374  0E01               	movlw	high (_movement_list+65534)
  4959   000376  22DA               	addwfc	fsr2h,f,c
  4960   000378  0EEA               	movlw	234
  4961   00037A  26DE               	addwf	postinc2,f,c
  4962   00037C  0EFF               	movlw	255
  4963   00037E  22DD               	addwfc	postdec2,f,c
  4964                           
  4965                           ;dc_motor.c: 377:             movement_list[index] = -2;
  4966   000380  90D8               	bcf	status,0,c
  4967   000382  3453               	rlcf	_index^0,w,c
  4968   000384  6ED9               	movwf	fsr2l,c
  4969   000386  3454               	rlcf	(_index+1)^0,w,c
  4970   000388  6EDA               	movwf	fsr2h,c
  4971   00038A  0E00               	movlw	low _movement_list
  4972   00038C  26D9               	addwf	fsr2l,f,c
  4973   00038E  0E02               	movlw	high _movement_list
  4974   000390  22DA               	addwfc	fsr2h,f,c
  4975   000392  0EFE               	movlw	254
  4976   000394  6EDE               	movwf	postinc2,c
  4977   000396  0EFF               	movlw	255
  4978   000398  6EDD               	movwf	postdec2,c
  4979   00039A                     
  4980                           ;dc_motor.c: 378:             index += 1;
  4981   00039A  4A53               	infsnz	_index^0,f,c
  4982   00039C  2A54               	incf	(_index+1)^0,f,c
  4983                           
  4984                           ;dc_motor.c: 379:         }else{
  4985   00039E  EF30  F002         	goto	l2916
  4986   0003A2                     l2906:
  4987                           
  4988                           ;dc_motor.c: 381:             if (movement_list[index-1] == -1)
  4989   0003A2  90D8               	bcf	status,0,c
  4990   0003A4  3453               	rlcf	_index^0,w,c
  4991   0003A6  6ED9               	movwf	fsr2l,c
  4992   0003A8  3454               	rlcf	(_index+1)^0,w,c
  4993   0003AA  6EDA               	movwf	fsr2h,c
  4994   0003AC  0EFE               	movlw	low (_movement_list+65534)
  4995   0003AE  26D9               	addwf	fsr2l,f,c
  4996   0003B0  0E01               	movlw	high (_movement_list+65534)
  4997   0003B2  22DA               	addwfc	fsr2h,f,c
  4998   0003B4  28DE               	incf	postinc2,w,c
  4999   0003B6  E106               	bnz	u1931
  5000   0003B8  28DE               	incf	postinc2,w,c
  5001   0003BA  A4D8               	btfss	status,2,c
  5002   0003BC  EFE2  F001         	goto	u1931
  5003   0003C0  EFE4  F001         	goto	u1930
  5004   0003C4                     u1931:
  5005   0003C4  EFF1  F001         	goto	l282
  5006   0003C8                     u1930:
  5007   0003C8                     
  5008                           ;dc_motor.c: 382:             {;dc_motor.c: 384:                 movement_list[index-1] 
      +                          = -2;
  5009   0003C8  90D8               	bcf	status,0,c
  5010   0003CA  3453               	rlcf	_index^0,w,c
  5011   0003CC  6ED9               	movwf	fsr2l,c
  5012   0003CE  3454               	rlcf	(_index+1)^0,w,c
  5013   0003D0  6EDA               	movwf	fsr2h,c
  5014   0003D2  0EFE               	movlw	low (_movement_list+65534)
  5015   0003D4  26D9               	addwf	fsr2l,f,c
  5016   0003D6  0E01               	movlw	high (_movement_list+65534)
  5017   0003D8  22DA               	addwfc	fsr2h,f,c
  5018   0003DA  0EFE               	movlw	254
  5019   0003DC  6EDE               	movwf	postinc2,c
  5020   0003DE  0EFF               	movlw	255
  5021   0003E0  6EDD               	movwf	postdec2,c
  5022   0003E2                     l282:
  5023                           
  5024                           ;dc_motor.c: 387:             if (movement_list[index-1] == -2)
  5025   0003E2  90D8               	bcf	status,0,c
  5026   0003E4  3453               	rlcf	_index^0,w,c
  5027   0003E6  6ED9               	movwf	fsr2l,c
  5028   0003E8  3454               	rlcf	(_index+1)^0,w,c
  5029   0003EA  6EDA               	movwf	fsr2h,c
  5030   0003EC  0EFE               	movlw	low (_movement_list+65534)
  5031   0003EE  26D9               	addwf	fsr2l,f,c
  5032   0003F0  0E01               	movlw	high (_movement_list+65534)
  5033   0003F2  22DA               	addwfc	fsr2h,f,c
  5034   0003F4  0EFE               	movlw	254
  5035   0003F6  18DE               	xorwf	postinc2,w,c
  5036   0003F8  E106               	bnz	u1941
  5037   0003FA  28DE               	incf	postinc2,w,c
  5038   0003FC  A4D8               	btfss	status,2,c
  5039   0003FE  EF03  F002         	goto	u1941
  5040   000402  EF05  F002         	goto	u1940
  5041   000406                     u1941:
  5042   000406  EF12  F002         	goto	l283
  5043   00040A                     u1940:
  5044   00040A                     
  5045                           ;dc_motor.c: 388:             {;dc_motor.c: 390:                 movement_list[index-1] 
      +                          = -1;
  5046   00040A  90D8               	bcf	status,0,c
  5047   00040C  3453               	rlcf	_index^0,w,c
  5048   00040E  6ED9               	movwf	fsr2l,c
  5049   000410  3454               	rlcf	(_index+1)^0,w,c
  5050   000412  6EDA               	movwf	fsr2h,c
  5051   000414  0EFE               	movlw	low (_movement_list+65534)
  5052   000416  26D9               	addwf	fsr2l,f,c
  5053   000418  0E01               	movlw	high (_movement_list+65534)
  5054   00041A  22DA               	addwfc	fsr2h,f,c
  5055   00041C  0EFF               	movlw	255
  5056   00041E  6EDE               	movwf	postinc2,c
  5057   000420  0EFF               	movlw	255
  5058   000422  6EDD               	movwf	postdec2,c
  5059   000424                     l283:
  5060                           
  5061                           ;dc_motor.c: 393:         movement_list[index] = 22;
  5062   000424  90D8               	bcf	status,0,c
  5063   000426  3453               	rlcf	_index^0,w,c
  5064   000428  6ED9               	movwf	fsr2l,c
  5065   00042A  3454               	rlcf	(_index+1)^0,w,c
  5066   00042C  6EDA               	movwf	fsr2h,c
  5067   00042E  0E00               	movlw	low _movement_list
  5068   000430  26D9               	addwf	fsr2l,f,c
  5069   000432  0E02               	movlw	high _movement_list
  5070   000434  22DA               	addwfc	fsr2h,f,c
  5071   000436  0E16               	movlw	22
  5072   000438  6EDE               	movwf	postinc2,c
  5073   00043A  0E00               	movlw	0
  5074   00043C  6EDD               	movwf	postdec2,c
  5075   00043E                     
  5076                           ;dc_motor.c: 394:         index += 1;
  5077   00043E  4A53               	infsnz	_index^0,f,c
  5078   000440  2A54               	incf	(_index+1)^0,f,c
  5079   000442                     
  5080                           ;dc_motor.c: 396:         movement_list[index] = -1;
  5081   000442  90D8               	bcf	status,0,c
  5082   000444  3453               	rlcf	_index^0,w,c
  5083   000446  6ED9               	movwf	fsr2l,c
  5084   000448  3454               	rlcf	(_index+1)^0,w,c
  5085   00044A  6EDA               	movwf	fsr2h,c
  5086   00044C  0E00               	movlw	low _movement_list
  5087   00044E  26D9               	addwf	fsr2l,f,c
  5088   000450  0E02               	movlw	high _movement_list
  5089   000452  22DA               	addwfc	fsr2h,f,c
  5090   000454  0EFF               	movlw	255
  5091   000456  6EDE               	movwf	postinc2,c
  5092   000458  0EFF               	movlw	255
  5093   00045A  6EDD               	movwf	postdec2,c
  5094                           
  5095                           ;dc_motor.c: 397:         index += 1;
  5096   00045C  4A53               	infsnz	_index^0,f,c
  5097   00045E  2A54               	incf	(_index+1)^0,f,c
  5098   000460                     l2916:
  5099                           
  5100                           ;dc_motor.c: 401:     if(color == 5){
  5101   000460  0E05               	movlw	5
  5102   000462  181E               	xorwf	RobotMovement@color^0,w,c
  5103   000464  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5104   000466  A4D8               	btfss	status,2,c
  5105   000468  EF38  F002         	goto	u1951
  5106   00046C  EF3A  F002         	goto	u1950
  5107   000470                     u1951:
  5108   000470  EF53  F002         	goto	l2924
  5109   000474                     u1950:
  5110   000474                     
  5111                           ;dc_motor.c: 402:         turnRightLong(motorL, motorR);
  5112   000474  C020  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  5113   000478  C021  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5114   00047C  C022  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  5115   000480  C023  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5116   000484  EC52  F00A         	call	_turnRightLong	;wreg free
  5117   000488                     
  5118                           ;dc_motor.c: 403:         movement_list[index] = -3;
  5119   000488  90D8               	bcf	status,0,c
  5120   00048A  3453               	rlcf	_index^0,w,c
  5121   00048C  6ED9               	movwf	fsr2l,c
  5122   00048E  3454               	rlcf	(_index+1)^0,w,c
  5123   000490  6EDA               	movwf	fsr2h,c
  5124   000492  0E00               	movlw	low _movement_list
  5125   000494  26D9               	addwf	fsr2l,f,c
  5126   000496  0E02               	movlw	high _movement_list
  5127   000498  22DA               	addwfc	fsr2h,f,c
  5128   00049A  0EFD               	movlw	253
  5129   00049C  6EDE               	movwf	postinc2,c
  5130   00049E  0EFF               	movlw	255
  5131   0004A0  6EDD               	movwf	postdec2,c
  5132   0004A2                     
  5133                           ;dc_motor.c: 404:         index += 1;
  5134   0004A2  4A53               	infsnz	_index^0,f,c
  5135   0004A4  2A54               	incf	(_index+1)^0,f,c
  5136   0004A6                     l2924:
  5137                           
  5138                           ;dc_motor.c: 407:     if(color == 6){
  5139   0004A6  0E06               	movlw	6
  5140   0004A8  181E               	xorwf	RobotMovement@color^0,w,c
  5141   0004AA  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5142   0004AC  A4D8               	btfss	status,2,c
  5143   0004AE  EF5B  F002         	goto	u1961
  5144   0004B2  EF5D  F002         	goto	u1960
  5145   0004B6                     u1961:
  5146   0004B6  EF76  F002         	goto	l2932
  5147   0004BA                     u1960:
  5148   0004BA                     
  5149                           ;dc_motor.c: 408:         turnLeftLong(motorL, motorR);
  5150   0004BA  C020  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  5151   0004BE  C021  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5152   0004C2  C022  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  5153   0004C6  C023  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5154   0004CA  ECE6  F00A         	call	_turnLeftLong	;wreg free
  5155   0004CE                     
  5156                           ;dc_motor.c: 409:         movement_list[index] = -4;
  5157   0004CE  90D8               	bcf	status,0,c
  5158   0004D0  3453               	rlcf	_index^0,w,c
  5159   0004D2  6ED9               	movwf	fsr2l,c
  5160   0004D4  3454               	rlcf	(_index+1)^0,w,c
  5161   0004D6  6EDA               	movwf	fsr2h,c
  5162   0004D8  0E00               	movlw	low _movement_list
  5163   0004DA  26D9               	addwf	fsr2l,f,c
  5164   0004DC  0E02               	movlw	high _movement_list
  5165   0004DE  22DA               	addwfc	fsr2h,f,c
  5166   0004E0  0EFC               	movlw	252
  5167   0004E2  6EDE               	movwf	postinc2,c
  5168   0004E4  0EFF               	movlw	255
  5169   0004E6  6EDD               	movwf	postdec2,c
  5170   0004E8                     
  5171                           ;dc_motor.c: 410:         index += 1;
  5172   0004E8  4A53               	infsnz	_index^0,f,c
  5173   0004EA  2A54               	incf	(_index+1)^0,f,c
  5174   0004EC                     l2932:
  5175                           
  5176                           ;dc_motor.c: 413:     if(color == 7){
  5177   0004EC  0E07               	movlw	7
  5178   0004EE  181E               	xorwf	RobotMovement@color^0,w,c
  5179   0004F0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5180   0004F2  A4D8               	btfss	status,2,c
  5181   0004F4  EF7E  F002         	goto	u1971
  5182   0004F8  EF80  F002         	goto	u1970
  5183   0004FC                     u1971:
  5184   0004FC  EFA2  F002         	goto	l2948
  5185   000500                     u1970:
  5186   000500                     
  5187                           ;dc_motor.c: 414:         int i;;dc_motor.c: 415:         for (i=0;i<2;i++)
  5188   000500  0E00               	movlw	0
  5189   000502  6E29               	movwf	(RobotMovement@i_1265+1)^0,c
  5190   000504  0E00               	movlw	0
  5191   000506  6E28               	movwf	RobotMovement@i_1265^0,c
  5192   000508                     l2940:
  5193                           
  5194                           ;dc_motor.c: 416:         {;dc_motor.c: 417:             turnRight(motorL, motorR);
  5195   000508  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  5196   00050C  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5197   000510  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  5198   000514  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5199   000518  EC6F  F008         	call	_turnRight	;wreg free
  5200   00051C                     
  5201                           ;dc_motor.c: 418:         }
  5202   00051C  4A28               	infsnz	RobotMovement@i_1265^0,f,c
  5203   00051E  2A29               	incf	(RobotMovement@i_1265+1)^0,f,c
  5204   000520  BE29               	btfsc	(RobotMovement@i_1265+1)^0,7,c
  5205   000522  EF9C  F002         	goto	u1981
  5206   000526  5029               	movf	(RobotMovement@i_1265+1)^0,w,c
  5207   000528  E109               	bnz	u1980
  5208   00052A  0E02               	movlw	2
  5209   00052C  5C28               	subwf	RobotMovement@i_1265^0,w,c
  5210   00052E  A0D8               	btfss	status,0,c
  5211   000530  EF9C  F002         	goto	u1981
  5212   000534  EF9E  F002         	goto	u1980
  5213   000538                     u1981:
  5214   000538  EF84  F002         	goto	l2940
  5215   00053C                     u1980:
  5216   00053C                     
  5217                           ;dc_motor.c: 420:         state = 1;
  5218   00053C  0E00               	movlw	0
  5219   00053E  6E52               	movwf	(_state+1)^0,c
  5220   000540  0E01               	movlw	1
  5221   000542  6E51               	movwf	_state^0,c
  5222   000544                     l2948:
  5223                           
  5224                           ;dc_motor.c: 423:     if (color > 7)
  5225   000544  501F               	movf	(RobotMovement@color+1)^0,w,c
  5226   000546  E109               	bnz	u1990
  5227   000548  0E08               	movlw	8
  5228   00054A  5C1E               	subwf	RobotMovement@color^0,w,c
  5229   00054C  A0D8               	btfss	status,0,c
  5230   00054E  EFAB  F002         	goto	u1991
  5231   000552  EFAD  F002         	goto	u1990
  5232   000556                     u1991:
  5233   000556  EFBB  F002         	goto	l290
  5234   00055A                     u1990:
  5235   00055A                     
  5236                           ;dc_motor.c: 424:     {;dc_motor.c: 425:         TimedfullSpeedAhead(motorL, motorR, 11)
      +                          ;
  5237   00055A  C020  F014         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5238   00055E  C021  F015         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5239   000562  C022  F016         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5240   000566  C023  F017         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5241   00056A  0E00               	movlw	0
  5242   00056C  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5243   00056E  0E0B               	movlw	11
  5244   000570  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  5245   000572  EC3E  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5246   000576                     l290:
  5247   000576  0012               	return		;funcret
  5248   000578                     __end_of_RobotMovement:
  5249                           	callstack 0
  5250                           
  5251 ;; *************** function _turnRightLong *****************
  5252 ;; Defined at:
  5253 ;;		line 231 in file "dc_motor.c"
  5254 ;; Parameters:    Size  Location     Type
  5255 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5256 ;;		 -> main@motorL(9), 
  5257 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5258 ;;		 -> main@motorR(9), 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;  i               2   25[COMRAM] int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5270 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5272 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5273 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5274 ;;Total ram usage:        8 bytes
  5275 ;; Hardware stack levels used: 1
  5276 ;; Hardware stack levels required when called: 4
  5277 ;; This function calls:
  5278 ;;		_setMotorPWM
  5279 ;; This function is called by:
  5280 ;;		_RobotMovement
  5281 ;;		_return_back
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text29
  5286   0014A4                     __ptext29:
  5287                           	callstack 0
  5288   0014A4                     _turnRightLong:
  5289                           	callstack 25
  5290   0014A4                     
  5291                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5292   0014A4  0E00               	movlw	0
  5293   0014A6  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5294   0014A8  0E19               	movlw	25
  5295   0014AA  6E1A               	movwf	turnRightLong@i^0,c
  5296   0014AC                     l2576:
  5297                           
  5298                           ;dc_motor.c: 236:     (*mL).direction=0;
  5299   0014AC  EE20 F001          	lfsr	2,1
  5300   0014B0  5014               	movf	turnRightLong@mL^0,w,c
  5301   0014B2  26D9               	addwf	fsr2l,f,c
  5302   0014B4  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5303   0014B6  22DA               	addwfc	fsr2h,f,c
  5304   0014B8  0E00               	movlw	0
  5305   0014BA  6EDF               	movwf	indf2,c
  5306                           
  5307                           ;dc_motor.c: 237:     (*mR).direction=1;
  5308   0014BC  EE20 F001          	lfsr	2,1
  5309   0014C0  5016               	movf	turnRightLong@mR^0,w,c
  5310   0014C2  26D9               	addwf	fsr2l,f,c
  5311   0014C4  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5312   0014C6  22DA               	addwfc	fsr2h,f,c
  5313   0014C8  0E01               	movlw	1
  5314   0014CA  6EDF               	movwf	indf2,c
  5315   0014CC                     
  5316                           ;dc_motor.c: 238:     (*mL).power=i;
  5317   0014CC  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5318   0014D0  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5319   0014D4  C01A  FFDF         	movff	turnRightLong@i,indf2
  5320   0014D8                     
  5321                           ;dc_motor.c: 239:     (*mR).power=i;
  5322   0014D8  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5323   0014DC  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5324   0014E0  C01A  FFDF         	movff	turnRightLong@i,indf2
  5325   0014E4                     
  5326                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5327   0014E4  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5328   0014E8  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5329   0014EC  EC0C  F007         	call	_setMotorPWM	;wreg free
  5330   0014F0                     
  5331                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5332   0014F0  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5333   0014F4  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5334   0014F8  EC0C  F007         	call	_setMotorPWM	;wreg free
  5335   0014FC                     
  5336                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5337   0014FC  0E0E               	movlw	14
  5338   0014FE  6E19               	movwf	(??_turnRightLong+1)^0,c
  5339   001500  0E12               	movlw	18
  5340   001502  6E18               	movwf	??_turnRightLong^0,c
  5341   001504  0E69               	movlw	105
  5342   001506                     u2647:
  5343   001506  2EE8               	decfsz	wreg,f,c
  5344   001508  D7FE               	bra	u2647
  5345   00150A  2E18               	decfsz	??_turnRightLong^0,f,c
  5346   00150C  D7FC               	bra	u2647
  5347   00150E  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5348   001510  D7FA               	bra	u2647
  5349   001512  F000               	nop	
  5350   001514                     
  5351                           ;dc_motor.c: 243:     }
  5352   001514  0E05               	movlw	5
  5353   001516  261A               	addwf	turnRightLong@i^0,f,c
  5354   001518  0E00               	movlw	0
  5355   00151A  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5356   00151C  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5357   00151E  EF9A  F00A         	goto	u1481
  5358   001522  501B               	movf	(turnRightLong@i+1)^0,w,c
  5359   001524  E109               	bnz	u1480
  5360   001526  0E28               	movlw	40
  5361   001528  5C1A               	subwf	turnRightLong@i^0,w,c
  5362   00152A  A0D8               	btfss	status,0,c
  5363   00152C  EF9A  F00A         	goto	u1481
  5364   001530  EF9C  F00A         	goto	u1480
  5365   001534                     u1481:
  5366   001534  EF56  F00A         	goto	l2576
  5367   001538                     u1480:
  5368   001538                     
  5369                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5370   001538  0E00               	movlw	0
  5371   00153A  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5372   00153C  0E1E               	movlw	30
  5373   00153E  6E1A               	movwf	turnRightLong@i^0,c
  5374   001540                     l2598:
  5375                           
  5376                           ;dc_motor.c: 245:     (*mL).direction=0;
  5377   001540  EE20 F001          	lfsr	2,1
  5378   001544  5014               	movf	turnRightLong@mL^0,w,c
  5379   001546  26D9               	addwf	fsr2l,f,c
  5380   001548  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5381   00154A  22DA               	addwfc	fsr2h,f,c
  5382   00154C  0E00               	movlw	0
  5383   00154E  6EDF               	movwf	indf2,c
  5384                           
  5385                           ;dc_motor.c: 246:     (*mR).direction=1;
  5386   001550  EE20 F001          	lfsr	2,1
  5387   001554  5016               	movf	turnRightLong@mR^0,w,c
  5388   001556  26D9               	addwf	fsr2l,f,c
  5389   001558  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5390   00155A  22DA               	addwfc	fsr2h,f,c
  5391   00155C  0E01               	movlw	1
  5392   00155E  6EDF               	movwf	indf2,c
  5393   001560                     
  5394                           ;dc_motor.c: 247:     (*mL).power=i;
  5395   001560  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5396   001564  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5397   001568  C01A  FFDF         	movff	turnRightLong@i,indf2
  5398   00156C                     
  5399                           ;dc_motor.c: 248:     (*mR).power=i;
  5400   00156C  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5401   001570  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5402   001574  C01A  FFDF         	movff	turnRightLong@i,indf2
  5403   001578                     
  5404                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5405   001578  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5406   00157C  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5407   001580  EC0C  F007         	call	_setMotorPWM	;wreg free
  5408   001584                     
  5409                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5410   001584  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5411   001588  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5412   00158C  EC0C  F007         	call	_setMotorPWM	;wreg free
  5413   001590                     
  5414                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5415   001590  0E0D               	movlw	13
  5416   001592  6E19               	movwf	(??_turnRightLong+1)^0,c
  5417   001594  0EBF               	movlw	191
  5418   001596  6E18               	movwf	??_turnRightLong^0,c
  5419   001598  0E4C               	movlw	76
  5420   00159A                     u2657:
  5421   00159A  2EE8               	decfsz	wreg,f,c
  5422   00159C  D7FE               	bra	u2657
  5423   00159E  2E18               	decfsz	??_turnRightLong^0,f,c
  5424   0015A0  D7FC               	bra	u2657
  5425   0015A2  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5426   0015A4  D7FA               	bra	u2657
  5427   0015A6                     
  5428                           ;dc_motor.c: 253:     }
  5429   0015A6  0EFB               	movlw	251
  5430   0015A8  261A               	addwf	turnRightLong@i^0,f,c
  5431   0015AA  0EFF               	movlw	255
  5432   0015AC  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5433   0015AE  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5434   0015B0  EFE5  F00A         	goto	u1490
  5435   0015B4  501B               	movf	(turnRightLong@i+1)^0,w,c
  5436   0015B6  E107               	bnz	u1491
  5437   0015B8  0E10               	movlw	16
  5438   0015BA  5C1A               	subwf	turnRightLong@i^0,w,c
  5439   0015BC  B0D8               	btfsc	status,0,c
  5440   0015BE  EFE3  F00A         	goto	u1491
  5441   0015C2  EFE5  F00A         	goto	u1490
  5442   0015C6                     u1491:
  5443   0015C6  EFA0  F00A         	goto	l2598
  5444   0015CA                     u1490:
  5445   0015CA  0012               	return		;funcret
  5446   0015CC                     __end_of_turnRightLong:
  5447                           	callstack 0
  5448                           
  5449 ;; *************** function _turnRight *****************
  5450 ;; Defined at:
  5451 ;;		line 154 in file "dc_motor.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5454 ;;		 -> main@motorL(9), 
  5455 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5456 ;;		 -> main@motorR(9), 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  i               2   27[COMRAM] int 
  5459 ;;  k               2   25[COMRAM] int 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      void 
  5462 ;; Registers used:
  5463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5471 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5472 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5473 ;;Total ram usage:       10 bytes
  5474 ;; Hardware stack levels used: 1
  5475 ;; Hardware stack levels required when called: 4
  5476 ;; This function calls:
  5477 ;;		_setMotorPWM
  5478 ;; This function is called by:
  5479 ;;		_RobotMovement
  5480 ;;		_return_back
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text30
  5485   0010DE                     __ptext30:
  5486                           	callstack 0
  5487   0010DE                     _turnRight:
  5488                           	callstack 25
  5489   0010DE                     
  5490                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5491   0010DE  0E00               	movlw	0
  5492   0010E0  6E1B               	movwf	(turnRight@k+1)^0,c
  5493   0010E2  0E00               	movlw	0
  5494   0010E4  6E1A               	movwf	turnRight@k^0,c
  5495   0010E6                     l2478:
  5496                           
  5497                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5498   0010E6  0E00               	movlw	0
  5499   0010E8  6E1D               	movwf	(turnRight@i+1)^0,c
  5500   0010EA  0E1B               	movlw	27
  5501   0010EC  6E1C               	movwf	turnRight@i^0,c
  5502   0010EE                     l2484:
  5503                           
  5504                           ;dc_motor.c: 185:         (*mL).direction=0;
  5505   0010EE  EE20 F001          	lfsr	2,1
  5506   0010F2  5014               	movf	turnRight@mL^0,w,c
  5507   0010F4  26D9               	addwf	fsr2l,f,c
  5508   0010F6  5015               	movf	(turnRight@mL+1)^0,w,c
  5509   0010F8  22DA               	addwfc	fsr2h,f,c
  5510   0010FA  0E00               	movlw	0
  5511   0010FC  6EDF               	movwf	indf2,c
  5512                           
  5513                           ;dc_motor.c: 186:         (*mR).direction=1;
  5514   0010FE  EE20 F001          	lfsr	2,1
  5515   001102  5016               	movf	turnRight@mR^0,w,c
  5516   001104  26D9               	addwf	fsr2l,f,c
  5517   001106  5017               	movf	(turnRight@mR+1)^0,w,c
  5518   001108  22DA               	addwfc	fsr2h,f,c
  5519   00110A  0E01               	movlw	1
  5520   00110C  6EDF               	movwf	indf2,c
  5521   00110E                     
  5522                           ;dc_motor.c: 187:         (*mL).power=i;
  5523   00110E  C014  FFD9         	movff	turnRight@mL,fsr2l
  5524   001112  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5525   001116  C01C  FFDF         	movff	turnRight@i,indf2
  5526   00111A                     
  5527                           ;dc_motor.c: 188:         (*mR).power=i;
  5528   00111A  C016  FFD9         	movff	turnRight@mR,fsr2l
  5529   00111E  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5530   001122  C01C  FFDF         	movff	turnRight@i,indf2
  5531   001126                     
  5532                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5533   001126  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5534   00112A  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5535   00112E  EC0C  F007         	call	_setMotorPWM	;wreg free
  5536   001132                     
  5537                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5538   001132  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5539   001136  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5540   00113A  EC0C  F007         	call	_setMotorPWM	;wreg free
  5541   00113E                     
  5542                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5543   00113E  0E09               	movlw	9
  5544   001140  6E19               	movwf	(??_turnRight+1)^0,c
  5545   001142  0EB0               	movlw	176
  5546   001144  6E18               	movwf	??_turnRight^0,c
  5547   001146  0E58               	movlw	88
  5548   001148                     u2667:
  5549   001148  2EE8               	decfsz	wreg,f,c
  5550   00114A  D7FE               	bra	u2667
  5551   00114C  2E18               	decfsz	??_turnRight^0,f,c
  5552   00114E  D7FC               	bra	u2667
  5553   001150  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5554   001152  D7FA               	bra	u2667
  5555   001154  D000               	nop2	
  5556   001156                     
  5557                           ;dc_motor.c: 192:         }
  5558   001156  0E05               	movlw	5
  5559   001158  261C               	addwf	turnRight@i^0,f,c
  5560   00115A  0E00               	movlw	0
  5561   00115C  221D               	addwfc	(turnRight@i+1)^0,f,c
  5562   00115E  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5563   001160  EFBB  F008         	goto	u1431
  5564   001164  501D               	movf	(turnRight@i+1)^0,w,c
  5565   001166  E109               	bnz	u1430
  5566   001168  0E2A               	movlw	42
  5567   00116A  5C1C               	subwf	turnRight@i^0,w,c
  5568   00116C  A0D8               	btfss	status,0,c
  5569   00116E  EFBB  F008         	goto	u1431
  5570   001172  EFBD  F008         	goto	u1430
  5571   001176                     u1431:
  5572   001176  EF77  F008         	goto	l2484
  5573   00117A                     u1430:
  5574   00117A                     
  5575                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5576   00117A  0E00               	movlw	0
  5577   00117C  6E1D               	movwf	(turnRight@i+1)^0,c
  5578   00117E  0E20               	movlw	32
  5579   001180  6E1C               	movwf	turnRight@i^0,c
  5580   001182                     l2506:
  5581                           
  5582                           ;dc_motor.c: 194:         (*mL).direction=0;
  5583   001182  EE20 F001          	lfsr	2,1
  5584   001186  5014               	movf	turnRight@mL^0,w,c
  5585   001188  26D9               	addwf	fsr2l,f,c
  5586   00118A  5015               	movf	(turnRight@mL+1)^0,w,c
  5587   00118C  22DA               	addwfc	fsr2h,f,c
  5588   00118E  0E00               	movlw	0
  5589   001190  6EDF               	movwf	indf2,c
  5590                           
  5591                           ;dc_motor.c: 195:         (*mR).direction=1;
  5592   001192  EE20 F001          	lfsr	2,1
  5593   001196  5016               	movf	turnRight@mR^0,w,c
  5594   001198  26D9               	addwf	fsr2l,f,c
  5595   00119A  5017               	movf	(turnRight@mR+1)^0,w,c
  5596   00119C  22DA               	addwfc	fsr2h,f,c
  5597   00119E  0E01               	movlw	1
  5598   0011A0  6EDF               	movwf	indf2,c
  5599   0011A2                     
  5600                           ;dc_motor.c: 196:         (*mL).power=i;
  5601   0011A2  C014  FFD9         	movff	turnRight@mL,fsr2l
  5602   0011A6  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5603   0011AA  C01C  FFDF         	movff	turnRight@i,indf2
  5604   0011AE                     
  5605                           ;dc_motor.c: 197:         (*mR).power=i;
  5606   0011AE  C016  FFD9         	movff	turnRight@mR,fsr2l
  5607   0011B2  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5608   0011B6  C01C  FFDF         	movff	turnRight@i,indf2
  5609   0011BA                     
  5610                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5611   0011BA  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5612   0011BE  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5613   0011C2  EC0C  F007         	call	_setMotorPWM	;wreg free
  5614   0011C6                     
  5615                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5616   0011C6  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5617   0011CA  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5618   0011CE  EC0C  F007         	call	_setMotorPWM	;wreg free
  5619   0011D2                     
  5620                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5621   0011D2  0E09               	movlw	9
  5622   0011D4  6E19               	movwf	(??_turnRight+1)^0,c
  5623   0011D6  0E86               	movlw	134
  5624   0011D8  6E18               	movwf	??_turnRight^0,c
  5625   0011DA  0ECA               	movlw	202
  5626   0011DC                     u2677:
  5627   0011DC  2EE8               	decfsz	wreg,f,c
  5628   0011DE  D7FE               	bra	u2677
  5629   0011E0  2E18               	decfsz	??_turnRight^0,f,c
  5630   0011E2  D7FC               	bra	u2677
  5631   0011E4  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5632   0011E6  D7FA               	bra	u2677
  5633   0011E8                     
  5634                           ;dc_motor.c: 202:         }
  5635   0011E8  0EFB               	movlw	251
  5636   0011EA  261C               	addwf	turnRight@i^0,f,c
  5637   0011EC  0EFF               	movlw	255
  5638   0011EE  221D               	addwfc	(turnRight@i+1)^0,f,c
  5639   0011F0  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5640   0011F2  EF06  F009         	goto	u1440
  5641   0011F6  501D               	movf	(turnRight@i+1)^0,w,c
  5642   0011F8  E107               	bnz	u1441
  5643   0011FA  0E12               	movlw	18
  5644   0011FC  5C1C               	subwf	turnRight@i^0,w,c
  5645   0011FE  B0D8               	btfsc	status,0,c
  5646   001200  EF04  F009         	goto	u1441
  5647   001204  EF06  F009         	goto	u1440
  5648   001208                     u1441:
  5649   001208  EFC1  F008         	goto	l2506
  5650   00120C                     u1440:
  5651   00120C                     
  5652                           ;dc_motor.c: 203:     }
  5653   00120C  4A1A               	infsnz	turnRight@k^0,f,c
  5654   00120E  2A1B               	incf	(turnRight@k+1)^0,f,c
  5655   001210  BE1B               	btfsc	(turnRight@k+1)^0,7,c
  5656   001212  EF14  F009         	goto	u1451
  5657   001216  501B               	movf	(turnRight@k+1)^0,w,c
  5658   001218  E109               	bnz	u1450
  5659   00121A  0E02               	movlw	2
  5660   00121C  5C1A               	subwf	turnRight@k^0,w,c
  5661   00121E  A0D8               	btfss	status,0,c
  5662   001220  EF14  F009         	goto	u1451
  5663   001224  EF16  F009         	goto	u1450
  5664   001228                     u1451:
  5665   001228  EF73  F008         	goto	l2478
  5666   00122C                     u1450:
  5667   00122C  0012               	return		;funcret
  5668   00122E                     __end_of_turnRight:
  5669                           	callstack 0
  5670                           
  5671 ;; *************** function _turnLeftLong *****************
  5672 ;; Defined at:
  5673 ;;		line 206 in file "dc_motor.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5676 ;;		 -> main@motorL(9), 
  5677 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5678 ;;		 -> main@motorR(9), 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  i               2   25[COMRAM] int 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  1    wreg      void 
  5683 ;; Registers used:
  5684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5692 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;Total ram usage:        8 bytes
  5695 ;; Hardware stack levels used: 1
  5696 ;; Hardware stack levels required when called: 4
  5697 ;; This function calls:
  5698 ;;		_setMotorPWM
  5699 ;; This function is called by:
  5700 ;;		_RobotMovement
  5701 ;;		_return_back
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           	psect	text31
  5706   0015CC                     __ptext31:
  5707                           	callstack 0
  5708   0015CC                     _turnLeftLong:
  5709                           	callstack 25
  5710   0015CC                     
  5711                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5712   0015CC  0E00               	movlw	0
  5713   0015CE  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5714   0015D0  0E17               	movlw	23
  5715   0015D2  6E1A               	movwf	turnLeftLong@i^0,c
  5716   0015D4                     l2532:
  5717                           
  5718                           ;dc_motor.c: 211:     (*mL).direction=1;
  5719   0015D4  EE20 F001          	lfsr	2,1
  5720   0015D8  5014               	movf	turnLeftLong@mL^0,w,c
  5721   0015DA  26D9               	addwf	fsr2l,f,c
  5722   0015DC  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5723   0015DE  22DA               	addwfc	fsr2h,f,c
  5724   0015E0  0E01               	movlw	1
  5725   0015E2  6EDF               	movwf	indf2,c
  5726                           
  5727                           ;dc_motor.c: 212:     (*mR).direction=0;
  5728   0015E4  EE20 F001          	lfsr	2,1
  5729   0015E8  5016               	movf	turnLeftLong@mR^0,w,c
  5730   0015EA  26D9               	addwf	fsr2l,f,c
  5731   0015EC  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5732   0015EE  22DA               	addwfc	fsr2h,f,c
  5733   0015F0  0E00               	movlw	0
  5734   0015F2  6EDF               	movwf	indf2,c
  5735   0015F4                     
  5736                           ;dc_motor.c: 213:     (*mL).power=i;
  5737   0015F4  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5738   0015F8  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5739   0015FC  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5740   001600                     
  5741                           ;dc_motor.c: 214:     (*mR).power=i;
  5742   001600  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5743   001604  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5744   001608  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5745   00160C                     
  5746                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5747   00160C  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5748   001610  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5749   001614  EC0C  F007         	call	_setMotorPWM	;wreg free
  5750   001618                     
  5751                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5752   001618  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5753   00161C  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5754   001620  EC0C  F007         	call	_setMotorPWM	;wreg free
  5755   001624                     
  5756                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5757   001624  0E0D               	movlw	13
  5758   001626  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5759   001628  0EAA               	movlw	170
  5760   00162A  6E18               	movwf	??_turnLeftLong^0,c
  5761   00162C  0E84               	movlw	132
  5762   00162E                     u2687:
  5763   00162E  2EE8               	decfsz	wreg,f,c
  5764   001630  D7FE               	bra	u2687
  5765   001632  2E18               	decfsz	??_turnLeftLong^0,f,c
  5766   001634  D7FC               	bra	u2687
  5767   001636  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5768   001638  D7FA               	bra	u2687
  5769   00163A  D000               	nop2	
  5770   00163C                     
  5771                           ;dc_motor.c: 218:     }
  5772   00163C  0E05               	movlw	5
  5773   00163E  261A               	addwf	turnLeftLong@i^0,f,c
  5774   001640  0E00               	movlw	0
  5775   001642  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5776   001644  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5777   001646  EF2E  F00B         	goto	u1461
  5778   00164A  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5779   00164C  E109               	bnz	u1460
  5780   00164E  0E26               	movlw	38
  5781   001650  5C1A               	subwf	turnLeftLong@i^0,w,c
  5782   001652  A0D8               	btfss	status,0,c
  5783   001654  EF2E  F00B         	goto	u1461
  5784   001658  EF30  F00B         	goto	u1460
  5785   00165C                     u1461:
  5786   00165C  EFEA  F00A         	goto	l2532
  5787   001660                     u1460:
  5788   001660                     
  5789                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5790   001660  0E00               	movlw	0
  5791   001662  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5792   001664  0E1C               	movlw	28
  5793   001666  6E1A               	movwf	turnLeftLong@i^0,c
  5794   001668                     l2554:
  5795                           
  5796                           ;dc_motor.c: 220:     (*mL).direction=1;
  5797   001668  EE20 F001          	lfsr	2,1
  5798   00166C  5014               	movf	turnLeftLong@mL^0,w,c
  5799   00166E  26D9               	addwf	fsr2l,f,c
  5800   001670  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5801   001672  22DA               	addwfc	fsr2h,f,c
  5802   001674  0E01               	movlw	1
  5803   001676  6EDF               	movwf	indf2,c
  5804                           
  5805                           ;dc_motor.c: 221:     (*mR).direction=0;
  5806   001678  EE20 F001          	lfsr	2,1
  5807   00167C  5016               	movf	turnLeftLong@mR^0,w,c
  5808   00167E  26D9               	addwf	fsr2l,f,c
  5809   001680  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5810   001682  22DA               	addwfc	fsr2h,f,c
  5811   001684  0E00               	movlw	0
  5812   001686  6EDF               	movwf	indf2,c
  5813   001688                     
  5814                           ;dc_motor.c: 222:     (*mL).power=i;
  5815   001688  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5816   00168C  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5817   001690  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5818   001694                     
  5819                           ;dc_motor.c: 223:     (*mR).power=i;
  5820   001694  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5821   001698  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5822   00169C  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5823   0016A0                     
  5824                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5825   0016A0  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5826   0016A4  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5827   0016A8  EC0C  F007         	call	_setMotorPWM	;wreg free
  5828   0016AC                     
  5829                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5830   0016AC  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5831   0016B0  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5832   0016B4  EC0C  F007         	call	_setMotorPWM	;wreg free
  5833   0016B8                     
  5834                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5835   0016B8  0E0D               	movlw	13
  5836   0016BA  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5837   0016BC  0E2D               	movlw	45
  5838   0016BE  6E18               	movwf	??_turnLeftLong^0,c
  5839   0016C0  0ED8               	movlw	216
  5840   0016C2                     u2697:
  5841   0016C2  2EE8               	decfsz	wreg,f,c
  5842   0016C4  D7FE               	bra	u2697
  5843   0016C6  2E18               	decfsz	??_turnLeftLong^0,f,c
  5844   0016C8  D7FC               	bra	u2697
  5845   0016CA  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5846   0016CC  D7FA               	bra	u2697
  5847   0016CE                     
  5848                           ;dc_motor.c: 228:     }
  5849   0016CE  0EFB               	movlw	251
  5850   0016D0  261A               	addwf	turnLeftLong@i^0,f,c
  5851   0016D2  0EFF               	movlw	255
  5852   0016D4  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5853   0016D6  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5854   0016D8  EF79  F00B         	goto	u1470
  5855   0016DC  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5856   0016DE  E107               	bnz	u1471
  5857   0016E0  0E0E               	movlw	14
  5858   0016E2  5C1A               	subwf	turnLeftLong@i^0,w,c
  5859   0016E4  B0D8               	btfsc	status,0,c
  5860   0016E6  EF77  F00B         	goto	u1471
  5861   0016EA  EF79  F00B         	goto	u1470
  5862   0016EE                     u1471:
  5863   0016EE  EF34  F00B         	goto	l2554
  5864   0016F2                     u1470:
  5865   0016F2  0012               	return		;funcret
  5866   0016F4                     __end_of_turnLeftLong:
  5867                           	callstack 0
  5868                           
  5869 ;; *************** function _turnLeft *****************
  5870 ;; Defined at:
  5871 ;;		line 102 in file "dc_motor.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5874 ;;		 -> main@motorL(9), 
  5875 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5876 ;;		 -> main@motorR(9), 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;  i               2   27[COMRAM] int 
  5879 ;;  k               2   25[COMRAM] int 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5890 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5891 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5892 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5893 ;;Total ram usage:       10 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 4
  5896 ;; This function calls:
  5897 ;;		_setMotorPWM
  5898 ;; This function is called by:
  5899 ;;		_RobotMovement
  5900 ;;		_return_back
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text32
  5905   000F84                     __ptext32:
  5906                           	callstack 0
  5907   000F84                     _turnLeft:
  5908                           	callstack 25
  5909   000F84                     
  5910                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5911   000F84  0E00               	movlw	0
  5912   000F86  6E1B               	movwf	(turnLeft@k+1)^0,c
  5913   000F88  0E00               	movlw	0
  5914   000F8A  6E1A               	movwf	turnLeft@k^0,c
  5915                           
  5916                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5917   000F8C  0E00               	movlw	0
  5918   000F8E  6E1B               	movwf	(turnLeft@k+1)^0,c
  5919   000F90  0E00               	movlw	0
  5920   000F92  6E1A               	movwf	turnLeft@k^0,c
  5921   000F94                     l2424:
  5922                           
  5923                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  5924   000F94  0E00               	movlw	0
  5925   000F96  6E1D               	movwf	(turnLeft@i+1)^0,c
  5926   000F98  0E2F               	movlw	47
  5927   000F9A  6E1C               	movwf	turnLeft@i^0,c
  5928   000F9C                     l2430:
  5929                           
  5930                           ;dc_motor.c: 133:         (*mL).direction=1;
  5931   000F9C  EE20 F001          	lfsr	2,1
  5932   000FA0  5014               	movf	turnLeft@mL^0,w,c
  5933   000FA2  26D9               	addwf	fsr2l,f,c
  5934   000FA4  5015               	movf	(turnLeft@mL+1)^0,w,c
  5935   000FA6  22DA               	addwfc	fsr2h,f,c
  5936   000FA8  0E01               	movlw	1
  5937   000FAA  6EDF               	movwf	indf2,c
  5938                           
  5939                           ;dc_motor.c: 134:         (*mR).direction=0;
  5940   000FAC  EE20 F001          	lfsr	2,1
  5941   000FB0  5016               	movf	turnLeft@mR^0,w,c
  5942   000FB2  26D9               	addwf	fsr2l,f,c
  5943   000FB4  5017               	movf	(turnLeft@mR+1)^0,w,c
  5944   000FB6  22DA               	addwfc	fsr2h,f,c
  5945   000FB8  0E00               	movlw	0
  5946   000FBA  6EDF               	movwf	indf2,c
  5947   000FBC                     
  5948                           ;dc_motor.c: 135:         (*mL).power=i;
  5949   000FBC  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5950   000FC0  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5951   000FC4  C01C  FFDF         	movff	turnLeft@i,indf2
  5952   000FC8                     
  5953                           ;dc_motor.c: 136:         (*mR).power=i;
  5954   000FC8  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5955   000FCC  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5956   000FD0  C01C  FFDF         	movff	turnLeft@i,indf2
  5957   000FD4                     
  5958                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5959   000FD4  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5960   000FD8  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5961   000FDC  EC0C  F007         	call	_setMotorPWM	;wreg free
  5962   000FE0                     
  5963                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5964   000FE0  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5965   000FE4  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5966   000FE8  EC0C  F007         	call	_setMotorPWM	;wreg free
  5967   000FEC                     
  5968                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  5969   000FEC  0E05               	movlw	5
  5970   000FEE  6E19               	movwf	(??_turnLeft+1)^0,c
  5971   000FF0  0EB6               	movlw	182
  5972   000FF2  6E18               	movwf	??_turnLeft^0,c
  5973   000FF4  0E2C               	movlw	44
  5974   000FF6                     u2707:
  5975   000FF6  2EE8               	decfsz	wreg,f,c
  5976   000FF8  D7FE               	bra	u2707
  5977   000FFA  2E18               	decfsz	??_turnLeft^0,f,c
  5978   000FFC  D7FC               	bra	u2707
  5979   000FFE  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5980   001000  D7FA               	bra	u2707
  5981   001002  D000               	nop2	
  5982   001004                     
  5983                           ;dc_motor.c: 140:         }
  5984   001004  0E05               	movlw	5
  5985   001006  261C               	addwf	turnLeft@i^0,f,c
  5986   001008  0E00               	movlw	0
  5987   00100A  221D               	addwfc	(turnLeft@i+1)^0,f,c
  5988   00100C  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  5989   00100E  EF12  F008         	goto	u1401
  5990   001012  501D               	movf	(turnLeft@i+1)^0,w,c
  5991   001014  E109               	bnz	u1400
  5992   001016  0E3E               	movlw	62
  5993   001018  5C1C               	subwf	turnLeft@i^0,w,c
  5994   00101A  A0D8               	btfss	status,0,c
  5995   00101C  EF12  F008         	goto	u1401
  5996   001020  EF14  F008         	goto	u1400
  5997   001024                     u1401:
  5998   001024  EFCE  F007         	goto	l2430
  5999   001028                     u1400:
  6000   001028                     
  6001                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  6002   001028  0E00               	movlw	0
  6003   00102A  6E1D               	movwf	(turnLeft@i+1)^0,c
  6004   00102C  0E34               	movlw	52
  6005   00102E  6E1C               	movwf	turnLeft@i^0,c
  6006   001030                     l2452:
  6007                           
  6008                           ;dc_motor.c: 142:         (*mL).direction=1;
  6009   001030  EE20 F001          	lfsr	2,1
  6010   001034  5014               	movf	turnLeft@mL^0,w,c
  6011   001036  26D9               	addwf	fsr2l,f,c
  6012   001038  5015               	movf	(turnLeft@mL+1)^0,w,c
  6013   00103A  22DA               	addwfc	fsr2h,f,c
  6014   00103C  0E01               	movlw	1
  6015   00103E  6EDF               	movwf	indf2,c
  6016                           
  6017                           ;dc_motor.c: 143:         (*mR).direction=0;
  6018   001040  EE20 F001          	lfsr	2,1
  6019   001044  5016               	movf	turnLeft@mR^0,w,c
  6020   001046  26D9               	addwf	fsr2l,f,c
  6021   001048  5017               	movf	(turnLeft@mR+1)^0,w,c
  6022   00104A  22DA               	addwfc	fsr2h,f,c
  6023   00104C  0E00               	movlw	0
  6024   00104E  6EDF               	movwf	indf2,c
  6025   001050                     
  6026                           ;dc_motor.c: 144:         (*mL).power=i;
  6027   001050  C014  FFD9         	movff	turnLeft@mL,fsr2l
  6028   001054  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  6029   001058  C01C  FFDF         	movff	turnLeft@i,indf2
  6030   00105C                     
  6031                           ;dc_motor.c: 145:         (*mR).power=i;
  6032   00105C  C016  FFD9         	movff	turnLeft@mR,fsr2l
  6033   001060  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  6034   001064  C01C  FFDF         	movff	turnLeft@i,indf2
  6035   001068                     
  6036                           ;dc_motor.c: 146:         setMotorPWM(mL);
  6037   001068  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6038   00106C  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6039   001070  EC0C  F007         	call	_setMotorPWM	;wreg free
  6040   001074                     
  6041                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6042   001074  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6043   001078  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6044   00107C  EC0C  F007         	call	_setMotorPWM	;wreg free
  6045   001080                     
  6046                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6047   001080  0E05               	movlw	5
  6048   001082  6E19               	movwf	(??_turnLeft+1)^0,c
  6049   001084  0EA1               	movlw	161
  6050   001086  6E18               	movwf	??_turnLeft^0,c
  6051   001088  0E65               	movlw	101
  6052   00108A                     u2717:
  6053   00108A  2EE8               	decfsz	wreg,f,c
  6054   00108C  D7FE               	bra	u2717
  6055   00108E  2E18               	decfsz	??_turnLeft^0,f,c
  6056   001090  D7FC               	bra	u2717
  6057   001092  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6058   001094  D7FA               	bra	u2717
  6059   001096  F000               	nop	
  6060   001098                     
  6061                           ;dc_motor.c: 150:         }
  6062   001098  0EFB               	movlw	251
  6063   00109A  261C               	addwf	turnLeft@i^0,f,c
  6064   00109C  0EFF               	movlw	255
  6065   00109E  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6066   0010A0  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6067   0010A2  EF5E  F008         	goto	u1410
  6068   0010A6  501D               	movf	(turnLeft@i+1)^0,w,c
  6069   0010A8  E107               	bnz	u1411
  6070   0010AA  0E26               	movlw	38
  6071   0010AC  5C1C               	subwf	turnLeft@i^0,w,c
  6072   0010AE  B0D8               	btfsc	status,0,c
  6073   0010B0  EF5C  F008         	goto	u1411
  6074   0010B4  EF5E  F008         	goto	u1410
  6075   0010B8                     u1411:
  6076   0010B8  EF18  F008         	goto	l2452
  6077   0010BC                     u1410:
  6078   0010BC                     
  6079                           ;dc_motor.c: 151:     }
  6080   0010BC  4A1A               	infsnz	turnLeft@k^0,f,c
  6081   0010BE  2A1B               	incf	(turnLeft@k+1)^0,f,c
  6082   0010C0  BE1B               	btfsc	(turnLeft@k+1)^0,7,c
  6083   0010C2  EF6C  F008         	goto	u1421
  6084   0010C6  501B               	movf	(turnLeft@k+1)^0,w,c
  6085   0010C8  E109               	bnz	u1420
  6086   0010CA  0E02               	movlw	2
  6087   0010CC  5C1A               	subwf	turnLeft@k^0,w,c
  6088   0010CE  A0D8               	btfss	status,0,c
  6089   0010D0  EF6C  F008         	goto	u1421
  6090   0010D4  EF6E  F008         	goto	u1420
  6091   0010D8                     u1421:
  6092   0010D8  EFCA  F007         	goto	l2424
  6093   0010DC                     u1420:
  6094   0010DC  0012               	return		;funcret
  6095   0010DE                     __end_of_turnLeft:
  6096                           	callstack 0
  6097                           
  6098 ;; *************** function _stop *****************
  6099 ;; Defined at:
  6100 ;;		line 92 in file "dc_motor.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6103 ;;		 -> main@motorL(9), 
  6104 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6105 ;;		 -> main@motorR(9), 
  6106 ;; Auto vars:     Size  Location     Type
  6107 ;;		None
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 0/0
  6114 ;;		On exit  : 0/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6117 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6119 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6121 ;;Total ram usage:        6 bytes
  6122 ;; Hardware stack levels used: 1
  6123 ;; Hardware stack levels required when called: 4
  6124 ;; This function calls:
  6125 ;;		_setMotorPWM
  6126 ;; This function is called by:
  6127 ;;		_RobotMovement
  6128 ;;		_return_back
  6129 ;;		_main
  6130 ;; This function uses a non-reentrant model
  6131 ;;
  6132                           
  6133                           	psect	text33
  6134   001DC8                     __ptext33:
  6135                           	callstack 0
  6136   001DC8                     _stop:
  6137                           	callstack 26
  6138   001DC8                     
  6139                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6140   001DC8  C014  FFD9         	movff	stop@mL,fsr2l
  6141   001DCC  C015  FFDA         	movff	stop@mL+1,fsr2h
  6142   001DD0  0E00               	movlw	0
  6143   001DD2  6EDF               	movwf	indf2,c
  6144                           
  6145                           ;dc_motor.c: 95:     (*mR).power=0;
  6146   001DD4  C016  FFD9         	movff	stop@mR,fsr2l
  6147   001DD8  C017  FFDA         	movff	stop@mR+1,fsr2h
  6148   001DDC  0E00               	movlw	0
  6149   001DDE  6EDF               	movwf	indf2,c
  6150   001DE0                     
  6151                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6152   001DE0  C014  F00E         	movff	stop@mL,setMotorPWM@m
  6153   001DE4  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  6154   001DE8  EC0C  F007         	call	_setMotorPWM	;wreg free
  6155   001DEC                     
  6156                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6157   001DEC  C016  F00E         	movff	stop@mR,setMotorPWM@m
  6158   001DF0  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  6159   001DF4  EC0C  F007         	call	_setMotorPWM	;wreg free
  6160   001DF8                     
  6161                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6162   001DF8  0E52               	movlw	82
  6163   001DFA  6E19               	movwf	(??_stop+1)^0,c
  6164   001DFC  0E2B               	movlw	43
  6165   001DFE  6E18               	movwf	??_stop^0,c
  6166   001E00  0E00               	movlw	0
  6167   001E02                     u2727:
  6168   001E02  2EE8               	decfsz	wreg,f,c
  6169   001E04  D7FE               	bra	u2727
  6170   001E06  2E18               	decfsz	??_stop^0,f,c
  6171   001E08  D7FC               	bra	u2727
  6172   001E0A  2E19               	decfsz	(??_stop+1)^0,f,c
  6173   001E0C  D7FA               	bra	u2727
  6174   001E0E  D000               	nop2	
  6175   001E10  0012               	return		;funcret
  6176   001E12                     __end_of_stop:
  6177                           	callstack 0
  6178                           
  6179 ;; *************** function _moveBack *****************
  6180 ;; Defined at:
  6181 ;;		line 282 in file "dc_motor.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6184 ;;		 -> main@motorL(9), 
  6185 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6186 ;;		 -> main@motorR(9), 
  6187 ;;  time            2   23[COMRAM] unsigned int 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;		None
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6199 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6202 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6203 ;;Total ram usage:        6 bytes
  6204 ;; Hardware stack levels used: 1
  6205 ;; Hardware stack levels required when called: 4
  6206 ;; This function calls:
  6207 ;;		_setMotorPWM
  6208 ;; This function is called by:
  6209 ;;		_RobotMovement
  6210 ;;		_return_back
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text34
  6215   001A08                     __ptext34:
  6216                           	callstack 0
  6217   001A08                     _moveBack:
  6218                           	callstack 25
  6219   001A08                     
  6220                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6221   001A08  0E00               	movlw	0
  6222   001A0A  6E56               	movwf	(_seconds+1)^0,c
  6223   001A0C  0E00               	movlw	0
  6224   001A0E  6E55               	movwf	_seconds^0,c
  6225                           
  6226                           ;dc_motor.c: 285:     while (seconds<time)
  6227   001A10  EF32  F00D         	goto	l2640
  6228   001A14                     l2630:
  6229                           
  6230                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6231   001A14  EE20 F001          	lfsr	2,1
  6232   001A18  5014               	movf	moveBack@mL^0,w,c
  6233   001A1A  26D9               	addwf	fsr2l,f,c
  6234   001A1C  5015               	movf	(moveBack@mL+1)^0,w,c
  6235   001A1E  22DA               	addwfc	fsr2h,f,c
  6236   001A20  0E01               	movlw	1
  6237   001A22  6EDF               	movwf	indf2,c
  6238                           
  6239                           ;dc_motor.c: 288:         (*mR).direction=1;
  6240   001A24  EE20 F001          	lfsr	2,1
  6241   001A28  5016               	movf	moveBack@mR^0,w,c
  6242   001A2A  26D9               	addwf	fsr2l,f,c
  6243   001A2C  5017               	movf	(moveBack@mR+1)^0,w,c
  6244   001A2E  22DA               	addwfc	fsr2h,f,c
  6245   001A30  0E01               	movlw	1
  6246   001A32  6EDF               	movwf	indf2,c
  6247   001A34                     
  6248                           ;dc_motor.c: 289:         (*mL).power=40;
  6249   001A34  C014  FFD9         	movff	moveBack@mL,fsr2l
  6250   001A38  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  6251   001A3C  0E28               	movlw	40
  6252   001A3E  6EDF               	movwf	indf2,c
  6253   001A40                     
  6254                           ;dc_motor.c: 290:         (*mR).power=39;
  6255   001A40  C016  FFD9         	movff	moveBack@mR,fsr2l
  6256   001A44  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  6257   001A48  0E27               	movlw	39
  6258   001A4A  6EDF               	movwf	indf2,c
  6259   001A4C                     
  6260                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6261   001A4C  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  6262   001A50  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6263   001A54  EC0C  F007         	call	_setMotorPWM	;wreg free
  6264   001A58                     
  6265                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6266   001A58  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  6267   001A5C  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6268   001A60  EC0C  F007         	call	_setMotorPWM	;wreg free
  6269   001A64                     l2640:
  6270                           
  6271                           ;dc_motor.c: 285:     while (seconds<time)
  6272   001A64  5018               	movf	moveBack@time^0,w,c
  6273   001A66  5C55               	subwf	_seconds^0,w,c
  6274   001A68  5019               	movf	(moveBack@time+1)^0,w,c
  6275   001A6A  5856               	subwfb	(_seconds+1)^0,w,c
  6276   001A6C  A0D8               	btfss	status,0,c
  6277   001A6E  EF3B  F00D         	goto	u1511
  6278   001A72  EF3D  F00D         	goto	u1510
  6279   001A76                     u1511:
  6280   001A76  EF0A  F00D         	goto	l2630
  6281   001A7A                     u1510:
  6282   001A7A  0012               	return		;funcret
  6283   001A7C                     __end_of_moveBack:
  6284                           	callstack 0
  6285                           
  6286 ;; *************** function _TimedfullSpeedAhead *****************
  6287 ;; Defined at:
  6288 ;;		line 267 in file "dc_motor.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6291 ;;		 -> main@motorL(9), 
  6292 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6293 ;;		 -> main@motorR(9), 
  6294 ;;  time            2   23[COMRAM] unsigned int 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  1    wreg      void 
  6299 ;; Registers used:
  6300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6306 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6309 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6310 ;;Total ram usage:        6 bytes
  6311 ;; Hardware stack levels used: 1
  6312 ;; Hardware stack levels required when called: 4
  6313 ;; This function calls:
  6314 ;;		_setMotorPWM
  6315 ;; This function is called by:
  6316 ;;		_RobotMovement
  6317 ;;		_return_back
  6318 ;;		_main
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text35
  6323   001A7C                     __ptext35:
  6324                           	callstack 0
  6325   001A7C                     _TimedfullSpeedAhead:
  6326                           	callstack 25
  6327   001A7C                     
  6328                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6329   001A7C  0E00               	movlw	0
  6330   001A7E  6E56               	movwf	(_seconds+1)^0,c
  6331   001A80  0E00               	movlw	0
  6332   001A82  6E55               	movwf	_seconds^0,c
  6333                           
  6334                           ;dc_motor.c: 270:     while (seconds<time)
  6335   001A84  EF6C  F00D         	goto	l2626
  6336   001A88                     l2616:
  6337                           
  6338                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6339   001A88  EE20 F001          	lfsr	2,1
  6340   001A8C  5014               	movf	TimedfullSpeedAhead@mL^0,w,c
  6341   001A8E  26D9               	addwf	fsr2l,f,c
  6342   001A90  5015               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6343   001A92  22DA               	addwfc	fsr2h,f,c
  6344   001A94  0E00               	movlw	0
  6345   001A96  6EDF               	movwf	indf2,c
  6346                           
  6347                           ;dc_motor.c: 274:         (*mR).direction=0;
  6348   001A98  EE20 F001          	lfsr	2,1
  6349   001A9C  5016               	movf	TimedfullSpeedAhead@mR^0,w,c
  6350   001A9E  26D9               	addwf	fsr2l,f,c
  6351   001AA0  5017               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6352   001AA2  22DA               	addwfc	fsr2h,f,c
  6353   001AA4  0E00               	movlw	0
  6354   001AA6  6EDF               	movwf	indf2,c
  6355   001AA8                     
  6356                           ;dc_motor.c: 275:         (*mL).power=50;
  6357   001AA8  C014  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6358   001AAC  C015  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6359   001AB0  0E32               	movlw	50
  6360   001AB2  6EDF               	movwf	indf2,c
  6361   001AB4                     
  6362                           ;dc_motor.c: 276:         (*mR).power=50;
  6363   001AB4  C016  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6364   001AB8  C017  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6365   001ABC  0E32               	movlw	50
  6366   001ABE  6EDF               	movwf	indf2,c
  6367   001AC0                     
  6368                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6369   001AC0  C014  F00E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6370   001AC4  C015  F00F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6371   001AC8  EC0C  F007         	call	_setMotorPWM	;wreg free
  6372   001ACC                     
  6373                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6374   001ACC  C016  F00E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6375   001AD0  C017  F00F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6376   001AD4  EC0C  F007         	call	_setMotorPWM	;wreg free
  6377   001AD8                     l2626:
  6378                           
  6379                           ;dc_motor.c: 270:     while (seconds<time)
  6380   001AD8  5018               	movf	TimedfullSpeedAhead@time^0,w,c
  6381   001ADA  5C55               	subwf	_seconds^0,w,c
  6382   001ADC  5019               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6383   001ADE  5856               	subwfb	(_seconds+1)^0,w,c
  6384   001AE0  A0D8               	btfss	status,0,c
  6385   001AE2  EF75  F00D         	goto	u1501
  6386   001AE6  EF77  F00D         	goto	u1500
  6387   001AEA                     u1501:
  6388   001AEA  EF44  F00D         	goto	l2616
  6389   001AEE                     u1500:
  6390   001AEE  0012               	return		;funcret
  6391   001AF0                     __end_of_TimedfullSpeedAhead:
  6392                           	callstack 0
  6393                           
  6394 ;; *************** function _setMotorPWM *****************
  6395 ;; Defined at:
  6396 ;;		line 69 in file "dc_motor.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  m               2   13[COMRAM] PTR struct DC_motor
  6399 ;;		 -> main@motorR(9), main@motorL(9), 
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;  negDuty         1   18[COMRAM] unsigned char 
  6402 ;;  posDuty         1   17[COMRAM] unsigned char 
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  1    wreg      void 
  6405 ;; Registers used:
  6406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;Total ram usage:        6 bytes
  6417 ;; Hardware stack levels used: 1
  6418 ;; Hardware stack levels required when called: 3
  6419 ;; This function calls:
  6420 ;;		___lwdiv
  6421 ;;		___wmul
  6422 ;; This function is called by:
  6423 ;;		_stop
  6424 ;;		_turnLeft
  6425 ;;		_turnRight
  6426 ;;		_turnLeftLong
  6427 ;;		_turnRightLong
  6428 ;;		_fullSpeedAhead
  6429 ;;		_TimedfullSpeedAhead
  6430 ;;		_moveBack
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text36
  6435   000E18                     __ptext36:
  6436                           	callstack 0
  6437   000E18                     _setMotorPWM:
  6438                           	callstack 26
  6439   000E18                     
  6440                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6441   000E18  EE20 F002          	lfsr	2,2
  6442   000E1C  500E               	movf	setMotorPWM@m^0,w,c
  6443   000E1E  26D9               	addwf	fsr2l,f,c
  6444   000E20  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6445   000E22  22DA               	addwfc	fsr2h,f,c
  6446   000E24  50DF               	movf	indf2,w,c
  6447   000E26  B4D8               	btfsc	status,2,c
  6448   000E28  EF18  F007         	goto	u1351
  6449   000E2C  EF1A  F007         	goto	u1350
  6450   000E30                     u1351:
  6451   000E30  EF4E  F007         	goto	l2314
  6452   000E34                     u1350:
  6453   000E34                     
  6454                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6455   000E34  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6456   000E38  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6457   000E3C  50DF               	movf	indf2,w,c
  6458   000E3E  6E10               	movwf	??_setMotorPWM^0,c
  6459   000E40  5010               	movf	??_setMotorPWM^0,w,c
  6460   000E42  6E01               	movwf	___wmul@multiplier^0,c
  6461   000E44  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6462   000E46  EE20 F003          	lfsr	2,3
  6463   000E4A  500E               	movf	setMotorPWM@m^0,w,c
  6464   000E4C  26D9               	addwf	fsr2l,f,c
  6465   000E4E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6466   000E50  22DA               	addwfc	fsr2h,f,c
  6467   000E52  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6468   000E56  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6469   000E5A  EC99  F00F         	call	___wmul	;wreg free
  6470   000E5E  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6471   000E62  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6472   000E66  0E00               	movlw	0
  6473   000E68  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6474   000E6A  0E64               	movlw	100
  6475   000E6C  6E09               	movwf	___lwdiv@divisor^0,c
  6476   000E6E  EC78  F00D         	call	___lwdiv	;wreg free
  6477   000E72  EE20 F003          	lfsr	2,3
  6478   000E76  500E               	movf	setMotorPWM@m^0,w,c
  6479   000E78  26D9               	addwf	fsr2l,f,c
  6480   000E7A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6481   000E7C  22DA               	addwfc	fsr2h,f,c
  6482   000E7E  50DF               	movf	indf2,w,c
  6483   000E80  6E11               	movwf	(??_setMotorPWM+1)^0,c
  6484   000E82  5007               	movf	?___lwdiv^0,w,c
  6485   000E84  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  6486   000E86  6E12               	movwf	setMotorPWM@posDuty^0,c
  6487   000E88                     
  6488                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6489   000E88  EE20 F003          	lfsr	2,3
  6490   000E8C  500E               	movf	setMotorPWM@m^0,w,c
  6491   000E8E  26D9               	addwf	fsr2l,f,c
  6492   000E90  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6493   000E92  22DA               	addwfc	fsr2h,f,c
  6494   000E94  50DF               	movf	indf2,w,c
  6495   000E96  6E13               	movwf	setMotorPWM@negDuty^0,c
  6496                           
  6497                           ;dc_motor.c: 76:     }
  6498   000E98  EF71  F007         	goto	l2318
  6499   000E9C                     l2314:
  6500                           
  6501                           ;dc_motor.c: 78:         posDuty=0;
  6502   000E9C  0E00               	movlw	0
  6503   000E9E  6E12               	movwf	setMotorPWM@posDuty^0,c
  6504   000EA0                     
  6505                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6506   000EA0  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6507   000EA4  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6508   000EA8  50DF               	movf	indf2,w,c
  6509   000EAA  6E10               	movwf	??_setMotorPWM^0,c
  6510   000EAC  5010               	movf	??_setMotorPWM^0,w,c
  6511   000EAE  6E01               	movwf	___wmul@multiplier^0,c
  6512   000EB0  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6513   000EB2  EE20 F003          	lfsr	2,3
  6514   000EB6  500E               	movf	setMotorPWM@m^0,w,c
  6515   000EB8  26D9               	addwf	fsr2l,f,c
  6516   000EBA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6517   000EBC  22DA               	addwfc	fsr2h,f,c
  6518   000EBE  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6519   000EC2  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6520   000EC6  EC99  F00F         	call	___wmul	;wreg free
  6521   000ECA  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6522   000ECE  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6523   000ED2  0E00               	movlw	0
  6524   000ED4  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6525   000ED6  0E64               	movlw	100
  6526   000ED8  6E09               	movwf	___lwdiv@divisor^0,c
  6527   000EDA  EC78  F00D         	call	___lwdiv	;wreg free
  6528   000EDE  5007               	movf	?___lwdiv^0,w,c
  6529   000EE0  6E13               	movwf	setMotorPWM@negDuty^0,c
  6530   000EE2                     l2318:
  6531                           
  6532                           ;dc_motor.c: 82:     if (m->direction) {
  6533   000EE2  EE20 F001          	lfsr	2,1
  6534   000EE6  500E               	movf	setMotorPWM@m^0,w,c
  6535   000EE8  26D9               	addwf	fsr2l,f,c
  6536   000EEA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6537   000EEC  22DA               	addwfc	fsr2h,f,c
  6538   000EEE  50DF               	movf	indf2,w,c
  6539   000EF0  B4D8               	btfsc	status,2,c
  6540   000EF2  EF7D  F007         	goto	u1361
  6541   000EF6  EF7F  F007         	goto	u1360
  6542   000EFA                     u1361:
  6543   000EFA  EFA1  F007         	goto	l2322
  6544   000EFE                     u1360:
  6545   000EFE                     
  6546                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6547   000EFE  EE20 F005          	lfsr	2,5
  6548   000F02  500E               	movf	setMotorPWM@m^0,w,c
  6549   000F04  26D9               	addwf	fsr2l,f,c
  6550   000F06  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6551   000F08  22DA               	addwfc	fsr2h,f,c
  6552   000F0A  CFDE F010          	movff	postinc2,??_setMotorPWM
  6553   000F0E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6554   000F12  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6555   000F16  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6556   000F1A  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6557                           
  6558                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6559   000F1E  EE20 F007          	lfsr	2,7
  6560   000F22  500E               	movf	setMotorPWM@m^0,w,c
  6561   000F24  26D9               	addwf	fsr2l,f,c
  6562   000F26  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6563   000F28  22DA               	addwfc	fsr2h,f,c
  6564   000F2A  CFDE F010          	movff	postinc2,??_setMotorPWM
  6565   000F2E  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6566   000F32  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6567   000F36  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6568   000F3A  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6569                           
  6570                           ;dc_motor.c: 85:     } else {
  6571   000F3E  EFC1  F007         	goto	l213
  6572   000F42                     l2322:
  6573                           
  6574                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6575   000F42  EE20 F005          	lfsr	2,5
  6576   000F46  500E               	movf	setMotorPWM@m^0,w,c
  6577   000F48  26D9               	addwf	fsr2l,f,c
  6578   000F4A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6579   000F4C  22DA               	addwfc	fsr2h,f,c
  6580   000F4E  CFDE F010          	movff	postinc2,??_setMotorPWM
  6581   000F52  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6582   000F56  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6583   000F5A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6584   000F5E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6585                           
  6586                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6587   000F62  EE20 F007          	lfsr	2,7
  6588   000F66  500E               	movf	setMotorPWM@m^0,w,c
  6589   000F68  26D9               	addwf	fsr2l,f,c
  6590   000F6A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6591   000F6C  22DA               	addwfc	fsr2h,f,c
  6592   000F6E  CFDE F010          	movff	postinc2,??_setMotorPWM
  6593   000F72  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6594   000F76  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6595   000F7A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6596   000F7E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6597   000F82                     l213:
  6598   000F82  0012               	return		;funcret
  6599   000F84                     __end_of_setMotorPWM:
  6600                           	callstack 0
  6601                           
  6602 ;; *************** function ___wmul *****************
  6603 ;; Defined at:
  6604 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6605 ;; Parameters:    Size  Location     Type
  6606 ;;  multiplier      2    0[COMRAM] unsigned int 
  6607 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  product         2    4[COMRAM] unsigned int 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  2    0[COMRAM] unsigned int 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0, prodl, prodh
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6622 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6623 ;;Total ram usage:        6 bytes
  6624 ;; Hardware stack levels used: 1
  6625 ;; Hardware stack levels required when called: 2
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_get_color_distance
  6630 ;;		_get_color_code
  6631 ;;		_get_wall_presence
  6632 ;;		_setMotorPWM
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text37
  6637   001F32                     __ptext37:
  6638                           	callstack 0
  6639   001F32                     ___wmul:
  6640                           	callstack 26
  6641   001F32  5001               	movf	___wmul@multiplier^0,w,c
  6642   001F34  0203               	mulwf	___wmul@multiplicand^0,c
  6643   001F36  CFF3 F005          	movff	prodl,___wmul@product
  6644   001F3A  CFF4 F006          	movff	prodh,___wmul@product+1
  6645   001F3E  5001               	movf	___wmul@multiplier^0,w,c
  6646   001F40  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6647   001F42  50F3               	movf	243,w,c
  6648   001F44  2606               	addwf	(___wmul@product+1)^0,f,c
  6649   001F46  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6650   001F48  0203               	mulwf	___wmul@multiplicand^0,c
  6651   001F4A  50F3               	movf	243,w,c
  6652   001F4C  2606               	addwf	(___wmul@product+1)^0,f,c
  6653   001F4E  C005  F001         	movff	___wmul@product,?___wmul
  6654   001F52  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6655   001F56  0012               	return		;funcret
  6656   001F58                     __end_of___wmul:
  6657                           	callstack 0
  6658                           
  6659 ;; *************** function ___lwdiv *****************
  6660 ;; Defined at:
  6661 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  dividend        2    6[COMRAM] unsigned int 
  6664 ;;  divisor         2    8[COMRAM] unsigned int 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  quotient        2   10[COMRAM] unsigned int 
  6667 ;;  counter         1   12[COMRAM] unsigned char 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  2    6[COMRAM] unsigned int 
  6670 ;; Registers used:
  6671 ;;		wreg, status,2, status,0
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6678 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6680 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6681 ;;Total ram usage:        7 bytes
  6682 ;; Hardware stack levels used: 1
  6683 ;; Hardware stack levels required when called: 2
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_calibrate_black
  6688 ;;		_setMotorPWM
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text38
  6693   001AF0                     __ptext38:
  6694                           	callstack 0
  6695   001AF0                     ___lwdiv:
  6696                           	callstack 26
  6697   001AF0  0E00               	movlw	0
  6698   001AF2  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6699   001AF4  0E00               	movlw	0
  6700   001AF6  6E0B               	movwf	___lwdiv@quotient^0,c
  6701   001AF8  5009               	movf	___lwdiv@divisor^0,w,c
  6702   001AFA  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6703   001AFC  B4D8               	btfsc	status,2,c
  6704   001AFE  EF83  F00D         	goto	u1291
  6705   001B02  EF85  F00D         	goto	u1290
  6706   001B06                     u1291:
  6707   001B06  EFAD  F00D         	goto	l942
  6708   001B0A                     u1290:
  6709   001B0A  0E01               	movlw	1
  6710   001B0C  6E0D               	movwf	___lwdiv@counter^0,c
  6711   001B0E  EF8D  F00D         	goto	l2262
  6712   001B12                     l2260:
  6713   001B12  90D8               	bcf	status,0,c
  6714   001B14  3609               	rlcf	___lwdiv@divisor^0,f,c
  6715   001B16  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6716   001B18  2A0D               	incf	___lwdiv@counter^0,f,c
  6717   001B1A                     l2262:
  6718   001B1A  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6719   001B1C  EF92  F00D         	goto	u1301
  6720   001B20  EF94  F00D         	goto	u1300
  6721   001B24                     u1301:
  6722   001B24  EF89  F00D         	goto	l2260
  6723   001B28                     u1300:
  6724   001B28                     l2264:
  6725   001B28  90D8               	bcf	status,0,c
  6726   001B2A  360B               	rlcf	___lwdiv@quotient^0,f,c
  6727   001B2C  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6728   001B2E  5009               	movf	___lwdiv@divisor^0,w,c
  6729   001B30  5C07               	subwf	___lwdiv@dividend^0,w,c
  6730   001B32  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6731   001B34  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6732   001B36  A0D8               	btfss	status,0,c
  6733   001B38  EFA0  F00D         	goto	u1311
  6734   001B3C  EFA2  F00D         	goto	u1310
  6735   001B40                     u1311:
  6736   001B40  EFA7  F00D         	goto	l2272
  6737   001B44                     u1310:
  6738   001B44  5009               	movf	___lwdiv@divisor^0,w,c
  6739   001B46  5E07               	subwf	___lwdiv@dividend^0,f,c
  6740   001B48  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6741   001B4A  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6742   001B4C  800B               	bsf	___lwdiv@quotient^0,0,c
  6743   001B4E                     l2272:
  6744   001B4E  90D8               	bcf	status,0,c
  6745   001B50  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6746   001B52  3209               	rrcf	___lwdiv@divisor^0,f,c
  6747   001B54  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6748   001B56  EF94  F00D         	goto	l2264
  6749   001B5A                     l942:
  6750   001B5A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6751   001B5E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6752   001B62  0012               	return		;funcret
  6753   001B64                     __end_of___lwdiv:
  6754                           	callstack 0
  6755                           
  6756 ;; *************** function _Interrupts_init *****************
  6757 ;; Defined at:
  6758 ;;		line 10 in file "interrupts.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;                  1    wreg      void 
  6765 ;; Registers used:
  6766 ;;		None
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6776 ;;Total ram usage:        0 bytes
  6777 ;; Hardware stack levels used: 1
  6778 ;; Hardware stack levels required when called: 2
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_main
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text39
  6787   001FBC                     __ptext39:
  6788                           	callstack 0
  6789   001FBC                     _Interrupts_init:
  6790                           	callstack 28
  6791   001FBC                     
  6792                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6793   001FBC  8CF2               	bsf	242,6,c	;volatile
  6794                           
  6795                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6796   001FBE  010E               	movlb	14	; () banked
  6797   001FC0  8B29               	bsf	41,5,b	;volatile
  6798                           
  6799                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6800   001FC2  812B               	bsf	43,0,b	;volatile
  6801                           
  6802                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6803   001FC4  8EF2               	bsf	242,7,c	;volatile
  6804   001FC6                     
  6805                           ; BSR set to: 14
  6806   001FC6  0012               	return		;funcret
  6807   001FC8                     __end_of_Interrupts_init:
  6808                           	callstack 0
  6809                           
  6810 ;; *************** function _HighISR *****************
  6811 ;; Defined at:
  6812 ;;		line 22 in file "interrupts.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, status,2, status,0, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used: 1
  6832 ;; Hardware stack levels required when called: 1
  6833 ;; This function calls:
  6834 ;;		_increment_seconds
  6835 ;; This function is called by:
  6836 ;;		Interrupt level 2
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	intcode
  6841   000008                     __pintcode:
  6842                           	callstack 0
  6843   000008                     _HighISR:
  6844                           	callstack 24
  6845                           
  6846                           ; BSR set to: 14
  6847                           ;incstack = 0
  6848   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6849   00000A                     
  6850                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6851   00000A  010E               	movlb	14	; () banked
  6852   00000C  AB33               	btfss	51,5,b	;volatile
  6853   00000E  EF0B  F000         	goto	i2u84_41
  6854   000012  EF0D  F000         	goto	i2u84_40
  6855   000016                     i2u84_41:
  6856   000016  EF15  F000         	goto	i2l384
  6857   00001A                     i2u84_40:
  6858   00001A                     
  6859                           ; BSR set to: 14
  6860                           ;interrupts.c: 25:     increment_seconds();
  6861   00001A  ECF8  F00F         	call	_increment_seconds	;wreg free
  6862   00001E                     
  6863                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6864   00001E  0EE7               	movlw	231
  6865   000020  6ED4               	movwf	212,c	;volatile
  6866   000022                     
  6867                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6868   000022  0E95               	movlw	149
  6869   000024  6ED3               	movwf	211,c	;volatile
  6870   000026                     
  6871                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6872   000026  010E               	movlb	14	; () banked
  6873   000028  9B33               	bcf	51,5,b	;volatile
  6874   00002A                     i2l384:
  6875                           
  6876                           ; BSR set to: 14
  6877   00002A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6878   00002C  0011               	retfie		f
  6879   00002E                     __end_of_HighISR:
  6880                           	callstack 0
  6881                           
  6882 ;; *************** function _increment_seconds *****************
  6883 ;; Defined at:
  6884 ;;		line 297 in file "dc_motor.c"
  6885 ;; Parameters:    Size  Location     Type
  6886 ;;		None
  6887 ;; Auto vars:     Size  Location     Type
  6888 ;;		None
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  1    wreg      void 
  6891 ;; Registers used:
  6892 ;;		status,2, status,0
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;Total ram usage:        0 bytes
  6903 ;; Hardware stack levels used: 1
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_HighISR
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           	psect	text41
  6912   001FF0                     __ptext41:
  6913                           	callstack 0
  6914   001FF0                     _increment_seconds:
  6915                           	callstack 24
  6916   001FF0                     
  6917                           ;dc_motor.c: 299:     seconds += 1;
  6918   001FF0  4A55               	infsnz	_seconds^0,f,c
  6919   001FF2  2A56               	incf	(_seconds+1)^0,f,c
  6920   001FF4  0012               	return		;funcret
  6921   001FF6                     __end_of_increment_seconds:
  6922                           	callstack 0
  6923   000000                     
  6924                           	psect	rparam
  6925   000000                     
  6926                           	psect	temp
  6927   00005B                     btemp:
  6928                           	callstack 0
  6929   00005B                     	ds	1
  6930   000000                     int$flags	set	btemp
  6931   000000                     wtemp8	set	btemp+1
  6932   000000                     ttemp5	set	btemp+1
  6933   000000                     ttemp6	set	btemp+4
  6934   000000                     ttemp7	set	btemp+8
  6935                           
  6936                           	psect	idloc
  6937                           
  6938                           ;Config register IDLOC0 @ 0x200000
  6939                           ;	unspecified, using default values
  6940   200000                     	org	2097152
  6941   200000  0FFF               	dw	4095
  6942                           
  6943                           ;Config register IDLOC1 @ 0x200002
  6944                           ;	unspecified, using default values
  6945   200002                     	org	2097154
  6946   200002  0FFF               	dw	4095
  6947                           
  6948                           ;Config register IDLOC2 @ 0x200004
  6949                           ;	unspecified, using default values
  6950   200004                     	org	2097156
  6951   200004  0FFF               	dw	4095
  6952                           
  6953                           ;Config register IDLOC3 @ 0x200006
  6954                           ;	unspecified, using default values
  6955   200006                     	org	2097158
  6956   200006  0FFF               	dw	4095
  6957                           
  6958                           ;Config register IDLOC4 @ 0x200008
  6959                           ;	unspecified, using default values
  6960   200008                     	org	2097160
  6961   200008  0FFF               	dw	4095
  6962                           
  6963                           ;Config register IDLOC5 @ 0x20000A
  6964                           ;	unspecified, using default values
  6965   20000A                     	org	2097162
  6966   20000A  0FFF               	dw	4095
  6967                           
  6968                           ;Config register IDLOC6 @ 0x20000C
  6969                           ;	unspecified, using default values
  6970   20000C                     	org	2097164
  6971   20000C  0FFF               	dw	4095
  6972                           
  6973                           ;Config register IDLOC7 @ 0x20000E
  6974                           ;	unspecified, using default values
  6975   20000E                     	org	2097166
  6976   20000E  0FFF               	dw	4095
  6977                           
  6978                           	psect	config
  6979                           
  6980                           ;Config register CONFIG1L @ 0x300000
  6981                           ;	External Oscillator mode Selection bits
  6982                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6983                           ;	Power-up default value for COSC bits
  6984                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6985   300000                     	org	3145728
  6986   300000  AA                 	db	170
  6987                           
  6988                           ;Config register CONFIG1H @ 0x300001
  6989                           ;	unspecified, using default values
  6990                           ;	Clock Out Enable bit
  6991                           ;	CLKOUTEN = 0x1, unprogrammed default
  6992                           ;	Clock Switch Enable bit
  6993                           ;	CSWEN = 0x1, unprogrammed default
  6994                           ;	Fail-Safe Clock Monitor Enable bit
  6995                           ;	FCMEN = 0x1, unprogrammed default
  6996   300001                     	org	3145729
  6997   300001  FF                 	db	255
  6998                           
  6999                           ;Config register CONFIG2L @ 0x300002
  7000                           ;	unspecified, using default values
  7001                           ;	Master Clear Enable bit
  7002                           ;	MCLRE = 0x1, unprogrammed default
  7003                           ;	Power-up Timer Enable bit
  7004                           ;	PWRTE = 0x1, unprogrammed default
  7005                           ;	Low-power BOR enable bit
  7006                           ;	LPBOREN = 0x1, unprogrammed default
  7007                           ;	Brown-out Reset Enable bits
  7008                           ;	BOREN = 0x3, unprogrammed default
  7009   300002                     	org	3145730
  7010   300002  FF                 	db	255
  7011                           
  7012                           ;Config register CONFIG2H @ 0x300003
  7013                           ;	unspecified, using default values
  7014                           ;	Brown Out Reset Voltage selection bits
  7015                           ;	BORV = 0x3, unprogrammed default
  7016                           ;	ZCD Disable bit
  7017                           ;	ZCD = 0x1, unprogrammed default
  7018                           ;	PPSLOCK bit One-Way Set Enable bit
  7019                           ;	PPS1WAY = 0x1, unprogrammed default
  7020                           ;	Stack Full/Underflow Reset Enable bit
  7021                           ;	STVREN = 0x1, unprogrammed default
  7022                           ;	Debugger Enable bit
  7023                           ;	DEBUG = 0x1, unprogrammed default
  7024                           ;	Extended Instruction Set Enable bit
  7025                           ;	XINST = 0x1, unprogrammed default
  7026   300003                     	org	3145731
  7027   300003  FF                 	db	255
  7028                           
  7029                           ;Config register CONFIG3L @ 0x300004
  7030                           ;	WDT Period Select bits
  7031                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7032                           ;	WDT operating mode
  7033                           ;	WDTE = OFF, WDT Disabled
  7034   300004                     	org	3145732
  7035   300004  9F                 	db	159
  7036                           
  7037                           ;Config register CONFIG3H @ 0x300005
  7038                           ;	unspecified, using default values
  7039                           ;	WDT Window Select bits
  7040                           ;	WDTCWS = 0x7, unprogrammed default
  7041                           ;	WDT input clock selector
  7042                           ;	WDTCCS = 0x7, unprogrammed default
  7043   300005                     	org	3145733
  7044   300005  FF                 	db	255
  7045                           
  7046                           ;Config register CONFIG4L @ 0x300006
  7047                           ;	unspecified, using default values
  7048                           ;	Write Protection Block 0
  7049                           ;	WRT0 = 0x1, unprogrammed default
  7050                           ;	Write Protection Block 1
  7051                           ;	WRT1 = 0x1, unprogrammed default
  7052                           ;	Write Protection Block 2
  7053                           ;	WRT2 = 0x1, unprogrammed default
  7054                           ;	Write Protection Block 3
  7055                           ;	WRT3 = 0x1, unprogrammed default
  7056                           ;	Write Protection Block 3
  7057                           ;	WRT4 = 0x1, unprogrammed default
  7058                           ;	Write Protection Block 3
  7059                           ;	WRT5 = 0x1, unprogrammed default
  7060                           ;	Write Protection Block 3
  7061                           ;	WRT6 = 0x1, unprogrammed default
  7062                           ;	Write Protection Block 3
  7063                           ;	WRT7 = 0x1, unprogrammed default
  7064   300006                     	org	3145734
  7065   300006  FF                 	db	255
  7066                           
  7067                           ;Config register CONFIG4H @ 0x300007
  7068                           ;	unspecified, using default values
  7069                           ;	Configuration Register Write Protection bit
  7070                           ;	WRTC = 0x1, unprogrammed default
  7071                           ;	Boot Block Write Protection bit
  7072                           ;	WRTB = 0x1, unprogrammed default
  7073                           ;	Data EEPROM Write Protection bit
  7074                           ;	WRTD = 0x1, unprogrammed default
  7075                           ;	Scanner Enable bit
  7076                           ;	SCANE = 0x1, unprogrammed default
  7077                           ;	Low Voltage Programming Enable bit
  7078                           ;	LVP = 0x1, unprogrammed default
  7079   300007                     	org	3145735
  7080   300007  FF                 	db	255
  7081                           
  7082                           ;Config register CONFIG5L @ 0x300008
  7083                           ;	unspecified, using default values
  7084                           ;	UserNVM Program Memory Code Protection bit
  7085                           ;	CP = 0x1, unprogrammed default
  7086                           ;	DataNVM Memory Code Protection bit
  7087                           ;	CPD = 0x1, unprogrammed default
  7088   300008                     	org	3145736
  7089   300008  FF                 	db	255
  7090                           
  7091                           ;Config register CONFIG5H @ 0x300009
  7092                           ;	unspecified, using default values
  7093   300009                     	org	3145737
  7094   300009  FF                 	db	255
  7095                           
  7096                           ;Config register CONFIG6L @ 0x30000A
  7097                           ;	unspecified, using default values
  7098                           ;	Table Read Protection Block 0
  7099                           ;	EBTR0 = 0x1, unprogrammed default
  7100                           ;	Table Read Protection Block 1
  7101                           ;	EBTR1 = 0x1, unprogrammed default
  7102                           ;	Table Read Protection Block 2
  7103                           ;	EBTR2 = 0x1, unprogrammed default
  7104                           ;	Table Read Protection Block 3
  7105                           ;	EBTR3 = 0x1, unprogrammed default
  7106                           ;	Table Read Protection Block 4
  7107                           ;	EBTR4 = 0x1, unprogrammed default
  7108                           ;	Table Read Protection Block 5
  7109                           ;	EBTR5 = 0x1, unprogrammed default
  7110                           ;	Table Read Protection Block 6
  7111                           ;	EBTR6 = 0x1, unprogrammed default
  7112                           ;	Table Read Protection Block 7
  7113                           ;	EBTR7 = 0x1, unprogrammed default
  7114   30000A                     	org	3145738
  7115   30000A  FF                 	db	255
  7116                           
  7117                           ;Config register CONFIG6H @ 0x30000B
  7118                           ;	unspecified, using default values
  7119                           ;	Boot Block Table Read Protection bit
  7120                           ;	EBTRB = 0x1, unprogrammed default
  7121   30000B                     	org	3145739
  7122   30000B  FF                 	db	255
  7123                           tosu	equ	0xFFF
  7124                           tosh	equ	0xFFE
  7125                           tosl	equ	0xFFD
  7126                           stkptr	equ	0xFFC
  7127                           pclatu	equ	0xFFB
  7128                           pclath	equ	0xFFA
  7129                           pcl	equ	0xFF9
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           indf0	equ	0xFEF
  7137                           postinc0	equ	0xFEE
  7138                           postdec0	equ	0xFED
  7139                           preinc0	equ	0xFEC
  7140                           plusw0	equ	0xFEB
  7141                           fsr0h	equ	0xFEA
  7142                           fsr0l	equ	0xFE9
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postinc1	equ	0xFE6
  7146                           postdec1	equ	0xFE5
  7147                           preinc1	equ	0xFE4
  7148                           plusw1	equ	0xFE3
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           bsr	equ	0xFE0
  7152                           indf2	equ	0xFDF
  7153                           postinc2	equ	0xFDE
  7154                           postdec2	equ	0xFDD
  7155                           preinc2	equ	0xFDC
  7156                           plusw2	equ	0xFDB
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         338
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      90
    BANK0           160     44     152
    BANK1           256      0     144
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _return_back->_turnLeft
    _return_back->_turnRight
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   99653
                                             56 COMRAM    24    24      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                  _get_wall_presence
                    _initDCmotorsPWM
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   35028
                                             29 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4393
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   35702
                                             29 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    5207
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    4904
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    5023
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    5023
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3957
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      5A       1       95.7%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24A      60        0.0%
DATA                 0      0     24A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 18:41:12 2022

               _color_read_Red 1C88             RobotMovement@color 001E                _color_read_Blue 1D78  
                           l71 146C                             l73 14A2                             l82 1F76  
                           l74 1482                             l91 1D26                             l67 1450  
                           l85 1CD6                             l77 1494                             l94 1D76  
                           l88 1DC6            ___wmul@multiplicand 0003               _color_read_Clear 1D28  
             ?_calibrate_black 0001               _color_read_Green 1CD8            RobotMovement@motorL 0020  
          RobotMovement@motorR 0022              ??_Interrupts_init 0001                            l112 1E6E  
                          l113 1E70                            l114 1E84                            l115 1E86  
                          l116 1E9A                            l300 0AE4                            l213 0F82  
                          l141 136A                            l109 0E16                            l118 1E9C  
                          l206 1A06                            l216 1E10                            l144 179C  
                          l136 090C                            l225 10DC                            l241 16F2  
                          l313 0B18                            l305 0ACA                            l234 122C  
                          l138 0914                            l251 1C86                            l147 18DC  
                          l340 1F08                            l263 1A7A                            l343 1F0A  
                          l248 15CA                            l352 1FEE                            l432 0CA4  
                          l257 1AEE                            l361 1EDE                            l290 0576  
                          l282 03E2                            l346 1F30                            l451 1F56  
                          l283 0424                            l355 1FDA                            l277 025E  
                          l349 1FE4                            l293 1FD0                            l278 02A0  
                          l358 1FBA                            l462 1BBC                            l463 1BCC  
                          l448 1F96                            l297 1E58                            l378 1FC6  
                          l485 1840                            l478 1830                            l942 1B5A  
                          l949 1B62                            _RGB 00EC               ?_calibrate_white 0001  
                          wreg 000FE8                           l3000 1F80                           l3002 1F92  
                         l3010 0B22                           l3004 1F94                           l2220 1FE0  
                         l2300 1E5A                           l3020 0B38                           l3012 0B2E  
                         l2310 0E34                           l2214 1F0A                           l2230 1FE6  
                         l2222 1FB2                           l2302 1E68                           l3030 0B54  
                         l3022 0B3C                           l3014 0B2E                           l3006 0B1A  
                         l2320 0EFE                           l2312 0E88                           l2216 1F1A  
                         l2240 1EB4                           l2232 1FEA                           l2224 1FB6  
                         l2304 1E7E                           l2400 0D7E                           l3040 0B70  
                         l3032 0B5C                           l3024 0B40                           l3016 0B32  
                         l3008 0B1E                           l2250 1F4E                           l2322 0F42  
                         l2314 0E9C                           l2410 1DC8                           l2330 1EF2  
                         l2242 1EDA                           l2234 1EA0                           l2218 1FDC  
                         l2226 1FD2                           l2306 1E94                           l2402 0D9A  
                         l3050 0BB8                           l3042 0B78                           l3034 0B60  
                         l3026 0B44                           l3018 0B36                           l2260 1B12  
                         l2316 0EA0                           l2308 0E18                           l2412 1DE0  
                         l2500 117A                           l2332 1EF4                           l2324 1EE0  
                         l2244 1EDC                           l2236 1EA4                           l2228 1FD6  
                         l2340 1700                           l2404 0DB2                           l3060 0C04  
                         l3052 0BCE                           l3044 0B80                           l3036 0B64  
                         l3028 0B4C                           l2270 1B4C                           l2262 1B1A  
                         l2254 1AF0                           l2318 0EE2                           l2414 1DEC  
                         l2430 0F9C                           l2510 11AE                           l2334 1EF6  
                         l2326 1EEA                           l2238 1EAC                           l2350 1768  
                         l2342 1716                           l2406 0DBA                           l3070 0C8C  
                         l3062 0C20                           l3054 0BE0                           l3046 0B98  
                         l3038 0B68                           l2272 1B4E                           l2264 1B28  
                         l2256 1AF8                           l2248 1F32                           l2416 1DF8  
                         l2440 0FEC                           l2432 0FBC                           l2424 0F94  
                         l2520 11F0                           l2512 11BA                           l2600 1560  
                         l2328 1EF0                           l2360 1250                           l2352 177E  
                         l2344 1728                           l2336 1F5A                           l3064 0C3C  
                         l3056 0BE4                           l3048 0BAC                           l2274 1B54  
                         l2266 1B2E                           l2258 1B0A                           l2442 1004  
                         l2434 0FC8                           l2418 0F84                           l2522 120C  
                         l2514 11C6                           l2506 1182                           l2610 15A6  
                         l2602 156C                           l2282 1D78                           l2290 1D1E  
                         l2370 12B8                           l2362 1262                           l2354 1790  
                         l2346 1734                           l2338 16F4                           l3066 0C4E  
                         l3058 0BF8                           l2268 1B44                           l2620 1AB4  
                         l2460 1074                           l2452 1030                           l2444 100C  
                         l2436 0FD4                           l2540 1618                           l2532 15D4  
                         l2524 1210                           l2516 11D2                           l2508 11A2  
                         l2612 15AE                           l2604 1578                           l2284 1DBE  
                         l2276 1C88                           l2380 131A                           l2372 12CA  
                         l2364 126E                           l2356 122E                           l2348 175C  
                         l2700 13FE                           l3068 0C7A                           l2622 1AC0  
                         l2614 1A7C                           l2630 1A14                           l2470 10C0  
                         l2462 1080                           l2454 1050                           l2446 1028  
                         l2438 0FE0                           l2542 1624                           l2534 15F4  
                         l2526 15CC                           l2518 11E8                           l2606 1584  
                         l2294 1D28                           l2278 1CCE                           l2382 1332  
                         l2374 12EC                           l2366 1296                           l2358 123A  
                         l2710 1448                           l2702 1410                           l2390 0CE6  
                         l2624 1ACC                           l2616 1A88                           l2632 1A34  
                         l2640 1A64                           l2464 1098                           l2456 105C  
                         l2560 16A0                           l2544 163C                           l2536 1600  
                         l2472 10DE                           l2608 1590                           l2296 1D6E  
                         l2288 1CD8                           l2384 134E                           l2376 12F8  
                         l2368 12A2                           l2720 147E                           l2712 144C  
                         l2704 1422                           l2392 0CFE                           l2800 18AA  
                         l2618 1AA8                           l2626 1AD8                           l2634 1A40  
                         l2466 10A0                           l2458 1068                           l2562 16AC  
                         l2554 1668                           l2546 1644                           l2538 160C  
                         l2490 1126                           l2570 14A4                           l2378 1304  
                         l2722 1490                           l2714 144E                           l2706 1434  
                         l2650 1B9C                           l2642 1B64                           l2394 0D24  
                         l2386 0CAC                           l2730 05AC                           l2810 19D6  
                         l2636 1A4C                           l2628 1A08                           l2468 10BC  
                         l2564 16B8                           l2556 1688                           l2548 1660  
                         l2492 1132                           l2484 10EE                           l2580 14D8  
                         l2900 0334                           l2716 145E                           l2708 1446  
                         l2660 17D8                           l2652 179E                           l2644 1B74  
                         l2396 0D40                           l2388 0CCA                           l2740 0614  
                         l2732 05B8                           l2724 0578                           l2820 19F8  
                         l2812 19E0                           l2804 1978                           l2638 1A58  
                         l2566 16CE                           l2558 1694                           l2494 113E  
                         l2486 110E                           l2478 10E6                           l2590 151C  
                         l2582 14E4                           l2910 040A                           l2902 0366  
                         l2830 1C46                           l2670 1820                           l2662 17E6  
                         l2654 17AE                           l2646 1B82                           l2398 0D58  
                         l2750 06CE                           l2742 0620                           l2734 05E0  
                         l2726 0584                           l2822 19FA                           l2814 19E2  
                         l2806 1988                           l2568 16D6                           l2496 1156  
                         l2488 111A                           l2592 1538                           l2584 14F0  
                         l2576 14AC                           l2920 0488                           l2912 043E  
                         l2904 039A                           l2840 0032                           l2680 138A  
                         l2832 1C56                           l2672 182A                           l2664 17F0  
                         l2656 17C4                           l2648 1B92                           l2760 079C  
                         l2752 06EE                           l2744 0640                           l2736 05EC  
                         l2728 059A                           l2824 1A04                           l2816 19EC  
                         l2808 19B2                           l2498 115E                           l2586 14FC  
                         l2578 14CC                           l2930 04E8                           l2922 04A2  
                         l2914 0442                           l2906 03A2                           l2850 00A6  
                         l2842 0062                           l2690 13A4                           l2682 1394  
                         l2674 136C                           l2834 1C62                           l2826 1C2E  
                         l2666 180E                           l2658 17CC                           l2770 0864  
                         l2762 07B0                           l2754 0702                           l2746 0654  
                         l2738 0602                           l2818 19EE                           l2588 1514  
                         l2940 0508                           l2932 04EC                           l2924 04A6  
                         l2908 03C8                           l2916 0460                           l2860 00FE  
                         l2852 00B8                           l2844 0074                           l2692 13B6  
                         l2684 139E                           l2676 1370                           l2836 1C6E  
                         l2828 1C36                           l2668 181E                           l2780 08CA  
                         l2764 081A                           l2756 076C                           l2748 06BE  
                         l2598 1540                           l2950 055A                           l2942 051C  
                         l2934 0500                           l2926 04BA                           l2918 0474  
                         l2870 0134                           l2854 00CC                           l2846 0088  
                         l2694 13C8                           l2686 13A0                           l2678 137A  
                         l2838 1C7A                           l2782 08E2                           l2766 082A  
                         l2758 077C                           l2790 184E                           l2944 0520  
                         l2928 04CE                           l2880 01B0                           l2872 0138  
                         l2856 00E6                           l2848 00A2                           l2696 13DA  
                         l2688 13A2                           l2784 08F2                           l2776 086C  
                         l2768 085A                           l2952 1FC8                           l2792 1864  
                         l2960 0916                           l2946 053C                           l2890 0286  
                         l2882 01E2                           l2874 013C                           l2866 0106  
                         l2858 00EA                           l2954 1E12                           l2698 13EC  
                         l2786 08F6                           l2778 089A                           l2794 1870  
                         l2970 0998                           l2962 091A                           l2948 0544  
                         l2892 02BA                           l2884 0216                           l2868 011A  
                         l2876 0158                           l2956 1E2E                           l2796 187C  
                         l2788 1842                           l2980 0A48                           l2972 09C0  
                         l2964 0940                           l2894 02BE                           l2886 021E  
                         l2878 016C                           l2958 1E54                           l2798 189E  
                         l2990 0ADE                           l2982 0A76                           l2974 09D8  
                         l2966 0958                           l2888 0244                           l2896 02DC  
                         l2992 0AFE                           l2984 0A8E                           l2976 0A00  
                         l2968 0980                           l2898 02F0                           l2994 0B10  
                         l2986 0AAA                           l2978 0A18                           l2996 1FBC  
                         l2988 0ACA                           l2998 1F78                           u2000 1E2E  
                         u2001 1E2A                           u2010 0940                           u2011 093C  
                         u1300 1B28                           u2020 0980                           u2100 0C4E  
                         u1301 1B24                           u2021 097C                           u2101 0C4A  
                         u1310 1B44                           u2030 09C0                           u2110 0C8C  
                         u1311 1B40                           u2031 09BC                           u2111 0C88  
                         u1400 1028                           u1320 1E68                           u2040 0A00  
                         u1401 1024                           u1321 1E64                           u2041 09FC  
                         u1410 10BC                           u1250 1F1A                           u1330 1E7E  
                         u2050 0A48                           u1411 10B8                           u1251 1F16  
                         u1331 1E7A                           u2051 0A44                           u1500 1AEE  
                         u1420 10DC                           u1260 1F30                           u1340 1E94  
                         u2060 0AFE                           u1501 1AEA                           u1421 10D8  
                         u1261 1F2C                           u1341 1E90                           u2061 0AFA  
                         u1350 0E34                           u1510 1A7A                           u1430 117A  
                         u1270 1EC8                           u2070 0B10                           u1351 0E30  
                         u1511 1A76                           u1431 1176                           u1271 1EC0  
                         u2071 0B0C                           u1360 0EFE                           u1440 120C  
                         u1520 1B82                           u2080 0BCE                           u1361 0EFA  
                         u1441 1208                           u1601 13E4                           u1521 1B7E  
                         u2081 0BCA                           u1290 1B0A                           u1450 122C  
                         u1530 1BBC                           u1370 0CCA                           u2090 0BE0  
                         u1291 1B06                           u1451 1228                           u1611 13F6  
                         u1531 1BB8                           u1371 0CC6                           u2091 0BDC  
                         u1460 1660                           u1700 14A2                           u1540 17C4  
                         u1380 0D24                           u1461 165C                           u1701 149E  
                         u1621 1408                           u1541 17C0                           u1381 0D20  
                         u1470 16F2                           u1550 17E6                           u1390 0D7E  
                         u1710 0640                           u1471 16EE                           u1631 141A  
                         u1551 17E2                           u1391 0D7A                           u1711 063C  
                         u1480 1538                           u1288 1ECA                           u1560 180E  
                         u1800 090C                           u1720 06EE                           u1481 1534  
                         u1641 142C                           u1561 180A                           u1801 0908  
                         u1721 06EA                           u1490 15CA                           u1730 079C  
                         u1810 18D6                           _T2PR 000FBC                     _Black_rule 016C  
                         u1491 15C6                           u1651 143E                           u1571 13AE  
                         u1731 0798                           u1811 18D0                           u2507 1858  
                         u1900 0286                           u1660 145E                           u1820 18D8  
                         u1901 0282                           u1661 145A                           u1581 13C0  
                         u1741 0834                           u2517 1886                           u1910 02F0  
                         u1830 0074                           u1670 146C                           u1911 02EC  
                         u1831 0070                           u2607 1278                           u1671 1468  
                         u1591 13D2                           u1751 0846                           u2527 058E  
                         u1920 0366                           u1840 00B8                           u1680 147A  
                         u1921 0362                           u1841 00B4                           u2617 12AC  
                         u1681 1476                           u1761 0892                           u2537 05C2  
                         u1930 03C8                           u1850 00FE                           u1690 1490  
                         u2707 0FF6                           u1931 03C4                           u1851 00FA  
                         u2627 12E0                           u1691 148C                           u1771 08A4  
                         u2547 05F6                           u1940 040A                           u1860 0158  
                         u2717 108A                           u1941 0406                           u1861 0154  
                         u2637 130E                           u2557 1380                           u1781 08B6  
                         u1950 0474                           u1870 016C                           u1790 08E2  
                         u2727 1E02                           u2647 1506                           u1951 0470  
                         u1871 0168                           u2567 170A                           u1791 08DE  
                         u2487 0B8A                           u1960 04BA                           u1880 01E2  
                         u2657 159A                           u1961 04B6                           u1881 01DE  
                         u2577 173E                           u2497 0A80                           u1970 0500  
                         u1890 0244                           u2667 1148                           u1971 04FC  
                         u1891 0240                           u2587 1772                           u1980 053C  
                         u2677 11DC                           u1981 0538                           u2597 1244  
                         u1990 055A                           u2687 162E                           u1991 0556  
                         u2697 16C2                           _main 0B1A                           fsr2h 000FDA  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                         btemp 005B                           _stop 1DC8                           prodh 000FF4  
                         prodl 000FF3                           start 002E         __end_of_color_read_Red 1CD8  
              __end_of_HighISR 002E                   ___param_bank 000000             _get_color_code$460 00D4  
           _get_color_code$458 00CC             _get_color_code$459 00D0                          ?_main 0001  
              __end_of___lldiv 1842                          ?_stop 0014            _add_seconds_to_list 1E12  
                  _Black_setup 0060                __end_of___lwdiv 1B64                          i2l266 1FF4  
                        i2l384 002A                          _TMR0H 000FD4                          _TMR0L 000FD3  
          ___lmul@multiplicand 0005     __end_of_I2C_2_Master_Start 1FE6     __end_of_I2C_2_Master_Write 1FBC  
           _get_color_distance 0CAC                          _index 0053                          _state 0051  
                        tablat 000FF5                          plusw0 000FEB                          plusw1 000FE3  
                        plusw2 000FDB            ?_get_color_distance 0007                          ttemp5 005C  
                        ttemp6 005F                          ttemp7 0063                          status 000FD8  
                        wtemp8 005C           ?_add_seconds_to_list 0001                     _Green_rule 00A8  
      __end_of_color_read_Blue 1DC8          _I2C_2_Master_RepStart 1FE6                ?_color_read_Red 0005  
              __initialization 18DE                   __end_of_main 0CAC                   __end_of_stop 1E12  
                 _turnLeftLong 15CC           ??_get_color_distance 001F                         ??_main 0039  
                       ??_stop 0018                  __activetblptr 000000            _get_color_code$2441 00C0  
                 ?_setMotorPWM 000E                         _CCPR1H 000FAA                         _CCPR2H 000FA6  
                       _CCPR3H 000F25                         _CCPR4H 000F21                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
                       _RE4PPS 000E76                         i2l1750 1FF0                         i2l1920 001A  
                       i2l1922 001E                         i2l1924 0022                         i2l1926 0026  
                       i2l1918 000A                         _RG6PPS 000E88                      ??_HighISR 0001  
     __end_of_color_click_init 14A4          ??_add_seconds_to_list 0001                 RobotMovement@i 0026  
        __end_of_RobotMovement 0578               ??_get_color_code 0037                  ??_Timer0_init 0001  
                 _CCPTMRS0bits 000FAD                         ___lmul 1B64       get_color_distance@color1 0007  
     get_color_distance@color2 0013                         ___wmul 1F32                      ??___lldiv 0015  
                    ??___lwdiv 000B                    _Color_rules 0100                         clear_0 1944  
                       clear_1 1950                         clear_2 195C                         isa$std 000001  
             __end_of_moveBack 1A7C          calibrate_black@clear1 0010          calibrate_black@clear2 0012  
                 __pdataCOMRAM 0057                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                   ?_return_back 001E                 _Lightblue_rule 0184  
                   _White_rule 0178                         stop@mL 0014                         stop@mR 0016  
            ??_initDCmotorsPWM 0003               __end_of_turnLeft 10DE          __end_of_set_led_color 1E9E  
                   __accesstop 0060        __end_of__initialization 196E       __end_of_color_read_Clear 1D78  
      get_wall_presence@clear1 0010        get_wall_presence@clear2 0012       __end_of_color_read_Green 1D28  
       ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001               ?_color_read_Blue 0005  
              _Interrupts_init 1FBC                 __pcstackCOMRAM 0001                   __pidataBANK0 1BCE  
                 __pidataBANK1 1F98            __end_of_Timer0_init 1F98                     __pbssBANK0 00EC  
                   __pbssBANK1 0100                     __pbssBANK2 0200                  _turnRightLong 14A4  
            _color_writetoaddr 1F58                   _T2CLKCONbits 000FBF             ?_color_writetoaddr 0003  
                      ?___lmul 0001                        ?___wmul 0001                 main@color_code 003B  
               ___lmul@product 0009                get_color_code@i 00DE            ??_color_writetoaddr 0004  
            return_back@motorL 001E              return_back@motorR 0020        get_color_code@min_index 00DA  
                      i2u84_40 001A                        i2u84_41 0016                        _SSP2ADD 000ED6  
                      _SSP2BUF 000ED5        get_color_code@min_value 00D8              _get_wall_presence 1842  
                  _Orange_rule 0078             ?_get_wall_presence 000C        __end_of_Interrupts_init 1FC8  
       color_writetoaddr@value 0003               ??_color_read_Red 0007                        _HighISR 0008  
    __end_of_color_writetoaddr 1F78                 ?_turnRightLong 0014             _I2C_2_Master_Start 1FDC  
           _I2C_2_Master_Write 1FB0                      ?_moveBack 0014                        __Hparam 0000  
          ??_get_wall_presence 000E                        __Lparam 0000              color_read_Red@tmp 000A  
                  _Timer0_init 1F78              __end_of_get_state 1FD2                        ___lldiv 179E  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 1AF0            ?_I2C_2_Master_Write 0001  
                      __pcinit 18DE                        __ramtop 0E00                      ?_turnLeft 0014  
                      __ptext0 0B1A                        __ptext1 0916                        __ptext2 1978  
                      __ptext3 1842                        __ptext4 1FC8                        __ptext5 0578  
                      __ptext6 0CAC                        __ptext7 1B64                        __ptext8 179E  
                      __ptext9 1C2E                      _T2CONbits 000FBD                        _seconds 0055  
                    _T2HLTbits 000FBE      __end_of_get_wall_presence 18DE           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 196E              ?_color_click_init 0001  
                   ??_moveBack 001A                ___lldiv@divisor 0011             ??_color_click_init 0016  
              ___lldiv@counter 0019                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                    _White_setup 006C  
              _initDCmotorsPWM 1978                     ??_turnLeft 0018                      _PORTFbits 000F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 122E                    _Yellow_rule 0090  
                    _TRISAbits 000F81             setMotorPWM@posDuty 0012                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87           _calibrate_black$2442 0014    __end_of_add_seconds_to_list 1E5A  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0016       color_writetoaddr@address 0004  
   get_color_distance@B_offset 0033        ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001  
              ??_turnRightLong 0018                    _CCP1CONbits 000FAB     get_color_distance@G_offset 0031  
            _increment_seconds 1FF0              ?_color_read_Clear 0005                    _CCP2CONbits 000FA7  
            ??_calibrate_black 000E              ?_color_read_Green 0005                    _CCP3CONbits 000F26  
                  _CCP4CONbits 000F22                     main@motorL 003F                     main@motorR 0048  
            ??_calibrate_white 000C             ?_increment_seconds 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 _fullSpeedAhead 1C2E     get_color_distance@R_offset 002F  
                    _Blue_rule 009C            ??_increment_seconds 0001                 __end_of___lmul 1BCE  
               __end_of___wmul 1F58                  __pidataCOMRAM 1FF6            color_read_Clear@tmp 000A  
          start_initialization 18DE            _TimedfullSpeedAhead 1A7C      __end_of_increment_seconds 1FF6  
                    _Pink_rule 0084            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1A08  
         ?_TimedfullSpeedAhead 0014         __end_of_fullSpeedAhead 1C88                       ??___lmul 0009  
                     ??___wmul 0005                    __pdataBANK0 0060                    __pdataBANK1 0178  
       _get_color_distance$421 002B         _get_color_distance$417 0023         _get_color_distance$419 0027  
                  __pbssCOMRAM 0051                  __pcstackBANK0 00C0            get_color_code@value 00DC  
                     ?_HighISR 0001                  _RobotMovement 0032               ___lwdiv@dividend 0007  
        ??_TimedfullSpeedAhead 001A                   ?_Timer0_init 0001                ?_fullSpeedAhead 0014  
                   moveBack@mL 0014                     moveBack@mR 0016                      __pintcode 0008  
                     ?___lldiv 000D                       ?___lwdiv 0007                  ?_turnLeftLong 0014  
                 moveBack@time 0018                      _get_state 1FC8           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004          TimedfullSpeedAhead@mL 0014          TimedfullSpeedAhead@mR 0016  
  get_color_code@NormalizedRGB 00E0              _I2C_2_Master_Idle 1F0A              _I2C_2_Master_Init 1EE0  
            _I2C_2_Master_Read 1E9E              _I2C_2_Master_Stop 1FD2             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001  
              turnRightLong@mL 0014                turnRightLong@mR 0016                 turnLeftLong@mL 0014  
               turnLeftLong@mR 0016            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 000F79  
                _set_led_color 1E5A            ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B  
                     _LATEbits 000F7D                       _LATFbits 000F7E                       _LATGbits 000F7F  
                     _PIE0bits 000E29                 ?_RobotMovement 001E                       _PIE2bits 000E2B  
                  turnRight@mL 0014                    turnRight@mR 0016                       _PIR0bits 000E33  
             ?_initDCmotorsPWM 0001                      _wall_coef 0059                      _wait_time 0057  
                     _SSP2CON2 000EDA                 ??_turnLeftLong 0018                       _SSP2STAT 000ED8  
           set_led_color@color 0001                     ?_get_state 0001      __end_of_I2C_2_Master_Idle 1F32  
    __end_of_I2C_2_Master_Init 1F0A      __end_of_I2C_2_Master_Read 1EE0              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 1FDC                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
                _movement_list 0200                      main@state 003D              ??_color_read_Blue 0007  
                ??_return_back 0022                _calibrate_black 122E        TimedfullSpeedAhead@time 0018  
                    _turnRight 10DE                _calibrate_white 16F4              ___lmul@multiplier 0001  
                    copy_data0 18F2                      copy_data1 1912                      copy_data2 1932  
               ?_set_led_color 0001  __end_of_I2C_2_Master_RepStart 1FF0             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 0F84                       _Red_rule 00B4                       __Hrparam 0000  
                     __Lrparam 0000     __end_of_get_color_distance 0E18                 _get_color_code 0578  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6                ___lwdiv@divisor 0009                ___lwdiv@counter 000D  
                   ?_turnRight 0014                       __ptext10 136C                       __ptext11 1F58  
                     __ptext20 1FD2                       __ptext12 16F4                       __ptext21 1FDC  
                     __ptext13 122E                       __ptext30 10DE                       __ptext22 1FE6  
                     __ptext14 1E5A                       __ptext31 15CC                       __ptext23 1E9E  
                     __ptext15 1C88                       __ptext32 0F84                       __ptext24 1F0A  
                     __ptext16 1CD8                       __ptext41 1FF0                       __ptext33 1DC8  
                     __ptext25 1EE0                       __ptext17 1D28                       __ptext34 1A08  
                     __ptext26 1E12                       __ptext18 1D78                       __ptext35 1A7C  
                     __ptext27 1F78                       __ptext19 1FB0                       __ptext36 0E18  
                     __ptext28 0032                       __ptext37 1F32                       __ptext29 14A4  
                     __ptext38 1AF0                       __ptext39 1FBC                   _SSP2CON1bits 000ED9  
                 _SSP2CON2bits 000EDA                ??_RobotMovement 0024            __end_of_return_back 0B1A  
                   turnLeft@mL 0014                     turnLeft@mR 0016                 turnRightLong@i 001A  
                turnLeftLong@i 001A          __end_of_turnRightLong 15CC                       _moveBack 1A08  
                   turnRight@i 001C                     turnRight@k 001A                       isa$xinst 000000  
                     int$flags 005B         __end_of_get_color_code 0916        __end_of_calibrate_black 136C  
                     _turnLeft 0F84                    ??_get_state 0003        __end_of_calibrate_white 179E  
                   _INTCONbits 000FF2                    _setMotorPWM 0E18                ??_set_led_color 0003  
         __end_of_turnLeftLong 16F4                       intlevel2 0000               ___lldiv@dividend 000D  
             ??_fullSpeedAhead 0018                      turnLeft@i 001C                      turnLeft@k 001A  
              ?_get_color_code 0035               _color_click_init 136C                     _SSP2DATPPS 000E1D  
             ___lldiv@quotient 0015                     _SSP2CLKPPS 000E1C                    _return_back 0916  
                  ??_turnRight 0018    __end_of_TimedfullSpeedAhead 1AF0            RobotMovement@i_1265 0028  
