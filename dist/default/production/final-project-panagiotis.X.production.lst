

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 16:42:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   001F74                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _wait_time
   106   001F74  00DC               	dw	220
   107                           
   108                           ;initializer for _wall_coef
   109   001F76  000F               	dw	15
   110                           
   111                           	psect	idataBANK0
   112   001B4C                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _Black_setup
   116   001B4C  0404               	dw	1028
   117   001B4E  0000               	dw	0
   118   001B50  024B               	dw	587
   119   001B52  0000               	dw	0
   120   001B54  00A1               	dw	161
   121   001B56  0000               	dw	0
   122                           
   123                           ;initializer for _White_setup
   124   001B58  28FC               	dw	10492
   125   001B5A  0000               	dw	0
   126   001B5C  1B55               	dw	6997
   127   001B5E  0000               	dw	0
   128   001B60  0770               	dw	1904
   129   001B62  0000               	dw	0
   130                           
   131                           ;initializer for _Orange_rule
   132   001B64  005C               	dw	92
   133   001B66  0000               	dw	0
   134   001B68  0027               	dw	39
   135   001B6A  0000               	dw	0
   136   001B6C  001C               	dw	28
   137   001B6E  0000               	dw	0
   138                           
   139                           ;initializer for _Pink_rule
   140   001B70  004D               	dw	77
   141   001B72  0000               	dw	0
   142   001B74  003C               	dw	60
   143   001B76  0000               	dw	0
   144   001B78  0040               	dw	64
   145   001B7A  0000               	dw	0
   146                           
   147                           ;initializer for _Yellow_rule
   148   001B7C  005D               	dw	93
   149   001B7E  0000               	dw	0
   150   001B80  004C               	dw	76
   151   001B82  0000               	dw	0
   152   001B84  0014               	dw	20
   153   001B86  0000               	dw	0
   154                           
   155                           ;initializer for _Blue_rule
   156   001B88  0003               	dw	3
   157   001B8A  0000               	dw	0
   158   001B8C  0009               	dw	9
   159   001B8E  0000               	dw	0
   160   001B90  0024               	dw	36
   161   001B92  0000               	dw	0
   162                           
   163                           ;initializer for _Green_rule
   164   001B94  0019               	dw	25
   165   001B96  0000               	dw	0
   166   001B98  0036               	dw	54
   167   001B9A  0000               	dw	0
   168   001B9C  0008               	dw	8
   169   001B9E  0000               	dw	0
   170                           
   171                           ;initializer for _Red_rule
   172   001BA0  0048               	dw	72
   173   001BA2  0000               	dw	0
   174   001BA4  0002               	dw	2
   175   001BA6  0000               	dw	0
   176   001BA8  0002               	dw	2
   177   001BAA  0000               	dw	0
   178                           
   179                           	psect	idataBANK1
   180   001F16                     __pidataBANK1:
   181                           	callstack 0
   182                           
   183                           ;initializer for _White_rule
   184   001F16  0064               	dw	100
   185   001F18  0000               	dw	0
   186   001F1A  0064               	dw	100
   187   001F1C  0000               	dw	0
   188   001F1E  0064               	dw	100
   189   001F20  0000               	dw	0
   190                           
   191                           ;initializer for _Lightblue_rule
   192   001F22  0026               	dw	38
   193   001F24  0000               	dw	0
   194   001F26  0048               	dw	72
   195   001F28  0000               	dw	0
   196   001F2A  0054               	dw	84
   197   001F2C  0000               	dw	0
   198   000000                     _T0CON0bits	set	4053
   199   000000                     _T0CON1bits	set	4054
   200   000000                     _TRISDbits	set	3972
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _SSP2CLKPPS	set	3612
   203   000000                     _SSP2DATPPS	set	3613
   204   000000                     _RC7PPS	set	3689
   205   000000                     _RE2PPS	set	3700
   206   000000                     _ANSELFbits	set	3764
   207   000000                     _TRISAbits	set	3969
   208   000000                     _TRISFbits	set	3974
   209   000000                     _PORTFbits	set	3982
   210   000000                     _TRISGbits	set	3975
   211   000000                     _TRISCbits	set	3971
   212   000000                     _TRISEbits	set	3973
   213   000000                     _SSP2BUF	set	3797
   214   000000                     _SSP2ADD	set	3798
   215   000000                     _SSP2CON1bits	set	3801
   216   000000                     _LATAbits	set	3961
   217   000000                     _LATGbits	set	3967
   218   000000                     _CCPR4H	set	3873
   219   000000                     _CCPR3H	set	3877
   220   000000                     _T2PR	set	4028
   221   000000                     _T2CONbits	set	4029
   222   000000                     _CCPR2H	set	4006
   223   000000                     _CCPR1H	set	4010
   224   000000                     _LATCbits	set	3963
   225   000000                     _LATEbits	set	3965
   226   000000                     _LATFbits	set	3966
   227   000000                     _RE4PPS	set	3702
   228   000000                     _RG6PPS	set	3720
   229   000000                     _RD5PPS	set	3695
   230   000000                     _ANSELDbits	set	3751
   231   000000                     _TMR0L	set	4051
   232   000000                     _TMR0H	set	4052
   233   000000                     _INTCONbits	set	4082
   234   000000                     _T2CLKCONbits	set	4031
   235   000000                     _T2HLTbits	set	4030
   236   000000                     _CCP1CONbits	set	4011
   237   000000                     _CCPTMRS0bits	set	4013
   238   000000                     _CCP2CONbits	set	4007
   239   000000                     _CCP3CONbits	set	3878
   240   000000                     _CCP4CONbits	set	3874
   241   000000                     _SSP2CON2	set	3802
   242   000000                     _SSP2STAT	set	3800
   243   000000                     _PIE0bits	set	3625
   244   000000                     _RD6PPS	set	3696
   245   000000                     _PIE2bits	set	3627
   246   000000                     _PIR0bits	set	3635
   247                           
   248                           ; #config settings
   249                           
   250                           	psect	cinit
   251   00185C                     __pcinit:
   252                           	callstack 0
   253   00185C                     start_initialization:
   254                           	callstack 0
   255   00185C                     __initialization:
   256                           	callstack 0
   257                           
   258                           ; Initialize objects allocated to BANK1 (24 bytes)
   259                           ; load TBLPTR registers with __pidataBANK1
   260   00185C  0E16               	movlw	low __pidataBANK1
   261   00185E  6EF6               	movwf	tblptrl,c
   262   001860  0E1F               	movlw	high __pidataBANK1
   263   001862  6EF7               	movwf	tblptrh,c
   264   001864  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   265   001866  6EF8               	movwf	tblptru,c
   266   001868  EE01  F078         	lfsr	0,__pdataBANK1
   267   00186C  EE10 F018          	lfsr	1,24
   268   001870                     copy_data0:
   269   001870  0009               	tblrd		*+
   270   001872  CFF5 FFEE          	movff	tablat,postinc0
   271   001876  50E5               	movf	postdec1,w,c
   272   001878  50E1               	movf	fsr1l,w,c
   273   00187A  E1FA               	bnz	copy_data0
   274                           
   275                           ; Initialize objects allocated to BANK0 (96 bytes)
   276                           ; load TBLPTR registers with __pidataBANK0
   277   00187C  0E4C               	movlw	low __pidataBANK0
   278   00187E  6EF6               	movwf	tblptrl,c
   279   001880  0E1B               	movlw	high __pidataBANK0
   280   001882  6EF7               	movwf	tblptrh,c
   281   001884  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   282   001886  6EF8               	movwf	tblptru,c
   283   001888  EE00  F060         	lfsr	0,__pdataBANK0
   284   00188C  EE10 F060          	lfsr	1,96
   285   001890                     copy_data1:
   286   001890  0009               	tblrd		*+
   287   001892  CFF5 FFEE          	movff	tablat,postinc0
   288   001896  50E5               	movf	postdec1,w,c
   289   001898  50E1               	movf	fsr1l,w,c
   290   00189A  E1FA               	bnz	copy_data1
   291                           
   292                           ; Initialize objects allocated to COMRAM (4 bytes)
   293                           ; load TBLPTR registers with __pidataCOMRAM
   294   00189C  0E74               	movlw	low __pidataCOMRAM
   295   00189E  6EF6               	movwf	tblptrl,c
   296   0018A0  0E1F               	movlw	high __pidataCOMRAM
   297   0018A2  6EF7               	movwf	tblptrh,c
   298   0018A4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   299   0018A6  6EF8               	movwf	tblptru,c
   300   0018A8  EE00  F057         	lfsr	0,__pdataCOMRAM
   301   0018AC  EE10 F004          	lfsr	1,4
   302   0018B0                     copy_data2:
   303   0018B0  0009               	tblrd		*+
   304   0018B2  CFF5 FFEE          	movff	tablat,postinc0
   305   0018B6  50E5               	movf	postdec1,w,c
   306   0018B8  50E1               	movf	fsr1l,w,c
   307   0018BA  E1FA               	bnz	copy_data2
   308                           
   309                           ; Clear objects allocated to BANK2 (200 bytes)
   310   0018BC  EE02  F000         	lfsr	0,__pbssBANK2
   311   0018C0  0EC8               	movlw	200
   312   0018C2                     clear_0:
   313   0018C2  6AEE               	clrf	postinc0,c
   314   0018C4  06E8               	decf	wreg,f,c
   315   0018C6  E1FD               	bnz	clear_0
   316                           
   317                           ; Clear objects allocated to BANK1 (120 bytes)
   318   0018C8  EE01  F000         	lfsr	0,__pbssBANK1
   319   0018CC  0E78               	movlw	120
   320   0018CE                     clear_1:
   321   0018CE  6AEE               	clrf	postinc0,c
   322   0018D0  06E8               	decf	wreg,f,c
   323   0018D2  E1FD               	bnz	clear_1
   324                           
   325                           ; Clear objects allocated to BANK0 (12 bytes)
   326   0018D4  EE00  F0EC         	lfsr	0,__pbssBANK0
   327   0018D8  0E0C               	movlw	12
   328   0018DA                     clear_2:
   329   0018DA  6AEE               	clrf	postinc0,c
   330   0018DC  06E8               	decf	wreg,f,c
   331   0018DE  E1FD               	bnz	clear_2
   332                           
   333                           ; Clear objects allocated to COMRAM (6 bytes)
   334   0018E0  6A56               	clrf	(__pbssCOMRAM+5)& (0+255),c
   335   0018E2  6A55               	clrf	(__pbssCOMRAM+4)& (0+255),c
   336   0018E4  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   337   0018E6  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   338   0018E8  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   339   0018EA  6A51               	clrf	__pbssCOMRAM& (0+255),c
   340   0018EC                     end_of_initialization:
   341                           	callstack 0
   342   0018EC                     __end_of__initialization:
   343                           	callstack 0
   344   0018EC  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   345   0018EE  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   346   0018F0  0100               	movlb	0
   347   0018F2  EF5A  F004         	goto	_main	;jump to C main() function
   348                           
   349                           	psect	bssCOMRAM
   350   000051                     __pbssCOMRAM:
   351                           	callstack 0
   352   000051                     _state:
   353                           	callstack 0
   354   000051                     	ds	2
   355   000053                     _index:
   356                           	callstack 0
   357   000053                     	ds	2
   358   000055                     _seconds:
   359                           	callstack 0
   360   000055                     	ds	2
   361                           
   362                           	psect	dataCOMRAM
   363   000057                     __pdataCOMRAM:
   364                           	callstack 0
   365   000057                     _wait_time:
   366                           	callstack 0
   367   000057                     	ds	2
   368   000059                     _wall_coef:
   369                           	callstack 0
   370   000059                     	ds	2
   371                           
   372                           	psect	bssBANK0
   373   0000EC                     __pbssBANK0:
   374                           	callstack 0
   375   0000EC                     _RGB:
   376                           	callstack 0
   377   0000EC                     	ds	12
   378                           
   379                           	psect	dataBANK0
   380   000060                     __pdataBANK0:
   381                           	callstack 0
   382   000060                     _Black_setup:
   383                           	callstack 0
   384   000060                     	ds	12
   385   00006C                     _White_setup:
   386                           	callstack 0
   387   00006C                     	ds	12
   388   000078                     _Orange_rule:
   389                           	callstack 0
   390   000078                     	ds	12
   391   000084                     _Pink_rule:
   392                           	callstack 0
   393   000084                     	ds	12
   394   000090                     _Yellow_rule:
   395                           	callstack 0
   396   000090                     	ds	12
   397   00009C                     _Blue_rule:
   398                           	callstack 0
   399   00009C                     	ds	12
   400   0000A8                     _Green_rule:
   401                           	callstack 0
   402   0000A8                     	ds	12
   403   0000B4                     _Red_rule:
   404                           	callstack 0
   405   0000B4                     	ds	12
   406                           
   407                           	psect	bssBANK1
   408   000100                     __pbssBANK1:
   409                           	callstack 0
   410   000100                     _Color_rules:
   411                           	callstack 0
   412   000100                     	ds	108
   413   00016C                     _Black_rule:
   414                           	callstack 0
   415   00016C                     	ds	12
   416                           
   417                           	psect	dataBANK1
   418   000178                     __pdataBANK1:
   419                           	callstack 0
   420   000178                     _White_rule:
   421                           	callstack 0
   422   000178                     	ds	12
   423   000184                     _Lightblue_rule:
   424                           	callstack 0
   425   000184                     	ds	12
   426                           
   427                           	psect	bssBANK2
   428   000200                     __pbssBANK2:
   429                           	callstack 0
   430   000200                     _movement_list:
   431                           	callstack 0
   432   000200                     	ds	200
   433                           
   434                           	psect	cstackBANK0
   435   0000C0                     __pcstackBANK0:
   436                           	callstack 0
   437   0000C0                     _get_color_code$2442:
   438                           	callstack 0
   439                           
   440                           ; 12 bytes @ 0x0
   441   0000C0                     	ds	12
   442   0000CC                     _get_color_code$458:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0xC
   446   0000CC                     	ds	4
   447   0000D0                     _get_color_code$459:
   448                           	callstack 0
   449                           
   450                           ; 4 bytes @ 0x10
   451   0000D0                     	ds	4
   452   0000D4                     _get_color_code$460:
   453                           	callstack 0
   454                           
   455                           ; 4 bytes @ 0x14
   456   0000D4                     	ds	4
   457   0000D8                     get_color_code@min_value:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x18
   461   0000D8                     	ds	2
   462   0000DA                     get_color_code@min_index:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x1A
   466   0000DA                     	ds	2
   467   0000DC                     get_color_code@value:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x1C
   471   0000DC                     	ds	2
   472   0000DE                     get_color_code@i:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x1E
   476   0000DE                     	ds	2
   477   0000E0                     get_color_code@NormalizedRGB:
   478                           	callstack 0
   479                           
   480                           ; 12 bytes @ 0x20
   481   0000E0                     	ds	12
   482                           
   483                           	psect	cstackCOMRAM
   484   000001                     __pcstackCOMRAM:
   485                           	callstack 0
   486   000001                     ??_add_seconds_to_list:
   487   000001                     ??_I2C_2_Master_Idle:
   488   000001                     ?_get_state:
   489                           	callstack 0
   490   000001                     ?___wmul:
   491                           	callstack 0
   492   000001                     ?___lmul:
   493                           	callstack 0
   494   000001                     set_led_color@color:
   495                           	callstack 0
   496   000001                     initDCmotorsPWM@PWMperiod:
   497                           	callstack 0
   498   000001                     ___wmul@multiplier:
   499                           	callstack 0
   500   000001                     ___lmul@multiplier:
   501                           	callstack 0
   502                           
   503                           ; 4 bytes @ 0x0
   504   000001                     	ds	1
   505   000002                     ??_I2C_2_Master_Read:
   506   000002                     I2C_2_Master_Write@data_byte:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0x1
   510   000002                     	ds	1
   511   000003                     color_writetoaddr@value:
   512                           	callstack 0
   513   000003                     I2C_2_Master_Read@ack:
   514                           	callstack 0
   515   000003                     ___wmul@multiplicand:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519   000003                     	ds	1
   520   000004                     color_writetoaddr@address:
   521                           	callstack 0
   522   000004                     I2C_2_Master_Read@tmp:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x3
   526   000004                     	ds	1
   527   000005                     ?_color_read_Red:
   528                           	callstack 0
   529   000005                     ?_color_read_Blue:
   530                           	callstack 0
   531   000005                     ?_color_read_Green:
   532                           	callstack 0
   533   000005                     ?_color_read_Clear:
   534                           	callstack 0
   535   000005                     ___wmul@product:
   536                           	callstack 0
   537   000005                     ___lmul@multiplicand:
   538                           	callstack 0
   539                           
   540                           ; 4 bytes @ 0x4
   541   000005                     	ds	2
   542   000007                     ??_color_read_Red:
   543   000007                     ??_color_read_Blue:
   544   000007                     ??_color_read_Green:
   545   000007                     ??_color_read_Clear:
   546   000007                     ?_get_color_distance:
   547                           	callstack 0
   548   000007                     ?___lwdiv:
   549                           	callstack 0
   550   000007                     ___lwdiv@dividend:
   551                           	callstack 0
   552   000007                     get_color_distance@color1:
   553                           	callstack 0
   554                           
   555                           ; 12 bytes @ 0x6
   556   000007                     	ds	2
   557   000009                     ___lwdiv@divisor:
   558                           	callstack 0
   559   000009                     ___lmul@product:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x8
   563   000009                     	ds	1
   564   00000A                     color_read_Red@tmp:
   565                           	callstack 0
   566   00000A                     color_read_Blue@tmp:
   567                           	callstack 0
   568   00000A                     color_read_Green@tmp:
   569                           	callstack 0
   570   00000A                     color_read_Clear@tmp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574   00000A                     	ds	1
   575   00000B                     ___lwdiv@quotient:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0xA
   579   00000B                     	ds	1
   580   00000C                     ??_calibrate_white:
   581   00000C                     ?_get_wall_presence:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0xB
   585   00000C                     	ds	1
   586   00000D                     ?___lldiv:
   587                           	callstack 0
   588   00000D                     ___lwdiv@counter:
   589                           	callstack 0
   590   00000D                     ___lldiv@dividend:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0xC
   594   00000D                     	ds	1
   595   00000E                     ??_calibrate_black:
   596   00000E                     ??_get_wall_presence:
   597   00000E                     setMotorPWM@m:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0xD
   601   00000E                     	ds	2
   602   000010                     ??_setMotorPWM:
   603   000010                     calibrate_black@clear1:
   604                           	callstack 0
   605   000010                     get_wall_presence@clear1:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0xF
   609   000010                     	ds	1
   610   000011                     ___lldiv@divisor:
   611                           	callstack 0
   612                           
   613                           ; 4 bytes @ 0x10
   614   000011                     	ds	1
   615   000012                     setMotorPWM@posDuty:
   616                           	callstack 0
   617   000012                     calibrate_black@clear2:
   618                           	callstack 0
   619   000012                     get_wall_presence@clear2:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x11
   623   000012                     	ds	1
   624   000013                     setMotorPWM@negDuty:
   625                           	callstack 0
   626   000013                     get_color_distance@color2:
   627                           	callstack 0
   628                           
   629                           ; 12 bytes @ 0x12
   630   000013                     	ds	1
   631   000014                     stop@mL:
   632                           	callstack 0
   633   000014                     turnLeft@mL:
   634                           	callstack 0
   635   000014                     turnRight@mL:
   636                           	callstack 0
   637   000014                     turnLeftLong@mL:
   638                           	callstack 0
   639   000014                     turnRightLong@mL:
   640                           	callstack 0
   641   000014                     fullSpeedAhead@mL:
   642                           	callstack 0
   643   000014                     TimedfullSpeedAhead@mL:
   644                           	callstack 0
   645   000014                     moveBack@mL:
   646                           	callstack 0
   647   000014                     _calibrate_black$2443:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x13
   651   000014                     	ds	1
   652   000015                     ___lldiv@quotient:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x14
   656   000015                     	ds	1
   657   000016                     ??_color_click_init:
   658   000016                     stop@mR:
   659                           	callstack 0
   660   000016                     turnLeft@mR:
   661                           	callstack 0
   662   000016                     turnRight@mR:
   663                           	callstack 0
   664   000016                     turnLeftLong@mR:
   665                           	callstack 0
   666   000016                     turnRightLong@mR:
   667                           	callstack 0
   668   000016                     fullSpeedAhead@mR:
   669                           	callstack 0
   670   000016                     TimedfullSpeedAhead@mR:
   671                           	callstack 0
   672   000016                     moveBack@mR:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x15
   676   000016                     	ds	2
   677   000018                     ??_stop:
   678   000018                     ??_turnLeft:
   679   000018                     ??_turnRight:
   680   000018                     ??_turnLeftLong:
   681   000018                     ??_turnRightLong:
   682   000018                     TimedfullSpeedAhead@time:
   683                           	callstack 0
   684   000018                     moveBack@time:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x17
   688   000018                     	ds	1
   689   000019                     ___lldiv@counter:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x18
   693   000019                     	ds	1
   694   00001A                     turnLeft@k:
   695                           	callstack 0
   696   00001A                     turnRight@k:
   697                           	callstack 0
   698   00001A                     turnLeftLong@i:
   699                           	callstack 0
   700   00001A                     turnRightLong@i:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x19
   704   00001A                     	ds	2
   705   00001C                     turnLeft@i:
   706                           	callstack 0
   707   00001C                     turnRight@i:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x1B
   711   00001C                     	ds	2
   712   00001E                     RobotMovement@color:
   713                           	callstack 0
   714   00001E                     return_back@motorL:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x1D
   718   00001E                     	ds	1
   719   00001F                     ??_get_color_distance:
   720                           
   721                           ; 1 bytes @ 0x1E
   722   00001F                     	ds	1
   723   000020                     RobotMovement@motorL:
   724                           	callstack 0
   725   000020                     return_back@motorR:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x1F
   729   000020                     	ds	2
   730   000022                     RobotMovement@motorR:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x21
   734   000022                     	ds	1
   735   000023                     _get_color_distance$417:
   736                           	callstack 0
   737                           
   738                           ; 4 bytes @ 0x22
   739   000023                     	ds	1
   740   000024                     
   741                           ; 1 bytes @ 0x23
   742   000024                     	ds	2
   743   000026                     RobotMovement@i:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747   000026                     	ds	1
   748   000027                     _get_color_distance$419:
   749                           	callstack 0
   750                           
   751                           ; 4 bytes @ 0x26
   752   000027                     	ds	1
   753   000028                     RobotMovement@i_1265:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x27
   757   000028                     	ds	3
   758   00002B                     _get_color_distance$421:
   759                           	callstack 0
   760                           
   761                           ; 4 bytes @ 0x2A
   762   00002B                     	ds	4
   763   00002F                     get_color_distance@R_offset:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x2E
   767   00002F                     	ds	2
   768   000031                     get_color_distance@G_offset:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x30
   772   000031                     	ds	2
   773   000033                     get_color_distance@B_offset:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x32
   777   000033                     	ds	2
   778   000035                     ?_get_color_code:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x34
   782   000035                     	ds	2
   783   000037                     ??_get_color_code:
   784                           
   785                           ; 1 bytes @ 0x36
   786   000037                     	ds	2
   787   000039                     ??_main:
   788                           
   789                           ; 1 bytes @ 0x38
   790   000039                     	ds	2
   791   00003B                     main@color_code:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x3A
   795   00003B                     	ds	2
   796   00003D                     main@state:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x3C
   800   00003D                     	ds	2
   801   00003F                     main@motorL:
   802                           	callstack 0
   803                           
   804                           ; 9 bytes @ 0x3E
   805   00003F                     	ds	9
   806   000048                     main@motorR:
   807                           	callstack 0
   808                           
   809                           ; 9 bytes @ 0x47
   810   000048                     	ds	9
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 17 in file "main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  color_code      2   58[COMRAM] unsigned int 
   822 ;;  state           2   60[COMRAM] int 
   823 ;;  motorR          9   71[COMRAM] struct DC_motor
   824 ;;  motorL          9   62[COMRAM] struct DC_motor
   825 ;;  PWMcycle        2    0        unsigned int 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      void 
   828 ;; Registers used:
   829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   836 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   838 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   839 ;;Total ram usage:       24 bytes
   840 ;; Hardware stack levels required when called: 7
   841 ;; This function calls:
   842 ;;		_Interrupts_init
   843 ;;		_RobotMovement
   844 ;;		_TimedfullSpeedAhead
   845 ;;		_Timer0_init
   846 ;;		_add_seconds_to_list
   847 ;;		_color_click_init
   848 ;;		_fullSpeedAhead
   849 ;;		_get_color_code
   850 ;;		_get_state
   851 ;;		_get_wall_presence
   852 ;;		_initDCmotorsPWM
   853 ;;		_moveBack
   854 ;;		_return_back
   855 ;;		_stop
   856 ;; This function is called by:
   857 ;;		Startup code after reset
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text0
   862   0008B4                     __ptext0:
   863                           	callstack 0
   864   0008B4                     _main:
   865                           	callstack 24
   866   0008B4                     
   867                           ;main.c: 18:     Timer0_init();
   868   0008B4  EC7B  F00F         	call	_Timer0_init	;wreg free
   869   0008B8                     
   870                           ;main.c: 19:     Interrupts_init();
   871   0008B8  EC9D  F00F         	call	_Interrupts_init	;wreg free
   872   0008BC                     
   873                           ;main.c: 20:     initDCmotorsPWM(99);
   874   0008BC  0E00               	movlw	0
   875   0008BE  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   876   0008C0  0E63               	movlw	99
   877   0008C2  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   878   0008C4  EC7B  F00C         	call	_initDCmotorsPWM	;wreg free
   879   0008C8                     
   880                           ;main.c: 22:     color_click_init();
   881   0008C8  EC75  F009         	call	_color_click_init	;wreg free
   882   0008CC                     
   883                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   884   0008CC  010E               	movlb	14	; () banked
   885   0008CE  95B4               	bcf	180,2,b	;volatile
   886   0008D0                     
   887                           ; BSR set to: 14
   888                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   889   0008D0  8486               	bsf	134,2,c	;volatile
   890   0008D2                     
   891                           ; BSR set to: 14
   892                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   893   0008D2  0E00               	movlw	0
   894   0008D4  6E3F               	movwf	main@motorL^0,c
   895   0008D6                     
   896                           ; BSR set to: 14
   897                           ;main.c: 29:     motorL.direction=1;
   898   0008D6  0E01               	movlw	1
   899   0008D8  6E40               	movwf	(main@motorL+1)^0,c
   900   0008DA                     
   901                           ; BSR set to: 14
   902                           ;main.c: 30:     motorL.brakemode=1;
   903   0008DA  0E01               	movlw	1
   904   0008DC  6E41               	movwf	(main@motorL+2)^0,c
   905   0008DE                     
   906                           ; BSR set to: 14
   907                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   908   0008DE  0EAA               	movlw	170
   909   0008E0  6E44               	movwf	(main@motorL+5)^0,c
   910   0008E2  0E0F               	movlw	15
   911   0008E4  6E45               	movwf	(main@motorL+6)^0,c
   912   0008E6                     
   913                           ; BSR set to: 14
   914                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   915   0008E6  0EA6               	movlw	166
   916   0008E8  6E46               	movwf	(main@motorL+7)^0,c
   917   0008EA  0E0F               	movlw	15
   918   0008EC  6E47               	movwf	(main@motorL+8)^0,c
   919   0008EE                     
   920                           ; BSR set to: 14
   921                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   922   0008EE  0E00               	movlw	0
   923   0008F0  6E43               	movwf	(main@motorL+4)^0,c
   924   0008F2  0E63               	movlw	99
   925   0008F4  6E42               	movwf	(main@motorL+3)^0,c
   926   0008F6                     
   927                           ; BSR set to: 14
   928                           ;main.c: 35:     motorR.power=0;
   929   0008F6  0E00               	movlw	0
   930   0008F8  6E48               	movwf	main@motorR^0,c
   931   0008FA                     
   932                           ; BSR set to: 14
   933                           ;main.c: 36:     motorR.direction=1;
   934   0008FA  0E01               	movlw	1
   935   0008FC  6E49               	movwf	(main@motorR+1)^0,c
   936   0008FE                     
   937                           ; BSR set to: 14
   938                           ;main.c: 37:     motorR.brakemode=1;
   939   0008FE  0E01               	movlw	1
   940   000900  6E4A               	movwf	(main@motorR+2)^0,c
   941   000902                     
   942                           ; BSR set to: 14
   943                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   944   000902  0E25               	movlw	37
   945   000904  6E4D               	movwf	(main@motorR+5)^0,c
   946   000906  0E0F               	movlw	15
   947   000908  6E4E               	movwf	(main@motorR+6)^0,c
   948   00090A                     
   949                           ; BSR set to: 14
   950                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   951   00090A  0E21               	movlw	33
   952   00090C  6E4F               	movwf	(main@motorR+7)^0,c
   953   00090E  0E0F               	movlw	15
   954   000910  6E50               	movwf	(main@motorR+8)^0,c
   955   000912                     
   956                           ; BSR set to: 14
   957                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   958   000912  0E00               	movlw	0
   959   000914  6E4C               	movwf	(main@motorR+4)^0,c
   960   000916  0E63               	movlw	99
   961   000918  6E4B               	movwf	(main@motorR+3)^0,c
   962   00091A                     
   963                           ; BSR set to: 14
   964                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   965   00091A  0E52               	movlw	82
   966   00091C  6E3A               	movwf	(??_main+1)^0,c
   967   00091E  0E2B               	movlw	43
   968   000920  6E39               	movwf	??_main^0,c
   969   000922  0E00               	movlw	0
   970   000924                     u2467:
   971   000924  2EE8               	decfsz	wreg,f,c
   972   000926  D7FE               	bra	u2467
   973   000928  2E39               	decfsz	??_main^0,f,c
   974   00092A  D7FC               	bra	u2467
   975   00092C  2E3A               	decfsz	(??_main+1)^0,f,c
   976   00092E  D7FA               	bra	u2467
   977   000930  D000               	nop2	
   978   000932                     
   979                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
   980   000932  0E3F               	movlw	low main@motorL
   981   000934  6E14               	movwf	fullSpeedAhead@mL^0,c
   982   000936  0E00               	movlw	high main@motorL
   983   000938  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   984   00093A  0E48               	movlw	low main@motorR
   985   00093C  6E16               	movwf	fullSpeedAhead@mR^0,c
   986   00093E  0E00               	movlw	high main@motorR
   987   000940  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   988   000942  ECD6  F00D         	call	_fullSpeedAhead	;wreg free
   989   000946                     l3029:
   990                           
   991                           ;main.c: 45:         int state = get_state();
   992   000946  ECA3  F00F         	call	_get_state	;wreg free
   993   00094A  C001  F03D         	movff	?_get_state,main@state
   994   00094E  C002  F03E         	movff	?_get_state+1,main@state+1
   995   000952                     
   996                           ;main.c: 46:         if(get_wall_presence() == 1 && state == 0 ){
   997   000952  ECE0  F00B         	call	_get_wall_presence	;wreg free
   998   000956  040C               	decf	?_get_wall_presence^0,w,c
   999   000958  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
  1000   00095A  A4D8               	btfss	status,2,c
  1001   00095C  EFB2  F004         	goto	u2061
  1002   000960  EFB4  F004         	goto	u2060
  1003   000964                     u2061:
  1004   000964  EF22  F005         	goto	l3053
  1005   000968                     u2060:
  1006   000968  503D               	movf	main@state^0,w,c
  1007   00096A  103E               	iorwf	(main@state+1)^0,w,c
  1008   00096C  A4D8               	btfss	status,2,c
  1009   00096E  EFBB  F004         	goto	u2071
  1010   000972  EFBD  F004         	goto	u2070
  1011   000976                     u2071:
  1012   000976  EF22  F005         	goto	l3053
  1013   00097A                     u2070:
  1014   00097A                     
  1015                           ;main.c: 48:             add_seconds_to_list();
  1016   00097A  ECC8  F00E         	call	_add_seconds_to_list	;wreg free
  1017   00097E                     
  1018                           ;main.c: 49:             stop(&motorL,&motorR);
  1019   00097E  0E3F               	movlw	low main@motorL
  1020   000980  6E14               	movwf	stop@mL^0,c
  1021   000982  0E00               	movlw	high main@motorL
  1022   000984  6E15               	movwf	(stop@mL+1)^0,c
  1023   000986  0E48               	movlw	low main@motorR
  1024   000988  6E16               	movwf	stop@mR^0,c
  1025   00098A  0E00               	movlw	high main@motorR
  1026   00098C  6E17               	movwf	(stop@mR+1)^0,c
  1027   00098E  ECA3  F00E         	call	_stop	;wreg free
  1028   000992                     
  1029                           ;main.c: 50:             unsigned int color_code = get_color_code();
  1030   000992  EC8B  F002         	call	_get_color_code	;wreg free
  1031   000996  C035  F03B         	movff	?_get_color_code,main@color_code
  1032   00099A  C036  F03C         	movff	?_get_color_code+1,main@color_code+1
  1033   00099E                     
  1034                           ;main.c: 51:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1035   00099E  0E3F               	movlw	low main@motorL
  1036   0009A0  6E14               	movwf	TimedfullSpeedAhead@mL^0,c
  1037   0009A2  0E00               	movlw	high main@motorL
  1038   0009A4  6E15               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1039   0009A6  0E48               	movlw	low main@motorR
  1040   0009A8  6E16               	movwf	TimedfullSpeedAhead@mR^0,c
  1041   0009AA  0E00               	movlw	high main@motorR
  1042   0009AC  6E17               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1043   0009AE  0E00               	movlw	0
  1044   0009B0  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1045   0009B2  0E05               	movlw	5
  1046   0009B4  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1047   0009B6  ECC3  F00C         	call	_TimedfullSpeedAhead	;wreg free
  1048   0009BA                     
  1049                           ;main.c: 52:             moveBack(&motorL, &motorR, 11);
  1050   0009BA  0E3F               	movlw	low main@motorL
  1051   0009BC  6E14               	movwf	moveBack@mL^0,c
  1052   0009BE  0E00               	movlw	high main@motorL
  1053   0009C0  6E15               	movwf	(moveBack@mL+1)^0,c
  1054   0009C2  0E48               	movlw	low main@motorR
  1055   0009C4  6E16               	movwf	moveBack@mR^0,c
  1056   0009C6  0E00               	movlw	high main@motorR
  1057   0009C8  6E17               	movwf	(moveBack@mR+1)^0,c
  1058   0009CA  0E00               	movlw	0
  1059   0009CC  6E19               	movwf	(moveBack@time+1)^0,c
  1060   0009CE  0E0B               	movlw	11
  1061   0009D0  6E18               	movwf	moveBack@time^0,c
  1062   0009D2  ECFD  F00C         	call	_moveBack	;wreg free
  1063   0009D6                     
  1064                           ;main.c: 53:             stop(&motorL,&motorR);
  1065   0009D6  0E3F               	movlw	low main@motorL
  1066   0009D8  6E14               	movwf	stop@mL^0,c
  1067   0009DA  0E00               	movlw	high main@motorL
  1068   0009DC  6E15               	movwf	(stop@mL+1)^0,c
  1069   0009DE  0E48               	movlw	low main@motorR
  1070   0009E0  6E16               	movwf	stop@mR^0,c
  1071   0009E2  0E00               	movlw	high main@motorR
  1072   0009E4  6E17               	movwf	(stop@mR+1)^0,c
  1073   0009E6  ECA3  F00E         	call	_stop	;wreg free
  1074   0009EA                     
  1075                           ;main.c: 54:             RobotMovement(color_code, &motorL, &motorR);
  1076   0009EA  C03B  F01E         	movff	main@color_code,RobotMovement@color
  1077   0009EE  C03C  F01F         	movff	main@color_code+1,RobotMovement@color+1
  1078   0009F2  0E3F               	movlw	low main@motorL
  1079   0009F4  6E20               	movwf	RobotMovement@motorL^0,c
  1080   0009F6  0E00               	movlw	high main@motorL
  1081   0009F8  6E21               	movwf	(RobotMovement@motorL+1)^0,c
  1082   0009FA  0E48               	movlw	low main@motorR
  1083   0009FC  6E22               	movwf	RobotMovement@motorR^0,c
  1084   0009FE  0E00               	movlw	high main@motorR
  1085   000A00  6E23               	movwf	(RobotMovement@motorR+1)^0,c
  1086   000A02  EC19  F000         	call	_RobotMovement	;wreg free
  1087   000A06                     
  1088                           ;main.c: 55:             if (state == 0)
  1089   000A06  503D               	movf	main@state^0,w,c
  1090   000A08  103E               	iorwf	(main@state+1)^0,w,c
  1091   000A0A  A4D8               	btfss	status,2,c
  1092   000A0C  EF0A  F005         	goto	u2081
  1093   000A10  EF0C  F005         	goto	u2080
  1094   000A14                     u2081:
  1095   000A14  EFA3  F004         	goto	l3029
  1096   000A18                     u2080:
  1097   000A18                     
  1098                           ;main.c: 56:             {;main.c: 57:                 stop(&motorL,&motorR);
  1099   000A18  0E3F               	movlw	low main@motorL
  1100   000A1A  6E14               	movwf	stop@mL^0,c
  1101   000A1C  0E00               	movlw	high main@motorL
  1102   000A1E  6E15               	movwf	(stop@mL+1)^0,c
  1103   000A20  0E48               	movlw	low main@motorR
  1104   000A22  6E16               	movwf	stop@mR^0,c
  1105   000A24  0E00               	movlw	high main@motorR
  1106   000A26  6E17               	movwf	(stop@mR+1)^0,c
  1107   000A28  ECA3  F00E         	call	_stop	;wreg free
  1108                           
  1109                           ;main.c: 58:                 fullSpeedAhead(&motorL,&motorR);
  1110   000A2C  0E3F               	movlw	low main@motorL
  1111   000A2E  6E14               	movwf	fullSpeedAhead@mL^0,c
  1112   000A30  0E00               	movlw	high main@motorL
  1113   000A32  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1114   000A34  0E48               	movlw	low main@motorR
  1115   000A36  6E16               	movwf	fullSpeedAhead@mR^0,c
  1116   000A38  0E00               	movlw	high main@motorR
  1117   000A3A  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1118   000A3C  ECD6  F00D         	call	_fullSpeedAhead	;wreg free
  1119   000A40  EFA3  F004         	goto	l3029
  1120   000A44                     l3053:
  1121   000A44  043D               	decf	main@state^0,w,c
  1122   000A46  103E               	iorwf	(main@state+1)^0,w,c
  1123   000A48  A4D8               	btfss	status,2,c
  1124   000A4A  EF29  F005         	goto	u2091
  1125   000A4E  EF2B  F005         	goto	u2090
  1126   000A52                     u2091:
  1127   000A52  EF37  F005         	goto	l433
  1128   000A56                     u2090:
  1129   000A56                     
  1130                           ;main.c: 61:             return_back(&motorL, &motorR);
  1131   000A56  0E3F               	movlw	low main@motorL
  1132   000A58  6E1E               	movwf	return_back@motorL^0,c
  1133   000A5A  0E00               	movlw	high main@motorL
  1134   000A5C  6E1F               	movwf	(return_back@motorL+1)^0,c
  1135   000A5E  0E48               	movlw	low main@motorR
  1136   000A60  6E20               	movwf	return_back@motorR^0,c
  1137   000A62  0E00               	movlw	high main@motorR
  1138   000A64  6E21               	movwf	(return_back@motorR+1)^0,c
  1139   000A66  EC3B  F005         	call	_return_back	;wreg free
  1140                           
  1141                           ;main.c: 62:         }else{
  1142   000A6A  EFA3  F004         	goto	l3029
  1143   000A6E                     l433:
  1144   000A6E  EFA3  F004         	goto	l3029
  1145   000A72  EF17  F000         	goto	start
  1146   000A76                     __end_of_main:
  1147                           	callstack 0
  1148                           
  1149 ;; *************** function _return_back *****************
  1150 ;; Defined at:
  1151 ;;		line 437 in file "dc_motor.c"
  1152 ;; Parameters:    Size  Location     Type
  1153 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  1154 ;;		 -> main@motorL(9), 
  1155 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  1156 ;;		 -> main@motorR(9), 
  1157 ;; Auto vars:     Size  Location     Type
  1158 ;;		None
  1159 ;; Return value:  Size  Location     Type
  1160 ;;                  1    wreg      void 
  1161 ;; Registers used:
  1162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1163 ;; Tracked objects:
  1164 ;;		On entry : 0/0
  1165 ;;		On exit  : 0/0
  1166 ;;		Unchanged: 0/0
  1167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1168 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1171 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;Total ram usage:        6 bytes
  1173 ;; Hardware stack levels used: 1
  1174 ;; Hardware stack levels required when called: 5
  1175 ;; This function calls:
  1176 ;;		_TimedfullSpeedAhead
  1177 ;;		_stop
  1178 ;;		_turnLeft
  1179 ;;		_turnLeftLong
  1180 ;;		_turnRight
  1181 ;;		_turnRightLong
  1182 ;; This function is called by:
  1183 ;;		_main
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text1
  1188   000A76                     __ptext1:
  1189                           	callstack 0
  1190   000A76                     _return_back:
  1191                           	callstack 25
  1192   000A76                     
  1193                           ;dc_motor.c: 437: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 438: {;dc_motor.c: 439:     while (index > 0){
  1194   000A76  EFFA  F005         	goto	l2971
  1195   000A7A                     l2949:
  1196                           
  1197                           ;dc_motor.c: 440:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1198   000A7A  90D8               	bcf	status,0,c
  1199   000A7C  3453               	rlcf	_index^0,w,c
  1200   000A7E  6ED9               	movwf	fsr2l,c
  1201   000A80  3454               	rlcf	(_index+1)^0,w,c
  1202   000A82  6EDA               	movwf	fsr2h,c
  1203   000A84  0EFE               	movlw	low (_movement_list+65534)
  1204   000A86  26D9               	addwf	fsr2l,f,c
  1205   000A88  0E01               	movlw	high (_movement_list+65534)
  1206   000A8A  22DA               	addwfc	fsr2h,f,c
  1207   000A8C  28DE               	incf	postinc2,w,c
  1208   000A8E  E106               	bnz	u1991
  1209   000A90  28DE               	incf	postinc2,w,c
  1210   000A92  A4D8               	btfss	status,2,c
  1211   000A94  EF4E  F005         	goto	u1991
  1212   000A98  EF50  F005         	goto	u1990
  1213   000A9C                     u1991:
  1214   000A9C  EF5C  F005         	goto	l2953
  1215   000AA0                     u1990:
  1216   000AA0  C01E  F014         	movff	return_back@motorL,turnLeft@mL
  1217   000AA4  C01F  F015         	movff	return_back@motorL+1,turnLeft@mL+1
  1218   000AA8  C020  F016         	movff	return_back@motorR,turnLeft@mR
  1219   000AAC  C021  F017         	movff	return_back@motorR+1,turnLeft@mR+1
  1220   000AB0  EC81  F007         	call	_turnLeft	;wreg free
  1221   000AB4  EFED  F005         	goto	l302
  1222   000AB8                     l2953:
  1223   000AB8  90D8               	bcf	status,0,c
  1224   000ABA  3453               	rlcf	_index^0,w,c
  1225   000ABC  6ED9               	movwf	fsr2l,c
  1226   000ABE  3454               	rlcf	(_index+1)^0,w,c
  1227   000AC0  6EDA               	movwf	fsr2h,c
  1228   000AC2  0EFE               	movlw	low (_movement_list+65534)
  1229   000AC4  26D9               	addwf	fsr2l,f,c
  1230   000AC6  0E01               	movlw	high (_movement_list+65534)
  1231   000AC8  22DA               	addwfc	fsr2h,f,c
  1232   000ACA  0EFE               	movlw	254
  1233   000ACC  18DE               	xorwf	postinc2,w,c
  1234   000ACE  E106               	bnz	u2001
  1235   000AD0  28DE               	incf	postinc2,w,c
  1236   000AD2  A4D8               	btfss	status,2,c
  1237   000AD4  EF6E  F005         	goto	u2001
  1238   000AD8  EF70  F005         	goto	u2000
  1239   000ADC                     u2001:
  1240   000ADC  EF7C  F005         	goto	l2957
  1241   000AE0                     u2000:
  1242   000AE0  C01E  F014         	movff	return_back@motorL,turnRight@mL
  1243   000AE4  C01F  F015         	movff	return_back@motorL+1,turnRight@mL+1
  1244   000AE8  C020  F016         	movff	return_back@motorR,turnRight@mR
  1245   000AEC  C021  F017         	movff	return_back@motorR+1,turnRight@mR+1
  1246   000AF0  EC2E  F008         	call	_turnRight	;wreg free
  1247   000AF4  EFED  F005         	goto	l302
  1248   000AF8                     l2957:
  1249   000AF8  90D8               	bcf	status,0,c
  1250   000AFA  3453               	rlcf	_index^0,w,c
  1251   000AFC  6ED9               	movwf	fsr2l,c
  1252   000AFE  3454               	rlcf	(_index+1)^0,w,c
  1253   000B00  6EDA               	movwf	fsr2h,c
  1254   000B02  0EFE               	movlw	low (_movement_list+65534)
  1255   000B04  26D9               	addwf	fsr2l,f,c
  1256   000B06  0E01               	movlw	high (_movement_list+65534)
  1257   000B08  22DA               	addwfc	fsr2h,f,c
  1258   000B0A  0EFD               	movlw	253
  1259   000B0C  18DE               	xorwf	postinc2,w,c
  1260   000B0E  E106               	bnz	u2011
  1261   000B10  28DE               	incf	postinc2,w,c
  1262   000B12  A4D8               	btfss	status,2,c
  1263   000B14  EF8E  F005         	goto	u2011
  1264   000B18  EF90  F005         	goto	u2010
  1265   000B1C                     u2011:
  1266   000B1C  EF9C  F005         	goto	l2961
  1267   000B20                     u2010:
  1268   000B20  C01E  F014         	movff	return_back@motorL,turnLeftLong@mL
  1269   000B24  C01F  F015         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1270   000B28  C020  F016         	movff	return_back@motorR,turnLeftLong@mR
  1271   000B2C  C021  F017         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1272   000B30  ECA5  F00A         	call	_turnLeftLong	;wreg free
  1273   000B34  EFED  F005         	goto	l302
  1274   000B38                     l2961:
  1275   000B38  90D8               	bcf	status,0,c
  1276   000B3A  3453               	rlcf	_index^0,w,c
  1277   000B3C  6ED9               	movwf	fsr2l,c
  1278   000B3E  3454               	rlcf	(_index+1)^0,w,c
  1279   000B40  6EDA               	movwf	fsr2h,c
  1280   000B42  0EFE               	movlw	low (_movement_list+65534)
  1281   000B44  26D9               	addwf	fsr2l,f,c
  1282   000B46  0E01               	movlw	high (_movement_list+65534)
  1283   000B48  22DA               	addwfc	fsr2h,f,c
  1284   000B4A  0EFC               	movlw	252
  1285   000B4C  18DE               	xorwf	postinc2,w,c
  1286   000B4E  E106               	bnz	u2021
  1287   000B50  28DE               	incf	postinc2,w,c
  1288   000B52  A4D8               	btfss	status,2,c
  1289   000B54  EFAE  F005         	goto	u2021
  1290   000B58  EFB0  F005         	goto	u2020
  1291   000B5C                     u2021:
  1292   000B5C  EFBC  F005         	goto	l2965
  1293   000B60                     u2020:
  1294   000B60  C01E  F014         	movff	return_back@motorL,turnRightLong@mL
  1295   000B64  C01F  F015         	movff	return_back@motorL+1,turnRightLong@mL+1
  1296   000B68  C020  F016         	movff	return_back@motorR,turnRightLong@mR
  1297   000B6C  C021  F017         	movff	return_back@motorR+1,turnRightLong@mR+1
  1298   000B70  EC11  F00A         	call	_turnRightLong	;wreg free
  1299   000B74  EFED  F005         	goto	l302
  1300   000B78                     l2965:
  1301   000B78  90D8               	bcf	status,0,c
  1302   000B7A  3453               	rlcf	_index^0,w,c
  1303   000B7C  6ED9               	movwf	fsr2l,c
  1304   000B7E  3454               	rlcf	(_index+1)^0,w,c
  1305   000B80  6EDA               	movwf	fsr2h,c
  1306   000B82  0EFE               	movlw	low (_movement_list+65534)
  1307   000B84  26D9               	addwf	fsr2l,f,c
  1308   000B86  0E01               	movlw	high (_movement_list+65534)
  1309   000B88  22DA               	addwfc	fsr2h,f,c
  1310   000B8A  0E01               	movlw	1
  1311   000B8C  BEDB               	btfsc	plusw2,7,c
  1312   000B8E  EFD2  F005         	goto	u2031
  1313   000B92  0E01               	movlw	1
  1314   000B94  50DB               	movf	plusw2,w,c
  1315   000B96  E108               	bnz	u2030
  1316   000B98  04DE               	decf	postinc2,w,c
  1317   000B9A  A0D8               	btfss	status,0,c
  1318   000B9C  EFD2  F005         	goto	u2031
  1319   000BA0  EFD4  F005         	goto	u2030
  1320   000BA4                     u2031:
  1321   000BA4  EFED  F005         	goto	l306
  1322   000BA8                     u2030:
  1323   000BA8  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1324   000BAC  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1325   000BB0  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1326   000BB4  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1327   000BB8  90D8               	bcf	status,0,c
  1328   000BBA  3453               	rlcf	_index^0,w,c
  1329   000BBC  6ED9               	movwf	fsr2l,c
  1330   000BBE  3454               	rlcf	(_index+1)^0,w,c
  1331   000BC0  6EDA               	movwf	fsr2h,c
  1332   000BC2  0EFE               	movlw	low (_movement_list+65534)
  1333   000BC4  26D9               	addwf	fsr2l,f,c
  1334   000BC6  0E01               	movlw	high (_movement_list+65534)
  1335   000BC8  22DA               	addwfc	fsr2h,f,c
  1336   000BCA  CFDE F018          	movff	postinc2,TimedfullSpeedAhead@time
  1337   000BCE  CFDD F019          	movff	postdec2,TimedfullSpeedAhead@time+1
  1338   000BD2  ECC3  F00C         	call	_TimedfullSpeedAhead	;wreg free
  1339   000BD6  EFED  F005         	goto	l302
  1340   000BDA                     l306:
  1341   000BDA                     l302:
  1342                           
  1343                           ;dc_motor.c: 445:         stop(motorL,motorR);
  1344   000BDA  C01E  F014         	movff	return_back@motorL,stop@mL
  1345   000BDE  C01F  F015         	movff	return_back@motorL+1,stop@mL+1
  1346   000BE2  C020  F016         	movff	return_back@motorR,stop@mR
  1347   000BE6  C021  F017         	movff	return_back@motorR+1,stop@mR+1
  1348   000BEA  ECA3  F00E         	call	_stop	;wreg free
  1349   000BEE                     
  1350                           ;dc_motor.c: 446:         index -= 1;
  1351   000BEE  0653               	decf	_index^0,f,c
  1352   000BF0  A0D8               	btfss	status,0,c
  1353   000BF2  0654               	decf	(_index+1)^0,f,c
  1354   000BF4                     l2971:
  1355                           
  1356                           ;dc_motor.c: 439:     while (index > 0){
  1357   000BF4  BE54               	btfsc	(_index+1)^0,7,c
  1358   000BF6  EF07  F006         	goto	u2040
  1359   000BFA  5054               	movf	(_index+1)^0,w,c
  1360   000BFC  E106               	bnz	u2041
  1361   000BFE  0453               	decf	_index^0,w,c
  1362   000C00  B0D8               	btfsc	status,0,c
  1363   000C02  EF05  F006         	goto	u2041
  1364   000C06  EF07  F006         	goto	u2040
  1365   000C0A                     u2041:
  1366   000C0A  EF3D  F005         	goto	l2949
  1367   000C0E                     u2040:
  1368   000C0E                     
  1369                           ;dc_motor.c: 448:     if (index == 0){state = 2;}
  1370   000C0E  5053               	movf	_index^0,w,c
  1371   000C10  1054               	iorwf	(_index+1)^0,w,c
  1372   000C12  A4D8               	btfss	status,2,c
  1373   000C14  EF0E  F006         	goto	u2051
  1374   000C18  EF10  F006         	goto	u2050
  1375   000C1C                     u2051:
  1376   000C1C  EF14  F006         	goto	l312
  1377   000C20                     u2050:
  1378   000C20  0E00               	movlw	0
  1379   000C22  6E52               	movwf	(_state+1)^0,c
  1380   000C24  0E02               	movlw	2
  1381   000C26  6E51               	movwf	_state^0,c
  1382   000C28                     l312:
  1383   000C28  0012               	return		;funcret
  1384   000C2A                     __end_of_return_back:
  1385                           	callstack 0
  1386                           
  1387 ;; *************** function _TimedfullSpeedAhead *****************
  1388 ;; Defined at:
  1389 ;;		line 267 in file "dc_motor.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1392 ;;		 -> main@motorL(9), 
  1393 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1394 ;;		 -> main@motorR(9), 
  1395 ;;  time            2   23[COMRAM] unsigned int 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;		None
  1398 ;; Return value:  Size  Location     Type
  1399 ;;                  1    wreg      void 
  1400 ;; Registers used:
  1401 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1402 ;; Tracked objects:
  1403 ;;		On entry : 0/0
  1404 ;;		On exit  : 0/0
  1405 ;;		Unchanged: 0/0
  1406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1407 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1411 ;;Total ram usage:        6 bytes
  1412 ;; Hardware stack levels used: 1
  1413 ;; Hardware stack levels required when called: 4
  1414 ;; This function calls:
  1415 ;;		_setMotorPWM
  1416 ;; This function is called by:
  1417 ;;		_return_back
  1418 ;;		_main
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text2
  1423   001986                     __ptext2:
  1424                           	callstack 0
  1425   001986                     _TimedfullSpeedAhead:
  1426                           	callstack 25
  1427   001986                     
  1428                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  1429   001986  0E00               	movlw	0
  1430   001988  6E56               	movwf	(_seconds+1)^0,c
  1431   00198A  0E00               	movlw	0
  1432   00198C  6E55               	movwf	_seconds^0,c
  1433                           
  1434                           ;dc_motor.c: 270:     while (seconds<time)
  1435   00198E  EFF1  F00C         	goto	l2619
  1436   001992                     l2609:
  1437                           
  1438                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  1439   001992  EE20 F001          	lfsr	2,1
  1440   001996  5014               	movf	TimedfullSpeedAhead@mL^0,w,c
  1441   001998  26D9               	addwf	fsr2l,f,c
  1442   00199A  5015               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  1443   00199C  22DA               	addwfc	fsr2h,f,c
  1444   00199E  0E00               	movlw	0
  1445   0019A0  6EDF               	movwf	indf2,c
  1446                           
  1447                           ;dc_motor.c: 274:         (*mR).direction=0;
  1448   0019A2  EE20 F001          	lfsr	2,1
  1449   0019A6  5016               	movf	TimedfullSpeedAhead@mR^0,w,c
  1450   0019A8  26D9               	addwf	fsr2l,f,c
  1451   0019AA  5017               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  1452   0019AC  22DA               	addwfc	fsr2h,f,c
  1453   0019AE  0E00               	movlw	0
  1454   0019B0  6EDF               	movwf	indf2,c
  1455   0019B2                     
  1456                           ;dc_motor.c: 275:         (*mL).power=50;
  1457   0019B2  C014  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  1458   0019B6  C015  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  1459   0019BA  0E32               	movlw	50
  1460   0019BC  6EDF               	movwf	indf2,c
  1461   0019BE                     
  1462                           ;dc_motor.c: 276:         (*mR).power=50;
  1463   0019BE  C016  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  1464   0019C2  C017  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  1465   0019C6  0E32               	movlw	50
  1466   0019C8  6EDF               	movwf	indf2,c
  1467   0019CA                     
  1468                           ;dc_motor.c: 277:         setMotorPWM(mL);
  1469   0019CA  C014  F00E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  1470   0019CE  C015  F00F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  1471   0019D2  ECCB  F006         	call	_setMotorPWM	;wreg free
  1472   0019D6                     
  1473                           ;dc_motor.c: 278:         setMotorPWM(mR);
  1474   0019D6  C016  F00E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  1475   0019DA  C017  F00F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  1476   0019DE  ECCB  F006         	call	_setMotorPWM	;wreg free
  1477   0019E2                     l2619:
  1478                           
  1479                           ;dc_motor.c: 270:     while (seconds<time)
  1480   0019E2  5018               	movf	TimedfullSpeedAhead@time^0,w,c
  1481   0019E4  5C55               	subwf	_seconds^0,w,c
  1482   0019E6  5019               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  1483   0019E8  5856               	subwfb	(_seconds+1)^0,w,c
  1484   0019EA  A0D8               	btfss	status,0,c
  1485   0019EC  EFFA  F00C         	goto	u1491
  1486   0019F0  EFFC  F00C         	goto	u1490
  1487   0019F4                     u1491:
  1488   0019F4  EFC9  F00C         	goto	l2609
  1489   0019F8                     u1490:
  1490   0019F8  0012               	return		;funcret
  1491   0019FA                     __end_of_TimedfullSpeedAhead:
  1492                           	callstack 0
  1493                           
  1494 ;; *************** function _initDCmotorsPWM *****************
  1495 ;; Defined at:
  1496 ;;		line 9 in file "dc_motor.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  PWMperiod       2    0[COMRAM] int 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;		None
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, status,2
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1514 ;;Total ram usage:        2 bytes
  1515 ;; Hardware stack levels used: 1
  1516 ;; Hardware stack levels required when called: 2
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text3
  1525   0018F6                     __ptext3:
  1526                           	callstack 0
  1527   0018F6                     _initDCmotorsPWM:
  1528                           	callstack 28
  1529   0018F6                     
  1530                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1531   0018F6  9485               	bcf	133,2,c	;volatile
  1532                           
  1533                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1534   0018F8  9E83               	bcf	131,7,c	;volatile
  1535                           
  1536                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1537   0018FA  9C87               	bcf	135,6,c	;volatile
  1538                           
  1539                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1540   0018FC  9885               	bcf	133,4,c	;volatile
  1541                           
  1542                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1543   0018FE  947D               	bcf	125,2,c	;volatile
  1544                           
  1545                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1546   001900  9E7B               	bcf	123,7,c	;volatile
  1547                           
  1548                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1549   001902  9C7F               	bcf	127,6,c	;volatile
  1550                           
  1551                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1552   001904  987D               	bcf	125,4,c	;volatile
  1553   001906                     
  1554                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1555   001906  0E05               	movlw	5
  1556   001908  010E               	movlb	14	; () banked
  1557   00190A  6F74               	movwf	116,b	;volatile
  1558                           
  1559                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1560   00190C  0E06               	movlw	6
  1561   00190E  6F76               	movwf	118,b	;volatile
  1562                           
  1563                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1564   001910  0E07               	movlw	7
  1565   001912  6F69               	movwf	105,b	;volatile
  1566                           
  1567                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1568   001914  0E08               	movlw	8
  1569   001916  6F88               	movwf	136,b	;volatile
  1570                           
  1571                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1572   001918  50BD               	movf	189,w,c	;volatile
  1573   00191A  0B8F               	andlw	-113
  1574   00191C  0940               	iorlw	64
  1575   00191E  6EBD               	movwf	189,c	;volatile
  1576                           
  1577                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1578   001920  0EE0               	movlw	-32
  1579   001922  16BE               	andwf	190,f,c	;volatile
  1580                           
  1581                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1582   001924  50BF               	movf	191,w,c	;volatile
  1583   001926  0BF0               	andlw	-16
  1584   001928  0901               	iorlw	1
  1585   00192A  6EBF               	movwf	191,c	;volatile
  1586                           
  1587                           ;dc_motor.c: 34:     T2PR=99;
  1588   00192C  0E63               	movlw	99
  1589   00192E  6EBC               	movwf	188,c	;volatile
  1590   001930                     
  1591                           ; BSR set to: 14
  1592                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1593   001930  8EBD               	bsf	189,7,c	;volatile
  1594                           
  1595                           ;dc_motor.c: 39:     CCPR1H=0;
  1596   001932  0E00               	movlw	0
  1597   001934  6EAA               	movwf	170,c	;volatile
  1598                           
  1599                           ;dc_motor.c: 40:     CCPR2H=0;
  1600   001936  0E00               	movlw	0
  1601   001938  6EA6               	movwf	166,c	;volatile
  1602                           
  1603                           ;dc_motor.c: 41:     CCPR3H=0;
  1604   00193A  0E00               	movlw	0
  1605   00193C  010F               	movlb	15	; () banked
  1606   00193E  6F25               	movwf	37,b	;volatile
  1607                           
  1608                           ;dc_motor.c: 42:     CCPR4H=0;
  1609   001940  0E00               	movlw	0
  1610   001942  6F21               	movwf	33,b	;volatile
  1611                           
  1612                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1613   001944  0EFC               	movlw	-4
  1614   001946  16AD               	andwf	173,f,c	;volatile
  1615                           
  1616                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1617   001948  0EF3               	movlw	-13
  1618   00194A  16AD               	andwf	173,f,c	;volatile
  1619                           
  1620                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1621   00194C  0ECF               	movlw	-49
  1622   00194E  16AD               	andwf	173,f,c	;volatile
  1623                           
  1624                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1625   001950  0E3F               	movlw	-193
  1626   001952  16AD               	andwf	173,f,c	;volatile
  1627   001954                     
  1628                           ; BSR set to: 15
  1629                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1630   001954  88AB               	bsf	171,4,c	;volatile
  1631                           
  1632                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1633   001956  50AB               	movf	171,w,c	;volatile
  1634   001958  0BF0               	andlw	-16
  1635   00195A  090C               	iorlw	12
  1636   00195C  6EAB               	movwf	171,c	;volatile
  1637   00195E                     
  1638                           ; BSR set to: 15
  1639                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1640   00195E  8EAB               	bsf	171,7,c	;volatile
  1641   001960                     
  1642                           ; BSR set to: 15
  1643                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1644   001960  88A7               	bsf	167,4,c	;volatile
  1645                           
  1646                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1647   001962  50A7               	movf	167,w,c	;volatile
  1648   001964  0BF0               	andlw	-16
  1649   001966  090C               	iorlw	12
  1650   001968  6EA7               	movwf	167,c	;volatile
  1651   00196A                     
  1652                           ; BSR set to: 15
  1653                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1654   00196A  8EA7               	bsf	167,7,c	;volatile
  1655   00196C                     
  1656                           ; BSR set to: 15
  1657                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1658   00196C  8926               	bsf	38,4,b	;volatile
  1659                           
  1660                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1661   00196E  5126               	movf	38,w,b	;volatile
  1662   001970  0BF0               	andlw	-16
  1663   001972  090C               	iorlw	12
  1664   001974  6F26               	movwf	38,b	;volatile
  1665   001976                     
  1666                           ; BSR set to: 15
  1667                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1668   001976  8F26               	bsf	38,7,b	;volatile
  1669   001978                     
  1670                           ; BSR set to: 15
  1671                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1672   001978  8922               	bsf	34,4,b	;volatile
  1673                           
  1674                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1675   00197A  5122               	movf	34,w,b	;volatile
  1676   00197C  0BF0               	andlw	-16
  1677   00197E  090C               	iorlw	12
  1678   001980  6F22               	movwf	34,b	;volatile
  1679   001982                     
  1680                           ; BSR set to: 15
  1681                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1682   001982  8F22               	bsf	34,7,b	;volatile
  1683   001984                     
  1684                           ; BSR set to: 15
  1685   001984  0012               	return		;funcret
  1686   001986                     __end_of_initDCmotorsPWM:
  1687                           	callstack 0
  1688                           
  1689 ;; *************** function _get_wall_presence *****************
  1690 ;; Defined at:
  1691 ;;		line 242 in file "color.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;		None
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  clear2          2   17[COMRAM] unsigned int 
  1696 ;;  clear1          2   15[COMRAM] unsigned int 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  2   11[COMRAM] unsigned int 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1707 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1708 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1709 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1710 ;;Total ram usage:        8 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 5
  1713 ;; This function calls:
  1714 ;;		___wmul
  1715 ;;		_color_read_Clear
  1716 ;;		_set_led_color
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text4
  1723   0017C0                     __ptext4:
  1724                           	callstack 0
  1725   0017C0                     _get_wall_presence:
  1726                           	callstack 25
  1727   0017C0                     
  1728                           ;color.c: 243:     set_led_color(0b000);
  1729   0017C0  0E00               	movlw	0
  1730   0017C2  6E02               	movwf	(set_led_color@color+1)^0,c
  1731   0017C4  0E00               	movlw	0
  1732   0017C6  6E01               	movwf	set_led_color@color^0,c
  1733   0017C8  ECEC  F00E         	call	_set_led_color	;wreg free
  1734   0017CC                     
  1735                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1736   0017CC  0E12               	movlw	18
  1737   0017CE  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1738   0017D0  0EDC               	movlw	220
  1739   0017D2  6E0E               	movwf	??_get_wall_presence^0,c
  1740   0017D4  0E60               	movlw	96
  1741   0017D6                     u2477:
  1742   0017D6  2EE8               	decfsz	wreg,f,c
  1743   0017D8  D7FE               	bra	u2477
  1744   0017DA  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1745   0017DC  D7FC               	bra	u2477
  1746   0017DE  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1747   0017E0  D7FA               	bra	u2477
  1748   0017E2                     
  1749                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1750   0017E2  EC53  F00E         	call	_color_read_Clear	;wreg free
  1751   0017E6  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1752   0017EA  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1753   0017EE                     
  1754                           ;color.c: 246:     set_led_color(0b111);
  1755   0017EE  0E00               	movlw	0
  1756   0017F0  6E02               	movwf	(set_led_color@color+1)^0,c
  1757   0017F2  0E07               	movlw	7
  1758   0017F4  6E01               	movwf	set_led_color@color^0,c
  1759   0017F6  ECEC  F00E         	call	_set_led_color	;wreg free
  1760   0017FA                     
  1761                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1762   0017FA  0E12               	movlw	18
  1763   0017FC  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1764   0017FE  0EDC               	movlw	220
  1765   001800  6E0E               	movwf	??_get_wall_presence^0,c
  1766   001802  0E60               	movlw	96
  1767   001804                     u2487:
  1768   001804  2EE8               	decfsz	wreg,f,c
  1769   001806  D7FE               	bra	u2487
  1770   001808  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1771   00180A  D7FC               	bra	u2487
  1772   00180C  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1773   00180E  D7FA               	bra	u2487
  1774                           
  1775                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1776   001810  EC53  F00E         	call	_color_read_Clear	;wreg free
  1777   001814  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1778   001818  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1779   00181C                     
  1780                           ;color.c: 249:     set_led_color(0b000);
  1781   00181C  0E00               	movlw	0
  1782   00181E  6E02               	movwf	(set_led_color@color+1)^0,c
  1783   001820  0E00               	movlw	0
  1784   001822  6E01               	movwf	set_led_color@color^0,c
  1785   001824  ECEC  F00E         	call	_set_led_color	;wreg free
  1786   001828                     
  1787                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1788   001828  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1789   00182C  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1790   001830  C059  F003         	movff	_wall_coef,___wmul@multiplicand
  1791   001834  C05A  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1792   001838  EC58  F00F         	call	___wmul	;wreg free
  1793   00183C  5001               	movf	?___wmul^0,w,c
  1794   00183E  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1795   001840  5002               	movf	(?___wmul+1)^0,w,c
  1796   001842  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1797   001844  B0D8               	btfsc	status,0,c
  1798   001846  EF27  F00C         	goto	u1801
  1799   00184A  EF2A  F00C         	goto	u1800
  1800   00184E                     u1801:
  1801   00184E  0E01               	movlw	1
  1802   001850  EF2B  F00C         	goto	u1810
  1803   001854                     u1800:
  1804   001854  0E00               	movlw	0
  1805   001856                     u1810:
  1806   001856  6E0C               	movwf	?_get_wall_presence^0,c
  1807   001858  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1808   00185A  0012               	return		;funcret
  1809   00185C                     __end_of_get_wall_presence:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _get_state *****************
  1813 ;; Defined at:
  1814 ;;		line 422 in file "dc_motor.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  2    0[COMRAM] int 
  1821 ;; Registers used:
  1822 ;;		None
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1828 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;Total ram usage:        2 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; Hardware stack levels required when called: 2
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_main
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text5
  1843   001F46                     __ptext5:
  1844                           	callstack 0
  1845   001F46                     _get_state:
  1846                           	callstack 28
  1847   001F46                     
  1848                           ;dc_motor.c: 424:     return state;
  1849   001F46  C051  F001         	movff	_state,?_get_state
  1850   001F4A  C052  F002         	movff	_state+1,?_get_state+1
  1851   001F4E  0012               	return		;funcret
  1852   001F50                     __end_of_get_state:
  1853                           	callstack 0
  1854                           
  1855 ;; *************** function _get_color_code *****************
  1856 ;; Defined at:
  1857 ;;		line 176 in file "color.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;		None
  1860 ;; Auto vars:     Size  Location     Type
  1861 ;;  value           2   28[BANK0 ] unsigned int 
  1862 ;;  i               2   30[BANK0 ] unsigned int 
  1863 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1864 ;;  min_index       2   26[BANK0 ] unsigned int 
  1865 ;;  min_value       2   24[BANK0 ] unsigned int 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2   52[COMRAM] unsigned int 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1876 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1877 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1878 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1879 ;;Total ram usage:       48 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; Hardware stack levels required when called: 5
  1882 ;; This function calls:
  1883 ;;		___lldiv
  1884 ;;		___lmul
  1885 ;;		___wmul
  1886 ;;		_color_read_Blue
  1887 ;;		_color_read_Green
  1888 ;;		_color_read_Red
  1889 ;;		_get_color_distance
  1890 ;;		_set_led_color
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text6
  1897   000516                     __ptext6:
  1898                           	callstack 0
  1899   000516                     _get_color_code:
  1900                           	callstack 25
  1901   000516                     
  1902                           ;color.c: 179:     set_led_color(0b100);
  1903   000516  0E00               	movlw	0
  1904   000518  6E02               	movwf	(set_led_color@color+1)^0,c
  1905   00051A  0E04               	movlw	4
  1906   00051C  6E01               	movwf	set_led_color@color^0,c
  1907   00051E  ECEC  F00E         	call	_set_led_color	;wreg free
  1908   000522                     
  1909                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1910   000522  0E12               	movlw	18
  1911   000524  6E38               	movwf	(??_get_color_code+1)^0,c
  1912   000526  0EDC               	movlw	220
  1913   000528  6E37               	movwf	??_get_color_code^0,c
  1914   00052A  0E60               	movlw	96
  1915   00052C                     u2497:
  1916   00052C  2EE8               	decfsz	wreg,f,c
  1917   00052E  D7FE               	bra	u2497
  1918   000530  2E37               	decfsz	??_get_color_code^0,f,c
  1919   000532  D7FC               	bra	u2497
  1920   000534  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1921   000536  D7FA               	bra	u2497
  1922   000538                     
  1923                           ;color.c: 181:     RGB.R = color_read_Red();
  1924   000538  EC03  F00E         	call	_color_read_Red	;wreg free
  1925   00053C  C005  F0EC         	movff	?_color_read_Red,_RGB
  1926   000540  C006  F0ED         	movff	?_color_read_Red+1,_RGB+1
  1927   000544  0100               	movlb	0	; () banked
  1928   000546  6BEE               	clrf	(_RGB+2)& (0+255),b
  1929   000548  6BEF               	clrf	(_RGB+3)& (0+255),b
  1930   00054A                     
  1931                           ; BSR set to: 0
  1932                           ;color.c: 182:     set_led_color(0b010);
  1933   00054A  0E00               	movlw	0
  1934   00054C  6E02               	movwf	(set_led_color@color+1)^0,c
  1935   00054E  0E02               	movlw	2
  1936   000550  6E01               	movwf	set_led_color@color^0,c
  1937   000552  ECEC  F00E         	call	_set_led_color	;wreg free
  1938   000556                     
  1939                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1940   000556  0E12               	movlw	18
  1941   000558  6E38               	movwf	(??_get_color_code+1)^0,c
  1942   00055A  0EDC               	movlw	220
  1943   00055C  6E37               	movwf	??_get_color_code^0,c
  1944   00055E  0E60               	movlw	96
  1945   000560                     u2507:
  1946   000560  2EE8               	decfsz	wreg,f,c
  1947   000562  D7FE               	bra	u2507
  1948   000564  2E37               	decfsz	??_get_color_code^0,f,c
  1949   000566  D7FC               	bra	u2507
  1950   000568  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1951   00056A  D7FA               	bra	u2507
  1952                           
  1953                           ;color.c: 184:     RGB.G = color_read_Green();
  1954   00056C  EC2B  F00E         	call	_color_read_Green	;wreg free
  1955   000570  C005  F0F0         	movff	?_color_read_Green,_RGB+4
  1956   000574  C006  F0F1         	movff	?_color_read_Green+1,_RGB+5
  1957   000578  0100               	movlb	0	; () banked
  1958   00057A  6BF2               	clrf	(_RGB+6)& (0+255),b
  1959   00057C  6BF3               	clrf	(_RGB+7)& (0+255),b
  1960   00057E                     
  1961                           ; BSR set to: 0
  1962                           ;color.c: 185:     set_led_color(0b001);
  1963   00057E  0E00               	movlw	0
  1964   000580  6E02               	movwf	(set_led_color@color+1)^0,c
  1965   000582  0E01               	movlw	1
  1966   000584  6E01               	movwf	set_led_color@color^0,c
  1967   000586  ECEC  F00E         	call	_set_led_color	;wreg free
  1968   00058A                     
  1969                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1970   00058A  0E12               	movlw	18
  1971   00058C  6E38               	movwf	(??_get_color_code+1)^0,c
  1972   00058E  0EDC               	movlw	220
  1973   000590  6E37               	movwf	??_get_color_code^0,c
  1974   000592  0E60               	movlw	96
  1975   000594                     u2517:
  1976   000594  2EE8               	decfsz	wreg,f,c
  1977   000596  D7FE               	bra	u2517
  1978   000598  2E37               	decfsz	??_get_color_code^0,f,c
  1979   00059A  D7FC               	bra	u2517
  1980   00059C  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1981   00059E  D7FA               	bra	u2517
  1982   0005A0                     
  1983                           ;color.c: 187:     RGB.B = color_read_Blue();
  1984   0005A0  EC7B  F00E         	call	_color_read_Blue	;wreg free
  1985   0005A4  C005  F0F4         	movff	?_color_read_Blue,_RGB+8
  1986   0005A8  C006  F0F5         	movff	?_color_read_Blue+1,_RGB+9
  1987   0005AC  0100               	movlb	0	; () banked
  1988   0005AE  6BF6               	clrf	(_RGB+10)& (0+255),b
  1989   0005B0  6BF7               	clrf	(_RGB+11)& (0+255),b
  1990   0005B2                     
  1991                           ; BSR set to: 0
  1992                           ;color.c: 188:     set_led_color(0b000);
  1993   0005B2  0E00               	movlw	0
  1994   0005B4  6E02               	movwf	(set_led_color@color+1)^0,c
  1995   0005B6  0E00               	movlw	0
  1996   0005B8  6E01               	movwf	set_led_color@color^0,c
  1997   0005BA  ECEC  F00E         	call	_set_led_color	;wreg free
  1998   0005BE                     
  1999                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  2000   0005BE  0100               	movlb	0	; () banked
  2001   0005C0  5160               	movf	_Black_setup& (0+255),w,b
  2002   0005C2  5DEC               	subwf	_RGB& (0+255),w,b
  2003   0005C4  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2004   0005C6  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  2005   0005C8  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2006   0005CA  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  2007   0005CC  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2008   0005CE  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  2009   0005D0  B0D8               	btfsc	status,0,c
  2010   0005D2  EFED  F002         	goto	u1701
  2011   0005D6  EFEF  F002         	goto	u1700
  2012   0005DA                     u1701:
  2013   0005DA  EFF9  F002         	goto	l2739
  2014   0005DE                     u1700:
  2015   0005DE                     
  2016                           ; BSR set to: 0
  2017   0005DE  0E00               	movlw	0
  2018   0005E0  6FCC               	movwf	_get_color_code$458& (0+255),b
  2019   0005E2  0E00               	movlw	0
  2020   0005E4  6FCD               	movwf	(_get_color_code$458+1)& (0+255),b
  2021   0005E6  0E00               	movlw	0
  2022   0005E8  6FCE               	movwf	(_get_color_code$458+2)& (0+255),b
  2023   0005EA  0E00               	movlw	0
  2024   0005EC  6FCF               	movwf	(_get_color_code$458+3)& (0+255),b
  2025   0005EE  EF2E  F003         	goto	l2741
  2026   0005F2                     l2739:
  2027                           
  2028                           ; BSR set to: 0
  2029   0005F2  5160               	movf	_Black_setup& (0+255),w,b
  2030   0005F4  5DEC               	subwf	_RGB& (0+255),w,b
  2031   0005F6  6E01               	movwf	___lmul@multiplier^0,c
  2032   0005F8  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2033   0005FA  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  2034   0005FC  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2035   0005FE  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2036   000600  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  2037   000602  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2038   000604  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2039   000606  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  2040   000608  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2041   00060A  0E64               	movlw	100
  2042   00060C  6E05               	movwf	___lmul@multiplicand^0,c
  2043   00060E  0E00               	movlw	0
  2044   000610  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2045   000612  0E00               	movlw	0
  2046   000614  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2047   000616  0E00               	movlw	0
  2048   000618  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2049   00061A  EC71  F00D         	call	___lmul	;wreg free
  2050   00061E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2051   000622  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2052   000626  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2053   00062A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2054   00062E  0100               	movlb	0	; () banked
  2055   000630  5160               	movf	_Black_setup& (0+255),w,b
  2056   000632  5D6C               	subwf	_White_setup& (0+255),w,b
  2057   000634  6E11               	movwf	___lldiv@divisor^0,c
  2058   000636  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2059   000638  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  2060   00063A  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2061   00063C  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2062   00063E  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  2063   000640  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2064   000642  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2065   000644  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  2066   000646  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2067   000648  EC8E  F00B         	call	___lldiv	;wreg free
  2068   00064C  C00D  F0CC         	movff	?___lldiv,_get_color_code$458
  2069   000650  C00E  F0CD         	movff	?___lldiv+1,_get_color_code$458+1
  2070   000654  C00F  F0CE         	movff	?___lldiv+2,_get_color_code$458+2
  2071   000658  C010  F0CF         	movff	?___lldiv+3,_get_color_code$458+3
  2072   00065C                     l2741:
  2073   00065C  C0CC  F0E0         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  2074   000660  C0CD  F0E1         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  2075   000664  C0CE  F0E2         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  2076   000668  C0CF  F0E3         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  2077   00066C                     
  2078                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2079   00066C  0100               	movlb	0	; () banked
  2080   00066E  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2081   000670  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  2082   000672  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2083   000674  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  2084   000676  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2085   000678  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  2086   00067A  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2087   00067C  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  2088   00067E  B0D8               	btfsc	status,0,c
  2089   000680  EF44  F003         	goto	u1711
  2090   000684  EF46  F003         	goto	u1710
  2091   000688                     u1711:
  2092   000688  EF50  F003         	goto	l2747
  2093   00068C                     u1710:
  2094   00068C                     
  2095                           ; BSR set to: 0
  2096   00068C  0E00               	movlw	0
  2097   00068E  6FD0               	movwf	_get_color_code$459& (0+255),b
  2098   000690  0E00               	movlw	0
  2099   000692  6FD1               	movwf	(_get_color_code$459+1)& (0+255),b
  2100   000694  0E00               	movlw	0
  2101   000696  6FD2               	movwf	(_get_color_code$459+2)& (0+255),b
  2102   000698  0E00               	movlw	0
  2103   00069A  6FD3               	movwf	(_get_color_code$459+3)& (0+255),b
  2104   00069C  EF85  F003         	goto	l2749
  2105   0006A0                     l2747:
  2106                           
  2107                           ; BSR set to: 0
  2108   0006A0  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2109   0006A2  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  2110   0006A4  6E01               	movwf	___lmul@multiplier^0,c
  2111   0006A6  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2112   0006A8  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  2113   0006AA  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2114   0006AC  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2115   0006AE  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  2116   0006B0  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2117   0006B2  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2118   0006B4  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  2119   0006B6  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2120   0006B8  0E64               	movlw	100
  2121   0006BA  6E05               	movwf	___lmul@multiplicand^0,c
  2122   0006BC  0E00               	movlw	0
  2123   0006BE  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2124   0006C0  0E00               	movlw	0
  2125   0006C2  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2126   0006C4  0E00               	movlw	0
  2127   0006C6  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2128   0006C8  EC71  F00D         	call	___lmul	;wreg free
  2129   0006CC  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2130   0006D0  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2131   0006D4  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2132   0006D8  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2133   0006DC  0100               	movlb	0	; () banked
  2134   0006DE  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2135   0006E0  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2136   0006E2  6E11               	movwf	___lldiv@divisor^0,c
  2137   0006E4  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2138   0006E6  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2139   0006E8  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2140   0006EA  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2141   0006EC  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2142   0006EE  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2143   0006F0  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2144   0006F2  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2145   0006F4  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2146   0006F6  EC8E  F00B         	call	___lldiv	;wreg free
  2147   0006FA  C00D  F0D0         	movff	?___lldiv,_get_color_code$459
  2148   0006FE  C00E  F0D1         	movff	?___lldiv+1,_get_color_code$459+1
  2149   000702  C00F  F0D2         	movff	?___lldiv+2,_get_color_code$459+2
  2150   000706  C010  F0D3         	movff	?___lldiv+3,_get_color_code$459+3
  2151   00070A                     l2749:
  2152   00070A  C0D0  F0E4         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  2153   00070E  C0D1  F0E5         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  2154   000712  C0D2  F0E6         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  2155   000716  C0D3  F0E7         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  2156   00071A                     
  2157                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2158   00071A  0100               	movlb	0	; () banked
  2159   00071C  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2160   00071E  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2161   000720  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2162   000722  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2163   000724  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2164   000726  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2165   000728  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2166   00072A  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2167   00072C  B0D8               	btfsc	status,0,c
  2168   00072E  EF9B  F003         	goto	u1721
  2169   000732  EF9D  F003         	goto	u1720
  2170   000736                     u1721:
  2171   000736  EFA7  F003         	goto	l2755
  2172   00073A                     u1720:
  2173   00073A                     
  2174                           ; BSR set to: 0
  2175   00073A  0E00               	movlw	0
  2176   00073C  6FD4               	movwf	_get_color_code$460& (0+255),b
  2177   00073E  0E00               	movlw	0
  2178   000740  6FD5               	movwf	(_get_color_code$460+1)& (0+255),b
  2179   000742  0E00               	movlw	0
  2180   000744  6FD6               	movwf	(_get_color_code$460+2)& (0+255),b
  2181   000746  0E00               	movlw	0
  2182   000748  6FD7               	movwf	(_get_color_code$460+3)& (0+255),b
  2183   00074A  EFDC  F003         	goto	l2757
  2184   00074E                     l2755:
  2185                           
  2186                           ; BSR set to: 0
  2187   00074E  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2188   000750  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2189   000752  6E01               	movwf	___lmul@multiplier^0,c
  2190   000754  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2191   000756  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2192   000758  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2193   00075A  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2194   00075C  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2195   00075E  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2196   000760  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2197   000762  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2198   000764  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2199   000766  0E64               	movlw	100
  2200   000768  6E05               	movwf	___lmul@multiplicand^0,c
  2201   00076A  0E00               	movlw	0
  2202   00076C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2203   00076E  0E00               	movlw	0
  2204   000770  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2205   000772  0E00               	movlw	0
  2206   000774  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2207   000776  EC71  F00D         	call	___lmul	;wreg free
  2208   00077A  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2209   00077E  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2210   000782  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2211   000786  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2212   00078A  0100               	movlb	0	; () banked
  2213   00078C  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2214   00078E  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2215   000790  6E11               	movwf	___lldiv@divisor^0,c
  2216   000792  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2217   000794  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2218   000796  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2219   000798  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2220   00079A  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2221   00079C  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2222   00079E  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2223   0007A0  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2224   0007A2  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2225   0007A4  EC8E  F00B         	call	___lldiv	;wreg free
  2226   0007A8  C00D  F0D4         	movff	?___lldiv,_get_color_code$460
  2227   0007AC  C00E  F0D5         	movff	?___lldiv+1,_get_color_code$460+1
  2228   0007B0  C00F  F0D6         	movff	?___lldiv+2,_get_color_code$460+2
  2229   0007B4  C010  F0D7         	movff	?___lldiv+3,_get_color_code$460+3
  2230   0007B8                     l2757:
  2231   0007B8  C0D4  F0E8         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  2232   0007BC  C0D5  F0E9         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  2233   0007C0  C0D6  F0EA         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  2234   0007C4  C0D7  F0EB         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  2235   0007C8                     
  2236                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2237   0007C8  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2238   0007CC  EE00  F007         	lfsr	0,get_color_distance@color1
  2239   0007D0  0E0B               	movlw	11
  2240   0007D2                     u1731:
  2241   0007D2  CFDB FFEB          	movff	plusw2,plusw0
  2242   0007D6  06E8               	decf	wreg,f,c
  2243   0007D8  E2FC               	bc	u1731
  2244   0007DA  EE21  F000         	lfsr	2,_Color_rules
  2245   0007DE  EE00  F013         	lfsr	0,get_color_distance@color2
  2246   0007E2  0E0B               	movlw	11
  2247   0007E4                     u1741:
  2248   0007E4  CFDB FFEB          	movff	plusw2,plusw0
  2249   0007E8  06E8               	decf	wreg,f,c
  2250   0007EA  E2FC               	bc	u1741
  2251   0007EC  EC15  F006         	call	_get_color_distance	;wreg free
  2252   0007F0  C007  F0D8         	movff	?_get_color_distance,get_color_code@min_value
  2253   0007F4  C008  F0D9         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2254   0007F8                     
  2255                           ;color.c: 196:     unsigned int min_index = 0;
  2256   0007F8  0E00               	movlw	0
  2257   0007FA  0100               	movlb	0	; () banked
  2258   0007FC  6FDB               	movwf	(get_color_code@min_index+1)& (0+255),b
  2259   0007FE  0E00               	movlw	0
  2260   000800  6FDA               	movwf	get_color_code@min_index& (0+255),b
  2261   000802                     
  2262                           ; BSR set to: 0
  2263                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  2264   000802  0E00               	movlw	0
  2265   000804  6FDF               	movwf	(get_color_code@i+1)& (0+255),b
  2266   000806  0E01               	movlw	1
  2267   000808  6FDE               	movwf	get_color_code@i& (0+255),b
  2268   00080A                     l2769:
  2269                           
  2270                           ; BSR set to: 0
  2271                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2272   00080A  C0DE  F001         	movff	get_color_code@i,___wmul@multiplier
  2273   00080E  C0DF  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  2274   000812  0E00               	movlw	0
  2275   000814  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2276   000816  0E0C               	movlw	12
  2277   000818  6E03               	movwf	___wmul@multiplicand^0,c
  2278   00081A  EC58  F00F         	call	___wmul	;wreg free
  2279   00081E  0E00               	movlw	low _Color_rules
  2280   000820  2401               	addwf	?___wmul^0,w,c
  2281   000822  6ED9               	movwf	fsr2l,c
  2282   000824  0E01               	movlw	high _Color_rules
  2283   000826  2002               	addwfc	(?___wmul+1)^0,w,c
  2284   000828  6EDA               	movwf	fsr2h,c
  2285   00082A  EE10  F0C0         	lfsr	1,_get_color_code$2442
  2286   00082E  0E0B               	movlw	11
  2287   000830                     u1751:
  2288   000830  CFDB FFE3          	movff	plusw2,plusw1
  2289   000834  06E8               	decf	wreg,f,c
  2290   000836  E2FC               	bc	u1751
  2291   000838                     
  2292                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2293   000838  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2294   00083C  EE00  F007         	lfsr	0,get_color_distance@color1
  2295   000840  0E0B               	movlw	11
  2296   000842                     u1761:
  2297   000842  CFDB FFEB          	movff	plusw2,plusw0
  2298   000846  06E8               	decf	wreg,f,c
  2299   000848  E2FC               	bc	u1761
  2300   00084A  EE20  F0C0         	lfsr	2,_get_color_code$2442
  2301   00084E  EE00  F013         	lfsr	0,get_color_distance@color2
  2302   000852  0E0B               	movlw	11
  2303   000854                     u1771:
  2304   000854  CFDB FFEB          	movff	plusw2,plusw0
  2305   000858  06E8               	decf	wreg,f,c
  2306   00085A  E2FC               	bc	u1771
  2307   00085C  EC15  F006         	call	_get_color_distance	;wreg free
  2308   000860  C007  F0DC         	movff	?_get_color_distance,get_color_code@value
  2309   000864  C008  F0DD         	movff	?_get_color_distance+1,get_color_code@value+1
  2310   000868                     
  2311                           ;color.c: 199:         if(value < min_value){
  2312   000868  0100               	movlb	0	; () banked
  2313   00086A  51D8               	movf	get_color_code@min_value& (0+255),w,b
  2314   00086C  5DDC               	subwf	get_color_code@value& (0+255),w,b
  2315   00086E  51D9               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2316   000870  59DD               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2317   000872  B0D8               	btfsc	status,0,c
  2318   000874  EF3E  F004         	goto	u1781
  2319   000878  EF40  F004         	goto	u1780
  2320   00087C                     u1781:
  2321   00087C  EF48  F004         	goto	l2777
  2322   000880                     u1780:
  2323   000880                     
  2324                           ; BSR set to: 0
  2325                           ;color.c: 200:             min_index = i;
  2326   000880  C0DE  F0DA         	movff	get_color_code@i,get_color_code@min_index
  2327   000884  C0DF  F0DB         	movff	get_color_code@i+1,get_color_code@min_index+1
  2328                           
  2329                           ;color.c: 201:             min_value = value;
  2330   000888  C0DC  F0D8         	movff	get_color_code@value,get_color_code@min_value
  2331   00088C  C0DD  F0D9         	movff	get_color_code@value+1,get_color_code@min_value+1
  2332   000890                     l2777:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;color.c: 203:     }
  2336   000890  4BDE               	infsnz	get_color_code@i& (0+255),f,b
  2337   000892  2BDF               	incf	(get_color_code@i+1)& (0+255),f,b
  2338   000894                     
  2339                           ; BSR set to: 0
  2340   000894  51DF               	movf	(get_color_code@i+1)& (0+255),w,b
  2341   000896  E109               	bnz	u1790
  2342   000898  0E09               	movlw	9
  2343   00089A  5DDE               	subwf	get_color_code@i& (0+255),w,b
  2344   00089C  A0D8               	btfss	status,0,c
  2345   00089E  EF53  F004         	goto	u1791
  2346   0008A2  EF55  F004         	goto	u1790
  2347   0008A6                     u1791:
  2348   0008A6  EF05  F004         	goto	l2769
  2349   0008AA                     u1790:
  2350   0008AA                     
  2351                           ; BSR set to: 0
  2352                           ;color.c: 204:     return min_index;
  2353   0008AA  C0DA  F035         	movff	get_color_code@min_index,?_get_color_code
  2354   0008AE  C0DB  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  2355   0008B2                     
  2356                           ; BSR set to: 0
  2357   0008B2  0012               	return		;funcret
  2358   0008B4                     __end_of_get_color_code:
  2359                           	callstack 0
  2360                           
  2361 ;; *************** function _get_color_distance *****************
  2362 ;; Defined at:
  2363 ;;		line 146 in file "color.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  color1         12    6[COMRAM] struct RGB_val
  2366 ;;  color2         12   18[COMRAM] struct RGB_val
  2367 ;; Auto vars:     Size  Location     Type
  2368 ;;  B_offset        2   50[COMRAM] unsigned int 
  2369 ;;  G_offset        2   48[COMRAM] unsigned int 
  2370 ;;  R_offset        2   46[COMRAM] unsigned int 
  2371 ;; Return value:  Size  Location     Type
  2372 ;;                  2    6[COMRAM] unsigned int 
  2373 ;; Registers used:
  2374 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2375 ;; Tracked objects:
  2376 ;;		On entry : 0/0
  2377 ;;		On exit  : 0/0
  2378 ;;		Unchanged: 0/0
  2379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2380 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2381 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2382 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2383 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2384 ;;Total ram usage:       46 bytes
  2385 ;; Hardware stack levels used: 1
  2386 ;; Hardware stack levels required when called: 3
  2387 ;; This function calls:
  2388 ;;		___wmul
  2389 ;; This function is called by:
  2390 ;;		_get_color_code
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text7
  2395   000C2A                     __ptext7:
  2396                           	callstack 0
  2397   000C2A                     _get_color_distance:
  2398                           	callstack 26
  2399   000C2A                     
  2400                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2401   000C2A  5013               	movf	get_color_distance@color2^0,w,c
  2402   000C2C  5C07               	subwf	get_color_distance@color1^0,w,c
  2403   000C2E  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2404   000C30  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2405   000C32  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2406   000C34  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2407   000C36  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2408   000C38  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2409   000C3A  B0D8               	btfsc	status,0,c
  2410   000C3C  EF22  F006         	goto	u1361
  2411   000C40  EF24  F006         	goto	u1360
  2412   000C44                     u1361:
  2413   000C44  EF32  F006         	goto	l2383
  2414   000C48                     u1360:
  2415   000C48  5007               	movf	get_color_distance@color1^0,w,c
  2416   000C4A  5C13               	subwf	get_color_distance@color2^0,w,c
  2417   000C4C  6E23               	movwf	_get_color_distance$417^0,c
  2418   000C4E  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2419   000C50  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2420   000C52  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2421   000C54  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2422   000C56  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2423   000C58  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2424   000C5A  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2425   000C5C  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2426   000C5E  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2427   000C60  EF3E  F006         	goto	l2385
  2428   000C64                     l2383:
  2429   000C64  5013               	movf	get_color_distance@color2^0,w,c
  2430   000C66  5C07               	subwf	get_color_distance@color1^0,w,c
  2431   000C68  6E23               	movwf	_get_color_distance$417^0,c
  2432   000C6A  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2433   000C6C  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2434   000C6E  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2435   000C70  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2436   000C72  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2437   000C74  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2438   000C76  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2439   000C78  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2440   000C7A  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2441   000C7C                     l2385:
  2442   000C7C  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2443   000C80  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2444                           
  2445                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2446   000C84  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2447   000C86  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2448   000C88  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2449   000C8A  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2450   000C8C  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2451   000C8E  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2452   000C90  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2453   000C92  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2454   000C94  B0D8               	btfsc	status,0,c
  2455   000C96  EF4F  F006         	goto	u1371
  2456   000C9A  EF51  F006         	goto	u1370
  2457   000C9E                     u1371:
  2458   000C9E  EF5F  F006         	goto	l2389
  2459   000CA2                     u1370:
  2460   000CA2  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2461   000CA4  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2462   000CA6  6E27               	movwf	_get_color_distance$419^0,c
  2463   000CA8  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2464   000CAA  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2465   000CAC  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2466   000CAE  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2467   000CB0  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2468   000CB2  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2469   000CB4  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2470   000CB6  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2471   000CB8  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2472   000CBA  EF6B  F006         	goto	l2391
  2473   000CBE                     l2389:
  2474   000CBE  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2475   000CC0  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2476   000CC2  6E27               	movwf	_get_color_distance$419^0,c
  2477   000CC4  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2478   000CC6  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2479   000CC8  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2480   000CCA  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2481   000CCC  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2482   000CCE  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2483   000CD0  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2484   000CD2  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2485   000CD4  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2486   000CD6                     l2391:
  2487   000CD6  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2488   000CDA  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2489                           
  2490                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2491   000CDE  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2492   000CE0  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2493   000CE2  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2494   000CE4  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2495   000CE6  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2496   000CE8  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2497   000CEA  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2498   000CEC  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2499   000CEE  B0D8               	btfsc	status,0,c
  2500   000CF0  EF7C  F006         	goto	u1381
  2501   000CF4  EF7E  F006         	goto	u1380
  2502   000CF8                     u1381:
  2503   000CF8  EF8C  F006         	goto	l2395
  2504   000CFC                     u1380:
  2505   000CFC  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2506   000CFE  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2507   000D00  6E2B               	movwf	_get_color_distance$421^0,c
  2508   000D02  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2509   000D04  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2510   000D06  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2511   000D08  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2512   000D0A  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2513   000D0C  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2514   000D0E  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2515   000D10  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2516   000D12  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2517   000D14  EF98  F006         	goto	l2397
  2518   000D18                     l2395:
  2519   000D18  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2520   000D1A  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2521   000D1C  6E2B               	movwf	_get_color_distance$421^0,c
  2522   000D1E  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2523   000D20  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2524   000D22  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2525   000D24  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2526   000D26  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2527   000D28  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2528   000D2A  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2529   000D2C  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2530   000D2E  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2531   000D30                     l2397:
  2532   000D30  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2533   000D34  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2534   000D38                     
  2535                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2536   000D38  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2537   000D3C  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2538   000D40  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2539   000D44  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2540   000D48  EC58  F00F         	call	___wmul	;wreg free
  2541   000D4C  C001  F01F         	movff	?___wmul,??_get_color_distance
  2542   000D50  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2543   000D54  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2544   000D58  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2545   000D5C  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2546   000D60  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2547   000D64  EC58  F00F         	call	___wmul	;wreg free
  2548   000D68  5001               	movf	?___wmul^0,w,c
  2549   000D6A  241F               	addwf	??_get_color_distance^0,w,c
  2550   000D6C  6E21               	movwf	(??_get_color_distance+2)^0,c
  2551   000D6E  5002               	movf	(?___wmul+1)^0,w,c
  2552   000D70  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2553   000D72  6E22               	movwf	(??_get_color_distance+3)^0,c
  2554   000D74  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2555   000D78  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2556   000D7C  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2557   000D80  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2558   000D84  EC58  F00F         	call	___wmul	;wreg free
  2559   000D88  5001               	movf	?___wmul^0,w,c
  2560   000D8A  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2561   000D8C  6E07               	movwf	?_get_color_distance^0,c
  2562   000D8E  5002               	movf	(?___wmul+1)^0,w,c
  2563   000D90  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2564   000D92  6E08               	movwf	(?_get_color_distance+1)^0,c
  2565   000D94  0012               	return		;funcret
  2566   000D96                     __end_of_get_color_distance:
  2567                           	callstack 0
  2568                           
  2569 ;; *************** function ___lmul *****************
  2570 ;; Defined at:
  2571 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;  multiplier      4    0[COMRAM] unsigned long 
  2574 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;  product         4    8[COMRAM] unsigned long 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  4    0[COMRAM] unsigned long 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2586 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2587 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2589 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2590 ;;Total ram usage:       12 bytes
  2591 ;; Hardware stack levels used: 1
  2592 ;; Hardware stack levels required when called: 2
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_get_color_code
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text8
  2601   001AE2                     __ptext8:
  2602                           	callstack 0
  2603   001AE2                     ___lmul:
  2604                           	callstack 27
  2605   001AE2  0E00               	movlw	0
  2606   001AE4  6E09               	movwf	___lmul@product^0,c
  2607   001AE6  0E00               	movlw	0
  2608   001AE8  6E0A               	movwf	(___lmul@product+1)^0,c
  2609   001AEA  0E00               	movlw	0
  2610   001AEC  6E0B               	movwf	(___lmul@product+2)^0,c
  2611   001AEE  0E00               	movlw	0
  2612   001AF0  6E0C               	movwf	(___lmul@product+3)^0,c
  2613   001AF2                     l2637:
  2614   001AF2  A001               	btfss	___lmul@multiplier^0,0,c
  2615   001AF4  EF7E  F00D         	goto	u1511
  2616   001AF8  EF80  F00D         	goto	u1510
  2617   001AFC                     u1511:
  2618   001AFC  EF88  F00D         	goto	l2641
  2619   001B00                     u1510:
  2620   001B00  5005               	movf	___lmul@multiplicand^0,w,c
  2621   001B02  2609               	addwf	___lmul@product^0,f,c
  2622   001B04  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2623   001B06  220A               	addwfc	(___lmul@product+1)^0,f,c
  2624   001B08  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2625   001B0A  220B               	addwfc	(___lmul@product+2)^0,f,c
  2626   001B0C  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2627   001B0E  220C               	addwfc	(___lmul@product+3)^0,f,c
  2628   001B10                     l2641:
  2629   001B10  90D8               	bcf	status,0,c
  2630   001B12  3605               	rlcf	___lmul@multiplicand^0,f,c
  2631   001B14  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2632   001B16  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2633   001B18  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2634   001B1A  90D8               	bcf	status,0,c
  2635   001B1C  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2636   001B1E  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2637   001B20  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2638   001B22  3201               	rrcf	___lmul@multiplier^0,f,c
  2639   001B24  5001               	movf	___lmul@multiplier^0,w,c
  2640   001B26  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2641   001B28  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2642   001B2A  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2643   001B2C  A4D8               	btfss	status,2,c
  2644   001B2E  EF9B  F00D         	goto	u1521
  2645   001B32  EF9D  F00D         	goto	u1520
  2646   001B36                     u1521:
  2647   001B36  EF79  F00D         	goto	l2637
  2648   001B3A                     u1520:
  2649   001B3A  C009  F001         	movff	___lmul@product,?___lmul
  2650   001B3E  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2651   001B42  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2652   001B46  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2653   001B4A  0012               	return		;funcret
  2654   001B4C                     __end_of___lmul:
  2655                           	callstack 0
  2656                           
  2657 ;; *************** function ___lldiv *****************
  2658 ;; Defined at:
  2659 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  dividend        4   12[COMRAM] unsigned long 
  2662 ;;  divisor         4   16[COMRAM] unsigned long 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  quotient        4   20[COMRAM] unsigned long 
  2665 ;;  counter         1   24[COMRAM] unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  4   12[COMRAM] unsigned long 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2675 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;Total ram usage:       13 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 2
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_get_color_code
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text9
  2690   00171C                     __ptext9:
  2691                           	callstack 0
  2692   00171C                     ___lldiv:
  2693                           	callstack 27
  2694   00171C  0E00               	movlw	0
  2695   00171E  6E15               	movwf	___lldiv@quotient^0,c
  2696   001720  0E00               	movlw	0
  2697   001722  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2698   001724  0E00               	movlw	0
  2699   001726  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2700   001728  0E00               	movlw	0
  2701   00172A  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2702   00172C  5011               	movf	___lldiv@divisor^0,w,c
  2703   00172E  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2704   001730  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2705   001732  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2706   001734  B4D8               	btfsc	status,2,c
  2707   001736  EF9F  F00B         	goto	u1531
  2708   00173A  EFA1  F00B         	goto	u1530
  2709   00173E                     u1531:
  2710   00173E  EFD7  F00B         	goto	l479
  2711   001742                     u1530:
  2712   001742  0E01               	movlw	1
  2713   001744  6E19               	movwf	___lldiv@counter^0,c
  2714   001746  EFAB  F00B         	goto	l2653
  2715   00174A                     l2651:
  2716   00174A  90D8               	bcf	status,0,c
  2717   00174C  3611               	rlcf	___lldiv@divisor^0,f,c
  2718   00174E  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2719   001750  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2720   001752  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2721   001754  2A19               	incf	___lldiv@counter^0,f,c
  2722   001756                     l2653:
  2723   001756  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2724   001758  EFB0  F00B         	goto	u1541
  2725   00175C  EFB2  F00B         	goto	u1540
  2726   001760                     u1541:
  2727   001760  EFA5  F00B         	goto	l2651
  2728   001764                     u1540:
  2729   001764                     l2655:
  2730   001764  90D8               	bcf	status,0,c
  2731   001766  3615               	rlcf	___lldiv@quotient^0,f,c
  2732   001768  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2733   00176A  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2734   00176C  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2735   00176E  5011               	movf	___lldiv@divisor^0,w,c
  2736   001770  5C0D               	subwf	___lldiv@dividend^0,w,c
  2737   001772  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2738   001774  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2739   001776  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2740   001778  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2741   00177A  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2742   00177C  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2743   00177E  A0D8               	btfss	status,0,c
  2744   001780  EFC4  F00B         	goto	u1551
  2745   001784  EFC6  F00B         	goto	u1550
  2746   001788                     u1551:
  2747   001788  EFCF  F00B         	goto	l2663
  2748   00178C                     u1550:
  2749   00178C  5011               	movf	___lldiv@divisor^0,w,c
  2750   00178E  5E0D               	subwf	___lldiv@dividend^0,f,c
  2751   001790  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2752   001792  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2753   001794  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2754   001796  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2755   001798  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2756   00179A  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2757   00179C  8015               	bsf	___lldiv@quotient^0,0,c
  2758   00179E                     l2663:
  2759   00179E  90D8               	bcf	status,0,c
  2760   0017A0  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2761   0017A2  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2762   0017A4  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2763   0017A6  3211               	rrcf	___lldiv@divisor^0,f,c
  2764   0017A8  2E19               	decfsz	___lldiv@counter^0,f,c
  2765   0017AA  EFB2  F00B         	goto	l2655
  2766   0017AE                     l479:
  2767   0017AE  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2768   0017B2  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2769   0017B6  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2770   0017BA  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2771   0017BE  0012               	return		;funcret
  2772   0017C0                     __end_of___lldiv:
  2773                           	callstack 0
  2774                           
  2775 ;; *************** function _fullSpeedAhead *****************
  2776 ;; Defined at:
  2777 ;;		line 256 in file "dc_motor.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2780 ;;		 -> main@motorL(9), 
  2781 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2782 ;;		 -> main@motorR(9), 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2794 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2798 ;;Total ram usage:        4 bytes
  2799 ;; Hardware stack levels used: 1
  2800 ;; Hardware stack levels required when called: 4
  2801 ;; This function calls:
  2802 ;;		_setMotorPWM
  2803 ;; This function is called by:
  2804 ;;		_main
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text10
  2809   001BAC                     __ptext10:
  2810                           	callstack 0
  2811   001BAC                     _fullSpeedAhead:
  2812                           	callstack 26
  2813   001BAC                     
  2814                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2815   001BAC  0E00               	movlw	0
  2816   001BAE  6E56               	movwf	(_seconds+1)^0,c
  2817   001BB0  0E00               	movlw	0
  2818   001BB2  6E55               	movwf	_seconds^0,c
  2819   001BB4                     
  2820                           ;dc_motor.c: 259:     (*mL).direction=0;
  2821   001BB4  EE20 F001          	lfsr	2,1
  2822   001BB8  5014               	movf	fullSpeedAhead@mL^0,w,c
  2823   001BBA  26D9               	addwf	fsr2l,f,c
  2824   001BBC  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2825   001BBE  22DA               	addwfc	fsr2h,f,c
  2826   001BC0  0E00               	movlw	0
  2827   001BC2  6EDF               	movwf	indf2,c
  2828   001BC4                     
  2829                           ;dc_motor.c: 260:     (*mR).direction=0;
  2830   001BC4  EE20 F001          	lfsr	2,1
  2831   001BC8  5016               	movf	fullSpeedAhead@mR^0,w,c
  2832   001BCA  26D9               	addwf	fsr2l,f,c
  2833   001BCC  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2834   001BCE  22DA               	addwfc	fsr2h,f,c
  2835   001BD0  0E00               	movlw	0
  2836   001BD2  6EDF               	movwf	indf2,c
  2837   001BD4                     
  2838                           ;dc_motor.c: 261:     (*mL).power=50;
  2839   001BD4  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2840   001BD8  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2841   001BDC  0E32               	movlw	50
  2842   001BDE  6EDF               	movwf	indf2,c
  2843   001BE0                     
  2844                           ;dc_motor.c: 262:     (*mR).power=50;
  2845   001BE0  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2846   001BE4  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2847   001BE8  0E32               	movlw	50
  2848   001BEA  6EDF               	movwf	indf2,c
  2849   001BEC                     
  2850                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2851   001BEC  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2852   001BF0  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2853   001BF4  ECCB  F006         	call	_setMotorPWM	;wreg free
  2854   001BF8                     
  2855                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2856   001BF8  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2857   001BFC  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2858   001C00  ECCB  F006         	call	_setMotorPWM	;wreg free
  2859   001C04  0012               	return		;funcret
  2860   001C06                     __end_of_fullSpeedAhead:
  2861                           	callstack 0
  2862                           
  2863 ;; *************** function _color_click_init *****************
  2864 ;; Defined at:
  2865 ;;		line 30 in file "color.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2883 ;;Total ram usage:        1 bytes
  2884 ;; Hardware stack levels used: 1
  2885 ;; Hardware stack levels required when called: 6
  2886 ;; This function calls:
  2887 ;;		_I2C_2_Master_Init
  2888 ;;		_calibrate_black
  2889 ;;		_calibrate_white
  2890 ;;		_color_writetoaddr
  2891 ;; This function is called by:
  2892 ;;		_main
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896                           	psect	text11
  2897   0012EA                     __ptext11:
  2898                           	callstack 0
  2899   0012EA                     _color_click_init:
  2900                           	callstack 24
  2901   0012EA                     
  2902                           ;color.c: 33:     I2C_2_Master_Init();
  2903   0012EA  EC2F  F00F         	call	_I2C_2_Master_Init	;wreg free
  2904   0012EE                     
  2905                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2906   0012EE  0E01               	movlw	1
  2907   0012F0  6E03               	movwf	color_writetoaddr@value^0,c
  2908   0012F2  0E00               	movlw	0
  2909   0012F4  EC6B  F00F         	call	_color_writetoaddr
  2910   0012F8                     
  2911                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2912   0012F8  0E3F               	movlw	63
  2913   0012FA  6E16               	movwf	??_color_click_init^0,c
  2914   0012FC  0E55               	movlw	85
  2915   0012FE                     u2527:
  2916   0012FE  2EE8               	decfsz	wreg,f,c
  2917   001300  D7FE               	bra	u2527
  2918   001302  2E16               	decfsz	??_color_click_init^0,f,c
  2919   001304  D7FC               	bra	u2527
  2920   001306  F000               	nop	
  2921   001308                     
  2922                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2923   001308  0E03               	movlw	3
  2924   00130A  6E03               	movwf	color_writetoaddr@value^0,c
  2925   00130C  0E00               	movlw	0
  2926   00130E  EC6B  F00F         	call	_color_writetoaddr
  2927   001312                     
  2928                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2929   001312  0ED5               	movlw	213
  2930   001314  6E03               	movwf	color_writetoaddr@value^0,c
  2931   001316  0E01               	movlw	1
  2932   001318  EC6B  F00F         	call	_color_writetoaddr
  2933   00131C                     
  2934                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2935   00131C  9E86               	bcf	134,7,c	;volatile
  2936   00131E                     
  2937                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2938   00131E  9287               	bcf	135,1,c	;volatile
  2939   001320                     
  2940                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2941   001320  9881               	bcf	129,4,c	;volatile
  2942   001322                     
  2943                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2944   001322  EE20  F0B4         	lfsr	2,_Red_rule
  2945   001326  EE11  F000         	lfsr	1,_Color_rules
  2946   00132A  0E0B               	movlw	11
  2947   00132C                     u1561:
  2948   00132C  CFDB FFE3          	movff	plusw2,plusw1
  2949   001330  06E8               	decf	wreg,f,c
  2950   001332  E2FC               	bc	u1561
  2951   001334                     
  2952                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2953   001334  EE20  F0A8         	lfsr	2,_Green_rule
  2954   001338  EE11  F00C         	lfsr	1,_Color_rules+12
  2955   00133C  0E0B               	movlw	11
  2956   00133E                     u1571:
  2957   00133E  CFDB FFE3          	movff	plusw2,plusw1
  2958   001342  06E8               	decf	wreg,f,c
  2959   001344  E2FC               	bc	u1571
  2960   001346                     
  2961                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2962   001346  EE20  F09C         	lfsr	2,_Blue_rule
  2963   00134A  EE11  F018         	lfsr	1,_Color_rules+24
  2964   00134E  0E0B               	movlw	11
  2965   001350                     u1581:
  2966   001350  CFDB FFE3          	movff	plusw2,plusw1
  2967   001354  06E8               	decf	wreg,f,c
  2968   001356  E2FC               	bc	u1581
  2969   001358                     
  2970                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2971   001358  EE20  F090         	lfsr	2,_Yellow_rule
  2972   00135C  EE11  F024         	lfsr	1,_Color_rules+36
  2973   001360  0E0B               	movlw	11
  2974   001362                     u1591:
  2975   001362  CFDB FFE3          	movff	plusw2,plusw1
  2976   001366  06E8               	decf	wreg,f,c
  2977   001368  E2FC               	bc	u1591
  2978   00136A                     
  2979                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2980   00136A  EE20  F084         	lfsr	2,_Pink_rule
  2981   00136E  EE11  F030         	lfsr	1,_Color_rules+48
  2982   001372  0E0B               	movlw	11
  2983   001374                     u1601:
  2984   001374  CFDB FFE3          	movff	plusw2,plusw1
  2985   001378  06E8               	decf	wreg,f,c
  2986   00137A  E2FC               	bc	u1601
  2987   00137C                     
  2988                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2989   00137C  EE20  F078         	lfsr	2,_Orange_rule
  2990   001380  EE11  F03C         	lfsr	1,_Color_rules+60
  2991   001384  0E0B               	movlw	11
  2992   001386                     u1611:
  2993   001386  CFDB FFE3          	movff	plusw2,plusw1
  2994   00138A  06E8               	decf	wreg,f,c
  2995   00138C  E2FC               	bc	u1611
  2996   00138E                     
  2997                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2998   00138E  EE21  F084         	lfsr	2,_Lightblue_rule
  2999   001392  EE11  F048         	lfsr	1,_Color_rules+72
  3000   001396  0E0B               	movlw	11
  3001   001398                     u1621:
  3002   001398  CFDB FFE3          	movff	plusw2,plusw1
  3003   00139C  06E8               	decf	wreg,f,c
  3004   00139E  E2FC               	bc	u1621
  3005   0013A0                     
  3006                           ;color.c: 56:     Color_rules[7] = White_rule;
  3007   0013A0  EE21  F078         	lfsr	2,_White_rule
  3008   0013A4  EE11  F054         	lfsr	1,_Color_rules+84
  3009   0013A8  0E0B               	movlw	11
  3010   0013AA                     u1631:
  3011   0013AA  CFDB FFE3          	movff	plusw2,plusw1
  3012   0013AE  06E8               	decf	wreg,f,c
  3013   0013B0  E2FC               	bc	u1631
  3014   0013B2                     
  3015                           ;color.c: 57:     Color_rules[8] = Black_rule;
  3016   0013B2  EE21  F06C         	lfsr	2,_Black_rule
  3017   0013B6  EE11  F060         	lfsr	1,_Color_rules+96
  3018   0013BA  0E0B               	movlw	11
  3019   0013BC                     u1641:
  3020   0013BC  CFDB FFE3          	movff	plusw2,plusw1
  3021   0013C0  06E8               	decf	wreg,f,c
  3022   0013C2  E2FC               	bc	u1641
  3023   0013C4                     
  3024                           ;color.c: 66:     TRISFbits.TRISF3=1;
  3025   0013C4  8686               	bsf	134,3,c	;volatile
  3026   0013C6                     
  3027                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  3028   0013C6  010E               	movlb	14	; () banked
  3029   0013C8  97B4               	bcf	180,3,b	;volatile
  3030   0013CA                     
  3031                           ; BSR set to: 14
  3032                           ;color.c: 68:     TRISFbits.TRISF2=1;
  3033   0013CA  8486               	bsf	134,2,c	;volatile
  3034   0013CC                     
  3035                           ; BSR set to: 14
  3036                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  3037   0013CC  95B4               	bcf	180,2,b	;volatile
  3038   0013CE                     l67:
  3039   0013CE  A68E               	btfss	142,3,c	;volatile
  3040   0013D0  EFEC  F009         	goto	u1651
  3041   0013D4  EFEE  F009         	goto	u1650
  3042   0013D8                     u1651:
  3043   0013D8  EFF5  F009         	goto	l71
  3044   0013DC                     u1650:
  3045   0013DC  B48E               	btfsc	142,2,c	;volatile
  3046   0013DE  EFF3  F009         	goto	u1661
  3047   0013E2  EFF5  F009         	goto	u1660
  3048   0013E6                     u1661:
  3049   0013E6  EFE7  F009         	goto	l67
  3050   0013EA                     u1660:
  3051   0013EA                     l71:
  3052                           
  3053                           ;color.c: 72:     if(!PORTFbits.RF2){
  3054   0013EA  B48E               	btfsc	142,2,c	;volatile
  3055   0013EC  EFFA  F009         	goto	u1671
  3056   0013F0  EFFC  F009         	goto	u1670
  3057   0013F4                     u1671:
  3058   0013F4  EFFE  F009         	goto	l2713
  3059   0013F8                     u1670:
  3060   0013F8  EF10  F00A         	goto	l73
  3061   0013FC                     l2713:
  3062                           
  3063                           ;color.c: 75:     calibrate_white();
  3064   0013FC  EC39  F00B         	call	_calibrate_white	;wreg free
  3065   001400                     l74:
  3066   001400  B68E               	btfsc	142,3,c	;volatile
  3067   001402  EF05  F00A         	goto	u1681
  3068   001406  EF07  F00A         	goto	u1680
  3069   00140A                     u1681:
  3070   00140A  EF00  F00A         	goto	l74
  3071   00140E                     u1680:
  3072   00140E                     
  3073                           ;color.c: 77:     calibrate_black();
  3074   00140E  ECD6  F008         	call	_calibrate_black	;wreg free
  3075   001412                     l77:
  3076   001412  B68E               	btfsc	142,3,c	;volatile
  3077   001414  EF0E  F00A         	goto	u1691
  3078   001418  EF10  F00A         	goto	u1690
  3079   00141C                     u1691:
  3080   00141C  EF09  F00A         	goto	l77
  3081   001420                     u1690:
  3082   001420                     l73:
  3083   001420  0012               	return		;funcret
  3084   001422                     __end_of_color_click_init:
  3085                           	callstack 0
  3086                           
  3087 ;; *************** function _color_writetoaddr *****************
  3088 ;; Defined at:
  3089 ;;		line 82 in file "color.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;  address         1    wreg     unsigned char 
  3092 ;;  value           1    2[COMRAM] unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  address         1    3[COMRAM] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2, status,0, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3104 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3108 ;;Total ram usage:        2 bytes
  3109 ;; Hardware stack levels used: 1
  3110 ;; Hardware stack levels required when called: 4
  3111 ;; This function calls:
  3112 ;;		_I2C_2_Master_Start
  3113 ;;		_I2C_2_Master_Stop
  3114 ;;		_I2C_2_Master_Write
  3115 ;; This function is called by:
  3116 ;;		_color_click_init
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text12
  3121   001ED6                     __ptext12:
  3122                           	callstack 0
  3123   001ED6                     _color_writetoaddr:
  3124                           	callstack 25
  3125                           
  3126                           ;incstack = 0
  3127                           ;color_writetoaddr@address stored from wreg
  3128   001ED6  6E04               	movwf	color_writetoaddr@address^0,c
  3129   001ED8                     
  3130                           ;color.c: 83:     I2C_2_Master_Start();
  3131   001ED8  ECAD  F00F         	call	_I2C_2_Master_Start	;wreg free
  3132                           
  3133                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  3134   001EDC  0E52               	movlw	82
  3135   001EDE  EC97  F00F         	call	_I2C_2_Master_Write
  3136                           
  3137                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  3138   001EE2  5004               	movf	color_writetoaddr@address^0,w,c
  3139   001EE4  0980               	iorlw	128
  3140   001EE6  EC97  F00F         	call	_I2C_2_Master_Write
  3141                           
  3142                           ;color.c: 86:     I2C_2_Master_Write(value);
  3143   001EEA  5003               	movf	color_writetoaddr@value^0,w,c
  3144   001EEC  EC97  F00F         	call	_I2C_2_Master_Write
  3145                           
  3146                           ;color.c: 87:     I2C_2_Master_Stop();
  3147   001EF0  ECA8  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3148   001EF4  0012               	return		;funcret
  3149   001EF6                     __end_of_color_writetoaddr:
  3150                           	callstack 0
  3151                           
  3152 ;; *************** function _calibrate_white *****************
  3153 ;; Defined at:
  3154 ;;		line 229 in file "color.c"
  3155 ;; Parameters:    Size  Location     Type
  3156 ;;		None
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;		None
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1    wreg      void 
  3161 ;; Registers used:
  3162 ;;		wreg, status,2, status,0, cstack
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3172 ;;Total ram usage:        2 bytes
  3173 ;; Hardware stack levels used: 1
  3174 ;; Hardware stack levels required when called: 5
  3175 ;; This function calls:
  3176 ;;		_color_read_Blue
  3177 ;;		_color_read_Green
  3178 ;;		_color_read_Red
  3179 ;;		_set_led_color
  3180 ;; This function is called by:
  3181 ;;		_color_click_init
  3182 ;; This function uses a non-reentrant model
  3183 ;;
  3184                           
  3185                           	psect	text13
  3186   001672                     __ptext13:
  3187                           	callstack 0
  3188   001672                     _calibrate_white:
  3189                           	callstack 24
  3190   001672                     
  3191                           ;color.c: 230:     set_led_color(0b100);
  3192   001672  0E00               	movlw	0
  3193   001674  6E02               	movwf	(set_led_color@color+1)^0,c
  3194   001676  0E04               	movlw	4
  3195   001678  6E01               	movwf	set_led_color@color^0,c
  3196   00167A  ECEC  F00E         	call	_set_led_color	;wreg free
  3197   00167E                     
  3198                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3199   00167E  0E12               	movlw	18
  3200   001680  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3201   001682  0EDC               	movlw	220
  3202   001684  6E0C               	movwf	??_calibrate_white^0,c
  3203   001686  0E60               	movlw	96
  3204   001688                     u2537:
  3205   001688  2EE8               	decfsz	wreg,f,c
  3206   00168A  D7FE               	bra	u2537
  3207   00168C  2E0C               	decfsz	??_calibrate_white^0,f,c
  3208   00168E  D7FC               	bra	u2537
  3209   001690  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3210   001692  D7FA               	bra	u2537
  3211   001694                     
  3212                           ;color.c: 232:     White_setup.R = color_read_Red();
  3213   001694  EC03  F00E         	call	_color_read_Red	;wreg free
  3214   001698  C005  F06C         	movff	?_color_read_Red,_White_setup
  3215   00169C  C006  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3216   0016A0  0100               	movlb	0	; () banked
  3217   0016A2  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3218   0016A4  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3219   0016A6                     
  3220                           ; BSR set to: 0
  3221                           ;color.c: 233:     set_led_color(0b010);
  3222   0016A6  0E00               	movlw	0
  3223   0016A8  6E02               	movwf	(set_led_color@color+1)^0,c
  3224   0016AA  0E02               	movlw	2
  3225   0016AC  6E01               	movwf	set_led_color@color^0,c
  3226   0016AE  ECEC  F00E         	call	_set_led_color	;wreg free
  3227   0016B2                     
  3228                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3229   0016B2  0E12               	movlw	18
  3230   0016B4  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3231   0016B6  0EDC               	movlw	220
  3232   0016B8  6E0C               	movwf	??_calibrate_white^0,c
  3233   0016BA  0E60               	movlw	96
  3234   0016BC                     u2547:
  3235   0016BC  2EE8               	decfsz	wreg,f,c
  3236   0016BE  D7FE               	bra	u2547
  3237   0016C0  2E0C               	decfsz	??_calibrate_white^0,f,c
  3238   0016C2  D7FC               	bra	u2547
  3239   0016C4  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3240   0016C6  D7FA               	bra	u2547
  3241                           
  3242                           ;color.c: 235:     White_setup.G = color_read_Green();
  3243   0016C8  EC2B  F00E         	call	_color_read_Green	;wreg free
  3244   0016CC  C005  F070         	movff	?_color_read_Green,_White_setup+4
  3245   0016D0  C006  F071         	movff	?_color_read_Green+1,_White_setup+5
  3246   0016D4  0100               	movlb	0	; () banked
  3247   0016D6  6B72               	clrf	(_White_setup+6)& (0+255),b
  3248   0016D8  6B73               	clrf	(_White_setup+7)& (0+255),b
  3249   0016DA                     
  3250                           ; BSR set to: 0
  3251                           ;color.c: 236:     set_led_color(0b001);
  3252   0016DA  0E00               	movlw	0
  3253   0016DC  6E02               	movwf	(set_led_color@color+1)^0,c
  3254   0016DE  0E01               	movlw	1
  3255   0016E0  6E01               	movwf	set_led_color@color^0,c
  3256   0016E2  ECEC  F00E         	call	_set_led_color	;wreg free
  3257   0016E6                     
  3258                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3259   0016E6  0E12               	movlw	18
  3260   0016E8  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3261   0016EA  0EDC               	movlw	220
  3262   0016EC  6E0C               	movwf	??_calibrate_white^0,c
  3263   0016EE  0E60               	movlw	96
  3264   0016F0                     u2557:
  3265   0016F0  2EE8               	decfsz	wreg,f,c
  3266   0016F2  D7FE               	bra	u2557
  3267   0016F4  2E0C               	decfsz	??_calibrate_white^0,f,c
  3268   0016F6  D7FC               	bra	u2557
  3269   0016F8  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3270   0016FA  D7FA               	bra	u2557
  3271   0016FC                     
  3272                           ;color.c: 238:     White_setup.B = color_read_Blue();
  3273   0016FC  EC7B  F00E         	call	_color_read_Blue	;wreg free
  3274   001700  C005  F074         	movff	?_color_read_Blue,_White_setup+8
  3275   001704  C006  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3276   001708  0100               	movlb	0	; () banked
  3277   00170A  6B76               	clrf	(_White_setup+10)& (0+255),b
  3278   00170C  6B77               	clrf	(_White_setup+11)& (0+255),b
  3279   00170E                     
  3280                           ; BSR set to: 0
  3281                           ;color.c: 239:     set_led_color(0b000);
  3282   00170E  0E00               	movlw	0
  3283   001710  6E02               	movwf	(set_led_color@color+1)^0,c
  3284   001712  0E00               	movlw	0
  3285   001714  6E01               	movwf	set_led_color@color^0,c
  3286   001716  ECEC  F00E         	call	_set_led_color	;wreg free
  3287   00171A  0012               	return		;funcret
  3288   00171C                     __end_of_calibrate_white:
  3289                           	callstack 0
  3290                           
  3291 ;; *************** function _calibrate_black *****************
  3292 ;; Defined at:
  3293 ;;		line 209 in file "color.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;		None
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  clear2          2   17[COMRAM] unsigned int 
  3298 ;;  clear1          2   15[COMRAM] unsigned int 
  3299 ;; Return value:  Size  Location     Type
  3300 ;;                  1    wreg      void 
  3301 ;; Registers used:
  3302 ;;		wreg, status,2, status,0, cstack
  3303 ;; Tracked objects:
  3304 ;;		On entry : 0/0
  3305 ;;		On exit  : 0/0
  3306 ;;		Unchanged: 0/0
  3307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3309 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3311 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3312 ;;Total ram usage:        8 bytes
  3313 ;; Hardware stack levels used: 1
  3314 ;; Hardware stack levels required when called: 5
  3315 ;; This function calls:
  3316 ;;		___lwdiv
  3317 ;;		_color_read_Blue
  3318 ;;		_color_read_Clear
  3319 ;;		_color_read_Green
  3320 ;;		_color_read_Red
  3321 ;;		_set_led_color
  3322 ;; This function is called by:
  3323 ;;		_color_click_init
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text14
  3328   0011AC                     __ptext14:
  3329                           	callstack 0
  3330   0011AC                     _calibrate_black:
  3331                           	callstack 24
  3332   0011AC                     
  3333                           ;color.c: 210:     set_led_color(0b100);
  3334   0011AC  0E00               	movlw	0
  3335   0011AE  6E02               	movwf	(set_led_color@color+1)^0,c
  3336   0011B0  0E04               	movlw	4
  3337   0011B2  6E01               	movwf	set_led_color@color^0,c
  3338   0011B4  ECEC  F00E         	call	_set_led_color	;wreg free
  3339   0011B8                     
  3340                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3341   0011B8  0E12               	movlw	18
  3342   0011BA  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3343   0011BC  0EDC               	movlw	220
  3344   0011BE  6E0E               	movwf	??_calibrate_black^0,c
  3345   0011C0  0E60               	movlw	96
  3346   0011C2                     u2567:
  3347   0011C2  2EE8               	decfsz	wreg,f,c
  3348   0011C4  D7FE               	bra	u2567
  3349   0011C6  2E0E               	decfsz	??_calibrate_black^0,f,c
  3350   0011C8  D7FC               	bra	u2567
  3351   0011CA  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3352   0011CC  D7FA               	bra	u2567
  3353   0011CE                     
  3354                           ;color.c: 212:     Black_setup.R = color_read_Red();
  3355   0011CE  EC03  F00E         	call	_color_read_Red	;wreg free
  3356   0011D2  C005  F060         	movff	?_color_read_Red,_Black_setup
  3357   0011D6  C006  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3358   0011DA  0100               	movlb	0	; () banked
  3359   0011DC  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3360   0011DE  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3361   0011E0                     
  3362                           ; BSR set to: 0
  3363                           ;color.c: 213:     set_led_color(0b010);
  3364   0011E0  0E00               	movlw	0
  3365   0011E2  6E02               	movwf	(set_led_color@color+1)^0,c
  3366   0011E4  0E02               	movlw	2
  3367   0011E6  6E01               	movwf	set_led_color@color^0,c
  3368   0011E8  ECEC  F00E         	call	_set_led_color	;wreg free
  3369   0011EC                     
  3370                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3371   0011EC  0E12               	movlw	18
  3372   0011EE  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3373   0011F0  0EDC               	movlw	220
  3374   0011F2  6E0E               	movwf	??_calibrate_black^0,c
  3375   0011F4  0E60               	movlw	96
  3376   0011F6                     u2577:
  3377   0011F6  2EE8               	decfsz	wreg,f,c
  3378   0011F8  D7FE               	bra	u2577
  3379   0011FA  2E0E               	decfsz	??_calibrate_black^0,f,c
  3380   0011FC  D7FC               	bra	u2577
  3381   0011FE  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3382   001200  D7FA               	bra	u2577
  3383                           
  3384                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3385   001202  EC2B  F00E         	call	_color_read_Green	;wreg free
  3386   001206  C005  F064         	movff	?_color_read_Green,_Black_setup+4
  3387   00120A  C006  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3388   00120E  0100               	movlb	0	; () banked
  3389   001210  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3390   001212  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3391   001214                     
  3392                           ; BSR set to: 0
  3393                           ;color.c: 216:     set_led_color(0b001);
  3394   001214  0E00               	movlw	0
  3395   001216  6E02               	movwf	(set_led_color@color+1)^0,c
  3396   001218  0E01               	movlw	1
  3397   00121A  6E01               	movwf	set_led_color@color^0,c
  3398   00121C  ECEC  F00E         	call	_set_led_color	;wreg free
  3399   001220                     
  3400                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3401   001220  0E12               	movlw	18
  3402   001222  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3403   001224  0EDC               	movlw	220
  3404   001226  6E0E               	movwf	??_calibrate_black^0,c
  3405   001228  0E60               	movlw	96
  3406   00122A                     u2587:
  3407   00122A  2EE8               	decfsz	wreg,f,c
  3408   00122C  D7FE               	bra	u2587
  3409   00122E  2E0E               	decfsz	??_calibrate_black^0,f,c
  3410   001230  D7FC               	bra	u2587
  3411   001232  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3412   001234  D7FA               	bra	u2587
  3413   001236                     
  3414                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3415   001236  EC7B  F00E         	call	_color_read_Blue	;wreg free
  3416   00123A  C005  F068         	movff	?_color_read_Blue,_Black_setup+8
  3417   00123E  C006  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3418   001242  0100               	movlb	0	; () banked
  3419   001244  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3420   001246  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3421   001248                     
  3422                           ; BSR set to: 0
  3423                           ;color.c: 219:     set_led_color(0b000);
  3424   001248  0E00               	movlw	0
  3425   00124A  6E02               	movwf	(set_led_color@color+1)^0,c
  3426   00124C  0E00               	movlw	0
  3427   00124E  6E01               	movwf	set_led_color@color^0,c
  3428   001250  ECEC  F00E         	call	_set_led_color	;wreg free
  3429                           
  3430                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3431   001254  0E12               	movlw	18
  3432   001256  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3433   001258  0EDC               	movlw	220
  3434   00125A  6E0E               	movwf	??_calibrate_black^0,c
  3435   00125C  0E60               	movlw	96
  3436   00125E                     u2597:
  3437   00125E  2EE8               	decfsz	wreg,f,c
  3438   001260  D7FE               	bra	u2597
  3439   001262  2E0E               	decfsz	??_calibrate_black^0,f,c
  3440   001264  D7FC               	bra	u2597
  3441   001266  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3442   001268  D7FA               	bra	u2597
  3443   00126A                     
  3444                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3445   00126A  EC53  F00E         	call	_color_read_Clear	;wreg free
  3446   00126E  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3447   001272  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3448   001276                     
  3449                           ;color.c: 222:     set_led_color(0b111);
  3450   001276  0E00               	movlw	0
  3451   001278  6E02               	movwf	(set_led_color@color+1)^0,c
  3452   00127A  0E07               	movlw	7
  3453   00127C  6E01               	movwf	set_led_color@color^0,c
  3454   00127E  ECEC  F00E         	call	_set_led_color	;wreg free
  3455   001282                     
  3456                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3457   001282  0E12               	movlw	18
  3458   001284  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3459   001286  0EDC               	movlw	220
  3460   001288  6E0E               	movwf	??_calibrate_black^0,c
  3461   00128A  0E60               	movlw	96
  3462   00128C                     u2607:
  3463   00128C  2EE8               	decfsz	wreg,f,c
  3464   00128E  D7FE               	bra	u2607
  3465   001290  2E0E               	decfsz	??_calibrate_black^0,f,c
  3466   001292  D7FC               	bra	u2607
  3467   001294  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3468   001296  D7FA               	bra	u2607
  3469   001298                     
  3470                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3471   001298  EC53  F00E         	call	_color_read_Clear	;wreg free
  3472   00129C  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3473   0012A0  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3474                           
  3475                           ;color.c: 225:     set_led_color(0b000);
  3476   0012A4  0E00               	movlw	0
  3477   0012A6  6E02               	movwf	(set_led_color@color+1)^0,c
  3478   0012A8  0E00               	movlw	0
  3479   0012AA  6E01               	movwf	set_led_color@color^0,c
  3480   0012AC  ECEC  F00E         	call	_set_led_color	;wreg free
  3481   0012B0                     
  3482                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3483   0012B0  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3484   0012B4  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3485   0012B8  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3486   0012BC  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3487   0012C0  EC37  F00D         	call	___lwdiv	;wreg free
  3488   0012C4  C007  F014         	movff	?___lwdiv,_calibrate_black$2443
  3489   0012C8  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2443+1
  3490   0012CC                     
  3491                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3492   0012CC  C014  F007         	movff	_calibrate_black$2443,___lwdiv@dividend
  3493   0012D0  C015  F008         	movff	_calibrate_black$2443+1,___lwdiv@dividend+1
  3494   0012D4  0E00               	movlw	0
  3495   0012D6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3496   0012D8  0E05               	movlw	5
  3497   0012DA  6E09               	movwf	___lwdiv@divisor^0,c
  3498   0012DC  EC37  F00D         	call	___lwdiv	;wreg free
  3499   0012E0  C007  F059         	movff	?___lwdiv,_wall_coef
  3500   0012E4  C008  F05A         	movff	?___lwdiv+1,_wall_coef+1
  3501   0012E8  0012               	return		;funcret
  3502   0012EA                     __end_of_calibrate_black:
  3503                           	callstack 0
  3504                           
  3505 ;; *************** function _set_led_color *****************
  3506 ;; Defined at:
  3507 ;;		line 154 in file "color.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  color           2    0[COMRAM] unsigned int 
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;		None
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		None
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3521 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3524 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3525 ;;Total ram usage:        2 bytes
  3526 ;; Hardware stack levels used: 1
  3527 ;; Hardware stack levels required when called: 2
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_get_color_code
  3532 ;;		_calibrate_black
  3533 ;;		_calibrate_white
  3534 ;;		_get_wall_presence
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           	psect	text15
  3539   001DD8                     __ptext15:
  3540                           	callstack 0
  3541   001DD8                     _set_led_color:
  3542                           	callstack 27
  3543   001DD8                     
  3544                           ;color.c: 158:     if(color & 0b100){
  3545   001DD8  A401               	btfss	set_led_color@color^0,2,c
  3546   001DDA  EFF1  F00E         	goto	u1311
  3547   001DDE  EFF3  F00E         	goto	u1310
  3548   001DE2                     u1311:
  3549   001DE2  EFF6  F00E         	goto	l112
  3550   001DE6                     u1310:
  3551   001DE6                     
  3552                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3553   001DE6  827F               	bsf	127,1,c	;volatile
  3554                           
  3555                           ;color.c: 160:     }else{
  3556   001DE8  EFF7  F00E         	goto	l113
  3557   001DEC                     l112:
  3558                           
  3559                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3560   001DEC  927F               	bcf	127,1,c	;volatile
  3561   001DEE                     l113:
  3562                           
  3563                           ;color.c: 163:     if(color & 0b010){
  3564   001DEE  A201               	btfss	set_led_color@color^0,1,c
  3565   001DF0  EFFC  F00E         	goto	u1321
  3566   001DF4  EFFE  F00E         	goto	u1320
  3567   001DF8                     u1321:
  3568   001DF8  EF01  F00F         	goto	l114
  3569   001DFC                     u1320:
  3570   001DFC                     
  3571                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3572   001DFC  8879               	bsf	121,4,c	;volatile
  3573                           
  3574                           ;color.c: 165:     }else{
  3575   001DFE  EF02  F00F         	goto	l115
  3576   001E02                     l114:
  3577                           
  3578                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3579   001E02  9879               	bcf	121,4,c	;volatile
  3580   001E04                     l115:
  3581                           
  3582                           ;color.c: 168:     if(color & 0b001){
  3583   001E04  A001               	btfss	set_led_color@color^0,0,c
  3584   001E06  EF07  F00F         	goto	u1331
  3585   001E0A  EF09  F00F         	goto	u1330
  3586   001E0E                     u1331:
  3587   001E0E  EF0C  F00F         	goto	l116
  3588   001E12                     u1330:
  3589   001E12                     
  3590                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3591   001E12  8E7E               	bsf	126,7,c	;volatile
  3592                           
  3593                           ;color.c: 170:     }else{
  3594   001E14  EF0D  F00F         	goto	l118
  3595   001E18                     l116:
  3596                           
  3597                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3598   001E18  9E7E               	bcf	126,7,c	;volatile
  3599   001E1A                     l118:
  3600   001E1A  0012               	return		;funcret
  3601   001E1C                     __end_of_set_led_color:
  3602                           	callstack 0
  3603                           
  3604 ;; *************** function _color_read_Red *****************
  3605 ;; Defined at:
  3606 ;;		line 90 in file "color.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;  tmp             2    9[COMRAM] unsigned int 
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  2    4[COMRAM] unsigned int 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0, cstack
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3620 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3621 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3622 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3623 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3624 ;;Total ram usage:        7 bytes
  3625 ;; Hardware stack levels used: 1
  3626 ;; Hardware stack levels required when called: 4
  3627 ;; This function calls:
  3628 ;;		_I2C_2_Master_Read
  3629 ;;		_I2C_2_Master_RepStart
  3630 ;;		_I2C_2_Master_Start
  3631 ;;		_I2C_2_Master_Stop
  3632 ;;		_I2C_2_Master_Write
  3633 ;; This function is called by:
  3634 ;;		_get_color_code
  3635 ;;		_calibrate_black
  3636 ;;		_calibrate_white
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text16
  3641   001C06                     __ptext16:
  3642                           	callstack 0
  3643   001C06                     _color_read_Red:
  3644                           	callstack 25
  3645   001C06                     
  3646                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3647   001C06  ECAD  F00F         	call	_I2C_2_Master_Start	;wreg free
  3648                           
  3649                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3650   001C0A  0E52               	movlw	82
  3651   001C0C  EC97  F00F         	call	_I2C_2_Master_Write
  3652                           
  3653                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3654   001C10  0EB6               	movlw	182
  3655   001C12  EC97  F00F         	call	_I2C_2_Master_Write
  3656                           
  3657                           ;color.c: 96:  I2C_2_Master_RepStart();
  3658   001C16  ECB2  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3659                           
  3660                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3661   001C1A  0E53               	movlw	83
  3662   001C1C  EC97  F00F         	call	_I2C_2_Master_Write
  3663                           
  3664                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3665   001C20  0E01               	movlw	1
  3666   001C22  EC0E  F00F         	call	_I2C_2_Master_Read
  3667   001C26  6E07               	movwf	??_color_read_Red^0,c
  3668   001C28  5007               	movf	??_color_read_Red^0,w,c
  3669   001C2A  6E0A               	movwf	color_read_Red@tmp^0,c
  3670   001C2C  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3671                           
  3672                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3673   001C2E  0E00               	movlw	0
  3674   001C30  EC0E  F00F         	call	_I2C_2_Master_Read
  3675   001C34  6E07               	movwf	??_color_read_Red^0,c
  3676   001C36  5007               	movf	??_color_read_Red^0,w,c
  3677   001C38  6E09               	movwf	(??_color_read_Red+2)^0,c
  3678   001C3A  6A08               	clrf	(??_color_read_Red+1)^0,c
  3679   001C3C  500A               	movf	color_read_Red@tmp^0,w,c
  3680   001C3E  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3681   001C40  6E0A               	movwf	color_read_Red@tmp^0,c
  3682   001C42  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3683   001C44  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3684   001C46  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3685                           
  3686                           ;color.c: 100:  I2C_2_Master_Stop();
  3687   001C48  ECA8  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3688   001C4C                     
  3689                           ;color.c: 101:  return tmp;
  3690   001C4C  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3691   001C50  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3692   001C54  0012               	return		;funcret
  3693   001C56                     __end_of_color_read_Red:
  3694                           	callstack 0
  3695                           
  3696 ;; *************** function _color_read_Green *****************
  3697 ;; Defined at:
  3698 ;;		line 118 in file "color.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;		None
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  tmp             2    9[COMRAM] unsigned int 
  3703 ;; Return value:  Size  Location     Type
  3704 ;;                  2    4[COMRAM] unsigned int 
  3705 ;; Registers used:
  3706 ;;		wreg, status,2, status,0, cstack
  3707 ;; Tracked objects:
  3708 ;;		On entry : 0/0
  3709 ;;		On exit  : 0/0
  3710 ;;		Unchanged: 0/0
  3711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3712 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3715 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3716 ;;Total ram usage:        7 bytes
  3717 ;; Hardware stack levels used: 1
  3718 ;; Hardware stack levels required when called: 4
  3719 ;; This function calls:
  3720 ;;		_I2C_2_Master_Read
  3721 ;;		_I2C_2_Master_RepStart
  3722 ;;		_I2C_2_Master_Start
  3723 ;;		_I2C_2_Master_Stop
  3724 ;;		_I2C_2_Master_Write
  3725 ;; This function is called by:
  3726 ;;		_get_color_code
  3727 ;;		_calibrate_black
  3728 ;;		_calibrate_white
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text17
  3733   001C56                     __ptext17:
  3734                           	callstack 0
  3735   001C56                     _color_read_Green:
  3736                           	callstack 25
  3737   001C56                     
  3738                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3739   001C56  ECAD  F00F         	call	_I2C_2_Master_Start	;wreg free
  3740                           
  3741                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3742   001C5A  0E52               	movlw	82
  3743   001C5C  EC97  F00F         	call	_I2C_2_Master_Write
  3744                           
  3745                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3746   001C60  0EB8               	movlw	184
  3747   001C62  EC97  F00F         	call	_I2C_2_Master_Write
  3748                           
  3749                           ;color.c: 124:  I2C_2_Master_RepStart();
  3750   001C66  ECB2  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3751                           
  3752                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3753   001C6A  0E53               	movlw	83
  3754   001C6C  EC97  F00F         	call	_I2C_2_Master_Write
  3755                           
  3756                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3757   001C70  0E01               	movlw	1
  3758   001C72  EC0E  F00F         	call	_I2C_2_Master_Read
  3759   001C76  6E07               	movwf	??_color_read_Green^0,c
  3760   001C78  5007               	movf	??_color_read_Green^0,w,c
  3761   001C7A  6E0A               	movwf	color_read_Green@tmp^0,c
  3762   001C7C  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3763                           
  3764                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3765   001C7E  0E00               	movlw	0
  3766   001C80  EC0E  F00F         	call	_I2C_2_Master_Read
  3767   001C84  6E07               	movwf	??_color_read_Green^0,c
  3768   001C86  5007               	movf	??_color_read_Green^0,w,c
  3769   001C88  6E09               	movwf	(??_color_read_Green+2)^0,c
  3770   001C8A  6A08               	clrf	(??_color_read_Green+1)^0,c
  3771   001C8C  500A               	movf	color_read_Green@tmp^0,w,c
  3772   001C8E  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3773   001C90  6E0A               	movwf	color_read_Green@tmp^0,c
  3774   001C92  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3775   001C94  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3776   001C96  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3777                           
  3778                           ;color.c: 128:  I2C_2_Master_Stop();
  3779   001C98  ECA8  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3780   001C9C                     
  3781                           ;color.c: 129:  return tmp;
  3782   001C9C  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3783   001CA0  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3784   001CA4  0012               	return		;funcret
  3785   001CA6                     __end_of_color_read_Green:
  3786                           	callstack 0
  3787                           
  3788 ;; *************** function _color_read_Clear *****************
  3789 ;; Defined at:
  3790 ;;		line 132 in file "color.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  tmp             2    9[COMRAM] unsigned int 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  2    4[COMRAM] unsigned int 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3807 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3808 ;;Total ram usage:        7 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 4
  3811 ;; This function calls:
  3812 ;;		_I2C_2_Master_Read
  3813 ;;		_I2C_2_Master_RepStart
  3814 ;;		_I2C_2_Master_Start
  3815 ;;		_I2C_2_Master_Stop
  3816 ;;		_I2C_2_Master_Write
  3817 ;; This function is called by:
  3818 ;;		_calibrate_black
  3819 ;;		_get_wall_presence
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text18
  3824   001CA6                     __ptext18:
  3825                           	callstack 0
  3826   001CA6                     _color_read_Clear:
  3827                           	callstack 25
  3828   001CA6                     
  3829                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3830   001CA6  ECAD  F00F         	call	_I2C_2_Master_Start	;wreg free
  3831                           
  3832                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3833   001CAA  0E52               	movlw	82
  3834   001CAC  EC97  F00F         	call	_I2C_2_Master_Write
  3835                           
  3836                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3837   001CB0  0EB4               	movlw	180
  3838   001CB2  EC97  F00F         	call	_I2C_2_Master_Write
  3839                           
  3840                           ;color.c: 138:  I2C_2_Master_RepStart();
  3841   001CB6  ECB2  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3842                           
  3843                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3844   001CBA  0E53               	movlw	83
  3845   001CBC  EC97  F00F         	call	_I2C_2_Master_Write
  3846                           
  3847                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3848   001CC0  0E01               	movlw	1
  3849   001CC2  EC0E  F00F         	call	_I2C_2_Master_Read
  3850   001CC6  6E07               	movwf	??_color_read_Clear^0,c
  3851   001CC8  5007               	movf	??_color_read_Clear^0,w,c
  3852   001CCA  6E0A               	movwf	color_read_Clear@tmp^0,c
  3853   001CCC  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3854                           
  3855                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3856   001CCE  0E00               	movlw	0
  3857   001CD0  EC0E  F00F         	call	_I2C_2_Master_Read
  3858   001CD4  6E07               	movwf	??_color_read_Clear^0,c
  3859   001CD6  5007               	movf	??_color_read_Clear^0,w,c
  3860   001CD8  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3861   001CDA  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3862   001CDC  500A               	movf	color_read_Clear@tmp^0,w,c
  3863   001CDE  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3864   001CE0  6E0A               	movwf	color_read_Clear@tmp^0,c
  3865   001CE2  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3866   001CE4  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3867   001CE6  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3868                           
  3869                           ;color.c: 142:  I2C_2_Master_Stop();
  3870   001CE8  ECA8  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3871   001CEC                     
  3872                           ;color.c: 143:  return tmp;
  3873   001CEC  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3874   001CF0  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3875   001CF4  0012               	return		;funcret
  3876   001CF6                     __end_of_color_read_Clear:
  3877                           	callstack 0
  3878                           
  3879 ;; *************** function _color_read_Blue *****************
  3880 ;; Defined at:
  3881 ;;		line 104 in file "color.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;  tmp             2    9[COMRAM] unsigned int 
  3886 ;; Return value:  Size  Location     Type
  3887 ;;                  2    4[COMRAM] unsigned int 
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, status,0, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3895 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3896 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3897 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3898 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3899 ;;Total ram usage:        7 bytes
  3900 ;; Hardware stack levels used: 1
  3901 ;; Hardware stack levels required when called: 4
  3902 ;; This function calls:
  3903 ;;		_I2C_2_Master_Read
  3904 ;;		_I2C_2_Master_RepStart
  3905 ;;		_I2C_2_Master_Start
  3906 ;;		_I2C_2_Master_Stop
  3907 ;;		_I2C_2_Master_Write
  3908 ;; This function is called by:
  3909 ;;		_get_color_code
  3910 ;;		_calibrate_black
  3911 ;;		_calibrate_white
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text19
  3916   001CF6                     __ptext19:
  3917                           	callstack 0
  3918   001CF6                     _color_read_Blue:
  3919                           	callstack 25
  3920   001CF6                     
  3921                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3922   001CF6  ECAD  F00F         	call	_I2C_2_Master_Start	;wreg free
  3923                           
  3924                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3925   001CFA  0E52               	movlw	82
  3926   001CFC  EC97  F00F         	call	_I2C_2_Master_Write
  3927                           
  3928                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3929   001D00  0EBA               	movlw	186
  3930   001D02  EC97  F00F         	call	_I2C_2_Master_Write
  3931                           
  3932                           ;color.c: 110:  I2C_2_Master_RepStart();
  3933   001D06  ECB2  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3934                           
  3935                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3936   001D0A  0E53               	movlw	83
  3937   001D0C  EC97  F00F         	call	_I2C_2_Master_Write
  3938                           
  3939                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3940   001D10  0E01               	movlw	1
  3941   001D12  EC0E  F00F         	call	_I2C_2_Master_Read
  3942   001D16  6E07               	movwf	??_color_read_Blue^0,c
  3943   001D18  5007               	movf	??_color_read_Blue^0,w,c
  3944   001D1A  6E0A               	movwf	color_read_Blue@tmp^0,c
  3945   001D1C  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3946                           
  3947                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3948   001D1E  0E00               	movlw	0
  3949   001D20  EC0E  F00F         	call	_I2C_2_Master_Read
  3950   001D24  6E07               	movwf	??_color_read_Blue^0,c
  3951   001D26  5007               	movf	??_color_read_Blue^0,w,c
  3952   001D28  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3953   001D2A  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3954   001D2C  500A               	movf	color_read_Blue@tmp^0,w,c
  3955   001D2E  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3956   001D30  6E0A               	movwf	color_read_Blue@tmp^0,c
  3957   001D32  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3958   001D34  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3959   001D36  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3960                           
  3961                           ;color.c: 114:  I2C_2_Master_Stop();
  3962   001D38  ECA8  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3963   001D3C                     
  3964                           ;color.c: 115:  return tmp;
  3965   001D3C  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3966   001D40  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3967   001D44  0012               	return		;funcret
  3968   001D46                     __end_of_color_read_Blue:
  3969                           	callstack 0
  3970                           
  3971 ;; *************** function _I2C_2_Master_Write *****************
  3972 ;; Defined at:
  3973 ;;		line 45 in file "i2c.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  data_byte       1    wreg     unsigned char 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  data_byte       1    1[COMRAM] unsigned char 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, status,2, status,0, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3991 ;;Total ram usage:        1 bytes
  3992 ;; Hardware stack levels used: 1
  3993 ;; Hardware stack levels required when called: 3
  3994 ;; This function calls:
  3995 ;;		_I2C_2_Master_Idle
  3996 ;; This function is called by:
  3997 ;;		_color_writetoaddr
  3998 ;;		_color_read_Red
  3999 ;;		_color_read_Blue
  4000 ;;		_color_read_Green
  4001 ;;		_color_read_Clear
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text20
  4006   001F2E                     __ptext20:
  4007                           	callstack 0
  4008   001F2E                     _I2C_2_Master_Write:
  4009                           	callstack 25
  4010                           
  4011                           ;incstack = 0
  4012                           ;I2C_2_Master_Write@data_byte stored from wreg
  4013   001F2E  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  4014   001F30                     
  4015                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4016   001F30  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4017   001F34                     
  4018                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4019   001F34  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4020   001F38  0012               	return		;funcret
  4021   001F3A                     __end_of_I2C_2_Master_Write:
  4022                           	callstack 0
  4023                           
  4024 ;; *************** function _I2C_2_Master_Stop *****************
  4025 ;; Defined at:
  4026 ;;		line 39 in file "i2c.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;		None
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;		None
  4031 ;; Return value:  Size  Location     Type
  4032 ;;                  1    wreg      void 
  4033 ;; Registers used:
  4034 ;;		wreg, status,2, status,0, cstack
  4035 ;; Tracked objects:
  4036 ;;		On entry : 0/0
  4037 ;;		On exit  : 0/0
  4038 ;;		Unchanged: 0/0
  4039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4044 ;;Total ram usage:        0 bytes
  4045 ;; Hardware stack levels used: 1
  4046 ;; Hardware stack levels required when called: 3
  4047 ;; This function calls:
  4048 ;;		_I2C_2_Master_Idle
  4049 ;; This function is called by:
  4050 ;;		_color_writetoaddr
  4051 ;;		_color_read_Red
  4052 ;;		_color_read_Blue
  4053 ;;		_color_read_Green
  4054 ;;		_color_read_Clear
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text21
  4059   001F50                     __ptext21:
  4060                           	callstack 0
  4061   001F50                     _I2C_2_Master_Stop:
  4062                           	callstack 25
  4063   001F50                     
  4064                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4065   001F50  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4066   001F54                     
  4067                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4068   001F54  010E               	movlb	14	; () banked
  4069   001F56  85DA               	bsf	218,2,b	;volatile
  4070   001F58                     
  4071                           ; BSR set to: 14
  4072   001F58  0012               	return		;funcret
  4073   001F5A                     __end_of_I2C_2_Master_Stop:
  4074                           	callstack 0
  4075                           
  4076 ;; *************** function _I2C_2_Master_Start *****************
  4077 ;; Defined at:
  4078 ;;		line 27 in file "i2c.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;		None
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      void 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2, status,0, cstack
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4095 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4096 ;;Total ram usage:        0 bytes
  4097 ;; Hardware stack levels used: 1
  4098 ;; Hardware stack levels required when called: 3
  4099 ;; This function calls:
  4100 ;;		_I2C_2_Master_Idle
  4101 ;; This function is called by:
  4102 ;;		_color_writetoaddr
  4103 ;;		_color_read_Red
  4104 ;;		_color_read_Blue
  4105 ;;		_color_read_Green
  4106 ;;		_color_read_Clear
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text22
  4111   001F5A                     __ptext22:
  4112                           	callstack 0
  4113   001F5A                     _I2C_2_Master_Start:
  4114                           	callstack 25
  4115   001F5A                     
  4116                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4117   001F5A  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4118   001F5E                     
  4119                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4120   001F5E  010E               	movlb	14	; () banked
  4121   001F60  81DA               	bsf	218,0,b	;volatile
  4122   001F62                     
  4123                           ; BSR set to: 14
  4124   001F62  0012               	return		;funcret
  4125   001F64                     __end_of_I2C_2_Master_Start:
  4126                           	callstack 0
  4127                           
  4128 ;; *************** function _I2C_2_Master_RepStart *****************
  4129 ;; Defined at:
  4130 ;;		line 33 in file "i2c.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used: 1
  4150 ;; Hardware stack levels required when called: 3
  4151 ;; This function calls:
  4152 ;;		_I2C_2_Master_Idle
  4153 ;; This function is called by:
  4154 ;;		_color_read_Red
  4155 ;;		_color_read_Blue
  4156 ;;		_color_read_Green
  4157 ;;		_color_read_Clear
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text23
  4162   001F64                     __ptext23:
  4163                           	callstack 0
  4164   001F64                     _I2C_2_Master_RepStart:
  4165                           	callstack 25
  4166   001F64                     
  4167                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4168   001F64  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4169   001F68                     
  4170                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4171   001F68  010E               	movlb	14	; () banked
  4172   001F6A  83DA               	bsf	218,1,b	;volatile
  4173   001F6C                     
  4174                           ; BSR set to: 14
  4175   001F6C  0012               	return		;funcret
  4176   001F6E                     __end_of_I2C_2_Master_RepStart:
  4177                           	callstack 0
  4178                           
  4179 ;; *************** function _I2C_2_Master_Read *****************
  4180 ;; Defined at:
  4181 ;;		line 51 in file "i2c.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  ack             1    wreg     unsigned char 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  ack             1    2[COMRAM] unsigned char 
  4186 ;;  tmp             1    3[COMRAM] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      unsigned char 
  4189 ;; Registers used:
  4190 ;;		wreg, status,2, status,0, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4197 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4198 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4199 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4200 ;;Total ram usage:        3 bytes
  4201 ;; Hardware stack levels used: 1
  4202 ;; Hardware stack levels required when called: 3
  4203 ;; This function calls:
  4204 ;;		_I2C_2_Master_Idle
  4205 ;; This function is called by:
  4206 ;;		_color_read_Red
  4207 ;;		_color_read_Blue
  4208 ;;		_color_read_Green
  4209 ;;		_color_read_Clear
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           	psect	text24
  4214   001E1C                     __ptext24:
  4215                           	callstack 0
  4216   001E1C                     _I2C_2_Master_Read:
  4217                           	callstack 25
  4218                           
  4219                           ; BSR set to: 14
  4220                           ;incstack = 0
  4221                           ;I2C_2_Master_Read@ack stored from wreg
  4222   001E1C  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  4223   001E1E                     
  4224                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4225   001E1E  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4226   001E22                     
  4227                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4228   001E22  010E               	movlb	14	; () banked
  4229   001E24  87DA               	bsf	218,3,b	;volatile
  4230                           
  4231                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4232   001E26  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4233   001E2A                     
  4234                           ;i2c.c: 57:   tmp = SSP2BUF;
  4235   001E2A  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4236                           
  4237                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4238   001E2E  EC44  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4239   001E32                     
  4240                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4241   001E32  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  4242   001E34  B4D8               	btfsc	status,2,c
  4243   001E36  EF1F  F00F         	goto	u1261
  4244   001E3A  EF23  F00F         	goto	u1260
  4245   001E3E                     u1261:
  4246   001E3E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4247   001E40  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  4248   001E42  EF24  F00F         	goto	u1278
  4249   001E46                     u1260:
  4250   001E46  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4251   001E48                     u1278:
  4252   001E48  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  4253   001E4A  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  4254   001E4C  010E               	movlb	14	; () banked
  4255   001E4E  51DA               	movf	218,w,b	;volatile
  4256   001E50  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4257   001E52  0BDF               	andlw	-33
  4258   001E54  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4259   001E56  6FDA               	movwf	218,b	;volatile
  4260   001E58                     
  4261                           ; BSR set to: 14
  4262                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4263   001E58  89DA               	bsf	218,4,b	;volatile
  4264   001E5A                     
  4265                           ; BSR set to: 14
  4266                           ;i2c.c: 61:   return tmp;
  4267   001E5A  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  4268   001E5C                     
  4269                           ; BSR set to: 14
  4270   001E5C  0012               	return		;funcret
  4271   001E5E                     __end_of_I2C_2_Master_Read:
  4272                           	callstack 0
  4273                           
  4274 ;; *************** function _I2C_2_Master_Idle *****************
  4275 ;; Defined at:
  4276 ;;		line 22 in file "i2c.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, status,2, status,0
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4294 ;;Total ram usage:        1 bytes
  4295 ;; Hardware stack levels used: 1
  4296 ;; Hardware stack levels required when called: 2
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_I2C_2_Master_Start
  4301 ;;		_I2C_2_Master_RepStart
  4302 ;;		_I2C_2_Master_Stop
  4303 ;;		_I2C_2_Master_Write
  4304 ;;		_I2C_2_Master_Read
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text25
  4309   001E88                     __ptext25:
  4310                           	callstack 0
  4311   001E88                     _I2C_2_Master_Idle:
  4312                           	callstack 25
  4313   001E88                     l342:
  4314   001E88  010E               	movlb	14	; () banked
  4315   001E8A  B5D8               	btfsc	216,2,b	;volatile
  4316   001E8C  EF4A  F00F         	goto	u1241
  4317   001E90  EF4C  F00F         	goto	u1240
  4318   001E94                     u1241:
  4319   001E94  EF44  F00F         	goto	l342
  4320   001E98                     u1240:
  4321   001E98                     
  4322                           ; BSR set to: 14
  4323   001E98  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4324   001E9C  0E1F               	movlw	31
  4325   001E9E  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4326   001EA0  A4D8               	btfss	status,2,c
  4327   001EA2  EF55  F00F         	goto	u1251
  4328   001EA6  EF57  F00F         	goto	u1250
  4329   001EAA                     u1251:
  4330   001EAA  EF44  F00F         	goto	l342
  4331   001EAE                     u1250:
  4332   001EAE                     
  4333                           ; BSR set to: 14
  4334   001EAE  0012               	return		;funcret
  4335   001EB0                     __end_of_I2C_2_Master_Idle:
  4336                           	callstack 0
  4337                           
  4338 ;; *************** function _I2C_2_Master_Init *****************
  4339 ;; Defined at:
  4340 ;;		line 4 in file "i2c.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;		None
  4345 ;; Return value:  Size  Location     Type
  4346 ;;                  1    wreg      void 
  4347 ;; Registers used:
  4348 ;;		wreg, status,2
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;Total ram usage:        0 bytes
  4359 ;; Hardware stack levels used: 1
  4360 ;; Hardware stack levels required when called: 2
  4361 ;; This function calls:
  4362 ;;		Nothing
  4363 ;; This function is called by:
  4364 ;;		_color_click_init
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text26
  4369   001E5E                     __ptext26:
  4370                           	callstack 0
  4371   001E5E                     _I2C_2_Master_Init:
  4372                           	callstack 27
  4373   001E5E                     
  4374                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4375   001E5E  010E               	movlb	14	; () banked
  4376   001E60  51D9               	movf	217,w,b	;volatile
  4377   001E62  0BF0               	andlw	-16
  4378   001E64  0908               	iorlw	8
  4379   001E66  6FD9               	movwf	217,b	;volatile
  4380   001E68                     
  4381                           ; BSR set to: 14
  4382                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4383   001E68  8BD9               	bsf	217,5,b	;volatile
  4384                           
  4385                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4386   001E6A  0E9F               	movlw	159
  4387   001E6C  6FD6               	movwf	214,b	;volatile
  4388   001E6E                     
  4389                           ; BSR set to: 14
  4390                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4391   001E6E  8A84               	bsf	132,5,c	;volatile
  4392   001E70                     
  4393                           ; BSR set to: 14
  4394                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4395   001E70  8C84               	bsf	132,6,c	;volatile
  4396   001E72                     
  4397                           ; BSR set to: 14
  4398                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4399   001E72  9BA7               	bcf	167,5,b	;volatile
  4400   001E74                     
  4401                           ; BSR set to: 14
  4402                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4403   001E74  9DA7               	bcf	167,6,b	;volatile
  4404                           
  4405                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4406   001E76  0E1D               	movlw	29
  4407   001E78  6F1D               	movwf	29,b	;volatile
  4408                           
  4409                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4410   001E7A  0E1E               	movlw	30
  4411   001E7C  6F1C               	movwf	28,b	;volatile
  4412                           
  4413                           ;i2c.c: 18:   RD5PPS=0x1C;
  4414   001E7E  0E1C               	movlw	28
  4415   001E80  6F6F               	movwf	111,b	;volatile
  4416                           
  4417                           ;i2c.c: 19:   RD6PPS=0x1B;
  4418   001E82  0E1B               	movlw	27
  4419   001E84  6F70               	movwf	112,b	;volatile
  4420   001E86                     
  4421                           ; BSR set to: 14
  4422   001E86  0012               	return		;funcret
  4423   001E88                     __end_of_I2C_2_Master_Init:
  4424                           	callstack 0
  4425                           
  4426 ;; *************** function _add_seconds_to_list *****************
  4427 ;; Defined at:
  4428 ;;		line 428 in file "dc_motor.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      void 
  4435 ;; Registers used:
  4436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4446 ;;Total ram usage:        2 bytes
  4447 ;; Hardware stack levels used: 1
  4448 ;; Hardware stack levels required when called: 2
  4449 ;; This function calls:
  4450 ;;		Nothing
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456                           	psect	text27
  4457   001D90                     __ptext27:
  4458                           	callstack 0
  4459   001D90                     _add_seconds_to_list:
  4460                           	callstack 28
  4461   001D90                     
  4462                           ;dc_motor.c: 430:     if (seconds > 22)
  4463   001D90  BE56               	btfsc	(_seconds+1)^0,7,c
  4464   001D92  EFD4  F00E         	goto	u1981
  4465   001D96  5056               	movf	(_seconds+1)^0,w,c
  4466   001D98  E109               	bnz	u1980
  4467   001D9A  0E17               	movlw	23
  4468   001D9C  5C55               	subwf	_seconds^0,w,c
  4469   001D9E  A0D8               	btfss	status,0,c
  4470   001DA0  EFD4  F00E         	goto	u1981
  4471   001DA4  EFD6  F00E         	goto	u1980
  4472   001DA8                     u1981:
  4473   001DA8  EFEB  F00E         	goto	l296
  4474   001DAC                     u1980:
  4475   001DAC                     
  4476                           ;dc_motor.c: 431:     {;dc_motor.c: 432:         movement_list[index] = seconds - 11;
  4477   001DAC  0EF5               	movlw	245
  4478   001DAE  2455               	addwf	_seconds^0,w,c
  4479   001DB0  6E01               	movwf	??_add_seconds_to_list^0,c
  4480   001DB2  0EFF               	movlw	255
  4481   001DB4  2056               	addwfc	(_seconds+1)^0,w,c
  4482   001DB6  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4483   001DB8  90D8               	bcf	status,0,c
  4484   001DBA  3453               	rlcf	_index^0,w,c
  4485   001DBC  6ED9               	movwf	fsr2l,c
  4486   001DBE  3454               	rlcf	(_index+1)^0,w,c
  4487   001DC0  6EDA               	movwf	fsr2h,c
  4488   001DC2  0E00               	movlw	low _movement_list
  4489   001DC4  26D9               	addwf	fsr2l,f,c
  4490   001DC6  0E02               	movlw	high _movement_list
  4491   001DC8  22DA               	addwfc	fsr2h,f,c
  4492   001DCA  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4493   001DCE  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4494   001DD2                     
  4495                           ;dc_motor.c: 433:         index++;
  4496   001DD2  4A53               	infsnz	_index^0,f,c
  4497   001DD4  2A54               	incf	(_index+1)^0,f,c
  4498   001DD6                     l296:
  4499   001DD6  0012               	return		;funcret
  4500   001DD8                     __end_of_add_seconds_to_list:
  4501                           	callstack 0
  4502                           
  4503 ;; *************** function _Timer0_init *****************
  4504 ;; Defined at:
  4505 ;;		line 7 in file "timers.c"
  4506 ;; Parameters:    Size  Location     Type
  4507 ;;		None
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;		None
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      void 
  4512 ;; Registers used:
  4513 ;;		wreg, status,2
  4514 ;; Tracked objects:
  4515 ;;		On entry : 0/0
  4516 ;;		On exit  : 0/0
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4523 ;;Total ram usage:        0 bytes
  4524 ;; Hardware stack levels used: 1
  4525 ;; Hardware stack levels required when called: 2
  4526 ;; This function calls:
  4527 ;;		Nothing
  4528 ;; This function is called by:
  4529 ;;		_main
  4530 ;; This function uses a non-reentrant model
  4531 ;;
  4532                           
  4533                           	psect	text28
  4534   001EF6                     __ptext28:
  4535                           	callstack 0
  4536   001EF6                     _Timer0_init:
  4537                           	callstack 28
  4538   001EF6                     
  4539                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4540   001EF6  50D6               	movf	214,w,c	;volatile
  4541   001EF8  0B1F               	andlw	-225
  4542   001EFA  0940               	iorlw	64
  4543   001EFC  6ED6               	movwf	214,c	;volatile
  4544   001EFE                     
  4545                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4546   001EFE  88D6               	bsf	214,4,c	;volatile
  4547                           
  4548                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4549   001F00  50D6               	movf	214,w,c	;volatile
  4550   001F02  0BF0               	andlw	-16
  4551   001F04  0908               	iorlw	8
  4552   001F06  6ED6               	movwf	214,c	;volatile
  4553                           
  4554                           ;timers.c: 13:     TMR0H=0b11100111;
  4555   001F08  0EE7               	movlw	231
  4556   001F0A  6ED4               	movwf	212,c	;volatile
  4557                           
  4558                           ;timers.c: 14:     TMR0L=0b10010101;
  4559   001F0C  0E95               	movlw	149
  4560   001F0E  6ED3               	movwf	211,c	;volatile
  4561   001F10                     
  4562                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4563   001F10  88D5               	bsf	213,4,c	;volatile
  4564   001F12                     
  4565                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4566   001F12  8ED5               	bsf	213,7,c	;volatile
  4567   001F14  0012               	return		;funcret
  4568   001F16                     __end_of_Timer0_init:
  4569                           	callstack 0
  4570                           
  4571 ;; *************** function _RobotMovement *****************
  4572 ;; Defined at:
  4573 ;;		line 303 in file "dc_motor.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;  color           2   29[COMRAM] unsigned int 
  4576 ;;  motorL          2   31[COMRAM] PTR struct DC_motor
  4577 ;;		 -> main@motorL(9), 
  4578 ;;  motorR          2   33[COMRAM] PTR struct DC_motor
  4579 ;;		 -> main@motorR(9), 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  i               2   39[COMRAM] int 
  4582 ;;  i               2   37[COMRAM] int 
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4592 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4593 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4594 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4595 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4596 ;;Total ram usage:       12 bytes
  4597 ;; Hardware stack levels used: 1
  4598 ;; Hardware stack levels required when called: 5
  4599 ;; This function calls:
  4600 ;;		_moveBack
  4601 ;;		_stop
  4602 ;;		_turnLeft
  4603 ;;		_turnLeftLong
  4604 ;;		_turnRight
  4605 ;;		_turnRightLong
  4606 ;; This function is called by:
  4607 ;;		_main
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text29
  4612   000032                     __ptext29:
  4613                           	callstack 0
  4614   000032                     _RobotMovement:
  4615                           	callstack 25
  4616   000032                     
  4617                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 306:     if(color == 0){
  4618   000032  501E               	movf	RobotMovement@color^0,w,c
  4619   000034  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4620   000036  A4D8               	btfss	status,2,c
  4621   000038  EF20  F000         	goto	u1821
  4622   00003C  EF22  F000         	goto	u1820
  4623   000040                     u1821:
  4624   000040  EF3B  F000         	goto	l2841
  4625   000044                     u1820:
  4626   000044                     
  4627                           ;dc_motor.c: 307:         turnRight(motorL, motorR);
  4628   000044  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4629   000048  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4630   00004C  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4631   000050  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4632   000054  EC2E  F008         	call	_turnRight	;wreg free
  4633   000058                     
  4634                           ;dc_motor.c: 308:         movement_list[index] = -1;
  4635   000058  90D8               	bcf	status,0,c
  4636   00005A  3453               	rlcf	_index^0,w,c
  4637   00005C  6ED9               	movwf	fsr2l,c
  4638   00005E  3454               	rlcf	(_index+1)^0,w,c
  4639   000060  6EDA               	movwf	fsr2h,c
  4640   000062  0E00               	movlw	low _movement_list
  4641   000064  26D9               	addwf	fsr2l,f,c
  4642   000066  0E02               	movlw	high _movement_list
  4643   000068  22DA               	addwfc	fsr2h,f,c
  4644   00006A  0EFF               	movlw	255
  4645   00006C  6EDE               	movwf	postinc2,c
  4646   00006E  0EFF               	movlw	255
  4647   000070  6EDD               	movwf	postdec2,c
  4648   000072                     
  4649                           ;dc_motor.c: 309:         index++;
  4650   000072  4A53               	infsnz	_index^0,f,c
  4651   000074  2A54               	incf	(_index+1)^0,f,c
  4652   000076                     l2841:
  4653                           
  4654                           ;dc_motor.c: 312:     if(color == 1){
  4655   000076  041E               	decf	RobotMovement@color^0,w,c
  4656   000078  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4657   00007A  A4D8               	btfss	status,2,c
  4658   00007C  EF42  F000         	goto	u1831
  4659   000080  EF44  F000         	goto	u1830
  4660   000084                     u1831:
  4661   000084  EF5D  F000         	goto	l2849
  4662   000088                     u1830:
  4663   000088                     
  4664                           ;dc_motor.c: 313:         turnLeft(motorL, motorR);
  4665   000088  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4666   00008C  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4667   000090  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4668   000094  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4669   000098  EC81  F007         	call	_turnLeft	;wreg free
  4670   00009C                     
  4671                           ;dc_motor.c: 314:         movement_list[index] = -2;
  4672   00009C  90D8               	bcf	status,0,c
  4673   00009E  3453               	rlcf	_index^0,w,c
  4674   0000A0  6ED9               	movwf	fsr2l,c
  4675   0000A2  3454               	rlcf	(_index+1)^0,w,c
  4676   0000A4  6EDA               	movwf	fsr2h,c
  4677   0000A6  0E00               	movlw	low _movement_list
  4678   0000A8  26D9               	addwf	fsr2l,f,c
  4679   0000AA  0E02               	movlw	high _movement_list
  4680   0000AC  22DA               	addwfc	fsr2h,f,c
  4681   0000AE  0EFE               	movlw	254
  4682   0000B0  6EDE               	movwf	postinc2,c
  4683   0000B2  0EFF               	movlw	255
  4684   0000B4  6EDD               	movwf	postdec2,c
  4685   0000B6                     
  4686                           ;dc_motor.c: 315:         index++;
  4687   0000B6  4A53               	infsnz	_index^0,f,c
  4688   0000B8  2A54               	incf	(_index+1)^0,f,c
  4689   0000BA                     l2849:
  4690                           
  4691                           ;dc_motor.c: 318:     if(color == 2){
  4692   0000BA  0E02               	movlw	2
  4693   0000BC  181E               	xorwf	RobotMovement@color^0,w,c
  4694   0000BE  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4695   0000C0  A4D8               	btfss	status,2,c
  4696   0000C2  EF65  F000         	goto	u1841
  4697   0000C6  EF67  F000         	goto	u1840
  4698   0000CA                     u1841:
  4699   0000CA  EF94  F000         	goto	l2867
  4700   0000CE                     u1840:
  4701   0000CE                     
  4702                           ;dc_motor.c: 319:         int i;;dc_motor.c: 320:         for (i=0;i<2;i++){
  4703   0000CE  0E00               	movlw	0
  4704   0000D0  6E27               	movwf	(RobotMovement@i+1)^0,c
  4705   0000D2  0E00               	movlw	0
  4706   0000D4  6E26               	movwf	RobotMovement@i^0,c
  4707   0000D6                     l2857:
  4708                           
  4709                           ;dc_motor.c: 321:             turnRight(motorL, motorR);
  4710   0000D6  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4711   0000DA  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4712   0000DE  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4713   0000E2  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4714   0000E6  EC2E  F008         	call	_turnRight	;wreg free
  4715   0000EA                     
  4716                           ;dc_motor.c: 322:             movement_list[index] = -1;
  4717   0000EA  90D8               	bcf	status,0,c
  4718   0000EC  3453               	rlcf	_index^0,w,c
  4719   0000EE  6ED9               	movwf	fsr2l,c
  4720   0000F0  3454               	rlcf	(_index+1)^0,w,c
  4721   0000F2  6EDA               	movwf	fsr2h,c
  4722   0000F4  0E00               	movlw	low _movement_list
  4723   0000F6  26D9               	addwf	fsr2l,f,c
  4724   0000F8  0E02               	movlw	high _movement_list
  4725   0000FA  22DA               	addwfc	fsr2h,f,c
  4726   0000FC  0EFF               	movlw	255
  4727   0000FE  6EDE               	movwf	postinc2,c
  4728   000100  0EFF               	movlw	255
  4729   000102  6EDD               	movwf	postdec2,c
  4730   000104                     
  4731                           ;dc_motor.c: 323:             index++;
  4732   000104  4A53               	infsnz	_index^0,f,c
  4733   000106  2A54               	incf	(_index+1)^0,f,c
  4734   000108                     
  4735                           ;dc_motor.c: 324:         }
  4736   000108  4A26               	infsnz	RobotMovement@i^0,f,c
  4737   00010A  2A27               	incf	(RobotMovement@i+1)^0,f,c
  4738   00010C  BE27               	btfsc	(RobotMovement@i+1)^0,7,c
  4739   00010E  EF92  F000         	goto	u1851
  4740   000112  5027               	movf	(RobotMovement@i+1)^0,w,c
  4741   000114  E109               	bnz	u1850
  4742   000116  0E02               	movlw	2
  4743   000118  5C26               	subwf	RobotMovement@i^0,w,c
  4744   00011A  A0D8               	btfss	status,0,c
  4745   00011C  EF92  F000         	goto	u1851
  4746   000120  EF94  F000         	goto	u1850
  4747   000124                     u1851:
  4748   000124  EF6B  F000         	goto	l2857
  4749   000128                     u1850:
  4750   000128                     l2867:
  4751                           
  4752                           ;dc_motor.c: 327:     if(color == 3){
  4753   000128  0E03               	movlw	3
  4754   00012A  181E               	xorwf	RobotMovement@color^0,w,c
  4755   00012C  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4756   00012E  A4D8               	btfss	status,2,c
  4757   000130  EF9C  F000         	goto	u1861
  4758   000134  EF9E  F000         	goto	u1860
  4759   000138                     u1861:
  4760   000138  EF56  F001         	goto	l2887
  4761   00013C                     u1860:
  4762   00013C                     
  4763                           ;dc_motor.c: 329:         moveBack(motorL, motorR, 33);
  4764   00013C  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4765   000140  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4766   000144  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4767   000148  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4768   00014C  0E00               	movlw	0
  4769   00014E  6E19               	movwf	(moveBack@time+1)^0,c
  4770   000150  0E21               	movlw	33
  4771   000152  6E18               	movwf	moveBack@time^0,c
  4772   000154  ECFD  F00C         	call	_moveBack	;wreg free
  4773                           
  4774                           ;dc_motor.c: 330:         stop(motorL, motorR);
  4775   000158  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4776   00015C  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4777   000160  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4778   000164  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4779   000168  ECA3  F00E         	call	_stop	;wreg free
  4780                           
  4781                           ;dc_motor.c: 331:         turnRight(motorL, motorR);
  4782   00016C  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4783   000170  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4784   000174  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4785   000178  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4786   00017C  EC2E  F008         	call	_turnRight	;wreg free
  4787   000180                     
  4788                           ;dc_motor.c: 333:         if (movement_list[index-1] > 11)
  4789   000180  90D8               	bcf	status,0,c
  4790   000182  3453               	rlcf	_index^0,w,c
  4791   000184  6ED9               	movwf	fsr2l,c
  4792   000186  3454               	rlcf	(_index+1)^0,w,c
  4793   000188  6EDA               	movwf	fsr2h,c
  4794   00018A  0EFE               	movlw	low (_movement_list+65534)
  4795   00018C  26D9               	addwf	fsr2l,f,c
  4796   00018E  0E01               	movlw	high (_movement_list+65534)
  4797   000190  22DA               	addwfc	fsr2h,f,c
  4798   000192  0E01               	movlw	1
  4799   000194  BEDB               	btfsc	plusw2,7,c
  4800   000196  EFD7  F000         	goto	u1871
  4801   00019A  0E01               	movlw	1
  4802   00019C  50DB               	movf	plusw2,w,c
  4803   00019E  E109               	bnz	u1870
  4804   0001A0  0E0C               	movlw	12
  4805   0001A2  5CDE               	subwf	postinc2,w,c
  4806   0001A4  A0D8               	btfss	status,0,c
  4807   0001A6  EFD7  F000         	goto	u1871
  4808   0001AA  EFD9  F000         	goto	u1870
  4809   0001AE                     u1871:
  4810   0001AE  EFF7  F000         	goto	l2877
  4811   0001B2                     u1870:
  4812   0001B2                     
  4813                           ;dc_motor.c: 334:         {;dc_motor.c: 336:             movement_list[index-1] -= 22;
  4814   0001B2  90D8               	bcf	status,0,c
  4815   0001B4  3453               	rlcf	_index^0,w,c
  4816   0001B6  6ED9               	movwf	fsr2l,c
  4817   0001B8  3454               	rlcf	(_index+1)^0,w,c
  4818   0001BA  6EDA               	movwf	fsr2h,c
  4819   0001BC  0EFE               	movlw	low (_movement_list+65534)
  4820   0001BE  26D9               	addwf	fsr2l,f,c
  4821   0001C0  0E01               	movlw	high (_movement_list+65534)
  4822   0001C2  22DA               	addwfc	fsr2h,f,c
  4823   0001C4  0EEA               	movlw	234
  4824   0001C6  26DE               	addwf	postinc2,f,c
  4825   0001C8  0EFF               	movlw	255
  4826   0001CA  22DD               	addwfc	postdec2,f,c
  4827                           
  4828                           ;dc_motor.c: 338:             movement_list[index] = -1;
  4829   0001CC  90D8               	bcf	status,0,c
  4830   0001CE  3453               	rlcf	_index^0,w,c
  4831   0001D0  6ED9               	movwf	fsr2l,c
  4832   0001D2  3454               	rlcf	(_index+1)^0,w,c
  4833   0001D4  6EDA               	movwf	fsr2h,c
  4834   0001D6  0E00               	movlw	low _movement_list
  4835   0001D8  26D9               	addwf	fsr2l,f,c
  4836   0001DA  0E02               	movlw	high _movement_list
  4837   0001DC  22DA               	addwfc	fsr2h,f,c
  4838   0001DE  0EFF               	movlw	255
  4839   0001E0  6EDE               	movwf	postinc2,c
  4840   0001E2  0EFF               	movlw	255
  4841   0001E4  6EDD               	movwf	postdec2,c
  4842   0001E6                     
  4843                           ;dc_motor.c: 339:             index += 1;
  4844   0001E6  4A53               	infsnz	_index^0,f,c
  4845   0001E8  2A54               	incf	(_index+1)^0,f,c
  4846                           
  4847                           ;dc_motor.c: 340:         }else{
  4848   0001EA  EF56  F001         	goto	l2887
  4849   0001EE                     l2877:
  4850                           
  4851                           ;dc_motor.c: 342:             if (movement_list[index-1] == -1)
  4852   0001EE  90D8               	bcf	status,0,c
  4853   0001F0  3453               	rlcf	_index^0,w,c
  4854   0001F2  6ED9               	movwf	fsr2l,c
  4855   0001F4  3454               	rlcf	(_index+1)^0,w,c
  4856   0001F6  6EDA               	movwf	fsr2h,c
  4857   0001F8  0EFE               	movlw	low (_movement_list+65534)
  4858   0001FA  26D9               	addwf	fsr2l,f,c
  4859   0001FC  0E01               	movlw	high (_movement_list+65534)
  4860   0001FE  22DA               	addwfc	fsr2h,f,c
  4861   000200  28DE               	incf	postinc2,w,c
  4862   000202  E106               	bnz	u1881
  4863   000204  28DE               	incf	postinc2,w,c
  4864   000206  A4D8               	btfss	status,2,c
  4865   000208  EF08  F001         	goto	u1881
  4866   00020C  EF0A  F001         	goto	u1880
  4867   000210                     u1881:
  4868   000210  EF17  F001         	goto	l277
  4869   000214                     u1880:
  4870   000214                     
  4871                           ;dc_motor.c: 343:             {;dc_motor.c: 345:                 movement_list[index-1] 
      +                          = -2;
  4872   000214  90D8               	bcf	status,0,c
  4873   000216  3453               	rlcf	_index^0,w,c
  4874   000218  6ED9               	movwf	fsr2l,c
  4875   00021A  3454               	rlcf	(_index+1)^0,w,c
  4876   00021C  6EDA               	movwf	fsr2h,c
  4877   00021E  0EFE               	movlw	low (_movement_list+65534)
  4878   000220  26D9               	addwf	fsr2l,f,c
  4879   000222  0E01               	movlw	high (_movement_list+65534)
  4880   000224  22DA               	addwfc	fsr2h,f,c
  4881   000226  0EFE               	movlw	254
  4882   000228  6EDE               	movwf	postinc2,c
  4883   00022A  0EFF               	movlw	255
  4884   00022C  6EDD               	movwf	postdec2,c
  4885   00022E                     l277:
  4886                           
  4887                           ;dc_motor.c: 348:             if (movement_list[index-1] == -2)
  4888   00022E  90D8               	bcf	status,0,c
  4889   000230  3453               	rlcf	_index^0,w,c
  4890   000232  6ED9               	movwf	fsr2l,c
  4891   000234  3454               	rlcf	(_index+1)^0,w,c
  4892   000236  6EDA               	movwf	fsr2h,c
  4893   000238  0EFE               	movlw	low (_movement_list+65534)
  4894   00023A  26D9               	addwf	fsr2l,f,c
  4895   00023C  0E01               	movlw	high (_movement_list+65534)
  4896   00023E  22DA               	addwfc	fsr2h,f,c
  4897   000240  0EFE               	movlw	254
  4898   000242  18DE               	xorwf	postinc2,w,c
  4899   000244  E106               	bnz	u1891
  4900   000246  28DE               	incf	postinc2,w,c
  4901   000248  A4D8               	btfss	status,2,c
  4902   00024A  EF29  F001         	goto	u1891
  4903   00024E  EF2B  F001         	goto	u1890
  4904   000252                     u1891:
  4905   000252  EF38  F001         	goto	l278
  4906   000256                     u1890:
  4907   000256                     
  4908                           ;dc_motor.c: 349:             {;dc_motor.c: 351:                 movement_list[index-1] 
      +                          = -1;
  4909   000256  90D8               	bcf	status,0,c
  4910   000258  3453               	rlcf	_index^0,w,c
  4911   00025A  6ED9               	movwf	fsr2l,c
  4912   00025C  3454               	rlcf	(_index+1)^0,w,c
  4913   00025E  6EDA               	movwf	fsr2h,c
  4914   000260  0EFE               	movlw	low (_movement_list+65534)
  4915   000262  26D9               	addwf	fsr2l,f,c
  4916   000264  0E01               	movlw	high (_movement_list+65534)
  4917   000266  22DA               	addwfc	fsr2h,f,c
  4918   000268  0EFF               	movlw	255
  4919   00026A  6EDE               	movwf	postinc2,c
  4920   00026C  0EFF               	movlw	255
  4921   00026E  6EDD               	movwf	postdec2,c
  4922   000270                     l278:
  4923                           
  4924                           ;dc_motor.c: 354:         movement_list[index] = 22;
  4925   000270  90D8               	bcf	status,0,c
  4926   000272  3453               	rlcf	_index^0,w,c
  4927   000274  6ED9               	movwf	fsr2l,c
  4928   000276  3454               	rlcf	(_index+1)^0,w,c
  4929   000278  6EDA               	movwf	fsr2h,c
  4930   00027A  0E00               	movlw	low _movement_list
  4931   00027C  26D9               	addwf	fsr2l,f,c
  4932   00027E  0E02               	movlw	high _movement_list
  4933   000280  22DA               	addwfc	fsr2h,f,c
  4934   000282  0E16               	movlw	22
  4935   000284  6EDE               	movwf	postinc2,c
  4936   000286  0E00               	movlw	0
  4937   000288  6EDD               	movwf	postdec2,c
  4938   00028A                     
  4939                           ;dc_motor.c: 355:         index += 1;
  4940   00028A  4A53               	infsnz	_index^0,f,c
  4941   00028C  2A54               	incf	(_index+1)^0,f,c
  4942   00028E                     
  4943                           ;dc_motor.c: 357:         movement_list[index] = -2;
  4944   00028E  90D8               	bcf	status,0,c
  4945   000290  3453               	rlcf	_index^0,w,c
  4946   000292  6ED9               	movwf	fsr2l,c
  4947   000294  3454               	rlcf	(_index+1)^0,w,c
  4948   000296  6EDA               	movwf	fsr2h,c
  4949   000298  0E00               	movlw	low _movement_list
  4950   00029A  26D9               	addwf	fsr2l,f,c
  4951   00029C  0E02               	movlw	high _movement_list
  4952   00029E  22DA               	addwfc	fsr2h,f,c
  4953   0002A0  0EFE               	movlw	254
  4954   0002A2  6EDE               	movwf	postinc2,c
  4955   0002A4  0EFF               	movlw	255
  4956   0002A6  6EDD               	movwf	postdec2,c
  4957                           
  4958                           ;dc_motor.c: 358:         index += 1;
  4959   0002A8  4A53               	infsnz	_index^0,f,c
  4960   0002AA  2A54               	incf	(_index+1)^0,f,c
  4961   0002AC                     l2887:
  4962                           
  4963                           ;dc_motor.c: 363:     if(color == 4){
  4964   0002AC  0E04               	movlw	4
  4965   0002AE  181E               	xorwf	RobotMovement@color^0,w,c
  4966   0002B0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4967   0002B2  A4D8               	btfss	status,2,c
  4968   0002B4  EF5E  F001         	goto	u1901
  4969   0002B8  EF60  F001         	goto	u1900
  4970   0002BC                     u1901:
  4971   0002BC  EF18  F002         	goto	l2907
  4972   0002C0                     u1900:
  4973   0002C0                     
  4974                           ;dc_motor.c: 365:         moveBack(motorL, motorR, 33);
  4975   0002C0  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4976   0002C4  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4977   0002C8  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4978   0002CC  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4979   0002D0  0E00               	movlw	0
  4980   0002D2  6E19               	movwf	(moveBack@time+1)^0,c
  4981   0002D4  0E21               	movlw	33
  4982   0002D6  6E18               	movwf	moveBack@time^0,c
  4983   0002D8  ECFD  F00C         	call	_moveBack	;wreg free
  4984                           
  4985                           ;dc_motor.c: 366:         stop(motorL, motorR);
  4986   0002DC  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4987   0002E0  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4988   0002E4  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4989   0002E8  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4990   0002EC  ECA3  F00E         	call	_stop	;wreg free
  4991                           
  4992                           ;dc_motor.c: 367:         turnLeft(motorL, motorR);
  4993   0002F0  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4994   0002F4  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4995   0002F8  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4996   0002FC  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4997   000300  EC81  F007         	call	_turnLeft	;wreg free
  4998   000304                     
  4999                           ;dc_motor.c: 369:         if (movement_list[index-1] > 11)
  5000   000304  90D8               	bcf	status,0,c
  5001   000306  3453               	rlcf	_index^0,w,c
  5002   000308  6ED9               	movwf	fsr2l,c
  5003   00030A  3454               	rlcf	(_index+1)^0,w,c
  5004   00030C  6EDA               	movwf	fsr2h,c
  5005   00030E  0EFE               	movlw	low (_movement_list+65534)
  5006   000310  26D9               	addwf	fsr2l,f,c
  5007   000312  0E01               	movlw	high (_movement_list+65534)
  5008   000314  22DA               	addwfc	fsr2h,f,c
  5009   000316  0E01               	movlw	1
  5010   000318  BEDB               	btfsc	plusw2,7,c
  5011   00031A  EF99  F001         	goto	u1911
  5012   00031E  0E01               	movlw	1
  5013   000320  50DB               	movf	plusw2,w,c
  5014   000322  E109               	bnz	u1910
  5015   000324  0E0C               	movlw	12
  5016   000326  5CDE               	subwf	postinc2,w,c
  5017   000328  A0D8               	btfss	status,0,c
  5018   00032A  EF99  F001         	goto	u1911
  5019   00032E  EF9B  F001         	goto	u1910
  5020   000332                     u1911:
  5021   000332  EFB9  F001         	goto	l2897
  5022   000336                     u1910:
  5023   000336                     
  5024                           ;dc_motor.c: 370:         {;dc_motor.c: 372:             movement_list[index-1] -= 22;
  5025   000336  90D8               	bcf	status,0,c
  5026   000338  3453               	rlcf	_index^0,w,c
  5027   00033A  6ED9               	movwf	fsr2l,c
  5028   00033C  3454               	rlcf	(_index+1)^0,w,c
  5029   00033E  6EDA               	movwf	fsr2h,c
  5030   000340  0EFE               	movlw	low (_movement_list+65534)
  5031   000342  26D9               	addwf	fsr2l,f,c
  5032   000344  0E01               	movlw	high (_movement_list+65534)
  5033   000346  22DA               	addwfc	fsr2h,f,c
  5034   000348  0EEA               	movlw	234
  5035   00034A  26DE               	addwf	postinc2,f,c
  5036   00034C  0EFF               	movlw	255
  5037   00034E  22DD               	addwfc	postdec2,f,c
  5038                           
  5039                           ;dc_motor.c: 374:             movement_list[index] = -2;
  5040   000350  90D8               	bcf	status,0,c
  5041   000352  3453               	rlcf	_index^0,w,c
  5042   000354  6ED9               	movwf	fsr2l,c
  5043   000356  3454               	rlcf	(_index+1)^0,w,c
  5044   000358  6EDA               	movwf	fsr2h,c
  5045   00035A  0E00               	movlw	low _movement_list
  5046   00035C  26D9               	addwf	fsr2l,f,c
  5047   00035E  0E02               	movlw	high _movement_list
  5048   000360  22DA               	addwfc	fsr2h,f,c
  5049   000362  0EFE               	movlw	254
  5050   000364  6EDE               	movwf	postinc2,c
  5051   000366  0EFF               	movlw	255
  5052   000368  6EDD               	movwf	postdec2,c
  5053   00036A                     
  5054                           ;dc_motor.c: 375:             index += 1;
  5055   00036A  4A53               	infsnz	_index^0,f,c
  5056   00036C  2A54               	incf	(_index+1)^0,f,c
  5057                           
  5058                           ;dc_motor.c: 376:         }else{
  5059   00036E  EF18  F002         	goto	l2907
  5060   000372                     l2897:
  5061                           
  5062                           ;dc_motor.c: 378:             if (movement_list[index-1] == -1)
  5063   000372  90D8               	bcf	status,0,c
  5064   000374  3453               	rlcf	_index^0,w,c
  5065   000376  6ED9               	movwf	fsr2l,c
  5066   000378  3454               	rlcf	(_index+1)^0,w,c
  5067   00037A  6EDA               	movwf	fsr2h,c
  5068   00037C  0EFE               	movlw	low (_movement_list+65534)
  5069   00037E  26D9               	addwf	fsr2l,f,c
  5070   000380  0E01               	movlw	high (_movement_list+65534)
  5071   000382  22DA               	addwfc	fsr2h,f,c
  5072   000384  28DE               	incf	postinc2,w,c
  5073   000386  E106               	bnz	u1921
  5074   000388  28DE               	incf	postinc2,w,c
  5075   00038A  A4D8               	btfss	status,2,c
  5076   00038C  EFCA  F001         	goto	u1921
  5077   000390  EFCC  F001         	goto	u1920
  5078   000394                     u1921:
  5079   000394  EFD9  F001         	goto	l282
  5080   000398                     u1920:
  5081   000398                     
  5082                           ;dc_motor.c: 379:             {;dc_motor.c: 381:                 movement_list[index-1] 
      +                          = -2;
  5083   000398  90D8               	bcf	status,0,c
  5084   00039A  3453               	rlcf	_index^0,w,c
  5085   00039C  6ED9               	movwf	fsr2l,c
  5086   00039E  3454               	rlcf	(_index+1)^0,w,c
  5087   0003A0  6EDA               	movwf	fsr2h,c
  5088   0003A2  0EFE               	movlw	low (_movement_list+65534)
  5089   0003A4  26D9               	addwf	fsr2l,f,c
  5090   0003A6  0E01               	movlw	high (_movement_list+65534)
  5091   0003A8  22DA               	addwfc	fsr2h,f,c
  5092   0003AA  0EFE               	movlw	254
  5093   0003AC  6EDE               	movwf	postinc2,c
  5094   0003AE  0EFF               	movlw	255
  5095   0003B0  6EDD               	movwf	postdec2,c
  5096   0003B2                     l282:
  5097                           
  5098                           ;dc_motor.c: 384:             if (movement_list[index-1] == -2)
  5099   0003B2  90D8               	bcf	status,0,c
  5100   0003B4  3453               	rlcf	_index^0,w,c
  5101   0003B6  6ED9               	movwf	fsr2l,c
  5102   0003B8  3454               	rlcf	(_index+1)^0,w,c
  5103   0003BA  6EDA               	movwf	fsr2h,c
  5104   0003BC  0EFE               	movlw	low (_movement_list+65534)
  5105   0003BE  26D9               	addwf	fsr2l,f,c
  5106   0003C0  0E01               	movlw	high (_movement_list+65534)
  5107   0003C2  22DA               	addwfc	fsr2h,f,c
  5108   0003C4  0EFE               	movlw	254
  5109   0003C6  18DE               	xorwf	postinc2,w,c
  5110   0003C8  E106               	bnz	u1931
  5111   0003CA  28DE               	incf	postinc2,w,c
  5112   0003CC  A4D8               	btfss	status,2,c
  5113   0003CE  EFEB  F001         	goto	u1931
  5114   0003D2  EFED  F001         	goto	u1930
  5115   0003D6                     u1931:
  5116   0003D6  EFFA  F001         	goto	l283
  5117   0003DA                     u1930:
  5118   0003DA                     
  5119                           ;dc_motor.c: 385:             {;dc_motor.c: 387:                 movement_list[index-1] 
      +                          = -1;
  5120   0003DA  90D8               	bcf	status,0,c
  5121   0003DC  3453               	rlcf	_index^0,w,c
  5122   0003DE  6ED9               	movwf	fsr2l,c
  5123   0003E0  3454               	rlcf	(_index+1)^0,w,c
  5124   0003E2  6EDA               	movwf	fsr2h,c
  5125   0003E4  0EFE               	movlw	low (_movement_list+65534)
  5126   0003E6  26D9               	addwf	fsr2l,f,c
  5127   0003E8  0E01               	movlw	high (_movement_list+65534)
  5128   0003EA  22DA               	addwfc	fsr2h,f,c
  5129   0003EC  0EFF               	movlw	255
  5130   0003EE  6EDE               	movwf	postinc2,c
  5131   0003F0  0EFF               	movlw	255
  5132   0003F2  6EDD               	movwf	postdec2,c
  5133   0003F4                     l283:
  5134                           
  5135                           ;dc_motor.c: 390:         movement_list[index] = 22;
  5136   0003F4  90D8               	bcf	status,0,c
  5137   0003F6  3453               	rlcf	_index^0,w,c
  5138   0003F8  6ED9               	movwf	fsr2l,c
  5139   0003FA  3454               	rlcf	(_index+1)^0,w,c
  5140   0003FC  6EDA               	movwf	fsr2h,c
  5141   0003FE  0E00               	movlw	low _movement_list
  5142   000400  26D9               	addwf	fsr2l,f,c
  5143   000402  0E02               	movlw	high _movement_list
  5144   000404  22DA               	addwfc	fsr2h,f,c
  5145   000406  0E16               	movlw	22
  5146   000408  6EDE               	movwf	postinc2,c
  5147   00040A  0E00               	movlw	0
  5148   00040C  6EDD               	movwf	postdec2,c
  5149   00040E                     
  5150                           ;dc_motor.c: 391:         index += 1;
  5151   00040E  4A53               	infsnz	_index^0,f,c
  5152   000410  2A54               	incf	(_index+1)^0,f,c
  5153   000412                     
  5154                           ;dc_motor.c: 393:         movement_list[index] = -1;
  5155   000412  90D8               	bcf	status,0,c
  5156   000414  3453               	rlcf	_index^0,w,c
  5157   000416  6ED9               	movwf	fsr2l,c
  5158   000418  3454               	rlcf	(_index+1)^0,w,c
  5159   00041A  6EDA               	movwf	fsr2h,c
  5160   00041C  0E00               	movlw	low _movement_list
  5161   00041E  26D9               	addwf	fsr2l,f,c
  5162   000420  0E02               	movlw	high _movement_list
  5163   000422  22DA               	addwfc	fsr2h,f,c
  5164   000424  0EFF               	movlw	255
  5165   000426  6EDE               	movwf	postinc2,c
  5166   000428  0EFF               	movlw	255
  5167   00042A  6EDD               	movwf	postdec2,c
  5168                           
  5169                           ;dc_motor.c: 394:         index += 1;
  5170   00042C  4A53               	infsnz	_index^0,f,c
  5171   00042E  2A54               	incf	(_index+1)^0,f,c
  5172   000430                     l2907:
  5173                           
  5174                           ;dc_motor.c: 398:     if(color == 5){
  5175   000430  0E05               	movlw	5
  5176   000432  181E               	xorwf	RobotMovement@color^0,w,c
  5177   000434  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5178   000436  A4D8               	btfss	status,2,c
  5179   000438  EF20  F002         	goto	u1941
  5180   00043C  EF22  F002         	goto	u1940
  5181   000440                     u1941:
  5182   000440  EF3B  F002         	goto	l2915
  5183   000444                     u1940:
  5184   000444                     
  5185                           ;dc_motor.c: 399:         turnRightLong(motorL, motorR);
  5186   000444  C020  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  5187   000448  C021  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5188   00044C  C022  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  5189   000450  C023  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5190   000454  EC11  F00A         	call	_turnRightLong	;wreg free
  5191   000458                     
  5192                           ;dc_motor.c: 400:         movement_list[index] = -3;
  5193   000458  90D8               	bcf	status,0,c
  5194   00045A  3453               	rlcf	_index^0,w,c
  5195   00045C  6ED9               	movwf	fsr2l,c
  5196   00045E  3454               	rlcf	(_index+1)^0,w,c
  5197   000460  6EDA               	movwf	fsr2h,c
  5198   000462  0E00               	movlw	low _movement_list
  5199   000464  26D9               	addwf	fsr2l,f,c
  5200   000466  0E02               	movlw	high _movement_list
  5201   000468  22DA               	addwfc	fsr2h,f,c
  5202   00046A  0EFD               	movlw	253
  5203   00046C  6EDE               	movwf	postinc2,c
  5204   00046E  0EFF               	movlw	255
  5205   000470  6EDD               	movwf	postdec2,c
  5206   000472                     
  5207                           ;dc_motor.c: 401:         index += 1;
  5208   000472  4A53               	infsnz	_index^0,f,c
  5209   000474  2A54               	incf	(_index+1)^0,f,c
  5210   000476                     l2915:
  5211                           
  5212                           ;dc_motor.c: 404:     if(color == 6){
  5213   000476  0E06               	movlw	6
  5214   000478  181E               	xorwf	RobotMovement@color^0,w,c
  5215   00047A  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5216   00047C  A4D8               	btfss	status,2,c
  5217   00047E  EF43  F002         	goto	u1951
  5218   000482  EF45  F002         	goto	u1950
  5219   000486                     u1951:
  5220   000486  EF5E  F002         	goto	l2923
  5221   00048A                     u1950:
  5222   00048A                     
  5223                           ;dc_motor.c: 405:         turnLeftLong(motorL, motorR);
  5224   00048A  C020  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  5225   00048E  C021  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5226   000492  C022  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  5227   000496  C023  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5228   00049A  ECA5  F00A         	call	_turnLeftLong	;wreg free
  5229   00049E                     
  5230                           ;dc_motor.c: 406:         movement_list[index] = -4;
  5231   00049E  90D8               	bcf	status,0,c
  5232   0004A0  3453               	rlcf	_index^0,w,c
  5233   0004A2  6ED9               	movwf	fsr2l,c
  5234   0004A4  3454               	rlcf	(_index+1)^0,w,c
  5235   0004A6  6EDA               	movwf	fsr2h,c
  5236   0004A8  0E00               	movlw	low _movement_list
  5237   0004AA  26D9               	addwf	fsr2l,f,c
  5238   0004AC  0E02               	movlw	high _movement_list
  5239   0004AE  22DA               	addwfc	fsr2h,f,c
  5240   0004B0  0EFC               	movlw	252
  5241   0004B2  6EDE               	movwf	postinc2,c
  5242   0004B4  0EFF               	movlw	255
  5243   0004B6  6EDD               	movwf	postdec2,c
  5244   0004B8                     
  5245                           ;dc_motor.c: 407:         index += 1;
  5246   0004B8  4A53               	infsnz	_index^0,f,c
  5247   0004BA  2A54               	incf	(_index+1)^0,f,c
  5248   0004BC                     l2923:
  5249                           
  5250                           ;dc_motor.c: 410:     if(color == 7){
  5251   0004BC  0E07               	movlw	7
  5252   0004BE  181E               	xorwf	RobotMovement@color^0,w,c
  5253   0004C0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5254   0004C2  A4D8               	btfss	status,2,c
  5255   0004C4  EF66  F002         	goto	u1961
  5256   0004C8  EF68  F002         	goto	u1960
  5257   0004CC                     u1961:
  5258   0004CC  EF8A  F002         	goto	l289
  5259   0004D0                     u1960:
  5260   0004D0                     
  5261                           ;dc_motor.c: 411:         int i;;dc_motor.c: 412:         for (i=0;i<2;i++)
  5262   0004D0  0E00               	movlw	0
  5263   0004D2  6E29               	movwf	(RobotMovement@i_1265+1)^0,c
  5264   0004D4  0E00               	movlw	0
  5265   0004D6  6E28               	movwf	RobotMovement@i_1265^0,c
  5266   0004D8                     l2931:
  5267                           
  5268                           ;dc_motor.c: 413:         {;dc_motor.c: 414:             turnRight(motorL, motorR);
  5269   0004D8  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  5270   0004DC  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5271   0004E0  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  5272   0004E4  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5273   0004E8  EC2E  F008         	call	_turnRight	;wreg free
  5274   0004EC                     
  5275                           ;dc_motor.c: 415:         }
  5276   0004EC  4A28               	infsnz	RobotMovement@i_1265^0,f,c
  5277   0004EE  2A29               	incf	(RobotMovement@i_1265+1)^0,f,c
  5278   0004F0  BE29               	btfsc	(RobotMovement@i_1265+1)^0,7,c
  5279   0004F2  EF84  F002         	goto	u1971
  5280   0004F6  5029               	movf	(RobotMovement@i_1265+1)^0,w,c
  5281   0004F8  E109               	bnz	u1970
  5282   0004FA  0E02               	movlw	2
  5283   0004FC  5C28               	subwf	RobotMovement@i_1265^0,w,c
  5284   0004FE  A0D8               	btfss	status,0,c
  5285   000500  EF84  F002         	goto	u1971
  5286   000504  EF86  F002         	goto	u1970
  5287   000508                     u1971:
  5288   000508  EF6C  F002         	goto	l2931
  5289   00050C                     u1970:
  5290   00050C                     
  5291                           ;dc_motor.c: 417:         state = 1;
  5292   00050C  0E00               	movlw	0
  5293   00050E  6E52               	movwf	(_state+1)^0,c
  5294   000510  0E01               	movlw	1
  5295   000512  6E51               	movwf	_state^0,c
  5296   000514                     l289:
  5297   000514  0012               	return		;funcret
  5298   000516                     __end_of_RobotMovement:
  5299                           	callstack 0
  5300                           
  5301 ;; *************** function _turnRightLong *****************
  5302 ;; Defined at:
  5303 ;;		line 231 in file "dc_motor.c"
  5304 ;; Parameters:    Size  Location     Type
  5305 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5306 ;;		 -> main@motorL(9), 
  5307 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5308 ;;		 -> main@motorR(9), 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  i               2   25[COMRAM] int 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5320 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5323 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5324 ;;Total ram usage:        8 bytes
  5325 ;; Hardware stack levels used: 1
  5326 ;; Hardware stack levels required when called: 4
  5327 ;; This function calls:
  5328 ;;		_setMotorPWM
  5329 ;; This function is called by:
  5330 ;;		_RobotMovement
  5331 ;;		_return_back
  5332 ;; This function uses a non-reentrant model
  5333 ;;
  5334                           
  5335                           	psect	text30
  5336   001422                     __ptext30:
  5337                           	callstack 0
  5338   001422                     _turnRightLong:
  5339                           	callstack 25
  5340   001422                     
  5341                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5342   001422  0E00               	movlw	0
  5343   001424  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5344   001426  0E19               	movlw	25
  5345   001428  6E1A               	movwf	turnRightLong@i^0,c
  5346   00142A                     l2569:
  5347                           
  5348                           ;dc_motor.c: 236:     (*mL).direction=0;
  5349   00142A  EE20 F001          	lfsr	2,1
  5350   00142E  5014               	movf	turnRightLong@mL^0,w,c
  5351   001430  26D9               	addwf	fsr2l,f,c
  5352   001432  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5353   001434  22DA               	addwfc	fsr2h,f,c
  5354   001436  0E00               	movlw	0
  5355   001438  6EDF               	movwf	indf2,c
  5356                           
  5357                           ;dc_motor.c: 237:     (*mR).direction=1;
  5358   00143A  EE20 F001          	lfsr	2,1
  5359   00143E  5016               	movf	turnRightLong@mR^0,w,c
  5360   001440  26D9               	addwf	fsr2l,f,c
  5361   001442  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5362   001444  22DA               	addwfc	fsr2h,f,c
  5363   001446  0E01               	movlw	1
  5364   001448  6EDF               	movwf	indf2,c
  5365   00144A                     
  5366                           ;dc_motor.c: 238:     (*mL).power=i;
  5367   00144A  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5368   00144E  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5369   001452  C01A  FFDF         	movff	turnRightLong@i,indf2
  5370   001456                     
  5371                           ;dc_motor.c: 239:     (*mR).power=i;
  5372   001456  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5373   00145A  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5374   00145E  C01A  FFDF         	movff	turnRightLong@i,indf2
  5375   001462                     
  5376                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5377   001462  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5378   001466  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5379   00146A  ECCB  F006         	call	_setMotorPWM	;wreg free
  5380   00146E                     
  5381                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5382   00146E  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5383   001472  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5384   001476  ECCB  F006         	call	_setMotorPWM	;wreg free
  5385   00147A                     
  5386                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5387   00147A  0E0E               	movlw	14
  5388   00147C  6E19               	movwf	(??_turnRightLong+1)^0,c
  5389   00147E  0E12               	movlw	18
  5390   001480  6E18               	movwf	??_turnRightLong^0,c
  5391   001482  0E69               	movlw	105
  5392   001484                     u2617:
  5393   001484  2EE8               	decfsz	wreg,f,c
  5394   001486  D7FE               	bra	u2617
  5395   001488  2E18               	decfsz	??_turnRightLong^0,f,c
  5396   00148A  D7FC               	bra	u2617
  5397   00148C  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5398   00148E  D7FA               	bra	u2617
  5399   001490  F000               	nop	
  5400   001492                     
  5401                           ;dc_motor.c: 243:     }
  5402   001492  0E05               	movlw	5
  5403   001494  261A               	addwf	turnRightLong@i^0,f,c
  5404   001496  0E00               	movlw	0
  5405   001498  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5406   00149A  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5407   00149C  EF59  F00A         	goto	u1471
  5408   0014A0  501B               	movf	(turnRightLong@i+1)^0,w,c
  5409   0014A2  E109               	bnz	u1470
  5410   0014A4  0E28               	movlw	40
  5411   0014A6  5C1A               	subwf	turnRightLong@i^0,w,c
  5412   0014A8  A0D8               	btfss	status,0,c
  5413   0014AA  EF59  F00A         	goto	u1471
  5414   0014AE  EF5B  F00A         	goto	u1470
  5415   0014B2                     u1471:
  5416   0014B2  EF15  F00A         	goto	l2569
  5417   0014B6                     u1470:
  5418   0014B6                     
  5419                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5420   0014B6  0E00               	movlw	0
  5421   0014B8  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5422   0014BA  0E1E               	movlw	30
  5423   0014BC  6E1A               	movwf	turnRightLong@i^0,c
  5424   0014BE                     l2591:
  5425                           
  5426                           ;dc_motor.c: 245:     (*mL).direction=0;
  5427   0014BE  EE20 F001          	lfsr	2,1
  5428   0014C2  5014               	movf	turnRightLong@mL^0,w,c
  5429   0014C4  26D9               	addwf	fsr2l,f,c
  5430   0014C6  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5431   0014C8  22DA               	addwfc	fsr2h,f,c
  5432   0014CA  0E00               	movlw	0
  5433   0014CC  6EDF               	movwf	indf2,c
  5434                           
  5435                           ;dc_motor.c: 246:     (*mR).direction=1;
  5436   0014CE  EE20 F001          	lfsr	2,1
  5437   0014D2  5016               	movf	turnRightLong@mR^0,w,c
  5438   0014D4  26D9               	addwf	fsr2l,f,c
  5439   0014D6  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5440   0014D8  22DA               	addwfc	fsr2h,f,c
  5441   0014DA  0E01               	movlw	1
  5442   0014DC  6EDF               	movwf	indf2,c
  5443   0014DE                     
  5444                           ;dc_motor.c: 247:     (*mL).power=i;
  5445   0014DE  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5446   0014E2  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5447   0014E6  C01A  FFDF         	movff	turnRightLong@i,indf2
  5448   0014EA                     
  5449                           ;dc_motor.c: 248:     (*mR).power=i;
  5450   0014EA  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5451   0014EE  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5452   0014F2  C01A  FFDF         	movff	turnRightLong@i,indf2
  5453   0014F6                     
  5454                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5455   0014F6  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5456   0014FA  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5457   0014FE  ECCB  F006         	call	_setMotorPWM	;wreg free
  5458   001502                     
  5459                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5460   001502  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5461   001506  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5462   00150A  ECCB  F006         	call	_setMotorPWM	;wreg free
  5463   00150E                     
  5464                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5465   00150E  0E0D               	movlw	13
  5466   001510  6E19               	movwf	(??_turnRightLong+1)^0,c
  5467   001512  0EBF               	movlw	191
  5468   001514  6E18               	movwf	??_turnRightLong^0,c
  5469   001516  0E4C               	movlw	76
  5470   001518                     u2627:
  5471   001518  2EE8               	decfsz	wreg,f,c
  5472   00151A  D7FE               	bra	u2627
  5473   00151C  2E18               	decfsz	??_turnRightLong^0,f,c
  5474   00151E  D7FC               	bra	u2627
  5475   001520  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5476   001522  D7FA               	bra	u2627
  5477   001524                     
  5478                           ;dc_motor.c: 253:     }
  5479   001524  0EFB               	movlw	251
  5480   001526  261A               	addwf	turnRightLong@i^0,f,c
  5481   001528  0EFF               	movlw	255
  5482   00152A  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5483   00152C  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5484   00152E  EFA4  F00A         	goto	u1480
  5485   001532  501B               	movf	(turnRightLong@i+1)^0,w,c
  5486   001534  E107               	bnz	u1481
  5487   001536  0E10               	movlw	16
  5488   001538  5C1A               	subwf	turnRightLong@i^0,w,c
  5489   00153A  B0D8               	btfsc	status,0,c
  5490   00153C  EFA2  F00A         	goto	u1481
  5491   001540  EFA4  F00A         	goto	u1480
  5492   001544                     u1481:
  5493   001544  EF5F  F00A         	goto	l2591
  5494   001548                     u1480:
  5495   001548  0012               	return		;funcret
  5496   00154A                     __end_of_turnRightLong:
  5497                           	callstack 0
  5498                           
  5499 ;; *************** function _turnRight *****************
  5500 ;; Defined at:
  5501 ;;		line 154 in file "dc_motor.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5504 ;;		 -> main@motorL(9), 
  5505 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5506 ;;		 -> main@motorR(9), 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  i               2   27[COMRAM] int 
  5509 ;;  k               2   25[COMRAM] int 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      void 
  5512 ;; Registers used:
  5513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5519 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5520 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5523 ;;Total ram usage:       10 bytes
  5524 ;; Hardware stack levels used: 1
  5525 ;; Hardware stack levels required when called: 4
  5526 ;; This function calls:
  5527 ;;		_setMotorPWM
  5528 ;; This function is called by:
  5529 ;;		_RobotMovement
  5530 ;;		_return_back
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text31
  5535   00105C                     __ptext31:
  5536                           	callstack 0
  5537   00105C                     _turnRight:
  5538                           	callstack 25
  5539   00105C                     
  5540                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5541   00105C  0E00               	movlw	0
  5542   00105E  6E1B               	movwf	(turnRight@k+1)^0,c
  5543   001060  0E00               	movlw	0
  5544   001062  6E1A               	movwf	turnRight@k^0,c
  5545   001064                     l2471:
  5546                           
  5547                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5548   001064  0E00               	movlw	0
  5549   001066  6E1D               	movwf	(turnRight@i+1)^0,c
  5550   001068  0E1B               	movlw	27
  5551   00106A  6E1C               	movwf	turnRight@i^0,c
  5552   00106C                     l2477:
  5553                           
  5554                           ;dc_motor.c: 185:         (*mL).direction=0;
  5555   00106C  EE20 F001          	lfsr	2,1
  5556   001070  5014               	movf	turnRight@mL^0,w,c
  5557   001072  26D9               	addwf	fsr2l,f,c
  5558   001074  5015               	movf	(turnRight@mL+1)^0,w,c
  5559   001076  22DA               	addwfc	fsr2h,f,c
  5560   001078  0E00               	movlw	0
  5561   00107A  6EDF               	movwf	indf2,c
  5562                           
  5563                           ;dc_motor.c: 186:         (*mR).direction=1;
  5564   00107C  EE20 F001          	lfsr	2,1
  5565   001080  5016               	movf	turnRight@mR^0,w,c
  5566   001082  26D9               	addwf	fsr2l,f,c
  5567   001084  5017               	movf	(turnRight@mR+1)^0,w,c
  5568   001086  22DA               	addwfc	fsr2h,f,c
  5569   001088  0E01               	movlw	1
  5570   00108A  6EDF               	movwf	indf2,c
  5571   00108C                     
  5572                           ;dc_motor.c: 187:         (*mL).power=i;
  5573   00108C  C014  FFD9         	movff	turnRight@mL,fsr2l
  5574   001090  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5575   001094  C01C  FFDF         	movff	turnRight@i,indf2
  5576   001098                     
  5577                           ;dc_motor.c: 188:         (*mR).power=i;
  5578   001098  C016  FFD9         	movff	turnRight@mR,fsr2l
  5579   00109C  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5580   0010A0  C01C  FFDF         	movff	turnRight@i,indf2
  5581   0010A4                     
  5582                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5583   0010A4  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5584   0010A8  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5585   0010AC  ECCB  F006         	call	_setMotorPWM	;wreg free
  5586   0010B0                     
  5587                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5588   0010B0  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5589   0010B4  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5590   0010B8  ECCB  F006         	call	_setMotorPWM	;wreg free
  5591   0010BC                     
  5592                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5593   0010BC  0E09               	movlw	9
  5594   0010BE  6E19               	movwf	(??_turnRight+1)^0,c
  5595   0010C0  0EB0               	movlw	176
  5596   0010C2  6E18               	movwf	??_turnRight^0,c
  5597   0010C4  0E58               	movlw	88
  5598   0010C6                     u2637:
  5599   0010C6  2EE8               	decfsz	wreg,f,c
  5600   0010C8  D7FE               	bra	u2637
  5601   0010CA  2E18               	decfsz	??_turnRight^0,f,c
  5602   0010CC  D7FC               	bra	u2637
  5603   0010CE  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5604   0010D0  D7FA               	bra	u2637
  5605   0010D2  D000               	nop2	
  5606   0010D4                     
  5607                           ;dc_motor.c: 192:         }
  5608   0010D4  0E05               	movlw	5
  5609   0010D6  261C               	addwf	turnRight@i^0,f,c
  5610   0010D8  0E00               	movlw	0
  5611   0010DA  221D               	addwfc	(turnRight@i+1)^0,f,c
  5612   0010DC  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5613   0010DE  EF7A  F008         	goto	u1421
  5614   0010E2  501D               	movf	(turnRight@i+1)^0,w,c
  5615   0010E4  E109               	bnz	u1420
  5616   0010E6  0E2A               	movlw	42
  5617   0010E8  5C1C               	subwf	turnRight@i^0,w,c
  5618   0010EA  A0D8               	btfss	status,0,c
  5619   0010EC  EF7A  F008         	goto	u1421
  5620   0010F0  EF7C  F008         	goto	u1420
  5621   0010F4                     u1421:
  5622   0010F4  EF36  F008         	goto	l2477
  5623   0010F8                     u1420:
  5624   0010F8                     
  5625                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5626   0010F8  0E00               	movlw	0
  5627   0010FA  6E1D               	movwf	(turnRight@i+1)^0,c
  5628   0010FC  0E20               	movlw	32
  5629   0010FE  6E1C               	movwf	turnRight@i^0,c
  5630   001100                     l2499:
  5631                           
  5632                           ;dc_motor.c: 194:         (*mL).direction=0;
  5633   001100  EE20 F001          	lfsr	2,1
  5634   001104  5014               	movf	turnRight@mL^0,w,c
  5635   001106  26D9               	addwf	fsr2l,f,c
  5636   001108  5015               	movf	(turnRight@mL+1)^0,w,c
  5637   00110A  22DA               	addwfc	fsr2h,f,c
  5638   00110C  0E00               	movlw	0
  5639   00110E  6EDF               	movwf	indf2,c
  5640                           
  5641                           ;dc_motor.c: 195:         (*mR).direction=1;
  5642   001110  EE20 F001          	lfsr	2,1
  5643   001114  5016               	movf	turnRight@mR^0,w,c
  5644   001116  26D9               	addwf	fsr2l,f,c
  5645   001118  5017               	movf	(turnRight@mR+1)^0,w,c
  5646   00111A  22DA               	addwfc	fsr2h,f,c
  5647   00111C  0E01               	movlw	1
  5648   00111E  6EDF               	movwf	indf2,c
  5649   001120                     
  5650                           ;dc_motor.c: 196:         (*mL).power=i;
  5651   001120  C014  FFD9         	movff	turnRight@mL,fsr2l
  5652   001124  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5653   001128  C01C  FFDF         	movff	turnRight@i,indf2
  5654   00112C                     
  5655                           ;dc_motor.c: 197:         (*mR).power=i;
  5656   00112C  C016  FFD9         	movff	turnRight@mR,fsr2l
  5657   001130  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5658   001134  C01C  FFDF         	movff	turnRight@i,indf2
  5659   001138                     
  5660                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5661   001138  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5662   00113C  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5663   001140  ECCB  F006         	call	_setMotorPWM	;wreg free
  5664   001144                     
  5665                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5666   001144  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5667   001148  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5668   00114C  ECCB  F006         	call	_setMotorPWM	;wreg free
  5669   001150                     
  5670                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5671   001150  0E09               	movlw	9
  5672   001152  6E19               	movwf	(??_turnRight+1)^0,c
  5673   001154  0E86               	movlw	134
  5674   001156  6E18               	movwf	??_turnRight^0,c
  5675   001158  0ECA               	movlw	202
  5676   00115A                     u2647:
  5677   00115A  2EE8               	decfsz	wreg,f,c
  5678   00115C  D7FE               	bra	u2647
  5679   00115E  2E18               	decfsz	??_turnRight^0,f,c
  5680   001160  D7FC               	bra	u2647
  5681   001162  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5682   001164  D7FA               	bra	u2647
  5683   001166                     
  5684                           ;dc_motor.c: 202:         }
  5685   001166  0EFB               	movlw	251
  5686   001168  261C               	addwf	turnRight@i^0,f,c
  5687   00116A  0EFF               	movlw	255
  5688   00116C  221D               	addwfc	(turnRight@i+1)^0,f,c
  5689   00116E  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5690   001170  EFC5  F008         	goto	u1430
  5691   001174  501D               	movf	(turnRight@i+1)^0,w,c
  5692   001176  E107               	bnz	u1431
  5693   001178  0E12               	movlw	18
  5694   00117A  5C1C               	subwf	turnRight@i^0,w,c
  5695   00117C  B0D8               	btfsc	status,0,c
  5696   00117E  EFC3  F008         	goto	u1431
  5697   001182  EFC5  F008         	goto	u1430
  5698   001186                     u1431:
  5699   001186  EF80  F008         	goto	l2499
  5700   00118A                     u1430:
  5701   00118A                     
  5702                           ;dc_motor.c: 203:     }
  5703   00118A  4A1A               	infsnz	turnRight@k^0,f,c
  5704   00118C  2A1B               	incf	(turnRight@k+1)^0,f,c
  5705   00118E  BE1B               	btfsc	(turnRight@k+1)^0,7,c
  5706   001190  EFD3  F008         	goto	u1441
  5707   001194  501B               	movf	(turnRight@k+1)^0,w,c
  5708   001196  E109               	bnz	u1440
  5709   001198  0E02               	movlw	2
  5710   00119A  5C1A               	subwf	turnRight@k^0,w,c
  5711   00119C  A0D8               	btfss	status,0,c
  5712   00119E  EFD3  F008         	goto	u1441
  5713   0011A2  EFD5  F008         	goto	u1440
  5714   0011A6                     u1441:
  5715   0011A6  EF32  F008         	goto	l2471
  5716   0011AA                     u1440:
  5717   0011AA  0012               	return		;funcret
  5718   0011AC                     __end_of_turnRight:
  5719                           	callstack 0
  5720                           
  5721 ;; *************** function _turnLeftLong *****************
  5722 ;; Defined at:
  5723 ;;		line 206 in file "dc_motor.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5726 ;;		 -> main@motorL(9), 
  5727 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5728 ;;		 -> main@motorR(9), 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  i               2   25[COMRAM] int 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5740 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5741 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5742 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5743 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5744 ;;Total ram usage:        8 bytes
  5745 ;; Hardware stack levels used: 1
  5746 ;; Hardware stack levels required when called: 4
  5747 ;; This function calls:
  5748 ;;		_setMotorPWM
  5749 ;; This function is called by:
  5750 ;;		_RobotMovement
  5751 ;;		_return_back
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text32
  5756   00154A                     __ptext32:
  5757                           	callstack 0
  5758   00154A                     _turnLeftLong:
  5759                           	callstack 25
  5760   00154A                     
  5761                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5762   00154A  0E00               	movlw	0
  5763   00154C  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5764   00154E  0E17               	movlw	23
  5765   001550  6E1A               	movwf	turnLeftLong@i^0,c
  5766   001552                     l2525:
  5767                           
  5768                           ;dc_motor.c: 211:     (*mL).direction=1;
  5769   001552  EE20 F001          	lfsr	2,1
  5770   001556  5014               	movf	turnLeftLong@mL^0,w,c
  5771   001558  26D9               	addwf	fsr2l,f,c
  5772   00155A  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5773   00155C  22DA               	addwfc	fsr2h,f,c
  5774   00155E  0E01               	movlw	1
  5775   001560  6EDF               	movwf	indf2,c
  5776                           
  5777                           ;dc_motor.c: 212:     (*mR).direction=0;
  5778   001562  EE20 F001          	lfsr	2,1
  5779   001566  5016               	movf	turnLeftLong@mR^0,w,c
  5780   001568  26D9               	addwf	fsr2l,f,c
  5781   00156A  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5782   00156C  22DA               	addwfc	fsr2h,f,c
  5783   00156E  0E00               	movlw	0
  5784   001570  6EDF               	movwf	indf2,c
  5785   001572                     
  5786                           ;dc_motor.c: 213:     (*mL).power=i;
  5787   001572  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5788   001576  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5789   00157A  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5790   00157E                     
  5791                           ;dc_motor.c: 214:     (*mR).power=i;
  5792   00157E  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5793   001582  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5794   001586  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5795   00158A                     
  5796                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5797   00158A  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5798   00158E  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5799   001592  ECCB  F006         	call	_setMotorPWM	;wreg free
  5800   001596                     
  5801                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5802   001596  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5803   00159A  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5804   00159E  ECCB  F006         	call	_setMotorPWM	;wreg free
  5805   0015A2                     
  5806                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5807   0015A2  0E0D               	movlw	13
  5808   0015A4  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5809   0015A6  0EAA               	movlw	170
  5810   0015A8  6E18               	movwf	??_turnLeftLong^0,c
  5811   0015AA  0E84               	movlw	132
  5812   0015AC                     u2657:
  5813   0015AC  2EE8               	decfsz	wreg,f,c
  5814   0015AE  D7FE               	bra	u2657
  5815   0015B0  2E18               	decfsz	??_turnLeftLong^0,f,c
  5816   0015B2  D7FC               	bra	u2657
  5817   0015B4  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5818   0015B6  D7FA               	bra	u2657
  5819   0015B8  D000               	nop2	
  5820   0015BA                     
  5821                           ;dc_motor.c: 218:     }
  5822   0015BA  0E05               	movlw	5
  5823   0015BC  261A               	addwf	turnLeftLong@i^0,f,c
  5824   0015BE  0E00               	movlw	0
  5825   0015C0  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5826   0015C2  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5827   0015C4  EFED  F00A         	goto	u1451
  5828   0015C8  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5829   0015CA  E109               	bnz	u1450
  5830   0015CC  0E26               	movlw	38
  5831   0015CE  5C1A               	subwf	turnLeftLong@i^0,w,c
  5832   0015D0  A0D8               	btfss	status,0,c
  5833   0015D2  EFED  F00A         	goto	u1451
  5834   0015D6  EFEF  F00A         	goto	u1450
  5835   0015DA                     u1451:
  5836   0015DA  EFA9  F00A         	goto	l2525
  5837   0015DE                     u1450:
  5838   0015DE                     
  5839                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5840   0015DE  0E00               	movlw	0
  5841   0015E0  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5842   0015E2  0E1C               	movlw	28
  5843   0015E4  6E1A               	movwf	turnLeftLong@i^0,c
  5844   0015E6                     l2547:
  5845                           
  5846                           ;dc_motor.c: 220:     (*mL).direction=1;
  5847   0015E6  EE20 F001          	lfsr	2,1
  5848   0015EA  5014               	movf	turnLeftLong@mL^0,w,c
  5849   0015EC  26D9               	addwf	fsr2l,f,c
  5850   0015EE  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5851   0015F0  22DA               	addwfc	fsr2h,f,c
  5852   0015F2  0E01               	movlw	1
  5853   0015F4  6EDF               	movwf	indf2,c
  5854                           
  5855                           ;dc_motor.c: 221:     (*mR).direction=0;
  5856   0015F6  EE20 F001          	lfsr	2,1
  5857   0015FA  5016               	movf	turnLeftLong@mR^0,w,c
  5858   0015FC  26D9               	addwf	fsr2l,f,c
  5859   0015FE  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5860   001600  22DA               	addwfc	fsr2h,f,c
  5861   001602  0E00               	movlw	0
  5862   001604  6EDF               	movwf	indf2,c
  5863   001606                     
  5864                           ;dc_motor.c: 222:     (*mL).power=i;
  5865   001606  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5866   00160A  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5867   00160E  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5868   001612                     
  5869                           ;dc_motor.c: 223:     (*mR).power=i;
  5870   001612  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5871   001616  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5872   00161A  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5873   00161E                     
  5874                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5875   00161E  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5876   001622  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5877   001626  ECCB  F006         	call	_setMotorPWM	;wreg free
  5878   00162A                     
  5879                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5880   00162A  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5881   00162E  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5882   001632  ECCB  F006         	call	_setMotorPWM	;wreg free
  5883   001636                     
  5884                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5885   001636  0E0D               	movlw	13
  5886   001638  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5887   00163A  0E2D               	movlw	45
  5888   00163C  6E18               	movwf	??_turnLeftLong^0,c
  5889   00163E  0ED8               	movlw	216
  5890   001640                     u2667:
  5891   001640  2EE8               	decfsz	wreg,f,c
  5892   001642  D7FE               	bra	u2667
  5893   001644  2E18               	decfsz	??_turnLeftLong^0,f,c
  5894   001646  D7FC               	bra	u2667
  5895   001648  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5896   00164A  D7FA               	bra	u2667
  5897   00164C                     
  5898                           ;dc_motor.c: 228:     }
  5899   00164C  0EFB               	movlw	251
  5900   00164E  261A               	addwf	turnLeftLong@i^0,f,c
  5901   001650  0EFF               	movlw	255
  5902   001652  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5903   001654  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5904   001656  EF38  F00B         	goto	u1460
  5905   00165A  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5906   00165C  E107               	bnz	u1461
  5907   00165E  0E0E               	movlw	14
  5908   001660  5C1A               	subwf	turnLeftLong@i^0,w,c
  5909   001662  B0D8               	btfsc	status,0,c
  5910   001664  EF36  F00B         	goto	u1461
  5911   001668  EF38  F00B         	goto	u1460
  5912   00166C                     u1461:
  5913   00166C  EFF3  F00A         	goto	l2547
  5914   001670                     u1460:
  5915   001670  0012               	return		;funcret
  5916   001672                     __end_of_turnLeftLong:
  5917                           	callstack 0
  5918                           
  5919 ;; *************** function _turnLeft *****************
  5920 ;; Defined at:
  5921 ;;		line 102 in file "dc_motor.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5924 ;;		 -> main@motorL(9), 
  5925 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5926 ;;		 -> main@motorR(9), 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  i               2   27[COMRAM] int 
  5929 ;;  k               2   25[COMRAM] int 
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 0/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5939 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5942 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5943 ;;Total ram usage:       10 bytes
  5944 ;; Hardware stack levels used: 1
  5945 ;; Hardware stack levels required when called: 4
  5946 ;; This function calls:
  5947 ;;		_setMotorPWM
  5948 ;; This function is called by:
  5949 ;;		_RobotMovement
  5950 ;;		_return_back
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text33
  5955   000F02                     __ptext33:
  5956                           	callstack 0
  5957   000F02                     _turnLeft:
  5958                           	callstack 25
  5959   000F02                     
  5960                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5961   000F02  0E00               	movlw	0
  5962   000F04  6E1B               	movwf	(turnLeft@k+1)^0,c
  5963   000F06  0E00               	movlw	0
  5964   000F08  6E1A               	movwf	turnLeft@k^0,c
  5965                           
  5966                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5967   000F0A  0E00               	movlw	0
  5968   000F0C  6E1B               	movwf	(turnLeft@k+1)^0,c
  5969   000F0E  0E00               	movlw	0
  5970   000F10  6E1A               	movwf	turnLeft@k^0,c
  5971   000F12                     l2417:
  5972                           
  5973                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  5974   000F12  0E00               	movlw	0
  5975   000F14  6E1D               	movwf	(turnLeft@i+1)^0,c
  5976   000F16  0E2F               	movlw	47
  5977   000F18  6E1C               	movwf	turnLeft@i^0,c
  5978   000F1A                     l2423:
  5979                           
  5980                           ;dc_motor.c: 133:         (*mL).direction=1;
  5981   000F1A  EE20 F001          	lfsr	2,1
  5982   000F1E  5014               	movf	turnLeft@mL^0,w,c
  5983   000F20  26D9               	addwf	fsr2l,f,c
  5984   000F22  5015               	movf	(turnLeft@mL+1)^0,w,c
  5985   000F24  22DA               	addwfc	fsr2h,f,c
  5986   000F26  0E01               	movlw	1
  5987   000F28  6EDF               	movwf	indf2,c
  5988                           
  5989                           ;dc_motor.c: 134:         (*mR).direction=0;
  5990   000F2A  EE20 F001          	lfsr	2,1
  5991   000F2E  5016               	movf	turnLeft@mR^0,w,c
  5992   000F30  26D9               	addwf	fsr2l,f,c
  5993   000F32  5017               	movf	(turnLeft@mR+1)^0,w,c
  5994   000F34  22DA               	addwfc	fsr2h,f,c
  5995   000F36  0E00               	movlw	0
  5996   000F38  6EDF               	movwf	indf2,c
  5997   000F3A                     
  5998                           ;dc_motor.c: 135:         (*mL).power=i;
  5999   000F3A  C014  FFD9         	movff	turnLeft@mL,fsr2l
  6000   000F3E  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  6001   000F42  C01C  FFDF         	movff	turnLeft@i,indf2
  6002   000F46                     
  6003                           ;dc_motor.c: 136:         (*mR).power=i;
  6004   000F46  C016  FFD9         	movff	turnLeft@mR,fsr2l
  6005   000F4A  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  6006   000F4E  C01C  FFDF         	movff	turnLeft@i,indf2
  6007   000F52                     
  6008                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6009   000F52  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6010   000F56  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6011   000F5A  ECCB  F006         	call	_setMotorPWM	;wreg free
  6012   000F5E                     
  6013                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6014   000F5E  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6015   000F62  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6016   000F66  ECCB  F006         	call	_setMotorPWM	;wreg free
  6017   000F6A                     
  6018                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6019   000F6A  0E05               	movlw	5
  6020   000F6C  6E19               	movwf	(??_turnLeft+1)^0,c
  6021   000F6E  0EB6               	movlw	182
  6022   000F70  6E18               	movwf	??_turnLeft^0,c
  6023   000F72  0E2C               	movlw	44
  6024   000F74                     u2677:
  6025   000F74  2EE8               	decfsz	wreg,f,c
  6026   000F76  D7FE               	bra	u2677
  6027   000F78  2E18               	decfsz	??_turnLeft^0,f,c
  6028   000F7A  D7FC               	bra	u2677
  6029   000F7C  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6030   000F7E  D7FA               	bra	u2677
  6031   000F80  D000               	nop2	
  6032   000F82                     
  6033                           ;dc_motor.c: 140:         }
  6034   000F82  0E05               	movlw	5
  6035   000F84  261C               	addwf	turnLeft@i^0,f,c
  6036   000F86  0E00               	movlw	0
  6037   000F88  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6038   000F8A  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6039   000F8C  EFD1  F007         	goto	u1391
  6040   000F90  501D               	movf	(turnLeft@i+1)^0,w,c
  6041   000F92  E109               	bnz	u1390
  6042   000F94  0E3E               	movlw	62
  6043   000F96  5C1C               	subwf	turnLeft@i^0,w,c
  6044   000F98  A0D8               	btfss	status,0,c
  6045   000F9A  EFD1  F007         	goto	u1391
  6046   000F9E  EFD3  F007         	goto	u1390
  6047   000FA2                     u1391:
  6048   000FA2  EF8D  F007         	goto	l2423
  6049   000FA6                     u1390:
  6050   000FA6                     
  6051                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  6052   000FA6  0E00               	movlw	0
  6053   000FA8  6E1D               	movwf	(turnLeft@i+1)^0,c
  6054   000FAA  0E34               	movlw	52
  6055   000FAC  6E1C               	movwf	turnLeft@i^0,c
  6056   000FAE                     l2445:
  6057                           
  6058                           ;dc_motor.c: 142:         (*mL).direction=1;
  6059   000FAE  EE20 F001          	lfsr	2,1
  6060   000FB2  5014               	movf	turnLeft@mL^0,w,c
  6061   000FB4  26D9               	addwf	fsr2l,f,c
  6062   000FB6  5015               	movf	(turnLeft@mL+1)^0,w,c
  6063   000FB8  22DA               	addwfc	fsr2h,f,c
  6064   000FBA  0E01               	movlw	1
  6065   000FBC  6EDF               	movwf	indf2,c
  6066                           
  6067                           ;dc_motor.c: 143:         (*mR).direction=0;
  6068   000FBE  EE20 F001          	lfsr	2,1
  6069   000FC2  5016               	movf	turnLeft@mR^0,w,c
  6070   000FC4  26D9               	addwf	fsr2l,f,c
  6071   000FC6  5017               	movf	(turnLeft@mR+1)^0,w,c
  6072   000FC8  22DA               	addwfc	fsr2h,f,c
  6073   000FCA  0E00               	movlw	0
  6074   000FCC  6EDF               	movwf	indf2,c
  6075   000FCE                     
  6076                           ;dc_motor.c: 144:         (*mL).power=i;
  6077   000FCE  C014  FFD9         	movff	turnLeft@mL,fsr2l
  6078   000FD2  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  6079   000FD6  C01C  FFDF         	movff	turnLeft@i,indf2
  6080   000FDA                     
  6081                           ;dc_motor.c: 145:         (*mR).power=i;
  6082   000FDA  C016  FFD9         	movff	turnLeft@mR,fsr2l
  6083   000FDE  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  6084   000FE2  C01C  FFDF         	movff	turnLeft@i,indf2
  6085   000FE6                     
  6086                           ;dc_motor.c: 146:         setMotorPWM(mL);
  6087   000FE6  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6088   000FEA  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6089   000FEE  ECCB  F006         	call	_setMotorPWM	;wreg free
  6090   000FF2                     
  6091                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6092   000FF2  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6093   000FF6  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6094   000FFA  ECCB  F006         	call	_setMotorPWM	;wreg free
  6095   000FFE                     
  6096                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6097   000FFE  0E05               	movlw	5
  6098   001000  6E19               	movwf	(??_turnLeft+1)^0,c
  6099   001002  0EA1               	movlw	161
  6100   001004  6E18               	movwf	??_turnLeft^0,c
  6101   001006  0E65               	movlw	101
  6102   001008                     u2687:
  6103   001008  2EE8               	decfsz	wreg,f,c
  6104   00100A  D7FE               	bra	u2687
  6105   00100C  2E18               	decfsz	??_turnLeft^0,f,c
  6106   00100E  D7FC               	bra	u2687
  6107   001010  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6108   001012  D7FA               	bra	u2687
  6109   001014  F000               	nop	
  6110   001016                     
  6111                           ;dc_motor.c: 150:         }
  6112   001016  0EFB               	movlw	251
  6113   001018  261C               	addwf	turnLeft@i^0,f,c
  6114   00101A  0EFF               	movlw	255
  6115   00101C  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6116   00101E  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6117   001020  EF1D  F008         	goto	u1400
  6118   001024  501D               	movf	(turnLeft@i+1)^0,w,c
  6119   001026  E107               	bnz	u1401
  6120   001028  0E26               	movlw	38
  6121   00102A  5C1C               	subwf	turnLeft@i^0,w,c
  6122   00102C  B0D8               	btfsc	status,0,c
  6123   00102E  EF1B  F008         	goto	u1401
  6124   001032  EF1D  F008         	goto	u1400
  6125   001036                     u1401:
  6126   001036  EFD7  F007         	goto	l2445
  6127   00103A                     u1400:
  6128   00103A                     
  6129                           ;dc_motor.c: 151:     }
  6130   00103A  4A1A               	infsnz	turnLeft@k^0,f,c
  6131   00103C  2A1B               	incf	(turnLeft@k+1)^0,f,c
  6132   00103E  BE1B               	btfsc	(turnLeft@k+1)^0,7,c
  6133   001040  EF2B  F008         	goto	u1411
  6134   001044  501B               	movf	(turnLeft@k+1)^0,w,c
  6135   001046  E109               	bnz	u1410
  6136   001048  0E02               	movlw	2
  6137   00104A  5C1A               	subwf	turnLeft@k^0,w,c
  6138   00104C  A0D8               	btfss	status,0,c
  6139   00104E  EF2B  F008         	goto	u1411
  6140   001052  EF2D  F008         	goto	u1410
  6141   001056                     u1411:
  6142   001056  EF89  F007         	goto	l2417
  6143   00105A                     u1410:
  6144   00105A  0012               	return		;funcret
  6145   00105C                     __end_of_turnLeft:
  6146                           	callstack 0
  6147                           
  6148 ;; *************** function _stop *****************
  6149 ;; Defined at:
  6150 ;;		line 92 in file "dc_motor.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6153 ;;		 -> main@motorL(9), 
  6154 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6155 ;;		 -> main@motorR(9), 
  6156 ;; Auto vars:     Size  Location     Type
  6157 ;;		None
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  1    wreg      void 
  6160 ;; Registers used:
  6161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6167 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6169 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6170 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6171 ;;Total ram usage:        6 bytes
  6172 ;; Hardware stack levels used: 1
  6173 ;; Hardware stack levels required when called: 4
  6174 ;; This function calls:
  6175 ;;		_setMotorPWM
  6176 ;; This function is called by:
  6177 ;;		_RobotMovement
  6178 ;;		_return_back
  6179 ;;		_main
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text34
  6184   001D46                     __ptext34:
  6185                           	callstack 0
  6186   001D46                     _stop:
  6187                           	callstack 26
  6188   001D46                     
  6189                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6190   001D46  C014  FFD9         	movff	stop@mL,fsr2l
  6191   001D4A  C015  FFDA         	movff	stop@mL+1,fsr2h
  6192   001D4E  0E00               	movlw	0
  6193   001D50  6EDF               	movwf	indf2,c
  6194                           
  6195                           ;dc_motor.c: 95:     (*mR).power=0;
  6196   001D52  C016  FFD9         	movff	stop@mR,fsr2l
  6197   001D56  C017  FFDA         	movff	stop@mR+1,fsr2h
  6198   001D5A  0E00               	movlw	0
  6199   001D5C  6EDF               	movwf	indf2,c
  6200   001D5E                     
  6201                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6202   001D5E  C014  F00E         	movff	stop@mL,setMotorPWM@m
  6203   001D62  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  6204   001D66  ECCB  F006         	call	_setMotorPWM	;wreg free
  6205   001D6A                     
  6206                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6207   001D6A  C016  F00E         	movff	stop@mR,setMotorPWM@m
  6208   001D6E  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  6209   001D72  ECCB  F006         	call	_setMotorPWM	;wreg free
  6210   001D76                     
  6211                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6212   001D76  0E52               	movlw	82
  6213   001D78  6E19               	movwf	(??_stop+1)^0,c
  6214   001D7A  0E2B               	movlw	43
  6215   001D7C  6E18               	movwf	??_stop^0,c
  6216   001D7E  0E00               	movlw	0
  6217   001D80                     u2697:
  6218   001D80  2EE8               	decfsz	wreg,f,c
  6219   001D82  D7FE               	bra	u2697
  6220   001D84  2E18               	decfsz	??_stop^0,f,c
  6221   001D86  D7FC               	bra	u2697
  6222   001D88  2E19               	decfsz	(??_stop+1)^0,f,c
  6223   001D8A  D7FA               	bra	u2697
  6224   001D8C  D000               	nop2	
  6225   001D8E  0012               	return		;funcret
  6226   001D90                     __end_of_stop:
  6227                           	callstack 0
  6228                           
  6229 ;; *************** function _moveBack *****************
  6230 ;; Defined at:
  6231 ;;		line 282 in file "dc_motor.c"
  6232 ;; Parameters:    Size  Location     Type
  6233 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6234 ;;		 -> main@motorL(9), 
  6235 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6236 ;;		 -> main@motorR(9), 
  6237 ;;  time            2   23[COMRAM] unsigned int 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;		None
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6249 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6252 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6253 ;;Total ram usage:        6 bytes
  6254 ;; Hardware stack levels used: 1
  6255 ;; Hardware stack levels required when called: 4
  6256 ;; This function calls:
  6257 ;;		_setMotorPWM
  6258 ;; This function is called by:
  6259 ;;		_RobotMovement
  6260 ;;		_main
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text35
  6265   0019FA                     __ptext35:
  6266                           	callstack 0
  6267   0019FA                     _moveBack:
  6268                           	callstack 26
  6269   0019FA                     
  6270                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6271   0019FA  0E00               	movlw	0
  6272   0019FC  6E56               	movwf	(_seconds+1)^0,c
  6273   0019FE  0E00               	movlw	0
  6274   001A00  6E55               	movwf	_seconds^0,c
  6275                           
  6276                           ;dc_motor.c: 285:     while (seconds<time)
  6277   001A02  EF2B  F00D         	goto	l2633
  6278   001A06                     l2623:
  6279                           
  6280                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6281   001A06  EE20 F001          	lfsr	2,1
  6282   001A0A  5014               	movf	moveBack@mL^0,w,c
  6283   001A0C  26D9               	addwf	fsr2l,f,c
  6284   001A0E  5015               	movf	(moveBack@mL+1)^0,w,c
  6285   001A10  22DA               	addwfc	fsr2h,f,c
  6286   001A12  0E01               	movlw	1
  6287   001A14  6EDF               	movwf	indf2,c
  6288                           
  6289                           ;dc_motor.c: 288:         (*mR).direction=1;
  6290   001A16  EE20 F001          	lfsr	2,1
  6291   001A1A  5016               	movf	moveBack@mR^0,w,c
  6292   001A1C  26D9               	addwf	fsr2l,f,c
  6293   001A1E  5017               	movf	(moveBack@mR+1)^0,w,c
  6294   001A20  22DA               	addwfc	fsr2h,f,c
  6295   001A22  0E01               	movlw	1
  6296   001A24  6EDF               	movwf	indf2,c
  6297   001A26                     
  6298                           ;dc_motor.c: 289:         (*mL).power=40;
  6299   001A26  C014  FFD9         	movff	moveBack@mL,fsr2l
  6300   001A2A  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  6301   001A2E  0E28               	movlw	40
  6302   001A30  6EDF               	movwf	indf2,c
  6303   001A32                     
  6304                           ;dc_motor.c: 290:         (*mR).power=39;
  6305   001A32  C016  FFD9         	movff	moveBack@mR,fsr2l
  6306   001A36  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  6307   001A3A  0E27               	movlw	39
  6308   001A3C  6EDF               	movwf	indf2,c
  6309   001A3E                     
  6310                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6311   001A3E  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  6312   001A42  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6313   001A46  ECCB  F006         	call	_setMotorPWM	;wreg free
  6314   001A4A                     
  6315                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6316   001A4A  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  6317   001A4E  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6318   001A52  ECCB  F006         	call	_setMotorPWM	;wreg free
  6319   001A56                     l2633:
  6320                           
  6321                           ;dc_motor.c: 285:     while (seconds<time)
  6322   001A56  5018               	movf	moveBack@time^0,w,c
  6323   001A58  5C55               	subwf	_seconds^0,w,c
  6324   001A5A  5019               	movf	(moveBack@time+1)^0,w,c
  6325   001A5C  5856               	subwfb	(_seconds+1)^0,w,c
  6326   001A5E  A0D8               	btfss	status,0,c
  6327   001A60  EF34  F00D         	goto	u1501
  6328   001A64  EF36  F00D         	goto	u1500
  6329   001A68                     u1501:
  6330   001A68  EF03  F00D         	goto	l2623
  6331   001A6C                     u1500:
  6332   001A6C  0012               	return		;funcret
  6333   001A6E                     __end_of_moveBack:
  6334                           	callstack 0
  6335                           
  6336 ;; *************** function _setMotorPWM *****************
  6337 ;; Defined at:
  6338 ;;		line 69 in file "dc_motor.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  m               2   13[COMRAM] PTR struct DC_motor
  6341 ;;		 -> main@motorR(9), main@motorL(9), 
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  negDuty         1   18[COMRAM] unsigned char 
  6344 ;;  posDuty         1   17[COMRAM] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6356 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6358 ;;Total ram usage:        6 bytes
  6359 ;; Hardware stack levels used: 1
  6360 ;; Hardware stack levels required when called: 3
  6361 ;; This function calls:
  6362 ;;		___lwdiv
  6363 ;;		___wmul
  6364 ;; This function is called by:
  6365 ;;		_stop
  6366 ;;		_turnLeft
  6367 ;;		_turnRight
  6368 ;;		_turnLeftLong
  6369 ;;		_turnRightLong
  6370 ;;		_fullSpeedAhead
  6371 ;;		_TimedfullSpeedAhead
  6372 ;;		_moveBack
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text36
  6377   000D96                     __ptext36:
  6378                           	callstack 0
  6379   000D96                     _setMotorPWM:
  6380                           	callstack 26
  6381   000D96                     
  6382                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6383   000D96  EE20 F002          	lfsr	2,2
  6384   000D9A  500E               	movf	setMotorPWM@m^0,w,c
  6385   000D9C  26D9               	addwf	fsr2l,f,c
  6386   000D9E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6387   000DA0  22DA               	addwfc	fsr2h,f,c
  6388   000DA2  50DF               	movf	indf2,w,c
  6389   000DA4  B4D8               	btfsc	status,2,c
  6390   000DA6  EFD7  F006         	goto	u1341
  6391   000DAA  EFD9  F006         	goto	u1340
  6392   000DAE                     u1341:
  6393   000DAE  EF0D  F007         	goto	l2307
  6394   000DB2                     u1340:
  6395   000DB2                     
  6396                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6397   000DB2  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6398   000DB6  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6399   000DBA  50DF               	movf	indf2,w,c
  6400   000DBC  6E10               	movwf	??_setMotorPWM^0,c
  6401   000DBE  5010               	movf	??_setMotorPWM^0,w,c
  6402   000DC0  6E01               	movwf	___wmul@multiplier^0,c
  6403   000DC2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6404   000DC4  EE20 F003          	lfsr	2,3
  6405   000DC8  500E               	movf	setMotorPWM@m^0,w,c
  6406   000DCA  26D9               	addwf	fsr2l,f,c
  6407   000DCC  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6408   000DCE  22DA               	addwfc	fsr2h,f,c
  6409   000DD0  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6410   000DD4  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6411   000DD8  EC58  F00F         	call	___wmul	;wreg free
  6412   000DDC  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6413   000DE0  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6414   000DE4  0E00               	movlw	0
  6415   000DE6  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6416   000DE8  0E64               	movlw	100
  6417   000DEA  6E09               	movwf	___lwdiv@divisor^0,c
  6418   000DEC  EC37  F00D         	call	___lwdiv	;wreg free
  6419   000DF0  EE20 F003          	lfsr	2,3
  6420   000DF4  500E               	movf	setMotorPWM@m^0,w,c
  6421   000DF6  26D9               	addwf	fsr2l,f,c
  6422   000DF8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6423   000DFA  22DA               	addwfc	fsr2h,f,c
  6424   000DFC  50DF               	movf	indf2,w,c
  6425   000DFE  6E11               	movwf	(??_setMotorPWM+1)^0,c
  6426   000E00  5007               	movf	?___lwdiv^0,w,c
  6427   000E02  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  6428   000E04  6E12               	movwf	setMotorPWM@posDuty^0,c
  6429   000E06                     
  6430                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6431   000E06  EE20 F003          	lfsr	2,3
  6432   000E0A  500E               	movf	setMotorPWM@m^0,w,c
  6433   000E0C  26D9               	addwf	fsr2l,f,c
  6434   000E0E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6435   000E10  22DA               	addwfc	fsr2h,f,c
  6436   000E12  50DF               	movf	indf2,w,c
  6437   000E14  6E13               	movwf	setMotorPWM@negDuty^0,c
  6438                           
  6439                           ;dc_motor.c: 76:     }
  6440   000E16  EF30  F007         	goto	l2311
  6441   000E1A                     l2307:
  6442                           
  6443                           ;dc_motor.c: 78:         posDuty=0;
  6444   000E1A  0E00               	movlw	0
  6445   000E1C  6E12               	movwf	setMotorPWM@posDuty^0,c
  6446   000E1E                     
  6447                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6448   000E1E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6449   000E22  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6450   000E26  50DF               	movf	indf2,w,c
  6451   000E28  6E10               	movwf	??_setMotorPWM^0,c
  6452   000E2A  5010               	movf	??_setMotorPWM^0,w,c
  6453   000E2C  6E01               	movwf	___wmul@multiplier^0,c
  6454   000E2E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6455   000E30  EE20 F003          	lfsr	2,3
  6456   000E34  500E               	movf	setMotorPWM@m^0,w,c
  6457   000E36  26D9               	addwf	fsr2l,f,c
  6458   000E38  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6459   000E3A  22DA               	addwfc	fsr2h,f,c
  6460   000E3C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6461   000E40  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6462   000E44  EC58  F00F         	call	___wmul	;wreg free
  6463   000E48  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6464   000E4C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6465   000E50  0E00               	movlw	0
  6466   000E52  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6467   000E54  0E64               	movlw	100
  6468   000E56  6E09               	movwf	___lwdiv@divisor^0,c
  6469   000E58  EC37  F00D         	call	___lwdiv	;wreg free
  6470   000E5C  5007               	movf	?___lwdiv^0,w,c
  6471   000E5E  6E13               	movwf	setMotorPWM@negDuty^0,c
  6472   000E60                     l2311:
  6473                           
  6474                           ;dc_motor.c: 82:     if (m->direction) {
  6475   000E60  EE20 F001          	lfsr	2,1
  6476   000E64  500E               	movf	setMotorPWM@m^0,w,c
  6477   000E66  26D9               	addwf	fsr2l,f,c
  6478   000E68  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6479   000E6A  22DA               	addwfc	fsr2h,f,c
  6480   000E6C  50DF               	movf	indf2,w,c
  6481   000E6E  B4D8               	btfsc	status,2,c
  6482   000E70  EF3C  F007         	goto	u1351
  6483   000E74  EF3E  F007         	goto	u1350
  6484   000E78                     u1351:
  6485   000E78  EF60  F007         	goto	l2315
  6486   000E7C                     u1350:
  6487   000E7C                     
  6488                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6489   000E7C  EE20 F005          	lfsr	2,5
  6490   000E80  500E               	movf	setMotorPWM@m^0,w,c
  6491   000E82  26D9               	addwf	fsr2l,f,c
  6492   000E84  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6493   000E86  22DA               	addwfc	fsr2h,f,c
  6494   000E88  CFDE F010          	movff	postinc2,??_setMotorPWM
  6495   000E8C  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6496   000E90  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6497   000E94  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6498   000E98  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6499                           
  6500                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6501   000E9C  EE20 F007          	lfsr	2,7
  6502   000EA0  500E               	movf	setMotorPWM@m^0,w,c
  6503   000EA2  26D9               	addwf	fsr2l,f,c
  6504   000EA4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6505   000EA6  22DA               	addwfc	fsr2h,f,c
  6506   000EA8  CFDE F010          	movff	postinc2,??_setMotorPWM
  6507   000EAC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6508   000EB0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6509   000EB4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6510   000EB8  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6511                           
  6512                           ;dc_motor.c: 85:     } else {
  6513   000EBC  EF80  F007         	goto	l213
  6514   000EC0                     l2315:
  6515                           
  6516                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6517   000EC0  EE20 F005          	lfsr	2,5
  6518   000EC4  500E               	movf	setMotorPWM@m^0,w,c
  6519   000EC6  26D9               	addwf	fsr2l,f,c
  6520   000EC8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6521   000ECA  22DA               	addwfc	fsr2h,f,c
  6522   000ECC  CFDE F010          	movff	postinc2,??_setMotorPWM
  6523   000ED0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6524   000ED4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6525   000ED8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6526   000EDC  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6527                           
  6528                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6529   000EE0  EE20 F007          	lfsr	2,7
  6530   000EE4  500E               	movf	setMotorPWM@m^0,w,c
  6531   000EE6  26D9               	addwf	fsr2l,f,c
  6532   000EE8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6533   000EEA  22DA               	addwfc	fsr2h,f,c
  6534   000EEC  CFDE F010          	movff	postinc2,??_setMotorPWM
  6535   000EF0  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6536   000EF4  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6537   000EF8  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6538   000EFC  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6539   000F00                     l213:
  6540   000F00  0012               	return		;funcret
  6541   000F02                     __end_of_setMotorPWM:
  6542                           	callstack 0
  6543                           
  6544 ;; *************** function ___wmul *****************
  6545 ;; Defined at:
  6546 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  multiplier      2    0[COMRAM] unsigned int 
  6549 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  product         2    4[COMRAM] unsigned int 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  2    0[COMRAM] unsigned int 
  6554 ;; Registers used:
  6555 ;;		wreg, status,2, status,0, prodl, prodh
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6561 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6562 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6564 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6565 ;;Total ram usage:        6 bytes
  6566 ;; Hardware stack levels used: 1
  6567 ;; Hardware stack levels required when called: 2
  6568 ;; This function calls:
  6569 ;;		Nothing
  6570 ;; This function is called by:
  6571 ;;		_get_color_distance
  6572 ;;		_get_color_code
  6573 ;;		_get_wall_presence
  6574 ;;		_setMotorPWM
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text37
  6579   001EB0                     __ptext37:
  6580                           	callstack 0
  6581   001EB0                     ___wmul:
  6582                           	callstack 26
  6583   001EB0  5001               	movf	___wmul@multiplier^0,w,c
  6584   001EB2  0203               	mulwf	___wmul@multiplicand^0,c
  6585   001EB4  CFF3 F005          	movff	prodl,___wmul@product
  6586   001EB8  CFF4 F006          	movff	prodh,___wmul@product+1
  6587   001EBC  5001               	movf	___wmul@multiplier^0,w,c
  6588   001EBE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6589   001EC0  50F3               	movf	243,w,c
  6590   001EC2  2606               	addwf	(___wmul@product+1)^0,f,c
  6591   001EC4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6592   001EC6  0203               	mulwf	___wmul@multiplicand^0,c
  6593   001EC8  50F3               	movf	243,w,c
  6594   001ECA  2606               	addwf	(___wmul@product+1)^0,f,c
  6595   001ECC  C005  F001         	movff	___wmul@product,?___wmul
  6596   001ED0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6597   001ED4  0012               	return		;funcret
  6598   001ED6                     __end_of___wmul:
  6599                           	callstack 0
  6600                           
  6601 ;; *************** function ___lwdiv *****************
  6602 ;; Defined at:
  6603 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;  dividend        2    6[COMRAM] unsigned int 
  6606 ;;  divisor         2    8[COMRAM] unsigned int 
  6607 ;; Auto vars:     Size  Location     Type
  6608 ;;  quotient        2   10[COMRAM] unsigned int 
  6609 ;;  counter         1   12[COMRAM] unsigned char 
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  2    6[COMRAM] unsigned int 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6620 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6622 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6623 ;;Total ram usage:        7 bytes
  6624 ;; Hardware stack levels used: 1
  6625 ;; Hardware stack levels required when called: 2
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_calibrate_black
  6630 ;;		_setMotorPWM
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           	psect	text38
  6635   001A6E                     __ptext38:
  6636                           	callstack 0
  6637   001A6E                     ___lwdiv:
  6638                           	callstack 26
  6639   001A6E  0E00               	movlw	0
  6640   001A70  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6641   001A72  0E00               	movlw	0
  6642   001A74  6E0B               	movwf	___lwdiv@quotient^0,c
  6643   001A76  5009               	movf	___lwdiv@divisor^0,w,c
  6644   001A78  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6645   001A7A  B4D8               	btfsc	status,2,c
  6646   001A7C  EF42  F00D         	goto	u1281
  6647   001A80  EF44  F00D         	goto	u1280
  6648   001A84                     u1281:
  6649   001A84  EF6C  F00D         	goto	l943
  6650   001A88                     u1280:
  6651   001A88  0E01               	movlw	1
  6652   001A8A  6E0D               	movwf	___lwdiv@counter^0,c
  6653   001A8C  EF4C  F00D         	goto	l2255
  6654   001A90                     l2253:
  6655   001A90  90D8               	bcf	status,0,c
  6656   001A92  3609               	rlcf	___lwdiv@divisor^0,f,c
  6657   001A94  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6658   001A96  2A0D               	incf	___lwdiv@counter^0,f,c
  6659   001A98                     l2255:
  6660   001A98  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6661   001A9A  EF51  F00D         	goto	u1291
  6662   001A9E  EF53  F00D         	goto	u1290
  6663   001AA2                     u1291:
  6664   001AA2  EF48  F00D         	goto	l2253
  6665   001AA6                     u1290:
  6666   001AA6                     l2257:
  6667   001AA6  90D8               	bcf	status,0,c
  6668   001AA8  360B               	rlcf	___lwdiv@quotient^0,f,c
  6669   001AAA  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6670   001AAC  5009               	movf	___lwdiv@divisor^0,w,c
  6671   001AAE  5C07               	subwf	___lwdiv@dividend^0,w,c
  6672   001AB0  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6673   001AB2  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6674   001AB4  A0D8               	btfss	status,0,c
  6675   001AB6  EF5F  F00D         	goto	u1301
  6676   001ABA  EF61  F00D         	goto	u1300
  6677   001ABE                     u1301:
  6678   001ABE  EF66  F00D         	goto	l2265
  6679   001AC2                     u1300:
  6680   001AC2  5009               	movf	___lwdiv@divisor^0,w,c
  6681   001AC4  5E07               	subwf	___lwdiv@dividend^0,f,c
  6682   001AC6  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6683   001AC8  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6684   001ACA  800B               	bsf	___lwdiv@quotient^0,0,c
  6685   001ACC                     l2265:
  6686   001ACC  90D8               	bcf	status,0,c
  6687   001ACE  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6688   001AD0  3209               	rrcf	___lwdiv@divisor^0,f,c
  6689   001AD2  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6690   001AD4  EF53  F00D         	goto	l2257
  6691   001AD8                     l943:
  6692   001AD8  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6693   001ADC  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6694   001AE0  0012               	return		;funcret
  6695   001AE2                     __end_of___lwdiv:
  6696                           	callstack 0
  6697                           
  6698 ;; *************** function _Interrupts_init *****************
  6699 ;; Defined at:
  6700 ;;		line 10 in file "interrupts.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;		None
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  1    wreg      void 
  6707 ;; Registers used:
  6708 ;;		None
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used: 1
  6720 ;; Hardware stack levels required when called: 2
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_main
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text39
  6729   001F3A                     __ptext39:
  6730                           	callstack 0
  6731   001F3A                     _Interrupts_init:
  6732                           	callstack 28
  6733   001F3A                     
  6734                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6735   001F3A  8CF2               	bsf	242,6,c	;volatile
  6736                           
  6737                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6738   001F3C  010E               	movlb	14	; () banked
  6739   001F3E  8B29               	bsf	41,5,b	;volatile
  6740                           
  6741                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6742   001F40  812B               	bsf	43,0,b	;volatile
  6743                           
  6744                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6745   001F42  8EF2               	bsf	242,7,c	;volatile
  6746   001F44                     
  6747                           ; BSR set to: 14
  6748   001F44  0012               	return		;funcret
  6749   001F46                     __end_of_Interrupts_init:
  6750                           	callstack 0
  6751                           
  6752 ;; *************** function _HighISR *****************
  6753 ;; Defined at:
  6754 ;;		line 22 in file "interrupts.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;		None
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      void 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6772 ;;Total ram usage:        0 bytes
  6773 ;; Hardware stack levels used: 1
  6774 ;; Hardware stack levels required when called: 1
  6775 ;; This function calls:
  6776 ;;		_increment_seconds
  6777 ;; This function is called by:
  6778 ;;		Interrupt level 2
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	intcode
  6783   000008                     __pintcode:
  6784                           	callstack 0
  6785   000008                     _HighISR:
  6786                           	callstack 24
  6787                           
  6788                           ; BSR set to: 14
  6789                           ;incstack = 0
  6790   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6791   00000A                     
  6792                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6793   00000A  010E               	movlb	14	; () banked
  6794   00000C  AB33               	btfss	51,5,b	;volatile
  6795   00000E  EF0B  F000         	goto	i2u83_41
  6796   000012  EF0D  F000         	goto	i2u83_40
  6797   000016                     i2u83_41:
  6798   000016  EF15  F000         	goto	i2l383
  6799   00001A                     i2u83_40:
  6800   00001A                     
  6801                           ; BSR set to: 14
  6802                           ;interrupts.c: 25:     increment_seconds();
  6803   00001A  ECB7  F00F         	call	_increment_seconds	;wreg free
  6804   00001E                     
  6805                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6806   00001E  0EE7               	movlw	231
  6807   000020  6ED4               	movwf	212,c	;volatile
  6808   000022                     
  6809                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6810   000022  0E95               	movlw	149
  6811   000024  6ED3               	movwf	211,c	;volatile
  6812   000026                     
  6813                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6814   000026  010E               	movlb	14	; () banked
  6815   000028  9B33               	bcf	51,5,b	;volatile
  6816   00002A                     i2l383:
  6817                           
  6818                           ; BSR set to: 14
  6819   00002A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6820   00002C  0011               	retfie		f
  6821   00002E                     __end_of_HighISR:
  6822                           	callstack 0
  6823                           
  6824 ;; *************** function _increment_seconds *****************
  6825 ;; Defined at:
  6826 ;;		line 297 in file "dc_motor.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		status,2, status,0
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6844 ;;Total ram usage:        0 bytes
  6845 ;; Hardware stack levels used: 1
  6846 ;; This function calls:
  6847 ;;		Nothing
  6848 ;; This function is called by:
  6849 ;;		_HighISR
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           	psect	text41
  6854   001F6E                     __ptext41:
  6855                           	callstack 0
  6856   001F6E                     _increment_seconds:
  6857                           	callstack 24
  6858   001F6E                     
  6859                           ;dc_motor.c: 299:     seconds += 1;
  6860   001F6E  4A55               	infsnz	_seconds^0,f,c
  6861   001F70  2A56               	incf	(_seconds+1)^0,f,c
  6862   001F72  0012               	return		;funcret
  6863   001F74                     __end_of_increment_seconds:
  6864                           	callstack 0
  6865   000000                     
  6866                           	psect	rparam
  6867   000000                     
  6868                           	psect	temp
  6869   00005B                     btemp:
  6870                           	callstack 0
  6871   00005B                     	ds	1
  6872   000000                     int$flags	set	btemp
  6873   000000                     wtemp8	set	btemp+1
  6874   000000                     ttemp5	set	btemp+1
  6875   000000                     ttemp6	set	btemp+4
  6876   000000                     ttemp7	set	btemp+8
  6877                           
  6878                           	psect	idloc
  6879                           
  6880                           ;Config register IDLOC0 @ 0x200000
  6881                           ;	unspecified, using default values
  6882   200000                     	org	2097152
  6883   200000  0FFF               	dw	4095
  6884                           
  6885                           ;Config register IDLOC1 @ 0x200002
  6886                           ;	unspecified, using default values
  6887   200002                     	org	2097154
  6888   200002  0FFF               	dw	4095
  6889                           
  6890                           ;Config register IDLOC2 @ 0x200004
  6891                           ;	unspecified, using default values
  6892   200004                     	org	2097156
  6893   200004  0FFF               	dw	4095
  6894                           
  6895                           ;Config register IDLOC3 @ 0x200006
  6896                           ;	unspecified, using default values
  6897   200006                     	org	2097158
  6898   200006  0FFF               	dw	4095
  6899                           
  6900                           ;Config register IDLOC4 @ 0x200008
  6901                           ;	unspecified, using default values
  6902   200008                     	org	2097160
  6903   200008  0FFF               	dw	4095
  6904                           
  6905                           ;Config register IDLOC5 @ 0x20000A
  6906                           ;	unspecified, using default values
  6907   20000A                     	org	2097162
  6908   20000A  0FFF               	dw	4095
  6909                           
  6910                           ;Config register IDLOC6 @ 0x20000C
  6911                           ;	unspecified, using default values
  6912   20000C                     	org	2097164
  6913   20000C  0FFF               	dw	4095
  6914                           
  6915                           ;Config register IDLOC7 @ 0x20000E
  6916                           ;	unspecified, using default values
  6917   20000E                     	org	2097166
  6918   20000E  0FFF               	dw	4095
  6919                           
  6920                           	psect	config
  6921                           
  6922                           ;Config register CONFIG1L @ 0x300000
  6923                           ;	External Oscillator mode Selection bits
  6924                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6925                           ;	Power-up default value for COSC bits
  6926                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6927   300000                     	org	3145728
  6928   300000  AA                 	db	170
  6929                           
  6930                           ;Config register CONFIG1H @ 0x300001
  6931                           ;	unspecified, using default values
  6932                           ;	Clock Out Enable bit
  6933                           ;	CLKOUTEN = 0x1, unprogrammed default
  6934                           ;	Clock Switch Enable bit
  6935                           ;	CSWEN = 0x1, unprogrammed default
  6936                           ;	Fail-Safe Clock Monitor Enable bit
  6937                           ;	FCMEN = 0x1, unprogrammed default
  6938   300001                     	org	3145729
  6939   300001  FF                 	db	255
  6940                           
  6941                           ;Config register CONFIG2L @ 0x300002
  6942                           ;	unspecified, using default values
  6943                           ;	Master Clear Enable bit
  6944                           ;	MCLRE = 0x1, unprogrammed default
  6945                           ;	Power-up Timer Enable bit
  6946                           ;	PWRTE = 0x1, unprogrammed default
  6947                           ;	Low-power BOR enable bit
  6948                           ;	LPBOREN = 0x1, unprogrammed default
  6949                           ;	Brown-out Reset Enable bits
  6950                           ;	BOREN = 0x3, unprogrammed default
  6951   300002                     	org	3145730
  6952   300002  FF                 	db	255
  6953                           
  6954                           ;Config register CONFIG2H @ 0x300003
  6955                           ;	unspecified, using default values
  6956                           ;	Brown Out Reset Voltage selection bits
  6957                           ;	BORV = 0x3, unprogrammed default
  6958                           ;	ZCD Disable bit
  6959                           ;	ZCD = 0x1, unprogrammed default
  6960                           ;	PPSLOCK bit One-Way Set Enable bit
  6961                           ;	PPS1WAY = 0x1, unprogrammed default
  6962                           ;	Stack Full/Underflow Reset Enable bit
  6963                           ;	STVREN = 0x1, unprogrammed default
  6964                           ;	Debugger Enable bit
  6965                           ;	DEBUG = 0x1, unprogrammed default
  6966                           ;	Extended Instruction Set Enable bit
  6967                           ;	XINST = 0x1, unprogrammed default
  6968   300003                     	org	3145731
  6969   300003  FF                 	db	255
  6970                           
  6971                           ;Config register CONFIG3L @ 0x300004
  6972                           ;	WDT Period Select bits
  6973                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6974                           ;	WDT operating mode
  6975                           ;	WDTE = OFF, WDT Disabled
  6976   300004                     	org	3145732
  6977   300004  9F                 	db	159
  6978                           
  6979                           ;Config register CONFIG3H @ 0x300005
  6980                           ;	unspecified, using default values
  6981                           ;	WDT Window Select bits
  6982                           ;	WDTCWS = 0x7, unprogrammed default
  6983                           ;	WDT input clock selector
  6984                           ;	WDTCCS = 0x7, unprogrammed default
  6985   300005                     	org	3145733
  6986   300005  FF                 	db	255
  6987                           
  6988                           ;Config register CONFIG4L @ 0x300006
  6989                           ;	unspecified, using default values
  6990                           ;	Write Protection Block 0
  6991                           ;	WRT0 = 0x1, unprogrammed default
  6992                           ;	Write Protection Block 1
  6993                           ;	WRT1 = 0x1, unprogrammed default
  6994                           ;	Write Protection Block 2
  6995                           ;	WRT2 = 0x1, unprogrammed default
  6996                           ;	Write Protection Block 3
  6997                           ;	WRT3 = 0x1, unprogrammed default
  6998                           ;	Write Protection Block 3
  6999                           ;	WRT4 = 0x1, unprogrammed default
  7000                           ;	Write Protection Block 3
  7001                           ;	WRT5 = 0x1, unprogrammed default
  7002                           ;	Write Protection Block 3
  7003                           ;	WRT6 = 0x1, unprogrammed default
  7004                           ;	Write Protection Block 3
  7005                           ;	WRT7 = 0x1, unprogrammed default
  7006   300006                     	org	3145734
  7007   300006  FF                 	db	255
  7008                           
  7009                           ;Config register CONFIG4H @ 0x300007
  7010                           ;	unspecified, using default values
  7011                           ;	Configuration Register Write Protection bit
  7012                           ;	WRTC = 0x1, unprogrammed default
  7013                           ;	Boot Block Write Protection bit
  7014                           ;	WRTB = 0x1, unprogrammed default
  7015                           ;	Data EEPROM Write Protection bit
  7016                           ;	WRTD = 0x1, unprogrammed default
  7017                           ;	Scanner Enable bit
  7018                           ;	SCANE = 0x1, unprogrammed default
  7019                           ;	Low Voltage Programming Enable bit
  7020                           ;	LVP = 0x1, unprogrammed default
  7021   300007                     	org	3145735
  7022   300007  FF                 	db	255
  7023                           
  7024                           ;Config register CONFIG5L @ 0x300008
  7025                           ;	unspecified, using default values
  7026                           ;	UserNVM Program Memory Code Protection bit
  7027                           ;	CP = 0x1, unprogrammed default
  7028                           ;	DataNVM Memory Code Protection bit
  7029                           ;	CPD = 0x1, unprogrammed default
  7030   300008                     	org	3145736
  7031   300008  FF                 	db	255
  7032                           
  7033                           ;Config register CONFIG5H @ 0x300009
  7034                           ;	unspecified, using default values
  7035   300009                     	org	3145737
  7036   300009  FF                 	db	255
  7037                           
  7038                           ;Config register CONFIG6L @ 0x30000A
  7039                           ;	unspecified, using default values
  7040                           ;	Table Read Protection Block 0
  7041                           ;	EBTR0 = 0x1, unprogrammed default
  7042                           ;	Table Read Protection Block 1
  7043                           ;	EBTR1 = 0x1, unprogrammed default
  7044                           ;	Table Read Protection Block 2
  7045                           ;	EBTR2 = 0x1, unprogrammed default
  7046                           ;	Table Read Protection Block 3
  7047                           ;	EBTR3 = 0x1, unprogrammed default
  7048                           ;	Table Read Protection Block 4
  7049                           ;	EBTR4 = 0x1, unprogrammed default
  7050                           ;	Table Read Protection Block 5
  7051                           ;	EBTR5 = 0x1, unprogrammed default
  7052                           ;	Table Read Protection Block 6
  7053                           ;	EBTR6 = 0x1, unprogrammed default
  7054                           ;	Table Read Protection Block 7
  7055                           ;	EBTR7 = 0x1, unprogrammed default
  7056   30000A                     	org	3145738
  7057   30000A  FF                 	db	255
  7058                           
  7059                           ;Config register CONFIG6H @ 0x30000B
  7060                           ;	unspecified, using default values
  7061                           ;	Boot Block Table Read Protection bit
  7062                           ;	EBTRB = 0x1, unprogrammed default
  7063   30000B                     	org	3145739
  7064   30000B  FF                 	db	255
  7065                           tosu	equ	0xFFF
  7066                           tosh	equ	0xFFE
  7067                           tosl	equ	0xFFD
  7068                           stkptr	equ	0xFFC
  7069                           pclatu	equ	0xFFB
  7070                           pclath	equ	0xFFA
  7071                           pcl	equ	0xFF9
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           indf0	equ	0xFEF
  7079                           postinc0	equ	0xFEE
  7080                           postdec0	equ	0xFED
  7081                           preinc0	equ	0xFEC
  7082                           plusw0	equ	0xFEB
  7083                           fsr0h	equ	0xFEA
  7084                           fsr0l	equ	0xFE9
  7085                           wreg	equ	0xFE8
  7086                           indf1	equ	0xFE7
  7087                           postinc1	equ	0xFE6
  7088                           postdec1	equ	0xFE5
  7089                           preinc1	equ	0xFE4
  7090                           plusw1	equ	0xFE3
  7091                           fsr1h	equ	0xFE2
  7092                           fsr1l	equ	0xFE1
  7093                           bsr	equ	0xFE0
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           preinc2	equ	0xFDC
  7098                           plusw2	equ	0xFDB
  7099                           fsr2h	equ	0xFDA
  7100                           fsr2l	equ	0xFD9
  7101                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         338
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      90
    BANK0           160     44     152
    BANK1           256      0     144
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _return_back->_turnLeft
    _return_back->_turnRight
    _TimedfullSpeedAhead->_setMotorPWM
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   93108
                                             56 COMRAM    24    24      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                  _get_wall_presence
                    _initDCmotorsPWM
                           _moveBack
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   29461
                                             29 COMRAM     6     2      4
                _TimedfullSpeedAhead
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    4567
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4393
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   30297
                                             29 COMRAM    12     6      6
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    5207
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    4904
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBack                                             6     0      6    4795
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3957
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _moveBack
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
     _setMotorPWM
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _moveBack
   _return_back
     _TimedfullSpeedAhead
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      5A       1       95.7%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24A      60        0.0%
DATA                 0      0     24A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 16:42:19 2022

               _color_read_Red 1C06             RobotMovement@color 001E                _color_read_Blue 1CF6  
                           l71 13EA                             l73 1420                             l82 1EF4  
                           l74 1400                             l91 1CA4                             l67 13CE  
                           l85 1C54                             l77 1412                             l94 1CF4  
                           l88 1D44            ___wmul@multiplicand 0003               _color_read_Clear 1CA6  
             ?_calibrate_black 0001               _color_read_Green 1C56            RobotMovement@motorL 0020  
          RobotMovement@motorR 0022              ??_Interrupts_init 0001                            l112 1DEC  
                          l113 1DEE                            l114 1E02                            l115 1E04  
                          l116 1E18                            l213 0F00                            l141 12E8  
                          l109 0D94                            l118 1E1A                            l206 1984  
                          l302 0BDA                            l216 1D8E                            l144 171A  
                          l136 08AA                            l312 0C28                            l225 105A  
                          l241 1670                            l234 11AA                            l138 08B2  
                          l306 0BDA                            l251 1C04                            l147 185A  
                          l342 1E88                            l263 1A6C                            l351 1F6C  
                          l248 1548                            l360 1E5C                            l345 1EAE  
                          l257 19F8                            l433 0A6E                            l282 03B2  
                          l354 1F58                            l283 03F4                            l339 1E86  
                          l452 1ED4                            l348 1F62                            l292 1F4E  
                          l277 022E                            l357 1F38                            l278 0270  
                          l463 1B3A                            l296 1DD6                            l464 1B4A  
                          l377 1F44                            l289 0514                            l449 1F14  
                          l486 17BE                            l479 17AE                            l950 1AE0  
                          l943 1AD8                            _RGB 00EC               ?_calibrate_white 0001  
                          wreg 000FE8                           l3001 08D2                           l2211 1F5A  
                         l3011 08EE                           l3003 08D6                           l2301 0D96  
                         l2213 1F5E                           l2221 1F54                           l3021 090A  
                         l3013 08F6                           l3005 08DA                           l2311 0E60  
                         l2303 0DB2                           l2207 1E88                           l2231 1E2A  
                         l2223 1F64                           l2215 1F30                           l3031 0952  
                         l3023 0912                           l3015 08FA                           l3007 08DE  
                         l2241 1EB0                           l2313 0E7C                           l2305 0E06  
                         l2321 1E6E                           l2209 1E98                           l2233 1E32  
                         l2225 1F68                           l2217 1F34                           l3041 099E  
                         l3033 0968                           l3025 091A                           l3017 08FE  
                         l3009 08E6                           l2251 1A88                           l2243 1ECC  
                         l2315 0EC0                           l2307 0E1A                           l2403 1D46  
                         l2411 0F02                           l2323 1E70                           l2235 1E58  
                         l2227 1E1E                           l2219 1F50                           l2331 1672  
                         l3051 0A18                           l3043 09BA                           l3035 097A  
                         l3027 0932                           l3019 0902                           l2261 1AC2  
                         l2253 1A90                           l2309 0E1E                           l2405 1D5E  
                         l2501 1120                           l2325 1E72                           l2317 1E5E  
                         l2237 1E5A                           l2229 1E22                           l2341 16DA  
                         l2333 167E                           l3045 09D6                           l3037 097E  
                         l3053 0A44                           l3029 0946                           l2263 1ACA  
                         l2255 1A98                           l2247 1A6E                           l2407 1D6A  
                         l2431 0F5E                           l2423 0F1A                           l2511 1166  
                         l2503 112C                           l2327 1E74                           l2319 1E68  
                         l2271 1C4C                           l2351 11B8                           l2343 16E6  
                         l2335 1694                           l3055 0A56                           l3047 09EA  
                         l3039 0992                           l2265 1ACC                           l2257 1AA6  
                         l2249 1A76                           l2409 1D76                           l2433 0F6A  
                         l2425 0F3A                           l2417 0F12                           l2513 116E  
                         l2505 1138                           l2601 150E                           l2281 1C56  
                         l2361 1220                           l2353 11CE                           l2345 16FC  
                         l2337 16A6                           l2329 1ED8                           l3049 0A06  
                         l2267 1AD2                           l2259 1AAC                           l2451 0FE6  
                         l2435 0F82                           l2427 0F46                           l2531 158A  
                         l2515 118A                           l2507 1144                           l2603 1524  
                         l2275 1CF6                           l2283 1C9C                           l2371 1282  
                         l2363 1236                           l2355 11E0                           l2347 170E  
                         l2339 16B2                           l2611 19B2                           l2621 19FA  
                         l2461 103A                           l2453 0FF2                           l2445 0FAE  
                         l2437 0F8A                           l2429 0F52                           l2541 15DE  
                         l2533 1596                           l2525 1552                           l2517 118E  
                         l2509 1150                           l2605 152C                           l2277 1D3C  
                         l2269 1C06                           l2293 1DD8                           l2373 1298  
                         l2365 1248                           l2357 11EC                           l2349 11AC  
                         l2701 13C4                           l2381 0C48                           l2613 19BE  
                         l2631 1A4A                           l2623 1A06                           l2463 103E  
                         l2455 0FFE                           l2447 0FCE                           l2439 0FA6  
                         l2551 1612                           l2535 15A2                           l2527 1572  
                         l2519 154A                           l2471 1064                           l2287 1CA6  
                         l2295 1DE6                           l2375 12B0                           l2367 126A  
                         l2359 1214                           l2703 13C6                           l2391 0CD6  
                         l2383 0C64                           l2615 19CA                           l2607 1986  
                         l2625 1A26                           l2633 1A56                           l2457 1016  
                         l2449 0FDA                           l2561 1654                           l2553 161E  
                         l2537 15BA                           l2529 157E                           l2481 1098  
                         l2465 105C                           l2289 1CEC                           l2297 1DFC  
                         l2377 12CC                           l2369 1276                           l2713 13FC  
                         l2705 13CA                           l2641 1B10                           l2393 0CFC  
                         l2385 0C7C                           l2721 0538                           l2801 1930  
                         l2617 19D6                           l2609 1992                           l2627 1A32  
                         l2459 101E                           l2555 162A                           l2547 15E6  
                         l2539 15C2                           l2491 10DC                           l2483 10A4  
                         l2571 144A                           l2563 1422                           l2299 1E12  
                         l2715 140E                           l2707 13CC                           l2651 174A  
                         l2643 1B1A                           l2635 1AE2                           l2395 0D18  
                         l2387 0CA2                           l2379 0C2A                           l2731 05A0  
                         l2723 054A                           l2811 196C                           l2803 1954  
                         l2619 19E2                           l2629 1A3E                           l2557 1636  
                         l2549 1606                           l2493 10F8                           l2485 10B0  
                         l2477 106C                           l2581 1492                           l2573 1456  
                         l2901 03DA                           l2709 13DC                           l2821 1BB4  
                         l2661 179C                           l2653 1756                           l2645 171C  
                         l2637 1AF2                           l2397 0D30                           l2389 0CBE  
                         l2741 065C                           l2733 05B2                           l2725 0556  
                         l2717 0516                           l2813 1976                           l2805 195E  
                         l2559 164C                           l2487 10BC                           l2479 108C  
                         l2591 14BE                           l2583 149A                           l2575 1462  
                         l2911 0458                           l2903 040E                           l2671 12F8  
                         l2831 1BF8                           l2823 1BC4                           l2663 179E  
                         l2655 1764                           l2647 172C                           l2639 1B00  
                         l2399 0D38                           l2751 071A                           l2743 066C  
                         l2735 05BE                           l2727 057E                           l2719 0522  
                         l2815 1978                           l2807 1960                           l2489 10D4  
                         l2593 14DE                           l2585 14B6                           l2577 146E  
                         l2569 142A                           l2921 04B8                           l2913 0472  
                         l2905 0412                           l2841 0076                           l2833 0032  
                         l2681 1320                           l2673 1308                           l2825 1BD4  
                         l2665 17A8                           l2657 176E                           l2649 1742  
                         l2761 07F8                           l2753 073A                           l2745 068C  
                         l2737 05DE                           l2729 058A                           l2817 1982  
                         l2809 196A                           l2499 1100                           l2595 14EA  
                         l2579 147A                           l2931 04D8                           l2923 04BC  
                         l2915 0476                           l2907 0430                           l2851 00CE  
                         l2843 0088                           l2835 0044                           l2691 136A  
                         l2683 1322                           l2675 1312                           l2667 12EA  
                         l2827 1BE0                           l2819 1BAC                           l2659 178C  
                         l2771 0838                           l2763 0802                           l2755 074E  
                         l2747 06A0                           l2739 05F2                           l2597 14F6  
                         l2933 04EC                           l2925 04D0                           l2917 048A  
                         l2909 0444                           l2861 0104                           l2845 009C  
                         l2837 0058                           l2941 1D90                           l2693 137C  
                         l2685 1334                           l2677 131C                           l2669 12EE  
                         l2829 1BEC                           l2773 0868                           l2757 07B8  
                         l2749 070A                           l2781 17C0                           l2599 1502  
                         l2935 04F0                           l2919 049E                           l2871 0180  
                         l2863 0108                           l2847 00B6                           l2839 0072  
                         l2943 1DAC                           l2695 138E                           l2687 1346  
                         l2679 131E                           l2775 0880                           l2759 07C8  
                         l2791 181C                           l2783 17CC                           l2951 0AA0  
                         l2937 050C                           l2881 0256                           l2873 01B2  
                         l2865 010C                           l2857 00D6                           l2849 00BA  
                         l2945 1DD2                           l2697 13A0                           l2689 1358  
                         l2777 0890                           l2769 080A                           l2793 1828  
                         l2785 17E2                           l2961 0B38                           l2953 0AB8  
                         l2891 0304                           l2883 028A                           l2875 01E6  
                         l2859 00EA                           l2867 0128                           l2699 13B2  
                         l2779 0894                           l2939 1F46                           l2787 17EE  
                         l2963 0B60                           l2955 0AE0                           l2971 0BF4  
                         l2947 0A76                           l2893 0336                           l2885 028E  
                         l2877 01EE                           l2869 013C                           l2981 1EFE  
                         l2789 17FA                           l2797 18F6                           l2973 0C0E  
                         l2965 0B78                           l2957 0AF8                           l2949 0A7A  
                         l2895 036A                           l2879 0214                           l2887 02AC  
                         l2983 1F10                           l2799 1906                           l2975 0C20  
                         l2967 0BA8                           l2959 0B20                           l2991 08BC  
                         l2977 1F3A                           l2897 0372                           l2889 02C0  
                         l2985 1F12                           l2969 0BEE                           l2993 08C8  
                         l2899 0398                           l2979 1EF6                           l2995 08C8  
                         l2987 08B4                           l2997 08CC                           l2989 08B8  
                         l2999 08D0                           u2000 0AE0                           u2001 0ADC  
                         u2010 0B20                           u2011 0B1C                           u1300 1AC2  
                         u2020 0B60                           u1301 1ABE                           u2021 0B5C  
                         u1310 1DE6                           u2030 0BA8                           u1311 1DE2  
                         u2031 0BA4                           u1400 103A                           u1240 1E98  
                         u1320 1DFC                           u2040 0C0E                           u1401 1036  
                         u1241 1E94                           u1321 1DF8                           u2041 0C0A  
                         u1410 105A                           u1250 1EAE                           u1330 1E12  
                         u2050 0C20                           u1411 1056                           u1251 1EAA  
                         u1331 1E0E                           u2051 0C1C                           u1340 0DB2  
                         u1500 1A6C                           u1420 10F8                           u1260 1E46  
                         u2060 0968                           u1341 0DAE                           u1501 1A68  
                         u1421 10F4                           u1261 1E3E                           u2061 0964  
                         u1350 0E7C                           u1430 118A                           u1510 1B00  
                         u2070 097A                           u1351 0E78                           u1431 1186  
                         u1511 1AFC                           u2071 0976                           u1280 1A88  
                         u1440 11AA                           u1520 1B3A                           u1360 0C48  
                         u2080 0A18                           u1281 1A84                           u1441 11A6  
                         u1601 1374                           u1521 1B36                           u1361 0C44  
                         u2081 0A14                           u1290 1AA6                           u1450 15DE  
                         u1530 1742                           u1370 0CA2                           u2090 0A56  
                         u1291 1AA2                           u1451 15DA                           u1611 1386  
                         u1531 173E                           u1371 0C9E                           u2091 0A52  
                         u1460 1670                           u1540 1764                           u1380 0CFC  
                         u1700 05DE                           u1461 166C                           u1621 1398  
                         u1541 1760                           u1381 0CF8                           u1701 05DA  
                         u1390 0FA6                           u1470 14B6                           u1278 1E48  
                         u1550 178C                           u1710 068C                           u1391 0FA2  
                         u1471 14B2                           u1631 13AA                           u1551 1788  
                         u1711 0688                           u1480 1548                           u1720 073A  
                         u1800 1854                           u1481 1544                           u1641 13BC  
                         u1561 132C                           u1721 0736                           u1801 184E  
                         u1650 13DC                           u1810 1856                           u1490 19F8  
                         _T2PR 000FBC                     _Black_rule 016C                           u1651 13D8  
                         u1571 133E                           u1731 07D2                           u2507 0560  
                         u1491 19F4                           u1900 02C0                           u1820 0044  
                         u1660 13EA                           u1901 02BC                           u1821 0040  
                         u1661 13E6                           u1581 1350                           u1741 07E4  
                         u2517 0594                           u1910 0336                           u1830 0088  
                         u1670 13F8                           u1911 0332                           u1831 0084  
                         u2607 128C                           u1671 13F4                           u1591 1362  
                         u2527 12FE                           u1751 0830                           u1920 0398  
                         u1840 00CE                           u1680 140E                           u2617 1484  
                         u1921 0394                           u1841 00CA                           u2537 1688  
                         u1681 140A                           u1761 0842                           u1930 03DA  
                         u1850 0128                           u1690 1420                           u2627 1518  
                         u1931 03D6                           u1851 0124                           u2547 16BC  
                         u1691 141C                           u1771 0854                           u2467 0924  
                         u1940 0444                           u1860 013C                           u1780 0880  
                         u2637 10C6                           u1941 0440                           u1861 0138  
                         u2557 16F0                           u1781 087C                           u2477 17D6  
                         u1950 048A                           u1870 01B2                           u1790 08AA  
                         u2647 115A                           u1951 0486                           u1871 01AE  
                         u2567 11C2                           u1791 08A6                           u2487 1804  
                         u1960 04D0                           u1880 0214                           u2657 15AC  
                         u1961 04CC                           u1881 0210                           u2577 11F6  
                         u2497 052C                           u1970 050C                           u1890 0256  
                         u2667 1640                           u1971 0508                           u1891 0252  
                         u2587 122A                           u1980 1DAC                           u2677 0F74  
                         u1981 1DA8                           u2597 125E                           u1990 0AA0  
                         u2687 1008                           u1991 0A9C                           u2697 1D80  
                         _main 08B4                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 005B  
                         _stop 1D46                           prodh 000FF4                           prodl 000FF3  
                         start 002E         __end_of_color_read_Red 1C56                __end_of_HighISR 002E  
                 ___param_bank 000000             _get_color_code$460 00D4             _get_color_code$458 00CC  
           _get_color_code$459 00D0                          ?_main 0001                __end_of___lldiv 17C0  
                        ?_stop 0014            _add_seconds_to_list 1D90                    _Black_setup 0060  
              __end_of___lwdiv 1AE2                          i2l266 1F72                          i2l383 002A  
                        _TMR0H 000FD4                          _TMR0L 000FD3            ___lmul@multiplicand 0005  
   __end_of_I2C_2_Master_Start 1F64     __end_of_I2C_2_Master_Write 1F3A             _get_color_distance 0C2A  
                        _index 0053                          _state 0051                          tablat 000FF5  
                        plusw0 000FEB                          plusw1 000FE3                          plusw2 000FDB  
          ?_get_color_distance 0007                          ttemp5 005C                          ttemp6 005F  
                        ttemp7 0063                          status 000FD8                          wtemp8 005C  
         ?_add_seconds_to_list 0001                     _Green_rule 00A8        __end_of_color_read_Blue 1D46  
        _I2C_2_Master_RepStart 1F64                ?_color_read_Red 0005                __initialization 185C  
                 __end_of_main 0A76                   __end_of_stop 1D90                   _turnLeftLong 154A  
         ??_get_color_distance 001F                         ??_main 0039                         ??_stop 0018  
                __activetblptr 000000            _get_color_code$2442 00C0                   ?_setMotorPWM 000E  
                       _CCPR1H 000FAA                         _CCPR2H 000FA6                         _CCPR3H 000F25  
                       _CCPR4H 000F21                         _RE2PPS 000E74                         _RD5PPS 000E6F  
                       _RC7PPS 000E69                         _RD6PPS 000E70                         _RE4PPS 000E76  
                       i2l1751 1F6E                         i2l1911 001E                         i2l1913 0022  
                       i2l1915 0026                         i2l1907 000A                         i2l1909 001A  
                       _RG6PPS 000E88                      ??_HighISR 0001       __end_of_color_click_init 1422  
        ??_add_seconds_to_list 0001                 RobotMovement@i 0026          __end_of_RobotMovement 0516  
             ??_get_color_code 0037                  ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD  
                       ___lmul 1AE2       get_color_distance@color1 0007       get_color_distance@color2 0013  
                       ___wmul 1EB0                      ??___lldiv 0015                      ??___lwdiv 000B  
                  _Color_rules 0100                         clear_0 18C2                         clear_1 18CE  
                       clear_2 18DA                         isa$std 000001               __end_of_moveBack 1A6E  
        calibrate_black@clear1 0010          calibrate_black@clear2 0012                   __pdataCOMRAM 0057  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                 ?_return_back 001E                 _Lightblue_rule 0184                     _White_rule 0178  
                       stop@mL 0014                         stop@mR 0016              ??_initDCmotorsPWM 0003  
             __end_of_turnLeft 105C          __end_of_set_led_color 1E1C                     __accesstop 0060  
      __end_of__initialization 18EC       __end_of_color_read_Clear 1CF6        get_wall_presence@clear1 0010  
      get_wall_presence@clear2 0012       __end_of_color_read_Green 1CA6         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 1F3A  
               __pcstackCOMRAM 0001                   __pidataBANK0 1B4C                   __pidataBANK1 1F16  
          __end_of_Timer0_init 1F16                     __pbssBANK0 00EC                     __pbssBANK1 0100  
                   __pbssBANK2 0200                  _turnRightLong 1422              _color_writetoaddr 1ED6  
                 _T2CLKCONbits 000FBF             ?_color_writetoaddr 0003                        ?___lmul 0001  
                      ?___wmul 0001                 main@color_code 003B                 ___lmul@product 0009  
              get_color_code@i 00DE            ??_color_writetoaddr 0004              return_back@motorL 001E  
            return_back@motorR 0020        get_color_code@min_index 00DA                        i2u83_40 001A  
                      i2u83_41 0016                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      get_color_code@min_value 00D8              _get_wall_presence 17C0                    _Orange_rule 0078  
           ?_get_wall_presence 000C        __end_of_Interrupts_init 1F46         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        _HighISR 0008      __end_of_color_writetoaddr 1EF6  
               ?_turnRightLong 0014             _I2C_2_Master_Start 1F5A             _I2C_2_Master_Write 1F2E  
                    ?_moveBack 0014                        __Hparam 0000            ??_get_wall_presence 000E  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 1EF6  
            __end_of_get_state 1F50                        ___lldiv 171C            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 1A6E            ?_I2C_2_Master_Write 0001                        __pcinit 185C  
                      __ramtop 0E00                      ?_turnLeft 0014                        __ptext0 08B4  
                      __ptext1 0A76                        __ptext2 1986                        __ptext3 18F6  
                      __ptext4 17C0                        __ptext5 1F46                        __ptext6 0516  
                      __ptext7 0C2A                        __ptext8 1AE2                        __ptext9 171C  
                    _T2CONbits 000FBD                        _seconds 0055                      _T2HLTbits 000FBE  
    __end_of_get_wall_presence 185C           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 18EC              ?_color_click_init 0001                     ??_moveBack 001A  
              ___lldiv@divisor 0011             ??_color_click_init 0016                ___lldiv@counter 0019  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                    _White_setup 006C                _initDCmotorsPWM 18F6  
                   ??_turnLeft 0018                      _PORTFbits 000F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 11AC                    _Yellow_rule 0090                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
         _calibrate_black$2443 0014    __end_of_add_seconds_to_list 1DD8               fullSpeedAhead@mL 0014  
             fullSpeedAhead@mR 0016       color_writetoaddr@address 0004     get_color_distance@B_offset 0033  
      ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001                ??_turnRightLong 0018  
                  _CCP1CONbits 000FAB     get_color_distance@G_offset 0031              _increment_seconds 1F6E  
            ?_color_read_Clear 0005                    _CCP2CONbits 000FA7              ??_calibrate_black 000E  
            ?_color_read_Green 0005                    _CCP3CONbits 000F26                    _CCP4CONbits 000F22  
                   main@motorL 003F                     main@motorR 0048              ??_calibrate_white 000C  
           ?_increment_seconds 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
               _fullSpeedAhead 1BAC     get_color_distance@R_offset 002F                      _Blue_rule 009C  
          ??_increment_seconds 0001                 __end_of___lmul 1B4C                 __end_of___wmul 1ED6  
                __pidataCOMRAM 1F74            color_read_Clear@tmp 000A            start_initialization 185C  
          _TimedfullSpeedAhead 1986      __end_of_increment_seconds 1F74                      _Pink_rule 0084  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1986           ?_TimedfullSpeedAhead 0014  
       __end_of_fullSpeedAhead 1C06                       ??___lmul 0009                       ??___wmul 0005  
                  __pdataBANK0 0060                    __pdataBANK1 0178         _get_color_distance$421 002B  
       _get_color_distance$417 0023         _get_color_distance$419 0027                    __pbssCOMRAM 0051  
                __pcstackBANK0 00C0            get_color_code@value 00DC                       ?_HighISR 0001  
                _RobotMovement 0032               ___lwdiv@dividend 0007          ??_TimedfullSpeedAhead 001A  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0014                     moveBack@mL 0014  
                   moveBack@mR 0016                      __pintcode 0008                       ?___lldiv 000D  
                     ?___lwdiv 0007                  ?_turnLeftLong 0014                   moveBack@time 0018  
                    _get_state 1F46           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
        TimedfullSpeedAhead@mL 0014          TimedfullSpeedAhead@mR 0016    get_color_code@NormalizedRGB 00E0  
            _I2C_2_Master_Idle 1E88              _I2C_2_Master_Init 1E5E              _I2C_2_Master_Read 1E1C  
            _I2C_2_Master_Stop 1F50             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001                turnRightLong@mL 0014  
              turnRightLong@mR 0016                 turnLeftLong@mL 0014                 turnLeftLong@mR 0016  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 000F79                  _set_led_color 1DD8  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B                       _LATEbits 000F7D  
                     _LATFbits 000F7E                       _LATGbits 000F7F                       _PIE0bits 000E29  
               ?_RobotMovement 001E                       _PIE2bits 000E2B                    turnRight@mL 0014  
                  turnRight@mR 0016                       _PIR0bits 000E33               ?_initDCmotorsPWM 0001  
                    _wall_coef 0059                      _wait_time 0057                       _SSP2CON2 000EDA  
               ??_turnLeftLong 0018                       _SSP2STAT 000ED8             set_led_color@color 0001  
                   ?_get_state 0001      __end_of_I2C_2_Master_Idle 1EB0      __end_of_I2C_2_Master_Init 1E88  
    __end_of_I2C_2_Master_Read 1E5E              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1F5A  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                  _movement_list 0200  
                    main@state 003D              ??_color_read_Blue 0007                  ??_return_back 0022  
              _calibrate_black 11AC        TimedfullSpeedAhead@time 0018                      _turnRight 105C  
              _calibrate_white 1672              ___lmul@multiplier 0001                      copy_data0 1870  
                    copy_data1 1890                      copy_data2 18B0                 ?_set_led_color 0001  
__end_of_I2C_2_Master_RepStart 1F6E             color_read_Blue@tmp 000A            __end_of_setMotorPWM 0F02  
                     _Red_rule 00B4                       __Hrparam 0000                       __Lrparam 0000  
   __end_of_get_color_distance 0D96                 _get_color_code 0516                     _ANSELDbits 000EA7  
                   _ANSELFbits 000EB4                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 0009                ___lwdiv@counter 000D                     ?_turnRight 0014  
                     __ptext10 1BAC                       __ptext11 12EA                       __ptext20 1F2E  
                     __ptext12 1ED6                       __ptext21 1F50                       __ptext13 1672  
                     __ptext30 1422                       __ptext22 1F5A                       __ptext14 11AC  
                     __ptext31 105C                       __ptext23 1F64                       __ptext15 1DD8  
                     __ptext32 154A                       __ptext24 1E1C                       __ptext16 1C06  
                     __ptext41 1F6E                       __ptext33 0F02                       __ptext25 1E88  
                     __ptext17 1C56                       __ptext34 1D46                       __ptext26 1E5E  
                     __ptext18 1CA6                       __ptext35 19FA                       __ptext27 1D90  
                     __ptext19 1CF6                       __ptext36 0D96                       __ptext28 1EF6  
                     __ptext37 1EB0                       __ptext29 0032                       __ptext38 1A6E  
                     __ptext39 1F3A                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
              ??_RobotMovement 0024            __end_of_return_back 0C2A                     turnLeft@mL 0014  
                   turnLeft@mR 0016                 turnRightLong@i 001A                  turnLeftLong@i 001A  
        __end_of_turnRightLong 154A                       _moveBack 19FA                     turnRight@i 001C  
                   turnRight@k 001A                       isa$xinst 000000                       int$flags 005B  
       __end_of_get_color_code 08B4        __end_of_calibrate_black 12EA                       _turnLeft 0F02  
                  ??_get_state 0003        __end_of_calibrate_white 171C                     _INTCONbits 000FF2  
                  _setMotorPWM 0D96                ??_set_led_color 0003           __end_of_turnLeftLong 1672  
                     intlevel2 0000               ___lldiv@dividend 000D               ??_fullSpeedAhead 0018  
                    turnLeft@i 001C                      turnLeft@k 001A                ?_get_color_code 0035  
             _color_click_init 12EA                     _SSP2DATPPS 000E1D               ___lldiv@quotient 0015  
                   _SSP2CLKPPS 000E1C                    _return_back 0A76                    ??_turnRight 0018  
  __end_of_TimedfullSpeedAhead 19FA            RobotMovement@i_1265 0028  
