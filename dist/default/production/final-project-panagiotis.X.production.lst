

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 16:40:56 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 06/04/2022 GMT
    78                           ; 
    79                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112                           	psect	idataCOMRAM
   113   00234A                     __pidataCOMRAM:
   114                           	callstack 0
   115                           
   116                           ;initializer for _Black_setup
   117   00234A  0404               	dw	1028
   118   00234C  0000               	dw	0
   119   00234E  024B               	dw	587
   120   002350  0000               	dw	0
   121   002352  00A1               	dw	161
   122   002354  0000               	dw	0
   123                           
   124                           	psect	idataBANK0
   125   002084                     __pidataBANK0:
   126                           	callstack 0
   127                           
   128                           ;initializer for _White_setup
   129   002084  28FC               	dw	10492
   130   002086  0000               	dw	0
   131   002088  1B55               	dw	6997
   132   00208A  0000               	dw	0
   133   00208C  0770               	dw	1904
   134   00208E  0000               	dw	0
   135                           
   136                           ;initializer for _Yellow_rule
   137   002090  005D               	dw	93
   138   002092  0000               	dw	0
   139   002094  004C               	dw	76
   140   002096  0000               	dw	0
   141   002098  0014               	dw	20
   142   00209A  0000               	dw	0
   143                           
   144                           ;initializer for _Blue_rule
   145   00209C  0003               	dw	3
   146   00209E  0000               	dw	0
   147   0020A0  0009               	dw	9
   148   0020A2  0000               	dw	0
   149   0020A4  0024               	dw	36
   150   0020A6  0000               	dw	0
   151                           
   152                           ;initializer for _Green_rule
   153   0020A8  0019               	dw	25
   154   0020AA  0000               	dw	0
   155   0020AC  0036               	dw	54
   156   0020AE  0000               	dw	0
   157   0020B0  0008               	dw	8
   158   0020B2  0000               	dw	0
   159                           
   160                           ;initializer for _Red_rule
   161   0020B4  0048               	dw	72
   162   0020B6  0000               	dw	0
   163   0020B8  0002               	dw	2
   164   0020BA  0000               	dw	0
   165   0020BC  0002               	dw	2
   166   0020BE  0000               	dw	0
   167                           
   168                           ;initializer for _twothirds
   169   0020C0  000B               	dw	11
   170                           
   171                           ;initializer for _halfblock
   172   0020C2  0005               	dw	5
   173                           
   174                           ;initializer for _blockback
   175   0020C4  0010               	dw	16
   176                           
   177                           ;initializer for _blockahead
   178   0020C6  0010               	dw	16
   179                           
   180                           ;initializer for _wait_time
   181   0020C8  00DC               	dw	220
   182                           
   183                           ;initializer for _wall_coef
   184   0020CA  000F               	dw	15
   185                           
   186                           	psect	idataBANK1
   187   002220                     __pidataBANK1:
   188                           	callstack 0
   189                           
   190                           ;initializer for _White_rule
   191   002220  0064               	dw	100
   192   002222  0000               	dw	0
   193   002224  0064               	dw	100
   194   002226  0000               	dw	0
   195   002228  0064               	dw	100
   196   00222A  0000               	dw	0
   197                           
   198                           ;initializer for _Lightblue_rule
   199   00222C  0026               	dw	38
   200   00222E  0000               	dw	0
   201   002230  0048               	dw	72
   202   002232  0000               	dw	0
   203   002234  0054               	dw	84
   204   002236  0000               	dw	0
   205                           
   206                           ;initializer for _Orange_rule
   207   002238  005C               	dw	92
   208   00223A  0000               	dw	0
   209   00223C  0027               	dw	39
   210   00223E  0000               	dw	0
   211   002240  001C               	dw	28
   212   002242  0000               	dw	0
   213                           
   214                           ;initializer for _Pink_rule
   215   002244  004D               	dw	77
   216   002246  0000               	dw	0
   217   002248  003C               	dw	60
   218   00224A  0000               	dw	0
   219   00224C  0040               	dw	64
   220   00224E  0000               	dw	0
   221   000000                     _T0CON0bits	set	4053
   222   000000                     _T0CON1bits	set	4054
   223   000000                     _TRISDbits	set	3972
   224   000000                     _SSP2CON2bits	set	3802
   225   000000                     _SSP2CLKPPS	set	3612
   226   000000                     _SSP2DATPPS	set	3613
   227   000000                     _RC7PPS	set	3689
   228   000000                     _RE2PPS	set	3700
   229   000000                     _ANSELFbits	set	3764
   230   000000                     _TRISAbits	set	3969
   231   000000                     _TRISFbits	set	3974
   232   000000                     _PORTFbits	set	3982
   233   000000                     _TRISGbits	set	3975
   234   000000                     _TRISCbits	set	3971
   235   000000                     _TRISEbits	set	3973
   236   000000                     _SSP2BUF	set	3797
   237   000000                     _SSP2ADD	set	3798
   238   000000                     _SSP2CON1bits	set	3801
   239   000000                     _LATAbits	set	3961
   240   000000                     _LATGbits	set	3967
   241   000000                     _CCPR4H	set	3873
   242   000000                     _CCPR3H	set	3877
   243   000000                     _T2PR	set	4028
   244   000000                     _T2CONbits	set	4029
   245   000000                     _CCPR2H	set	4006
   246   000000                     _CCPR1H	set	4010
   247   000000                     _LATCbits	set	3963
   248   000000                     _LATEbits	set	3965
   249   000000                     _LATFbits	set	3966
   250   000000                     _RE4PPS	set	3702
   251   000000                     _RG6PPS	set	3720
   252   000000                     _RD5PPS	set	3695
   253   000000                     _ANSELDbits	set	3751
   254   000000                     _TMR0L	set	4051
   255   000000                     _TMR0H	set	4052
   256   000000                     _INTCONbits	set	4082
   257   000000                     _T2CLKCONbits	set	4031
   258   000000                     _T2HLTbits	set	4030
   259   000000                     _CCP1CONbits	set	4011
   260   000000                     _CCPTMRS0bits	set	4013
   261   000000                     _CCP2CONbits	set	4007
   262   000000                     _CCP3CONbits	set	3878
   263   000000                     _CCP4CONbits	set	3874
   264   000000                     _SSP2CON2	set	3802
   265   000000                     _SSP2STAT	set	3800
   266   000000                     _PIE0bits	set	3625
   267   000000                     _RD6PPS	set	3696
   268   000000                     _PIE2bits	set	3627
   269   000000                     _PIR0bits	set	3635
   270                           
   271                           ; #config settings
   272                           
   273                           	psect	cinit
   274   001A8A                     __pcinit:
   275                           	callstack 0
   276   001A8A                     start_initialization:
   277                           	callstack 0
   278   001A8A                     __initialization:
   279                           	callstack 0
   280                           
   281                           ; Initialize objects allocated to BANK1 (48 bytes)
   282                           ; load TBLPTR registers with __pidataBANK1
   283   001A8A  0E20               	movlw	low __pidataBANK1
   284   001A8C  6EF6               	movwf	tblptrl,c
   285   001A8E  0E22               	movlw	high __pidataBANK1
   286   001A90  6EF7               	movwf	tblptrh,c
   287   001A92  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   288   001A94  6EF8               	movwf	tblptru,c
   289   001A96  EE01  F078         	lfsr	0,__pdataBANK1
   290   001A9A  EE10 F030          	lfsr	1,48
   291   001A9E                     copy_data0:
   292   001A9E  0009               	tblrd		*+
   293   001AA0  CFF5 FFEE          	movff	tablat,postinc0
   294   001AA4  50E5               	movf	postdec1,w,c
   295   001AA6  50E1               	movf	fsr1l,w,c
   296   001AA8  E1FA               	bnz	copy_data0
   297                           
   298                           ; Initialize objects allocated to BANK0 (72 bytes)
   299                           ; load TBLPTR registers with __pidataBANK0
   300   001AAA  0E84               	movlw	low __pidataBANK0
   301   001AAC  6EF6               	movwf	tblptrl,c
   302   001AAE  0E20               	movlw	high __pidataBANK0
   303   001AB0  6EF7               	movwf	tblptrh,c
   304   001AB2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   305   001AB4  6EF8               	movwf	tblptru,c
   306   001AB6  EE00  F060         	lfsr	0,__pdataBANK0
   307   001ABA  EE10 F048          	lfsr	1,72
   308   001ABE                     copy_data1:
   309   001ABE  0009               	tblrd		*+
   310   001AC0  CFF5 FFEE          	movff	tablat,postinc0
   311   001AC4  50E5               	movf	postdec1,w,c
   312   001AC6  50E1               	movf	fsr1l,w,c
   313   001AC8  E1FA               	bnz	copy_data1
   314                           
   315                           ; Initialize objects allocated to COMRAM (12 bytes)
   316                           ; load TBLPTR registers with __pidataCOMRAM
   317   001ACA  0E4A               	movlw	low __pidataCOMRAM
   318   001ACC  6EF6               	movwf	tblptrl,c
   319   001ACE  0E23               	movlw	high __pidataCOMRAM
   320   001AD0  6EF7               	movwf	tblptrh,c
   321   001AD2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   322   001AD4  6EF8               	movwf	tblptru,c
   323   001AD6  EE00  F039         	lfsr	0,__pdataCOMRAM
   324   001ADA  EE10 F00C          	lfsr	1,12
   325   001ADE                     copy_data2:
   326   001ADE  0009               	tblrd		*+
   327   001AE0  CFF5 FFEE          	movff	tablat,postinc0
   328   001AE4  50E5               	movf	postdec1,w,c
   329   001AE6  50E1               	movf	fsr1l,w,c
   330   001AE8  E1FA               	bnz	copy_data2
   331                           
   332                           ; Clear objects allocated to BANK2 (200 bytes)
   333   001AEA  EE02  F000         	lfsr	0,__pbssBANK2
   334   001AEE  0EC8               	movlw	200
   335   001AF0                     clear_0:
   336   001AF0  6AEE               	clrf	postinc0,c
   337   001AF2  06E8               	decf	wreg,f,c
   338   001AF4  E1FD               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK1 (120 bytes)
   341   001AF6  EE01  F000         	lfsr	0,__pbssBANK1
   342   001AFA  0E78               	movlw	120
   343   001AFC                     clear_1:
   344   001AFC  6AEE               	clrf	postinc0,c
   345   001AFE  06E8               	decf	wreg,f,c
   346   001B00  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK0 (18 bytes)
   349   001B02  EE00  F0E6         	lfsr	0,__pbssBANK0
   350   001B06  0E12               	movlw	18
   351   001B08                     clear_2:
   352   001B08  6AEE               	clrf	postinc0,c
   353   001B0A  06E8               	decf	wreg,f,c
   354   001B0C  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to COMRAM (10 bytes)
   357   001B0E  EE00  F045         	lfsr	0,__pbssCOMRAM
   358   001B12  0E0A               	movlw	10
   359   001B14                     clear_3:
   360   001B14  6AEE               	clrf	postinc0,c
   361   001B16  06E8               	decf	wreg,f,c
   362   001B18  E1FD               	bnz	clear_3
   363   001B1A                     end_of_initialization:
   364                           	callstack 0
   365   001B1A                     __end_of__initialization:
   366                           	callstack 0
   367   001B1A  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   368   001B1C  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   369   001B1E  0100               	movlb	0
   370   001B20  EF71  F006         	goto	_main	;jump to C main() function
   371                           
   372                           	psect	bssCOMRAM
   373   000045                     __pbssCOMRAM:
   374                           	callstack 0
   375   000045                     _wall_detection_counter:
   376                           	callstack 0
   377   000045                     	ds	2
   378   000047                     _index:
   379                           	callstack 0
   380   000047                     	ds	2
   381   000049                     _seconds:
   382                           	callstack 0
   383   000049                     	ds	2
   384   00004B                     _clear2:
   385                           	callstack 0
   386   00004B                     	ds	2
   387   00004D                     _clear1:
   388                           	callstack 0
   389   00004D                     	ds	2
   390                           
   391                           	psect	dataCOMRAM
   392   000039                     __pdataCOMRAM:
   393                           	callstack 0
   394   000039                     _Black_setup:
   395                           	callstack 0
   396   000039                     	ds	12
   397                           
   398                           	psect	bssBANK0
   399   0000E6                     __pbssBANK0:
   400                           	callstack 0
   401   0000E6                     _RGB:
   402                           	callstack 0
   403   0000E6                     	ds	12
   404   0000F2                     _incr_sec_counter:
   405                           	callstack 0
   406   0000F2                     	ds	2
   407   0000F4                     _state:
   408                           	callstack 0
   409   0000F4                     	ds	2
   410   0000F6                     _wall_detection_mode:
   411                           	callstack 0
   412   0000F6                     	ds	2
   413                           
   414                           	psect	dataBANK0
   415   000060                     __pdataBANK0:
   416                           	callstack 0
   417   000060                     _White_setup:
   418                           	callstack 0
   419   000060                     	ds	12
   420   00006C                     _Yellow_rule:
   421                           	callstack 0
   422   00006C                     	ds	12
   423   000078                     _Blue_rule:
   424                           	callstack 0
   425   000078                     	ds	12
   426   000084                     _Green_rule:
   427                           	callstack 0
   428   000084                     	ds	12
   429   000090                     _Red_rule:
   430                           	callstack 0
   431   000090                     	ds	12
   432   00009C                     _twothirds:
   433                           	callstack 0
   434   00009C                     	ds	2
   435   00009E                     _halfblock:
   436                           	callstack 0
   437   00009E                     	ds	2
   438   0000A0                     _blockback:
   439                           	callstack 0
   440   0000A0                     	ds	2
   441   0000A2                     _blockahead:
   442                           	callstack 0
   443   0000A2                     	ds	2
   444   0000A4                     _wait_time:
   445                           	callstack 0
   446   0000A4                     	ds	2
   447   0000A6                     _wall_coef:
   448                           	callstack 0
   449   0000A6                     	ds	2
   450                           
   451                           	psect	bssBANK1
   452   000100                     __pbssBANK1:
   453                           	callstack 0
   454   000100                     _Color_rules:
   455                           	callstack 0
   456   000100                     	ds	108
   457   00016C                     _Black_rule:
   458                           	callstack 0
   459   00016C                     	ds	12
   460                           
   461                           	psect	dataBANK1
   462   000178                     __pdataBANK1:
   463                           	callstack 0
   464   000178                     _White_rule:
   465                           	callstack 0
   466   000178                     	ds	12
   467   000184                     _Lightblue_rule:
   468                           	callstack 0
   469   000184                     	ds	12
   470   000190                     _Orange_rule:
   471                           	callstack 0
   472   000190                     	ds	12
   473   00019C                     _Pink_rule:
   474                           	callstack 0
   475   00019C                     	ds	12
   476                           
   477                           	psect	bssBANK2
   478   000200                     __pbssBANK2:
   479                           	callstack 0
   480   000200                     _movement_list:
   481                           	callstack 0
   482   000200                     	ds	200
   483                           
   484                           	psect	cstackBANK1
   485   0001A8                     __pcstackBANK1:
   486                           	callstack 0
   487   0001A8                     main@color_code:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x0
   491   0001A8                     	ds	2
   492   0001AA                     main@state:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496   0001AA                     	ds	2
   497   0001AC                     main@motorL:
   498                           	callstack 0
   499                           
   500                           ; 9 bytes @ 0x4
   501   0001AC                     	ds	9
   502   0001B5                     main@motorR:
   503                           	callstack 0
   504                           
   505                           ; 9 bytes @ 0xD
   506   0001B5                     	ds	9
   507                           
   508                           	psect	cstackBANK0
   509   0000A8                     __pcstackBANK0:
   510                           	callstack 0
   511   0000A8                     _get_color_distance$422:
   512                           	callstack 0
   513                           
   514                           ; 4 bytes @ 0x0
   515   0000A8                     	ds	4
   516   0000AC                     _get_color_distance$424:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x4
   520   0000AC                     	ds	4
   521   0000B0                     _get_color_distance$426:
   522                           	callstack 0
   523                           
   524                           ; 4 bytes @ 0x8
   525   0000B0                     	ds	4
   526   0000B4                     get_color_distance@R_offset:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0xC
   530   0000B4                     	ds	2
   531   0000B6                     get_color_distance@G_offset:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0xE
   535   0000B6                     	ds	2
   536   0000B8                     get_color_distance@B_offset:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x10
   540   0000B8                     	ds	2
   541   0000BA                     _get_color_code$2462:
   542                           	callstack 0
   543                           
   544                           ; 12 bytes @ 0x12
   545   0000BA                     	ds	12
   546   0000C6                     _get_color_code$463:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x1E
   550   0000C6                     	ds	4
   551   0000CA                     _get_color_code$464:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x22
   555   0000CA                     	ds	4
   556   0000CE                     _get_color_code$465:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0x26
   560   0000CE                     	ds	4
   561   0000D2                     get_color_code@min_value:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x2A
   565   0000D2                     	ds	2
   566   0000D4                     get_color_code@min_index:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x2C
   570   0000D4                     	ds	2
   571   0000D6                     get_color_code@value:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x2E
   575   0000D6                     	ds	2
   576   0000D8                     get_color_code@i:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x30
   580   0000D8                     	ds	2
   581   0000DA                     get_color_code@NormalizedRGB:
   582                           	callstack 0
   583                           
   584                           ; 12 bytes @ 0x32
   585   0000DA                     	ds	12
   586                           
   587                           	psect	cstackCOMRAM
   588   000001                     __pcstackCOMRAM:
   589                           	callstack 0
   590   000001                     ??i2_I2C_2_Master_Idle:
   591   000001                     i2set_led_color@color:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x0
   595   000001                     	ds	1
   596   000002                     ??i2_I2C_2_Master_Read:
   597   000002                     i2I2C_2_Master_Write@data_byte:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0x1
   601   000002                     	ds	1
   602   000003                     i2I2C_2_Master_Read@ack:
   603                           	callstack 0
   604                           
   605                           ; 1 bytes @ 0x2
   606   000003                     	ds	1
   607   000004                     i2I2C_2_Master_Read@tmp:
   608                           	callstack 0
   609                           
   610                           ; 1 bytes @ 0x3
   611   000004                     	ds	1
   612   000005                     ?i2_color_read_Clear:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x4
   616   000005                     	ds	2
   617   000007                     ??i2_color_read_Clear:
   618                           
   619                           ; 1 bytes @ 0x6
   620   000007                     	ds	3
   621   00000A                     i2color_read_Clear@tmp:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x9
   625   00000A                     	ds	2
   626   00000C                     set_wall_detection@mode:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0xB
   630   00000C                     	ds	2
   631   00000E                     ??_add_seconds_to_list:
   632   00000E                     ??_I2C_2_Master_Idle:
   633   00000E                     ?_get_state:
   634                           	callstack 0
   635   00000E                     ?___wmul:
   636                           	callstack 0
   637   00000E                     ?___lmul:
   638                           	callstack 0
   639   00000E                     set_wall_detection_mode@mode:
   640                           	callstack 0
   641   00000E                     set_led_color@color:
   642                           	callstack 0
   643   00000E                     initDCmotorsPWM@PWMperiod:
   644                           	callstack 0
   645   00000E                     ___wmul@multiplier:
   646                           	callstack 0
   647   00000E                     ___lmul@multiplier:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0xD
   651   00000E                     	ds	1
   652   00000F                     ??_I2C_2_Master_Read:
   653   00000F                     I2C_2_Master_Write@data_byte:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0xE
   657   00000F                     	ds	1
   658   000010                     color_writetoaddr@value:
   659                           	callstack 0
   660   000010                     I2C_2_Master_Read@ack:
   661                           	callstack 0
   662   000010                     ___wmul@multiplicand:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0xF
   666   000010                     	ds	1
   667   000011                     color_writetoaddr@address:
   668                           	callstack 0
   669   000011                     I2C_2_Master_Read@tmp:
   670                           	callstack 0
   671                           
   672                           ; 1 bytes @ 0x10
   673   000011                     	ds	1
   674   000012                     ?_color_read_Red:
   675                           	callstack 0
   676   000012                     ?_color_read_Blue:
   677                           	callstack 0
   678   000012                     ?_color_read_Green:
   679                           	callstack 0
   680   000012                     ?_color_read_Clear:
   681                           	callstack 0
   682   000012                     ___wmul@product:
   683                           	callstack 0
   684   000012                     ___lmul@multiplicand:
   685                           	callstack 0
   686                           
   687                           ; 4 bytes @ 0x11
   688   000012                     	ds	2
   689   000014                     ??_color_read_Red:
   690   000014                     ??_color_read_Blue:
   691   000014                     ??_color_read_Green:
   692   000014                     ??_color_read_Clear:
   693   000014                     ?_get_color_distance:
   694                           	callstack 0
   695   000014                     ?_get_wall_detection:
   696                           	callstack 0
   697   000014                     ?___lwdiv:
   698                           	callstack 0
   699   000014                     ___lwdiv@dividend:
   700                           	callstack 0
   701   000014                     get_color_distance@color1:
   702                           	callstack 0
   703                           
   704                           ; 12 bytes @ 0x13
   705   000014                     	ds	2
   706   000016                     ___lwdiv@divisor:
   707                           	callstack 0
   708   000016                     ___lmul@product:
   709                           	callstack 0
   710                           
   711                           ; 4 bytes @ 0x15
   712   000016                     	ds	1
   713   000017                     color_read_Red@tmp:
   714                           	callstack 0
   715   000017                     color_read_Blue@tmp:
   716                           	callstack 0
   717   000017                     color_read_Green@tmp:
   718                           	callstack 0
   719   000017                     color_read_Clear@tmp:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x16
   723   000017                     	ds	1
   724   000018                     ___lwdiv@counter:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x17
   728   000018                     	ds	1
   729   000019                     ??_calibrate_white:
   730   000019                     ___lwdiv@quotient:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x18
   734   000019                     	ds	1
   735   00001A                     ?___lldiv:
   736                           	callstack 0
   737   00001A                     ___lldiv@dividend:
   738                           	callstack 0
   739                           
   740                           ; 4 bytes @ 0x19
   741   00001A                     	ds	1
   742   00001B                     ??_calibrate_black:
   743   00001B                     setMotorPWM@m:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x1A
   747   00001B                     	ds	2
   748   00001D                     ??_setMotorPWM:
   749   00001D                     calibrate_black@clear1:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x1C
   753   00001D                     	ds	1
   754   00001E                     ___lldiv@divisor:
   755                           	callstack 0
   756                           
   757                           ; 4 bytes @ 0x1D
   758   00001E                     	ds	1
   759   00001F                     setMotorPWM@posDuty:
   760                           	callstack 0
   761   00001F                     calibrate_black@clear2:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x1E
   765   00001F                     	ds	1
   766   000020                     setMotorPWM@negDuty:
   767                           	callstack 0
   768   000020                     get_color_distance@color2:
   769                           	callstack 0
   770                           
   771                           ; 12 bytes @ 0x1F
   772   000020                     	ds	1
   773   000021                     stop@mL:
   774                           	callstack 0
   775   000021                     turnLeft@mL:
   776                           	callstack 0
   777   000021                     turnRight@mL:
   778                           	callstack 0
   779   000021                     turnLeftLong@mL:
   780                           	callstack 0
   781   000021                     turnRightLong@mL:
   782                           	callstack 0
   783   000021                     fullSpeedAhead@mL:
   784                           	callstack 0
   785   000021                     TimedfullSpeedAhead@mL:
   786                           	callstack 0
   787   000021                     moveBack@mL:
   788                           	callstack 0
   789   000021                     _calibrate_black$2463:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x20
   793   000021                     	ds	1
   794   000022                     ___lldiv@quotient:
   795                           	callstack 0
   796                           
   797                           ; 4 bytes @ 0x21
   798   000022                     	ds	1
   799   000023                     ??_color_click_init:
   800   000023                     stop@mR:
   801                           	callstack 0
   802   000023                     turnLeft@mR:
   803                           	callstack 0
   804   000023                     turnRight@mR:
   805                           	callstack 0
   806   000023                     turnLeftLong@mR:
   807                           	callstack 0
   808   000023                     turnRightLong@mR:
   809                           	callstack 0
   810   000023                     fullSpeedAhead@mR:
   811                           	callstack 0
   812   000023                     TimedfullSpeedAhead@mR:
   813                           	callstack 0
   814   000023                     moveBack@mR:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x22
   818   000023                     	ds	2
   819   000025                     ??_stop:
   820   000025                     ??_turnLeft:
   821   000025                     ??_turnRight:
   822   000025                     ??_turnLeftLong:
   823   000025                     ??_turnRightLong:
   824   000025                     TimedfullSpeedAhead@time:
   825                           	callstack 0
   826   000025                     moveBack@time:
   827                           	callstack 0
   828                           
   829                           ; 2 bytes @ 0x24
   830   000025                     	ds	1
   831   000026                     ___lldiv@counter:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x25
   835   000026                     	ds	1
   836   000027                     turnLeft@k:
   837                           	callstack 0
   838   000027                     turnRight@k:
   839                           	callstack 0
   840   000027                     turnLeftLong@k:
   841                           	callstack 0
   842   000027                     turnRightLong@k:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x26
   846   000027                     	ds	2
   847   000029                     turnLeft@i:
   848                           	callstack 0
   849   000029                     turnRight@i:
   850                           	callstack 0
   851   000029                     turnLeftLong@i:
   852                           	callstack 0
   853   000029                     turnRightLong@i:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0x28
   857   000029                     	ds	2
   858   00002B                     RobotMovement@color:
   859                           	callstack 0
   860   00002B                     return_back@motorL:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x2A
   864   00002B                     	ds	1
   865   00002C                     ??_get_color_distance:
   866                           
   867                           ; 1 bytes @ 0x2B
   868   00002C                     	ds	1
   869   00002D                     RobotMovement@motorL:
   870                           	callstack 0
   871   00002D                     return_back@motorR:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x2C
   875   00002D                     	ds	2
   876   00002F                     ??_return_back:
   877   00002F                     RobotMovement@motorR:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x2E
   881   00002F                     	ds	1
   882   000030                     ?_get_color_code:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x2F
   886   000030                     	ds	1
   887   000031                     
   888                           ; 1 bytes @ 0x30
   889   000031                     	ds	1
   890   000032                     ??_get_color_code:
   891                           
   892                           ; 1 bytes @ 0x31
   893   000032                     	ds	1
   894   000033                     RobotMovement@i:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x32
   898   000033                     	ds	2
   899   000035                     RobotMovement@i_1276:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x34
   903   000035                     	ds	2
   904   000037                     ??_main:
   905                           
   906                           ; 1 bytes @ 0x36
   907   000037                     	ds	2
   908                           
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 17 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  color_code      2    0[BANK1 ] unsigned int 
   919 ;;  state           2    2[BANK1 ] int 
   920 ;;  motorR          9   13[BANK1 ] struct DC_motor
   921 ;;  motorL          9    4[BANK1 ] struct DC_motor
   922 ;;  PWMcycle        2    0        unsigned int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:       24 bytes
   937 ;; Hardware stack levels required when called: 10
   938 ;; This function calls:
   939 ;;		_Interrupts_init
   940 ;;		_RobotMovement
   941 ;;		_TimedfullSpeedAhead
   942 ;;		_Timer0_init
   943 ;;		_add_seconds_to_list
   944 ;;		_color_click_init
   945 ;;		_fullSpeedAhead
   946 ;;		_get_color_code
   947 ;;		_get_state
   948 ;;		_get_wall_detection
   949 ;;		_initDCmotorsPWM
   950 ;;		_return_back
   951 ;;		_set_wall_detection_mode
   952 ;;		_stop
   953 ;; This function is called by:
   954 ;;		Startup code after reset
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text0
   959   000CE2                     __ptext0:
   960                           	callstack 0
   961   000CE2                     _main:
   962                           	callstack 21
   963   000CE2                     
   964                           ;main.c: 19:     color_click_init();
   965   000CE2  EC66  F00B         	call	_color_click_init	;wreg free
   966   000CE6                     
   967                           ;main.c: 20:     Timer0_init();
   968   000CE6  EC88  F011         	call	_Timer0_init	;wreg free
   969   000CEA                     
   970                           ;main.c: 21:     Interrupts_init();
   971   000CEA  ECB1  F011         	call	_Interrupts_init	;wreg free
   972   000CEE                     
   973                           ;main.c: 22:     initDCmotorsPWM(99);
   974   000CEE  0E00               	movlw	0
   975   000CF0  6E0F               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   976   000CF2  0E63               	movlw	99
   977   000CF4  6E0E               	movwf	initDCmotorsPWM@PWMperiod^0,c
   978   000CF6  EC92  F00D         	call	_initDCmotorsPWM	;wreg free
   979   000CFA                     
   980                           ;main.c: 26:     ANSELFbits.ANSELF2 = 0;
   981   000CFA  010E               	movlb	14	; () banked
   982   000CFC  95B4               	bcf	180,2,b	;volatile
   983   000CFE                     
   984                           ; BSR set to: 14
   985                           ;main.c: 27:     TRISFbits.TRISF2 = 1;
   986   000CFE  8486               	bsf	134,2,c	;volatile
   987   000D00                     
   988                           ; BSR set to: 14
   989                           ;main.c: 29:     DC_motor motorL, motorR;;main.c: 30:     motorL.power=0;
   990   000D00  0E00               	movlw	0
   991   000D02  0101               	movlb	1	; () banked
   992   000D04  6FAC               	movwf	main@motorL& (0+255),b
   993   000D06                     
   994                           ; BSR set to: 1
   995                           ;main.c: 31:     motorL.direction=1;
   996   000D06  0E01               	movlw	1
   997   000D08  6FAD               	movwf	(main@motorL+1)& (0+255),b
   998   000D0A                     
   999                           ; BSR set to: 1
  1000                           ;main.c: 32:     motorL.brakemode=1;
  1001   000D0A  0E01               	movlw	1
  1002   000D0C  6FAE               	movwf	(main@motorL+2)& (0+255),b
  1003   000D0E                     
  1004                           ; BSR set to: 1
  1005                           ;main.c: 33:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1006   000D0E  0EAA               	movlw	170
  1007   000D10  6FB1               	movwf	(main@motorL+5)& (0+255),b
  1008   000D12  0E0F               	movlw	15
  1009   000D14  6FB2               	movwf	(main@motorL+6)& (0+255),b
  1010   000D16                     
  1011                           ; BSR set to: 1
  1012                           ;main.c: 34:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1013   000D16  0EA6               	movlw	166
  1014   000D18  6FB3               	movwf	(main@motorL+7)& (0+255),b
  1015   000D1A  0E0F               	movlw	15
  1016   000D1C  6FB4               	movwf	(main@motorL+8)& (0+255),b
  1017   000D1E                     
  1018                           ; BSR set to: 1
  1019                           ;main.c: 35:     motorL.PWMperiod=PWMcycle;
  1020   000D1E  0E00               	movlw	0
  1021   000D20  6FB0               	movwf	(main@motorL+4)& (0+255),b
  1022   000D22  0E63               	movlw	99
  1023   000D24  6FAF               	movwf	(main@motorL+3)& (0+255),b
  1024   000D26                     
  1025                           ; BSR set to: 1
  1026                           ;main.c: 37:     motorR.power=0;
  1027   000D26  0E00               	movlw	0
  1028   000D28  6FB5               	movwf	main@motorR& (0+255),b
  1029   000D2A                     
  1030                           ; BSR set to: 1
  1031                           ;main.c: 38:     motorR.direction=1;
  1032   000D2A  0E01               	movlw	1
  1033   000D2C  6FB6               	movwf	(main@motorR+1)& (0+255),b
  1034   000D2E                     
  1035                           ; BSR set to: 1
  1036                           ;main.c: 39:     motorR.brakemode=1;
  1037   000D2E  0E01               	movlw	1
  1038   000D30  6FB7               	movwf	(main@motorR+2)& (0+255),b
  1039   000D32                     
  1040                           ; BSR set to: 1
  1041                           ;main.c: 40:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1042   000D32  0E25               	movlw	37
  1043   000D34  6FBA               	movwf	(main@motorR+5)& (0+255),b
  1044   000D36  0E0F               	movlw	15
  1045   000D38  6FBB               	movwf	(main@motorR+6)& (0+255),b
  1046   000D3A                     
  1047                           ; BSR set to: 1
  1048                           ;main.c: 41:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1049   000D3A  0E21               	movlw	33
  1050   000D3C  6FBC               	movwf	(main@motorR+7)& (0+255),b
  1051   000D3E  0E0F               	movlw	15
  1052   000D40  6FBD               	movwf	(main@motorR+8)& (0+255),b
  1053   000D42                     
  1054                           ; BSR set to: 1
  1055                           ;main.c: 42:     motorR.PWMperiod=PWMcycle;
  1056   000D42  0E00               	movlw	0
  1057   000D44  6FB9               	movwf	(main@motorR+4)& (0+255),b
  1058   000D46  0E63               	movlw	99
  1059   000D48  6FB8               	movwf	(main@motorR+3)& (0+255),b
  1060   000D4A                     
  1061                           ; BSR set to: 1
  1062                           ;main.c: 44:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1063   000D4A  0E52               	movlw	82
  1064   000D4C  6E38               	movwf	(??_main+1)^0,c
  1065   000D4E  0E2B               	movlw	43
  1066   000D50  6E37               	movwf	??_main^0,c
  1067   000D52  0E00               	movlw	0
  1068   000D54                     u4257:
  1069   000D54  2EE8               	decfsz	wreg,f,c
  1070   000D56  D7FE               	bra	u4257
  1071   000D58  2E37               	decfsz	??_main^0,f,c
  1072   000D5A  D7FC               	bra	u4257
  1073   000D5C  2E38               	decfsz	(??_main+1)^0,f,c
  1074   000D5E  D7FA               	bra	u4257
  1075   000D60  D000               	nop2	
  1076   000D62                     
  1077                           ;main.c: 45:     fullSpeedAhead(&motorL,&motorR);
  1078   000D62  0EAC               	movlw	low main@motorL
  1079   000D64  6E21               	movwf	fullSpeedAhead@mL^0,c
  1080   000D66  0E01               	movlw	high main@motorL
  1081   000D68  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1082   000D6A  0EB5               	movlw	low main@motorR
  1083   000D6C  6E23               	movwf	fullSpeedAhead@mR^0,c
  1084   000D6E  0E01               	movlw	high main@motorR
  1085   000D70  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1086   000D72  EC28  F00F         	call	_fullSpeedAhead	;wreg free
  1087   000D76                     l4494:
  1088                           
  1089                           ;main.c: 46:     set_wall_detection_mode(1);
  1090   000D76  0E00               	movlw	0
  1091   000D78  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1092   000D7A  0E01               	movlw	1
  1093   000D7C  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1094   000D7E  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1095   000D82                     l4496:
  1096                           
  1097                           ;main.c: 48:         int state = get_state();
  1098   000D82  ECBD  F011         	call	_get_state	;wreg free
  1099   000D86  C00E  F1AA         	movff	?_get_state,main@state
  1100   000D8A  C00F  F1AB         	movff	?_get_state+1,main@state+1
  1101   000D8E                     
  1102                           ;main.c: 49:         if(get_wall_detection() == 1 && state == 0 ){
  1103   000D8E  ECF6  F00E         	call	_get_wall_detection	;wreg free
  1104   000D92  0414               	decf	?_get_wall_detection^0,w,c
  1105   000D94  1015               	iorwf	(?_get_wall_detection+1)^0,w,c
  1106   000D96  A4D8               	btfss	status,2,c
  1107   000D98  EFD0  F006         	goto	u3851
  1108   000D9C  EFD2  F006         	goto	u3850
  1109   000DA0                     u3851:
  1110   000DA0  EF30  F007         	goto	l4520
  1111   000DA4                     u3850:
  1112   000DA4  0101               	movlb	1	; () banked
  1113   000DA6  51AA               	movf	main@state& (0+255),w,b
  1114   000DA8  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1115   000DAA  A4D8               	btfss	status,2,c
  1116   000DAC  EFDA  F006         	goto	u3861
  1117   000DB0  EFDC  F006         	goto	u3860
  1118   000DB4                     u3861:
  1119   000DB4  EF30  F007         	goto	l4520
  1120   000DB8                     u3860:
  1121   000DB8                     
  1122                           ; BSR set to: 1
  1123                           ;main.c: 50:             set_wall_detection_mode(0);
  1124   000DB8  0E00               	movlw	0
  1125   000DBA  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1126   000DBC  0E00               	movlw	0
  1127   000DBE  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1128   000DC0  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1129   000DC4                     
  1130                           ;main.c: 52:             add_seconds_to_list();
  1131   000DC4  EC66  F010         	call	_add_seconds_to_list	;wreg free
  1132   000DC8                     
  1133                           ;main.c: 53:             stop(&motorL,&motorR);
  1134   000DC8  0EAC               	movlw	low main@motorL
  1135   000DCA  6E21               	movwf	stop@mL^0,c
  1136   000DCC  0E01               	movlw	high main@motorL
  1137   000DCE  6E22               	movwf	(stop@mL+1)^0,c
  1138   000DD0  0EB5               	movlw	low main@motorR
  1139   000DD2  6E23               	movwf	stop@mR^0,c
  1140   000DD4  0E01               	movlw	high main@motorR
  1141   000DD6  6E24               	movwf	(stop@mR+1)^0,c
  1142   000DD8  EC1D  F010         	call	_stop	;wreg free
  1143   000DDC                     
  1144                           ;main.c: 54:             unsigned int color_code = get_color_code();
  1145   000DDC  EC87  F003         	call	_get_color_code	;wreg free
  1146   000DE0  C030  F1A8         	movff	?_get_color_code,main@color_code
  1147   000DE4  C031  F1A9         	movff	?_get_color_code+1,main@color_code+1
  1148   000DE8                     
  1149                           ;main.c: 55:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1150   000DE8  0EAC               	movlw	low main@motorL
  1151   000DEA  6E21               	movwf	TimedfullSpeedAhead@mL^0,c
  1152   000DEC  0E01               	movlw	high main@motorL
  1153   000DEE  6E22               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1154   000DF0  0EB5               	movlw	low main@motorR
  1155   000DF2  6E23               	movwf	TimedfullSpeedAhead@mR^0,c
  1156   000DF4  0E01               	movlw	high main@motorR
  1157   000DF6  6E24               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1158   000DF8  0E00               	movlw	0
  1159   000DFA  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1160   000DFC  0E05               	movlw	5
  1161   000DFE  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1162   000E00  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1163   000E04                     
  1164                           ;main.c: 56:             RobotMovement(color_code, &motorL, &motorR);
  1165   000E04  C1A8  F02B         	movff	main@color_code,RobotMovement@color
  1166   000E08  C1A9  F02C         	movff	main@color_code+1,RobotMovement@color+1
  1167   000E0C  0EAC               	movlw	low main@motorL
  1168   000E0E  6E2D               	movwf	RobotMovement@motorL^0,c
  1169   000E10  0E01               	movlw	high main@motorL
  1170   000E12  6E2E               	movwf	(RobotMovement@motorL+1)^0,c
  1171   000E14  0EB5               	movlw	low main@motorR
  1172   000E16  6E2F               	movwf	RobotMovement@motorR^0,c
  1173   000E18  0E01               	movlw	high main@motorR
  1174   000E1A  6E30               	movwf	(RobotMovement@motorR+1)^0,c
  1175   000E1C  EC53  F000         	call	_RobotMovement	;wreg free
  1176   000E20                     
  1177                           ;main.c: 57:             if (state == 0)
  1178   000E20  0101               	movlb	1	; () banked
  1179   000E22  51AA               	movf	main@state& (0+255),w,b
  1180   000E24  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1181   000E26  A4D8               	btfss	status,2,c
  1182   000E28  EF18  F007         	goto	u3871
  1183   000E2C  EF1A  F007         	goto	u3870
  1184   000E30                     u3871:
  1185   000E30  EFBB  F006         	goto	l4494
  1186   000E34                     u3870:
  1187   000E34                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 58:             {;main.c: 59:                 stop(&motorL,&motorR);
  1190   000E34  0EAC               	movlw	low main@motorL
  1191   000E36  6E21               	movwf	stop@mL^0,c
  1192   000E38  0E01               	movlw	high main@motorL
  1193   000E3A  6E22               	movwf	(stop@mL+1)^0,c
  1194   000E3C  0EB5               	movlw	low main@motorR
  1195   000E3E  6E23               	movwf	stop@mR^0,c
  1196   000E40  0E01               	movlw	high main@motorR
  1197   000E42  6E24               	movwf	(stop@mR+1)^0,c
  1198   000E44  EC1D  F010         	call	_stop	;wreg free
  1199                           
  1200                           ;main.c: 60:                 fullSpeedAhead(&motorL,&motorR);
  1201   000E48  0EAC               	movlw	low main@motorL
  1202   000E4A  6E21               	movwf	fullSpeedAhead@mL^0,c
  1203   000E4C  0E01               	movlw	high main@motorL
  1204   000E4E  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1205   000E50  0EB5               	movlw	low main@motorR
  1206   000E52  6E23               	movwf	fullSpeedAhead@mR^0,c
  1207   000E54  0E01               	movlw	high main@motorR
  1208   000E56  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1209   000E58  EC28  F00F         	call	_fullSpeedAhead	;wreg free
  1210   000E5C  EFBB  F006         	goto	l4494
  1211   000E60                     l4520:
  1212   000E60  0101               	movlb	1	; () banked
  1213   000E62  05AA               	decf	main@state& (0+255),w,b
  1214   000E64  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1215   000E66  A4D8               	btfss	status,2,c
  1216   000E68  EF38  F007         	goto	u3881
  1217   000E6C  EF3A  F007         	goto	u3880
  1218   000E70                     u3881:
  1219   000E70  EFC1  F006         	goto	l4496
  1220   000E74                     u3880:
  1221   000E74                     
  1222                           ; BSR set to: 1
  1223                           ;main.c: 65:             set_wall_detection_mode(0);
  1224   000E74  0E00               	movlw	0
  1225   000E76  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1226   000E78  0E00               	movlw	0
  1227   000E7A  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1228   000E7C  EC98  F011         	call	_set_wall_detection_mode	;wreg free
  1229   000E80                     
  1230                           ;main.c: 66:             return_back(&motorL, &motorR);
  1231   000E80  0EAC               	movlw	low main@motorL
  1232   000E82  6E2B               	movwf	return_back@motorL^0,c
  1233   000E84  0E01               	movlw	high main@motorL
  1234   000E86  6E2C               	movwf	(return_back@motorL+1)^0,c
  1235   000E88  0EB5               	movlw	low main@motorR
  1236   000E8A  6E2D               	movwf	return_back@motorR^0,c
  1237   000E8C  0E01               	movlw	high main@motorR
  1238   000E8E  6E2E               	movwf	(return_back@motorR+1)^0,c
  1239   000E90  EC56  F005         	call	_return_back	;wreg free
  1240   000E94  EFC1  F006         	goto	l4496
  1241   000E98  EF51  F000         	goto	start
  1242   000E9C                     __end_of_main:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function _set_wall_detection_mode *****************
  1246 ;; Defined at:
  1247 ;;		line 33 in file "color.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  mode            2   13[COMRAM] unsigned int 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 5
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text1
  1276   002330                     __ptext1:
  1277                           	callstack 0
  1278   002330                     _set_wall_detection_mode:
  1279                           	callstack 25
  1280   002330                     
  1281                           ;color.c: 34:     wall_detection_mode = mode;
  1282   002330  C00E  F0F6         	movff	set_wall_detection_mode@mode,_wall_detection_mode
  1283   002334  C00F  F0F7         	movff	set_wall_detection_mode@mode+1,_wall_detection_mode+1
  1284   002338                     
  1285                           ;color.c: 35:     clear1 = 0;
  1286   002338  0E00               	movlw	0
  1287   00233A  6E4E               	movwf	(_clear1+1)^0,c
  1288   00233C  0E00               	movlw	0
  1289   00233E  6E4D               	movwf	_clear1^0,c
  1290                           
  1291                           ;color.c: 36:     clear2 = 0;
  1292   002340  0E00               	movlw	0
  1293   002342  6E4C               	movwf	(_clear2+1)^0,c
  1294   002344  0E00               	movlw	0
  1295   002346  6E4B               	movwf	_clear2^0,c
  1296   002348  0012               	return		;funcret
  1297   00234A                     __end_of_set_wall_detection_mode:
  1298                           	callstack 0
  1299                           
  1300 ;; *************** function _return_back *****************
  1301 ;; Defined at:
  1302 ;;		line 429 in file "dc_motor.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  motorL          2   42[COMRAM] PTR struct DC_motor
  1305 ;;		 -> main@motorL(9), 
  1306 ;;  motorR          2   44[COMRAM] PTR struct DC_motor
  1307 ;;		 -> main@motorR(9), 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;Total ram usage:        6 bytes
  1324 ;; Hardware stack levels used: 1
  1325 ;; Hardware stack levels required when called: 8
  1326 ;; This function calls:
  1327 ;;		_TimedfullSpeedAhead
  1328 ;;		_moveBack
  1329 ;;		_stop
  1330 ;;		_turnLeft
  1331 ;;		_turnLeftLong
  1332 ;;		_turnRight
  1333 ;;		_turnRightLong
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text2
  1340   000AAC                     __ptext2:
  1341                           	callstack 0
  1342   000AAC                     _return_back:
  1343                           	callstack 22
  1344   000AAC                     
  1345                           ;dc_motor.c: 429: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 430: {;dc_motor.c: 431:     while (index > 0){
  1346   000AAC  EF55  F006         	goto	l341
  1347   000AB0                     l4406:
  1348                           
  1349                           ;dc_motor.c: 432:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1350   000AB0  90D8               	bcf	status,0,c
  1351   000AB2  3447               	rlcf	_index^0,w,c
  1352   000AB4  6ED9               	movwf	fsr2l,c
  1353   000AB6  3448               	rlcf	(_index+1)^0,w,c
  1354   000AB8  6EDA               	movwf	fsr2h,c
  1355   000ABA  0EFE               	movlw	low (_movement_list+65534)
  1356   000ABC  26D9               	addwf	fsr2l,f,c
  1357   000ABE  0E01               	movlw	high (_movement_list+65534)
  1358   000AC0  22DA               	addwfc	fsr2h,f,c
  1359   000AC2  28DE               	incf	postinc2,w,c
  1360   000AC4  E106               	bnz	u3771
  1361   000AC6  28DE               	incf	postinc2,w,c
  1362   000AC8  A4D8               	btfss	status,2,c
  1363   000ACA  EF69  F005         	goto	u3771
  1364   000ACE  EF6B  F005         	goto	u3770
  1365   000AD2                     u3771:
  1366   000AD2  EF77  F005         	goto	l4410
  1367   000AD6                     u3770:
  1368   000AD6  C02B  F021         	movff	return_back@motorL,turnLeft@mL
  1369   000ADA  C02C  F022         	movff	return_back@motorL+1,turnLeft@mL+1
  1370   000ADE  C02D  F023         	movff	return_back@motorR,turnLeft@mR
  1371   000AE2  C02E  F024         	movff	return_back@motorR+1,turnLeft@mR+1
  1372   000AE6  EC69  F009         	call	_turnLeft	;wreg free
  1373   000AEA  EF48  F006         	goto	l4434
  1374   000AEE                     l4410:
  1375   000AEE  90D8               	bcf	status,0,c
  1376   000AF0  3447               	rlcf	_index^0,w,c
  1377   000AF2  6ED9               	movwf	fsr2l,c
  1378   000AF4  3448               	rlcf	(_index+1)^0,w,c
  1379   000AF6  6EDA               	movwf	fsr2h,c
  1380   000AF8  0EFE               	movlw	low (_movement_list+65534)
  1381   000AFA  26D9               	addwf	fsr2l,f,c
  1382   000AFC  0E01               	movlw	high (_movement_list+65534)
  1383   000AFE  22DA               	addwfc	fsr2h,f,c
  1384   000B00  0EFE               	movlw	254
  1385   000B02  18DE               	xorwf	postinc2,w,c
  1386   000B04  E106               	bnz	u3781
  1387   000B06  28DE               	incf	postinc2,w,c
  1388   000B08  A4D8               	btfss	status,2,c
  1389   000B0A  EF89  F005         	goto	u3781
  1390   000B0E  EF8B  F005         	goto	u3780
  1391   000B12                     u3781:
  1392   000B12  EF97  F005         	goto	l4414
  1393   000B16                     u3780:
  1394   000B16  C02B  F021         	movff	return_back@motorL,turnRight@mL
  1395   000B1A  C02C  F022         	movff	return_back@motorL+1,turnRight@mL+1
  1396   000B1E  C02D  F023         	movff	return_back@motorR,turnRight@mR
  1397   000B22  C02E  F024         	movff	return_back@motorR+1,turnRight@mR+1
  1398   000B26  ECBE  F00A         	call	_turnRight	;wreg free
  1399   000B2A  EF48  F006         	goto	l4434
  1400   000B2E                     l4414:
  1401   000B2E  90D8               	bcf	status,0,c
  1402   000B30  3447               	rlcf	_index^0,w,c
  1403   000B32  6ED9               	movwf	fsr2l,c
  1404   000B34  3448               	rlcf	(_index+1)^0,w,c
  1405   000B36  6EDA               	movwf	fsr2h,c
  1406   000B38  0EFE               	movlw	low (_movement_list+65534)
  1407   000B3A  26D9               	addwf	fsr2l,f,c
  1408   000B3C  0E01               	movlw	high (_movement_list+65534)
  1409   000B3E  22DA               	addwfc	fsr2h,f,c
  1410   000B40  0EFD               	movlw	253
  1411   000B42  18DE               	xorwf	postinc2,w,c
  1412   000B44  E106               	bnz	u3791
  1413   000B46  28DE               	incf	postinc2,w,c
  1414   000B48  A4D8               	btfss	status,2,c
  1415   000B4A  EFA9  F005         	goto	u3791
  1416   000B4E  EFAB  F005         	goto	u3790
  1417   000B52                     u3791:
  1418   000B52  EFB7  F005         	goto	l4418
  1419   000B56                     u3790:
  1420   000B56  C02B  F021         	movff	return_back@motorL,turnLeftLong@mL
  1421   000B5A  C02C  F022         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1422   000B5E  C02D  F023         	movff	return_back@motorR,turnLeftLong@mR
  1423   000B62  C02E  F024         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1424   000B66  ECBC  F008         	call	_turnLeftLong	;wreg free
  1425   000B6A  EF48  F006         	goto	l4434
  1426   000B6E                     l4418:
  1427   000B6E  90D8               	bcf	status,0,c
  1428   000B70  3447               	rlcf	_index^0,w,c
  1429   000B72  6ED9               	movwf	fsr2l,c
  1430   000B74  3448               	rlcf	(_index+1)^0,w,c
  1431   000B76  6EDA               	movwf	fsr2h,c
  1432   000B78  0EFE               	movlw	low (_movement_list+65534)
  1433   000B7A  26D9               	addwf	fsr2l,f,c
  1434   000B7C  0E01               	movlw	high (_movement_list+65534)
  1435   000B7E  22DA               	addwfc	fsr2h,f,c
  1436   000B80  0EFC               	movlw	252
  1437   000B82  18DE               	xorwf	postinc2,w,c
  1438   000B84  E106               	bnz	u3801
  1439   000B86  28DE               	incf	postinc2,w,c
  1440   000B88  A4D8               	btfss	status,2,c
  1441   000B8A  EFC9  F005         	goto	u3801
  1442   000B8E  EFCB  F005         	goto	u3800
  1443   000B92                     u3801:
  1444   000B92  EFD7  F005         	goto	l4422
  1445   000B96                     u3800:
  1446   000B96  C02B  F021         	movff	return_back@motorL,turnRightLong@mL
  1447   000B9A  C02C  F022         	movff	return_back@motorL+1,turnRightLong@mL+1
  1448   000B9E  C02D  F023         	movff	return_back@motorR,turnRightLong@mR
  1449   000BA2  C02E  F024         	movff	return_back@motorR+1,turnRightLong@mR+1
  1450   000BA6  EC16  F00A         	call	_turnRightLong	;wreg free
  1451   000BAA  EF48  F006         	goto	l4434
  1452   000BAE                     l4422:
  1453   000BAE  90D8               	bcf	status,0,c
  1454   000BB0  3447               	rlcf	_index^0,w,c
  1455   000BB2  6ED9               	movwf	fsr2l,c
  1456   000BB4  3448               	rlcf	(_index+1)^0,w,c
  1457   000BB6  6EDA               	movwf	fsr2h,c
  1458   000BB8  0EFE               	movlw	low (_movement_list+65534)
  1459   000BBA  26D9               	addwf	fsr2l,f,c
  1460   000BBC  0E01               	movlw	high (_movement_list+65534)
  1461   000BBE  22DA               	addwfc	fsr2h,f,c
  1462   000BC0  0E01               	movlw	1
  1463   000BC2  BEDB               	btfsc	plusw2,7,c
  1464   000BC4  EFEF  F005         	goto	u3810
  1465   000BC8  0E01               	movlw	1
  1466   000BCA  50DB               	movf	plusw2,w,c
  1467   000BCC  E106               	bnz	u3811
  1468   000BCE  04DE               	decf	postinc2,w,c
  1469   000BD0  B0D8               	btfsc	status,0,c
  1470   000BD2  EFED  F005         	goto	u3811
  1471   000BD6  EFEF  F005         	goto	u3810
  1472   000BDA                     u3811:
  1473   000BDA  EF07  F006         	goto	l4426
  1474   000BDE                     u3810:
  1475   000BDE  90D8               	bcf	status,0,c
  1476   000BE0  3447               	rlcf	_index^0,w,c
  1477   000BE2  6ED9               	movwf	fsr2l,c
  1478   000BE4  3448               	rlcf	(_index+1)^0,w,c
  1479   000BE6  6EDA               	movwf	fsr2h,c
  1480   000BE8  0EFC               	movlw	low (_movement_list+65532)
  1481   000BEA  26D9               	addwf	fsr2l,f,c
  1482   000BEC  0E01               	movlw	high (_movement_list+65532)
  1483   000BEE  22DA               	addwfc	fsr2h,f,c
  1484   000BF0  0E01               	movlw	1
  1485   000BF2  AEDB               	btfss	plusw2,7,c
  1486   000BF4  EF07  F006         	goto	u3820
  1487   000BF8  0EFE               	movlw	254
  1488   000BFA  5CDE               	subwf	postinc2,w,c
  1489   000BFC  0EFF               	movlw	255
  1490   000BFE  58DE               	subwfb	postinc2,w,c
  1491   000C00  A0D8               	btfss	status,0,c
  1492   000C02  EF05  F006         	goto	u3821
  1493   000C06  EF07  F006         	goto	u3820
  1494   000C0A                     u3821:
  1495   000C0A  EF48  F006         	goto	l346
  1496   000C0E                     u3820:
  1497   000C0E                     l4426:
  1498                           
  1499                           ;dc_motor.c: 437:         {;dc_motor.c: 438:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1500   000C0E  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1501   000C12  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1502   000C16  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1503   000C1A  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1504   000C1E  90D8               	bcf	status,0,c
  1505   000C20  3447               	rlcf	_index^0,w,c
  1506   000C22  6ED9               	movwf	fsr2l,c
  1507   000C24  3448               	rlcf	(_index+1)^0,w,c
  1508   000C26  6EDA               	movwf	fsr2h,c
  1509   000C28  0EFE               	movlw	low (_movement_list+65534)
  1510   000C2A  26D9               	addwf	fsr2l,f,c
  1511   000C2C  0E01               	movlw	high (_movement_list+65534)
  1512   000C2E  22DA               	addwfc	fsr2h,f,c
  1513   000C30  CFDE F025          	movff	postinc2,TimedfullSpeedAhead@time
  1514   000C34  CFDD F026          	movff	postdec2,TimedfullSpeedAhead@time+1
  1515   000C38  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1516   000C3C                     
  1517                           ;dc_motor.c: 439:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1518   000C3C  0E11               	movlw	17
  1519   000C3E  6E30               	movwf	(??_return_back+1)^0,c
  1520   000C40  0E3C               	movlw	60
  1521   000C42  6E2F               	movwf	??_return_back^0,c
  1522   000C44  0ECB               	movlw	203
  1523   000C46                     u4267:
  1524   000C46  2EE8               	decfsz	wreg,f,c
  1525   000C48  D7FE               	bra	u4267
  1526   000C4A  2E2F               	decfsz	??_return_back^0,f,c
  1527   000C4C  D7FC               	bra	u4267
  1528   000C4E  2E30               	decfsz	(??_return_back+1)^0,f,c
  1529   000C50  D7FA               	bra	u4267
  1530   000C52  F000               	nop	
  1531   000C54                     
  1532                           ;dc_motor.c: 440:             TimedfullSpeedAhead(motorL, motorR, halfblock);
  1533   000C54  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1534   000C58  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1535   000C5C  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1536   000C60  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1537   000C64  0E00               	movlw	0
  1538   000C66  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1539   000C68  0E05               	movlw	5
  1540   000C6A  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1541   000C6C  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1542   000C70                     
  1543                           ;dc_motor.c: 441:             moveBack(motorL, motorR, halfblock);
  1544   000C70  C02B  F021         	movff	return_back@motorL,moveBack@mL
  1545   000C74  C02C  F022         	movff	return_back@motorL+1,moveBack@mL+1
  1546   000C78  C02D  F023         	movff	return_back@motorR,moveBack@mR
  1547   000C7C  C02E  F024         	movff	return_back@motorR+1,moveBack@mR+1
  1548   000C80  0E00               	movlw	0
  1549   000C82  6E26               	movwf	(moveBack@time+1)^0,c
  1550   000C84  0E05               	movlw	5
  1551   000C86  6E25               	movwf	moveBack@time^0,c
  1552   000C88  ECDA  F00D         	call	_moveBack	;wreg free
  1553   000C8C  EF48  F006         	goto	l4434
  1554   000C90                     l346:
  1555   000C90                     l4434:
  1556                           
  1557                           ;dc_motor.c: 443:         stop(motorL,motorR);
  1558   000C90  C02B  F021         	movff	return_back@motorL,stop@mL
  1559   000C94  C02C  F022         	movff	return_back@motorL+1,stop@mL+1
  1560   000C98  C02D  F023         	movff	return_back@motorR,stop@mR
  1561   000C9C  C02E  F024         	movff	return_back@motorR+1,stop@mR+1
  1562   000CA0  EC1D  F010         	call	_stop	;wreg free
  1563   000CA4                     
  1564                           ;dc_motor.c: 444:         index -= 1;
  1565   000CA4  0647               	decf	_index^0,f,c
  1566   000CA6  A0D8               	btfss	status,0,c
  1567   000CA8  0648               	decf	(_index+1)^0,f,c
  1568   000CAA                     l341:
  1569                           
  1570                           ;dc_motor.c: 431:     while (index > 0){
  1571   000CAA  BE48               	btfsc	(_index+1)^0,7,c
  1572   000CAC  EF62  F006         	goto	u3830
  1573   000CB0  5048               	movf	(_index+1)^0,w,c
  1574   000CB2  E106               	bnz	u3831
  1575   000CB4  0447               	decf	_index^0,w,c
  1576   000CB6  B0D8               	btfsc	status,0,c
  1577   000CB8  EF60  F006         	goto	u3831
  1578   000CBC  EF62  F006         	goto	u3830
  1579   000CC0                     u3831:
  1580   000CC0  EF58  F005         	goto	l4406
  1581   000CC4                     u3830:
  1582   000CC4                     
  1583                           ;dc_motor.c: 446:     if (index == 0){state = 2;}
  1584   000CC4  5047               	movf	_index^0,w,c
  1585   000CC6  1048               	iorwf	(_index+1)^0,w,c
  1586   000CC8  A4D8               	btfss	status,2,c
  1587   000CCA  EF69  F006         	goto	u3841
  1588   000CCE  EF6B  F006         	goto	u3840
  1589   000CD2                     u3841:
  1590   000CD2  EF70  F006         	goto	l356
  1591   000CD6                     u3840:
  1592   000CD6  0E00               	movlw	0
  1593   000CD8  0100               	movlb	0	; () banked
  1594   000CDA  6FF5               	movwf	(_state+1)& (0+255),b
  1595   000CDC  0E02               	movlw	2
  1596   000CDE  6FF4               	movwf	_state& (0+255),b
  1597   000CE0                     l356:
  1598   000CE0  0012               	return		;funcret
  1599   000CE2                     __end_of_return_back:
  1600                           	callstack 0
  1601                           
  1602 ;; *************** function _initDCmotorsPWM *****************
  1603 ;; Defined at:
  1604 ;;		line 14 in file "dc_motor.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;  PWMperiod       2   13[COMRAM] int 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, status,2
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1621 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1622 ;;Total ram usage:        2 bytes
  1623 ;; Hardware stack levels used: 1
  1624 ;; Hardware stack levels required when called: 5
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text3
  1633   001B24                     __ptext3:
  1634                           	callstack 0
  1635   001B24                     _initDCmotorsPWM:
  1636                           	callstack 25
  1637   001B24                     
  1638                           ;dc_motor.c: 16:     TRISEbits.TRISE2=0;
  1639   001B24  9485               	bcf	133,2,c	;volatile
  1640                           
  1641                           ;dc_motor.c: 17:     TRISCbits.TRISC7=0;
  1642   001B26  9E83               	bcf	131,7,c	;volatile
  1643                           
  1644                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  1645   001B28  9C87               	bcf	135,6,c	;volatile
  1646                           
  1647                           ;dc_motor.c: 19:     TRISEbits.TRISE4=0;
  1648   001B2A  9885               	bcf	133,4,c	;volatile
  1649                           
  1650                           ;dc_motor.c: 21:     LATEbits.LATE2=0;
  1651   001B2C  947D               	bcf	125,2,c	;volatile
  1652                           
  1653                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1654   001B2E  9E7B               	bcf	123,7,c	;volatile
  1655                           
  1656                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1657   001B30  9C7F               	bcf	127,6,c	;volatile
  1658                           
  1659                           ;dc_motor.c: 24:     LATEbits.LATE4=0;
  1660   001B32  987D               	bcf	125,4,c	;volatile
  1661   001B34                     
  1662                           ;dc_motor.c: 27:     RE2PPS=0x05;
  1663   001B34  0E05               	movlw	5
  1664   001B36  010E               	movlb	14	; () banked
  1665   001B38  6F74               	movwf	116,b	;volatile
  1666                           
  1667                           ;dc_motor.c: 28:     RE4PPS=0x06;
  1668   001B3A  0E06               	movlw	6
  1669   001B3C  6F76               	movwf	118,b	;volatile
  1670                           
  1671                           ;dc_motor.c: 29:     RC7PPS=0x07;
  1672   001B3E  0E07               	movlw	7
  1673   001B40  6F69               	movwf	105,b	;volatile
  1674                           
  1675                           ;dc_motor.c: 30:     RG6PPS=0x08;
  1676   001B42  0E08               	movlw	8
  1677   001B44  6F88               	movwf	136,b	;volatile
  1678                           
  1679                           ;dc_motor.c: 33:     T2CONbits.CKPS=0b100;
  1680   001B46  50BD               	movf	189,w,c	;volatile
  1681   001B48  0B8F               	andlw	-113
  1682   001B4A  0940               	iorlw	64
  1683   001B4C  6EBD               	movwf	189,c	;volatile
  1684                           
  1685                           ;dc_motor.c: 34:     T2HLTbits.MODE=0b00000;
  1686   001B4E  0EE0               	movlw	-32
  1687   001B50  16BE               	andwf	190,f,c	;volatile
  1688                           
  1689                           ;dc_motor.c: 35:     T2CLKCONbits.CS=0b0001;
  1690   001B52  50BF               	movf	191,w,c	;volatile
  1691   001B54  0BF0               	andlw	-16
  1692   001B56  0901               	iorlw	1
  1693   001B58  6EBF               	movwf	191,c	;volatile
  1694                           
  1695                           ;dc_motor.c: 39:     T2PR=99;
  1696   001B5A  0E63               	movlw	99
  1697   001B5C  6EBC               	movwf	188,c	;volatile
  1698   001B5E                     
  1699                           ; BSR set to: 14
  1700                           ;dc_motor.c: 40:     T2CONbits.ON=1;
  1701   001B5E  8EBD               	bsf	189,7,c	;volatile
  1702                           
  1703                           ;dc_motor.c: 44:     CCPR1H=0;
  1704   001B60  0E00               	movlw	0
  1705   001B62  6EAA               	movwf	170,c	;volatile
  1706                           
  1707                           ;dc_motor.c: 45:     CCPR2H=0;
  1708   001B64  0E00               	movlw	0
  1709   001B66  6EA6               	movwf	166,c	;volatile
  1710                           
  1711                           ;dc_motor.c: 46:     CCPR3H=0;
  1712   001B68  0E00               	movlw	0
  1713   001B6A  010F               	movlb	15	; () banked
  1714   001B6C  6F25               	movwf	37,b	;volatile
  1715                           
  1716                           ;dc_motor.c: 47:     CCPR4H=0;
  1717   001B6E  0E00               	movlw	0
  1718   001B70  6F21               	movwf	33,b	;volatile
  1719                           
  1720                           ;dc_motor.c: 50:     CCPTMRS0bits.C1TSEL=0;
  1721   001B72  0EFC               	movlw	-4
  1722   001B74  16AD               	andwf	173,f,c	;volatile
  1723                           
  1724                           ;dc_motor.c: 51:     CCPTMRS0bits.C2TSEL=0;
  1725   001B76  0EF3               	movlw	-13
  1726   001B78  16AD               	andwf	173,f,c	;volatile
  1727                           
  1728                           ;dc_motor.c: 52:     CCPTMRS0bits.C3TSEL=0;
  1729   001B7A  0ECF               	movlw	-49
  1730   001B7C  16AD               	andwf	173,f,c	;volatile
  1731                           
  1732                           ;dc_motor.c: 53:     CCPTMRS0bits.C4TSEL=0;
  1733   001B7E  0E3F               	movlw	-193
  1734   001B80  16AD               	andwf	173,f,c	;volatile
  1735   001B82                     
  1736                           ; BSR set to: 15
  1737                           ;dc_motor.c: 56:     CCP1CONbits.FMT=1;
  1738   001B82  88AB               	bsf	171,4,c	;volatile
  1739                           
  1740                           ;dc_motor.c: 57:     CCP1CONbits.CCP1MODE=0b1100;
  1741   001B84  50AB               	movf	171,w,c	;volatile
  1742   001B86  0BF0               	andlw	-16
  1743   001B88  090C               	iorlw	12
  1744   001B8A  6EAB               	movwf	171,c	;volatile
  1745   001B8C                     
  1746                           ; BSR set to: 15
  1747                           ;dc_motor.c: 58:     CCP1CONbits.EN=1;
  1748   001B8C  8EAB               	bsf	171,7,c	;volatile
  1749   001B8E                     
  1750                           ; BSR set to: 15
  1751                           ;dc_motor.c: 60:     CCP2CONbits.FMT=1;
  1752   001B8E  88A7               	bsf	167,4,c	;volatile
  1753                           
  1754                           ;dc_motor.c: 61:     CCP2CONbits.CCP2MODE=0b1100;
  1755   001B90  50A7               	movf	167,w,c	;volatile
  1756   001B92  0BF0               	andlw	-16
  1757   001B94  090C               	iorlw	12
  1758   001B96  6EA7               	movwf	167,c	;volatile
  1759   001B98                     
  1760                           ; BSR set to: 15
  1761                           ;dc_motor.c: 62:     CCP2CONbits.EN=1;
  1762   001B98  8EA7               	bsf	167,7,c	;volatile
  1763   001B9A                     
  1764                           ; BSR set to: 15
  1765                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1766   001B9A  8926               	bsf	38,4,b	;volatile
  1767                           
  1768                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1769   001B9C  5126               	movf	38,w,b	;volatile
  1770   001B9E  0BF0               	andlw	-16
  1771   001BA0  090C               	iorlw	12
  1772   001BA2  6F26               	movwf	38,b	;volatile
  1773   001BA4                     
  1774                           ; BSR set to: 15
  1775                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1776   001BA4  8F26               	bsf	38,7,b	;volatile
  1777   001BA6                     
  1778                           ; BSR set to: 15
  1779                           ;dc_motor.c: 68:     CCP4CONbits.FMT=1;
  1780   001BA6  8922               	bsf	34,4,b	;volatile
  1781                           
  1782                           ;dc_motor.c: 69:     CCP4CONbits.CCP4MODE=0b1100;
  1783   001BA8  5122               	movf	34,w,b	;volatile
  1784   001BAA  0BF0               	andlw	-16
  1785   001BAC  090C               	iorlw	12
  1786   001BAE  6F22               	movwf	34,b	;volatile
  1787   001BB0                     
  1788                           ; BSR set to: 15
  1789                           ;dc_motor.c: 70:     CCP4CONbits.EN=1;
  1790   001BB0  8F22               	bsf	34,7,b	;volatile
  1791   001BB2                     
  1792                           ; BSR set to: 15
  1793   001BB2  0012               	return		;funcret
  1794   001BB4                     __end_of_initDCmotorsPWM:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _get_wall_detection *****************
  1798 ;; Defined at:
  1799 ;;		line 249 in file "color.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  2   19[COMRAM] unsigned int 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1813 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1817 ;;Total ram usage:        2 bytes
  1818 ;; Hardware stack levels used: 1
  1819 ;; Hardware stack levels required when called: 6
  1820 ;; This function calls:
  1821 ;;		___wmul
  1822 ;; This function is called by:
  1823 ;;		_main
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           
  1827                           	psect	text4
  1828   001DEC                     __ptext4:
  1829                           	callstack 0
  1830   001DEC                     _get_wall_detection:
  1831                           	callstack 24
  1832   001DEC                     
  1833                           ;color.c: 250:     if(clear1 == 0 || clear2 == 0){return 0;}
  1834   001DEC  504D               	movf	_clear1^0,w,c
  1835   001DEE  104E               	iorwf	(_clear1+1)^0,w,c
  1836   001DF0  B4D8               	btfsc	status,2,c
  1837   001DF2  EFFD  F00E         	goto	u3511
  1838   001DF6  EFFF  F00E         	goto	u3510
  1839   001DFA                     u3511:
  1840   001DFA  EF08  F00F         	goto	l4220
  1841   001DFE                     u3510:
  1842   001DFE  504B               	movf	_clear2^0,w,c
  1843   001E00  104C               	iorwf	(_clear2+1)^0,w,c
  1844   001E02  A4D8               	btfss	status,2,c
  1845   001E04  EF06  F00F         	goto	u3521
  1846   001E08  EF08  F00F         	goto	u3520
  1847   001E0C                     u3521:
  1848   001E0C  EF0E  F00F         	goto	l4224
  1849   001E10                     u3520:
  1850   001E10                     l4220:
  1851   001E10  0E00               	movlw	0
  1852   001E12  6E15               	movwf	(?_get_wall_detection+1)^0,c
  1853   001E14  0E00               	movlw	0
  1854   001E16  6E14               	movwf	?_get_wall_detection^0,c
  1855   001E18  EF27  F00F         	goto	l159
  1856   001E1C                     l4224:
  1857                           
  1858                           ;color.c: 251:     return clear2 >= clear1*wall_coef;
  1859   001E1C  C04D  F00E         	movff	_clear1,___wmul@multiplier
  1860   001E20  C04E  F00F         	movff	_clear1+1,___wmul@multiplier+1
  1861   001E24  C0A6  F010         	movff	_wall_coef,___wmul@multiplicand
  1862   001E28  C0A7  F011         	movff	_wall_coef+1,___wmul@multiplicand+1
  1863   001E2C  EC65  F011         	call	___wmul	;wreg free
  1864   001E30  500E               	movf	?___wmul^0,w,c
  1865   001E32  5C4B               	subwf	_clear2^0,w,c
  1866   001E34  500F               	movf	(?___wmul+1)^0,w,c
  1867   001E36  584C               	subwfb	(_clear2+1)^0,w,c
  1868   001E38  B0D8               	btfsc	status,0,c
  1869   001E3A  EF21  F00F         	goto	u3531
  1870   001E3E  EF24  F00F         	goto	u3530
  1871   001E42                     u3531:
  1872   001E42  0E01               	movlw	1
  1873   001E44  EF25  F00F         	goto	u3540
  1874   001E48                     u3530:
  1875   001E48  0E00               	movlw	0
  1876   001E4A                     u3540:
  1877   001E4A  6E14               	movwf	?_get_wall_detection^0,c
  1878   001E4C  6A15               	clrf	(?_get_wall_detection+1)^0,c
  1879   001E4E                     l159:
  1880   001E4E  0012               	return		;funcret
  1881   001E50                     __end_of_get_wall_detection:
  1882                           	callstack 0
  1883                           
  1884 ;; *************** function _get_state *****************
  1885 ;; Defined at:
  1886 ;;		line 414 in file "dc_motor.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2   13[COMRAM] int 
  1893 ;; Registers used:
  1894 ;;		None
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:        2 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 5
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_main
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           	psect	text5
  1915   00237A                     __ptext5:
  1916                           	callstack 0
  1917   00237A                     _get_state:
  1918                           	callstack 25
  1919   00237A                     
  1920                           ;dc_motor.c: 416:     return state;
  1921   00237A  C0F4  F00E         	movff	_state,?_get_state
  1922   00237E  C0F5  F00F         	movff	_state+1,?_get_state+1
  1923   002382  0012               	return		;funcret
  1924   002384                     __end_of_get_state:
  1925                           	callstack 0
  1926                           
  1927 ;; *************** function _get_color_code *****************
  1928 ;; Defined at:
  1929 ;;		line 180 in file "color.c"
  1930 ;; Parameters:    Size  Location     Type
  1931 ;;		None
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  value           2   46[BANK0 ] unsigned int 
  1934 ;;  i               2   48[BANK0 ] unsigned int 
  1935 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  1936 ;;  min_index       2   44[BANK0 ] unsigned int 
  1937 ;;  min_value       2   42[BANK0 ] unsigned int 
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  2   47[COMRAM] unsigned int 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1947 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1948 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1950 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1951 ;;Total ram usage:       48 bytes
  1952 ;; Hardware stack levels used: 1
  1953 ;; Hardware stack levels required when called: 8
  1954 ;; This function calls:
  1955 ;;		___lldiv
  1956 ;;		___lmul
  1957 ;;		___wmul
  1958 ;;		_color_read_Blue
  1959 ;;		_color_read_Green
  1960 ;;		_color_read_Red
  1961 ;;		_get_color_distance
  1962 ;;		_set_led_color
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text6
  1969   00070E                     __ptext6:
  1970                           	callstack 0
  1971   00070E                     _get_color_code:
  1972                           	callstack 22
  1973   00070E                     
  1974                           ;color.c: 184:     set_led_color(0b100);
  1975   00070E  0E00               	movlw	0
  1976   000710  6E0F               	movwf	(set_led_color@color+1)^0,c
  1977   000712  0E04               	movlw	4
  1978   000714  6E0E               	movwf	set_led_color@color^0,c
  1979   000716  EC8A  F010         	call	_set_led_color	;wreg free
  1980   00071A                     
  1981                           ;color.c: 185:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1982   00071A  0E12               	movlw	18
  1983   00071C  6E33               	movwf	(??_get_color_code+1)^0,c
  1984   00071E  0EDC               	movlw	220
  1985   000720  6E32               	movwf	??_get_color_code^0,c
  1986   000722  0E60               	movlw	96
  1987   000724                     u4277:
  1988   000724  2EE8               	decfsz	wreg,f,c
  1989   000726  D7FE               	bra	u4277
  1990   000728  2E32               	decfsz	??_get_color_code^0,f,c
  1991   00072A  D7FC               	bra	u4277
  1992   00072C  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  1993   00072E  D7FA               	bra	u4277
  1994   000730                     
  1995                           ;color.c: 186:     RGB.R = color_read_Red();
  1996   000730  EC55  F00F         	call	_color_read_Red	;wreg free
  1997   000734  C012  F0E6         	movff	?_color_read_Red,_RGB
  1998   000738  C013  F0E7         	movff	?_color_read_Red+1,_RGB+1
  1999   00073C  0100               	movlb	0	; () banked
  2000   00073E  6BE8               	clrf	(_RGB+2)& (0+255),b
  2001   000740  6BE9               	clrf	(_RGB+3)& (0+255),b
  2002   000742                     
  2003                           ; BSR set to: 0
  2004                           ;color.c: 187:     set_led_color(0b010);
  2005   000742  0E00               	movlw	0
  2006   000744  6E0F               	movwf	(set_led_color@color+1)^0,c
  2007   000746  0E02               	movlw	2
  2008   000748  6E0E               	movwf	set_led_color@color^0,c
  2009   00074A  EC8A  F010         	call	_set_led_color	;wreg free
  2010   00074E                     
  2011                           ;color.c: 188:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2012   00074E  0E12               	movlw	18
  2013   000750  6E33               	movwf	(??_get_color_code+1)^0,c
  2014   000752  0EDC               	movlw	220
  2015   000754  6E32               	movwf	??_get_color_code^0,c
  2016   000756  0E60               	movlw	96
  2017   000758                     u4287:
  2018   000758  2EE8               	decfsz	wreg,f,c
  2019   00075A  D7FE               	bra	u4287
  2020   00075C  2E32               	decfsz	??_get_color_code^0,f,c
  2021   00075E  D7FC               	bra	u4287
  2022   000760  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2023   000762  D7FA               	bra	u4287
  2024                           
  2025                           ;color.c: 189:     RGB.G = color_read_Green();
  2026   000764  EC7D  F00F         	call	_color_read_Green	;wreg free
  2027   000768  C012  F0EA         	movff	?_color_read_Green,_RGB+4
  2028   00076C  C013  F0EB         	movff	?_color_read_Green+1,_RGB+5
  2029   000770  0100               	movlb	0	; () banked
  2030   000772  6BEC               	clrf	(_RGB+6)& (0+255),b
  2031   000774  6BED               	clrf	(_RGB+7)& (0+255),b
  2032   000776                     
  2033                           ; BSR set to: 0
  2034                           ;color.c: 190:     set_led_color(0b001);
  2035   000776  0E00               	movlw	0
  2036   000778  6E0F               	movwf	(set_led_color@color+1)^0,c
  2037   00077A  0E01               	movlw	1
  2038   00077C  6E0E               	movwf	set_led_color@color^0,c
  2039   00077E  EC8A  F010         	call	_set_led_color	;wreg free
  2040   000782                     
  2041                           ;color.c: 191:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2042   000782  0E12               	movlw	18
  2043   000784  6E33               	movwf	(??_get_color_code+1)^0,c
  2044   000786  0EDC               	movlw	220
  2045   000788  6E32               	movwf	??_get_color_code^0,c
  2046   00078A  0E60               	movlw	96
  2047   00078C                     u4297:
  2048   00078C  2EE8               	decfsz	wreg,f,c
  2049   00078E  D7FE               	bra	u4297
  2050   000790  2E32               	decfsz	??_get_color_code^0,f,c
  2051   000792  D7FC               	bra	u4297
  2052   000794  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2053   000796  D7FA               	bra	u4297
  2054   000798                     
  2055                           ;color.c: 192:     RGB.B = color_read_Blue();
  2056   000798  ECCD  F00F         	call	_color_read_Blue	;wreg free
  2057   00079C  C012  F0EE         	movff	?_color_read_Blue,_RGB+8
  2058   0007A0  C013  F0EF         	movff	?_color_read_Blue+1,_RGB+9
  2059   0007A4  0100               	movlb	0	; () banked
  2060   0007A6  6BF0               	clrf	(_RGB+10)& (0+255),b
  2061   0007A8  6BF1               	clrf	(_RGB+11)& (0+255),b
  2062   0007AA                     
  2063                           ; BSR set to: 0
  2064                           ;color.c: 193:     set_led_color(0b000);
  2065   0007AA  0E00               	movlw	0
  2066   0007AC  6E0F               	movwf	(set_led_color@color+1)^0,c
  2067   0007AE  0E00               	movlw	0
  2068   0007B0  6E0E               	movwf	set_led_color@color^0,c
  2069   0007B2  EC8A  F010         	call	_set_led_color	;wreg free
  2070   0007B6                     
  2071                           ;color.c: 195:     struct RGB_val NormalizedRGB;;color.c: 196:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  2072   0007B6  5039               	movf	_Black_setup^0,w,c
  2073   0007B8  0100               	movlb	0	; () banked
  2074   0007BA  5DE6               	subwf	_RGB& (0+255),w,b
  2075   0007BC  503A               	movf	(_Black_setup+1)^0,w,c
  2076   0007BE  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2077   0007C0  503B               	movf	(_Black_setup+2)^0,w,c
  2078   0007C2  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2079   0007C4  503C               	movf	(_Black_setup+3)^0,w,c
  2080   0007C6  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2081   0007C8  B0D8               	btfsc	status,0,c
  2082   0007CA  EFE9  F003         	goto	u3411
  2083   0007CE  EFEB  F003         	goto	u3410
  2084   0007D2                     u3411:
  2085   0007D2  EFF5  F003         	goto	l4174
  2086   0007D6                     u3410:
  2087   0007D6                     
  2088                           ; BSR set to: 0
  2089   0007D6  0E00               	movlw	0
  2090   0007D8  6FC6               	movwf	_get_color_code$463& (0+255),b
  2091   0007DA  0E00               	movlw	0
  2092   0007DC  6FC7               	movwf	(_get_color_code$463+1)& (0+255),b
  2093   0007DE  0E00               	movlw	0
  2094   0007E0  6FC8               	movwf	(_get_color_code$463+2)& (0+255),b
  2095   0007E2  0E00               	movlw	0
  2096   0007E4  6FC9               	movwf	(_get_color_code$463+3)& (0+255),b
  2097   0007E6  EF2A  F004         	goto	l4176
  2098   0007EA                     l4174:
  2099                           
  2100                           ; BSR set to: 0
  2101   0007EA  5039               	movf	_Black_setup^0,w,c
  2102   0007EC  5DE6               	subwf	_RGB& (0+255),w,b
  2103   0007EE  6E0E               	movwf	___lmul@multiplier^0,c
  2104   0007F0  503A               	movf	(_Black_setup+1)^0,w,c
  2105   0007F2  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2106   0007F4  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2107   0007F6  503B               	movf	(_Black_setup+2)^0,w,c
  2108   0007F8  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2109   0007FA  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2110   0007FC  503C               	movf	(_Black_setup+3)^0,w,c
  2111   0007FE  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2112   000800  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2113   000802  0E64               	movlw	100
  2114   000804  6E12               	movwf	___lmul@multiplicand^0,c
  2115   000806  0E00               	movlw	0
  2116   000808  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2117   00080A  0E00               	movlw	0
  2118   00080C  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2119   00080E  0E00               	movlw	0
  2120   000810  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2121   000812  ECC1  F00E         	call	___lmul	;wreg free
  2122   000816  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2123   00081A  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2124   00081E  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2125   000822  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2126   000826  5039               	movf	_Black_setup^0,w,c
  2127   000828  0100               	movlb	0	; () banked
  2128   00082A  5D60               	subwf	_White_setup& (0+255),w,b
  2129   00082C  6E1E               	movwf	___lldiv@divisor^0,c
  2130   00082E  503A               	movf	(_Black_setup+1)^0,w,c
  2131   000830  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  2132   000832  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2133   000834  503B               	movf	(_Black_setup+2)^0,w,c
  2134   000836  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  2135   000838  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2136   00083A  503C               	movf	(_Black_setup+3)^0,w,c
  2137   00083C  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  2138   00083E  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2139   000840  ECF3  F00C         	call	___lldiv	;wreg free
  2140   000844  C01A  F0C6         	movff	?___lldiv,_get_color_code$463
  2141   000848  C01B  F0C7         	movff	?___lldiv+1,_get_color_code$463+1
  2142   00084C  C01C  F0C8         	movff	?___lldiv+2,_get_color_code$463+2
  2143   000850  C01D  F0C9         	movff	?___lldiv+3,_get_color_code$463+3
  2144   000854                     l4176:
  2145   000854  C0C6  F0DA         	movff	_get_color_code$463,get_color_code@NormalizedRGB
  2146   000858  C0C7  F0DB         	movff	_get_color_code$463+1,get_color_code@NormalizedRGB+1
  2147   00085C  C0C8  F0DC         	movff	_get_color_code$463+2,get_color_code@NormalizedRGB+2
  2148   000860  C0C9  F0DD         	movff	_get_color_code$463+3,get_color_code@NormalizedRGB+3
  2149   000864                     
  2150                           ;color.c: 197:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2151   000864  503D               	movf	(_Black_setup+4)^0,w,c
  2152   000866  0100               	movlb	0	; () banked
  2153   000868  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2154   00086A  503E               	movf	(_Black_setup+5)^0,w,c
  2155   00086C  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2156   00086E  503F               	movf	(_Black_setup+6)^0,w,c
  2157   000870  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2158   000872  5040               	movf	(_Black_setup+7)^0,w,c
  2159   000874  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2160   000876  B0D8               	btfsc	status,0,c
  2161   000878  EF40  F004         	goto	u3421
  2162   00087C  EF42  F004         	goto	u3420
  2163   000880                     u3421:
  2164   000880  EF4C  F004         	goto	l4182
  2165   000884                     u3420:
  2166   000884                     
  2167                           ; BSR set to: 0
  2168   000884  0E00               	movlw	0
  2169   000886  6FCA               	movwf	_get_color_code$464& (0+255),b
  2170   000888  0E00               	movlw	0
  2171   00088A  6FCB               	movwf	(_get_color_code$464+1)& (0+255),b
  2172   00088C  0E00               	movlw	0
  2173   00088E  6FCC               	movwf	(_get_color_code$464+2)& (0+255),b
  2174   000890  0E00               	movlw	0
  2175   000892  6FCD               	movwf	(_get_color_code$464+3)& (0+255),b
  2176   000894  EF81  F004         	goto	l4184
  2177   000898                     l4182:
  2178                           
  2179                           ; BSR set to: 0
  2180   000898  503D               	movf	(_Black_setup+4)^0,w,c
  2181   00089A  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2182   00089C  6E0E               	movwf	___lmul@multiplier^0,c
  2183   00089E  503E               	movf	(_Black_setup+5)^0,w,c
  2184   0008A0  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2185   0008A2  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2186   0008A4  503F               	movf	(_Black_setup+6)^0,w,c
  2187   0008A6  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2188   0008A8  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2189   0008AA  5040               	movf	(_Black_setup+7)^0,w,c
  2190   0008AC  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2191   0008AE  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2192   0008B0  0E64               	movlw	100
  2193   0008B2  6E12               	movwf	___lmul@multiplicand^0,c
  2194   0008B4  0E00               	movlw	0
  2195   0008B6  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2196   0008B8  0E00               	movlw	0
  2197   0008BA  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2198   0008BC  0E00               	movlw	0
  2199   0008BE  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2200   0008C0  ECC1  F00E         	call	___lmul	;wreg free
  2201   0008C4  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2202   0008C8  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2203   0008CC  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2204   0008D0  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2205   0008D4  503D               	movf	(_Black_setup+4)^0,w,c
  2206   0008D6  0100               	movlb	0	; () banked
  2207   0008D8  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  2208   0008DA  6E1E               	movwf	___lldiv@divisor^0,c
  2209   0008DC  503E               	movf	(_Black_setup+5)^0,w,c
  2210   0008DE  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  2211   0008E0  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2212   0008E2  503F               	movf	(_Black_setup+6)^0,w,c
  2213   0008E4  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  2214   0008E6  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2215   0008E8  5040               	movf	(_Black_setup+7)^0,w,c
  2216   0008EA  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  2217   0008EC  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2218   0008EE  ECF3  F00C         	call	___lldiv	;wreg free
  2219   0008F2  C01A  F0CA         	movff	?___lldiv,_get_color_code$464
  2220   0008F6  C01B  F0CB         	movff	?___lldiv+1,_get_color_code$464+1
  2221   0008FA  C01C  F0CC         	movff	?___lldiv+2,_get_color_code$464+2
  2222   0008FE  C01D  F0CD         	movff	?___lldiv+3,_get_color_code$464+3
  2223   000902                     l4184:
  2224   000902  C0CA  F0DE         	movff	_get_color_code$464,get_color_code@NormalizedRGB+4
  2225   000906  C0CB  F0DF         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+5
  2226   00090A  C0CC  F0E0         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+6
  2227   00090E  C0CD  F0E1         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+7
  2228   000912                     
  2229                           ;color.c: 198:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2230   000912  5041               	movf	(_Black_setup+8)^0,w,c
  2231   000914  0100               	movlb	0	; () banked
  2232   000916  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2233   000918  5042               	movf	(_Black_setup+9)^0,w,c
  2234   00091A  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2235   00091C  5043               	movf	(_Black_setup+10)^0,w,c
  2236   00091E  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2237   000920  5044               	movf	(_Black_setup+11)^0,w,c
  2238   000922  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2239   000924  B0D8               	btfsc	status,0,c
  2240   000926  EF97  F004         	goto	u3431
  2241   00092A  EF99  F004         	goto	u3430
  2242   00092E                     u3431:
  2243   00092E  EFA3  F004         	goto	l4190
  2244   000932                     u3430:
  2245   000932                     
  2246                           ; BSR set to: 0
  2247   000932  0E00               	movlw	0
  2248   000934  6FCE               	movwf	_get_color_code$465& (0+255),b
  2249   000936  0E00               	movlw	0
  2250   000938  6FCF               	movwf	(_get_color_code$465+1)& (0+255),b
  2251   00093A  0E00               	movlw	0
  2252   00093C  6FD0               	movwf	(_get_color_code$465+2)& (0+255),b
  2253   00093E  0E00               	movlw	0
  2254   000940  6FD1               	movwf	(_get_color_code$465+3)& (0+255),b
  2255   000942  EFD8  F004         	goto	l4192
  2256   000946                     l4190:
  2257                           
  2258                           ; BSR set to: 0
  2259   000946  5041               	movf	(_Black_setup+8)^0,w,c
  2260   000948  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2261   00094A  6E0E               	movwf	___lmul@multiplier^0,c
  2262   00094C  5042               	movf	(_Black_setup+9)^0,w,c
  2263   00094E  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2264   000950  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2265   000952  5043               	movf	(_Black_setup+10)^0,w,c
  2266   000954  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2267   000956  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2268   000958  5044               	movf	(_Black_setup+11)^0,w,c
  2269   00095A  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2270   00095C  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2271   00095E  0E64               	movlw	100
  2272   000960  6E12               	movwf	___lmul@multiplicand^0,c
  2273   000962  0E00               	movlw	0
  2274   000964  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2275   000966  0E00               	movlw	0
  2276   000968  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2277   00096A  0E00               	movlw	0
  2278   00096C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2279   00096E  ECC1  F00E         	call	___lmul	;wreg free
  2280   000972  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2281   000976  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2282   00097A  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2283   00097E  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2284   000982  5041               	movf	(_Black_setup+8)^0,w,c
  2285   000984  0100               	movlb	0	; () banked
  2286   000986  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  2287   000988  6E1E               	movwf	___lldiv@divisor^0,c
  2288   00098A  5042               	movf	(_Black_setup+9)^0,w,c
  2289   00098C  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  2290   00098E  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2291   000990  5043               	movf	(_Black_setup+10)^0,w,c
  2292   000992  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  2293   000994  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2294   000996  5044               	movf	(_Black_setup+11)^0,w,c
  2295   000998  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  2296   00099A  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2297   00099C  ECF3  F00C         	call	___lldiv	;wreg free
  2298   0009A0  C01A  F0CE         	movff	?___lldiv,_get_color_code$465
  2299   0009A4  C01B  F0CF         	movff	?___lldiv+1,_get_color_code$465+1
  2300   0009A8  C01C  F0D0         	movff	?___lldiv+2,_get_color_code$465+2
  2301   0009AC  C01D  F0D1         	movff	?___lldiv+3,_get_color_code$465+3
  2302   0009B0                     l4192:
  2303   0009B0  C0CE  F0E2         	movff	_get_color_code$465,get_color_code@NormalizedRGB+8
  2304   0009B4  C0CF  F0E3         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+9
  2305   0009B8  C0D0  F0E4         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+10
  2306   0009BC  C0D1  F0E5         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+11
  2307   0009C0                     
  2308                           ;color.c: 200:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2309   0009C0  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2310   0009C4  EE00  F014         	lfsr	0,get_color_distance@color1
  2311   0009C8  0E0B               	movlw	11
  2312   0009CA                     u3441:
  2313   0009CA  CFDB FFEB          	movff	plusw2,plusw0
  2314   0009CE  06E8               	decf	wreg,f,c
  2315   0009D0  E2FC               	bc	u3441
  2316   0009D2  EE21  F000         	lfsr	2,_Color_rules
  2317   0009D6  EE00  F020         	lfsr	0,get_color_distance@color2
  2318   0009DA  0E0B               	movlw	11
  2319   0009DC                     u3451:
  2320   0009DC  CFDB FFEB          	movff	plusw2,plusw0
  2321   0009E0  06E8               	decf	wreg,f,c
  2322   0009E2  E2FC               	bc	u3451
  2323   0009E4  EC4E  F007         	call	_get_color_distance	;wreg free
  2324   0009E8  C014  F0D2         	movff	?_get_color_distance,get_color_code@min_value
  2325   0009EC  C015  F0D3         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2326   0009F0                     
  2327                           ;color.c: 201:     unsigned int min_index = 0;
  2328   0009F0  0E00               	movlw	0
  2329   0009F2  0100               	movlb	0	; () banked
  2330   0009F4  6FD5               	movwf	(get_color_code@min_index+1)& (0+255),b
  2331   0009F6  0E00               	movlw	0
  2332   0009F8  6FD4               	movwf	get_color_code@min_index& (0+255),b
  2333   0009FA                     
  2334                           ; BSR set to: 0
  2335                           ;color.c: 202:     for(unsigned int i = 1;i < 9; i++){
  2336   0009FA  0E00               	movlw	0
  2337   0009FC  6FD9               	movwf	(get_color_code@i+1)& (0+255),b
  2338   0009FE  0E01               	movlw	1
  2339   000A00  6FD8               	movwf	get_color_code@i& (0+255),b
  2340   000A02                     l4204:
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;color.c: 203:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2344   000A02  C0D8  F00E         	movff	get_color_code@i,___wmul@multiplier
  2345   000A06  C0D9  F00F         	movff	get_color_code@i+1,___wmul@multiplier+1
  2346   000A0A  0E00               	movlw	0
  2347   000A0C  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  2348   000A0E  0E0C               	movlw	12
  2349   000A10  6E10               	movwf	___wmul@multiplicand^0,c
  2350   000A12  EC65  F011         	call	___wmul	;wreg free
  2351   000A16  0E00               	movlw	low _Color_rules
  2352   000A18  240E               	addwf	?___wmul^0,w,c
  2353   000A1A  6ED9               	movwf	fsr2l,c
  2354   000A1C  0E01               	movlw	high _Color_rules
  2355   000A1E  200F               	addwfc	(?___wmul+1)^0,w,c
  2356   000A20  6EDA               	movwf	fsr2h,c
  2357   000A22  EE10  F0BA         	lfsr	1,_get_color_code$2462
  2358   000A26  0E0B               	movlw	11
  2359   000A28                     u3461:
  2360   000A28  CFDB FFE3          	movff	plusw2,plusw1
  2361   000A2C  06E8               	decf	wreg,f,c
  2362   000A2E  E2FC               	bc	u3461
  2363   000A30                     
  2364                           ;color.c: 203:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2365   000A30  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2366   000A34  EE00  F014         	lfsr	0,get_color_distance@color1
  2367   000A38  0E0B               	movlw	11
  2368   000A3A                     u3471:
  2369   000A3A  CFDB FFEB          	movff	plusw2,plusw0
  2370   000A3E  06E8               	decf	wreg,f,c
  2371   000A40  E2FC               	bc	u3471
  2372   000A42  EE20  F0BA         	lfsr	2,_get_color_code$2462
  2373   000A46  EE00  F020         	lfsr	0,get_color_distance@color2
  2374   000A4A  0E0B               	movlw	11
  2375   000A4C                     u3481:
  2376   000A4C  CFDB FFEB          	movff	plusw2,plusw0
  2377   000A50  06E8               	decf	wreg,f,c
  2378   000A52  E2FC               	bc	u3481
  2379   000A54  EC4E  F007         	call	_get_color_distance	;wreg free
  2380   000A58  C014  F0D6         	movff	?_get_color_distance,get_color_code@value
  2381   000A5C  C015  F0D7         	movff	?_get_color_distance+1,get_color_code@value+1
  2382   000A60                     
  2383                           ;color.c: 204:         if(value < min_value){
  2384   000A60  0100               	movlb	0	; () banked
  2385   000A62  51D2               	movf	get_color_code@min_value& (0+255),w,b
  2386   000A64  5DD6               	subwf	get_color_code@value& (0+255),w,b
  2387   000A66  51D3               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2388   000A68  59D7               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2389   000A6A  B0D8               	btfsc	status,0,c
  2390   000A6C  EF3A  F005         	goto	u3491
  2391   000A70  EF3C  F005         	goto	u3490
  2392   000A74                     u3491:
  2393   000A74  EF44  F005         	goto	l4212
  2394   000A78                     u3490:
  2395   000A78                     
  2396                           ; BSR set to: 0
  2397                           ;color.c: 205:             min_index = i;
  2398   000A78  C0D8  F0D4         	movff	get_color_code@i,get_color_code@min_index
  2399   000A7C  C0D9  F0D5         	movff	get_color_code@i+1,get_color_code@min_index+1
  2400                           
  2401                           ;color.c: 206:             min_value = value;
  2402   000A80  C0D6  F0D2         	movff	get_color_code@value,get_color_code@min_value
  2403   000A84  C0D7  F0D3         	movff	get_color_code@value+1,get_color_code@min_value+1
  2404   000A88                     l4212:
  2405                           
  2406                           ; BSR set to: 0
  2407                           ;color.c: 208:     }
  2408   000A88  4BD8               	infsnz	get_color_code@i& (0+255),f,b
  2409   000A8A  2BD9               	incf	(get_color_code@i+1)& (0+255),f,b
  2410   000A8C                     
  2411                           ; BSR set to: 0
  2412   000A8C  51D9               	movf	(get_color_code@i+1)& (0+255),w,b
  2413   000A8E  E109               	bnz	u3500
  2414   000A90  0E09               	movlw	9
  2415   000A92  5DD8               	subwf	get_color_code@i& (0+255),w,b
  2416   000A94  A0D8               	btfss	status,0,c
  2417   000A96  EF4F  F005         	goto	u3501
  2418   000A9A  EF51  F005         	goto	u3500
  2419   000A9E                     u3501:
  2420   000A9E  EF01  F005         	goto	l4204
  2421   000AA2                     u3500:
  2422   000AA2                     
  2423                           ; BSR set to: 0
  2424                           ;color.c: 209:     return min_index;
  2425   000AA2  C0D4  F030         	movff	get_color_code@min_index,?_get_color_code
  2426   000AA6  C0D5  F031         	movff	get_color_code@min_index+1,?_get_color_code+1
  2427   000AAA                     
  2428                           ; BSR set to: 0
  2429   000AAA  0012               	return		;funcret
  2430   000AAC                     __end_of_get_color_code:
  2431                           	callstack 0
  2432                           
  2433 ;; *************** function _get_color_distance *****************
  2434 ;; Defined at:
  2435 ;;		line 149 in file "color.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  color1         12   19[COMRAM] struct RGB_val
  2438 ;;  color2         12   31[COMRAM] struct RGB_val
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2441 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2442 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  2   19[COMRAM] unsigned int 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2452 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2455 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;Total ram usage:       46 bytes
  2457 ;; Hardware stack levels used: 1
  2458 ;; Hardware stack levels required when called: 6
  2459 ;; This function calls:
  2460 ;;		___wmul
  2461 ;; This function is called by:
  2462 ;;		_get_color_code
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text7
  2467   000E9C                     __ptext7:
  2468                           	callstack 0
  2469   000E9C                     _get_color_distance:
  2470                           	callstack 23
  2471   000E9C                     
  2472                           ;color.c: 150:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2473   000E9C  5020               	movf	get_color_distance@color2^0,w,c
  2474   000E9E  5C14               	subwf	get_color_distance@color1^0,w,c
  2475   000EA0  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2476   000EA2  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2477   000EA4  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2478   000EA6  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2479   000EA8  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2480   000EAA  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2481   000EAC  B0D8               	btfsc	status,0,c
  2482   000EAE  EF5B  F007         	goto	u3051
  2483   000EB2  EF5D  F007         	goto	u3050
  2484   000EB6                     u3051:
  2485   000EB6  EF6C  F007         	goto	l3794
  2486   000EBA                     u3050:
  2487   000EBA  5014               	movf	get_color_distance@color1^0,w,c
  2488   000EBC  5C20               	subwf	get_color_distance@color2^0,w,c
  2489   000EBE  0100               	movlb	0	; () banked
  2490   000EC0  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2491   000EC2  5015               	movf	(get_color_distance@color1+1)^0,w,c
  2492   000EC4  5821               	subwfb	(get_color_distance@color2+1)^0,w,c
  2493   000EC6  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2494   000EC8  5016               	movf	(get_color_distance@color1+2)^0,w,c
  2495   000ECA  5822               	subwfb	(get_color_distance@color2+2)^0,w,c
  2496   000ECC  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2497   000ECE  5017               	movf	(get_color_distance@color1+3)^0,w,c
  2498   000ED0  5823               	subwfb	(get_color_distance@color2+3)^0,w,c
  2499   000ED2  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2500   000ED4  EF79  F007         	goto	l3796
  2501   000ED8                     l3794:
  2502   000ED8  5020               	movf	get_color_distance@color2^0,w,c
  2503   000EDA  5C14               	subwf	get_color_distance@color1^0,w,c
  2504   000EDC  0100               	movlb	0	; () banked
  2505   000EDE  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2506   000EE0  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2507   000EE2  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2508   000EE4  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2509   000EE6  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2510   000EE8  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2511   000EEA  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2512   000EEC  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2513   000EEE  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2514   000EF0  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2515   000EF2                     l3796:
  2516                           
  2517                           ; BSR set to: 0
  2518   000EF2  C0A8  F0B4         	movff	_get_color_distance$422,get_color_distance@R_offset
  2519   000EF6  C0A9  F0B5         	movff	_get_color_distance$422+1,get_color_distance@R_offset+1
  2520                           
  2521                           ;color.c: 151:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2522   000EFA  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2523   000EFC  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2524   000EFE  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2525   000F00  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2526   000F02  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2527   000F04  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2528   000F06  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2529   000F08  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2530   000F0A  B0D8               	btfsc	status,0,c
  2531   000F0C  EF8A  F007         	goto	u3061
  2532   000F10  EF8C  F007         	goto	u3060
  2533   000F14                     u3061:
  2534   000F14  EF9A  F007         	goto	l3800
  2535   000F18                     u3060:
  2536   000F18                     
  2537                           ; BSR set to: 0
  2538   000F18  5018               	movf	(get_color_distance@color1+4)^0,w,c
  2539   000F1A  5C24               	subwf	(get_color_distance@color2+4)^0,w,c
  2540   000F1C  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2541   000F1E  5019               	movf	(get_color_distance@color1+5)^0,w,c
  2542   000F20  5825               	subwfb	(get_color_distance@color2+5)^0,w,c
  2543   000F22  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2544   000F24  501A               	movf	(get_color_distance@color1+6)^0,w,c
  2545   000F26  5826               	subwfb	(get_color_distance@color2+6)^0,w,c
  2546   000F28  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2547   000F2A  501B               	movf	(get_color_distance@color1+7)^0,w,c
  2548   000F2C  5827               	subwfb	(get_color_distance@color2+7)^0,w,c
  2549   000F2E  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2550   000F30  EFA6  F007         	goto	l3802
  2551   000F34                     l3800:
  2552                           
  2553                           ; BSR set to: 0
  2554   000F34  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2555   000F36  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2556   000F38  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2557   000F3A  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2558   000F3C  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2559   000F3E  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2560   000F40  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2561   000F42  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2562   000F44  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2563   000F46  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2564   000F48  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2565   000F4A  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2566   000F4C                     l3802:
  2567                           
  2568                           ; BSR set to: 0
  2569   000F4C  C0AC  F0B6         	movff	_get_color_distance$424,get_color_distance@G_offset
  2570   000F50  C0AD  F0B7         	movff	_get_color_distance$424+1,get_color_distance@G_offset+1
  2571                           
  2572                           ;color.c: 152:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2573   000F54  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2574   000F56  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2575   000F58  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2576   000F5A  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2577   000F5C  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2578   000F5E  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2579   000F60  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2580   000F62  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2581   000F64  B0D8               	btfsc	status,0,c
  2582   000F66  EFB7  F007         	goto	u3071
  2583   000F6A  EFB9  F007         	goto	u3070
  2584   000F6E                     u3071:
  2585   000F6E  EFC7  F007         	goto	l3806
  2586   000F72                     u3070:
  2587   000F72                     
  2588                           ; BSR set to: 0
  2589   000F72  501C               	movf	(get_color_distance@color1+8)^0,w,c
  2590   000F74  5C28               	subwf	(get_color_distance@color2+8)^0,w,c
  2591   000F76  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2592   000F78  501D               	movf	(get_color_distance@color1+9)^0,w,c
  2593   000F7A  5829               	subwfb	(get_color_distance@color2+9)^0,w,c
  2594   000F7C  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2595   000F7E  501E               	movf	(get_color_distance@color1+10)^0,w,c
  2596   000F80  582A               	subwfb	(get_color_distance@color2+10)^0,w,c
  2597   000F82  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2598   000F84  501F               	movf	(get_color_distance@color1+11)^0,w,c
  2599   000F86  582B               	subwfb	(get_color_distance@color2+11)^0,w,c
  2600   000F88  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2601   000F8A  EFD3  F007         	goto	l3808
  2602   000F8E                     l3806:
  2603                           
  2604                           ; BSR set to: 0
  2605   000F8E  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2606   000F90  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2607   000F92  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2608   000F94  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2609   000F96  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2610   000F98  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2611   000F9A  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2612   000F9C  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2613   000F9E  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2614   000FA0  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2615   000FA2  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2616   000FA4  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2617   000FA6                     l3808:
  2618                           
  2619                           ; BSR set to: 0
  2620   000FA6  C0B0  F0B8         	movff	_get_color_distance$426,get_color_distance@B_offset
  2621   000FAA  C0B1  F0B9         	movff	_get_color_distance$426+1,get_color_distance@B_offset+1
  2622   000FAE                     
  2623                           ; BSR set to: 0
  2624                           ;color.c: 154:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2625   000FAE  C0B4  F00E         	movff	get_color_distance@R_offset,___wmul@multiplier
  2626   000FB2  C0B5  F00F         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2627   000FB6  C0B4  F010         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2628   000FBA  C0B5  F011         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2629   000FBE  EC65  F011         	call	___wmul	;wreg free
  2630   000FC2  C00E  F02C         	movff	?___wmul,??_get_color_distance
  2631   000FC6  C00F  F02D         	movff	?___wmul+1,??_get_color_distance+1
  2632   000FCA  C0B6  F00E         	movff	get_color_distance@G_offset,___wmul@multiplier
  2633   000FCE  C0B7  F00F         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2634   000FD2  C0B6  F010         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2635   000FD6  C0B7  F011         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2636   000FDA  EC65  F011         	call	___wmul	;wreg free
  2637   000FDE  500E               	movf	?___wmul^0,w,c
  2638   000FE0  242C               	addwf	??_get_color_distance^0,w,c
  2639   000FE2  6E2E               	movwf	(??_get_color_distance+2)^0,c
  2640   000FE4  500F               	movf	(?___wmul+1)^0,w,c
  2641   000FE6  202D               	addwfc	(??_get_color_distance+1)^0,w,c
  2642   000FE8  6E2F               	movwf	(??_get_color_distance+3)^0,c
  2643   000FEA  C0B8  F00E         	movff	get_color_distance@B_offset,___wmul@multiplier
  2644   000FEE  C0B9  F00F         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2645   000FF2  C0B8  F010         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2646   000FF6  C0B9  F011         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2647   000FFA  EC65  F011         	call	___wmul	;wreg free
  2648   000FFE  500E               	movf	?___wmul^0,w,c
  2649   001000  242E               	addwf	(??_get_color_distance+2)^0,w,c
  2650   001002  6E14               	movwf	?_get_color_distance^0,c
  2651   001004  500F               	movf	(?___wmul+1)^0,w,c
  2652   001006  202F               	addwfc	(??_get_color_distance+3)^0,w,c
  2653   001008  6E15               	movwf	(?_get_color_distance+1)^0,c
  2654   00100A  0012               	return		;funcret
  2655   00100C                     __end_of_get_color_distance:
  2656                           	callstack 0
  2657                           
  2658 ;; *************** function ___lmul *****************
  2659 ;; Defined at:
  2660 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;  multiplier      4   13[COMRAM] unsigned long 
  2663 ;;  multiplicand    4   17[COMRAM] unsigned long 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;  product         4   21[COMRAM] unsigned long 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  4   13[COMRAM] unsigned long 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2675 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2676 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2678 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2679 ;;Total ram usage:       12 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 5
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_get_color_code
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text8
  2690   001D82                     __ptext8:
  2691                           	callstack 0
  2692   001D82                     ___lmul:
  2693                           	callstack 24
  2694   001D82  0E00               	movlw	0
  2695   001D84  6E16               	movwf	___lmul@product^0,c
  2696   001D86  0E00               	movlw	0
  2697   001D88  6E17               	movwf	(___lmul@product+1)^0,c
  2698   001D8A  0E00               	movlw	0
  2699   001D8C  6E18               	movwf	(___lmul@product+2)^0,c
  2700   001D8E  0E00               	movlw	0
  2701   001D90  6E19               	movwf	(___lmul@product+3)^0,c
  2702   001D92                     l4068:
  2703   001D92  A00E               	btfss	___lmul@multiplier^0,0,c
  2704   001D94  EFCE  F00E         	goto	u3221
  2705   001D98  EFD0  F00E         	goto	u3220
  2706   001D9C                     u3221:
  2707   001D9C  EFD8  F00E         	goto	l4072
  2708   001DA0                     u3220:
  2709   001DA0  5012               	movf	___lmul@multiplicand^0,w,c
  2710   001DA2  2616               	addwf	___lmul@product^0,f,c
  2711   001DA4  5013               	movf	(___lmul@multiplicand+1)^0,w,c
  2712   001DA6  2217               	addwfc	(___lmul@product+1)^0,f,c
  2713   001DA8  5014               	movf	(___lmul@multiplicand+2)^0,w,c
  2714   001DAA  2218               	addwfc	(___lmul@product+2)^0,f,c
  2715   001DAC  5015               	movf	(___lmul@multiplicand+3)^0,w,c
  2716   001DAE  2219               	addwfc	(___lmul@product+3)^0,f,c
  2717   001DB0                     l4072:
  2718   001DB0  90D8               	bcf	status,0,c
  2719   001DB2  3612               	rlcf	___lmul@multiplicand^0,f,c
  2720   001DB4  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2721   001DB6  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2722   001DB8  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2723   001DBA  90D8               	bcf	status,0,c
  2724   001DBC  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
  2725   001DBE  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
  2726   001DC0  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
  2727   001DC2  320E               	rrcf	___lmul@multiplier^0,f,c
  2728   001DC4  500E               	movf	___lmul@multiplier^0,w,c
  2729   001DC6  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
  2730   001DC8  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
  2731   001DCA  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
  2732   001DCC  A4D8               	btfss	status,2,c
  2733   001DCE  EFEB  F00E         	goto	u3231
  2734   001DD2  EFED  F00E         	goto	u3230
  2735   001DD6                     u3231:
  2736   001DD6  EFC9  F00E         	goto	l4068
  2737   001DDA                     u3230:
  2738   001DDA  C016  F00E         	movff	___lmul@product,?___lmul
  2739   001DDE  C017  F00F         	movff	___lmul@product+1,?___lmul+1
  2740   001DE2  C018  F010         	movff	___lmul@product+2,?___lmul+2
  2741   001DE6  C019  F011         	movff	___lmul@product+3,?___lmul+3
  2742   001DEA  0012               	return		;funcret
  2743   001DEC                     __end_of___lmul:
  2744                           	callstack 0
  2745                           
  2746 ;; *************** function ___lldiv *****************
  2747 ;; Defined at:
  2748 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2749 ;; Parameters:    Size  Location     Type
  2750 ;;  dividend        4   25[COMRAM] unsigned long 
  2751 ;;  divisor         4   29[COMRAM] unsigned long 
  2752 ;; Auto vars:     Size  Location     Type
  2753 ;;  quotient        4   33[COMRAM] unsigned long 
  2754 ;;  counter         1   37[COMRAM] unsigned char 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  4   25[COMRAM] unsigned long 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2764 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2765 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2767 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2768 ;;Total ram usage:       13 bytes
  2769 ;; Hardware stack levels used: 1
  2770 ;; Hardware stack levels required when called: 5
  2771 ;; This function calls:
  2772 ;;		Nothing
  2773 ;; This function is called by:
  2774 ;;		_get_color_code
  2775 ;; This function uses a non-reentrant model
  2776 ;;
  2777                           
  2778                           	psect	text9
  2779   0019E6                     __ptext9:
  2780                           	callstack 0
  2781   0019E6                     ___lldiv:
  2782                           	callstack 24
  2783   0019E6  0E00               	movlw	0
  2784   0019E8  6E22               	movwf	___lldiv@quotient^0,c
  2785   0019EA  0E00               	movlw	0
  2786   0019EC  6E23               	movwf	(___lldiv@quotient+1)^0,c
  2787   0019EE  0E00               	movlw	0
  2788   0019F0  6E24               	movwf	(___lldiv@quotient+2)^0,c
  2789   0019F2  0E00               	movlw	0
  2790   0019F4  6E25               	movwf	(___lldiv@quotient+3)^0,c
  2791   0019F6  501E               	movf	___lldiv@divisor^0,w,c
  2792   0019F8  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
  2793   0019FA  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
  2794   0019FC  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
  2795   0019FE  B4D8               	btfsc	status,2,c
  2796   001A00  EF04  F00D         	goto	u3241
  2797   001A04  EF06  F00D         	goto	u3240
  2798   001A08                     u3241:
  2799   001A08  EF3C  F00D         	goto	l532
  2800   001A0C                     u3240:
  2801   001A0C  0E01               	movlw	1
  2802   001A0E  6E26               	movwf	___lldiv@counter^0,c
  2803   001A10  EF10  F00D         	goto	l4084
  2804   001A14                     l4082:
  2805   001A14  90D8               	bcf	status,0,c
  2806   001A16  361E               	rlcf	___lldiv@divisor^0,f,c
  2807   001A18  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
  2808   001A1A  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
  2809   001A1C  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
  2810   001A1E  2A26               	incf	___lldiv@counter^0,f,c
  2811   001A20                     l4084:
  2812   001A20  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
  2813   001A22  EF15  F00D         	goto	u3251
  2814   001A26  EF17  F00D         	goto	u3250
  2815   001A2A                     u3251:
  2816   001A2A  EF0A  F00D         	goto	l4082
  2817   001A2E                     u3250:
  2818   001A2E                     l4086:
  2819   001A2E  90D8               	bcf	status,0,c
  2820   001A30  3622               	rlcf	___lldiv@quotient^0,f,c
  2821   001A32  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
  2822   001A34  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
  2823   001A36  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
  2824   001A38  501E               	movf	___lldiv@divisor^0,w,c
  2825   001A3A  5C1A               	subwf	___lldiv@dividend^0,w,c
  2826   001A3C  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2827   001A3E  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
  2828   001A40  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2829   001A42  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
  2830   001A44  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2831   001A46  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
  2832   001A48  A0D8               	btfss	status,0,c
  2833   001A4A  EF29  F00D         	goto	u3261
  2834   001A4E  EF2B  F00D         	goto	u3260
  2835   001A52                     u3261:
  2836   001A52  EF34  F00D         	goto	l4094
  2837   001A56                     u3260:
  2838   001A56  501E               	movf	___lldiv@divisor^0,w,c
  2839   001A58  5E1A               	subwf	___lldiv@dividend^0,f,c
  2840   001A5A  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2841   001A5C  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
  2842   001A5E  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2843   001A60  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
  2844   001A62  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2845   001A64  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
  2846   001A66  8022               	bsf	___lldiv@quotient^0,0,c
  2847   001A68                     l4094:
  2848   001A68  90D8               	bcf	status,0,c
  2849   001A6A  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
  2850   001A6C  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
  2851   001A6E  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
  2852   001A70  321E               	rrcf	___lldiv@divisor^0,f,c
  2853   001A72  2E26               	decfsz	___lldiv@counter^0,f,c
  2854   001A74  EF17  F00D         	goto	l4086
  2855   001A78                     l532:
  2856   001A78  C022  F01A         	movff	___lldiv@quotient,?___lldiv
  2857   001A7C  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
  2858   001A80  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
  2859   001A84  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
  2860   001A88  0012               	return		;funcret
  2861   001A8A                     __end_of___lldiv:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _fullSpeedAhead *****************
  2865 ;; Defined at:
  2866 ;;		line 215 in file "dc_motor.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2869 ;;		 -> main@motorL(9), 
  2870 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2871 ;;		 -> main@motorR(9), 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;		None
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2883 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2886 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2887 ;;Total ram usage:        4 bytes
  2888 ;; Hardware stack levels used: 1
  2889 ;; Hardware stack levels required when called: 7
  2890 ;; This function calls:
  2891 ;;		_setMotorPWM
  2892 ;; This function is called by:
  2893 ;;		_main
  2894 ;; This function uses a non-reentrant model
  2895 ;;
  2896                           
  2897                           	psect	text10
  2898   001E50                     __ptext10:
  2899                           	callstack 0
  2900   001E50                     _fullSpeedAhead:
  2901                           	callstack 23
  2902   001E50                     
  2903                           ;dc_motor.c: 215: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 216: {;dc_motor.c: 217:     seconds = 0;
  2904   001E50  0E00               	movlw	0
  2905   001E52  6E4A               	movwf	(_seconds+1)^0,c
  2906   001E54  0E00               	movlw	0
  2907   001E56  6E49               	movwf	_seconds^0,c
  2908   001E58                     
  2909                           ;dc_motor.c: 218:     (*mL).direction=0;
  2910   001E58  EE20 F001          	lfsr	2,1
  2911   001E5C  5021               	movf	fullSpeedAhead@mL^0,w,c
  2912   001E5E  26D9               	addwf	fsr2l,f,c
  2913   001E60  5022               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2914   001E62  22DA               	addwfc	fsr2h,f,c
  2915   001E64  0E00               	movlw	0
  2916   001E66  6EDF               	movwf	indf2,c
  2917   001E68                     
  2918                           ;dc_motor.c: 219:     (*mR).direction=0;
  2919   001E68  EE20 F001          	lfsr	2,1
  2920   001E6C  5023               	movf	fullSpeedAhead@mR^0,w,c
  2921   001E6E  26D9               	addwf	fsr2l,f,c
  2922   001E70  5024               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2923   001E72  22DA               	addwfc	fsr2h,f,c
  2924   001E74  0E00               	movlw	0
  2925   001E76  6EDF               	movwf	indf2,c
  2926   001E78                     
  2927                           ;dc_motor.c: 220:     (*mL).power=68;
  2928   001E78  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2929   001E7C  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2930   001E80  0E44               	movlw	68
  2931   001E82  6EDF               	movwf	indf2,c
  2932   001E84                     
  2933                           ;dc_motor.c: 221:     (*mR).power=68;
  2934   001E84  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2935   001E88  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2936   001E8C  0E44               	movlw	68
  2937   001E8E  6EDF               	movwf	indf2,c
  2938   001E90                     
  2939                           ;dc_motor.c: 222:     setMotorPWM(mL);
  2940   001E90  C021  F01B         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2941   001E94  C022  F01C         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2942   001E98  EC06  F008         	call	_setMotorPWM	;wreg free
  2943   001E9C                     
  2944                           ;dc_motor.c: 223:     setMotorPWM(mR);
  2945   001E9C  C023  F01B         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2946   001EA0  C024  F01C         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2947   001EA4  EC06  F008         	call	_setMotorPWM	;wreg free
  2948   001EA8  0012               	return		;funcret
  2949   001EAA                     __end_of_fullSpeedAhead:
  2950                           	callstack 0
  2951                           
  2952 ;; *************** function _color_click_init *****************
  2953 ;; Defined at:
  2954 ;;		line 39 in file "color.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;Total ram usage:        1 bytes
  2973 ;; Hardware stack levels used: 1
  2974 ;; Hardware stack levels required when called: 9
  2975 ;; This function calls:
  2976 ;;		_I2C_2_Master_Init
  2977 ;;		_calibrate_black
  2978 ;;		_calibrate_white
  2979 ;;		_color_writetoaddr
  2980 ;; This function is called by:
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text11
  2986   0016CC                     __ptext11:
  2987                           	callstack 0
  2988   0016CC                     _color_click_init:
  2989                           	callstack 21
  2990   0016CC                     
  2991                           ;color.c: 42:     I2C_2_Master_Init();
  2992   0016CC  EC28  F011         	call	_I2C_2_Master_Init	;wreg free
  2993   0016D0                     
  2994                           ;color.c: 45:   color_writetoaddr(0x00, 0x01);
  2995   0016D0  0E01               	movlw	1
  2996   0016D2  6E10               	movwf	color_writetoaddr@value^0,c
  2997   0016D4  0E00               	movlw	0
  2998   0016D6  EC78  F011         	call	_color_writetoaddr
  2999   0016DA                     
  3000                           ;color.c: 46:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3001   0016DA  0E3F               	movlw	63
  3002   0016DC  6E23               	movwf	??_color_click_init^0,c
  3003   0016DE  0E55               	movlw	85
  3004   0016E0                     u4307:
  3005   0016E0  2EE8               	decfsz	wreg,f,c
  3006   0016E2  D7FE               	bra	u4307
  3007   0016E4  2E23               	decfsz	??_color_click_init^0,f,c
  3008   0016E6  D7FC               	bra	u4307
  3009   0016E8  F000               	nop	
  3010   0016EA                     
  3011                           ;color.c: 49:  color_writetoaddr(0x00, 0x03);
  3012   0016EA  0E03               	movlw	3
  3013   0016EC  6E10               	movwf	color_writetoaddr@value^0,c
  3014   0016EE  0E00               	movlw	0
  3015   0016F0  EC78  F011         	call	_color_writetoaddr
  3016   0016F4                     
  3017                           ;color.c: 52:  color_writetoaddr(0x01, 0xD5);
  3018   0016F4  0ED5               	movlw	213
  3019   0016F6  6E10               	movwf	color_writetoaddr@value^0,c
  3020   0016F8  0E01               	movlw	1
  3021   0016FA  EC78  F011         	call	_color_writetoaddr
  3022   0016FE                     
  3023                           ;color.c: 54:     TRISFbits.TRISF7 = 0;
  3024   0016FE  9E86               	bcf	134,7,c	;volatile
  3025   001700                     
  3026                           ;color.c: 55:     TRISGbits.TRISG1 = 0;
  3027   001700  9287               	bcf	135,1,c	;volatile
  3028   001702                     
  3029                           ;color.c: 56:     TRISAbits.TRISA4 = 0;
  3030   001702  9881               	bcf	129,4,c	;volatile
  3031   001704                     
  3032                           ;color.c: 58:     Color_rules[0] = Red_rule;
  3033   001704  EE20  F090         	lfsr	2,_Red_rule
  3034   001708  EE11  F000         	lfsr	1,_Color_rules
  3035   00170C  0E0B               	movlw	11
  3036   00170E                     u3271:
  3037   00170E  CFDB FFE3          	movff	plusw2,plusw1
  3038   001712  06E8               	decf	wreg,f,c
  3039   001714  E2FC               	bc	u3271
  3040   001716                     
  3041                           ;color.c: 59:     Color_rules[1] = Green_rule;
  3042   001716  EE20  F084         	lfsr	2,_Green_rule
  3043   00171A  EE11  F00C         	lfsr	1,_Color_rules+12
  3044   00171E  0E0B               	movlw	11
  3045   001720                     u3281:
  3046   001720  CFDB FFE3          	movff	plusw2,plusw1
  3047   001724  06E8               	decf	wreg,f,c
  3048   001726  E2FC               	bc	u3281
  3049   001728                     
  3050                           ;color.c: 60:     Color_rules[2] = Blue_rule;
  3051   001728  EE20  F078         	lfsr	2,_Blue_rule
  3052   00172C  EE11  F018         	lfsr	1,_Color_rules+24
  3053   001730  0E0B               	movlw	11
  3054   001732                     u3291:
  3055   001732  CFDB FFE3          	movff	plusw2,plusw1
  3056   001736  06E8               	decf	wreg,f,c
  3057   001738  E2FC               	bc	u3291
  3058   00173A                     
  3059                           ;color.c: 61:     Color_rules[3] = Yellow_rule;
  3060   00173A  EE20  F06C         	lfsr	2,_Yellow_rule
  3061   00173E  EE11  F024         	lfsr	1,_Color_rules+36
  3062   001742  0E0B               	movlw	11
  3063   001744                     u3301:
  3064   001744  CFDB FFE3          	movff	plusw2,plusw1
  3065   001748  06E8               	decf	wreg,f,c
  3066   00174A  E2FC               	bc	u3301
  3067   00174C                     
  3068                           ;color.c: 62:     Color_rules[4] = Pink_rule;
  3069   00174C  EE21  F09C         	lfsr	2,_Pink_rule
  3070   001750  EE11  F030         	lfsr	1,_Color_rules+48
  3071   001754  0E0B               	movlw	11
  3072   001756                     u3311:
  3073   001756  CFDB FFE3          	movff	plusw2,plusw1
  3074   00175A  06E8               	decf	wreg,f,c
  3075   00175C  E2FC               	bc	u3311
  3076   00175E                     
  3077                           ;color.c: 63:     Color_rules[5] = Orange_rule;
  3078   00175E  EE21  F090         	lfsr	2,_Orange_rule
  3079   001762  EE11  F03C         	lfsr	1,_Color_rules+60
  3080   001766  0E0B               	movlw	11
  3081   001768                     u3321:
  3082   001768  CFDB FFE3          	movff	plusw2,plusw1
  3083   00176C  06E8               	decf	wreg,f,c
  3084   00176E  E2FC               	bc	u3321
  3085   001770                     
  3086                           ;color.c: 64:     Color_rules[6] = Lightblue_rule;
  3087   001770  EE21  F084         	lfsr	2,_Lightblue_rule
  3088   001774  EE11  F048         	lfsr	1,_Color_rules+72
  3089   001778  0E0B               	movlw	11
  3090   00177A                     u3331:
  3091   00177A  CFDB FFE3          	movff	plusw2,plusw1
  3092   00177E  06E8               	decf	wreg,f,c
  3093   001780  E2FC               	bc	u3331
  3094   001782                     
  3095                           ;color.c: 65:     Color_rules[7] = White_rule;
  3096   001782  EE21  F078         	lfsr	2,_White_rule
  3097   001786  EE11  F054         	lfsr	1,_Color_rules+84
  3098   00178A  0E0B               	movlw	11
  3099   00178C                     u3341:
  3100   00178C  CFDB FFE3          	movff	plusw2,plusw1
  3101   001790  06E8               	decf	wreg,f,c
  3102   001792  E2FC               	bc	u3341
  3103   001794                     
  3104                           ;color.c: 66:     Color_rules[8] = Black_rule;
  3105   001794  EE21  F06C         	lfsr	2,_Black_rule
  3106   001798  EE11  F060         	lfsr	1,_Color_rules+96
  3107   00179C  0E0B               	movlw	11
  3108   00179E                     u3351:
  3109   00179E  CFDB FFE3          	movff	plusw2,plusw1
  3110   0017A2  06E8               	decf	wreg,f,c
  3111   0017A4  E2FC               	bc	u3351
  3112   0017A6                     
  3113                           ;color.c: 68:     TRISFbits.TRISF3=1;
  3114   0017A6  8686               	bsf	134,3,c	;volatile
  3115   0017A8                     
  3116                           ;color.c: 69:     ANSELFbits.ANSELF3=0;
  3117   0017A8  010E               	movlb	14	; () banked
  3118   0017AA  97B4               	bcf	180,3,b	;volatile
  3119   0017AC                     
  3120                           ; BSR set to: 14
  3121                           ;color.c: 70:     TRISFbits.TRISF2=1;
  3122   0017AC  8486               	bsf	134,2,c	;volatile
  3123   0017AE                     
  3124                           ; BSR set to: 14
  3125                           ;color.c: 71:     ANSELFbits.ANSELF2=0;
  3126   0017AE  95B4               	bcf	180,2,b	;volatile
  3127   0017B0                     l76:
  3128   0017B0  A68E               	btfss	142,3,c	;volatile
  3129   0017B2  EFDD  F00B         	goto	u3361
  3130   0017B6  EFDF  F00B         	goto	u3360
  3131   0017BA                     u3361:
  3132   0017BA  EFE6  F00B         	goto	l80
  3133   0017BE                     u3360:
  3134   0017BE  B48E               	btfsc	142,2,c	;volatile
  3135   0017C0  EFE4  F00B         	goto	u3371
  3136   0017C4  EFE6  F00B         	goto	u3370
  3137   0017C8                     u3371:
  3138   0017C8  EFD8  F00B         	goto	l76
  3139   0017CC                     u3370:
  3140   0017CC                     l80:
  3141                           
  3142                           ;color.c: 75:     if(!PORTFbits.RF2){
  3143   0017CC  B48E               	btfsc	142,2,c	;volatile
  3144   0017CE  EFEB  F00B         	goto	u3381
  3145   0017D2  EFED  F00B         	goto	u3380
  3146   0017D6                     u3381:
  3147   0017D6  EFEF  F00B         	goto	l4148
  3148   0017DA                     u3380:
  3149   0017DA  EF01  F00C         	goto	l82
  3150   0017DE                     l4148:
  3151                           
  3152                           ;color.c: 78:     calibrate_white();
  3153   0017DE  EC9E  F00C         	call	_calibrate_white	;wreg free
  3154   0017E2                     l83:
  3155   0017E2  B68E               	btfsc	142,3,c	;volatile
  3156   0017E4  EFF6  F00B         	goto	u3391
  3157   0017E8  EFF8  F00B         	goto	u3390
  3158   0017EC                     u3391:
  3159   0017EC  EFF1  F00B         	goto	l83
  3160   0017F0                     u3390:
  3161   0017F0                     
  3162                           ;color.c: 80:     calibrate_black();
  3163   0017F0  EC02  F00C         	call	_calibrate_black	;wreg free
  3164   0017F4                     l86:
  3165   0017F4  B68E               	btfsc	142,3,c	;volatile
  3166   0017F6  EFFF  F00B         	goto	u3401
  3167   0017FA  EF01  F00C         	goto	u3400
  3168   0017FE                     u3401:
  3169   0017FE  EFFA  F00B         	goto	l86
  3170   001802                     u3400:
  3171   001802                     l82:
  3172   001802  0012               	return		;funcret
  3173   001804                     __end_of_color_click_init:
  3174                           	callstack 0
  3175                           
  3176 ;; *************** function _color_writetoaddr *****************
  3177 ;; Defined at:
  3178 ;;		line 85 in file "color.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  address         1    wreg     unsigned char 
  3181 ;;  value           1   15[COMRAM] unsigned char 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;  address         1   16[COMRAM] unsigned char 
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg, status,2, status,0, cstack
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3194 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3196 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3197 ;;Total ram usage:        2 bytes
  3198 ;; Hardware stack levels used: 1
  3199 ;; Hardware stack levels required when called: 7
  3200 ;; This function calls:
  3201 ;;		_I2C_2_Master_Start
  3202 ;;		_I2C_2_Master_Stop
  3203 ;;		_I2C_2_Master_Write
  3204 ;; This function is called by:
  3205 ;;		_color_click_init
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text12
  3210   0022F0                     __ptext12:
  3211                           	callstack 0
  3212   0022F0                     _color_writetoaddr:
  3213                           	callstack 22
  3214                           
  3215                           ;incstack = 0
  3216                           ;color_writetoaddr@address stored from wreg
  3217   0022F0  6E11               	movwf	color_writetoaddr@address^0,c
  3218   0022F2                     
  3219                           ;color.c: 86:     I2C_2_Master_Start();
  3220   0022F2  ECC7  F011         	call	_I2C_2_Master_Start	;wreg free
  3221                           
  3222                           ;color.c: 87:     I2C_2_Master_Write(0x52 | 0x00);
  3223   0022F6  0E52               	movlw	82
  3224   0022F8  ECAB  F011         	call	_I2C_2_Master_Write
  3225                           
  3226                           ;color.c: 88:     I2C_2_Master_Write(0x80 | address);
  3227   0022FC  5011               	movf	color_writetoaddr@address^0,w,c
  3228   0022FE  0980               	iorlw	128
  3229   002300  ECAB  F011         	call	_I2C_2_Master_Write
  3230                           
  3231                           ;color.c: 89:     I2C_2_Master_Write(value);
  3232   002304  5010               	movf	color_writetoaddr@value^0,w,c
  3233   002306  ECAB  F011         	call	_I2C_2_Master_Write
  3234                           
  3235                           ;color.c: 90:     I2C_2_Master_Stop();
  3236   00230A  ECC2  F011         	call	_I2C_2_Master_Stop	;wreg free
  3237   00230E  0012               	return		;funcret
  3238   002310                     __end_of_color_writetoaddr:
  3239                           	callstack 0
  3240                           
  3241 ;; *************** function _calibrate_white *****************
  3242 ;; Defined at:
  3243 ;;		line 234 in file "color.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;		None
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2, status,0, cstack
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3260 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3261 ;;Total ram usage:        2 bytes
  3262 ;; Hardware stack levels used: 1
  3263 ;; Hardware stack levels required when called: 8
  3264 ;; This function calls:
  3265 ;;		_color_read_Blue
  3266 ;;		_color_read_Green
  3267 ;;		_color_read_Red
  3268 ;;		_set_led_color
  3269 ;; This function is called by:
  3270 ;;		_color_click_init
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text13
  3275   00193C                     __ptext13:
  3276                           	callstack 0
  3277   00193C                     _calibrate_white:
  3278                           	callstack 21
  3279   00193C                     
  3280                           ;color.c: 235:     set_led_color(0b100);
  3281   00193C  0E00               	movlw	0
  3282   00193E  6E0F               	movwf	(set_led_color@color+1)^0,c
  3283   001940  0E04               	movlw	4
  3284   001942  6E0E               	movwf	set_led_color@color^0,c
  3285   001944  EC8A  F010         	call	_set_led_color	;wreg free
  3286   001948                     
  3287                           ;color.c: 236:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3288   001948  0E12               	movlw	18
  3289   00194A  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3290   00194C  0EDC               	movlw	220
  3291   00194E  6E19               	movwf	??_calibrate_white^0,c
  3292   001950  0E60               	movlw	96
  3293   001952                     u4317:
  3294   001952  2EE8               	decfsz	wreg,f,c
  3295   001954  D7FE               	bra	u4317
  3296   001956  2E19               	decfsz	??_calibrate_white^0,f,c
  3297   001958  D7FC               	bra	u4317
  3298   00195A  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3299   00195C  D7FA               	bra	u4317
  3300   00195E                     
  3301                           ;color.c: 237:     White_setup.R = color_read_Red();
  3302   00195E  EC55  F00F         	call	_color_read_Red	;wreg free
  3303   001962  C012  F060         	movff	?_color_read_Red,_White_setup
  3304   001966  C013  F061         	movff	?_color_read_Red+1,_White_setup+1
  3305   00196A  0100               	movlb	0	; () banked
  3306   00196C  6B62               	clrf	(_White_setup+2)& (0+255),b
  3307   00196E  6B63               	clrf	(_White_setup+3)& (0+255),b
  3308   001970                     
  3309                           ; BSR set to: 0
  3310                           ;color.c: 238:     set_led_color(0b010);
  3311   001970  0E00               	movlw	0
  3312   001972  6E0F               	movwf	(set_led_color@color+1)^0,c
  3313   001974  0E02               	movlw	2
  3314   001976  6E0E               	movwf	set_led_color@color^0,c
  3315   001978  EC8A  F010         	call	_set_led_color	;wreg free
  3316   00197C                     
  3317                           ;color.c: 239:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3318   00197C  0E12               	movlw	18
  3319   00197E  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3320   001980  0EDC               	movlw	220
  3321   001982  6E19               	movwf	??_calibrate_white^0,c
  3322   001984  0E60               	movlw	96
  3323   001986                     u4327:
  3324   001986  2EE8               	decfsz	wreg,f,c
  3325   001988  D7FE               	bra	u4327
  3326   00198A  2E19               	decfsz	??_calibrate_white^0,f,c
  3327   00198C  D7FC               	bra	u4327
  3328   00198E  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3329   001990  D7FA               	bra	u4327
  3330                           
  3331                           ;color.c: 240:     White_setup.G = color_read_Green();
  3332   001992  EC7D  F00F         	call	_color_read_Green	;wreg free
  3333   001996  C012  F064         	movff	?_color_read_Green,_White_setup+4
  3334   00199A  C013  F065         	movff	?_color_read_Green+1,_White_setup+5
  3335   00199E  0100               	movlb	0	; () banked
  3336   0019A0  6B66               	clrf	(_White_setup+6)& (0+255),b
  3337   0019A2  6B67               	clrf	(_White_setup+7)& (0+255),b
  3338   0019A4                     
  3339                           ; BSR set to: 0
  3340                           ;color.c: 241:     set_led_color(0b001);
  3341   0019A4  0E00               	movlw	0
  3342   0019A6  6E0F               	movwf	(set_led_color@color+1)^0,c
  3343   0019A8  0E01               	movlw	1
  3344   0019AA  6E0E               	movwf	set_led_color@color^0,c
  3345   0019AC  EC8A  F010         	call	_set_led_color	;wreg free
  3346   0019B0                     
  3347                           ;color.c: 242:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3348   0019B0  0E12               	movlw	18
  3349   0019B2  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3350   0019B4  0EDC               	movlw	220
  3351   0019B6  6E19               	movwf	??_calibrate_white^0,c
  3352   0019B8  0E60               	movlw	96
  3353   0019BA                     u4337:
  3354   0019BA  2EE8               	decfsz	wreg,f,c
  3355   0019BC  D7FE               	bra	u4337
  3356   0019BE  2E19               	decfsz	??_calibrate_white^0,f,c
  3357   0019C0  D7FC               	bra	u4337
  3358   0019C2  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3359   0019C4  D7FA               	bra	u4337
  3360   0019C6                     
  3361                           ;color.c: 243:     White_setup.B = color_read_Blue();
  3362   0019C6  ECCD  F00F         	call	_color_read_Blue	;wreg free
  3363   0019CA  C012  F068         	movff	?_color_read_Blue,_White_setup+8
  3364   0019CE  C013  F069         	movff	?_color_read_Blue+1,_White_setup+9
  3365   0019D2  0100               	movlb	0	; () banked
  3366   0019D4  6B6A               	clrf	(_White_setup+10)& (0+255),b
  3367   0019D6  6B6B               	clrf	(_White_setup+11)& (0+255),b
  3368   0019D8                     
  3369                           ; BSR set to: 0
  3370                           ;color.c: 244:     set_led_color(0b000);
  3371   0019D8  0E00               	movlw	0
  3372   0019DA  6E0F               	movwf	(set_led_color@color+1)^0,c
  3373   0019DC  0E00               	movlw	0
  3374   0019DE  6E0E               	movwf	set_led_color@color^0,c
  3375   0019E0  EC8A  F010         	call	_set_led_color	;wreg free
  3376   0019E4  0012               	return		;funcret
  3377   0019E6                     __end_of_calibrate_white:
  3378                           	callstack 0
  3379                           
  3380 ;; *************** function _calibrate_black *****************
  3381 ;; Defined at:
  3382 ;;		line 214 in file "color.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  clear2          2   30[COMRAM] unsigned int 
  3387 ;;  clear1          2   28[COMRAM] unsigned int 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      void 
  3390 ;; Registers used:
  3391 ;;		wreg, status,2, status,0, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3398 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3399 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3401 ;;Total ram usage:        8 bytes
  3402 ;; Hardware stack levels used: 1
  3403 ;; Hardware stack levels required when called: 8
  3404 ;; This function calls:
  3405 ;;		___lwdiv
  3406 ;;		_color_read_Blue
  3407 ;;		_color_read_Clear
  3408 ;;		_color_read_Green
  3409 ;;		_color_read_Red
  3410 ;;		_set_led_color
  3411 ;; This function is called by:
  3412 ;;		_color_click_init
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text14
  3417   001804                     __ptext14:
  3418                           	callstack 0
  3419   001804                     _calibrate_black:
  3420                           	callstack 21
  3421   001804                     
  3422                           ;color.c: 215:     set_led_color(0b100);
  3423   001804  0E00               	movlw	0
  3424   001806  6E0F               	movwf	(set_led_color@color+1)^0,c
  3425   001808  0E04               	movlw	4
  3426   00180A  6E0E               	movwf	set_led_color@color^0,c
  3427   00180C  EC8A  F010         	call	_set_led_color	;wreg free
  3428   001810                     
  3429                           ;color.c: 216:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3430   001810  0E12               	movlw	18
  3431   001812  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3432   001814  0EDC               	movlw	220
  3433   001816  6E1B               	movwf	??_calibrate_black^0,c
  3434   001818  0E60               	movlw	96
  3435   00181A                     u4347:
  3436   00181A  2EE8               	decfsz	wreg,f,c
  3437   00181C  D7FE               	bra	u4347
  3438   00181E  2E1B               	decfsz	??_calibrate_black^0,f,c
  3439   001820  D7FC               	bra	u4347
  3440   001822  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3441   001824  D7FA               	bra	u4347
  3442   001826                     
  3443                           ;color.c: 217:     Black_setup.R = color_read_Red();
  3444   001826  EC55  F00F         	call	_color_read_Red	;wreg free
  3445   00182A  C012  F039         	movff	?_color_read_Red,_Black_setup
  3446   00182E  C013  F03A         	movff	?_color_read_Red+1,_Black_setup+1
  3447   001832  6A3B               	clrf	(_Black_setup+2)^0,c
  3448   001834  6A3C               	clrf	(_Black_setup+3)^0,c
  3449   001836                     
  3450                           ;color.c: 218:     set_led_color(0b010);
  3451   001836  0E00               	movlw	0
  3452   001838  6E0F               	movwf	(set_led_color@color+1)^0,c
  3453   00183A  0E02               	movlw	2
  3454   00183C  6E0E               	movwf	set_led_color@color^0,c
  3455   00183E  EC8A  F010         	call	_set_led_color	;wreg free
  3456   001842                     
  3457                           ;color.c: 219:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3458   001842  0E12               	movlw	18
  3459   001844  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3460   001846  0EDC               	movlw	220
  3461   001848  6E1B               	movwf	??_calibrate_black^0,c
  3462   00184A  0E60               	movlw	96
  3463   00184C                     u4357:
  3464   00184C  2EE8               	decfsz	wreg,f,c
  3465   00184E  D7FE               	bra	u4357
  3466   001850  2E1B               	decfsz	??_calibrate_black^0,f,c
  3467   001852  D7FC               	bra	u4357
  3468   001854  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3469   001856  D7FA               	bra	u4357
  3470                           
  3471                           ;color.c: 220:     Black_setup.G = color_read_Green();
  3472   001858  EC7D  F00F         	call	_color_read_Green	;wreg free
  3473   00185C  C012  F03D         	movff	?_color_read_Green,_Black_setup+4
  3474   001860  C013  F03E         	movff	?_color_read_Green+1,_Black_setup+5
  3475   001864  6A3F               	clrf	(_Black_setup+6)^0,c
  3476   001866  6A40               	clrf	(_Black_setup+7)^0,c
  3477   001868                     
  3478                           ;color.c: 221:     set_led_color(0b001);
  3479   001868  0E00               	movlw	0
  3480   00186A  6E0F               	movwf	(set_led_color@color+1)^0,c
  3481   00186C  0E01               	movlw	1
  3482   00186E  6E0E               	movwf	set_led_color@color^0,c
  3483   001870  EC8A  F010         	call	_set_led_color	;wreg free
  3484   001874                     
  3485                           ;color.c: 222:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3486   001874  0E12               	movlw	18
  3487   001876  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3488   001878  0EDC               	movlw	220
  3489   00187A  6E1B               	movwf	??_calibrate_black^0,c
  3490   00187C  0E60               	movlw	96
  3491   00187E                     u4367:
  3492   00187E  2EE8               	decfsz	wreg,f,c
  3493   001880  D7FE               	bra	u4367
  3494   001882  2E1B               	decfsz	??_calibrate_black^0,f,c
  3495   001884  D7FC               	bra	u4367
  3496   001886  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3497   001888  D7FA               	bra	u4367
  3498   00188A                     
  3499                           ;color.c: 223:     Black_setup.B = color_read_Blue();
  3500   00188A  ECCD  F00F         	call	_color_read_Blue	;wreg free
  3501   00188E  C012  F041         	movff	?_color_read_Blue,_Black_setup+8
  3502   001892  C013  F042         	movff	?_color_read_Blue+1,_Black_setup+9
  3503   001896  6A43               	clrf	(_Black_setup+10)^0,c
  3504   001898  6A44               	clrf	(_Black_setup+11)^0,c
  3505   00189A                     
  3506                           ;color.c: 224:     set_led_color(0b000);
  3507   00189A  0E00               	movlw	0
  3508   00189C  6E0F               	movwf	(set_led_color@color+1)^0,c
  3509   00189E  0E00               	movlw	0
  3510   0018A0  6E0E               	movwf	set_led_color@color^0,c
  3511   0018A2  EC8A  F010         	call	_set_led_color	;wreg free
  3512                           
  3513                           ;color.c: 225:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3514   0018A6  0E12               	movlw	18
  3515   0018A8  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3516   0018AA  0EDC               	movlw	220
  3517   0018AC  6E1B               	movwf	??_calibrate_black^0,c
  3518   0018AE  0E60               	movlw	96
  3519   0018B0                     u4377:
  3520   0018B0  2EE8               	decfsz	wreg,f,c
  3521   0018B2  D7FE               	bra	u4377
  3522   0018B4  2E1B               	decfsz	??_calibrate_black^0,f,c
  3523   0018B6  D7FC               	bra	u4377
  3524   0018B8  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3525   0018BA  D7FA               	bra	u4377
  3526   0018BC                     
  3527                           ;color.c: 226:     unsigned int clear1 = color_read_Clear();
  3528   0018BC  ECA5  F00F         	call	_color_read_Clear	;wreg free
  3529   0018C0  C012  F01D         	movff	?_color_read_Clear,calibrate_black@clear1
  3530   0018C4  C013  F01E         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3531   0018C8                     
  3532                           ;color.c: 227:     set_led_color(0b111);
  3533   0018C8  0E00               	movlw	0
  3534   0018CA  6E0F               	movwf	(set_led_color@color+1)^0,c
  3535   0018CC  0E07               	movlw	7
  3536   0018CE  6E0E               	movwf	set_led_color@color^0,c
  3537   0018D0  EC8A  F010         	call	_set_led_color	;wreg free
  3538   0018D4                     
  3539                           ;color.c: 228:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3540   0018D4  0E12               	movlw	18
  3541   0018D6  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3542   0018D8  0EDC               	movlw	220
  3543   0018DA  6E1B               	movwf	??_calibrate_black^0,c
  3544   0018DC  0E60               	movlw	96
  3545   0018DE                     u4387:
  3546   0018DE  2EE8               	decfsz	wreg,f,c
  3547   0018E0  D7FE               	bra	u4387
  3548   0018E2  2E1B               	decfsz	??_calibrate_black^0,f,c
  3549   0018E4  D7FC               	bra	u4387
  3550   0018E6  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3551   0018E8  D7FA               	bra	u4387
  3552   0018EA                     
  3553                           ;color.c: 229:     unsigned int clear2 = color_read_Clear();
  3554   0018EA  ECA5  F00F         	call	_color_read_Clear	;wreg free
  3555   0018EE  C012  F01F         	movff	?_color_read_Clear,calibrate_black@clear2
  3556   0018F2  C013  F020         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3557                           
  3558                           ;color.c: 230:     set_led_color(0b000);
  3559   0018F6  0E00               	movlw	0
  3560   0018F8  6E0F               	movwf	(set_led_color@color+1)^0,c
  3561   0018FA  0E00               	movlw	0
  3562   0018FC  6E0E               	movwf	set_led_color@color^0,c
  3563   0018FE  EC8A  F010         	call	_set_led_color	;wreg free
  3564   001902                     
  3565                           ;color.c: 231:     wall_coef = clear2/clear1/5;
  3566   001902  C01D  F016         	movff	calibrate_black@clear1,___lwdiv@divisor
  3567   001906  C01E  F017         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3568   00190A  C01F  F014         	movff	calibrate_black@clear2,___lwdiv@dividend
  3569   00190E  C020  F015         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3570   001912  EC4E  F00E         	call	___lwdiv	;wreg free
  3571   001916  C014  F021         	movff	?___lwdiv,_calibrate_black$2463
  3572   00191A  C015  F022         	movff	?___lwdiv+1,_calibrate_black$2463+1
  3573   00191E                     
  3574                           ;color.c: 231:     wall_coef = clear2/clear1/5;
  3575   00191E  C021  F014         	movff	_calibrate_black$2463,___lwdiv@dividend
  3576   001922  C022  F015         	movff	_calibrate_black$2463+1,___lwdiv@dividend+1
  3577   001926  0E00               	movlw	0
  3578   001928  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  3579   00192A  0E05               	movlw	5
  3580   00192C  6E16               	movwf	___lwdiv@divisor^0,c
  3581   00192E  EC4E  F00E         	call	___lwdiv	;wreg free
  3582   001932  C014  F0A6         	movff	?___lwdiv,_wall_coef
  3583   001936  C015  F0A7         	movff	?___lwdiv+1,_wall_coef+1
  3584   00193A  0012               	return		;funcret
  3585   00193C                     __end_of_calibrate_black:
  3586                           	callstack 0
  3587                           
  3588 ;; *************** function _set_led_color *****************
  3589 ;; Defined at:
  3590 ;;		line 157 in file "color.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;  color           2   13[COMRAM] unsigned int 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		None
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3608 ;;Total ram usage:        2 bytes
  3609 ;; Hardware stack levels used: 1
  3610 ;; Hardware stack levels required when called: 5
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_get_color_code
  3615 ;;		_calibrate_black
  3616 ;;		_calibrate_white
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           	psect	text15
  3621   002114                     __ptext15:
  3622                           	callstack 0
  3623   002114                     _set_led_color:
  3624                           	callstack 24
  3625   002114                     
  3626                           ;color.c: 161:     if(color & 0b100){
  3627   002114  A40E               	btfss	set_led_color@color^0,2,c
  3628   002116  EF8F  F010         	goto	u3001
  3629   00211A  EF91  F010         	goto	u3000
  3630   00211E                     u3001:
  3631   00211E  EF94  F010         	goto	l121
  3632   002122                     u3000:
  3633   002122                     
  3634                           ;color.c: 162:         LATGbits.LATG1 = 1;
  3635   002122  827F               	bsf	127,1,c	;volatile
  3636                           
  3637                           ;color.c: 163:     }else{
  3638   002124  EF95  F010         	goto	l122
  3639   002128                     l121:
  3640                           
  3641                           ;color.c: 164:         LATGbits.LATG1 = 0;
  3642   002128  927F               	bcf	127,1,c	;volatile
  3643   00212A                     l122:
  3644                           
  3645                           ;color.c: 166:     if(color & 0b010){
  3646   00212A  A20E               	btfss	set_led_color@color^0,1,c
  3647   00212C  EF9A  F010         	goto	u3011
  3648   002130  EF9C  F010         	goto	u3010
  3649   002134                     u3011:
  3650   002134  EF9F  F010         	goto	l123
  3651   002138                     u3010:
  3652   002138                     
  3653                           ;color.c: 167:         LATAbits.LATA4 = 1;
  3654   002138  8879               	bsf	121,4,c	;volatile
  3655                           
  3656                           ;color.c: 168:     }else{
  3657   00213A  EFA0  F010         	goto	l124
  3658   00213E                     l123:
  3659                           
  3660                           ;color.c: 169:         LATAbits.LATA4 = 0;
  3661   00213E  9879               	bcf	121,4,c	;volatile
  3662   002140                     l124:
  3663                           
  3664                           ;color.c: 171:     if(color & 0b001){
  3665   002140  A00E               	btfss	set_led_color@color^0,0,c
  3666   002142  EFA5  F010         	goto	u3021
  3667   002146  EFA7  F010         	goto	u3020
  3668   00214A                     u3021:
  3669   00214A  EFAA  F010         	goto	l125
  3670   00214E                     u3020:
  3671   00214E                     
  3672                           ;color.c: 172:         LATFbits.LATF7 = 1;
  3673   00214E  8E7E               	bsf	126,7,c	;volatile
  3674                           
  3675                           ;color.c: 173:     }else{
  3676   002150  EFAB  F010         	goto	l127
  3677   002154                     l125:
  3678                           
  3679                           ;color.c: 174:         LATFbits.LATF7 = 0;
  3680   002154  9E7E               	bcf	126,7,c	;volatile
  3681   002156                     l127:
  3682   002156  0012               	return		;funcret
  3683   002158                     __end_of_set_led_color:
  3684                           	callstack 0
  3685                           
  3686 ;; *************** function _color_read_Red *****************
  3687 ;; Defined at:
  3688 ;;		line 93 in file "color.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  tmp             2   22[COMRAM] unsigned int 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  2   17[COMRAM] unsigned int 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3703 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3704 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3705 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3706 ;;Total ram usage:        7 bytes
  3707 ;; Hardware stack levels used: 1
  3708 ;; Hardware stack levels required when called: 7
  3709 ;; This function calls:
  3710 ;;		_I2C_2_Master_Read
  3711 ;;		_I2C_2_Master_RepStart
  3712 ;;		_I2C_2_Master_Start
  3713 ;;		_I2C_2_Master_Stop
  3714 ;;		_I2C_2_Master_Write
  3715 ;; This function is called by:
  3716 ;;		_get_color_code
  3717 ;;		_calibrate_black
  3718 ;;		_calibrate_white
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text16
  3723   001EAA                     __ptext16:
  3724                           	callstack 0
  3725   001EAA                     _color_read_Red:
  3726                           	callstack 22
  3727   001EAA                     
  3728                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  3729   001EAA  ECC7  F011         	call	_I2C_2_Master_Start	;wreg free
  3730                           
  3731                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  3732   001EAE  0E52               	movlw	82
  3733   001EB0  ECAB  F011         	call	_I2C_2_Master_Write
  3734                           
  3735                           ;color.c: 98:  I2C_2_Master_Write(0xA0 | 0x16);
  3736   001EB4  0EB6               	movlw	182
  3737   001EB6  ECAB  F011         	call	_I2C_2_Master_Write
  3738                           
  3739                           ;color.c: 99:  I2C_2_Master_RepStart();
  3740   001EBA  ECCC  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3741                           
  3742                           ;color.c: 100:  I2C_2_Master_Write(0x52 | 0x01);
  3743   001EBE  0E53               	movlw	83
  3744   001EC0  ECAB  F011         	call	_I2C_2_Master_Write
  3745                           
  3746                           ;color.c: 101:  tmp=I2C_2_Master_Read(1);
  3747   001EC4  0E01               	movlw	1
  3748   001EC6  ECCE  F010         	call	_I2C_2_Master_Read
  3749   001ECA  6E14               	movwf	??_color_read_Red^0,c
  3750   001ECC  5014               	movf	??_color_read_Red^0,w,c
  3751   001ECE  6E17               	movwf	color_read_Red@tmp^0,c
  3752   001ED0  6A18               	clrf	(color_read_Red@tmp+1)^0,c
  3753                           
  3754                           ;color.c: 102:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3755   001ED2  0E00               	movlw	0
  3756   001ED4  ECCE  F010         	call	_I2C_2_Master_Read
  3757   001ED8  6E14               	movwf	??_color_read_Red^0,c
  3758   001EDA  5014               	movf	??_color_read_Red^0,w,c
  3759   001EDC  6E16               	movwf	(??_color_read_Red+2)^0,c
  3760   001EDE  6A15               	clrf	(??_color_read_Red+1)^0,c
  3761   001EE0  5017               	movf	color_read_Red@tmp^0,w,c
  3762   001EE2  1015               	iorwf	(??_color_read_Red+1)^0,w,c
  3763   001EE4  6E17               	movwf	color_read_Red@tmp^0,c
  3764   001EE6  5018               	movf	(color_read_Red@tmp+1)^0,w,c
  3765   001EE8  1016               	iorwf	(??_color_read_Red+2)^0,w,c
  3766   001EEA  6E18               	movwf	(color_read_Red@tmp+1)^0,c
  3767                           
  3768                           ;color.c: 103:  I2C_2_Master_Stop();
  3769   001EEC  ECC2  F011         	call	_I2C_2_Master_Stop	;wreg free
  3770   001EF0                     
  3771                           ;color.c: 104:  return tmp;
  3772   001EF0  C017  F012         	movff	color_read_Red@tmp,?_color_read_Red
  3773   001EF4  C018  F013         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3774   001EF8  0012               	return		;funcret
  3775   001EFA                     __end_of_color_read_Red:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _color_read_Green *****************
  3779 ;; Defined at:
  3780 ;;		line 121 in file "color.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;  tmp             2   22[COMRAM] unsigned int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  2   17[COMRAM] unsigned int 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3795 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3797 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3798 ;;Total ram usage:        7 bytes
  3799 ;; Hardware stack levels used: 1
  3800 ;; Hardware stack levels required when called: 7
  3801 ;; This function calls:
  3802 ;;		_I2C_2_Master_Read
  3803 ;;		_I2C_2_Master_RepStart
  3804 ;;		_I2C_2_Master_Start
  3805 ;;		_I2C_2_Master_Stop
  3806 ;;		_I2C_2_Master_Write
  3807 ;; This function is called by:
  3808 ;;		_get_color_code
  3809 ;;		_calibrate_black
  3810 ;;		_calibrate_white
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text17
  3815   001EFA                     __ptext17:
  3816                           	callstack 0
  3817   001EFA                     _color_read_Green:
  3818                           	callstack 22
  3819   001EFA                     
  3820                           ;color.c: 123:  unsigned int tmp;;color.c: 124:  I2C_2_Master_Start();
  3821   001EFA  ECC7  F011         	call	_I2C_2_Master_Start	;wreg free
  3822                           
  3823                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x00);
  3824   001EFE  0E52               	movlw	82
  3825   001F00  ECAB  F011         	call	_I2C_2_Master_Write
  3826                           
  3827                           ;color.c: 126:  I2C_2_Master_Write(0xA0 | 0x18);
  3828   001F04  0EB8               	movlw	184
  3829   001F06  ECAB  F011         	call	_I2C_2_Master_Write
  3830                           
  3831                           ;color.c: 127:  I2C_2_Master_RepStart();
  3832   001F0A  ECCC  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3833                           
  3834                           ;color.c: 128:  I2C_2_Master_Write(0x52 | 0x01);
  3835   001F0E  0E53               	movlw	83
  3836   001F10  ECAB  F011         	call	_I2C_2_Master_Write
  3837                           
  3838                           ;color.c: 129:  tmp=I2C_2_Master_Read(1);
  3839   001F14  0E01               	movlw	1
  3840   001F16  ECCE  F010         	call	_I2C_2_Master_Read
  3841   001F1A  6E14               	movwf	??_color_read_Green^0,c
  3842   001F1C  5014               	movf	??_color_read_Green^0,w,c
  3843   001F1E  6E17               	movwf	color_read_Green@tmp^0,c
  3844   001F20  6A18               	clrf	(color_read_Green@tmp+1)^0,c
  3845                           
  3846                           ;color.c: 130:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3847   001F22  0E00               	movlw	0
  3848   001F24  ECCE  F010         	call	_I2C_2_Master_Read
  3849   001F28  6E14               	movwf	??_color_read_Green^0,c
  3850   001F2A  5014               	movf	??_color_read_Green^0,w,c
  3851   001F2C  6E16               	movwf	(??_color_read_Green+2)^0,c
  3852   001F2E  6A15               	clrf	(??_color_read_Green+1)^0,c
  3853   001F30  5017               	movf	color_read_Green@tmp^0,w,c
  3854   001F32  1015               	iorwf	(??_color_read_Green+1)^0,w,c
  3855   001F34  6E17               	movwf	color_read_Green@tmp^0,c
  3856   001F36  5018               	movf	(color_read_Green@tmp+1)^0,w,c
  3857   001F38  1016               	iorwf	(??_color_read_Green+2)^0,w,c
  3858   001F3A  6E18               	movwf	(color_read_Green@tmp+1)^0,c
  3859                           
  3860                           ;color.c: 131:  I2C_2_Master_Stop();
  3861   001F3C  ECC2  F011         	call	_I2C_2_Master_Stop	;wreg free
  3862   001F40                     
  3863                           ;color.c: 132:  return tmp;
  3864   001F40  C017  F012         	movff	color_read_Green@tmp,?_color_read_Green
  3865   001F44  C018  F013         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3866   001F48  0012               	return		;funcret
  3867   001F4A                     __end_of_color_read_Green:
  3868                           	callstack 0
  3869                           
  3870 ;; *************** function _color_read_Clear *****************
  3871 ;; Defined at:
  3872 ;;		line 135 in file "color.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;		None
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  tmp             2   22[COMRAM] unsigned int 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  2   17[COMRAM] unsigned int 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3886 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3888 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3889 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3890 ;;Total ram usage:        7 bytes
  3891 ;; Hardware stack levels used: 1
  3892 ;; Hardware stack levels required when called: 7
  3893 ;; This function calls:
  3894 ;;		_I2C_2_Master_Read
  3895 ;;		_I2C_2_Master_RepStart
  3896 ;;		_I2C_2_Master_Start
  3897 ;;		_I2C_2_Master_Stop
  3898 ;;		_I2C_2_Master_Write
  3899 ;; This function is called by:
  3900 ;;		_calibrate_black
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text18
  3905   001F4A                     __ptext18:
  3906                           	callstack 0
  3907   001F4A                     _color_read_Clear:
  3908                           	callstack 21
  3909   001F4A                     
  3910                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  3911   001F4A  ECC7  F011         	call	_I2C_2_Master_Start	;wreg free
  3912                           
  3913                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  3914   001F4E  0E52               	movlw	82
  3915   001F50  ECAB  F011         	call	_I2C_2_Master_Write
  3916                           
  3917                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  3918   001F54  0EB4               	movlw	180
  3919   001F56  ECAB  F011         	call	_I2C_2_Master_Write
  3920                           
  3921                           ;color.c: 141:  I2C_2_Master_RepStart();
  3922   001F5A  ECCC  F011         	call	_I2C_2_Master_RepStart	;wreg free
  3923                           
  3924                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  3925   001F5E  0E53               	movlw	83
  3926   001F60  ECAB  F011         	call	_I2C_2_Master_Write
  3927                           
  3928                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  3929   001F64  0E01               	movlw	1
  3930   001F66  ECCE  F010         	call	_I2C_2_Master_Read
  3931   001F6A  6E14               	movwf	??_color_read_Clear^0,c
  3932   001F6C  5014               	movf	??_color_read_Clear^0,w,c
  3933   001F6E  6E17               	movwf	color_read_Clear@tmp^0,c
  3934   001F70  6A18               	clrf	(color_read_Clear@tmp+1)^0,c
  3935                           
  3936                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3937   001F72  0E00               	movlw	0
  3938   001F74  ECCE  F010         	call	_I2C_2_Master_Read
  3939   001F78  6E14               	movwf	??_color_read_Clear^0,c
  3940   001F7A  5014               	movf	??_color_read_Clear^0,w,c
  3941   001F7C  6E16               	movwf	(??_color_read_Clear+2)^0,c
  3942   001F7E  6A15               	clrf	(??_color_read_Clear+1)^0,c
  3943   001F80  5017               	movf	color_read_Clear@tmp^0,w,c
  3944   001F82  1015               	iorwf	(??_color_read_Clear+1)^0,w,c
  3945   001F84  6E17               	movwf	color_read_Clear@tmp^0,c
  3946   001F86  5018               	movf	(color_read_Clear@tmp+1)^0,w,c
  3947   001F88  1016               	iorwf	(??_color_read_Clear+2)^0,w,c
  3948   001F8A  6E18               	movwf	(color_read_Clear@tmp+1)^0,c
  3949                           
  3950                           ;color.c: 145:  I2C_2_Master_Stop();
  3951   001F8C  ECC2  F011         	call	_I2C_2_Master_Stop	;wreg free
  3952   001F90                     
  3953                           ;color.c: 146:  return tmp;
  3954   001F90  C017  F012         	movff	color_read_Clear@tmp,?_color_read_Clear
  3955   001F94  C018  F013         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3956   001F98  0012               	return		;funcret
  3957   001F9A                     __end_of_color_read_Clear:
  3958                           	callstack 0
  3959                           
  3960 ;; *************** function _color_read_Blue *****************
  3961 ;; Defined at:
  3962 ;;		line 107 in file "color.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  tmp             2   22[COMRAM] unsigned int 
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  2   17[COMRAM] unsigned int 
  3969 ;; Registers used:
  3970 ;;		wreg, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3976 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3977 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3978 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3979 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3980 ;;Total ram usage:        7 bytes
  3981 ;; Hardware stack levels used: 1
  3982 ;; Hardware stack levels required when called: 7
  3983 ;; This function calls:
  3984 ;;		_I2C_2_Master_Read
  3985 ;;		_I2C_2_Master_RepStart
  3986 ;;		_I2C_2_Master_Start
  3987 ;;		_I2C_2_Master_Stop
  3988 ;;		_I2C_2_Master_Write
  3989 ;; This function is called by:
  3990 ;;		_get_color_code
  3991 ;;		_calibrate_black
  3992 ;;		_calibrate_white
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text19
  3997   001F9A                     __ptext19:
  3998                           	callstack 0
  3999   001F9A                     _color_read_Blue:
  4000                           	callstack 22
  4001   001F9A                     
  4002                           ;color.c: 109:  unsigned int tmp;;color.c: 110:  I2C_2_Master_Start();
  4003   001F9A  ECC7  F011         	call	_I2C_2_Master_Start	;wreg free
  4004                           
  4005                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x00);
  4006   001F9E  0E52               	movlw	82
  4007   001FA0  ECAB  F011         	call	_I2C_2_Master_Write
  4008                           
  4009                           ;color.c: 112:  I2C_2_Master_Write(0xA0 | 0x1A);
  4010   001FA4  0EBA               	movlw	186
  4011   001FA6  ECAB  F011         	call	_I2C_2_Master_Write
  4012                           
  4013                           ;color.c: 113:  I2C_2_Master_RepStart();
  4014   001FAA  ECCC  F011         	call	_I2C_2_Master_RepStart	;wreg free
  4015                           
  4016                           ;color.c: 114:  I2C_2_Master_Write(0x52 | 0x01);
  4017   001FAE  0E53               	movlw	83
  4018   001FB0  ECAB  F011         	call	_I2C_2_Master_Write
  4019                           
  4020                           ;color.c: 115:  tmp=I2C_2_Master_Read(1);
  4021   001FB4  0E01               	movlw	1
  4022   001FB6  ECCE  F010         	call	_I2C_2_Master_Read
  4023   001FBA  6E14               	movwf	??_color_read_Blue^0,c
  4024   001FBC  5014               	movf	??_color_read_Blue^0,w,c
  4025   001FBE  6E17               	movwf	color_read_Blue@tmp^0,c
  4026   001FC0  6A18               	clrf	(color_read_Blue@tmp+1)^0,c
  4027                           
  4028                           ;color.c: 116:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4029   001FC2  0E00               	movlw	0
  4030   001FC4  ECCE  F010         	call	_I2C_2_Master_Read
  4031   001FC8  6E14               	movwf	??_color_read_Blue^0,c
  4032   001FCA  5014               	movf	??_color_read_Blue^0,w,c
  4033   001FCC  6E16               	movwf	(??_color_read_Blue+2)^0,c
  4034   001FCE  6A15               	clrf	(??_color_read_Blue+1)^0,c
  4035   001FD0  5017               	movf	color_read_Blue@tmp^0,w,c
  4036   001FD2  1015               	iorwf	(??_color_read_Blue+1)^0,w,c
  4037   001FD4  6E17               	movwf	color_read_Blue@tmp^0,c
  4038   001FD6  5018               	movf	(color_read_Blue@tmp+1)^0,w,c
  4039   001FD8  1016               	iorwf	(??_color_read_Blue+2)^0,w,c
  4040   001FDA  6E18               	movwf	(color_read_Blue@tmp+1)^0,c
  4041                           
  4042                           ;color.c: 117:  I2C_2_Master_Stop();
  4043   001FDC  ECC2  F011         	call	_I2C_2_Master_Stop	;wreg free
  4044   001FE0                     
  4045                           ;color.c: 118:  return tmp;
  4046   001FE0  C017  F012         	movff	color_read_Blue@tmp,?_color_read_Blue
  4047   001FE4  C018  F013         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4048   001FE8  0012               	return		;funcret
  4049   001FEA                     __end_of_color_read_Blue:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function _I2C_2_Master_Write *****************
  4053 ;; Defined at:
  4054 ;;		line 45 in file "i2c.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  data_byte       1    wreg     unsigned char 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  data_byte       1   14[COMRAM] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, status,2, status,0, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used: 1
  4074 ;; Hardware stack levels required when called: 6
  4075 ;; This function calls:
  4076 ;;		_I2C_2_Master_Idle
  4077 ;; This function is called by:
  4078 ;;		_color_writetoaddr
  4079 ;;		_color_read_Red
  4080 ;;		_color_read_Blue
  4081 ;;		_color_read_Green
  4082 ;;		_color_read_Clear
  4083 ;; This function uses a non-reentrant model
  4084 ;;
  4085                           
  4086                           	psect	text20
  4087   002356                     __ptext20:
  4088                           	callstack 0
  4089   002356                     _I2C_2_Master_Write:
  4090                           	callstack 22
  4091                           
  4092                           ;incstack = 0
  4093                           ;I2C_2_Master_Write@data_byte stored from wreg
  4094   002356  6E0F               	movwf	I2C_2_Master_Write@data_byte^0,c
  4095   002358                     
  4096                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4097   002358  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4098   00235C                     
  4099                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4100   00235C  C00F  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4101   002360  0012               	return		;funcret
  4102   002362                     __end_of_I2C_2_Master_Write:
  4103                           	callstack 0
  4104                           
  4105 ;; *************** function _I2C_2_Master_Stop *****************
  4106 ;; Defined at:
  4107 ;;		line 39 in file "i2c.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used: 1
  4127 ;; Hardware stack levels required when called: 6
  4128 ;; This function calls:
  4129 ;;		_I2C_2_Master_Idle
  4130 ;; This function is called by:
  4131 ;;		_color_writetoaddr
  4132 ;;		_color_read_Red
  4133 ;;		_color_read_Blue
  4134 ;;		_color_read_Green
  4135 ;;		_color_read_Clear
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text21
  4140   002384                     __ptext21:
  4141                           	callstack 0
  4142   002384                     _I2C_2_Master_Stop:
  4143                           	callstack 22
  4144   002384                     
  4145                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4146   002384  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4147   002388                     
  4148                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4149   002388  010E               	movlb	14	; () banked
  4150   00238A  85DA               	bsf	218,2,b	;volatile
  4151   00238C                     
  4152                           ; BSR set to: 14
  4153   00238C  0012               	return		;funcret
  4154   00238E                     __end_of_I2C_2_Master_Stop:
  4155                           	callstack 0
  4156                           
  4157 ;; *************** function _I2C_2_Master_Start *****************
  4158 ;; Defined at:
  4159 ;;		line 27 in file "i2c.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used: 1
  4179 ;; Hardware stack levels required when called: 6
  4180 ;; This function calls:
  4181 ;;		_I2C_2_Master_Idle
  4182 ;; This function is called by:
  4183 ;;		_color_writetoaddr
  4184 ;;		_color_read_Red
  4185 ;;		_color_read_Blue
  4186 ;;		_color_read_Green
  4187 ;;		_color_read_Clear
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text22
  4192   00238E                     __ptext22:
  4193                           	callstack 0
  4194   00238E                     _I2C_2_Master_Start:
  4195                           	callstack 22
  4196   00238E                     
  4197                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4198   00238E  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4199   002392                     
  4200                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4201   002392  010E               	movlb	14	; () banked
  4202   002394  81DA               	bsf	218,0,b	;volatile
  4203   002396                     
  4204                           ; BSR set to: 14
  4205   002396  0012               	return		;funcret
  4206   002398                     __end_of_I2C_2_Master_Start:
  4207                           	callstack 0
  4208                           
  4209 ;; *************** function _I2C_2_Master_RepStart *****************
  4210 ;; Defined at:
  4211 ;;		line 33 in file "i2c.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;		None
  4216 ;; Return value:  Size  Location     Type
  4217 ;;                  1    wreg      void 
  4218 ;; Registers used:
  4219 ;;		wreg, status,2, status,0, cstack
  4220 ;; Tracked objects:
  4221 ;;		On entry : 0/0
  4222 ;;		On exit  : 0/0
  4223 ;;		Unchanged: 0/0
  4224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4229 ;;Total ram usage:        0 bytes
  4230 ;; Hardware stack levels used: 1
  4231 ;; Hardware stack levels required when called: 6
  4232 ;; This function calls:
  4233 ;;		_I2C_2_Master_Idle
  4234 ;; This function is called by:
  4235 ;;		_color_read_Red
  4236 ;;		_color_read_Blue
  4237 ;;		_color_read_Green
  4238 ;;		_color_read_Clear
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text23
  4243   002398                     __ptext23:
  4244                           	callstack 0
  4245   002398                     _I2C_2_Master_RepStart:
  4246                           	callstack 22
  4247   002398                     
  4248                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4249   002398  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4250   00239C                     
  4251                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4252   00239C  010E               	movlb	14	; () banked
  4253   00239E  83DA               	bsf	218,1,b	;volatile
  4254   0023A0                     
  4255                           ; BSR set to: 14
  4256   0023A0  0012               	return		;funcret
  4257   0023A2                     __end_of_I2C_2_Master_RepStart:
  4258                           	callstack 0
  4259                           
  4260 ;; *************** function _I2C_2_Master_Read *****************
  4261 ;; Defined at:
  4262 ;;		line 51 in file "i2c.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  ack             1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  ack             1   15[COMRAM] unsigned char 
  4267 ;;  tmp             1   16[COMRAM] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      unsigned char 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4278 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4280 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4281 ;;Total ram usage:        3 bytes
  4282 ;; Hardware stack levels used: 1
  4283 ;; Hardware stack levels required when called: 6
  4284 ;; This function calls:
  4285 ;;		_I2C_2_Master_Idle
  4286 ;; This function is called by:
  4287 ;;		_color_read_Red
  4288 ;;		_color_read_Blue
  4289 ;;		_color_read_Green
  4290 ;;		_color_read_Clear
  4291 ;; This function uses a non-reentrant model
  4292 ;;
  4293                           
  4294                           	psect	text24
  4295   00219C                     __ptext24:
  4296                           	callstack 0
  4297   00219C                     _I2C_2_Master_Read:
  4298                           	callstack 22
  4299                           
  4300                           ; BSR set to: 14
  4301                           ;incstack = 0
  4302                           ;I2C_2_Master_Read@ack stored from wreg
  4303   00219C  6E10               	movwf	I2C_2_Master_Read@ack^0,c
  4304   00219E                     
  4305                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4306   00219E  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4307   0021A2                     
  4308                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4309   0021A2  010E               	movlb	14	; () banked
  4310   0021A4  87DA               	bsf	218,3,b	;volatile
  4311                           
  4312                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4313   0021A6  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4314   0021AA                     
  4315                           ;i2c.c: 57:   tmp = SSP2BUF;
  4316   0021AA  CED5 F011          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4317                           
  4318                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4319   0021AE  EC3D  F011         	call	_I2C_2_Master_Idle	;wreg free
  4320   0021B2                     
  4321                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4322   0021B2  5010               	movf	I2C_2_Master_Read@ack^0,w,c
  4323   0021B4  B4D8               	btfsc	status,2,c
  4324   0021B6  EFDF  F010         	goto	u2951
  4325   0021BA  EFE3  F010         	goto	u2950
  4326   0021BE                     u2951:
  4327   0021BE  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4328   0021C0  2A0F               	incf	??_I2C_2_Master_Read^0,f,c
  4329   0021C2  EFE4  F010         	goto	u2968
  4330   0021C6                     u2950:
  4331   0021C6  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4332   0021C8                     u2968:
  4333   0021C8  3A0F               	swapf	??_I2C_2_Master_Read^0,f,c
  4334   0021CA  460F               	rlncf	??_I2C_2_Master_Read^0,f,c
  4335   0021CC  010E               	movlb	14	; () banked
  4336   0021CE  51DA               	movf	218,w,b	;volatile
  4337   0021D0  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4338   0021D2  0BDF               	andlw	-33
  4339   0021D4  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4340   0021D6  6FDA               	movwf	218,b	;volatile
  4341   0021D8                     
  4342                           ; BSR set to: 14
  4343                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4344   0021D8  89DA               	bsf	218,4,b	;volatile
  4345   0021DA                     
  4346                           ; BSR set to: 14
  4347                           ;i2c.c: 61:   return tmp;
  4348   0021DA  5011               	movf	I2C_2_Master_Read@tmp^0,w,c
  4349   0021DC                     
  4350                           ; BSR set to: 14
  4351   0021DC  0012               	return		;funcret
  4352   0021DE                     __end_of_I2C_2_Master_Read:
  4353                           	callstack 0
  4354                           
  4355 ;; *************** function _I2C_2_Master_Idle *****************
  4356 ;; Defined at:
  4357 ;;		line 22 in file "i2c.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;                  1    wreg      void 
  4364 ;; Registers used:
  4365 ;;		wreg, status,2, status,0
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4375 ;;Total ram usage:        1 bytes
  4376 ;; Hardware stack levels used: 1
  4377 ;; Hardware stack levels required when called: 5
  4378 ;; This function calls:
  4379 ;;		Nothing
  4380 ;; This function is called by:
  4381 ;;		_I2C_2_Master_Start
  4382 ;;		_I2C_2_Master_RepStart
  4383 ;;		_I2C_2_Master_Stop
  4384 ;;		_I2C_2_Master_Write
  4385 ;;		_I2C_2_Master_Read
  4386 ;; This function uses a non-reentrant model
  4387 ;;
  4388                           
  4389                           	psect	text25
  4390   00227A                     __ptext25:
  4391                           	callstack 0
  4392   00227A                     _I2C_2_Master_Idle:
  4393                           	callstack 22
  4394   00227A                     l386:
  4395   00227A  010E               	movlb	14	; () banked
  4396   00227C  B5D8               	btfsc	216,2,b	;volatile
  4397   00227E  EF43  F011         	goto	u2931
  4398   002282  EF45  F011         	goto	u2930
  4399   002286                     u2931:
  4400   002286  EF3D  F011         	goto	l386
  4401   00228A                     u2930:
  4402   00228A                     
  4403                           ; BSR set to: 14
  4404   00228A  CEDA F00E          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4405   00228E  0E1F               	movlw	31
  4406   002290  160E               	andwf	??_I2C_2_Master_Idle^0,f,c
  4407   002292  A4D8               	btfss	status,2,c
  4408   002294  EF4E  F011         	goto	u2941
  4409   002298  EF50  F011         	goto	u2940
  4410   00229C                     u2941:
  4411   00229C  EF3D  F011         	goto	l386
  4412   0022A0                     u2940:
  4413   0022A0                     
  4414                           ; BSR set to: 14
  4415   0022A0  0012               	return		;funcret
  4416   0022A2                     __end_of_I2C_2_Master_Idle:
  4417                           	callstack 0
  4418                           
  4419 ;; *************** function _I2C_2_Master_Init *****************
  4420 ;; Defined at:
  4421 ;;		line 4 in file "i2c.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;		None
  4424 ;; Auto vars:     Size  Location     Type
  4425 ;;		None
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, status,2
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4439 ;;Total ram usage:        0 bytes
  4440 ;; Hardware stack levels used: 1
  4441 ;; Hardware stack levels required when called: 5
  4442 ;; This function calls:
  4443 ;;		Nothing
  4444 ;; This function is called by:
  4445 ;;		_color_click_init
  4446 ;; This function uses a non-reentrant model
  4447 ;;
  4448                           
  4449                           	psect	text26
  4450   002250                     __ptext26:
  4451                           	callstack 0
  4452   002250                     _I2C_2_Master_Init:
  4453                           	callstack 24
  4454   002250                     
  4455                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4456   002250  010E               	movlb	14	; () banked
  4457   002252  51D9               	movf	217,w,b	;volatile
  4458   002254  0BF0               	andlw	-16
  4459   002256  0908               	iorlw	8
  4460   002258  6FD9               	movwf	217,b	;volatile
  4461   00225A                     
  4462                           ; BSR set to: 14
  4463                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4464   00225A  8BD9               	bsf	217,5,b	;volatile
  4465                           
  4466                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4467   00225C  0E9F               	movlw	159
  4468   00225E  6FD6               	movwf	214,b	;volatile
  4469   002260                     
  4470                           ; BSR set to: 14
  4471                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4472   002260  8A84               	bsf	132,5,c	;volatile
  4473   002262                     
  4474                           ; BSR set to: 14
  4475                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4476   002262  8C84               	bsf	132,6,c	;volatile
  4477   002264                     
  4478                           ; BSR set to: 14
  4479                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4480   002264  9BA7               	bcf	167,5,b	;volatile
  4481   002266                     
  4482                           ; BSR set to: 14
  4483                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4484   002266  9DA7               	bcf	167,6,b	;volatile
  4485                           
  4486                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4487   002268  0E1D               	movlw	29
  4488   00226A  6F1D               	movwf	29,b	;volatile
  4489                           
  4490                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4491   00226C  0E1E               	movlw	30
  4492   00226E  6F1C               	movwf	28,b	;volatile
  4493                           
  4494                           ;i2c.c: 18:   RD5PPS=0x1C;
  4495   002270  0E1C               	movlw	28
  4496   002272  6F6F               	movwf	111,b	;volatile
  4497                           
  4498                           ;i2c.c: 19:   RD6PPS=0x1B;
  4499   002274  0E1B               	movlw	27
  4500   002276  6F70               	movwf	112,b	;volatile
  4501   002278                     
  4502                           ; BSR set to: 14
  4503   002278  0012               	return		;funcret
  4504   00227A                     __end_of_I2C_2_Master_Init:
  4505                           	callstack 0
  4506                           
  4507 ;; *************** function _add_seconds_to_list *****************
  4508 ;; Defined at:
  4509 ;;		line 420 in file "dc_motor.c"
  4510 ;; Parameters:    Size  Location     Type
  4511 ;;		None
  4512 ;; Auto vars:     Size  Location     Type
  4513 ;;		None
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  1    wreg      void 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4525 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4527 ;;Total ram usage:        2 bytes
  4528 ;; Hardware stack levels used: 1
  4529 ;; Hardware stack levels required when called: 5
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text27
  4538   0020CC                     __ptext27:
  4539                           	callstack 0
  4540   0020CC                     _add_seconds_to_list:
  4541                           	callstack 25
  4542   0020CC                     
  4543                           ;dc_motor.c: 422:     if (seconds > twothirds)
  4544   0020CC  BE4A               	btfsc	(_seconds+1)^0,7,c
  4545   0020CE  EF72  F010         	goto	u3761
  4546   0020D2  504A               	movf	(_seconds+1)^0,w,c
  4547   0020D4  E109               	bnz	u3760
  4548   0020D6  0E0C               	movlw	12
  4549   0020D8  5C49               	subwf	_seconds^0,w,c
  4550   0020DA  A0D8               	btfss	status,0,c
  4551   0020DC  EF72  F010         	goto	u3761
  4552   0020E0  EF74  F010         	goto	u3760
  4553   0020E4                     u3761:
  4554   0020E4  EF89  F010         	goto	l338
  4555   0020E8                     u3760:
  4556   0020E8                     
  4557                           ;dc_motor.c: 423:     {;dc_motor.c: 424:         movement_list[index] = seconds - halfbl
      +                          ock;
  4558   0020E8  0EFB               	movlw	251
  4559   0020EA  2449               	addwf	_seconds^0,w,c
  4560   0020EC  6E0E               	movwf	??_add_seconds_to_list^0,c
  4561   0020EE  0EFF               	movlw	255
  4562   0020F0  204A               	addwfc	(_seconds+1)^0,w,c
  4563   0020F2  6E0F               	movwf	(??_add_seconds_to_list+1)^0,c
  4564   0020F4  90D8               	bcf	status,0,c
  4565   0020F6  3447               	rlcf	_index^0,w,c
  4566   0020F8  6ED9               	movwf	fsr2l,c
  4567   0020FA  3448               	rlcf	(_index+1)^0,w,c
  4568   0020FC  6EDA               	movwf	fsr2h,c
  4569   0020FE  0E00               	movlw	low _movement_list
  4570   002100  26D9               	addwf	fsr2l,f,c
  4571   002102  0E02               	movlw	high _movement_list
  4572   002104  22DA               	addwfc	fsr2h,f,c
  4573   002106  C00E  FFDE         	movff	??_add_seconds_to_list,postinc2
  4574   00210A  C00F  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4575   00210E                     
  4576                           ;dc_motor.c: 425:         index++;
  4577   00210E  4A47               	infsnz	_index^0,f,c
  4578   002110  2A48               	incf	(_index+1)^0,f,c
  4579   002112                     l338:
  4580   002112  0012               	return		;funcret
  4581   002114                     __end_of_add_seconds_to_list:
  4582                           	callstack 0
  4583                           
  4584 ;; *************** function _Timer0_init *****************
  4585 ;; Defined at:
  4586 ;;		line 7 in file "timers.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;		None
  4589 ;; Auto vars:     Size  Location     Type
  4590 ;;		None
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  1    wreg      void 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4604 ;;Total ram usage:        0 bytes
  4605 ;; Hardware stack levels used: 1
  4606 ;; Hardware stack levels required when called: 5
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_main
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text28
  4615   002310                     __ptext28:
  4616                           	callstack 0
  4617   002310                     _Timer0_init:
  4618                           	callstack 25
  4619   002310                     
  4620                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4621   002310  50D6               	movf	214,w,c	;volatile
  4622   002312  0B1F               	andlw	-225
  4623   002314  0940               	iorlw	64
  4624   002316  6ED6               	movwf	214,c	;volatile
  4625   002318                     
  4626                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4627   002318  88D6               	bsf	214,4,c	;volatile
  4628                           
  4629                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4630   00231A  50D6               	movf	214,w,c	;volatile
  4631   00231C  0BF0               	andlw	-16
  4632   00231E  0908               	iorlw	8
  4633   002320  6ED6               	movwf	214,c	;volatile
  4634                           
  4635                           ;timers.c: 13:     TMR0H=0b11111101;
  4636   002322  0EFD               	movlw	253
  4637   002324  6ED4               	movwf	212,c	;volatile
  4638                           
  4639                           ;timers.c: 14:     TMR0L=0b10010000;
  4640   002326  0E90               	movlw	144
  4641   002328  6ED3               	movwf	211,c	;volatile
  4642   00232A                     
  4643                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4644   00232A  88D5               	bsf	213,4,c	;volatile
  4645   00232C                     
  4646                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4647   00232C  8ED5               	bsf	213,7,c	;volatile
  4648   00232E  0012               	return		;funcret
  4649   002330                     __end_of_Timer0_init:
  4650                           	callstack 0
  4651                           
  4652 ;; *************** function _RobotMovement *****************
  4653 ;; Defined at:
  4654 ;;		line 263 in file "dc_motor.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;  color           2   42[COMRAM] unsigned int 
  4657 ;;  motorL          2   44[COMRAM] PTR struct DC_motor
  4658 ;;		 -> main@motorL(9), 
  4659 ;;  motorR          2   46[COMRAM] PTR struct DC_motor
  4660 ;;		 -> main@motorR(9), 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  i               2   52[COMRAM] int 
  4663 ;;  i               2   50[COMRAM] int 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4673 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4674 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4675 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4676 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4677 ;;Total ram usage:       12 bytes
  4678 ;; Hardware stack levels used: 1
  4679 ;; Hardware stack levels required when called: 8
  4680 ;; This function calls:
  4681 ;;		_TimedfullSpeedAhead
  4682 ;;		_moveBack
  4683 ;;		_stop
  4684 ;;		_turnLeft
  4685 ;;		_turnLeftLong
  4686 ;;		_turnRight
  4687 ;;		_turnRightLong
  4688 ;; This function is called by:
  4689 ;;		_main
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           	psect	text29
  4694   0000A6                     __ptext29:
  4695                           	callstack 0
  4696   0000A6                     _RobotMovement:
  4697                           	callstack 22
  4698   0000A6                     
  4699                           ;dc_motor.c: 263: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 264: {;dc_motor.c: 265:     moveBack(motorL, motorR, halfblock);
  4700   0000A6  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4701   0000AA  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4702   0000AE  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4703   0000B2  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4704   0000B6  0E00               	movlw	0
  4705   0000B8  6E26               	movwf	(moveBack@time+1)^0,c
  4706   0000BA  0E05               	movlw	5
  4707   0000BC  6E25               	movwf	moveBack@time^0,c
  4708   0000BE  ECDA  F00D         	call	_moveBack	;wreg free
  4709                           
  4710                           ;dc_motor.c: 266:     stop(motorL,motorR);
  4711   0000C2  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4712   0000C6  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4713   0000CA  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4714   0000CE  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4715   0000D2  EC1D  F010         	call	_stop	;wreg free
  4716   0000D6                     
  4717                           ;dc_motor.c: 269:     if(color == 0){
  4718   0000D6  502B               	movf	RobotMovement@color^0,w,c
  4719   0000D8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4720   0000DA  A4D8               	btfss	status,2,c
  4721   0000DC  EF72  F000         	goto	u3551
  4722   0000E0  EF74  F000         	goto	u3550
  4723   0000E4                     u3551:
  4724   0000E4  EF8D  F000         	goto	l4274
  4725   0000E8                     u3550:
  4726   0000E8                     
  4727                           ;dc_motor.c: 270:         turnRight(motorL, motorR);
  4728   0000E8  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4729   0000EC  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4730   0000F0  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4731   0000F4  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4732   0000F8  ECBE  F00A         	call	_turnRight	;wreg free
  4733   0000FC                     
  4734                           ;dc_motor.c: 271:         movement_list[index] = -1;
  4735   0000FC  90D8               	bcf	status,0,c
  4736   0000FE  3447               	rlcf	_index^0,w,c
  4737   000100  6ED9               	movwf	fsr2l,c
  4738   000102  3448               	rlcf	(_index+1)^0,w,c
  4739   000104  6EDA               	movwf	fsr2h,c
  4740   000106  0E00               	movlw	low _movement_list
  4741   000108  26D9               	addwf	fsr2l,f,c
  4742   00010A  0E02               	movlw	high _movement_list
  4743   00010C  22DA               	addwfc	fsr2h,f,c
  4744   00010E  0EFF               	movlw	255
  4745   000110  6EDE               	movwf	postinc2,c
  4746   000112  0EFF               	movlw	255
  4747   000114  6EDD               	movwf	postdec2,c
  4748   000116                     
  4749                           ;dc_motor.c: 272:         index++;
  4750   000116  4A47               	infsnz	_index^0,f,c
  4751   000118  2A48               	incf	(_index+1)^0,f,c
  4752   00011A                     l4274:
  4753                           
  4754                           ;dc_motor.c: 275:     if(color == 1){
  4755   00011A  042B               	decf	RobotMovement@color^0,w,c
  4756   00011C  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4757   00011E  A4D8               	btfss	status,2,c
  4758   000120  EF94  F000         	goto	u3561
  4759   000124  EF96  F000         	goto	u3560
  4760   000128                     u3561:
  4761   000128  EFAF  F000         	goto	l4282
  4762   00012C                     u3560:
  4763   00012C                     
  4764                           ;dc_motor.c: 276:         turnLeft(motorL, motorR);
  4765   00012C  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  4766   000130  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4767   000134  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  4768   000138  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4769   00013C  EC69  F009         	call	_turnLeft	;wreg free
  4770   000140                     
  4771                           ;dc_motor.c: 277:         movement_list[index] = -2;
  4772   000140  90D8               	bcf	status,0,c
  4773   000142  3447               	rlcf	_index^0,w,c
  4774   000144  6ED9               	movwf	fsr2l,c
  4775   000146  3448               	rlcf	(_index+1)^0,w,c
  4776   000148  6EDA               	movwf	fsr2h,c
  4777   00014A  0E00               	movlw	low _movement_list
  4778   00014C  26D9               	addwf	fsr2l,f,c
  4779   00014E  0E02               	movlw	high _movement_list
  4780   000150  22DA               	addwfc	fsr2h,f,c
  4781   000152  0EFE               	movlw	254
  4782   000154  6EDE               	movwf	postinc2,c
  4783   000156  0EFF               	movlw	255
  4784   000158  6EDD               	movwf	postdec2,c
  4785   00015A                     
  4786                           ;dc_motor.c: 278:         index++;
  4787   00015A  4A47               	infsnz	_index^0,f,c
  4788   00015C  2A48               	incf	(_index+1)^0,f,c
  4789   00015E                     l4282:
  4790                           
  4791                           ;dc_motor.c: 281:     if(color == 2){
  4792   00015E  0E02               	movlw	2
  4793   000160  182B               	xorwf	RobotMovement@color^0,w,c
  4794   000162  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4795   000164  A4D8               	btfss	status,2,c
  4796   000166  EFB7  F000         	goto	u3571
  4797   00016A  EFB9  F000         	goto	u3570
  4798   00016E                     u3571:
  4799   00016E  EFE6  F000         	goto	l4300
  4800   000172                     u3570:
  4801   000172                     
  4802                           ;dc_motor.c: 282:         int i;;dc_motor.c: 283:         for (i=0;i<2;i++){
  4803   000172  0E00               	movlw	0
  4804   000174  6E34               	movwf	(RobotMovement@i+1)^0,c
  4805   000176  0E00               	movlw	0
  4806   000178  6E33               	movwf	RobotMovement@i^0,c
  4807   00017A                     l4290:
  4808                           
  4809                           ;dc_motor.c: 284:             turnRight(motorL, motorR);
  4810   00017A  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4811   00017E  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4812   000182  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4813   000186  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4814   00018A  ECBE  F00A         	call	_turnRight	;wreg free
  4815   00018E                     
  4816                           ;dc_motor.c: 285:             movement_list[index] = -1;
  4817   00018E  90D8               	bcf	status,0,c
  4818   000190  3447               	rlcf	_index^0,w,c
  4819   000192  6ED9               	movwf	fsr2l,c
  4820   000194  3448               	rlcf	(_index+1)^0,w,c
  4821   000196  6EDA               	movwf	fsr2h,c
  4822   000198  0E00               	movlw	low _movement_list
  4823   00019A  26D9               	addwf	fsr2l,f,c
  4824   00019C  0E02               	movlw	high _movement_list
  4825   00019E  22DA               	addwfc	fsr2h,f,c
  4826   0001A0  0EFF               	movlw	255
  4827   0001A2  6EDE               	movwf	postinc2,c
  4828   0001A4  0EFF               	movlw	255
  4829   0001A6  6EDD               	movwf	postdec2,c
  4830   0001A8                     
  4831                           ;dc_motor.c: 286:             index++;
  4832   0001A8  4A47               	infsnz	_index^0,f,c
  4833   0001AA  2A48               	incf	(_index+1)^0,f,c
  4834   0001AC                     
  4835                           ;dc_motor.c: 287:         }
  4836   0001AC  4A33               	infsnz	RobotMovement@i^0,f,c
  4837   0001AE  2A34               	incf	(RobotMovement@i+1)^0,f,c
  4838   0001B0  BE34               	btfsc	(RobotMovement@i+1)^0,7,c
  4839   0001B2  EFE4  F000         	goto	u3581
  4840   0001B6  5034               	movf	(RobotMovement@i+1)^0,w,c
  4841   0001B8  E109               	bnz	u3580
  4842   0001BA  0E02               	movlw	2
  4843   0001BC  5C33               	subwf	RobotMovement@i^0,w,c
  4844   0001BE  A0D8               	btfss	status,0,c
  4845   0001C0  EFE4  F000         	goto	u3581
  4846   0001C4  EFE6  F000         	goto	u3580
  4847   0001C8                     u3581:
  4848   0001C8  EFBD  F000         	goto	l4290
  4849   0001CC                     u3580:
  4850   0001CC                     l4300:
  4851                           
  4852                           ;dc_motor.c: 290:     if(color == 3){
  4853   0001CC  0E03               	movlw	3
  4854   0001CE  182B               	xorwf	RobotMovement@color^0,w,c
  4855   0001D0  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4856   0001D2  A4D8               	btfss	status,2,c
  4857   0001D4  EFEE  F000         	goto	u3591
  4858   0001D8  EFF0  F000         	goto	u3590
  4859   0001DC                     u3591:
  4860   0001DC  EFF0  F001         	goto	l4330
  4861   0001E0                     u3590:
  4862   0001E0                     
  4863                           ;dc_motor.c: 292:         moveBack(motorL, motorR, blockback);
  4864   0001E0  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4865   0001E4  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4866   0001E8  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4867   0001EC  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4868   0001F0  0E00               	movlw	0
  4869   0001F2  6E26               	movwf	(moveBack@time+1)^0,c
  4870   0001F4  0E10               	movlw	16
  4871   0001F6  6E25               	movwf	moveBack@time^0,c
  4872   0001F8  ECDA  F00D         	call	_moveBack	;wreg free
  4873                           
  4874                           ;dc_motor.c: 293:         stop(motorL, motorR);
  4875   0001FC  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4876   000200  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4877   000204  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4878   000208  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4879   00020C  EC1D  F010         	call	_stop	;wreg free
  4880                           
  4881                           ;dc_motor.c: 294:         turnRight(motorL, motorR);
  4882   000210  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4883   000214  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4884   000218  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4885   00021C  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4886   000220  ECBE  F00A         	call	_turnRight	;wreg free
  4887   000224                     
  4888                           ;dc_motor.c: 296:         if (movement_list[index-1] > halfblock)
  4889   000224  90D8               	bcf	status,0,c
  4890   000226  3447               	rlcf	_index^0,w,c
  4891   000228  6ED9               	movwf	fsr2l,c
  4892   00022A  3448               	rlcf	(_index+1)^0,w,c
  4893   00022C  6EDA               	movwf	fsr2h,c
  4894   00022E  0EFE               	movlw	low (_movement_list+65534)
  4895   000230  26D9               	addwf	fsr2l,f,c
  4896   000232  0E01               	movlw	high (_movement_list+65534)
  4897   000234  22DA               	addwfc	fsr2h,f,c
  4898   000236  0E01               	movlw	1
  4899   000238  BEDB               	btfsc	plusw2,7,c
  4900   00023A  EF29  F001         	goto	u3601
  4901   00023E  0E01               	movlw	1
  4902   000240  50DB               	movf	plusw2,w,c
  4903   000242  E109               	bnz	u3600
  4904   000244  0E06               	movlw	6
  4905   000246  5CDE               	subwf	postinc2,w,c
  4906   000248  A0D8               	btfss	status,0,c
  4907   00024A  EF29  F001         	goto	u3601
  4908   00024E  EF2B  F001         	goto	u3600
  4909   000252                     u3601:
  4910   000252  EF49  F001         	goto	l4310
  4911   000256                     u3600:
  4912   000256                     
  4913                           ;dc_motor.c: 297:         {;dc_motor.c: 299:             movement_list[index-1] -= twoth
      +                          irds;
  4914   000256  90D8               	bcf	status,0,c
  4915   000258  3447               	rlcf	_index^0,w,c
  4916   00025A  6ED9               	movwf	fsr2l,c
  4917   00025C  3448               	rlcf	(_index+1)^0,w,c
  4918   00025E  6EDA               	movwf	fsr2h,c
  4919   000260  0EFE               	movlw	low (_movement_list+65534)
  4920   000262  26D9               	addwf	fsr2l,f,c
  4921   000264  0E01               	movlw	high (_movement_list+65534)
  4922   000266  22DA               	addwfc	fsr2h,f,c
  4923   000268  0EF5               	movlw	245
  4924   00026A  26DE               	addwf	postinc2,f,c
  4925   00026C  0EFF               	movlw	255
  4926   00026E  22DD               	addwfc	postdec2,f,c
  4927                           
  4928                           ;dc_motor.c: 301:             movement_list[index] = -1;
  4929   000270  90D8               	bcf	status,0,c
  4930   000272  3447               	rlcf	_index^0,w,c
  4931   000274  6ED9               	movwf	fsr2l,c
  4932   000276  3448               	rlcf	(_index+1)^0,w,c
  4933   000278  6EDA               	movwf	fsr2h,c
  4934   00027A  0E00               	movlw	low _movement_list
  4935   00027C  26D9               	addwf	fsr2l,f,c
  4936   00027E  0E02               	movlw	high _movement_list
  4937   000280  22DA               	addwfc	fsr2h,f,c
  4938   000282  0EFF               	movlw	255
  4939   000284  6EDE               	movwf	postinc2,c
  4940   000286  0EFF               	movlw	255
  4941   000288  6EDD               	movwf	postdec2,c
  4942   00028A                     
  4943                           ;dc_motor.c: 302:             index += 1;
  4944   00028A  4A47               	infsnz	_index^0,f,c
  4945   00028C  2A48               	incf	(_index+1)^0,f,c
  4946                           
  4947                           ;dc_motor.c: 303:         }else{
  4948   00028E  EFF0  F001         	goto	l4330
  4949   000292                     l4310:
  4950                           
  4951                           ;dc_motor.c: 305:             if (movement_list[index-1] == -1)
  4952   000292  90D8               	bcf	status,0,c
  4953   000294  3447               	rlcf	_index^0,w,c
  4954   000296  6ED9               	movwf	fsr2l,c
  4955   000298  3448               	rlcf	(_index+1)^0,w,c
  4956   00029A  6EDA               	movwf	fsr2h,c
  4957   00029C  0EFE               	movlw	low (_movement_list+65534)
  4958   00029E  26D9               	addwf	fsr2l,f,c
  4959   0002A0  0E01               	movlw	high (_movement_list+65534)
  4960   0002A2  22DA               	addwfc	fsr2h,f,c
  4961   0002A4  28DE               	incf	postinc2,w,c
  4962   0002A6  E106               	bnz	u3611
  4963   0002A8  28DE               	incf	postinc2,w,c
  4964   0002AA  A4D8               	btfss	status,2,c
  4965   0002AC  EF5A  F001         	goto	u3611
  4966   0002B0  EF5C  F001         	goto	u3610
  4967   0002B4                     u3611:
  4968   0002B4  EF6B  F001         	goto	l4314
  4969   0002B8                     u3610:
  4970   0002B8                     
  4971                           ;dc_motor.c: 306:             {;dc_motor.c: 308:                 movement_list[index-1] 
      +                          = -2;
  4972   0002B8  90D8               	bcf	status,0,c
  4973   0002BA  3447               	rlcf	_index^0,w,c
  4974   0002BC  6ED9               	movwf	fsr2l,c
  4975   0002BE  3448               	rlcf	(_index+1)^0,w,c
  4976   0002C0  6EDA               	movwf	fsr2h,c
  4977   0002C2  0EFE               	movlw	low (_movement_list+65534)
  4978   0002C4  26D9               	addwf	fsr2l,f,c
  4979   0002C6  0E01               	movlw	high (_movement_list+65534)
  4980   0002C8  22DA               	addwfc	fsr2h,f,c
  4981   0002CA  0EFE               	movlw	254
  4982   0002CC  6EDE               	movwf	postinc2,c
  4983   0002CE  0EFF               	movlw	255
  4984   0002D0  6EDD               	movwf	postdec2,c
  4985                           
  4986                           ;dc_motor.c: 309:             }
  4987   0002D2  EFD2  F001         	goto	l309
  4988   0002D6                     l4314:
  4989   0002D6  90D8               	bcf	status,0,c
  4990   0002D8  3447               	rlcf	_index^0,w,c
  4991   0002DA  6ED9               	movwf	fsr2l,c
  4992   0002DC  3448               	rlcf	(_index+1)^0,w,c
  4993   0002DE  6EDA               	movwf	fsr2h,c
  4994   0002E0  0EFE               	movlw	low (_movement_list+65534)
  4995   0002E2  26D9               	addwf	fsr2l,f,c
  4996   0002E4  0E01               	movlw	high (_movement_list+65534)
  4997   0002E6  22DA               	addwfc	fsr2h,f,c
  4998   0002E8  0EFE               	movlw	254
  4999   0002EA  18DE               	xorwf	postinc2,w,c
  5000   0002EC  E106               	bnz	u3621
  5001   0002EE  28DE               	incf	postinc2,w,c
  5002   0002F0  A4D8               	btfss	status,2,c
  5003   0002F2  EF7D  F001         	goto	u3621
  5004   0002F6  EF7F  F001         	goto	u3620
  5005   0002FA                     u3621:
  5006   0002FA  EF8E  F001         	goto	l4318
  5007   0002FE                     u3620:
  5008   0002FE                     
  5009                           ;dc_motor.c: 312:             {;dc_motor.c: 314:                 movement_list[index-1] 
      +                          = -1;
  5010   0002FE  90D8               	bcf	status,0,c
  5011   000300  3447               	rlcf	_index^0,w,c
  5012   000302  6ED9               	movwf	fsr2l,c
  5013   000304  3448               	rlcf	(_index+1)^0,w,c
  5014   000306  6EDA               	movwf	fsr2h,c
  5015   000308  0EFE               	movlw	low (_movement_list+65534)
  5016   00030A  26D9               	addwf	fsr2l,f,c
  5017   00030C  0E01               	movlw	high (_movement_list+65534)
  5018   00030E  22DA               	addwfc	fsr2h,f,c
  5019   000310  0EFF               	movlw	255
  5020   000312  6EDE               	movwf	postinc2,c
  5021   000314  0EFF               	movlw	255
  5022   000316  6EDD               	movwf	postdec2,c
  5023                           
  5024                           ;dc_motor.c: 315:             }
  5025   000318  EFD2  F001         	goto	l309
  5026   00031C                     l4318:
  5027   00031C  90D8               	bcf	status,0,c
  5028   00031E  3447               	rlcf	_index^0,w,c
  5029   000320  6ED9               	movwf	fsr2l,c
  5030   000322  3448               	rlcf	(_index+1)^0,w,c
  5031   000324  6EDA               	movwf	fsr2h,c
  5032   000326  0EFE               	movlw	low (_movement_list+65534)
  5033   000328  26D9               	addwf	fsr2l,f,c
  5034   00032A  0E01               	movlw	high (_movement_list+65534)
  5035   00032C  22DA               	addwfc	fsr2h,f,c
  5036   00032E  0EFD               	movlw	253
  5037   000330  18DE               	xorwf	postinc2,w,c
  5038   000332  E106               	bnz	u3631
  5039   000334  28DE               	incf	postinc2,w,c
  5040   000336  A4D8               	btfss	status,2,c
  5041   000338  EFA0  F001         	goto	u3631
  5042   00033C  EFA2  F001         	goto	u3630
  5043   000340                     u3631:
  5044   000340  EFB1  F001         	goto	l4322
  5045   000344                     u3630:
  5046   000344                     
  5047                           ;dc_motor.c: 318:             {;dc_motor.c: 320:                 movement_list[index-1] 
      +                          = -4;
  5048   000344  90D8               	bcf	status,0,c
  5049   000346  3447               	rlcf	_index^0,w,c
  5050   000348  6ED9               	movwf	fsr2l,c
  5051   00034A  3448               	rlcf	(_index+1)^0,w,c
  5052   00034C  6EDA               	movwf	fsr2h,c
  5053   00034E  0EFE               	movlw	low (_movement_list+65534)
  5054   000350  26D9               	addwf	fsr2l,f,c
  5055   000352  0E01               	movlw	high (_movement_list+65534)
  5056   000354  22DA               	addwfc	fsr2h,f,c
  5057   000356  0EFC               	movlw	252
  5058   000358  6EDE               	movwf	postinc2,c
  5059   00035A  0EFF               	movlw	255
  5060   00035C  6EDD               	movwf	postdec2,c
  5061                           
  5062                           ;dc_motor.c: 321:             }
  5063   00035E  EFD2  F001         	goto	l309
  5064   000362                     l4322:
  5065   000362  90D8               	bcf	status,0,c
  5066   000364  3447               	rlcf	_index^0,w,c
  5067   000366  6ED9               	movwf	fsr2l,c
  5068   000368  3448               	rlcf	(_index+1)^0,w,c
  5069   00036A  6EDA               	movwf	fsr2h,c
  5070   00036C  0EFE               	movlw	low (_movement_list+65534)
  5071   00036E  26D9               	addwf	fsr2l,f,c
  5072   000370  0E01               	movlw	high (_movement_list+65534)
  5073   000372  22DA               	addwfc	fsr2h,f,c
  5074   000374  0EFC               	movlw	252
  5075   000376  18DE               	xorwf	postinc2,w,c
  5076   000378  E106               	bnz	u3641
  5077   00037A  28DE               	incf	postinc2,w,c
  5078   00037C  A4D8               	btfss	status,2,c
  5079   00037E  EFC3  F001         	goto	u3641
  5080   000382  EFC5  F001         	goto	u3640
  5081   000386                     u3641:
  5082   000386  EFD2  F001         	goto	l309
  5083   00038A                     u3640:
  5084   00038A                     
  5085                           ;dc_motor.c: 324:             {;dc_motor.c: 326:                 movement_list[index-1] 
      +                          = -3;
  5086   00038A  90D8               	bcf	status,0,c
  5087   00038C  3447               	rlcf	_index^0,w,c
  5088   00038E  6ED9               	movwf	fsr2l,c
  5089   000390  3448               	rlcf	(_index+1)^0,w,c
  5090   000392  6EDA               	movwf	fsr2h,c
  5091   000394  0EFE               	movlw	low (_movement_list+65534)
  5092   000396  26D9               	addwf	fsr2l,f,c
  5093   000398  0E01               	movlw	high (_movement_list+65534)
  5094   00039A  22DA               	addwfc	fsr2h,f,c
  5095   00039C  0EFD               	movlw	253
  5096   00039E  6EDE               	movwf	postinc2,c
  5097   0003A0  0EFF               	movlw	255
  5098   0003A2  6EDD               	movwf	postdec2,c
  5099   0003A4                     l309:
  5100                           
  5101                           ;dc_motor.c: 329:             movement_list[index] = blockahead;
  5102   0003A4  90D8               	bcf	status,0,c
  5103   0003A6  3447               	rlcf	_index^0,w,c
  5104   0003A8  6ED9               	movwf	fsr2l,c
  5105   0003AA  3448               	rlcf	(_index+1)^0,w,c
  5106   0003AC  6EDA               	movwf	fsr2h,c
  5107   0003AE  0E00               	movlw	low _movement_list
  5108   0003B0  26D9               	addwf	fsr2l,f,c
  5109   0003B2  0E02               	movlw	high _movement_list
  5110   0003B4  22DA               	addwfc	fsr2h,f,c
  5111   0003B6  0E10               	movlw	16
  5112   0003B8  6EDE               	movwf	postinc2,c
  5113   0003BA  0E00               	movlw	0
  5114   0003BC  6EDD               	movwf	postdec2,c
  5115   0003BE                     
  5116                           ;dc_motor.c: 330:             index += 1;
  5117   0003BE  4A47               	infsnz	_index^0,f,c
  5118   0003C0  2A48               	incf	(_index+1)^0,f,c
  5119   0003C2                     
  5120                           ;dc_motor.c: 332:             movement_list[index] = -2;
  5121   0003C2  90D8               	bcf	status,0,c
  5122   0003C4  3447               	rlcf	_index^0,w,c
  5123   0003C6  6ED9               	movwf	fsr2l,c
  5124   0003C8  3448               	rlcf	(_index+1)^0,w,c
  5125   0003CA  6EDA               	movwf	fsr2h,c
  5126   0003CC  0E00               	movlw	low _movement_list
  5127   0003CE  26D9               	addwf	fsr2l,f,c
  5128   0003D0  0E02               	movlw	high _movement_list
  5129   0003D2  22DA               	addwfc	fsr2h,f,c
  5130   0003D4  0EFE               	movlw	254
  5131   0003D6  6EDE               	movwf	postinc2,c
  5132   0003D8  0EFF               	movlw	255
  5133   0003DA  6EDD               	movwf	postdec2,c
  5134                           
  5135                           ;dc_motor.c: 333:             index += 1;
  5136   0003DC  4A47               	infsnz	_index^0,f,c
  5137   0003DE  2A48               	incf	(_index+1)^0,f,c
  5138   0003E0                     l4330:
  5139                           
  5140                           ;dc_motor.c: 338:     if(color == 4){
  5141   0003E0  0E04               	movlw	4
  5142   0003E2  182B               	xorwf	RobotMovement@color^0,w,c
  5143   0003E4  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5144   0003E6  A4D8               	btfss	status,2,c
  5145   0003E8  EFF8  F001         	goto	u3651
  5146   0003EC  EFFA  F001         	goto	u3650
  5147   0003F0                     u3651:
  5148   0003F0  EFFA  F002         	goto	l4360
  5149   0003F4                     u3650:
  5150   0003F4                     
  5151                           ;dc_motor.c: 340:         moveBack(motorL, motorR, blockback);
  5152   0003F4  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  5153   0003F8  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  5154   0003FC  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  5155   000400  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  5156   000404  0E00               	movlw	0
  5157   000406  6E26               	movwf	(moveBack@time+1)^0,c
  5158   000408  0E10               	movlw	16
  5159   00040A  6E25               	movwf	moveBack@time^0,c
  5160   00040C  ECDA  F00D         	call	_moveBack	;wreg free
  5161                           
  5162                           ;dc_motor.c: 341:         stop(motorL, motorR);
  5163   000410  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  5164   000414  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  5165   000418  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  5166   00041C  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  5167   000420  EC1D  F010         	call	_stop	;wreg free
  5168                           
  5169                           ;dc_motor.c: 342:         turnLeft(motorL, motorR);
  5170   000424  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  5171   000428  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  5172   00042C  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  5173   000430  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  5174   000434  EC69  F009         	call	_turnLeft	;wreg free
  5175   000438                     
  5176                           ;dc_motor.c: 344:         if (movement_list[index-1] > halfblock)
  5177   000438  90D8               	bcf	status,0,c
  5178   00043A  3447               	rlcf	_index^0,w,c
  5179   00043C  6ED9               	movwf	fsr2l,c
  5180   00043E  3448               	rlcf	(_index+1)^0,w,c
  5181   000440  6EDA               	movwf	fsr2h,c
  5182   000442  0EFE               	movlw	low (_movement_list+65534)
  5183   000444  26D9               	addwf	fsr2l,f,c
  5184   000446  0E01               	movlw	high (_movement_list+65534)
  5185   000448  22DA               	addwfc	fsr2h,f,c
  5186   00044A  0E01               	movlw	1
  5187   00044C  BEDB               	btfsc	plusw2,7,c
  5188   00044E  EF33  F002         	goto	u3661
  5189   000452  0E01               	movlw	1
  5190   000454  50DB               	movf	plusw2,w,c
  5191   000456  E109               	bnz	u3660
  5192   000458  0E06               	movlw	6
  5193   00045A  5CDE               	subwf	postinc2,w,c
  5194   00045C  A0D8               	btfss	status,0,c
  5195   00045E  EF33  F002         	goto	u3661
  5196   000462  EF35  F002         	goto	u3660
  5197   000466                     u3661:
  5198   000466  EF53  F002         	goto	l4340
  5199   00046A                     u3660:
  5200   00046A                     
  5201                           ;dc_motor.c: 345:         {;dc_motor.c: 347:             movement_list[index-1] -= twoth
      +                          irds;
  5202   00046A  90D8               	bcf	status,0,c
  5203   00046C  3447               	rlcf	_index^0,w,c
  5204   00046E  6ED9               	movwf	fsr2l,c
  5205   000470  3448               	rlcf	(_index+1)^0,w,c
  5206   000472  6EDA               	movwf	fsr2h,c
  5207   000474  0EFE               	movlw	low (_movement_list+65534)
  5208   000476  26D9               	addwf	fsr2l,f,c
  5209   000478  0E01               	movlw	high (_movement_list+65534)
  5210   00047A  22DA               	addwfc	fsr2h,f,c
  5211   00047C  0EF5               	movlw	245
  5212   00047E  26DE               	addwf	postinc2,f,c
  5213   000480  0EFF               	movlw	255
  5214   000482  22DD               	addwfc	postdec2,f,c
  5215                           
  5216                           ;dc_motor.c: 349:             movement_list[index] = -2;
  5217   000484  90D8               	bcf	status,0,c
  5218   000486  3447               	rlcf	_index^0,w,c
  5219   000488  6ED9               	movwf	fsr2l,c
  5220   00048A  3448               	rlcf	(_index+1)^0,w,c
  5221   00048C  6EDA               	movwf	fsr2h,c
  5222   00048E  0E00               	movlw	low _movement_list
  5223   000490  26D9               	addwf	fsr2l,f,c
  5224   000492  0E02               	movlw	high _movement_list
  5225   000494  22DA               	addwfc	fsr2h,f,c
  5226   000496  0EFE               	movlw	254
  5227   000498  6EDE               	movwf	postinc2,c
  5228   00049A  0EFF               	movlw	255
  5229   00049C  6EDD               	movwf	postdec2,c
  5230   00049E                     
  5231                           ;dc_motor.c: 350:             index += 1;
  5232   00049E  4A47               	infsnz	_index^0,f,c
  5233   0004A0  2A48               	incf	(_index+1)^0,f,c
  5234                           
  5235                           ;dc_motor.c: 351:         }else{
  5236   0004A2  EFFA  F002         	goto	l4360
  5237   0004A6                     l4340:
  5238                           
  5239                           ;dc_motor.c: 353:             if (movement_list[index-1] == -1)
  5240   0004A6  90D8               	bcf	status,0,c
  5241   0004A8  3447               	rlcf	_index^0,w,c
  5242   0004AA  6ED9               	movwf	fsr2l,c
  5243   0004AC  3448               	rlcf	(_index+1)^0,w,c
  5244   0004AE  6EDA               	movwf	fsr2h,c
  5245   0004B0  0EFE               	movlw	low (_movement_list+65534)
  5246   0004B2  26D9               	addwf	fsr2l,f,c
  5247   0004B4  0E01               	movlw	high (_movement_list+65534)
  5248   0004B6  22DA               	addwfc	fsr2h,f,c
  5249   0004B8  28DE               	incf	postinc2,w,c
  5250   0004BA  E106               	bnz	u3671
  5251   0004BC  28DE               	incf	postinc2,w,c
  5252   0004BE  A4D8               	btfss	status,2,c
  5253   0004C0  EF64  F002         	goto	u3671
  5254   0004C4  EF66  F002         	goto	u3670
  5255   0004C8                     u3671:
  5256   0004C8  EF75  F002         	goto	l4344
  5257   0004CC                     u3670:
  5258   0004CC                     
  5259                           ;dc_motor.c: 354:             {;dc_motor.c: 356:                 movement_list[index-1] 
      +                          = -2;
  5260   0004CC  90D8               	bcf	status,0,c
  5261   0004CE  3447               	rlcf	_index^0,w,c
  5262   0004D0  6ED9               	movwf	fsr2l,c
  5263   0004D2  3448               	rlcf	(_index+1)^0,w,c
  5264   0004D4  6EDA               	movwf	fsr2h,c
  5265   0004D6  0EFE               	movlw	low (_movement_list+65534)
  5266   0004D8  26D9               	addwf	fsr2l,f,c
  5267   0004DA  0E01               	movlw	high (_movement_list+65534)
  5268   0004DC  22DA               	addwfc	fsr2h,f,c
  5269   0004DE  0EFE               	movlw	254
  5270   0004E0  6EDE               	movwf	postinc2,c
  5271   0004E2  0EFF               	movlw	255
  5272   0004E4  6EDD               	movwf	postdec2,c
  5273                           
  5274                           ;dc_motor.c: 357:             }
  5275   0004E6  EFDC  F002         	goto	l319
  5276   0004EA                     l4344:
  5277   0004EA  90D8               	bcf	status,0,c
  5278   0004EC  3447               	rlcf	_index^0,w,c
  5279   0004EE  6ED9               	movwf	fsr2l,c
  5280   0004F0  3448               	rlcf	(_index+1)^0,w,c
  5281   0004F2  6EDA               	movwf	fsr2h,c
  5282   0004F4  0EFE               	movlw	low (_movement_list+65534)
  5283   0004F6  26D9               	addwf	fsr2l,f,c
  5284   0004F8  0E01               	movlw	high (_movement_list+65534)
  5285   0004FA  22DA               	addwfc	fsr2h,f,c
  5286   0004FC  0EFE               	movlw	254
  5287   0004FE  18DE               	xorwf	postinc2,w,c
  5288   000500  E106               	bnz	u3681
  5289   000502  28DE               	incf	postinc2,w,c
  5290   000504  A4D8               	btfss	status,2,c
  5291   000506  EF87  F002         	goto	u3681
  5292   00050A  EF89  F002         	goto	u3680
  5293   00050E                     u3681:
  5294   00050E  EF98  F002         	goto	l4348
  5295   000512                     u3680:
  5296   000512                     
  5297                           ;dc_motor.c: 360:             {;dc_motor.c: 362:                 movement_list[index-1] 
      +                          = -1;
  5298   000512  90D8               	bcf	status,0,c
  5299   000514  3447               	rlcf	_index^0,w,c
  5300   000516  6ED9               	movwf	fsr2l,c
  5301   000518  3448               	rlcf	(_index+1)^0,w,c
  5302   00051A  6EDA               	movwf	fsr2h,c
  5303   00051C  0EFE               	movlw	low (_movement_list+65534)
  5304   00051E  26D9               	addwf	fsr2l,f,c
  5305   000520  0E01               	movlw	high (_movement_list+65534)
  5306   000522  22DA               	addwfc	fsr2h,f,c
  5307   000524  0EFF               	movlw	255
  5308   000526  6EDE               	movwf	postinc2,c
  5309   000528  0EFF               	movlw	255
  5310   00052A  6EDD               	movwf	postdec2,c
  5311                           
  5312                           ;dc_motor.c: 363:             }
  5313   00052C  EFDC  F002         	goto	l319
  5314   000530                     l4348:
  5315   000530  90D8               	bcf	status,0,c
  5316   000532  3447               	rlcf	_index^0,w,c
  5317   000534  6ED9               	movwf	fsr2l,c
  5318   000536  3448               	rlcf	(_index+1)^0,w,c
  5319   000538  6EDA               	movwf	fsr2h,c
  5320   00053A  0EFE               	movlw	low (_movement_list+65534)
  5321   00053C  26D9               	addwf	fsr2l,f,c
  5322   00053E  0E01               	movlw	high (_movement_list+65534)
  5323   000540  22DA               	addwfc	fsr2h,f,c
  5324   000542  0EFD               	movlw	253
  5325   000544  18DE               	xorwf	postinc2,w,c
  5326   000546  E106               	bnz	u3691
  5327   000548  28DE               	incf	postinc2,w,c
  5328   00054A  A4D8               	btfss	status,2,c
  5329   00054C  EFAA  F002         	goto	u3691
  5330   000550  EFAC  F002         	goto	u3690
  5331   000554                     u3691:
  5332   000554  EFBB  F002         	goto	l4352
  5333   000558                     u3690:
  5334   000558                     
  5335                           ;dc_motor.c: 366:             {;dc_motor.c: 368:                 movement_list[index-1] 
      +                          = -4;
  5336   000558  90D8               	bcf	status,0,c
  5337   00055A  3447               	rlcf	_index^0,w,c
  5338   00055C  6ED9               	movwf	fsr2l,c
  5339   00055E  3448               	rlcf	(_index+1)^0,w,c
  5340   000560  6EDA               	movwf	fsr2h,c
  5341   000562  0EFE               	movlw	low (_movement_list+65534)
  5342   000564  26D9               	addwf	fsr2l,f,c
  5343   000566  0E01               	movlw	high (_movement_list+65534)
  5344   000568  22DA               	addwfc	fsr2h,f,c
  5345   00056A  0EFC               	movlw	252
  5346   00056C  6EDE               	movwf	postinc2,c
  5347   00056E  0EFF               	movlw	255
  5348   000570  6EDD               	movwf	postdec2,c
  5349                           
  5350                           ;dc_motor.c: 369:             }
  5351   000572  EFDC  F002         	goto	l319
  5352   000576                     l4352:
  5353   000576  90D8               	bcf	status,0,c
  5354   000578  3447               	rlcf	_index^0,w,c
  5355   00057A  6ED9               	movwf	fsr2l,c
  5356   00057C  3448               	rlcf	(_index+1)^0,w,c
  5357   00057E  6EDA               	movwf	fsr2h,c
  5358   000580  0EFE               	movlw	low (_movement_list+65534)
  5359   000582  26D9               	addwf	fsr2l,f,c
  5360   000584  0E01               	movlw	high (_movement_list+65534)
  5361   000586  22DA               	addwfc	fsr2h,f,c
  5362   000588  0EFC               	movlw	252
  5363   00058A  18DE               	xorwf	postinc2,w,c
  5364   00058C  E106               	bnz	u3701
  5365   00058E  28DE               	incf	postinc2,w,c
  5366   000590  A4D8               	btfss	status,2,c
  5367   000592  EFCD  F002         	goto	u3701
  5368   000596  EFCF  F002         	goto	u3700
  5369   00059A                     u3701:
  5370   00059A  EFDC  F002         	goto	l319
  5371   00059E                     u3700:
  5372   00059E                     
  5373                           ;dc_motor.c: 372:             {;dc_motor.c: 374:                 movement_list[index-1] 
      +                          = -3;
  5374   00059E  90D8               	bcf	status,0,c
  5375   0005A0  3447               	rlcf	_index^0,w,c
  5376   0005A2  6ED9               	movwf	fsr2l,c
  5377   0005A4  3448               	rlcf	(_index+1)^0,w,c
  5378   0005A6  6EDA               	movwf	fsr2h,c
  5379   0005A8  0EFE               	movlw	low (_movement_list+65534)
  5380   0005AA  26D9               	addwf	fsr2l,f,c
  5381   0005AC  0E01               	movlw	high (_movement_list+65534)
  5382   0005AE  22DA               	addwfc	fsr2h,f,c
  5383   0005B0  0EFD               	movlw	253
  5384   0005B2  6EDE               	movwf	postinc2,c
  5385   0005B4  0EFF               	movlw	255
  5386   0005B6  6EDD               	movwf	postdec2,c
  5387   0005B8                     l319:
  5388                           
  5389                           ;dc_motor.c: 377:         movement_list[index] = blockahead;
  5390   0005B8  90D8               	bcf	status,0,c
  5391   0005BA  3447               	rlcf	_index^0,w,c
  5392   0005BC  6ED9               	movwf	fsr2l,c
  5393   0005BE  3448               	rlcf	(_index+1)^0,w,c
  5394   0005C0  6EDA               	movwf	fsr2h,c
  5395   0005C2  0E00               	movlw	low _movement_list
  5396   0005C4  26D9               	addwf	fsr2l,f,c
  5397   0005C6  0E02               	movlw	high _movement_list
  5398   0005C8  22DA               	addwfc	fsr2h,f,c
  5399   0005CA  0E10               	movlw	16
  5400   0005CC  6EDE               	movwf	postinc2,c
  5401   0005CE  0E00               	movlw	0
  5402   0005D0  6EDD               	movwf	postdec2,c
  5403   0005D2                     
  5404                           ;dc_motor.c: 378:         index += 1;
  5405   0005D2  4A47               	infsnz	_index^0,f,c
  5406   0005D4  2A48               	incf	(_index+1)^0,f,c
  5407   0005D6                     
  5408                           ;dc_motor.c: 380:         movement_list[index] = -1;
  5409   0005D6  90D8               	bcf	status,0,c
  5410   0005D8  3447               	rlcf	_index^0,w,c
  5411   0005DA  6ED9               	movwf	fsr2l,c
  5412   0005DC  3448               	rlcf	(_index+1)^0,w,c
  5413   0005DE  6EDA               	movwf	fsr2h,c
  5414   0005E0  0E00               	movlw	low _movement_list
  5415   0005E2  26D9               	addwf	fsr2l,f,c
  5416   0005E4  0E02               	movlw	high _movement_list
  5417   0005E6  22DA               	addwfc	fsr2h,f,c
  5418   0005E8  0EFF               	movlw	255
  5419   0005EA  6EDE               	movwf	postinc2,c
  5420   0005EC  0EFF               	movlw	255
  5421   0005EE  6EDD               	movwf	postdec2,c
  5422                           
  5423                           ;dc_motor.c: 381:         index += 1;
  5424   0005F0  4A47               	infsnz	_index^0,f,c
  5425   0005F2  2A48               	incf	(_index+1)^0,f,c
  5426   0005F4                     l4360:
  5427                           
  5428                           ;dc_motor.c: 385:     if(color == 5){
  5429   0005F4  0E05               	movlw	5
  5430   0005F6  182B               	xorwf	RobotMovement@color^0,w,c
  5431   0005F8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5432   0005FA  A4D8               	btfss	status,2,c
  5433   0005FC  EF02  F003         	goto	u3711
  5434   000600  EF04  F003         	goto	u3710
  5435   000604                     u3711:
  5436   000604  EF1D  F003         	goto	l4368
  5437   000608                     u3710:
  5438   000608                     
  5439                           ;dc_motor.c: 386:         turnRightLong(motorL, motorR);
  5440   000608  C02D  F021         	movff	RobotMovement@motorL,turnRightLong@mL
  5441   00060C  C02E  F022         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5442   000610  C02F  F023         	movff	RobotMovement@motorR,turnRightLong@mR
  5443   000614  C030  F024         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5444   000618  EC16  F00A         	call	_turnRightLong	;wreg free
  5445   00061C                     
  5446                           ;dc_motor.c: 387:         movement_list[index] = -3;
  5447   00061C  90D8               	bcf	status,0,c
  5448   00061E  3447               	rlcf	_index^0,w,c
  5449   000620  6ED9               	movwf	fsr2l,c
  5450   000622  3448               	rlcf	(_index+1)^0,w,c
  5451   000624  6EDA               	movwf	fsr2h,c
  5452   000626  0E00               	movlw	low _movement_list
  5453   000628  26D9               	addwf	fsr2l,f,c
  5454   00062A  0E02               	movlw	high _movement_list
  5455   00062C  22DA               	addwfc	fsr2h,f,c
  5456   00062E  0EFD               	movlw	253
  5457   000630  6EDE               	movwf	postinc2,c
  5458   000632  0EFF               	movlw	255
  5459   000634  6EDD               	movwf	postdec2,c
  5460   000636                     
  5461                           ;dc_motor.c: 388:         index += 1;
  5462   000636  4A47               	infsnz	_index^0,f,c
  5463   000638  2A48               	incf	(_index+1)^0,f,c
  5464   00063A                     l4368:
  5465                           
  5466                           ;dc_motor.c: 391:     if(color == 6){
  5467   00063A  0E06               	movlw	6
  5468   00063C  182B               	xorwf	RobotMovement@color^0,w,c
  5469   00063E  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5470   000640  A4D8               	btfss	status,2,c
  5471   000642  EF25  F003         	goto	u3721
  5472   000646  EF27  F003         	goto	u3720
  5473   00064A                     u3721:
  5474   00064A  EF40  F003         	goto	l4376
  5475   00064E                     u3720:
  5476   00064E                     
  5477                           ;dc_motor.c: 392:         turnLeftLong(motorL, motorR);
  5478   00064E  C02D  F021         	movff	RobotMovement@motorL,turnLeftLong@mL
  5479   000652  C02E  F022         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5480   000656  C02F  F023         	movff	RobotMovement@motorR,turnLeftLong@mR
  5481   00065A  C030  F024         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5482   00065E  ECBC  F008         	call	_turnLeftLong	;wreg free
  5483   000662                     
  5484                           ;dc_motor.c: 393:         movement_list[index] = -4;
  5485   000662  90D8               	bcf	status,0,c
  5486   000664  3447               	rlcf	_index^0,w,c
  5487   000666  6ED9               	movwf	fsr2l,c
  5488   000668  3448               	rlcf	(_index+1)^0,w,c
  5489   00066A  6EDA               	movwf	fsr2h,c
  5490   00066C  0E00               	movlw	low _movement_list
  5491   00066E  26D9               	addwf	fsr2l,f,c
  5492   000670  0E02               	movlw	high _movement_list
  5493   000672  22DA               	addwfc	fsr2h,f,c
  5494   000674  0EFC               	movlw	252
  5495   000676  6EDE               	movwf	postinc2,c
  5496   000678  0EFF               	movlw	255
  5497   00067A  6EDD               	movwf	postdec2,c
  5498   00067C                     
  5499                           ;dc_motor.c: 394:         index += 1;
  5500   00067C  4A47               	infsnz	_index^0,f,c
  5501   00067E  2A48               	incf	(_index+1)^0,f,c
  5502   000680                     l4376:
  5503                           
  5504                           ;dc_motor.c: 397:     if(color == 7){
  5505   000680  0E07               	movlw	7
  5506   000682  182B               	xorwf	RobotMovement@color^0,w,c
  5507   000684  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5508   000686  A4D8               	btfss	status,2,c
  5509   000688  EF48  F003         	goto	u3731
  5510   00068C  EF4A  F003         	goto	u3730
  5511   000690                     u3731:
  5512   000690  EF6D  F003         	goto	l4392
  5513   000694                     u3730:
  5514   000694                     
  5515                           ;dc_motor.c: 398:         int i;;dc_motor.c: 399:         for (i=0;i<2;i++)
  5516   000694  0E00               	movlw	0
  5517   000696  6E36               	movwf	(RobotMovement@i_1276+1)^0,c
  5518   000698  0E00               	movlw	0
  5519   00069A  6E35               	movwf	RobotMovement@i_1276^0,c
  5520   00069C                     l4384:
  5521                           
  5522                           ;dc_motor.c: 400:         {;dc_motor.c: 401:             turnRight(motorL, motorR);
  5523   00069C  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  5524   0006A0  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5525   0006A4  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  5526   0006A8  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5527   0006AC  ECBE  F00A         	call	_turnRight	;wreg free
  5528   0006B0                     
  5529                           ;dc_motor.c: 402:         }
  5530   0006B0  4A35               	infsnz	RobotMovement@i_1276^0,f,c
  5531   0006B2  2A36               	incf	(RobotMovement@i_1276+1)^0,f,c
  5532   0006B4  BE36               	btfsc	(RobotMovement@i_1276+1)^0,7,c
  5533   0006B6  EF66  F003         	goto	u3741
  5534   0006BA  5036               	movf	(RobotMovement@i_1276+1)^0,w,c
  5535   0006BC  E109               	bnz	u3740
  5536   0006BE  0E02               	movlw	2
  5537   0006C0  5C35               	subwf	RobotMovement@i_1276^0,w,c
  5538   0006C2  A0D8               	btfss	status,0,c
  5539   0006C4  EF66  F003         	goto	u3741
  5540   0006C8  EF68  F003         	goto	u3740
  5541   0006CC                     u3741:
  5542   0006CC  EF4E  F003         	goto	l4384
  5543   0006D0                     u3740:
  5544   0006D0                     
  5545                           ;dc_motor.c: 404:         state = 1;
  5546   0006D0  0E00               	movlw	0
  5547   0006D2  0100               	movlb	0	; () banked
  5548   0006D4  6FF5               	movwf	(_state+1)& (0+255),b
  5549   0006D6  0E01               	movlw	1
  5550   0006D8  6FF4               	movwf	_state& (0+255),b
  5551   0006DA                     l4392:
  5552                           
  5553                           ;dc_motor.c: 407:     if (color > 7)
  5554   0006DA  502C               	movf	(RobotMovement@color+1)^0,w,c
  5555   0006DC  E109               	bnz	u3750
  5556   0006DE  0E08               	movlw	8
  5557   0006E0  5C2B               	subwf	RobotMovement@color^0,w,c
  5558   0006E2  A0D8               	btfss	status,0,c
  5559   0006E4  EF76  F003         	goto	u3751
  5560   0006E8  EF78  F003         	goto	u3750
  5561   0006EC                     u3751:
  5562   0006EC  EF86  F003         	goto	l331
  5563   0006F0                     u3750:
  5564   0006F0                     
  5565                           ;dc_motor.c: 408:     {;dc_motor.c: 409:         TimedfullSpeedAhead(motorL, motorR, hal
      +                          fblock);
  5566   0006F0  C02D  F021         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5567   0006F4  C02E  F022         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5568   0006F8  C02F  F023         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5569   0006FC  C030  F024         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5570   000700  0E00               	movlw	0
  5571   000702  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5572   000704  0E05               	movlw	5
  5573   000706  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  5574   000708  EC14  F00E         	call	_TimedfullSpeedAhead	;wreg free
  5575   00070C                     l331:
  5576   00070C  0012               	return		;funcret
  5577   00070E                     __end_of_RobotMovement:
  5578                           	callstack 0
  5579                           
  5580 ;; *************** function _turnRightLong *****************
  5581 ;; Defined at:
  5582 ;;		line 188 in file "dc_motor.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5585 ;;		 -> main@motorL(9), 
  5586 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5587 ;;		 -> main@motorR(9), 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  i               2   40[COMRAM] int 
  5590 ;;  k               2   38[COMRAM] int 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5600 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5603 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5604 ;;Total ram usage:       10 bytes
  5605 ;; Hardware stack levels used: 1
  5606 ;; Hardware stack levels required when called: 7
  5607 ;; This function calls:
  5608 ;;		_setMotorPWM
  5609 ;; This function is called by:
  5610 ;;		_RobotMovement
  5611 ;;		_return_back
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text30
  5616   00142C                     __ptext30:
  5617                           	callstack 0
  5618   00142C                     _turnRightLong:
  5619                           	callstack 22
  5620   00142C                     
  5621                           ;dc_motor.c: 188: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 189: {;dc_motor.c: 190:     int k;;dc_motor.c: 191:     for (k=0;k<3;k++)
  5622   00142C  0E00               	movlw	0
  5623   00142E  6E28               	movwf	(turnRightLong@k+1)^0,c
  5624   001430  0E00               	movlw	0
  5625   001432  6E27               	movwf	turnRightLong@k^0,c
  5626   001434                     l3990:
  5627                           
  5628                           ;dc_motor.c: 192:     {;dc_motor.c: 193:         int i;;dc_motor.c: 194:         for(i=2
      +                          3;i<38;i+=5){
  5629   001434  0E00               	movlw	0
  5630   001436  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5631   001438  0E17               	movlw	23
  5632   00143A  6E29               	movwf	turnRightLong@i^0,c
  5633   00143C                     l3996:
  5634                           
  5635                           ;dc_motor.c: 195:         (*mL).direction=0;
  5636   00143C  EE20 F001          	lfsr	2,1
  5637   001440  5021               	movf	turnRightLong@mL^0,w,c
  5638   001442  26D9               	addwf	fsr2l,f,c
  5639   001444  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5640   001446  22DA               	addwfc	fsr2h,f,c
  5641   001448  0E00               	movlw	0
  5642   00144A  6EDF               	movwf	indf2,c
  5643                           
  5644                           ;dc_motor.c: 196:         (*mR).direction=1;
  5645   00144C  EE20 F001          	lfsr	2,1
  5646   001450  5023               	movf	turnRightLong@mR^0,w,c
  5647   001452  26D9               	addwf	fsr2l,f,c
  5648   001454  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5649   001456  22DA               	addwfc	fsr2h,f,c
  5650   001458  0E01               	movlw	1
  5651   00145A  6EDF               	movwf	indf2,c
  5652   00145C                     
  5653                           ;dc_motor.c: 197:         (*mL).power=i;
  5654   00145C  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5655   001460  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5656   001464  C029  FFDF         	movff	turnRightLong@i,indf2
  5657   001468                     
  5658                           ;dc_motor.c: 198:         (*mR).power=i;
  5659   001468  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5660   00146C  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5661   001470  C029  FFDF         	movff	turnRightLong@i,indf2
  5662   001474                     
  5663                           ;dc_motor.c: 199:         setMotorPWM(mL);
  5664   001474  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5665   001478  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5666   00147C  EC06  F008         	call	_setMotorPWM	;wreg free
  5667   001480                     
  5668                           ;dc_motor.c: 200:         setMotorPWM(mR);
  5669   001480  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5670   001484  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5671   001488  EC06  F008         	call	_setMotorPWM	;wreg free
  5672   00148C                     
  5673                           ;dc_motor.c: 201:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5674   00148C  0E09               	movlw	9
  5675   00148E  6E26               	movwf	(??_turnRightLong+1)^0,c
  5676   001490  0EB0               	movlw	176
  5677   001492  6E25               	movwf	??_turnRightLong^0,c
  5678   001494  0E58               	movlw	88
  5679   001496                     u4397:
  5680   001496  2EE8               	decfsz	wreg,f,c
  5681   001498  D7FE               	bra	u4397
  5682   00149A  2E25               	decfsz	??_turnRightLong^0,f,c
  5683   00149C  D7FC               	bra	u4397
  5684   00149E  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5685   0014A0  D7FA               	bra	u4397
  5686   0014A2  D000               	nop2	
  5687   0014A4                     
  5688                           ;dc_motor.c: 202:         }
  5689   0014A4  0E05               	movlw	5
  5690   0014A6  2629               	addwf	turnRightLong@i^0,f,c
  5691   0014A8  0E00               	movlw	0
  5692   0014AA  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5693   0014AC  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5694   0014AE  EF62  F00A         	goto	u3171
  5695   0014B2  502A               	movf	(turnRightLong@i+1)^0,w,c
  5696   0014B4  E109               	bnz	u3170
  5697   0014B6  0E26               	movlw	38
  5698   0014B8  5C29               	subwf	turnRightLong@i^0,w,c
  5699   0014BA  A0D8               	btfss	status,0,c
  5700   0014BC  EF62  F00A         	goto	u3171
  5701   0014C0  EF64  F00A         	goto	u3170
  5702   0014C4                     u3171:
  5703   0014C4  EF1E  F00A         	goto	l3996
  5704   0014C8                     u3170:
  5705   0014C8                     
  5706                           ;dc_motor.c: 203:         for(i=28;i>13;i-=5){
  5707   0014C8  0E00               	movlw	0
  5708   0014CA  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5709   0014CC  0E1C               	movlw	28
  5710   0014CE  6E29               	movwf	turnRightLong@i^0,c
  5711   0014D0                     l4018:
  5712                           
  5713                           ;dc_motor.c: 204:         (*mL).direction=0;
  5714   0014D0  EE20 F001          	lfsr	2,1
  5715   0014D4  5021               	movf	turnRightLong@mL^0,w,c
  5716   0014D6  26D9               	addwf	fsr2l,f,c
  5717   0014D8  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5718   0014DA  22DA               	addwfc	fsr2h,f,c
  5719   0014DC  0E00               	movlw	0
  5720   0014DE  6EDF               	movwf	indf2,c
  5721                           
  5722                           ;dc_motor.c: 205:         (*mR).direction=1;
  5723   0014E0  EE20 F001          	lfsr	2,1
  5724   0014E4  5023               	movf	turnRightLong@mR^0,w,c
  5725   0014E6  26D9               	addwf	fsr2l,f,c
  5726   0014E8  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5727   0014EA  22DA               	addwfc	fsr2h,f,c
  5728   0014EC  0E01               	movlw	1
  5729   0014EE  6EDF               	movwf	indf2,c
  5730   0014F0                     
  5731                           ;dc_motor.c: 206:         (*mL).power=i;
  5732   0014F0  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5733   0014F4  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5734   0014F8  C029  FFDF         	movff	turnRightLong@i,indf2
  5735   0014FC                     
  5736                           ;dc_motor.c: 207:         (*mR).power=i;
  5737   0014FC  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5738   001500  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5739   001504  C029  FFDF         	movff	turnRightLong@i,indf2
  5740   001508                     
  5741                           ;dc_motor.c: 208:         setMotorPWM(mL);
  5742   001508  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5743   00150C  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5744   001510  EC06  F008         	call	_setMotorPWM	;wreg free
  5745   001514                     
  5746                           ;dc_motor.c: 209:         setMotorPWM(mR);
  5747   001514  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5748   001518  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5749   00151C  EC06  F008         	call	_setMotorPWM	;wreg free
  5750   001520                     
  5751                           ;dc_motor.c: 210:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5752   001520  0E09               	movlw	9
  5753   001522  6E26               	movwf	(??_turnRightLong+1)^0,c
  5754   001524  0E86               	movlw	134
  5755   001526  6E25               	movwf	??_turnRightLong^0,c
  5756   001528  0ECA               	movlw	202
  5757   00152A                     u4407:
  5758   00152A  2EE8               	decfsz	wreg,f,c
  5759   00152C  D7FE               	bra	u4407
  5760   00152E  2E25               	decfsz	??_turnRightLong^0,f,c
  5761   001530  D7FC               	bra	u4407
  5762   001532  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5763   001534  D7FA               	bra	u4407
  5764   001536                     
  5765                           ;dc_motor.c: 211:         }
  5766   001536  0EFB               	movlw	251
  5767   001538  2629               	addwf	turnRightLong@i^0,f,c
  5768   00153A  0EFF               	movlw	255
  5769   00153C  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5770   00153E  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5771   001540  EFAD  F00A         	goto	u3180
  5772   001544  502A               	movf	(turnRightLong@i+1)^0,w,c
  5773   001546  E107               	bnz	u3181
  5774   001548  0E0E               	movlw	14
  5775   00154A  5C29               	subwf	turnRightLong@i^0,w,c
  5776   00154C  B0D8               	btfsc	status,0,c
  5777   00154E  EFAB  F00A         	goto	u3181
  5778   001552  EFAD  F00A         	goto	u3180
  5779   001556                     u3181:
  5780   001556  EF68  F00A         	goto	l4018
  5781   00155A                     u3180:
  5782   00155A                     
  5783                           ;dc_motor.c: 212:     }
  5784   00155A  4A27               	infsnz	turnRightLong@k^0,f,c
  5785   00155C  2A28               	incf	(turnRightLong@k+1)^0,f,c
  5786   00155E  BE28               	btfsc	(turnRightLong@k+1)^0,7,c
  5787   001560  EFBB  F00A         	goto	u3191
  5788   001564  5028               	movf	(turnRightLong@k+1)^0,w,c
  5789   001566  E109               	bnz	u3190
  5790   001568  0E03               	movlw	3
  5791   00156A  5C27               	subwf	turnRightLong@k^0,w,c
  5792   00156C  A0D8               	btfss	status,0,c
  5793   00156E  EFBB  F00A         	goto	u3191
  5794   001572  EFBD  F00A         	goto	u3190
  5795   001576                     u3191:
  5796   001576  EF1A  F00A         	goto	l3990
  5797   00157A                     u3190:
  5798   00157A  0012               	return		;funcret
  5799   00157C                     __end_of_turnRightLong:
  5800                           	callstack 0
  5801                           
  5802 ;; *************** function _turnRight *****************
  5803 ;; Defined at:
  5804 ;;		line 134 in file "dc_motor.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5807 ;;		 -> main@motorL(9), 
  5808 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5809 ;;		 -> main@motorR(9), 
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;  i               2   40[COMRAM] int 
  5812 ;;  k               2   38[COMRAM] int 
  5813 ;; Return value:  Size  Location     Type
  5814 ;;                  1    wreg      void 
  5815 ;; Registers used:
  5816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5817 ;; Tracked objects:
  5818 ;;		On entry : 0/0
  5819 ;;		On exit  : 0/0
  5820 ;;		Unchanged: 0/0
  5821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5823 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5824 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5825 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5826 ;;Total ram usage:       10 bytes
  5827 ;; Hardware stack levels used: 1
  5828 ;; Hardware stack levels required when called: 7
  5829 ;; This function calls:
  5830 ;;		_setMotorPWM
  5831 ;; This function is called by:
  5832 ;;		_RobotMovement
  5833 ;;		_return_back
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text31
  5838   00157C                     __ptext31:
  5839                           	callstack 0
  5840   00157C                     _turnRight:
  5841                           	callstack 22
  5842   00157C                     
  5843                           ;dc_motor.c: 134: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          35: {;dc_motor.c: 136:     int k;;dc_motor.c: 137:     for (k=0;k<2;k++)
  5844   00157C  0E00               	movlw	0
  5845   00157E  6E28               	movwf	(turnRight@k+1)^0,c
  5846   001580  0E00               	movlw	0
  5847   001582  6E27               	movwf	turnRight@k^0,c
  5848   001584                     l3882:
  5849                           
  5850                           ;dc_motor.c: 138:     {;dc_motor.c: 139:         int i;;dc_motor.c: 140:         for(i=2
      +                          3;i<38;i+=5){
  5851   001584  0E00               	movlw	0
  5852   001586  6E2A               	movwf	(turnRight@i+1)^0,c
  5853   001588  0E17               	movlw	23
  5854   00158A  6E29               	movwf	turnRight@i^0,c
  5855   00158C                     l3888:
  5856                           
  5857                           ;dc_motor.c: 141:         (*mL).direction=0;
  5858   00158C  EE20 F001          	lfsr	2,1
  5859   001590  5021               	movf	turnRight@mL^0,w,c
  5860   001592  26D9               	addwf	fsr2l,f,c
  5861   001594  5022               	movf	(turnRight@mL+1)^0,w,c
  5862   001596  22DA               	addwfc	fsr2h,f,c
  5863   001598  0E00               	movlw	0
  5864   00159A  6EDF               	movwf	indf2,c
  5865                           
  5866                           ;dc_motor.c: 142:         (*mR).direction=1;
  5867   00159C  EE20 F001          	lfsr	2,1
  5868   0015A0  5023               	movf	turnRight@mR^0,w,c
  5869   0015A2  26D9               	addwf	fsr2l,f,c
  5870   0015A4  5024               	movf	(turnRight@mR+1)^0,w,c
  5871   0015A6  22DA               	addwfc	fsr2h,f,c
  5872   0015A8  0E01               	movlw	1
  5873   0015AA  6EDF               	movwf	indf2,c
  5874   0015AC                     
  5875                           ;dc_motor.c: 143:         (*mL).power=i;
  5876   0015AC  C021  FFD9         	movff	turnRight@mL,fsr2l
  5877   0015B0  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5878   0015B4  C029  FFDF         	movff	turnRight@i,indf2
  5879   0015B8                     
  5880                           ;dc_motor.c: 144:         (*mR).power=i;
  5881   0015B8  C023  FFD9         	movff	turnRight@mR,fsr2l
  5882   0015BC  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5883   0015C0  C029  FFDF         	movff	turnRight@i,indf2
  5884   0015C4                     
  5885                           ;dc_motor.c: 145:         setMotorPWM(mL);
  5886   0015C4  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5887   0015C8  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5888   0015CC  EC06  F008         	call	_setMotorPWM	;wreg free
  5889   0015D0                     
  5890                           ;dc_motor.c: 146:         setMotorPWM(mR);
  5891   0015D0  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5892   0015D4  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5893   0015D8  EC06  F008         	call	_setMotorPWM	;wreg free
  5894   0015DC                     
  5895                           ;dc_motor.c: 147:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5896   0015DC  0E09               	movlw	9
  5897   0015DE  6E26               	movwf	(??_turnRight+1)^0,c
  5898   0015E0  0EB0               	movlw	176
  5899   0015E2  6E25               	movwf	??_turnRight^0,c
  5900   0015E4  0E58               	movlw	88
  5901   0015E6                     u4417:
  5902   0015E6  2EE8               	decfsz	wreg,f,c
  5903   0015E8  D7FE               	bra	u4417
  5904   0015EA  2E25               	decfsz	??_turnRight^0,f,c
  5905   0015EC  D7FC               	bra	u4417
  5906   0015EE  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5907   0015F0  D7FA               	bra	u4417
  5908   0015F2  D000               	nop2	
  5909   0015F4                     
  5910                           ;dc_motor.c: 148:         }
  5911   0015F4  0E05               	movlw	5
  5912   0015F6  2629               	addwf	turnRight@i^0,f,c
  5913   0015F8  0E00               	movlw	0
  5914   0015FA  222A               	addwfc	(turnRight@i+1)^0,f,c
  5915   0015FC  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5916   0015FE  EF0A  F00B         	goto	u3111
  5917   001602  502A               	movf	(turnRight@i+1)^0,w,c
  5918   001604  E109               	bnz	u3110
  5919   001606  0E26               	movlw	38
  5920   001608  5C29               	subwf	turnRight@i^0,w,c
  5921   00160A  A0D8               	btfss	status,0,c
  5922   00160C  EF0A  F00B         	goto	u3111
  5923   001610  EF0C  F00B         	goto	u3110
  5924   001614                     u3111:
  5925   001614  EFC6  F00A         	goto	l3888
  5926   001618                     u3110:
  5927   001618                     
  5928                           ;dc_motor.c: 149:         for(i=28;i>13;i-=5){
  5929   001618  0E00               	movlw	0
  5930   00161A  6E2A               	movwf	(turnRight@i+1)^0,c
  5931   00161C  0E1C               	movlw	28
  5932   00161E  6E29               	movwf	turnRight@i^0,c
  5933   001620                     l3910:
  5934                           
  5935                           ;dc_motor.c: 150:         (*mL).direction=0;
  5936   001620  EE20 F001          	lfsr	2,1
  5937   001624  5021               	movf	turnRight@mL^0,w,c
  5938   001626  26D9               	addwf	fsr2l,f,c
  5939   001628  5022               	movf	(turnRight@mL+1)^0,w,c
  5940   00162A  22DA               	addwfc	fsr2h,f,c
  5941   00162C  0E00               	movlw	0
  5942   00162E  6EDF               	movwf	indf2,c
  5943                           
  5944                           ;dc_motor.c: 151:         (*mR).direction=1;
  5945   001630  EE20 F001          	lfsr	2,1
  5946   001634  5023               	movf	turnRight@mR^0,w,c
  5947   001636  26D9               	addwf	fsr2l,f,c
  5948   001638  5024               	movf	(turnRight@mR+1)^0,w,c
  5949   00163A  22DA               	addwfc	fsr2h,f,c
  5950   00163C  0E01               	movlw	1
  5951   00163E  6EDF               	movwf	indf2,c
  5952   001640                     
  5953                           ;dc_motor.c: 152:         (*mL).power=i;
  5954   001640  C021  FFD9         	movff	turnRight@mL,fsr2l
  5955   001644  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5956   001648  C029  FFDF         	movff	turnRight@i,indf2
  5957   00164C                     
  5958                           ;dc_motor.c: 153:         (*mR).power=i;
  5959   00164C  C023  FFD9         	movff	turnRight@mR,fsr2l
  5960   001650  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5961   001654  C029  FFDF         	movff	turnRight@i,indf2
  5962   001658                     
  5963                           ;dc_motor.c: 154:         setMotorPWM(mL);
  5964   001658  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5965   00165C  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5966   001660  EC06  F008         	call	_setMotorPWM	;wreg free
  5967   001664                     
  5968                           ;dc_motor.c: 155:         setMotorPWM(mR);
  5969   001664  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5970   001668  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5971   00166C  EC06  F008         	call	_setMotorPWM	;wreg free
  5972   001670                     
  5973                           ;dc_motor.c: 156:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5974   001670  0E09               	movlw	9
  5975   001672  6E26               	movwf	(??_turnRight+1)^0,c
  5976   001674  0E86               	movlw	134
  5977   001676  6E25               	movwf	??_turnRight^0,c
  5978   001678  0ECA               	movlw	202
  5979   00167A                     u4427:
  5980   00167A  2EE8               	decfsz	wreg,f,c
  5981   00167C  D7FE               	bra	u4427
  5982   00167E  2E25               	decfsz	??_turnRight^0,f,c
  5983   001680  D7FC               	bra	u4427
  5984   001682  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5985   001684  D7FA               	bra	u4427
  5986   001686                     
  5987                           ;dc_motor.c: 157:         }
  5988   001686  0EFB               	movlw	251
  5989   001688  2629               	addwf	turnRight@i^0,f,c
  5990   00168A  0EFF               	movlw	255
  5991   00168C  222A               	addwfc	(turnRight@i+1)^0,f,c
  5992   00168E  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5993   001690  EF55  F00B         	goto	u3120
  5994   001694  502A               	movf	(turnRight@i+1)^0,w,c
  5995   001696  E107               	bnz	u3121
  5996   001698  0E0E               	movlw	14
  5997   00169A  5C29               	subwf	turnRight@i^0,w,c
  5998   00169C  B0D8               	btfsc	status,0,c
  5999   00169E  EF53  F00B         	goto	u3121
  6000   0016A2  EF55  F00B         	goto	u3120
  6001   0016A6                     u3121:
  6002   0016A6  EF10  F00B         	goto	l3910
  6003   0016AA                     u3120:
  6004   0016AA                     
  6005                           ;dc_motor.c: 158:     }
  6006   0016AA  4A27               	infsnz	turnRight@k^0,f,c
  6007   0016AC  2A28               	incf	(turnRight@k+1)^0,f,c
  6008   0016AE  BE28               	btfsc	(turnRight@k+1)^0,7,c
  6009   0016B0  EF63  F00B         	goto	u3131
  6010   0016B4  5028               	movf	(turnRight@k+1)^0,w,c
  6011   0016B6  E109               	bnz	u3130
  6012   0016B8  0E02               	movlw	2
  6013   0016BA  5C27               	subwf	turnRight@k^0,w,c
  6014   0016BC  A0D8               	btfss	status,0,c
  6015   0016BE  EF63  F00B         	goto	u3131
  6016   0016C2  EF65  F00B         	goto	u3130
  6017   0016C6                     u3131:
  6018   0016C6  EFC2  F00A         	goto	l3882
  6019   0016CA                     u3130:
  6020   0016CA  0012               	return		;funcret
  6021   0016CC                     __end_of_turnRight:
  6022                           	callstack 0
  6023                           
  6024 ;; *************** function _turnLeftLong *****************
  6025 ;; Defined at:
  6026 ;;		line 161 in file "dc_motor.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6029 ;;		 -> main@motorL(9), 
  6030 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6031 ;;		 -> main@motorR(9), 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  i               2   40[COMRAM] int 
  6034 ;;  k               2   38[COMRAM] int 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6045 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6047 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6048 ;;Total ram usage:       10 bytes
  6049 ;; Hardware stack levels used: 1
  6050 ;; Hardware stack levels required when called: 7
  6051 ;; This function calls:
  6052 ;;		_setMotorPWM
  6053 ;; This function is called by:
  6054 ;;		_RobotMovement
  6055 ;;		_return_back
  6056 ;; This function uses a non-reentrant model
  6057 ;;
  6058                           
  6059                           	psect	text32
  6060   001178                     __ptext32:
  6061                           	callstack 0
  6062   001178                     _turnLeftLong:
  6063                           	callstack 22
  6064   001178                     
  6065                           ;dc_motor.c: 161: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 162: {;dc_motor.c: 163:     int k = 0;
  6066   001178  0E00               	movlw	0
  6067   00117A  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6068   00117C  0E00               	movlw	0
  6069   00117E  6E27               	movwf	turnLeftLong@k^0,c
  6070                           
  6071                           ;dc_motor.c: 164:     for (k=0;k<3;k++)
  6072   001180  0E00               	movlw	0
  6073   001182  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6074   001184  0E00               	movlw	0
  6075   001186  6E27               	movwf	turnLeftLong@k^0,c
  6076   001188                     l3936:
  6077                           
  6078                           ;dc_motor.c: 165:     {;dc_motor.c: 166:         int i;;dc_motor.c: 167:         for(i=4
      +                          1;i<56;i+=5){
  6079   001188  0E00               	movlw	0
  6080   00118A  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6081   00118C  0E29               	movlw	41
  6082   00118E  6E29               	movwf	turnLeftLong@i^0,c
  6083   001190                     l3942:
  6084                           
  6085                           ;dc_motor.c: 168:         (*mL).direction=1;
  6086   001190  EE20 F001          	lfsr	2,1
  6087   001194  5021               	movf	turnLeftLong@mL^0,w,c
  6088   001196  26D9               	addwf	fsr2l,f,c
  6089   001198  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6090   00119A  22DA               	addwfc	fsr2h,f,c
  6091   00119C  0E01               	movlw	1
  6092   00119E  6EDF               	movwf	indf2,c
  6093                           
  6094                           ;dc_motor.c: 169:         (*mR).direction=0;
  6095   0011A0  EE20 F001          	lfsr	2,1
  6096   0011A4  5023               	movf	turnLeftLong@mR^0,w,c
  6097   0011A6  26D9               	addwf	fsr2l,f,c
  6098   0011A8  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6099   0011AA  22DA               	addwfc	fsr2h,f,c
  6100   0011AC  0E00               	movlw	0
  6101   0011AE  6EDF               	movwf	indf2,c
  6102   0011B0                     
  6103                           ;dc_motor.c: 170:         (*mL).power=i;
  6104   0011B0  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6105   0011B4  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6106   0011B8  C029  FFDF         	movff	turnLeftLong@i,indf2
  6107   0011BC                     
  6108                           ;dc_motor.c: 171:         (*mR).power=i;
  6109   0011BC  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6110   0011C0  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6111   0011C4  C029  FFDF         	movff	turnLeftLong@i,indf2
  6112   0011C8                     
  6113                           ;dc_motor.c: 172:         setMotorPWM(mL);
  6114   0011C8  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6115   0011CC  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6116   0011D0  EC06  F008         	call	_setMotorPWM	;wreg free
  6117   0011D4                     
  6118                           ;dc_motor.c: 173:         setMotorPWM(mR);
  6119   0011D4  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6120   0011D8  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6121   0011DC  EC06  F008         	call	_setMotorPWM	;wreg free
  6122   0011E0                     
  6123                           ;dc_motor.c: 174:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6124   0011E0  0E05               	movlw	5
  6125   0011E2  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6126   0011E4  0EB6               	movlw	182
  6127   0011E6  6E25               	movwf	??_turnLeftLong^0,c
  6128   0011E8  0E2C               	movlw	44
  6129   0011EA                     u4437:
  6130   0011EA  2EE8               	decfsz	wreg,f,c
  6131   0011EC  D7FE               	bra	u4437
  6132   0011EE  2E25               	decfsz	??_turnLeftLong^0,f,c
  6133   0011F0  D7FC               	bra	u4437
  6134   0011F2  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6135   0011F4  D7FA               	bra	u4437
  6136   0011F6  D000               	nop2	
  6137   0011F8                     
  6138                           ;dc_motor.c: 175:         }
  6139   0011F8  0E05               	movlw	5
  6140   0011FA  2629               	addwf	turnLeftLong@i^0,f,c
  6141   0011FC  0E00               	movlw	0
  6142   0011FE  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6143   001200  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6144   001202  EF0C  F009         	goto	u3141
  6145   001206  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6146   001208  E109               	bnz	u3140
  6147   00120A  0E38               	movlw	56
  6148   00120C  5C29               	subwf	turnLeftLong@i^0,w,c
  6149   00120E  A0D8               	btfss	status,0,c
  6150   001210  EF0C  F009         	goto	u3141
  6151   001214  EF0E  F009         	goto	u3140
  6152   001218                     u3141:
  6153   001218  EFC8  F008         	goto	l3942
  6154   00121C                     u3140:
  6155   00121C                     
  6156                           ;dc_motor.c: 176:         for(i=46;i>31;i-=5){
  6157   00121C  0E00               	movlw	0
  6158   00121E  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6159   001220  0E2E               	movlw	46
  6160   001222  6E29               	movwf	turnLeftLong@i^0,c
  6161   001224                     l3964:
  6162                           
  6163                           ;dc_motor.c: 177:         (*mL).direction=1;
  6164   001224  EE20 F001          	lfsr	2,1
  6165   001228  5021               	movf	turnLeftLong@mL^0,w,c
  6166   00122A  26D9               	addwf	fsr2l,f,c
  6167   00122C  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6168   00122E  22DA               	addwfc	fsr2h,f,c
  6169   001230  0E01               	movlw	1
  6170   001232  6EDF               	movwf	indf2,c
  6171                           
  6172                           ;dc_motor.c: 178:         (*mR).direction=0;
  6173   001234  EE20 F001          	lfsr	2,1
  6174   001238  5023               	movf	turnLeftLong@mR^0,w,c
  6175   00123A  26D9               	addwf	fsr2l,f,c
  6176   00123C  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6177   00123E  22DA               	addwfc	fsr2h,f,c
  6178   001240  0E00               	movlw	0
  6179   001242  6EDF               	movwf	indf2,c
  6180   001244                     
  6181                           ;dc_motor.c: 179:         (*mL).power=i;
  6182   001244  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6183   001248  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6184   00124C  C029  FFDF         	movff	turnLeftLong@i,indf2
  6185   001250                     
  6186                           ;dc_motor.c: 180:         (*mR).power=i;
  6187   001250  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6188   001254  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6189   001258  C029  FFDF         	movff	turnLeftLong@i,indf2
  6190   00125C                     
  6191                           ;dc_motor.c: 181:         setMotorPWM(mL);
  6192   00125C  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6193   001260  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6194   001264  EC06  F008         	call	_setMotorPWM	;wreg free
  6195   001268                     
  6196                           ;dc_motor.c: 182:         setMotorPWM(mR);
  6197   001268  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6198   00126C  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6199   001270  EC06  F008         	call	_setMotorPWM	;wreg free
  6200   001274                     
  6201                           ;dc_motor.c: 183:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6202   001274  0E05               	movlw	5
  6203   001276  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6204   001278  0EA1               	movlw	161
  6205   00127A  6E25               	movwf	??_turnLeftLong^0,c
  6206   00127C  0E65               	movlw	101
  6207   00127E                     u4447:
  6208   00127E  2EE8               	decfsz	wreg,f,c
  6209   001280  D7FE               	bra	u4447
  6210   001282  2E25               	decfsz	??_turnLeftLong^0,f,c
  6211   001284  D7FC               	bra	u4447
  6212   001286  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6213   001288  D7FA               	bra	u4447
  6214   00128A  F000               	nop	
  6215   00128C                     
  6216                           ;dc_motor.c: 184:         }
  6217   00128C  0EFB               	movlw	251
  6218   00128E  2629               	addwf	turnLeftLong@i^0,f,c
  6219   001290  0EFF               	movlw	255
  6220   001292  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6221   001294  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6222   001296  EF58  F009         	goto	u3150
  6223   00129A  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6224   00129C  E107               	bnz	u3151
  6225   00129E  0E20               	movlw	32
  6226   0012A0  5C29               	subwf	turnLeftLong@i^0,w,c
  6227   0012A2  B0D8               	btfsc	status,0,c
  6228   0012A4  EF56  F009         	goto	u3151
  6229   0012A8  EF58  F009         	goto	u3150
  6230   0012AC                     u3151:
  6231   0012AC  EF12  F009         	goto	l3964
  6232   0012B0                     u3150:
  6233   0012B0                     
  6234                           ;dc_motor.c: 185:     }
  6235   0012B0  4A27               	infsnz	turnLeftLong@k^0,f,c
  6236   0012B2  2A28               	incf	(turnLeftLong@k+1)^0,f,c
  6237   0012B4  BE28               	btfsc	(turnLeftLong@k+1)^0,7,c
  6238   0012B6  EF66  F009         	goto	u3161
  6239   0012BA  5028               	movf	(turnLeftLong@k+1)^0,w,c
  6240   0012BC  E109               	bnz	u3160
  6241   0012BE  0E03               	movlw	3
  6242   0012C0  5C27               	subwf	turnLeftLong@k^0,w,c
  6243   0012C2  A0D8               	btfss	status,0,c
  6244   0012C4  EF66  F009         	goto	u3161
  6245   0012C8  EF68  F009         	goto	u3160
  6246   0012CC                     u3161:
  6247   0012CC  EFC4  F008         	goto	l3936
  6248   0012D0                     u3160:
  6249   0012D0  0012               	return		;funcret
  6250   0012D2                     __end_of_turnLeftLong:
  6251                           	callstack 0
  6252                           
  6253 ;; *************** function _turnLeft *****************
  6254 ;; Defined at:
  6255 ;;		line 107 in file "dc_motor.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6258 ;;		 -> main@motorL(9), 
  6259 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6260 ;;		 -> main@motorR(9), 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  i               2   40[COMRAM] int 
  6263 ;;  k               2   38[COMRAM] int 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      void 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;Total ram usage:       10 bytes
  6278 ;; Hardware stack levels used: 1
  6279 ;; Hardware stack levels required when called: 7
  6280 ;; This function calls:
  6281 ;;		_setMotorPWM
  6282 ;; This function is called by:
  6283 ;;		_RobotMovement
  6284 ;;		_return_back
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text33
  6289   0012D2                     __ptext33:
  6290                           	callstack 0
  6291   0012D2                     _turnLeft:
  6292                           	callstack 22
  6293   0012D2                     
  6294                           ;dc_motor.c: 107: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 108: {;dc_motor.
      +                          c: 109:     int k = 0;
  6295   0012D2  0E00               	movlw	0
  6296   0012D4  6E28               	movwf	(turnLeft@k+1)^0,c
  6297   0012D6  0E00               	movlw	0
  6298   0012D8  6E27               	movwf	turnLeft@k^0,c
  6299                           
  6300                           ;dc_motor.c: 110:     for (k=0;k<2;k++)
  6301   0012DA  0E00               	movlw	0
  6302   0012DC  6E28               	movwf	(turnLeft@k+1)^0,c
  6303   0012DE  0E00               	movlw	0
  6304   0012E0  6E27               	movwf	turnLeft@k^0,c
  6305   0012E2                     l3828:
  6306                           
  6307                           ;dc_motor.c: 111:     {;dc_motor.c: 112:         int i;;dc_motor.c: 113:         for(i=4
      +                          1;i<56;i+=5){
  6308   0012E2  0E00               	movlw	0
  6309   0012E4  6E2A               	movwf	(turnLeft@i+1)^0,c
  6310   0012E6  0E29               	movlw	41
  6311   0012E8  6E29               	movwf	turnLeft@i^0,c
  6312   0012EA                     l3834:
  6313                           
  6314                           ;dc_motor.c: 114:         (*mL).direction=1;
  6315   0012EA  EE20 F001          	lfsr	2,1
  6316   0012EE  5021               	movf	turnLeft@mL^0,w,c
  6317   0012F0  26D9               	addwf	fsr2l,f,c
  6318   0012F2  5022               	movf	(turnLeft@mL+1)^0,w,c
  6319   0012F4  22DA               	addwfc	fsr2h,f,c
  6320   0012F6  0E01               	movlw	1
  6321   0012F8  6EDF               	movwf	indf2,c
  6322                           
  6323                           ;dc_motor.c: 115:         (*mR).direction=0;
  6324   0012FA  EE20 F001          	lfsr	2,1
  6325   0012FE  5023               	movf	turnLeft@mR^0,w,c
  6326   001300  26D9               	addwf	fsr2l,f,c
  6327   001302  5024               	movf	(turnLeft@mR+1)^0,w,c
  6328   001304  22DA               	addwfc	fsr2h,f,c
  6329   001306  0E00               	movlw	0
  6330   001308  6EDF               	movwf	indf2,c
  6331   00130A                     
  6332                           ;dc_motor.c: 116:         (*mL).power=i;
  6333   00130A  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6334   00130E  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6335   001312  C029  FFDF         	movff	turnLeft@i,indf2
  6336   001316                     
  6337                           ;dc_motor.c: 117:         (*mR).power=i;
  6338   001316  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6339   00131A  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6340   00131E  C029  FFDF         	movff	turnLeft@i,indf2
  6341   001322                     
  6342                           ;dc_motor.c: 118:         setMotorPWM(mL);
  6343   001322  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6344   001326  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6345   00132A  EC06  F008         	call	_setMotorPWM	;wreg free
  6346   00132E                     
  6347                           ;dc_motor.c: 119:         setMotorPWM(mR);
  6348   00132E  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6349   001332  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6350   001336  EC06  F008         	call	_setMotorPWM	;wreg free
  6351   00133A                     
  6352                           ;dc_motor.c: 120:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6353   00133A  0E05               	movlw	5
  6354   00133C  6E26               	movwf	(??_turnLeft+1)^0,c
  6355   00133E  0EB6               	movlw	182
  6356   001340  6E25               	movwf	??_turnLeft^0,c
  6357   001342  0E2C               	movlw	44
  6358   001344                     u4457:
  6359   001344  2EE8               	decfsz	wreg,f,c
  6360   001346  D7FE               	bra	u4457
  6361   001348  2E25               	decfsz	??_turnLeft^0,f,c
  6362   00134A  D7FC               	bra	u4457
  6363   00134C  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6364   00134E  D7FA               	bra	u4457
  6365   001350  D000               	nop2	
  6366   001352                     
  6367                           ;dc_motor.c: 121:         }
  6368   001352  0E05               	movlw	5
  6369   001354  2629               	addwf	turnLeft@i^0,f,c
  6370   001356  0E00               	movlw	0
  6371   001358  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6372   00135A  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6373   00135C  EFB9  F009         	goto	u3081
  6374   001360  502A               	movf	(turnLeft@i+1)^0,w,c
  6375   001362  E109               	bnz	u3080
  6376   001364  0E38               	movlw	56
  6377   001366  5C29               	subwf	turnLeft@i^0,w,c
  6378   001368  A0D8               	btfss	status,0,c
  6379   00136A  EFB9  F009         	goto	u3081
  6380   00136E  EFBB  F009         	goto	u3080
  6381   001372                     u3081:
  6382   001372  EF75  F009         	goto	l3834
  6383   001376                     u3080:
  6384   001376                     
  6385                           ;dc_motor.c: 122:         for(i=46;i>31;i-=5){
  6386   001376  0E00               	movlw	0
  6387   001378  6E2A               	movwf	(turnLeft@i+1)^0,c
  6388   00137A  0E2E               	movlw	46
  6389   00137C  6E29               	movwf	turnLeft@i^0,c
  6390   00137E                     l3856:
  6391                           
  6392                           ;dc_motor.c: 123:         (*mL).direction=1;
  6393   00137E  EE20 F001          	lfsr	2,1
  6394   001382  5021               	movf	turnLeft@mL^0,w,c
  6395   001384  26D9               	addwf	fsr2l,f,c
  6396   001386  5022               	movf	(turnLeft@mL+1)^0,w,c
  6397   001388  22DA               	addwfc	fsr2h,f,c
  6398   00138A  0E01               	movlw	1
  6399   00138C  6EDF               	movwf	indf2,c
  6400                           
  6401                           ;dc_motor.c: 124:         (*mR).direction=0;
  6402   00138E  EE20 F001          	lfsr	2,1
  6403   001392  5023               	movf	turnLeft@mR^0,w,c
  6404   001394  26D9               	addwf	fsr2l,f,c
  6405   001396  5024               	movf	(turnLeft@mR+1)^0,w,c
  6406   001398  22DA               	addwfc	fsr2h,f,c
  6407   00139A  0E00               	movlw	0
  6408   00139C  6EDF               	movwf	indf2,c
  6409   00139E                     
  6410                           ;dc_motor.c: 125:         (*mL).power=i;
  6411   00139E  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6412   0013A2  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6413   0013A6  C029  FFDF         	movff	turnLeft@i,indf2
  6414   0013AA                     
  6415                           ;dc_motor.c: 126:         (*mR).power=i;
  6416   0013AA  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6417   0013AE  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6418   0013B2  C029  FFDF         	movff	turnLeft@i,indf2
  6419   0013B6                     
  6420                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6421   0013B6  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6422   0013BA  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6423   0013BE  EC06  F008         	call	_setMotorPWM	;wreg free
  6424   0013C2                     
  6425                           ;dc_motor.c: 128:         setMotorPWM(mR);
  6426   0013C2  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6427   0013C6  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6428   0013CA  EC06  F008         	call	_setMotorPWM	;wreg free
  6429   0013CE                     
  6430                           ;dc_motor.c: 129:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6431   0013CE  0E05               	movlw	5
  6432   0013D0  6E26               	movwf	(??_turnLeft+1)^0,c
  6433   0013D2  0EA1               	movlw	161
  6434   0013D4  6E25               	movwf	??_turnLeft^0,c
  6435   0013D6  0E65               	movlw	101
  6436   0013D8                     u4467:
  6437   0013D8  2EE8               	decfsz	wreg,f,c
  6438   0013DA  D7FE               	bra	u4467
  6439   0013DC  2E25               	decfsz	??_turnLeft^0,f,c
  6440   0013DE  D7FC               	bra	u4467
  6441   0013E0  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6442   0013E2  D7FA               	bra	u4467
  6443   0013E4  F000               	nop	
  6444   0013E6                     
  6445                           ;dc_motor.c: 130:         }
  6446   0013E6  0EFB               	movlw	251
  6447   0013E8  2629               	addwf	turnLeft@i^0,f,c
  6448   0013EA  0EFF               	movlw	255
  6449   0013EC  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6450   0013EE  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6451   0013F0  EF05  F00A         	goto	u3090
  6452   0013F4  502A               	movf	(turnLeft@i+1)^0,w,c
  6453   0013F6  E107               	bnz	u3091
  6454   0013F8  0E20               	movlw	32
  6455   0013FA  5C29               	subwf	turnLeft@i^0,w,c
  6456   0013FC  B0D8               	btfsc	status,0,c
  6457   0013FE  EF03  F00A         	goto	u3091
  6458   001402  EF05  F00A         	goto	u3090
  6459   001406                     u3091:
  6460   001406  EFBF  F009         	goto	l3856
  6461   00140A                     u3090:
  6462   00140A                     
  6463                           ;dc_motor.c: 131:     }
  6464   00140A  4A27               	infsnz	turnLeft@k^0,f,c
  6465   00140C  2A28               	incf	(turnLeft@k+1)^0,f,c
  6466   00140E  BE28               	btfsc	(turnLeft@k+1)^0,7,c
  6467   001410  EF13  F00A         	goto	u3101
  6468   001414  5028               	movf	(turnLeft@k+1)^0,w,c
  6469   001416  E109               	bnz	u3100
  6470   001418  0E02               	movlw	2
  6471   00141A  5C27               	subwf	turnLeft@k^0,w,c
  6472   00141C  A0D8               	btfss	status,0,c
  6473   00141E  EF13  F00A         	goto	u3101
  6474   001422  EF15  F00A         	goto	u3100
  6475   001426                     u3101:
  6476   001426  EF71  F009         	goto	l3828
  6477   00142A                     u3100:
  6478   00142A  0012               	return		;funcret
  6479   00142C                     __end_of_turnLeft:
  6480                           	callstack 0
  6481                           
  6482 ;; *************** function _stop *****************
  6483 ;; Defined at:
  6484 ;;		line 97 in file "dc_motor.c"
  6485 ;; Parameters:    Size  Location     Type
  6486 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6487 ;;		 -> main@motorL(9), 
  6488 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6489 ;;		 -> main@motorR(9), 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6504 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6505 ;;Total ram usage:        6 bytes
  6506 ;; Hardware stack levels used: 1
  6507 ;; Hardware stack levels required when called: 7
  6508 ;; This function calls:
  6509 ;;		_setMotorPWM
  6510 ;; This function is called by:
  6511 ;;		_RobotMovement
  6512 ;;		_return_back
  6513 ;;		_main
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text34
  6518   00203A                     __ptext34:
  6519                           	callstack 0
  6520   00203A                     _stop:
  6521                           	callstack 23
  6522   00203A                     
  6523                           ;dc_motor.c: 97: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 98: {;d
      +                          c_motor.c: 99:     (*mL).power=0;
  6524   00203A  C021  FFD9         	movff	stop@mL,fsr2l
  6525   00203E  C022  FFDA         	movff	stop@mL+1,fsr2h
  6526   002042  0E00               	movlw	0
  6527   002044  6EDF               	movwf	indf2,c
  6528                           
  6529                           ;dc_motor.c: 100:     (*mR).power=0;
  6530   002046  C023  FFD9         	movff	stop@mR,fsr2l
  6531   00204A  C024  FFDA         	movff	stop@mR+1,fsr2h
  6532   00204E  0E00               	movlw	0
  6533   002050  6EDF               	movwf	indf2,c
  6534   002052                     
  6535                           ;dc_motor.c: 101:     setMotorPWM(mL);
  6536   002052  C021  F01B         	movff	stop@mL,setMotorPWM@m
  6537   002056  C022  F01C         	movff	stop@mL+1,setMotorPWM@m+1
  6538   00205A  EC06  F008         	call	_setMotorPWM	;wreg free
  6539   00205E                     
  6540                           ;dc_motor.c: 102:     setMotorPWM(mR);
  6541   00205E  C023  F01B         	movff	stop@mR,setMotorPWM@m
  6542   002062  C024  F01C         	movff	stop@mR+1,setMotorPWM@m+1
  6543   002066  EC06  F008         	call	_setMotorPWM	;wreg free
  6544   00206A                     
  6545                           ;dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6546   00206A  0E29               	movlw	41
  6547   00206C  6E26               	movwf	(??_stop+1)^0,c
  6548   00206E  0E96               	movlw	150
  6549   002070  6E25               	movwf	??_stop^0,c
  6550   002072  0E7F               	movlw	127
  6551   002074                     u4477:
  6552   002074  2EE8               	decfsz	wreg,f,c
  6553   002076  D7FE               	bra	u4477
  6554   002078  2E25               	decfsz	??_stop^0,f,c
  6555   00207A  D7FC               	bra	u4477
  6556   00207C  2E26               	decfsz	(??_stop+1)^0,f,c
  6557   00207E  D7FA               	bra	u4477
  6558   002080  F000               	nop	
  6559   002082  0012               	return		;funcret
  6560   002084                     __end_of_stop:
  6561                           	callstack 0
  6562                           
  6563 ;; *************** function _moveBack *****************
  6564 ;; Defined at:
  6565 ;;		line 242 in file "dc_motor.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6568 ;;		 -> main@motorL(9), 
  6569 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6570 ;;		 -> main@motorR(9), 
  6571 ;;  time            2   36[COMRAM] unsigned int 
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      void 
  6576 ;; Registers used:
  6577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6583 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6587 ;;Total ram usage:        6 bytes
  6588 ;; Hardware stack levels used: 1
  6589 ;; Hardware stack levels required when called: 7
  6590 ;; This function calls:
  6591 ;;		_setMotorPWM
  6592 ;; This function is called by:
  6593 ;;		_RobotMovement
  6594 ;;		_return_back
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text35
  6599   001BB4                     __ptext35:
  6600                           	callstack 0
  6601   001BB4                     _moveBack:
  6602                           	callstack 22
  6603   001BB4                     
  6604                           ;dc_motor.c: 242: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 243: {;dc_motor.c: 244:     seconds = 0;
  6605   001BB4  0E00               	movlw	0
  6606   001BB6  6E4A               	movwf	(_seconds+1)^0,c
  6607   001BB8  0E00               	movlw	0
  6608   001BBA  6E49               	movwf	_seconds^0,c
  6609                           
  6610                           ;dc_motor.c: 245:     while (seconds<time)
  6611   001BBC  EF08  F00E         	goto	l4064
  6612   001BC0                     l4054:
  6613                           
  6614                           ;dc_motor.c: 246:     {;dc_motor.c: 247:         (*mL).direction=1;
  6615   001BC0  EE20 F001          	lfsr	2,1
  6616   001BC4  5021               	movf	moveBack@mL^0,w,c
  6617   001BC6  26D9               	addwf	fsr2l,f,c
  6618   001BC8  5022               	movf	(moveBack@mL+1)^0,w,c
  6619   001BCA  22DA               	addwfc	fsr2h,f,c
  6620   001BCC  0E01               	movlw	1
  6621   001BCE  6EDF               	movwf	indf2,c
  6622                           
  6623                           ;dc_motor.c: 248:         (*mR).direction=1;
  6624   001BD0  EE20 F001          	lfsr	2,1
  6625   001BD4  5023               	movf	moveBack@mR^0,w,c
  6626   001BD6  26D9               	addwf	fsr2l,f,c
  6627   001BD8  5024               	movf	(moveBack@mR+1)^0,w,c
  6628   001BDA  22DA               	addwfc	fsr2h,f,c
  6629   001BDC  0E01               	movlw	1
  6630   001BDE  6EDF               	movwf	indf2,c
  6631   001BE0                     
  6632                           ;dc_motor.c: 249:         (*mL).power=70;
  6633   001BE0  C021  FFD9         	movff	moveBack@mL,fsr2l
  6634   001BE4  C022  FFDA         	movff	moveBack@mL+1,fsr2h
  6635   001BE8  0E46               	movlw	70
  6636   001BEA  6EDF               	movwf	indf2,c
  6637   001BEC                     
  6638                           ;dc_motor.c: 250:         (*mR).power=68;
  6639   001BEC  C023  FFD9         	movff	moveBack@mR,fsr2l
  6640   001BF0  C024  FFDA         	movff	moveBack@mR+1,fsr2h
  6641   001BF4  0E44               	movlw	68
  6642   001BF6  6EDF               	movwf	indf2,c
  6643   001BF8                     
  6644                           ;dc_motor.c: 251:         setMotorPWM(mL);
  6645   001BF8  C021  F01B         	movff	moveBack@mL,setMotorPWM@m
  6646   001BFC  C022  F01C         	movff	moveBack@mL+1,setMotorPWM@m+1
  6647   001C00  EC06  F008         	call	_setMotorPWM	;wreg free
  6648   001C04                     
  6649                           ;dc_motor.c: 252:         setMotorPWM(mR);
  6650   001C04  C023  F01B         	movff	moveBack@mR,setMotorPWM@m
  6651   001C08  C024  F01C         	movff	moveBack@mR+1,setMotorPWM@m+1
  6652   001C0C  EC06  F008         	call	_setMotorPWM	;wreg free
  6653   001C10                     l4064:
  6654                           
  6655                           ;dc_motor.c: 245:     while (seconds<time)
  6656   001C10  5025               	movf	moveBack@time^0,w,c
  6657   001C12  5C49               	subwf	_seconds^0,w,c
  6658   001C14  5026               	movf	(moveBack@time+1)^0,w,c
  6659   001C16  584A               	subwfb	(_seconds+1)^0,w,c
  6660   001C18  A0D8               	btfss	status,0,c
  6661   001C1A  EF11  F00E         	goto	u3211
  6662   001C1E  EF13  F00E         	goto	u3210
  6663   001C22                     u3211:
  6664   001C22  EFE0  F00D         	goto	l4054
  6665   001C26                     u3210:
  6666   001C26  0012               	return		;funcret
  6667   001C28                     __end_of_moveBack:
  6668                           	callstack 0
  6669                           
  6670 ;; *************** function _TimedfullSpeedAhead *****************
  6671 ;; Defined at:
  6672 ;;		line 226 in file "dc_motor.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6675 ;;		 -> main@motorL(9), 
  6676 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6677 ;;		 -> main@motorR(9), 
  6678 ;;  time            2   36[COMRAM] unsigned int 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6690 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6693 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6694 ;;Total ram usage:        6 bytes
  6695 ;; Hardware stack levels used: 1
  6696 ;; Hardware stack levels required when called: 7
  6697 ;; This function calls:
  6698 ;;		_setMotorPWM
  6699 ;; This function is called by:
  6700 ;;		_RobotMovement
  6701 ;;		_return_back
  6702 ;;		_main
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text36
  6707   001C28                     __ptext36:
  6708                           	callstack 0
  6709   001C28                     _TimedfullSpeedAhead:
  6710                           	callstack 22
  6711   001C28                     
  6712                           ;dc_motor.c: 226: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 227: {;dc_motor.c: 228:     seconds = 0;
  6713   001C28  0E00               	movlw	0
  6714   001C2A  6E4A               	movwf	(_seconds+1)^0,c
  6715   001C2C  0E00               	movlw	0
  6716   001C2E  6E49               	movwf	_seconds^0,c
  6717                           
  6718                           ;dc_motor.c: 229:     while (seconds<time)
  6719   001C30  EF42  F00E         	goto	l4050
  6720   001C34                     l4040:
  6721                           
  6722                           ;dc_motor.c: 230:     {;dc_motor.c: 232:         (*mL).direction=0;
  6723   001C34  EE20 F001          	lfsr	2,1
  6724   001C38  5021               	movf	TimedfullSpeedAhead@mL^0,w,c
  6725   001C3A  26D9               	addwf	fsr2l,f,c
  6726   001C3C  5022               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6727   001C3E  22DA               	addwfc	fsr2h,f,c
  6728   001C40  0E00               	movlw	0
  6729   001C42  6EDF               	movwf	indf2,c
  6730                           
  6731                           ;dc_motor.c: 233:         (*mR).direction=0;
  6732   001C44  EE20 F001          	lfsr	2,1
  6733   001C48  5023               	movf	TimedfullSpeedAhead@mR^0,w,c
  6734   001C4A  26D9               	addwf	fsr2l,f,c
  6735   001C4C  5024               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6736   001C4E  22DA               	addwfc	fsr2h,f,c
  6737   001C50  0E00               	movlw	0
  6738   001C52  6EDF               	movwf	indf2,c
  6739   001C54                     
  6740                           ;dc_motor.c: 234:         (*mL).power=68;
  6741   001C54  C021  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6742   001C58  C022  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6743   001C5C  0E44               	movlw	68
  6744   001C5E  6EDF               	movwf	indf2,c
  6745   001C60                     
  6746                           ;dc_motor.c: 235:         (*mR).power=68;
  6747   001C60  C023  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6748   001C64  C024  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6749   001C68  0E44               	movlw	68
  6750   001C6A  6EDF               	movwf	indf2,c
  6751   001C6C                     
  6752                           ;dc_motor.c: 236:         setMotorPWM(mL);
  6753   001C6C  C021  F01B         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6754   001C70  C022  F01C         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6755   001C74  EC06  F008         	call	_setMotorPWM	;wreg free
  6756   001C78                     
  6757                           ;dc_motor.c: 237:         setMotorPWM(mR);
  6758   001C78  C023  F01B         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6759   001C7C  C024  F01C         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6760   001C80  EC06  F008         	call	_setMotorPWM	;wreg free
  6761   001C84                     l4050:
  6762                           
  6763                           ;dc_motor.c: 229:     while (seconds<time)
  6764   001C84  5025               	movf	TimedfullSpeedAhead@time^0,w,c
  6765   001C86  5C49               	subwf	_seconds^0,w,c
  6766   001C88  5026               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6767   001C8A  584A               	subwfb	(_seconds+1)^0,w,c
  6768   001C8C  A0D8               	btfss	status,0,c
  6769   001C8E  EF4B  F00E         	goto	u3201
  6770   001C92  EF4D  F00E         	goto	u3200
  6771   001C96                     u3201:
  6772   001C96  EF1A  F00E         	goto	l4040
  6773   001C9A                     u3200:
  6774   001C9A  0012               	return		;funcret
  6775   001C9C                     __end_of_TimedfullSpeedAhead:
  6776                           	callstack 0
  6777                           
  6778 ;; *************** function _setMotorPWM *****************
  6779 ;; Defined at:
  6780 ;;		line 74 in file "dc_motor.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  m               2   26[COMRAM] PTR struct DC_motor
  6783 ;;		 -> main@motorR(9), main@motorL(9), 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  negDuty         1   31[COMRAM] unsigned char 
  6786 ;;  posDuty         1   30[COMRAM] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;                  1    wreg      void 
  6789 ;; Registers used:
  6790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : 0/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6797 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6799 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6800 ;;Total ram usage:        6 bytes
  6801 ;; Hardware stack levels used: 1
  6802 ;; Hardware stack levels required when called: 6
  6803 ;; This function calls:
  6804 ;;		___lwdiv
  6805 ;;		___wmul
  6806 ;; This function is called by:
  6807 ;;		_stop
  6808 ;;		_turnLeft
  6809 ;;		_turnRight
  6810 ;;		_turnLeftLong
  6811 ;;		_turnRightLong
  6812 ;;		_fullSpeedAhead
  6813 ;;		_TimedfullSpeedAhead
  6814 ;;		_moveBack
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text37
  6819   00100C                     __ptext37:
  6820                           	callstack 0
  6821   00100C                     _setMotorPWM:
  6822                           	callstack 23
  6823   00100C                     
  6824                           ;dc_motor.c: 74: void setMotorPWM(DC_motor *m);dc_motor.c: 75: {;dc_motor.c: 76:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 78:     if(m->brakemode) {
  6825   00100C  EE20 F002          	lfsr	2,2
  6826   001010  501B               	movf	setMotorPWM@m^0,w,c
  6827   001012  26D9               	addwf	fsr2l,f,c
  6828   001014  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6829   001016  22DA               	addwfc	fsr2h,f,c
  6830   001018  50DF               	movf	indf2,w,c
  6831   00101A  B4D8               	btfsc	status,2,c
  6832   00101C  EF12  F008         	goto	u3031
  6833   001020  EF14  F008         	goto	u3030
  6834   001024                     u3031:
  6835   001024  EF48  F008         	goto	l3718
  6836   001028                     u3030:
  6837   001028                     
  6838                           ;dc_motor.c: 79:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6839   001028  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6840   00102C  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6841   001030  50DF               	movf	indf2,w,c
  6842   001032  6E1D               	movwf	??_setMotorPWM^0,c
  6843   001034  501D               	movf	??_setMotorPWM^0,w,c
  6844   001036  6E0E               	movwf	___wmul@multiplier^0,c
  6845   001038  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6846   00103A  EE20 F003          	lfsr	2,3
  6847   00103E  501B               	movf	setMotorPWM@m^0,w,c
  6848   001040  26D9               	addwf	fsr2l,f,c
  6849   001042  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6850   001044  22DA               	addwfc	fsr2h,f,c
  6851   001046  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6852   00104A  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6853   00104E  EC65  F011         	call	___wmul	;wreg free
  6854   001052  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6855   001056  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6856   00105A  0E00               	movlw	0
  6857   00105C  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6858   00105E  0E64               	movlw	100
  6859   001060  6E16               	movwf	___lwdiv@divisor^0,c
  6860   001062  EC4E  F00E         	call	___lwdiv	;wreg free
  6861   001066  EE20 F003          	lfsr	2,3
  6862   00106A  501B               	movf	setMotorPWM@m^0,w,c
  6863   00106C  26D9               	addwf	fsr2l,f,c
  6864   00106E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6865   001070  22DA               	addwfc	fsr2h,f,c
  6866   001072  50DF               	movf	indf2,w,c
  6867   001074  6E1E               	movwf	(??_setMotorPWM+1)^0,c
  6868   001076  5014               	movf	?___lwdiv^0,w,c
  6869   001078  5C1E               	subwf	(??_setMotorPWM+1)^0,w,c
  6870   00107A  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6871   00107C                     
  6872                           ;dc_motor.c: 80:         negDuty=m->PWMperiod;
  6873   00107C  EE20 F003          	lfsr	2,3
  6874   001080  501B               	movf	setMotorPWM@m^0,w,c
  6875   001082  26D9               	addwf	fsr2l,f,c
  6876   001084  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6877   001086  22DA               	addwfc	fsr2h,f,c
  6878   001088  50DF               	movf	indf2,w,c
  6879   00108A  6E20               	movwf	setMotorPWM@negDuty^0,c
  6880                           
  6881                           ;dc_motor.c: 81:     }
  6882   00108C  EF6B  F008         	goto	l3722
  6883   001090                     l3718:
  6884                           
  6885                           ;dc_motor.c: 83:         posDuty=0;
  6886   001090  0E00               	movlw	0
  6887   001092  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6888   001094                     
  6889                           ;dc_motor.c: 84:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6890   001094  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6891   001098  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6892   00109C  50DF               	movf	indf2,w,c
  6893   00109E  6E1D               	movwf	??_setMotorPWM^0,c
  6894   0010A0  501D               	movf	??_setMotorPWM^0,w,c
  6895   0010A2  6E0E               	movwf	___wmul@multiplier^0,c
  6896   0010A4  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6897   0010A6  EE20 F003          	lfsr	2,3
  6898   0010AA  501B               	movf	setMotorPWM@m^0,w,c
  6899   0010AC  26D9               	addwf	fsr2l,f,c
  6900   0010AE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6901   0010B0  22DA               	addwfc	fsr2h,f,c
  6902   0010B2  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6903   0010B6  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6904   0010BA  EC65  F011         	call	___wmul	;wreg free
  6905   0010BE  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6906   0010C2  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6907   0010C6  0E00               	movlw	0
  6908   0010C8  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6909   0010CA  0E64               	movlw	100
  6910   0010CC  6E16               	movwf	___lwdiv@divisor^0,c
  6911   0010CE  EC4E  F00E         	call	___lwdiv	;wreg free
  6912   0010D2  5014               	movf	?___lwdiv^0,w,c
  6913   0010D4  6E20               	movwf	setMotorPWM@negDuty^0,c
  6914   0010D6                     l3722:
  6915                           
  6916                           ;dc_motor.c: 87:     if (m->direction) {
  6917   0010D6  EE20 F001          	lfsr	2,1
  6918   0010DA  501B               	movf	setMotorPWM@m^0,w,c
  6919   0010DC  26D9               	addwf	fsr2l,f,c
  6920   0010DE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6921   0010E0  22DA               	addwfc	fsr2h,f,c
  6922   0010E2  50DF               	movf	indf2,w,c
  6923   0010E4  B4D8               	btfsc	status,2,c
  6924   0010E6  EF77  F008         	goto	u3041
  6925   0010EA  EF79  F008         	goto	u3040
  6926   0010EE                     u3041:
  6927   0010EE  EF9B  F008         	goto	l3726
  6928   0010F2                     u3040:
  6929   0010F2                     
  6930                           ;dc_motor.c: 88:         *(m->posDutyHighByte)=posDuty;
  6931   0010F2  EE20 F005          	lfsr	2,5
  6932   0010F6  501B               	movf	setMotorPWM@m^0,w,c
  6933   0010F8  26D9               	addwf	fsr2l,f,c
  6934   0010FA  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6935   0010FC  22DA               	addwfc	fsr2h,f,c
  6936   0010FE  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6937   001102  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6938   001106  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6939   00110A  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6940   00110E  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6941                           
  6942                           ;dc_motor.c: 89:         *(m->negDutyHighByte)=negDuty;
  6943   001112  EE20 F007          	lfsr	2,7
  6944   001116  501B               	movf	setMotorPWM@m^0,w,c
  6945   001118  26D9               	addwf	fsr2l,f,c
  6946   00111A  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6947   00111C  22DA               	addwfc	fsr2h,f,c
  6948   00111E  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6949   001122  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6950   001126  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6951   00112A  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6952   00112E  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6953                           
  6954                           ;dc_motor.c: 90:     } else {
  6955   001132  EFBB  F008         	goto	l240
  6956   001136                     l3726:
  6957                           
  6958                           ;dc_motor.c: 91:         *(m->posDutyHighByte)=negDuty;
  6959   001136  EE20 F005          	lfsr	2,5
  6960   00113A  501B               	movf	setMotorPWM@m^0,w,c
  6961   00113C  26D9               	addwf	fsr2l,f,c
  6962   00113E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6963   001140  22DA               	addwfc	fsr2h,f,c
  6964   001142  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6965   001146  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6966   00114A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6967   00114E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6968   001152  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6969                           
  6970                           ;dc_motor.c: 92:         *(m->negDutyHighByte)=posDuty;
  6971   001156  EE20 F007          	lfsr	2,7
  6972   00115A  501B               	movf	setMotorPWM@m^0,w,c
  6973   00115C  26D9               	addwf	fsr2l,f,c
  6974   00115E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6975   001160  22DA               	addwfc	fsr2h,f,c
  6976   001162  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6977   001166  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6978   00116A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6979   00116E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6980   001172  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6981   001176                     l240:
  6982   001176  0012               	return		;funcret
  6983   001178                     __end_of_setMotorPWM:
  6984                           	callstack 0
  6985                           
  6986 ;; *************** function ___wmul *****************
  6987 ;; Defined at:
  6988 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  multiplier      2   13[COMRAM] unsigned int 
  6991 ;;  multiplicand    2   15[COMRAM] unsigned int 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  product         2   17[COMRAM] unsigned int 
  6994 ;; Return value:  Size  Location     Type
  6995 ;;                  2   13[COMRAM] unsigned int 
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, status,0, prodl, prodh
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7003 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7004 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7006 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;Total ram usage:        6 bytes
  7008 ;; Hardware stack levels used: 1
  7009 ;; Hardware stack levels required when called: 5
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_get_color_distance
  7014 ;;		_get_color_code
  7015 ;;		_get_wall_detection
  7016 ;;		_setMotorPWM
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	text38
  7021   0022CA                     __ptext38:
  7022                           	callstack 0
  7023   0022CA                     ___wmul:
  7024                           	callstack 23
  7025   0022CA  500E               	movf	___wmul@multiplier^0,w,c
  7026   0022CC  0210               	mulwf	___wmul@multiplicand^0,c
  7027   0022CE  CFF3 F012          	movff	prodl,___wmul@product
  7028   0022D2  CFF4 F013          	movff	prodh,___wmul@product+1
  7029   0022D6  500E               	movf	___wmul@multiplier^0,w,c
  7030   0022D8  0211               	mulwf	(___wmul@multiplicand+1)^0,c
  7031   0022DA  50F3               	movf	243,w,c
  7032   0022DC  2613               	addwf	(___wmul@product+1)^0,f,c
  7033   0022DE  500F               	movf	(___wmul@multiplier+1)^0,w,c
  7034   0022E0  0210               	mulwf	___wmul@multiplicand^0,c
  7035   0022E2  50F3               	movf	243,w,c
  7036   0022E4  2613               	addwf	(___wmul@product+1)^0,f,c
  7037   0022E6  C012  F00E         	movff	___wmul@product,?___wmul
  7038   0022EA  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  7039   0022EE  0012               	return		;funcret
  7040   0022F0                     __end_of___wmul:
  7041                           	callstack 0
  7042                           
  7043 ;; *************** function ___lwdiv *****************
  7044 ;; Defined at:
  7045 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  dividend        2   19[COMRAM] unsigned int 
  7048 ;;  divisor         2   21[COMRAM] unsigned int 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;  quotient        2   24[COMRAM] unsigned int 
  7051 ;;  counter         1   23[COMRAM] unsigned char 
  7052 ;; Return value:  Size  Location     Type
  7053 ;;                  2   19[COMRAM] unsigned int 
  7054 ;; Registers used:
  7055 ;;		wreg, status,2, status,0
  7056 ;; Tracked objects:
  7057 ;;		On entry : 0/0
  7058 ;;		On exit  : 0/0
  7059 ;;		Unchanged: 0/0
  7060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7061 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7062 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7064 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7065 ;;Total ram usage:        7 bytes
  7066 ;; Hardware stack levels used: 1
  7067 ;; Hardware stack levels required when called: 5
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_calibrate_black
  7072 ;;		_setMotorPWM
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text39
  7077   001C9C                     __ptext39:
  7078                           	callstack 0
  7079   001C9C                     ___lwdiv:
  7080                           	callstack 23
  7081   001C9C  0E00               	movlw	0
  7082   001C9E  6E1A               	movwf	(___lwdiv@quotient+1)^0,c
  7083   001CA0  0E00               	movlw	0
  7084   001CA2  6E19               	movwf	___lwdiv@quotient^0,c
  7085   001CA4  5016               	movf	___lwdiv@divisor^0,w,c
  7086   001CA6  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7087   001CA8  B4D8               	btfsc	status,2,c
  7088   001CAA  EF59  F00E         	goto	u2971
  7089   001CAE  EF5B  F00E         	goto	u2970
  7090   001CB2                     u2971:
  7091   001CB2  EF83  F00E         	goto	l996
  7092   001CB6                     u2970:
  7093   001CB6  0E01               	movlw	1
  7094   001CB8  6E18               	movwf	___lwdiv@counter^0,c
  7095   001CBA  EF63  F00E         	goto	l3666
  7096   001CBE                     l3664:
  7097   001CBE  90D8               	bcf	status,0,c
  7098   001CC0  3616               	rlcf	___lwdiv@divisor^0,f,c
  7099   001CC2  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7100   001CC4  2A18               	incf	___lwdiv@counter^0,f,c
  7101   001CC6                     l3666:
  7102   001CC6  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
  7103   001CC8  EF68  F00E         	goto	u2981
  7104   001CCC  EF6A  F00E         	goto	u2980
  7105   001CD0                     u2981:
  7106   001CD0  EF5F  F00E         	goto	l3664
  7107   001CD4                     u2980:
  7108   001CD4                     l3668:
  7109   001CD4  90D8               	bcf	status,0,c
  7110   001CD6  3619               	rlcf	___lwdiv@quotient^0,f,c
  7111   001CD8  361A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7112   001CDA  5016               	movf	___lwdiv@divisor^0,w,c
  7113   001CDC  5C14               	subwf	___lwdiv@dividend^0,w,c
  7114   001CDE  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7115   001CE0  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7116   001CE2  A0D8               	btfss	status,0,c
  7117   001CE4  EF76  F00E         	goto	u2991
  7118   001CE8  EF78  F00E         	goto	u2990
  7119   001CEC                     u2991:
  7120   001CEC  EF7D  F00E         	goto	l3676
  7121   001CF0                     u2990:
  7122   001CF0  5016               	movf	___lwdiv@divisor^0,w,c
  7123   001CF2  5E14               	subwf	___lwdiv@dividend^0,f,c
  7124   001CF4  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7125   001CF6  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7126   001CF8  8019               	bsf	___lwdiv@quotient^0,0,c
  7127   001CFA                     l3676:
  7128   001CFA  90D8               	bcf	status,0,c
  7129   001CFC  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7130   001CFE  3216               	rrcf	___lwdiv@divisor^0,f,c
  7131   001D00  2E18               	decfsz	___lwdiv@counter^0,f,c
  7132   001D02  EF6A  F00E         	goto	l3668
  7133   001D06                     l996:
  7134   001D06  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  7135   001D0A  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7136   001D0E  0012               	return		;funcret
  7137   001D10                     __end_of___lwdiv:
  7138                           	callstack 0
  7139                           
  7140 ;; *************** function _Interrupts_init *****************
  7141 ;; Defined at:
  7142 ;;		line 11 in file "interrupts.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;		None
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		None
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7160 ;;Total ram usage:        0 bytes
  7161 ;; Hardware stack levels used: 1
  7162 ;; Hardware stack levels required when called: 5
  7163 ;; This function calls:
  7164 ;;		Nothing
  7165 ;; This function is called by:
  7166 ;;		_main
  7167 ;; This function uses a non-reentrant model
  7168 ;;
  7169                           
  7170                           	psect	text40
  7171   002362                     __ptext40:
  7172                           	callstack 0
  7173   002362                     _Interrupts_init:
  7174                           	callstack 25
  7175   002362                     
  7176                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  7177   002362  8CF2               	bsf	242,6,c	;volatile
  7178                           
  7179                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  7180   002364  010E               	movlb	14	; () banked
  7181   002366  8B29               	bsf	41,5,b	;volatile
  7182                           
  7183                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  7184   002368  812B               	bsf	43,0,b	;volatile
  7185                           
  7186                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  7187   00236A  8EF2               	bsf	242,7,c	;volatile
  7188   00236C                     
  7189                           ; BSR set to: 14
  7190   00236C  0012               	return		;funcret
  7191   00236E                     __end_of_Interrupts_init:
  7192                           	callstack 0
  7193                           
  7194 ;; *************** function _HighISR *****************
  7195 ;; Defined at:
  7196 ;;		line 25 in file "interrupts.c"
  7197 ;; Parameters:    Size  Location     Type
  7198 ;;		None
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  1    wreg      void 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;Total ram usage:        0 bytes
  7215 ;; Hardware stack levels used: 1
  7216 ;; Hardware stack levels required when called: 4
  7217 ;; This function calls:
  7218 ;;		_increment_seconds
  7219 ;;		_set_wall_detection
  7220 ;; This function is called by:
  7221 ;;		Interrupt level 2
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	intcode
  7226   000008                     __pintcode:
  7227                           	callstack 0
  7228   000008                     _HighISR:
  7229                           	callstack 21
  7230                           
  7231                           ; BSR set to: 14
  7232                           ;incstack = 0
  7233   000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7234   00000A                     
  7235                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  7236   00000A  010E               	movlb	14	; () banked
  7237   00000C  AB33               	btfss	51,5,b	;volatile
  7238   00000E  EF0B  F000         	goto	i2u249_41
  7239   000012  EF0D  F000         	goto	i2u249_40
  7240   000016                     i2u249_41:
  7241   000016  EF4F  F000         	goto	i2l437
  7242   00001A                     i2u249_40:
  7243   00001A                     
  7244                           ; BSR set to: 14
  7245                           ;interrupts.c: 28:         incr_sec_counter += 1;
  7246   00001A  0100               	movlb	0	; () banked
  7247   00001C  4BF2               	infsnz	_incr_sec_counter& (0+255),f,b
  7248   00001E  2BF3               	incf	(_incr_sec_counter+1)& (0+255),f,b
  7249                           
  7250                           ;interrupts.c: 29:         wall_detection_counter += 1;
  7251   000020  4A45               	infsnz	_wall_detection_counter^0,f,c
  7252   000022  2A46               	incf	(_wall_detection_counter+1)^0,f,c
  7253   000024                     
  7254                           ; BSR set to: 0
  7255                           ;interrupts.c: 31:         if(incr_sec_counter == 10){
  7256   000024  0E0A               	movlw	10
  7257   000026  19F2               	xorwf	_incr_sec_counter& (0+255),w,b
  7258   000028  11F3               	iorwf	(_incr_sec_counter+1)& (0+255),w,b
  7259   00002A  A4D8               	btfss	status,2,c
  7260   00002C  EF1A  F000         	goto	i2u250_41
  7261   000030  EF1C  F000         	goto	i2u250_40
  7262   000034                     i2u250_41:
  7263   000034  EF23  F000         	goto	i2l3308
  7264   000038                     i2u250_40:
  7265   000038                     
  7266                           ; BSR set to: 0
  7267                           ;interrupts.c: 32:             increment_seconds();
  7268   000038  ECE0  F011         	call	_increment_seconds	;wreg free
  7269   00003C                     
  7270                           ;interrupts.c: 33:             incr_sec_counter = 0;
  7271   00003C  0E00               	movlw	0
  7272   00003E  0100               	movlb	0	; () banked
  7273   000040  6FF3               	movwf	(_incr_sec_counter+1)& (0+255),b
  7274   000042  0E00               	movlw	0
  7275   000044  6FF2               	movwf	_incr_sec_counter& (0+255),b
  7276   000046                     i2l3308:
  7277                           
  7278                           ; BSR set to: 0
  7279                           ;interrupts.c: 36:         if(wall_detection_counter == 22){
  7280   000046  0E16               	movlw	22
  7281   000048  1845               	xorwf	_wall_detection_counter^0,w,c
  7282   00004A  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7283   00004C  A4D8               	btfss	status,2,c
  7284   00004E  EF2B  F000         	goto	i2u251_41
  7285   000052  EF2D  F000         	goto	i2u251_40
  7286   000056                     i2u251_41:
  7287   000056  EF35  F000         	goto	i2l3312
  7288   00005A                     i2u251_40:
  7289   00005A                     
  7290                           ; BSR set to: 0
  7291                           ;interrupts.c: 37:             set_wall_detection(0);
  7292   00005A  0E00               	movlw	0
  7293   00005C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7294   00005E  0E00               	movlw	0
  7295   000060  6E0C               	movwf	set_wall_detection@mode^0,c
  7296   000062  EC88  F00E         	call	_set_wall_detection	;wreg free
  7297                           
  7298                           ;interrupts.c: 38:         }
  7299   000066  EF49  F000         	goto	i2l3318
  7300   00006A                     i2l3312:
  7301                           
  7302                           ; BSR set to: 0
  7303   00006A  0E2C               	movlw	44
  7304   00006C  1845               	xorwf	_wall_detection_counter^0,w,c
  7305   00006E  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7306   000070  A4D8               	btfss	status,2,c
  7307   000072  EF3D  F000         	goto	i2u252_41
  7308   000076  EF3F  F000         	goto	i2u252_40
  7309   00007A                     i2u252_41:
  7310   00007A  EF49  F000         	goto	i2l3318
  7311   00007E                     i2u252_40:
  7312   00007E                     
  7313                           ; BSR set to: 0
  7314                           ;interrupts.c: 40:             set_wall_detection(1);
  7315   00007E  0E00               	movlw	0
  7316   000080  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7317   000082  0E01               	movlw	1
  7318   000084  6E0C               	movwf	set_wall_detection@mode^0,c
  7319   000086  EC88  F00E         	call	_set_wall_detection	;wreg free
  7320   00008A                     
  7321                           ;interrupts.c: 41:             wall_detection_counter = 0;
  7322   00008A  0E00               	movlw	0
  7323   00008C  6E46               	movwf	(_wall_detection_counter+1)^0,c
  7324   00008E  0E00               	movlw	0
  7325   000090  6E45               	movwf	_wall_detection_counter^0,c
  7326   000092                     i2l3318:
  7327                           
  7328                           ;interrupts.c: 44:         TMR0H=0b11111101;
  7329   000092  0EFD               	movlw	253
  7330   000094  6ED4               	movwf	212,c	;volatile
  7331   000096                     
  7332                           ;interrupts.c: 45:         TMR0L=0b10010000;
  7333   000096  0E90               	movlw	144
  7334   000098  6ED3               	movwf	211,c	;volatile
  7335   00009A                     
  7336                           ;interrupts.c: 47:         PIR0bits.TMR0IF = 0;
  7337   00009A  010E               	movlb	14	; () banked
  7338   00009C  9B33               	bcf	51,5,b	;volatile
  7339   00009E                     i2l437:
  7340                           
  7341                           ; BSR set to: 14
  7342   00009E  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7343   0000A0  0011               	retfie		f
  7344   0000A2                     __end_of_HighISR:
  7345                           	callstack 0
  7346                           
  7347 ;; *************** function _set_wall_detection *****************
  7348 ;; Defined at:
  7349 ;;		line 254 in file "color.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  mode            2   11[COMRAM] unsigned int 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7363 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7366 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used: 1
  7369 ;; Hardware stack levels required when called: 3
  7370 ;; This function calls:
  7371 ;;		i2_color_read_Clear
  7372 ;;		i2_set_led_color
  7373 ;; This function is called by:
  7374 ;;		_HighISR
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text42
  7379   001D10                     __ptext42:
  7380                           	callstack 0
  7381   001D10                     _set_wall_detection:
  7382                           	callstack 21
  7383   001D10                     
  7384                           ;color.c: 256:     if(wall_detection_mode == 0){
  7385   001D10  0100               	movlb	0	; () banked
  7386   001D12  51F6               	movf	_wall_detection_mode& (0+255),w,b
  7387   001D14  11F7               	iorwf	(_wall_detection_mode+1)& (0+255),w,b
  7388   001D16  A4D8               	btfss	status,2,c
  7389   001D18  EF90  F00E         	goto	i2u216_41
  7390   001D1C  EF92  F00E         	goto	i2u216_40
  7391   001D20                     i2u216_41:
  7392   001D20  EF94  F00E         	goto	i2l3060
  7393   001D24                     i2u216_40:
  7394   001D24  EFC0  F00E         	goto	i2l163
  7395   001D28                     i2l3060:
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;color.c: 259:     if(mode == 0){
  7399   001D28  500C               	movf	set_wall_detection@mode^0,w,c
  7400   001D2A  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7401   001D2C  A4D8               	btfss	status,2,c
  7402   001D2E  EF9B  F00E         	goto	i2u217_41
  7403   001D32  EF9D  F00E         	goto	i2u217_40
  7404   001D36                     i2u217_41:
  7405   001D36  EFAB  F00E         	goto	i2l3066
  7406   001D3A                     i2u217_40:
  7407   001D3A                     
  7408                           ; BSR set to: 0
  7409                           ;color.c: 260:         clear1 = color_read_Clear();
  7410   001D3A  ECF5  F00F         	call	i2_color_read_Clear	;wreg free
  7411   001D3E  C005  F04D         	movff	?i2_color_read_Clear,_clear1
  7412   001D42  C006  F04E         	movff	?i2_color_read_Clear+1,_clear1+1
  7413   001D46                     
  7414                           ;color.c: 261:         set_led_color(0b111);
  7415   001D46  0E00               	movlw	0
  7416   001D48  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7417   001D4A  0E07               	movlw	7
  7418   001D4C  6E01               	movwf	i2set_led_color@color^0,c
  7419   001D4E  ECAC  F010         	call	i2_set_led_color	;wreg free
  7420                           
  7421                           ;color.c: 262:     }else if(mode == 1){
  7422   001D52  EFC0  F00E         	goto	i2l163
  7423   001D56                     i2l3066:
  7424                           
  7425                           ; BSR set to: 0
  7426   001D56  040C               	decf	set_wall_detection@mode^0,w,c
  7427   001D58  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7428   001D5A  A4D8               	btfss	status,2,c
  7429   001D5C  EFB2  F00E         	goto	i2u218_41
  7430   001D60  EFB4  F00E         	goto	i2u218_40
  7431   001D64                     i2u218_41:
  7432   001D64  EFC0  F00E         	goto	i2l163
  7433   001D68                     i2u218_40:
  7434   001D68                     
  7435                           ; BSR set to: 0
  7436                           ;color.c: 263:         clear2 = color_read_Clear();
  7437   001D68  ECF5  F00F         	call	i2_color_read_Clear	;wreg free
  7438   001D6C  C005  F04B         	movff	?i2_color_read_Clear,_clear2
  7439   001D70  C006  F04C         	movff	?i2_color_read_Clear+1,_clear2+1
  7440   001D74                     
  7441                           ;color.c: 264:         set_led_color(0b000);
  7442   001D74  0E00               	movlw	0
  7443   001D76  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7444   001D78  0E00               	movlw	0
  7445   001D7A  6E01               	movwf	i2set_led_color@color^0,c
  7446   001D7C  ECAC  F010         	call	i2_set_led_color	;wreg free
  7447   001D80                     i2l163:
  7448   001D80  0012               	return		;funcret
  7449   001D82                     __end_of_set_wall_detection:
  7450                           	callstack 0
  7451                           
  7452 ;; *************** function i2_set_led_color *****************
  7453 ;; Defined at:
  7454 ;;		line 157 in file "color.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  color           2    0[COMRAM] unsigned int 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;		None
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      void 
  7461 ;; Registers used:
  7462 ;;		None
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7468 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7472 ;;Total ram usage:        2 bytes
  7473 ;; Hardware stack levels used: 1
  7474 ;; This function calls:
  7475 ;;		Nothing
  7476 ;; This function is called by:
  7477 ;;		_set_wall_detection
  7478 ;; This function uses a non-reentrant model
  7479 ;;
  7480                           
  7481                           	psect	text43
  7482   002158                     __ptext43:
  7483                           	callstack 0
  7484   002158                     i2_set_led_color:
  7485                           	callstack 23
  7486   002158                     
  7487                           ;color.c: 161:     if(color & 0b100){
  7488   002158  A401               	btfss	i2set_led_color@color^0,2,c
  7489   00215A  EFB1  F010         	goto	i2u185_41
  7490   00215E  EFB3  F010         	goto	i2u185_40
  7491   002162                     i2u185_41:
  7492   002162  EFB6  F010         	goto	i2l121
  7493   002166                     i2u185_40:
  7494   002166                     
  7495                           ;color.c: 162:         LATGbits.LATG1 = 1;
  7496   002166  827F               	bsf	127,1,c	;volatile
  7497                           
  7498                           ;color.c: 163:     }else{
  7499   002168  EFB7  F010         	goto	i2l122
  7500   00216C                     i2l121:
  7501                           
  7502                           ;color.c: 164:         LATGbits.LATG1 = 0;
  7503   00216C  927F               	bcf	127,1,c	;volatile
  7504   00216E                     i2l122:
  7505                           
  7506                           ;color.c: 166:     if(color & 0b010){
  7507   00216E  A201               	btfss	i2set_led_color@color^0,1,c
  7508   002170  EFBC  F010         	goto	i2u186_41
  7509   002174  EFBE  F010         	goto	i2u186_40
  7510   002178                     i2u186_41:
  7511   002178  EFC1  F010         	goto	i2l123
  7512   00217C                     i2u186_40:
  7513   00217C                     
  7514                           ;color.c: 167:         LATAbits.LATA4 = 1;
  7515   00217C  8879               	bsf	121,4,c	;volatile
  7516                           
  7517                           ;color.c: 168:     }else{
  7518   00217E  EFC2  F010         	goto	i2l124
  7519   002182                     i2l123:
  7520                           
  7521                           ;color.c: 169:         LATAbits.LATA4 = 0;
  7522   002182  9879               	bcf	121,4,c	;volatile
  7523   002184                     i2l124:
  7524                           
  7525                           ;color.c: 171:     if(color & 0b001){
  7526   002184  A001               	btfss	i2set_led_color@color^0,0,c
  7527   002186  EFC7  F010         	goto	i2u187_41
  7528   00218A  EFC9  F010         	goto	i2u187_40
  7529   00218E                     i2u187_41:
  7530   00218E  EFCC  F010         	goto	i2l125
  7531   002192                     i2u187_40:
  7532   002192                     
  7533                           ;color.c: 172:         LATFbits.LATF7 = 1;
  7534   002192  8E7E               	bsf	126,7,c	;volatile
  7535                           
  7536                           ;color.c: 173:     }else{
  7537   002194  EFCD  F010         	goto	i2l127
  7538   002198                     i2l125:
  7539                           
  7540                           ;color.c: 174:         LATFbits.LATF7 = 0;
  7541   002198  9E7E               	bcf	126,7,c	;volatile
  7542   00219A                     i2l127:
  7543   00219A  0012               	return		;funcret
  7544   00219C                     __end_ofi2_set_led_color:
  7545                           	callstack 0
  7546                           
  7547 ;; *************** function i2_color_read_Clear *****************
  7548 ;; Defined at:
  7549 ;;		line 135 in file "color.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;		None
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  tmp             2    9[COMRAM] unsigned int 
  7554 ;; Return value:  Size  Location     Type
  7555 ;;                  2    4[COMRAM] unsigned int 
  7556 ;; Registers used:
  7557 ;;		wreg, status,2, status,0, cstack
  7558 ;; Tracked objects:
  7559 ;;		On entry : 0/0
  7560 ;;		On exit  : 0/0
  7561 ;;		Unchanged: 0/0
  7562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7563 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7565 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7566 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7567 ;;Total ram usage:        7 bytes
  7568 ;; Hardware stack levels used: 1
  7569 ;; Hardware stack levels required when called: 2
  7570 ;; This function calls:
  7571 ;;		i2_I2C_2_Master_Read
  7572 ;;		i2_I2C_2_Master_RepStart
  7573 ;;		i2_I2C_2_Master_Start
  7574 ;;		i2_I2C_2_Master_Stop
  7575 ;;		i2_I2C_2_Master_Write
  7576 ;; This function is called by:
  7577 ;;		_set_wall_detection
  7578 ;; This function uses a non-reentrant model
  7579 ;;
  7580                           
  7581                           	psect	text44
  7582   001FEA                     __ptext44:
  7583                           	callstack 0
  7584   001FEA                     i2_color_read_Clear:
  7585                           	callstack 21
  7586   001FEA                     
  7587                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  7588   001FEA  ECD6  F011         	call	i2_I2C_2_Master_Start	;wreg free
  7589                           
  7590                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  7591   001FEE  0E52               	movlw	82
  7592   001FF0  ECB7  F011         	call	i2_I2C_2_Master_Write
  7593                           
  7594                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  7595   001FF4  0EB4               	movlw	180
  7596   001FF6  ECB7  F011         	call	i2_I2C_2_Master_Write
  7597                           
  7598                           ;color.c: 141:  I2C_2_Master_RepStart();
  7599   001FFA  ECDB  F011         	call	i2_I2C_2_Master_RepStart	;wreg free
  7600                           
  7601                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  7602   001FFE  0E53               	movlw	83
  7603   002000  ECB7  F011         	call	i2_I2C_2_Master_Write
  7604                           
  7605                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  7606   002004  0E01               	movlw	1
  7607   002006  ECEF  F010         	call	i2_I2C_2_Master_Read
  7608   00200A  6E07               	movwf	??i2_color_read_Clear^0,c
  7609   00200C  5007               	movf	??i2_color_read_Clear^0,w,c
  7610   00200E  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7611   002010  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7612                           
  7613                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7614   002012  0E00               	movlw	0
  7615   002014  ECEF  F010         	call	i2_I2C_2_Master_Read
  7616   002018  6E07               	movwf	??i2_color_read_Clear^0,c
  7617   00201A  5007               	movf	??i2_color_read_Clear^0,w,c
  7618   00201C  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7619   00201E  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7620   002020  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7621   002022  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7622   002024  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7623   002026  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7624   002028  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7625   00202A  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7626                           
  7627                           ;color.c: 145:  I2C_2_Master_Stop();
  7628   00202C  ECD1  F011         	call	i2_I2C_2_Master_Stop	;wreg free
  7629   002030                     
  7630                           ;color.c: 146:  return tmp;
  7631   002030  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7632   002034  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7633   002038  0012               	return		;funcret
  7634   00203A                     __end_ofi2_color_read_Clear:
  7635                           	callstack 0
  7636                           
  7637 ;; *************** function i2_I2C_2_Master_Write *****************
  7638 ;; Defined at:
  7639 ;;		line 45 in file "i2c.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  data_byte       1    wreg     unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  data_byte       1    1[COMRAM] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  1    wreg      void 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7657 ;;Total ram usage:        1 bytes
  7658 ;; Hardware stack levels used: 1
  7659 ;; Hardware stack levels required when called: 1
  7660 ;; This function calls:
  7661 ;;		i2_I2C_2_Master_Idle
  7662 ;; This function is called by:
  7663 ;;		i2_color_read_Clear
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text45
  7668   00236E                     __ptext45:
  7669                           	callstack 0
  7670   00236E                     i2_I2C_2_Master_Write:
  7671                           	callstack 21
  7672                           
  7673                           ;incstack = 0
  7674                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7675   00236E  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7676   002370                     
  7677                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7678   002370  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7679   002374                     
  7680                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7681   002374  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7682   002378  0012               	return		;funcret
  7683   00237A                     __end_ofi2_I2C_2_Master_Write:
  7684                           	callstack 0
  7685                           
  7686 ;; *************** function i2_I2C_2_Master_Stop *****************
  7687 ;; Defined at:
  7688 ;;		line 39 in file "i2c.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used: 1
  7708 ;; Hardware stack levels required when called: 1
  7709 ;; This function calls:
  7710 ;;		i2_I2C_2_Master_Idle
  7711 ;; This function is called by:
  7712 ;;		i2_color_read_Clear
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text46
  7717   0023A2                     __ptext46:
  7718                           	callstack 0
  7719   0023A2                     i2_I2C_2_Master_Stop:
  7720                           	callstack 21
  7721   0023A2                     
  7722                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7723   0023A2  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7724   0023A6                     
  7725                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7726   0023A6  010E               	movlb	14	; () banked
  7727   0023A8  85DA               	bsf	218,2,b	;volatile
  7728   0023AA                     
  7729                           ; BSR set to: 14
  7730   0023AA  0012               	return		;funcret
  7731   0023AC                     __end_ofi2_I2C_2_Master_Stop:
  7732                           	callstack 0
  7733                           
  7734 ;; *************** function i2_I2C_2_Master_Start *****************
  7735 ;; Defined at:
  7736 ;;		line 27 in file "i2c.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;		None
  7741 ;; Return value:  Size  Location     Type
  7742 ;;                  1    wreg      void 
  7743 ;; Registers used:
  7744 ;;		wreg, status,2, status,0, cstack
  7745 ;; Tracked objects:
  7746 ;;		On entry : 0/0
  7747 ;;		On exit  : 0/0
  7748 ;;		Unchanged: 0/0
  7749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7754 ;;Total ram usage:        0 bytes
  7755 ;; Hardware stack levels used: 1
  7756 ;; Hardware stack levels required when called: 1
  7757 ;; This function calls:
  7758 ;;		i2_I2C_2_Master_Idle
  7759 ;; This function is called by:
  7760 ;;		i2_color_read_Clear
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           	psect	text47
  7765   0023AC                     __ptext47:
  7766                           	callstack 0
  7767   0023AC                     i2_I2C_2_Master_Start:
  7768                           	callstack 21
  7769   0023AC                     
  7770                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7771   0023AC  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7772   0023B0                     
  7773                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7774   0023B0  010E               	movlb	14	; () banked
  7775   0023B2  81DA               	bsf	218,0,b	;volatile
  7776   0023B4                     
  7777                           ; BSR set to: 14
  7778   0023B4  0012               	return		;funcret
  7779   0023B6                     __end_ofi2_I2C_2_Master_Start:
  7780                           	callstack 0
  7781                           
  7782 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7783 ;; Defined at:
  7784 ;;		line 33 in file "i2c.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used: 1
  7804 ;; Hardware stack levels required when called: 1
  7805 ;; This function calls:
  7806 ;;		i2_I2C_2_Master_Idle
  7807 ;; This function is called by:
  7808 ;;		i2_color_read_Clear
  7809 ;; This function uses a non-reentrant model
  7810 ;;
  7811                           
  7812                           	psect	text48
  7813   0023B6                     __ptext48:
  7814                           	callstack 0
  7815   0023B6                     i2_I2C_2_Master_RepStart:
  7816                           	callstack 21
  7817   0023B6                     
  7818                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7819   0023B6  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7820   0023BA                     
  7821                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7822   0023BA  010E               	movlb	14	; () banked
  7823   0023BC  83DA               	bsf	218,1,b	;volatile
  7824   0023BE                     
  7825                           ; BSR set to: 14
  7826   0023BE  0012               	return		;funcret
  7827   0023C0                     __end_ofi2_I2C_2_Master_RepStart:
  7828                           	callstack 0
  7829                           
  7830 ;; *************** function i2_I2C_2_Master_Read *****************
  7831 ;; Defined at:
  7832 ;;		line 51 in file "i2c.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  ack             1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  ack             1    2[COMRAM] unsigned char 
  7837 ;;  tmp             1    3[COMRAM] unsigned char 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      unsigned char 
  7840 ;; Registers used:
  7841 ;;		wreg, status,2, status,0, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7851 ;;Total ram usage:        3 bytes
  7852 ;; Hardware stack levels used: 1
  7853 ;; Hardware stack levels required when called: 1
  7854 ;; This function calls:
  7855 ;;		i2_I2C_2_Master_Idle
  7856 ;; This function is called by:
  7857 ;;		i2_color_read_Clear
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text49
  7862   0021DE                     __ptext49:
  7863                           	callstack 0
  7864   0021DE                     i2_I2C_2_Master_Read:
  7865                           	callstack 21
  7866                           
  7867                           ; BSR set to: 14
  7868                           ;incstack = 0
  7869                           ;i2I2C_2_Master_Read@ack stored from wreg
  7870   0021DE  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7871   0021E0                     
  7872                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7873   0021E0  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7874   0021E4                     
  7875                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7876   0021E4  010E               	movlb	14	; () banked
  7877   0021E6  87DA               	bsf	218,3,b	;volatile
  7878                           
  7879                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7880   0021E8  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7881   0021EC                     
  7882                           ;i2c.c: 57:   tmp = SSP2BUF;
  7883   0021EC  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7884                           
  7885                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7886   0021F0  EC51  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7887   0021F4                     
  7888                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7889   0021F4  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7890   0021F6  B4D8               	btfsc	status,2,c
  7891   0021F8  EF00  F011         	goto	i2u161_41
  7892   0021FC  EF04  F011         	goto	i2u161_40
  7893   002200                     i2u161_41:
  7894   002200  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7895   002202  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7896   002204  EF05  F011         	goto	i2u162_48
  7897   002208                     i2u161_40:
  7898   002208  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7899   00220A                     i2u162_48:
  7900   00220A  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7901   00220C  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7902   00220E  010E               	movlb	14	; () banked
  7903   002210  51DA               	movf	218,w,b	;volatile
  7904   002212  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7905   002214  0BDF               	andlw	-33
  7906   002216  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7907   002218  6FDA               	movwf	218,b	;volatile
  7908   00221A                     
  7909                           ; BSR set to: 14
  7910                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7911   00221A  89DA               	bsf	218,4,b	;volatile
  7912   00221C                     
  7913                           ; BSR set to: 14
  7914                           ;i2c.c: 61:   return tmp;
  7915   00221C  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7916   00221E                     
  7917                           ; BSR set to: 14
  7918   00221E  0012               	return		;funcret
  7919   002220                     __end_ofi2_I2C_2_Master_Read:
  7920                           	callstack 0
  7921                           
  7922 ;; *************** function i2_I2C_2_Master_Idle *****************
  7923 ;; Defined at:
  7924 ;;		line 22 in file "i2c.c"
  7925 ;; Parameters:    Size  Location     Type
  7926 ;;		None
  7927 ;; Auto vars:     Size  Location     Type
  7928 ;;		None
  7929 ;; Return value:  Size  Location     Type
  7930 ;;                  1    wreg      void 
  7931 ;; Registers used:
  7932 ;;		wreg, status,2, status,0
  7933 ;; Tracked objects:
  7934 ;;		On entry : 0/0
  7935 ;;		On exit  : 0/0
  7936 ;;		Unchanged: 0/0
  7937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7942 ;;Total ram usage:        1 bytes
  7943 ;; Hardware stack levels used: 1
  7944 ;; This function calls:
  7945 ;;		Nothing
  7946 ;; This function is called by:
  7947 ;;		i2_I2C_2_Master_Start
  7948 ;;		i2_I2C_2_Master_RepStart
  7949 ;;		i2_I2C_2_Master_Stop
  7950 ;;		i2_I2C_2_Master_Write
  7951 ;;		i2_I2C_2_Master_Read
  7952 ;; This function uses a non-reentrant model
  7953 ;;
  7954                           
  7955                           	psect	text50
  7956   0022A2                     __ptext50:
  7957                           	callstack 0
  7958   0022A2                     i2_I2C_2_Master_Idle:
  7959                           	callstack 21
  7960   0022A2                     i2l386:
  7961   0022A2  010E               	movlb	14	; () banked
  7962   0022A4  B5D8               	btfsc	216,2,b	;volatile
  7963   0022A6  EF57  F011         	goto	i2u154_41
  7964   0022AA  EF59  F011         	goto	i2u154_40
  7965   0022AE                     i2u154_41:
  7966   0022AE  EF51  F011         	goto	i2l386
  7967   0022B2                     i2u154_40:
  7968   0022B2                     
  7969                           ; BSR set to: 14
  7970   0022B2  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7971   0022B6  0E1F               	movlw	31
  7972   0022B8  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7973   0022BA  A4D8               	btfss	status,2,c
  7974   0022BC  EF62  F011         	goto	i2u155_41
  7975   0022C0  EF64  F011         	goto	i2u155_40
  7976   0022C4                     i2u155_41:
  7977   0022C4  EF51  F011         	goto	i2l386
  7978   0022C8                     i2u155_40:
  7979   0022C8                     
  7980                           ; BSR set to: 14
  7981   0022C8  0012               	return		;funcret
  7982   0022CA                     __end_ofi2_I2C_2_Master_Idle:
  7983                           	callstack 0
  7984                           
  7985 ;; *************** function _increment_seconds *****************
  7986 ;; Defined at:
  7987 ;;		line 257 in file "dc_motor.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;		None
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      void 
  7994 ;; Registers used:
  7995 ;;		status,2, status,0
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8005 ;;Total ram usage:        0 bytes
  8006 ;; Hardware stack levels used: 1
  8007 ;; This function calls:
  8008 ;;		Nothing
  8009 ;; This function is called by:
  8010 ;;		_HighISR
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text51
  8015   0023C0                     __ptext51:
  8016                           	callstack 0
  8017   0023C0                     _increment_seconds:
  8018                           	callstack 24
  8019   0023C0                     
  8020                           ;dc_motor.c: 259:     seconds += 1;
  8021   0023C0  4A49               	infsnz	_seconds^0,f,c
  8022   0023C2  2A4A               	incf	(_seconds+1)^0,f,c
  8023   0023C4  0012               	return		;funcret
  8024   0023C6                     __end_of_increment_seconds:
  8025                           	callstack 0
  8026   000000                     
  8027                           	psect	rparam
  8028   000000                     
  8029                           	psect	temp
  8030   00004F                     btemp:
  8031                           	callstack 0
  8032   00004F                     	ds	1
  8033   000000                     int$flags	set	btemp
  8034   000000                     wtemp8	set	btemp+1
  8035   000000                     ttemp5	set	btemp+1
  8036   000000                     ttemp6	set	btemp+4
  8037   000000                     ttemp7	set	btemp+8
  8038                           
  8039                           	psect	idloc
  8040                           
  8041                           ;Config register IDLOC0 @ 0x200000
  8042                           ;	unspecified, using default values
  8043   200000                     	org	2097152
  8044   200000  0FFF               	dw	4095
  8045                           
  8046                           ;Config register IDLOC1 @ 0x200002
  8047                           ;	unspecified, using default values
  8048   200002                     	org	2097154
  8049   200002  0FFF               	dw	4095
  8050                           
  8051                           ;Config register IDLOC2 @ 0x200004
  8052                           ;	unspecified, using default values
  8053   200004                     	org	2097156
  8054   200004  0FFF               	dw	4095
  8055                           
  8056                           ;Config register IDLOC3 @ 0x200006
  8057                           ;	unspecified, using default values
  8058   200006                     	org	2097158
  8059   200006  0FFF               	dw	4095
  8060                           
  8061                           ;Config register IDLOC4 @ 0x200008
  8062                           ;	unspecified, using default values
  8063   200008                     	org	2097160
  8064   200008  0FFF               	dw	4095
  8065                           
  8066                           ;Config register IDLOC5 @ 0x20000A
  8067                           ;	unspecified, using default values
  8068   20000A                     	org	2097162
  8069   20000A  0FFF               	dw	4095
  8070                           
  8071                           ;Config register IDLOC6 @ 0x20000C
  8072                           ;	unspecified, using default values
  8073   20000C                     	org	2097164
  8074   20000C  0FFF               	dw	4095
  8075                           
  8076                           ;Config register IDLOC7 @ 0x20000E
  8077                           ;	unspecified, using default values
  8078   20000E                     	org	2097166
  8079   20000E  0FFF               	dw	4095
  8080                           
  8081                           	psect	config
  8082                           
  8083                           ;Config register CONFIG1L @ 0x300000
  8084                           ;	External Oscillator mode Selection bits
  8085                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8086                           ;	Power-up default value for COSC bits
  8087                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8088   300000                     	org	3145728
  8089   300000  AA                 	db	170
  8090                           
  8091                           ;Config register CONFIG1H @ 0x300001
  8092                           ;	unspecified, using default values
  8093                           ;	Clock Out Enable bit
  8094                           ;	CLKOUTEN = 0x1, unprogrammed default
  8095                           ;	Clock Switch Enable bit
  8096                           ;	CSWEN = 0x1, unprogrammed default
  8097                           ;	Fail-Safe Clock Monitor Enable bit
  8098                           ;	FCMEN = 0x1, unprogrammed default
  8099   300001                     	org	3145729
  8100   300001  FF                 	db	255
  8101                           
  8102                           ;Config register CONFIG2L @ 0x300002
  8103                           ;	unspecified, using default values
  8104                           ;	Master Clear Enable bit
  8105                           ;	MCLRE = 0x1, unprogrammed default
  8106                           ;	Power-up Timer Enable bit
  8107                           ;	PWRTE = 0x1, unprogrammed default
  8108                           ;	Low-power BOR enable bit
  8109                           ;	LPBOREN = 0x1, unprogrammed default
  8110                           ;	Brown-out Reset Enable bits
  8111                           ;	BOREN = 0x3, unprogrammed default
  8112   300002                     	org	3145730
  8113   300002  FF                 	db	255
  8114                           
  8115                           ;Config register CONFIG2H @ 0x300003
  8116                           ;	unspecified, using default values
  8117                           ;	Brown Out Reset Voltage selection bits
  8118                           ;	BORV = 0x3, unprogrammed default
  8119                           ;	ZCD Disable bit
  8120                           ;	ZCD = 0x1, unprogrammed default
  8121                           ;	PPSLOCK bit One-Way Set Enable bit
  8122                           ;	PPS1WAY = 0x1, unprogrammed default
  8123                           ;	Stack Full/Underflow Reset Enable bit
  8124                           ;	STVREN = 0x1, unprogrammed default
  8125                           ;	Debugger Enable bit
  8126                           ;	DEBUG = 0x1, unprogrammed default
  8127                           ;	Extended Instruction Set Enable bit
  8128                           ;	XINST = 0x1, unprogrammed default
  8129   300003                     	org	3145731
  8130   300003  FF                 	db	255
  8131                           
  8132                           ;Config register CONFIG3L @ 0x300004
  8133                           ;	WDT Period Select bits
  8134                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8135                           ;	WDT operating mode
  8136                           ;	WDTE = OFF, WDT Disabled
  8137   300004                     	org	3145732
  8138   300004  9F                 	db	159
  8139                           
  8140                           ;Config register CONFIG3H @ 0x300005
  8141                           ;	unspecified, using default values
  8142                           ;	WDT Window Select bits
  8143                           ;	WDTCWS = 0x7, unprogrammed default
  8144                           ;	WDT input clock selector
  8145                           ;	WDTCCS = 0x7, unprogrammed default
  8146   300005                     	org	3145733
  8147   300005  FF                 	db	255
  8148                           
  8149                           ;Config register CONFIG4L @ 0x300006
  8150                           ;	unspecified, using default values
  8151                           ;	Write Protection Block 0
  8152                           ;	WRT0 = 0x1, unprogrammed default
  8153                           ;	Write Protection Block 1
  8154                           ;	WRT1 = 0x1, unprogrammed default
  8155                           ;	Write Protection Block 2
  8156                           ;	WRT2 = 0x1, unprogrammed default
  8157                           ;	Write Protection Block 3
  8158                           ;	WRT3 = 0x1, unprogrammed default
  8159                           ;	Write Protection Block 3
  8160                           ;	WRT4 = 0x1, unprogrammed default
  8161                           ;	Write Protection Block 3
  8162                           ;	WRT5 = 0x1, unprogrammed default
  8163                           ;	Write Protection Block 3
  8164                           ;	WRT6 = 0x1, unprogrammed default
  8165                           ;	Write Protection Block 3
  8166                           ;	WRT7 = 0x1, unprogrammed default
  8167   300006                     	org	3145734
  8168   300006  FF                 	db	255
  8169                           
  8170                           ;Config register CONFIG4H @ 0x300007
  8171                           ;	unspecified, using default values
  8172                           ;	Configuration Register Write Protection bit
  8173                           ;	WRTC = 0x1, unprogrammed default
  8174                           ;	Boot Block Write Protection bit
  8175                           ;	WRTB = 0x1, unprogrammed default
  8176                           ;	Data EEPROM Write Protection bit
  8177                           ;	WRTD = 0x1, unprogrammed default
  8178                           ;	Scanner Enable bit
  8179                           ;	SCANE = 0x1, unprogrammed default
  8180                           ;	Low Voltage Programming Enable bit
  8181                           ;	LVP = 0x1, unprogrammed default
  8182   300007                     	org	3145735
  8183   300007  FF                 	db	255
  8184                           
  8185                           ;Config register CONFIG5L @ 0x300008
  8186                           ;	unspecified, using default values
  8187                           ;	UserNVM Program Memory Code Protection bit
  8188                           ;	CP = 0x1, unprogrammed default
  8189                           ;	DataNVM Memory Code Protection bit
  8190                           ;	CPD = 0x1, unprogrammed default
  8191   300008                     	org	3145736
  8192   300008  FF                 	db	255
  8193                           
  8194                           ;Config register CONFIG5H @ 0x300009
  8195                           ;	unspecified, using default values
  8196   300009                     	org	3145737
  8197   300009  FF                 	db	255
  8198                           
  8199                           ;Config register CONFIG6L @ 0x30000A
  8200                           ;	unspecified, using default values
  8201                           ;	Table Read Protection Block 0
  8202                           ;	EBTR0 = 0x1, unprogrammed default
  8203                           ;	Table Read Protection Block 1
  8204                           ;	EBTR1 = 0x1, unprogrammed default
  8205                           ;	Table Read Protection Block 2
  8206                           ;	EBTR2 = 0x1, unprogrammed default
  8207                           ;	Table Read Protection Block 3
  8208                           ;	EBTR3 = 0x1, unprogrammed default
  8209                           ;	Table Read Protection Block 4
  8210                           ;	EBTR4 = 0x1, unprogrammed default
  8211                           ;	Table Read Protection Block 5
  8212                           ;	EBTR5 = 0x1, unprogrammed default
  8213                           ;	Table Read Protection Block 6
  8214                           ;	EBTR6 = 0x1, unprogrammed default
  8215                           ;	Table Read Protection Block 7
  8216                           ;	EBTR7 = 0x1, unprogrammed default
  8217   30000A                     	org	3145738
  8218   30000A  FF                 	db	255
  8219                           
  8220                           ;Config register CONFIG6H @ 0x30000B
  8221                           ;	unspecified, using default values
  8222                           ;	Boot Block Table Read Protection bit
  8223                           ;	EBTRB = 0x1, unprogrammed default
  8224   30000B                     	org	3145739
  8225   30000B  FF                 	db	255
  8226                           tosu	equ	0xFFF
  8227                           tosh	equ	0xFFE
  8228                           tosl	equ	0xFFD
  8229                           stkptr	equ	0xFFC
  8230                           pclatu	equ	0xFFB
  8231                           pclath	equ	0xFFA
  8232                           pcl	equ	0xFF9
  8233                           tblptru	equ	0xFF8
  8234                           tblptrh	equ	0xFF7
  8235                           tblptrl	equ	0xFF6
  8236                           tablat	equ	0xFF5
  8237                           prodh	equ	0xFF4
  8238                           prodl	equ	0xFF3
  8239                           indf0	equ	0xFEF
  8240                           postinc0	equ	0xFEE
  8241                           postdec0	equ	0xFED
  8242                           preinc0	equ	0xFEC
  8243                           plusw0	equ	0xFEB
  8244                           fsr0h	equ	0xFEA
  8245                           fsr0l	equ	0xFE9
  8246                           wreg	equ	0xFE8
  8247                           indf1	equ	0xFE7
  8248                           postinc1	equ	0xFE6
  8249                           postdec1	equ	0xFE5
  8250                           preinc1	equ	0xFE4
  8251                           plusw1	equ	0xFE3
  8252                           fsr1h	equ	0xFE2
  8253                           fsr1l	equ	0xFE1
  8254                           bsr	equ	0xFE0
  8255                           indf2	equ	0xFDF
  8256                           postinc2	equ	0xFDE
  8257                           postdec2	equ	0xFDD
  8258                           preinc2	equ	0xFDC
  8259                           plusw2	equ	0xFDB
  8260                           fsr2h	equ	0xFDA
  8261                           fsr2l	equ	0xFD9
  8262                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        132
    BSS         348
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      78
    BANK0           160     62     152
    BANK1           256     22     190
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1020DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1020DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnLeftLong
    _return_back->_turnRight
    _return_back->_turnRightLong
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  122538
                                             54 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
            _set_wall_detection_mode
                               _stop
 ---------------------------------------------------------------------------------
 (1) _set_wall_detection_mode                              2     0      2     391
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43607
                                             42 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             19 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8109
                                             47 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             19 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             25 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             32 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5380
                                             34 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             15 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1955
                                             24 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3062
                                             26 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1463
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             14 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             14 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44546
                                             42 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                       10     6      4    5941
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                        10     6      4    5944
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             32 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             26 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             19 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     427
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   2     0      2     427
                                             11 COMRAM     2     0      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     118
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _set_wall_detection_mode
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      BE       7       74.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4E       1       83.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26C      60        0.0%
DATA                 0      0     26C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 16:40:56 2022

                 _color_read_Red 1EAA               RobotMovement@color 002B  
                _color_read_Blue 1F9A                               l80 17CC  
                             l73 2348                               l82 1802  
                             l91 230E                               l83 17E2  
                             l76 17B0                               l94 1EF8  
                             l86 17F4                               l97 1FE8  
            ___wmul@multiplicand 0010                 _color_read_Clear 1F4A  
               ?_calibrate_black 0001                 _color_read_Green 1EFA  
            RobotMovement@motorL 002D              RobotMovement@motorR 002F  
              ??_Interrupts_init 000E                              l100 1F48  
                            l103 1F98                              l121 2128  
                            l122 212A                              l123 213E  
                            l124 2140                              l125 2154  
                            l150 193A                              l118 100A  
                            l127 2156                              l240 1176  
                            l401 2360                              l153 19E4  
                            l145 0AA2                              l233 1BB2  
                            l243 2082                              l331 070C  
                            l147 0AAA                              l252 142A  
                            l404 21DC                              l261 16CA  
                            l309 03A4                              l341 0CAA  
                            l270 12D0                              l502 232E  
                            l334 2382                              l423 236C  
                            l319 05B8                              l159 1E4E  
                            l505 22EE                              l338 2112  
                            l282 1EA8                              l346 0C90  
                            l532 1A78                              l516 1DDA  
                            l356 0CE0                              l517 1DEA  
                            l294 1C26                              l279 157A  
                            l383 2278                              l288 1C9A  
                            l392 2396                              l386 227A  
                            l395 23A0                              l539 1A88  
                            l389 22A0                              l398 238C  
                            l996 1D06                              _RGB 00E6  
               ?_calibrate_white 0001                              wreg 000FE8  
                           l1003 1D0E                             l4000 1468  
                           l4010 14AC                             l4002 1474  
                           l4020 14F0                             l4012 14C8  
                           l4004 1480                             l4100 2338  
                           l4030 1536                             l4022 14FC  
                           l4006 148C                             l4110 16F4  
                           l4102 16CC                             l4040 1C34  
                           l4032 153E                             l4024 1508  
                           l4008 14A4                             l4120 1716  
                           l4112 16FE                             l4104 16D0  
                           l4042 1C54                             l4050 1C84  
                           l4034 155A                             l4026 1514  
                           l4018 14D0                             l4130 1770  
                           l4122 1728                             l4114 1700  
                           l4106 16DA                             l4210 0A78  
                           l4044 1C60                             l4060 1BF8  
                           l4052 1BB4                             l4036 155E  
                           l4028 1520                             l4300 01CC  
                           l4140 17AC                             l4132 1782  
                           l4124 173A                             l4116 1702  
                           l4108 16EA                             l4212 0A88  
                           l4204 0A02                             l4220 1E10  
                           l4046 1C6C                             l4038 1C28  
                           l4062 1C04                             l4054 1BC0  
                           l4310 0292                             l4302 01E0  
                           l4150 17F0                             l4142 17AE  
                           l4134 1794                             l4126 174C  
                           l4118 1704                             l4070 1DA0  
                           l4214 0A8C                             l4206 0A30  
                           l4230 1B34                             l4048 1C78  
                           l4056 1BE0                             l4064 1C10  
                           l4320 0344                             l4312 02B8  
                           l4304 0224                             l4400 20E8  
                           l4144 17BE                             l4136 17A6  
                           l4128 175E                             l4080 1A0C  
                           l4072 1DB0                             l4208 0A60  
                           l4160 074E                             l4152 070E  
                           l4224 1E1C                             l4216 1DEC  
                           l4240 1B98                             l4232 1B5E  
                           l4058 1BEC                             l4322 0362  
                           l4314 02D6                             l4306 0256  
                           l4330 03E0                             l4402 210E  
                           l4138 17A8                             l4250 1E50  
                           l4090 1A56                             l4082 1A14  
                           l4074 1DBA                             l4066 1D82  
                           l4170 07B6                             l4162 0776  
                           l4154 071A                             l4218 1DFE  
                           l4242 1B9A                             l4234 1B82  
                           l4410 0AEE                             l4340 04A6  
                           l4332 03F4                             l4324 038A  
                           l4316 02FE                             l4308 028A  
                           l3620 228A                             l3700 1F90  
                           l4148 17DE                             l4260 1E90  
                           l4252 1E58                             l4092 1A66  
                           l4084 1A20                             l4076 19E6  
                           l4068 1D92                             l4180 0884  
                           l4172 07D6                             l4164 0782  
                           l4156 0730                             l4244 1BA4  
                           l4236 1B8C                             l4228 1B24  
                           l4420 0B96                             l4412 0B16  
                           l4404 0AAC                             l4500 0DA4  
                           l4350 0558                             l4342 04CC  
                           l4334 0438                             l4326 03BE  
                           l4318 031C                             l4270 00FC  
                           l3622 238E                             l3630 2384  
                           l3710 214E                             l4262 1E9C  
                           l4254 1E68                             l4094 1A68  
                           l4086 1A2E                             l4078 19F6  
                           l4190 0946                             l4182 0898  
                           l4174 07EA                             l4166 0798  
                           l4158 0742                             l4246 1BA6  
                           l4238 1B8E                             l4430 0C54  
                           l4422 0BAE                             l4414 0B2E  
                           l4406 0AB0                             l4510 0DE8  
                           l4502 0DB8                             l3720 1094  
                           l3712 100C                             l4352 0576  
                           l4344 04EA                             l4336 046A  
                           l4360 05F4                             l4328 03C2  
                           l4280 015A                             l4272 0116  
                           l4264 00A6                             l3640 21A2  
                           l3624 2392                             l3632 2388  
                           l3704 2114                             l4256 1E78  
                           l4096 1A72                             l4088 1A38  
                           l3800 0F34                             l4192 09B0  
                           l4184 0902                             l4176 0854  
                           l4168 07AA                             l4248 1BB0  
                           l4440 0CD6                             l4432 0C70  
                           l4424 0BDE                             l4416 0B56  
                           l4408 0AD6                             l4512 0E04  
                           l4504 0DC4                             l4520 0E60  
                           l4442 2362                             l3722 10D6  
                           l3714 1028                             l4370 064E  
                           l4362 0608                             l4354 059E  
                           l4346 0512                             l4338 049E  
                           l4290 017A                             l4282 015E  
                           l4274 011A                             l4266 00D6  
                           l4450 232C                             l3730 225A  
                           l3618 227A                             l3642 21AA  
                           l3634 2398                             l3626 2358  
                           l3706 2122                             l4258 1E84  
                           l3810 0FAE                             l3802 0F4C  
                           l4194 09C0                             l4186 0912  
                           l4178 0864                             l4426 0C0E  
                           l4418 0B6E                             l4434 0C90  
                           l4098 2330                             l4522 0E74  
                           l4514 0E20                             l4506 0DC8  
                           l3660 1CA4                             l3652 22CA  
                           l3724 10F2                             l3716 107C  
                           l3820 206A                             l3900 15F4  
                           l4372 0662                             l4364 061C  
                           l4356 05D2                             l4348 0530  
                           l4292 018E                             l4284 0172  
                           l4276 012C                             l4268 00E8  
                           l4444 2310                             l3732 2260  
                           l3644 21B2                             l3636 239C  
                           l3628 235C                             l3708 2138  
                           l3740 22F2                             l3804 0F72  
                           l4196 09F0                             l4188 0932  
                           l4436 0CA4                             l4428 0C3C  
                           l4524 0E80                             l4516 0E34  
                           l4508 0DDC                             l4460 0CFA  
                           l4452 0CE2                             l3670 1CDA  
                           l3662 1CB6                             l3654 22E6  
                           l3726 1136                             l3718 1090  
                           l3814 203A                             l3822 12D2  
                           l3910 1620                             l3902 15FC  
                           l4390 06D0                             l4374 067C  
                           l4366 0636                             l4358 05D6  
                           l4294 01A8                             l4278 0140  
                           l4446 2318                             l3734 2262  
                           l3646 21D8                             l3638 219E  
                           l3750 197C                             l3742 193C  
                           l3806 0F8E                             l4198 09FA  
                           l4438 0CC4                             l4470 0D0A  
                           l4462 0CFA                             l4454 0CE6  
                           l3672 1CF0                             l3664 1CBE  
                           l3816 2052                             l3840 1322  
                           l3920 1670                             l3912 1640  
                           l3904 1618                             l4384 069C  
                           l4392 06DA                             l4376 0680  
                           l4368 063A                             l4296 01AC  
                           l4448 232A                             l3736 2264  
                           l3728 2250                             l3648 21DA  
                           l3680 1EAA                             l3760 1804  
                           l3752 19A4                             l3744 1948  
                           l3808 0FA6                             l4480 0D2A  
                           l4472 0D0E                             l4464 0CFE  
                           l4456 0CEA                             l3674 1CF8  
                           l3666 1CC6                             l3658 1C9C  
                           l3818 205E                             l3850 1376  
                           l3842 132E                             l3834 12EA  
                           l3930 1178                             l3922 1686  
                           l3914 164C                             l4394 06F0  
                           l4386 06B0                             l4378 0694  
                           l4298 01B0                             l3738 2266  
                           l3682 1EF0                             l3770 1868  
                           l3762 1810                             l3754 19B0  
                           l3746 195E                             l4490 0D4A  
                           l4482 0D2E                             l4474 0D16  
                           l4466 0D00                             l4458 0CEE  
                           l3676 1CFA                             l3668 1CD4  
                           l3860 13AA                             l3844 133A  
                           l3836 130A                             l3828 12E2  
                           l3924 168E                             l3916 1658  
                           l4388 06B4                             l3692 1EFA  
                           l3780 18C8                             l3772 1874  
                           l3764 1826                             l3756 19C6  
                           l3748 1970                             l4396 237A  
                           l4492 0D62                             l4484 0D32  
                           l4476 0D1E                             l4468 0D06  
                           l3678 1D00                             l3870 13EE  
                           l3862 13B6                             l3846 1352  
                           l3838 1316                             l3950 11D4  
                           l3942 1190                             l3926 16AA  
                           l3918 1664                             l4398 20CC  
                           l3686 1F9A                             l3694 1F40  
                           l3782 18D4                             l3774 188A  
                           l3766 1836                             l3758 19D8  
                           l3790 0E9C                             l4494 0D76  
                           l4486 0D3A                             l4478 0D26  
                           l3872 140A                             l3864 13C2  
                           l3856 137E                             l3848 135A  
                           l3952 11E0                             l3944 11B0  
                           l3936 1188                             l3928 16AE  
                           l3688 1FE0                             l3784 18EA  
                           l3776 189A                             l3768 1842  
                           l3792 0EBA                             l4496 0D82  
                           l4488 0D42                             l3874 140E  
                           l3866 13CE                             l3858 139E  
                           l3970 125C                             l3954 11F8  
                           l3946 11BC                             l3890 15AC  
                           l3882 1584                             l3698 1F4A  
                           l3786 1902                             l3778 18BC  
                           l3794 0ED8                             l4498 0D8E  
                           l3868 13E6                             l3980 12B0  
                           l3972 1268                             l3964 1224  
                           l3956 1200                             l3948 11C8  
                           l3892 15B8                             l3876 157C  
                           l3788 191E                             l3796 0EF2  
                           l3982 12B4                             l3974 1274  
                           l3966 1244                             l3958 121C  
                           l3894 15C4                             l3990 1434  
                           l3798 0F18                             l3976 128C  
                           l3968 1250                             l3896 15D0  
                           l3888 158C                             l3984 142C  
                           l3978 1294                             l3898 15DC  
                           l3996 143C                             l3998 145C  
                           u3000 2122                             u3001 211E  
                           u3010 2138                             u3011 2134  
                           u3100 142A                             u3020 214E  
                           u3101 1426                             u3021 214A  
                           u3030 1028                             u3110 1618  
                           u3031 1024                             u3111 1614  
                           u3040 10F2                             u3200 1C9A  
                           u3120 16AA                             u3041 10EE  
                           u3201 1C96                             u3121 16A6  
                           u3210 1C26                             u3130 16CA  
                           u3050 0EBA                             u3211 1C22  
                           u3131 16C6                             u3051 0EB6  
                           u3140 121C                             u3220 1DA0  
                           u3060 0F18                             u3141 1218  
                           u3301 1744                             u3221 1D9C  
                           u3061 0F14                             u3150 12B0  
                           u3230 1DDA                             u3070 0F72  
                           u3151 12AC                             u3311 1756  
                           u3231 1DD6                             u3071 0F6E  
                           u3080 1376                             u3160 12D0  
                           u3400 1802                             u3240 1A0C  
                           u3081 1372                             u3161 12CC  
                           u3401 17FE                             u3321 1768  
                           u3241 1A08                             u3090 140A  
                           u3170 14C8                             u3250 1A2E  
                           u3410 07D6                             _T2PR 000FBC  
                     _Black_rule 016C                             u3091 1406  
                           u3171 14C4                             u3331 177A  
                           u3251 1A2A                             u3411 07D2  
                           u3180 155A                             u3260 1A56  
                           u3500 0AA2                             u3420 0884  
                           u3181 1556                             u3341 178C  
                           u3261 1A52                             u3501 0A9E  
                           u3421 0880                             u3190 157A  
                           u3430 0932                             u3510 1DFE  
                           u3191 1576                             u3351 179E  
                           u3271 170E                             u3431 092E  
                           u3511 1DFA                             u3600 0256  
                           u3360 17BE                             u3520 1E10  
                           u3601 0252                             u3361 17BA  
                           u3281 1720                             u3441 09CA  
                           u3521 1E0C                             u3610 02B8  
                           u3370 17CC                             u3530 1E48  
                           u3611 02B4                             u3371 17C8  
                           u3291 1732                             u4307 16E0  
                           u3451 09DC                             u3531 1E42  
                           u3700 059E                             u3620 02FE  
                           u3380 17DA                             u3540 1E4A  
                           u3701 059A                             u3621 02FA  
                           u4317 1952                             u3381 17D6  
                           u3461 0A28                             u3710 0608  
                           u3630 0344                             u3550 00E8  
                           u3390 17F0                             u4407 152A  
                           u3711 0604                             u3631 0340  
                           u3551 00E4                             u4327 1986  
                           u3391 17EC                             u3471 0A3A  
                           u3720 064E                             u3640 038A  
                           u3560 012C                             u3800 0B96  
                           u4417 15E6                             u3721 064A  
                           u3641 0386                             u3561 0128  
                           u4337 19BA                             u3481 0A4C  
                           u3801 0B92                             u4257 0D54  
                           u3730 0694                             u3650 03F4  
                           u3570 0172                             u2930 228A  
                           u3490 0A78                             u3810 0BDE  
                           u4427 167A                             u3731 0690  
                           u3651 03F0                             u3571 016E  
                           u2931 2286                             u4347 181A  
                           u3491 0A74                             u4267 0C46  
                           u3811 0BDA                             u3740 06D0  
                           u3660 046A                             u3580 01CC  
                           u2940 22A0                             u3820 0C0E  
                           u4437 11EA                             u3741 06CC  
                           u3661 0466                             u3581 01C8  
                           u2941 229C                             u4357 184C  
                           u4277 0724                             u3821 0C0A  
                           u3750 06F0                             u3670 04CC  
                           u3590 01E0                             u2950 21C6  
                           u3830 0CC4                             u4447 127E  
                           u3751 06EC                             u3671 04C8  
                           u3591 01DC                             u2951 21BE  
                           u4367 187E                             u4287 0758  
                           u3831 0CC0                             u3680 0512  
                           u3760 20E8                             u3840 0CD6  
                           u4457 1344                             u3681 050E  
                           u3761 20E4                             u4377 18B0  
                           u4297 078C                             u3841 0CD2  
                           u2970 1CB6                             u3690 0558  
                           u3770 0AD6                             u3850 0DA4  
                           u2971 1CB2                             u4467 13D8  
                           u3691 0554                             u4387 18DE  
                           u3771 0AD2                             u3851 0DA0  
                           u2980 1CD4                             u3780 0B16  
                           u3860 0DB8                             u2981 1CD0  
                           u4477 2074                             u4397 1496  
                           u3781 0B12                             u3861 0DB4  
                           u2990 1CF0                             u3790 0B56  
                           u3870 0E34                             u2991 1CEC  
                           u3791 0B52                             u3871 0E30  
                           u2968 21C8                             u3880 0E74  
                           u3881 0E70                             _main 0CE2  
                           fsr2h 000FDA                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 004F                             _stop 203A  
                           prodh 000FF4                             prodl 000FF3  
                           start 00A2           __end_of_color_read_Red 1EFA  
                __end_of_HighISR 00A2                     ___param_bank 000000  
     __end_ofi2_color_read_Clear 203A               _get_color_code$463 00C6  
             _get_color_code$464 00CA               _get_color_code$465 00CE  
                          ?_main 0001                  __end_of___lldiv 1A8A  
                          ?_stop 0021              _add_seconds_to_list 20CC  
                    _Black_setup 0039                  __end_of___lwdiv 1D10  
                          i2l103 2038                            i2l121 216C  
                          i2l122 216E                            i2l123 2182  
                          i2l124 2184                            i2l125 2198  
                          i2l127 219A                            i2l401 2378  
                          i2l163 1D80                            i2l404 221E  
                          i2l437 009E                            i2l392 23B4  
                          i2l297 23C4                            i2l386 22A2  
                          i2l395 23BE                            i2l389 22C8  
                          i2l398 23AA                            _TMR0H 000FD4  
                          _TMR0L 000FD3              ___lmul@multiplicand 0012  
     __end_of_I2C_2_Master_Start 2398       __end_of_I2C_2_Master_Write 2362  
             _get_color_distance 0E9C                            _index 0047  
                          _state 00F4                            tablat 000FF5  
                          plusw0 000FEB                            plusw1 000FE3  
                          plusw2 000FDB              ?_get_color_distance 0014  
                          ttemp5 0050                            ttemp6 0053  
                          ttemp7 0057                            status 000FD8  
                          wtemp8 0050             ?_add_seconds_to_list 0001  
                     _Green_rule 0084          __end_of_color_read_Blue 1FEA  
          _I2C_2_Master_RepStart 2398                  ?_color_read_Red 0012  
                __initialization 1A8A                     __end_of_main 0E9C  
                i2_set_led_color 2158                     __end_of_stop 2084  
                   _turnLeftLong 1178             i2set_led_color@color 0001  
           ??_get_color_distance 002C                           ??_main 0037  
                         ??_stop 0025                    __activetblptr 000000  
            _get_color_code$2462 00BA                     ?_setMotorPWM 001B  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         _RE4PPS 000E76                           i2l3108 23C0  
                         i2l3060 1D28                           i2l3300 001A  
                         i2l3070 1D74                           i2l3062 1D3A  
                         i2l3310 005A                           i2l3302 0024  
                         i2l2512 23AC                           i2l2520 23A2  
                         i2l3064 1D46                           i2l3056 1D10  
                         i2l3320 0096                           i2l3312 006A  
                         i2l3304 0038                           i2l2530 21E4  
                         i2l2514 23B0                           i2l2522 23A6  
                         i2l3066 1D56                           i2l3322 009A  
                         i2l3314 007E                           i2l3306 003C  
                         i2l2460 22A2                           i2l2532 21EC  
                         i2l2516 23B6                           i2l2524 2370  
                         i2l3068 1D68                           i2l3316 008A  
                         i2l3308 0046                           i2l2462 22B2  
                         i2l2534 21F4                           i2l2518 23BA  
                         i2l2526 2374                           i2l3318 0092  
                         i2l2536 221A                           i2l2528 21E0  
                         i2l2538 221C                           i2l2912 1FEA  
                         i2l2920 2166                           i2l2914 2030  
                         i2l2922 217C                           i2l3298 000A  
                         i2l2924 2192                           i2l2918 2158  
                         _RG6PPS 000E88                        ??_HighISR 000E  
       __end_of_color_click_init 1804            ??_add_seconds_to_list 000E  
                 RobotMovement@i 0033            __end_of_RobotMovement 070E  
               ??_get_color_code 0032                    ??_Timer0_init 000E  
                   _CCPTMRS0bits 000FAD         ?_set_wall_detection_mode 000E  
                         ___lmul 1D82         get_color_distance@color1 0014  
       get_color_distance@color2 0020                           ___wmul 22CA  
                         _clear1 004D                           _clear2 004B  
                      ??___lldiv 0022                        ??___lwdiv 0018  
                    _Color_rules 0100                           clear_0 1AF0  
                         clear_1 1AFC                           clear_2 1B08  
                         clear_3 1B14                           isa$std 000001  
               __end_of_moveBack 1C28            calibrate_black@clear1 001D  
          calibrate_black@clear2 001F                     __pdataCOMRAM 0039  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                     ?_return_back 002B  
                 _Lightblue_rule 0184                       _White_rule 0178  
                         stop@mL 0021                           stop@mR 0023  
              ??_initDCmotorsPWM 0010                 __end_of_turnLeft 142C  
            _wall_detection_mode 00F6            __end_of_set_led_color 2158  
                     __accesstop 0060          __end_of__initialization 1B1A  
       __end_of_color_read_Clear 1F9A         __end_of_color_read_Green 1F4A  
         ?_I2C_2_Master_RepStart 0001          __end_ofi2_set_led_color 219C  
                  ___rparam_used 000001                 ?_color_read_Blue 0012  
                _Interrupts_init 2362                   __pcstackCOMRAM 0001  
                   __pidataBANK0 2084                     __pidataBANK1 2220  
         i2I2C_2_Master_Read@ack 0003              __end_of_Timer0_init 2330  
         i2I2C_2_Master_Read@tmp 0004                       __pbssBANK0 00E6  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
        i2_I2C_2_Master_RepStart 23B6                    _turnRightLong 142C  
              _color_writetoaddr 22F0                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0010                          ?___lmul 000E  
                        ?___wmul 000E                   main@color_code 01A8  
                     _blockahead 00A2                   ___lmul@product 0016  
                get_color_code@i 00D8              ??_color_writetoaddr 0011  
          i2color_read_Clear@tmp 000A                return_back@motorL 002B  
              return_back@motorR 002D               i2_color_read_Clear 1FEA  
        get_color_code@min_index 00D4                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5          get_color_code@min_value 00D2  
                    _Orange_rule 0190          __end_of_Interrupts_init 236E  
         color_writetoaddr@value 0010                 ??_color_read_Red 0014  
            ?i2_color_read_Clear 0005       __end_of_get_wall_detection 1E50  
                        _HighISR 0008       __end_of_set_wall_detection 1D82  
      __end_of_color_writetoaddr 2310                 ?i2_set_led_color 0001  
                 ?_turnRightLong 0021               _I2C_2_Master_Start 238E  
            i2_I2C_2_Master_Idle 22A2               _I2C_2_Master_Write 2356  
                      ?_moveBack 0021              i2_I2C_2_Master_Read 21DE  
                        __Hparam 0000              i2_I2C_2_Master_Stop 23A2  
                        __Lparam 0000                color_read_Red@tmp 0017  
                    _Timer0_init 2310                __end_of_get_state 2384  
                        ___lldiv 19E6              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1C9C              ?_I2C_2_Master_Write 0001  
                        __pcinit 1A8A             ??i2_color_read_Clear 0007  
                        __ramtop 0E00                        ?_turnLeft 0021  
                        __ptext0 0CE2                          __ptext1 2330  
                        __ptext2 0AAC                          __ptext3 1B24  
                        __ptext4 1DEC                          __ptext5 237A  
                        __ptext6 070E                          __ptext7 0E9C  
                        __ptext8 1D82                          __ptext9 19E6  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 000FBD  
           ?i2_I2C_2_Master_Read 0001             ?i2_I2C_2_Master_Stop 0001  
                        _seconds 0049                        _T2HLTbits 000FBE  
           ??_I2C_2_Master_Start 000F             ??_I2C_2_Master_Write 000F  
           end_of_initialization 1B1A        ??i2_I2C_2_Master_RepStart 0002  
              ?_color_click_init 0001                       ??_moveBack 0027  
                ___lldiv@divisor 001E               ??_color_click_init 0023  
                ___lldiv@counter 0026                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                      _White_setup 0060  
                _initDCmotorsPWM 1B24                       ??_turnLeft 0025  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0020  
          ??i2_I2C_2_Master_Idle 0001            ??i2_I2C_2_Master_Read 0002  
              __end_of_turnRight 16CC            ??i2_I2C_2_Master_Stop 0002  
                    _Yellow_rule 006C                        _TRISAbits 000F81  
             setMotorPWM@posDuty 001F                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
           _calibrate_black$2463 0021      __end_of_add_seconds_to_list 2114  
               fullSpeedAhead@mL 0021                 fullSpeedAhead@mR 0023  
       color_writetoaddr@address 0011       get_color_distance@B_offset 00B8  
        ??_I2C_2_Master_RepStart 000F                 ?_Interrupts_init 0001  
                ??_turnRightLong 0025                      _CCP1CONbits 000FAB  
     get_color_distance@G_offset 00B6                _increment_seconds 23C0  
              ?_color_read_Clear 0012                      _CCP2CONbits 000FA7  
              ??_calibrate_black 001B                ?_color_read_Green 0012  
                    _CCP3CONbits 000F26                      _CCP4CONbits 000F22  
                     main@motorL 01AC                       main@motorR 01B5  
              ??_calibrate_white 0019               ?_increment_seconds 0001  
             ??_color_read_Clear 0014               ??_color_read_Green 0014  
                 _fullSpeedAhead 1E50       get_color_distance@R_offset 00B4  
                      _Blue_rule 0078              ??_increment_seconds 0001  
                 __end_of___lmul 1DEC                   __end_of___wmul 22F0  
                  __pidataCOMRAM 234A              color_read_Clear@tmp 0017  
            start_initialization 1A8A              _TimedfullSpeedAhead 1C28  
               _incr_sec_counter 00F2        __end_of_increment_seconds 23C6  
                      _Pink_rule 019C              color_read_Green@tmp 0017  
        __end_of_initDCmotorsPWM 1BB4             ?_TimedfullSpeedAhead 0021  
         __end_of_fullSpeedAhead 1EAA                         ??___lmul 0016  
                       ??___wmul 0012                      __pdataBANK0 0060  
                    __pdataBANK1 0178    i2I2C_2_Master_Write@data_byte 0002  
   __end_ofi2_I2C_2_Master_Start 23B6     __end_ofi2_I2C_2_Master_Write 237A  
         _get_color_distance$422 00A8           _get_color_distance$424 00AC  
         _get_color_distance$426 00B0                      __pbssCOMRAM 0045  
                  __pcstackBANK0 00A8                    __pcstackBANK1 01A8  
            get_color_code@value 00D6                         ?_HighISR 0001  
    set_wall_detection_mode@mode 000E                    _RobotMovement 00A6  
               ___lwdiv@dividend 0014            ??_TimedfullSpeedAhead 0027  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 0021  
                     moveBack@mL 0021                       moveBack@mR 0023  
                      __pintcode 0008                        _blockback 00A0  
                      _halfblock 009E                         ?___lldiv 001A  
                       ?___lwdiv 0014               _get_wall_detection 1DEC  
             _set_wall_detection 1D10                    ?_turnLeftLong 0021  
                   moveBack@time 0025                        _get_state 237A  
           I2C_2_Master_Read@ack 0010             I2C_2_Master_Read@tmp 0011  
        _set_wall_detection_mode 2330            TimedfullSpeedAhead@mL 0021  
          TimedfullSpeedAhead@mR 0023              ?_get_wall_detection 0014  
            ?_set_wall_detection 000C      get_color_code@NormalizedRGB 00DA  
              _I2C_2_Master_Idle 227A                _I2C_2_Master_Init 2250  
              _I2C_2_Master_Read 219C                _I2C_2_Master_Stop 2384  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 001D  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 0019  
       initDCmotorsPWM@PWMperiod 000E                  turnRightLong@mL 0021  
                turnRightLong@mR 0023                   turnLeftLong@mL 0021  
                 turnLeftLong@mR 0023              ??_I2C_2_Master_Idle 000E  
            ??_I2C_2_Master_Init 000E              ??_I2C_2_Master_Read 000F  
                 ___wmul@product 0012                         _LATAbits 000F79  
                  _set_led_color 2114              ??_I2C_2_Master_Stop 000F  
                       _LATCbits 000F7B                         _LATEbits 000F7D  
                       _LATFbits 000F7E                         _LATGbits 000F7F  
           ??_get_wall_detection 0016                         _PIE0bits 000E29  
                 ?_RobotMovement 002B                         _PIE2bits 000E2B  
           ??_set_wall_detection 000E                      turnRight@mL 0021  
                    turnRight@mR 0023                         i2u216_40 1D24  
                       i2u216_41 1D20                         i2u161_40 2208  
                       i2u217_40 1D3A                         i2u161_41 2200  
                       i2u217_41 1D36                         i2u154_40 22B2  
                       i2u218_40 1D68                         i2u250_40 0038  
                       i2u154_41 22AE                         i2u218_41 1D64  
                       i2u250_41 0034                         i2u155_40 22C8  
                       i2u162_48 220A                         i2u251_40 005A  
                       i2u155_41 22C4                         i2u251_41 0056  
                       i2u252_40 007E                         i2u252_41 007A  
                       _PIR0bits 000E33                         i2u185_40 2166  
                       i2u249_40 001A                         i2u185_41 2162  
                       i2u249_41 0016                         i2u186_40 217C  
                       i2u186_41 2178                         i2u187_40 2192  
                       i2u187_41 218E                 ?_initDCmotorsPWM 000E  
                      _wall_coef 00A6                        _wait_time 00A4  
                       _SSP2CON2 000EDA                   ??_turnLeftLong 0025  
                       _SSP2STAT 000ED8               set_led_color@color 000E  
                     ?_get_state 000E        __end_of_I2C_2_Master_Idle 22A2  
      __end_of_I2C_2_Master_Init 227A        __end_of_I2C_2_Master_Read 21DE  
              ___wmul@multiplier 000E        __end_of_I2C_2_Master_Stop 238E  
                   setMotorPWM@m 001B      I2C_2_Master_Write@data_byte 000F  
                  _movement_list 0200                        main@state 01AA  
              ??_color_read_Blue 0014                    ??_return_back 002F  
                _calibrate_black 1804          TimedfullSpeedAhead@time 0025  
                      _turnRight 157C                  _calibrate_white 193C  
              ___lmul@multiplier 000E                        copy_data0 1A9E  
                      copy_data1 1ABE                        copy_data2 1ADE  
                      _twothirds 009C                   ?_set_led_color 000E  
  __end_of_I2C_2_Master_RepStart 23A2               color_read_Blue@tmp 0017  
            __end_of_setMotorPWM 1178                         _Red_rule 0090  
           i2_I2C_2_Master_Start 23AC             i2_I2C_2_Master_Write 236E  
                       __Hrparam 0000                         __Lrparam 0000  
    __end_ofi2_I2C_2_Master_Idle 22CA      __end_ofi2_I2C_2_Master_Read 2220  
     __end_of_get_color_distance 100C      __end_ofi2_I2C_2_Master_Stop 23AC  
      ??_set_wall_detection_mode 0010                   _get_color_code 070E  
                     _ANSELDbits 000EA7                       _ANSELFbits 000EB4  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
       ?i2_I2C_2_Master_RepStart 0001                  ___lwdiv@divisor 0016  
                ___lwdiv@counter 0018                       ?_turnRight 0021  
                       __ptext10 1E50                         __ptext11 16CC  
                       __ptext20 2356                         __ptext12 22F0  
                       __ptext21 2384                         __ptext13 193C  
                       __ptext30 142C                         __ptext22 238E  
                       __ptext14 1804                         __ptext31 157C  
                       __ptext23 2398                         __ptext15 2114  
                       __ptext40 2362                         __ptext32 1178  
                       __ptext24 219C                         __ptext16 1EAA  
                       __ptext33 12D2                         __ptext25 227A  
                       __ptext17 1EFA                         __ptext50 22A2  
                       __ptext42 1D10                         __ptext34 203A  
                       __ptext26 2250                         __ptext18 1F4A  
                       __ptext51 23C0                         __ptext43 2158  
                       __ptext35 1BB4                         __ptext27 20CC  
                       __ptext19 1F9A                         __ptext44 1FEA  
                       __ptext36 1C28                         __ptext28 2310  
                       __ptext45 236E                         __ptext37 100C  
                       __ptext29 00A6                         __ptext46 23A2  
                       __ptext38 22CA                         __ptext47 23AC  
                       __ptext39 1C9C                         __ptext48 23B6  
                       __ptext49 21DE                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA                  ??_RobotMovement 0031  
            __end_of_return_back 0CE2                       turnLeft@mL 0021  
                     turnLeft@mR 0023            ?i2_I2C_2_Master_Start 0001  
                 turnRightLong@i 0029                   turnRightLong@k 0027  
          ?i2_I2C_2_Master_Write 0001                    turnLeftLong@i 0029  
                  turnLeftLong@k 0027            __end_of_turnRightLong 157C  
                       _moveBack 1BB4                       turnRight@i 0029  
                     turnRight@k 0027                         isa$xinst 000000  
                       int$flags 004F           __end_of_get_color_code 0AAC  
        __end_of_calibrate_black 193C                         _turnLeft 12D2  
                    ??_get_state 0010          __end_of_calibrate_white 19E6  
                     _INTCONbits 000FF2                ??i2_set_led_color 0003  
                    _setMotorPWM 100C                  ??_set_led_color 0010  
           __end_of_turnLeftLong 12D2                         intlevel2 0000  
__end_of_set_wall_detection_mode 234A                 ___lldiv@dividend 001A  
               ??_fullSpeedAhead 0025                        turnLeft@i 0029  
                      turnLeft@k 0027                  ?_get_color_code 0030  
               _color_click_init 16CC  __end_ofi2_I2C_2_Master_RepStart 23C0  
         _wall_detection_counter 0045                       _SSP2DATPPS 000E1D  
               ___lldiv@quotient 0022                       _SSP2CLKPPS 000E1C  
         set_wall_detection@mode 000C                      _return_back 0AAC  
                    ??_turnRight 0025      __end_of_TimedfullSpeedAhead 1C9C  
         ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002  
            RobotMovement@i_1276 0035  
