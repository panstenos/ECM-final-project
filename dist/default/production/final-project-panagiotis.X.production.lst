

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 15:23:51 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   002086                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _blockback
   106   002086  0010               	dw	16
   107                           
   108                           ;initializer for _blockahead
   109   002088  0010               	dw	16
   110                           
   111                           ;initializer for _wait_time
   112   00208A  00DC               	dw	220
   113                           
   114                           ;initializer for _wall_coef
   115   00208C  000F               	dw	15
   116                           
   117                           	psect	idataBANK0
   118   001C60                     __pidataBANK0:
   119                           	callstack 0
   120                           
   121                           ;initializer for _Black_setup
   122   001C60  0404               	dw	1028
   123   001C62  0000               	dw	0
   124   001C64  024B               	dw	587
   125   001C66  0000               	dw	0
   126   001C68  00A1               	dw	161
   127   001C6A  0000               	dw	0
   128                           
   129                           ;initializer for _White_setup
   130   001C6C  28FC               	dw	10492
   131   001C6E  0000               	dw	0
   132   001C70  1B55               	dw	6997
   133   001C72  0000               	dw	0
   134   001C74  0770               	dw	1904
   135   001C76  0000               	dw	0
   136                           
   137                           ;initializer for _Orange_rule
   138   001C78  005C               	dw	92
   139   001C7A  0000               	dw	0
   140   001C7C  0027               	dw	39
   141   001C7E  0000               	dw	0
   142   001C80  001C               	dw	28
   143   001C82  0000               	dw	0
   144                           
   145                           ;initializer for _Pink_rule
   146   001C84  004D               	dw	77
   147   001C86  0000               	dw	0
   148   001C88  003C               	dw	60
   149   001C8A  0000               	dw	0
   150   001C8C  0040               	dw	64
   151   001C8E  0000               	dw	0
   152                           
   153                           ;initializer for _Yellow_rule
   154   001C90  005D               	dw	93
   155   001C92  0000               	dw	0
   156   001C94  004C               	dw	76
   157   001C96  0000               	dw	0
   158   001C98  0014               	dw	20
   159   001C9A  0000               	dw	0
   160                           
   161                           ;initializer for _Blue_rule
   162   001C9C  0003               	dw	3
   163   001C9E  0000               	dw	0
   164   001CA0  0009               	dw	9
   165   001CA2  0000               	dw	0
   166   001CA4  0024               	dw	36
   167   001CA6  0000               	dw	0
   168                           
   169                           ;initializer for _Green_rule
   170   001CA8  0019               	dw	25
   171   001CAA  0000               	dw	0
   172   001CAC  0036               	dw	54
   173   001CAE  0000               	dw	0
   174   001CB0  0008               	dw	8
   175   001CB2  0000               	dw	0
   176                           
   177                           ;initializer for _Red_rule
   178   001CB4  0048               	dw	72
   179   001CB6  0000               	dw	0
   180   001CB8  0002               	dw	2
   181   001CBA  0000               	dw	0
   182   001CBC  0002               	dw	2
   183   001CBE  0000               	dw	0
   184                           
   185                           ;initializer for _twothirds
   186   001CC0  000B               	dw	11
   187                           
   188                           ;initializer for _halfback
   189   001CC2  0005               	dw	5
   190                           
   191                           	psect	idataBANK1
   192   00202E                     __pidataBANK1:
   193                           	callstack 0
   194                           
   195                           ;initializer for _White_rule
   196   00202E  0064               	dw	100
   197   002030  0000               	dw	0
   198   002032  0064               	dw	100
   199   002034  0000               	dw	0
   200   002036  0064               	dw	100
   201   002038  0000               	dw	0
   202                           
   203                           ;initializer for _Lightblue_rule
   204   00203A  0026               	dw	38
   205   00203C  0000               	dw	0
   206   00203E  0048               	dw	72
   207   002040  0000               	dw	0
   208   002042  0054               	dw	84
   209   002044  0000               	dw	0
   210   000000                     _T0CON0bits	set	4053
   211   000000                     _T0CON1bits	set	4054
   212   000000                     _TRISDbits	set	3972
   213   000000                     _SSP2CON2bits	set	3802
   214   000000                     _SSP2CLKPPS	set	3612
   215   000000                     _SSP2DATPPS	set	3613
   216   000000                     _RC7PPS	set	3689
   217   000000                     _RE2PPS	set	3700
   218   000000                     _ANSELFbits	set	3764
   219   000000                     _TRISAbits	set	3969
   220   000000                     _TRISFbits	set	3974
   221   000000                     _PORTFbits	set	3982
   222   000000                     _TRISGbits	set	3975
   223   000000                     _TRISCbits	set	3971
   224   000000                     _TRISEbits	set	3973
   225   000000                     _SSP2BUF	set	3797
   226   000000                     _SSP2ADD	set	3798
   227   000000                     _SSP2CON1bits	set	3801
   228   000000                     _LATAbits	set	3961
   229   000000                     _LATGbits	set	3967
   230   000000                     _CCPR4H	set	3873
   231   000000                     _CCPR3H	set	3877
   232   000000                     _T2PR	set	4028
   233   000000                     _T2CONbits	set	4029
   234   000000                     _CCPR2H	set	4006
   235   000000                     _CCPR1H	set	4010
   236   000000                     _LATCbits	set	3963
   237   000000                     _LATEbits	set	3965
   238   000000                     _LATFbits	set	3966
   239   000000                     _RE4PPS	set	3702
   240   000000                     _RG6PPS	set	3720
   241   000000                     _RD5PPS	set	3695
   242   000000                     _ANSELDbits	set	3751
   243   000000                     _TMR0L	set	4051
   244   000000                     _TMR0H	set	4052
   245   000000                     _INTCONbits	set	4082
   246   000000                     _T2CLKCONbits	set	4031
   247   000000                     _T2HLTbits	set	4030
   248   000000                     _CCP1CONbits	set	4011
   249   000000                     _CCPTMRS0bits	set	4013
   250   000000                     _CCP2CONbits	set	4007
   251   000000                     _CCP3CONbits	set	3878
   252   000000                     _CCP4CONbits	set	3874
   253   000000                     _SSP2CON2	set	3802
   254   000000                     _SSP2STAT	set	3800
   255   000000                     _PIE0bits	set	3625
   256   000000                     _RD6PPS	set	3696
   257   000000                     _PIE2bits	set	3627
   258   000000                     _PIR0bits	set	3635
   259                           
   260                           ; #config settings
   261                           
   262                           	psect	cinit
   263   001970                     __pcinit:
   264                           	callstack 0
   265   001970                     start_initialization:
   266                           	callstack 0
   267   001970                     __initialization:
   268                           	callstack 0
   269                           
   270                           ; Initialize objects allocated to BANK1 (24 bytes)
   271                           ; load TBLPTR registers with __pidataBANK1
   272   001970  0E2E               	movlw	low __pidataBANK1
   273   001972  6EF6               	movwf	tblptrl,c
   274   001974  0E20               	movlw	high __pidataBANK1
   275   001976  6EF7               	movwf	tblptrh,c
   276   001978  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   277   00197A  6EF8               	movwf	tblptru,c
   278   00197C  EE01  F078         	lfsr	0,__pdataBANK1
   279   001980  EE10 F018          	lfsr	1,24
   280   001984                     copy_data0:
   281   001984  0009               	tblrd		*+
   282   001986  CFF5 FFEE          	movff	tablat,postinc0
   283   00198A  50E5               	movf	postdec1,w,c
   284   00198C  50E1               	movf	fsr1l,w,c
   285   00198E  E1FA               	bnz	copy_data0
   286                           
   287                           ; Initialize objects allocated to BANK0 (100 bytes)
   288                           ; load TBLPTR registers with __pidataBANK0
   289   001990  0E60               	movlw	low __pidataBANK0
   290   001992  6EF6               	movwf	tblptrl,c
   291   001994  0E1C               	movlw	high __pidataBANK0
   292   001996  6EF7               	movwf	tblptrh,c
   293   001998  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   294   00199A  6EF8               	movwf	tblptru,c
   295   00199C  EE00  F060         	lfsr	0,__pdataBANK0
   296   0019A0  EE10 F064          	lfsr	1,100
   297   0019A4                     copy_data1:
   298   0019A4  0009               	tblrd		*+
   299   0019A6  CFF5 FFEE          	movff	tablat,postinc0
   300   0019AA  50E5               	movf	postdec1,w,c
   301   0019AC  50E1               	movf	fsr1l,w,c
   302   0019AE  E1FA               	bnz	copy_data1
   303                           
   304                           ; Initialize objects allocated to COMRAM (8 bytes)
   305                           ; load TBLPTR registers with __pidataCOMRAM
   306   0019B0  0E86               	movlw	low __pidataCOMRAM
   307   0019B2  6EF6               	movwf	tblptrl,c
   308   0019B4  0E20               	movlw	high __pidataCOMRAM
   309   0019B6  6EF7               	movwf	tblptrh,c
   310   0019B8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   311   0019BA  6EF8               	movwf	tblptru,c
   312   0019BC  EE00  F051         	lfsr	0,__pdataCOMRAM
   313   0019C0  EE10 F008          	lfsr	1,8
   314   0019C4                     copy_data2:
   315   0019C4  0009               	tblrd		*+
   316   0019C6  CFF5 FFEE          	movff	tablat,postinc0
   317   0019CA  50E5               	movf	postdec1,w,c
   318   0019CC  50E1               	movf	fsr1l,w,c
   319   0019CE  E1FA               	bnz	copy_data2
   320                           
   321                           ; Clear objects allocated to BANK2 (200 bytes)
   322   0019D0  EE02  F000         	lfsr	0,__pbssBANK2
   323   0019D4  0EC8               	movlw	200
   324   0019D6                     clear_0:
   325   0019D6  6AEE               	clrf	postinc0,c
   326   0019D8  06E8               	decf	wreg,f,c
   327   0019DA  E1FD               	bnz	clear_0
   328                           
   329                           ; Clear objects allocated to BANK1 (120 bytes)
   330   0019DC  EE01  F000         	lfsr	0,__pbssBANK1
   331   0019E0  0E78               	movlw	120
   332   0019E2                     clear_1:
   333   0019E2  6AEE               	clrf	postinc0,c
   334   0019E4  06E8               	decf	wreg,f,c
   335   0019E6  E1FD               	bnz	clear_1
   336                           
   337                           ; Clear objects allocated to BANK0 (12 bytes)
   338   0019E8  EE00  F0F0         	lfsr	0,__pbssBANK0
   339   0019EC  0E0C               	movlw	12
   340   0019EE                     clear_2:
   341   0019EE  6AEE               	clrf	postinc0,c
   342   0019F0  06E8               	decf	wreg,f,c
   343   0019F2  E1FD               	bnz	clear_2
   344                           
   345                           ; Clear objects allocated to COMRAM (6 bytes)
   346   0019F4  6A5E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   347   0019F6  6A5D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   348   0019F8  6A5C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   349   0019FA  6A5B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   350   0019FC  6A5A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   351   0019FE  6A59               	clrf	__pbssCOMRAM& (0+255),c
   352   001A00                     end_of_initialization:
   353                           	callstack 0
   354   001A00                     __end_of__initialization:
   355                           	callstack 0
   356   001A00  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   357   001A02  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   358   001A04  0100               	movlb	0
   359   001A06  EFA9  F005         	goto	_main	;jump to C main() function
   360                           
   361                           	psect	bssCOMRAM
   362   000059                     __pbssCOMRAM:
   363                           	callstack 0
   364   000059                     _state:
   365                           	callstack 0
   366   000059                     	ds	2
   367   00005B                     _index:
   368                           	callstack 0
   369   00005B                     	ds	2
   370   00005D                     _seconds:
   371                           	callstack 0
   372   00005D                     	ds	2
   373                           
   374                           	psect	dataCOMRAM
   375   000051                     __pdataCOMRAM:
   376                           	callstack 0
   377   000051                     _blockback:
   378                           	callstack 0
   379   000051                     	ds	2
   380   000053                     _blockahead:
   381                           	callstack 0
   382   000053                     	ds	2
   383   000055                     _wait_time:
   384                           	callstack 0
   385   000055                     	ds	2
   386   000057                     _wall_coef:
   387                           	callstack 0
   388   000057                     	ds	2
   389                           
   390                           	psect	bssBANK0
   391   0000F0                     __pbssBANK0:
   392                           	callstack 0
   393   0000F0                     _RGB:
   394                           	callstack 0
   395   0000F0                     	ds	12
   396                           
   397                           	psect	dataBANK0
   398   000060                     __pdataBANK0:
   399                           	callstack 0
   400   000060                     _Black_setup:
   401                           	callstack 0
   402   000060                     	ds	12
   403   00006C                     _White_setup:
   404                           	callstack 0
   405   00006C                     	ds	12
   406   000078                     _Orange_rule:
   407                           	callstack 0
   408   000078                     	ds	12
   409   000084                     _Pink_rule:
   410                           	callstack 0
   411   000084                     	ds	12
   412   000090                     _Yellow_rule:
   413                           	callstack 0
   414   000090                     	ds	12
   415   00009C                     _Blue_rule:
   416                           	callstack 0
   417   00009C                     	ds	12
   418   0000A8                     _Green_rule:
   419                           	callstack 0
   420   0000A8                     	ds	12
   421   0000B4                     _Red_rule:
   422                           	callstack 0
   423   0000B4                     	ds	12
   424   0000C0                     _twothirds:
   425                           	callstack 0
   426   0000C0                     	ds	2
   427   0000C2                     _halfback:
   428                           	callstack 0
   429   0000C2                     	ds	2
   430                           
   431                           	psect	bssBANK1
   432   000100                     __pbssBANK1:
   433                           	callstack 0
   434   000100                     _Color_rules:
   435                           	callstack 0
   436   000100                     	ds	108
   437   00016C                     _Black_rule:
   438                           	callstack 0
   439   00016C                     	ds	12
   440                           
   441                           	psect	dataBANK1
   442   000178                     __pdataBANK1:
   443                           	callstack 0
   444   000178                     _White_rule:
   445                           	callstack 0
   446   000178                     	ds	12
   447   000184                     _Lightblue_rule:
   448                           	callstack 0
   449   000184                     	ds	12
   450                           
   451                           	psect	bssBANK2
   452   000200                     __pbssBANK2:
   453                           	callstack 0
   454   000200                     _movement_list:
   455                           	callstack 0
   456   000200                     	ds	200
   457                           
   458                           	psect	cstackBANK0
   459   0000C4                     __pcstackBANK0:
   460                           	callstack 0
   461   0000C4                     _get_color_code$2447:
   462                           	callstack 0
   463                           
   464                           ; 12 bytes @ 0x0
   465   0000C4                     	ds	12
   466   0000D0                     _get_color_code$458:
   467                           	callstack 0
   468                           
   469                           ; 4 bytes @ 0xC
   470   0000D0                     	ds	4
   471   0000D4                     _get_color_code$459:
   472                           	callstack 0
   473                           
   474                           ; 4 bytes @ 0x10
   475   0000D4                     	ds	4
   476   0000D8                     _get_color_code$460:
   477                           	callstack 0
   478                           
   479                           ; 4 bytes @ 0x14
   480   0000D8                     	ds	4
   481   0000DC                     get_color_code@min_value:
   482                           	callstack 0
   483                           
   484                           ; 2 bytes @ 0x18
   485   0000DC                     	ds	2
   486   0000DE                     get_color_code@min_index:
   487                           	callstack 0
   488                           
   489                           ; 2 bytes @ 0x1A
   490   0000DE                     	ds	2
   491   0000E0                     get_color_code@value:
   492                           	callstack 0
   493                           
   494                           ; 2 bytes @ 0x1C
   495   0000E0                     	ds	2
   496   0000E2                     get_color_code@i:
   497                           	callstack 0
   498                           
   499                           ; 2 bytes @ 0x1E
   500   0000E2                     	ds	2
   501   0000E4                     get_color_code@NormalizedRGB:
   502                           	callstack 0
   503                           
   504                           ; 12 bytes @ 0x20
   505   0000E4                     	ds	12
   506                           
   507                           	psect	cstackCOMRAM
   508   000001                     __pcstackCOMRAM:
   509                           	callstack 0
   510   000001                     ??_add_seconds_to_list:
   511   000001                     ??_I2C_2_Master_Idle:
   512   000001                     ?_get_state:
   513                           	callstack 0
   514   000001                     ?___wmul:
   515                           	callstack 0
   516   000001                     ?___lmul:
   517                           	callstack 0
   518   000001                     set_led_color@color:
   519                           	callstack 0
   520   000001                     initDCmotorsPWM@PWMperiod:
   521                           	callstack 0
   522   000001                     ___wmul@multiplier:
   523                           	callstack 0
   524   000001                     ___lmul@multiplier:
   525                           	callstack 0
   526                           
   527                           ; 4 bytes @ 0x0
   528   000001                     	ds	1
   529   000002                     ??_I2C_2_Master_Read:
   530   000002                     I2C_2_Master_Write@data_byte:
   531                           	callstack 0
   532                           
   533                           ; 1 bytes @ 0x1
   534   000002                     	ds	1
   535   000003                     color_writetoaddr@value:
   536                           	callstack 0
   537   000003                     I2C_2_Master_Read@ack:
   538                           	callstack 0
   539   000003                     ___wmul@multiplicand:
   540                           	callstack 0
   541                           
   542                           ; 2 bytes @ 0x2
   543   000003                     	ds	1
   544   000004                     color_writetoaddr@address:
   545                           	callstack 0
   546   000004                     I2C_2_Master_Read@tmp:
   547                           	callstack 0
   548                           
   549                           ; 1 bytes @ 0x3
   550   000004                     	ds	1
   551   000005                     ?_color_read_Red:
   552                           	callstack 0
   553   000005                     ?_color_read_Blue:
   554                           	callstack 0
   555   000005                     ?_color_read_Green:
   556                           	callstack 0
   557   000005                     ?_color_read_Clear:
   558                           	callstack 0
   559   000005                     ___wmul@product:
   560                           	callstack 0
   561   000005                     ___lmul@multiplicand:
   562                           	callstack 0
   563                           
   564                           ; 4 bytes @ 0x4
   565   000005                     	ds	2
   566   000007                     ??_color_read_Red:
   567   000007                     ??_color_read_Blue:
   568   000007                     ??_color_read_Green:
   569   000007                     ??_color_read_Clear:
   570   000007                     ?_get_color_distance:
   571                           	callstack 0
   572   000007                     ?___lwdiv:
   573                           	callstack 0
   574   000007                     ___lwdiv@dividend:
   575                           	callstack 0
   576   000007                     get_color_distance@color1:
   577                           	callstack 0
   578                           
   579                           ; 12 bytes @ 0x6
   580   000007                     	ds	2
   581   000009                     ___lwdiv@divisor:
   582                           	callstack 0
   583   000009                     ___lmul@product:
   584                           	callstack 0
   585                           
   586                           ; 4 bytes @ 0x8
   587   000009                     	ds	1
   588   00000A                     color_read_Red@tmp:
   589                           	callstack 0
   590   00000A                     color_read_Blue@tmp:
   591                           	callstack 0
   592   00000A                     color_read_Green@tmp:
   593                           	callstack 0
   594   00000A                     color_read_Clear@tmp:
   595                           	callstack 0
   596                           
   597                           ; 2 bytes @ 0x9
   598   00000A                     	ds	1
   599   00000B                     ___lwdiv@quotient:
   600                           	callstack 0
   601                           
   602                           ; 2 bytes @ 0xA
   603   00000B                     	ds	1
   604   00000C                     ??_calibrate_white:
   605   00000C                     ?_get_wall_presence:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0xB
   609   00000C                     	ds	1
   610   00000D                     ?___lldiv:
   611                           	callstack 0
   612   00000D                     ___lwdiv@counter:
   613                           	callstack 0
   614   00000D                     ___lldiv@dividend:
   615                           	callstack 0
   616                           
   617                           ; 4 bytes @ 0xC
   618   00000D                     	ds	1
   619   00000E                     ??_calibrate_black:
   620   00000E                     ??_get_wall_presence:
   621   00000E                     setMotorPWM@m:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0xD
   625   00000E                     	ds	2
   626   000010                     ??_setMotorPWM:
   627   000010                     calibrate_black@clear1:
   628                           	callstack 0
   629   000010                     get_wall_presence@clear1:
   630                           	callstack 0
   631                           
   632                           ; 2 bytes @ 0xF
   633   000010                     	ds	1
   634   000011                     ___lldiv@divisor:
   635                           	callstack 0
   636                           
   637                           ; 4 bytes @ 0x10
   638   000011                     	ds	1
   639   000012                     setMotorPWM@posDuty:
   640                           	callstack 0
   641   000012                     calibrate_black@clear2:
   642                           	callstack 0
   643   000012                     get_wall_presence@clear2:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x11
   647   000012                     	ds	1
   648   000013                     setMotorPWM@negDuty:
   649                           	callstack 0
   650   000013                     get_color_distance@color2:
   651                           	callstack 0
   652                           
   653                           ; 12 bytes @ 0x12
   654   000013                     	ds	1
   655   000014                     stop@mL:
   656                           	callstack 0
   657   000014                     turnLeft@mL:
   658                           	callstack 0
   659   000014                     turnRight@mL:
   660                           	callstack 0
   661   000014                     turnLeftLong@mL:
   662                           	callstack 0
   663   000014                     turnRightLong@mL:
   664                           	callstack 0
   665   000014                     fullSpeedAhead@mL:
   666                           	callstack 0
   667   000014                     TimedfullSpeedAhead@mL:
   668                           	callstack 0
   669   000014                     moveBack@mL:
   670                           	callstack 0
   671   000014                     _calibrate_black$2448:
   672                           	callstack 0
   673                           
   674                           ; 2 bytes @ 0x13
   675   000014                     	ds	1
   676   000015                     ___lldiv@quotient:
   677                           	callstack 0
   678                           
   679                           ; 4 bytes @ 0x14
   680   000015                     	ds	1
   681   000016                     ??_color_click_init:
   682   000016                     stop@mR:
   683                           	callstack 0
   684   000016                     turnLeft@mR:
   685                           	callstack 0
   686   000016                     turnRight@mR:
   687                           	callstack 0
   688   000016                     turnLeftLong@mR:
   689                           	callstack 0
   690   000016                     turnRightLong@mR:
   691                           	callstack 0
   692   000016                     fullSpeedAhead@mR:
   693                           	callstack 0
   694   000016                     TimedfullSpeedAhead@mR:
   695                           	callstack 0
   696   000016                     moveBack@mR:
   697                           	callstack 0
   698                           
   699                           ; 2 bytes @ 0x15
   700   000016                     	ds	2
   701   000018                     ??_stop:
   702   000018                     ??_turnLeft:
   703   000018                     ??_turnRight:
   704   000018                     ??_turnLeftLong:
   705   000018                     ??_turnRightLong:
   706   000018                     TimedfullSpeedAhead@time:
   707                           	callstack 0
   708   000018                     moveBack@time:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x17
   712   000018                     	ds	1
   713   000019                     ___lldiv@counter:
   714                           	callstack 0
   715                           
   716                           ; 1 bytes @ 0x18
   717   000019                     	ds	1
   718   00001A                     turnLeft@k:
   719                           	callstack 0
   720   00001A                     turnRight@k:
   721                           	callstack 0
   722   00001A                     turnLeftLong@k:
   723                           	callstack 0
   724   00001A                     turnRightLong@k:
   725                           	callstack 0
   726                           
   727                           ; 2 bytes @ 0x19
   728   00001A                     	ds	2
   729   00001C                     turnLeft@i:
   730                           	callstack 0
   731   00001C                     turnRight@i:
   732                           	callstack 0
   733   00001C                     turnLeftLong@i:
   734                           	callstack 0
   735   00001C                     turnRightLong@i:
   736                           	callstack 0
   737                           
   738                           ; 2 bytes @ 0x1B
   739   00001C                     	ds	2
   740   00001E                     RobotMovement@color:
   741                           	callstack 0
   742   00001E                     return_back@motorL:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x1D
   746   00001E                     	ds	1
   747   00001F                     ??_get_color_distance:
   748                           
   749                           ; 1 bytes @ 0x1E
   750   00001F                     	ds	1
   751   000020                     RobotMovement@motorL:
   752                           	callstack 0
   753   000020                     return_back@motorR:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x1F
   757   000020                     	ds	2
   758   000022                     ??_return_back:
   759   000022                     RobotMovement@motorR:
   760                           	callstack 0
   761                           
   762                           ; 2 bytes @ 0x21
   763   000022                     	ds	1
   764   000023                     _get_color_distance$417:
   765                           	callstack 0
   766                           
   767                           ; 4 bytes @ 0x22
   768   000023                     	ds	1
   769   000024                     
   770                           ; 1 bytes @ 0x23
   771   000024                     	ds	2
   772   000026                     RobotMovement@i:
   773                           	callstack 0
   774                           
   775                           ; 2 bytes @ 0x25
   776   000026                     	ds	1
   777   000027                     _get_color_distance$419:
   778                           	callstack 0
   779                           
   780                           ; 4 bytes @ 0x26
   781   000027                     	ds	1
   782   000028                     RobotMovement@i_1271:
   783                           	callstack 0
   784                           
   785                           ; 2 bytes @ 0x27
   786   000028                     	ds	3
   787   00002B                     _get_color_distance$421:
   788                           	callstack 0
   789                           
   790                           ; 4 bytes @ 0x2A
   791   00002B                     	ds	4
   792   00002F                     get_color_distance@R_offset:
   793                           	callstack 0
   794                           
   795                           ; 2 bytes @ 0x2E
   796   00002F                     	ds	2
   797   000031                     get_color_distance@G_offset:
   798                           	callstack 0
   799                           
   800                           ; 2 bytes @ 0x30
   801   000031                     	ds	2
   802   000033                     get_color_distance@B_offset:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x32
   806   000033                     	ds	2
   807   000035                     ?_get_color_code:
   808                           	callstack 0
   809                           
   810                           ; 2 bytes @ 0x34
   811   000035                     	ds	2
   812   000037                     ??_get_color_code:
   813                           
   814                           ; 1 bytes @ 0x36
   815   000037                     	ds	2
   816   000039                     ??_main:
   817                           
   818                           ; 1 bytes @ 0x38
   819   000039                     	ds	2
   820   00003B                     main@color_code:
   821                           	callstack 0
   822                           
   823                           ; 2 bytes @ 0x3A
   824   00003B                     	ds	2
   825   00003D                     main@state:
   826                           	callstack 0
   827                           
   828                           ; 2 bytes @ 0x3C
   829   00003D                     	ds	2
   830   00003F                     main@motorL:
   831                           	callstack 0
   832                           
   833                           ; 9 bytes @ 0x3E
   834   00003F                     	ds	9
   835   000048                     main@motorR:
   836                           	callstack 0
   837                           
   838                           ; 9 bytes @ 0x47
   839   000048                     	ds	9
   840                           
   841 ;;
   842 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   843 ;;
   844 ;; *************** function _main *****************
   845 ;; Defined at:
   846 ;;		line 17 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;  color_code      2   58[COMRAM] unsigned int 
   851 ;;  state           2   60[COMRAM] int 
   852 ;;  motorR          9   71[COMRAM] struct DC_motor
   853 ;;  motorL          9   62[COMRAM] struct DC_motor
   854 ;;  PWMcycle        2    0        unsigned int 
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   865 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   867 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   868 ;;Total ram usage:       24 bytes
   869 ;; Hardware stack levels required when called: 7
   870 ;; This function calls:
   871 ;;		_Interrupts_init
   872 ;;		_RobotMovement
   873 ;;		_TimedfullSpeedAhead
   874 ;;		_Timer0_init
   875 ;;		_add_seconds_to_list
   876 ;;		_color_click_init
   877 ;;		_fullSpeedAhead
   878 ;;		_get_color_code
   879 ;;		_get_state
   880 ;;		_get_wall_presence
   881 ;;		_initDCmotorsPWM
   882 ;;		_return_back
   883 ;;		_stop
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890   000B52                     __ptext0:
   891                           	callstack 0
   892   000B52                     _main:
   893                           	callstack 24
   894   000B52                     
   895                           ;main.c: 18:     Timer0_init();
   896   000B52  EC07  F010         	call	_Timer0_init	;wreg free
   897   000B56                     
   898                           ;main.c: 19:     Interrupts_init();
   899   000B56  EC29  F010         	call	_Interrupts_init	;wreg free
   900   000B5A                     
   901                           ;main.c: 20:     initDCmotorsPWM(99);
   902   000B5A  0E00               	movlw	0
   903   000B5C  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   904   000B5E  0E63               	movlw	99
   905   000B60  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   906   000B62  EC05  F00D         	call	_initDCmotorsPWM	;wreg free
   907   000B66                     
   908                           ;main.c: 22:     color_click_init();
   909   000B66  EC27  F00B         	call	_color_click_init	;wreg free
   910   000B6A                     
   911                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   912   000B6A  010E               	movlb	14	; () banked
   913   000B6C  95B4               	bcf	180,2,b	;volatile
   914   000B6E                     
   915                           ; BSR set to: 14
   916                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   917   000B6E  8486               	bsf	134,2,c	;volatile
   918   000B70                     
   919                           ; BSR set to: 14
   920                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   921   000B70  0E00               	movlw	0
   922   000B72  6E3F               	movwf	main@motorL^0,c
   923   000B74                     
   924                           ; BSR set to: 14
   925                           ;main.c: 29:     motorL.direction=1;
   926   000B74  0E01               	movlw	1
   927   000B76  6E40               	movwf	(main@motorL+1)^0,c
   928   000B78                     
   929                           ; BSR set to: 14
   930                           ;main.c: 30:     motorL.brakemode=1;
   931   000B78  0E01               	movlw	1
   932   000B7A  6E41               	movwf	(main@motorL+2)^0,c
   933   000B7C                     
   934                           ; BSR set to: 14
   935                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   936   000B7C  0EAA               	movlw	170
   937   000B7E  6E44               	movwf	(main@motorL+5)^0,c
   938   000B80  0E0F               	movlw	15
   939   000B82  6E45               	movwf	(main@motorL+6)^0,c
   940   000B84                     
   941                           ; BSR set to: 14
   942                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   943   000B84  0EA6               	movlw	166
   944   000B86  6E46               	movwf	(main@motorL+7)^0,c
   945   000B88  0E0F               	movlw	15
   946   000B8A  6E47               	movwf	(main@motorL+8)^0,c
   947   000B8C                     
   948                           ; BSR set to: 14
   949                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   950   000B8C  0E00               	movlw	0
   951   000B8E  6E43               	movwf	(main@motorL+4)^0,c
   952   000B90  0E63               	movlw	99
   953   000B92  6E42               	movwf	(main@motorL+3)^0,c
   954   000B94                     
   955                           ; BSR set to: 14
   956                           ;main.c: 35:     motorR.power=0;
   957   000B94  0E00               	movlw	0
   958   000B96  6E48               	movwf	main@motorR^0,c
   959   000B98                     
   960                           ; BSR set to: 14
   961                           ;main.c: 36:     motorR.direction=1;
   962   000B98  0E01               	movlw	1
   963   000B9A  6E49               	movwf	(main@motorR+1)^0,c
   964   000B9C                     
   965                           ; BSR set to: 14
   966                           ;main.c: 37:     motorR.brakemode=1;
   967   000B9C  0E01               	movlw	1
   968   000B9E  6E4A               	movwf	(main@motorR+2)^0,c
   969   000BA0                     
   970                           ; BSR set to: 14
   971                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   972   000BA0  0E25               	movlw	37
   973   000BA2  6E4D               	movwf	(main@motorR+5)^0,c
   974   000BA4  0E0F               	movlw	15
   975   000BA6  6E4E               	movwf	(main@motorR+6)^0,c
   976   000BA8                     
   977                           ; BSR set to: 14
   978                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   979   000BA8  0E21               	movlw	33
   980   000BAA  6E4F               	movwf	(main@motorR+7)^0,c
   981   000BAC  0E0F               	movlw	15
   982   000BAE  6E50               	movwf	(main@motorR+8)^0,c
   983   000BB0                     
   984                           ; BSR set to: 14
   985                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   986   000BB0  0E00               	movlw	0
   987   000BB2  6E4C               	movwf	(main@motorR+4)^0,c
   988   000BB4  0E63               	movlw	99
   989   000BB6  6E4B               	movwf	(main@motorR+3)^0,c
   990   000BB8                     
   991                           ; BSR set to: 14
   992                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   993   000BB8  0E52               	movlw	82
   994   000BBA  6E3A               	movwf	(??_main+1)^0,c
   995   000BBC  0E2B               	movlw	43
   996   000BBE  6E39               	movwf	??_main^0,c
   997   000BC0  0E00               	movlw	0
   998   000BC2                     u2547:
   999   000BC2  2EE8               	decfsz	wreg,f,c
  1000   000BC4  D7FE               	bra	u2547
  1001   000BC6  2E39               	decfsz	??_main^0,f,c
  1002   000BC8  D7FC               	bra	u2547
  1003   000BCA  2E3A               	decfsz	(??_main+1)^0,f,c
  1004   000BCC  D7FA               	bra	u2547
  1005   000BCE  D000               	nop2	
  1006   000BD0                     
  1007                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
  1008   000BD0  0E3F               	movlw	low main@motorL
  1009   000BD2  6E14               	movwf	fullSpeedAhead@mL^0,c
  1010   000BD4  0E00               	movlw	high main@motorL
  1011   000BD6  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1012   000BD8  0E48               	movlw	low main@motorR
  1013   000BDA  6E16               	movwf	fullSpeedAhead@mR^0,c
  1014   000BDC  0E00               	movlw	high main@motorR
  1015   000BDE  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1016   000BE0  EC62  F00E         	call	_fullSpeedAhead	;wreg free
  1017   000BE4                     l3116:
  1018                           
  1019                           ;main.c: 45:         int state = get_state();
  1020   000BE4  EC2F  F010         	call	_get_state	;wreg free
  1021   000BE8  C001  F03D         	movff	?_get_state,main@state
  1022   000BEC  C002  F03E         	movff	?_get_state+1,main@state+1
  1023   000BF0                     
  1024                           ;main.c: 46:         if(get_wall_presence() == 1 && state == 0 ){
  1025   000BF0  EC6A  F00C         	call	_get_wall_presence	;wreg free
  1026   000BF4  040C               	decf	?_get_wall_presence^0,w,c
  1027   000BF6  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
  1028   000BF8  A4D8               	btfss	status,2,c
  1029   000BFA  EF01  F006         	goto	u2141
  1030   000BFE  EF03  F006         	goto	u2140
  1031   000C02                     u2141:
  1032   000C02  EF59  F006         	goto	l3136
  1033   000C06                     u2140:
  1034   000C06  503D               	movf	main@state^0,w,c
  1035   000C08  103E               	iorwf	(main@state+1)^0,w,c
  1036   000C0A  A4D8               	btfss	status,2,c
  1037   000C0C  EF0A  F006         	goto	u2151
  1038   000C10  EF0C  F006         	goto	u2150
  1039   000C14                     u2151:
  1040   000C14  EF59  F006         	goto	l3136
  1041   000C18                     u2150:
  1042   000C18                     
  1043                           ;main.c: 48:             add_seconds_to_list();
  1044   000C18  EC54  F00F         	call	_add_seconds_to_list	;wreg free
  1045   000C1C                     
  1046                           ;main.c: 49:             stop(&motorL,&motorR);
  1047   000C1C  0E3F               	movlw	low main@motorL
  1048   000C1E  6E14               	movwf	stop@mL^0,c
  1049   000C20  0E00               	movlw	high main@motorL
  1050   000C22  6E15               	movwf	(stop@mL+1)^0,c
  1051   000C24  0E48               	movlw	low main@motorR
  1052   000C26  6E16               	movwf	stop@mR^0,c
  1053   000C28  0E00               	movlw	high main@motorR
  1054   000C2A  6E17               	movwf	(stop@mR+1)^0,c
  1055   000C2C  EC2F  F00F         	call	_stop	;wreg free
  1056   000C30                     
  1057                           ;main.c: 50:             unsigned int color_code = get_color_code();
  1058   000C30  ECC0  F002         	call	_get_color_code	;wreg free
  1059   000C34  C035  F03B         	movff	?_get_color_code,main@color_code
  1060   000C38  C036  F03C         	movff	?_get_color_code+1,main@color_code+1
  1061   000C3C                     
  1062                           ;main.c: 51:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1063   000C3C  0E3F               	movlw	low main@motorL
  1064   000C3E  6E14               	movwf	TimedfullSpeedAhead@mL^0,c
  1065   000C40  0E00               	movlw	high main@motorL
  1066   000C42  6E15               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1067   000C44  0E48               	movlw	low main@motorR
  1068   000C46  6E16               	movwf	TimedfullSpeedAhead@mR^0,c
  1069   000C48  0E00               	movlw	high main@motorR
  1070   000C4A  6E17               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1071   000C4C  0E00               	movlw	0
  1072   000C4E  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1073   000C50  0E05               	movlw	5
  1074   000C52  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1075   000C54  EC87  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1076   000C58                     
  1077                           ;main.c: 52:             RobotMovement(color_code, &motorL, &motorR);
  1078   000C58  C03B  F01E         	movff	main@color_code,RobotMovement@color
  1079   000C5C  C03C  F01F         	movff	main@color_code+1,RobotMovement@color+1
  1080   000C60  0E3F               	movlw	low main@motorL
  1081   000C62  6E20               	movwf	RobotMovement@motorL^0,c
  1082   000C64  0E00               	movlw	high main@motorL
  1083   000C66  6E21               	movwf	(RobotMovement@motorL+1)^0,c
  1084   000C68  0E48               	movlw	low main@motorR
  1085   000C6A  6E22               	movwf	RobotMovement@motorR^0,c
  1086   000C6C  0E00               	movlw	high main@motorR
  1087   000C6E  6E23               	movwf	(RobotMovement@motorR+1)^0,c
  1088   000C70  EC19  F000         	call	_RobotMovement	;wreg free
  1089   000C74                     
  1090                           ;main.c: 53:             if (state == 0)
  1091   000C74  503D               	movf	main@state^0,w,c
  1092   000C76  103E               	iorwf	(main@state+1)^0,w,c
  1093   000C78  A4D8               	btfss	status,2,c
  1094   000C7A  EF41  F006         	goto	u2161
  1095   000C7E  EF43  F006         	goto	u2160
  1096   000C82                     u2161:
  1097   000C82  EFF2  F005         	goto	l3116
  1098   000C86                     u2160:
  1099   000C86                     
  1100                           ;main.c: 54:             {;main.c: 55:                 stop(&motorL,&motorR);
  1101   000C86  0E3F               	movlw	low main@motorL
  1102   000C88  6E14               	movwf	stop@mL^0,c
  1103   000C8A  0E00               	movlw	high main@motorL
  1104   000C8C  6E15               	movwf	(stop@mL+1)^0,c
  1105   000C8E  0E48               	movlw	low main@motorR
  1106   000C90  6E16               	movwf	stop@mR^0,c
  1107   000C92  0E00               	movlw	high main@motorR
  1108   000C94  6E17               	movwf	(stop@mR+1)^0,c
  1109   000C96  EC2F  F00F         	call	_stop	;wreg free
  1110                           
  1111                           ;main.c: 56:                 fullSpeedAhead(&motorL,&motorR);
  1112   000C9A  0E3F               	movlw	low main@motorL
  1113   000C9C  6E14               	movwf	fullSpeedAhead@mL^0,c
  1114   000C9E  0E00               	movlw	high main@motorL
  1115   000CA0  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1116   000CA2  0E48               	movlw	low main@motorR
  1117   000CA4  6E16               	movwf	fullSpeedAhead@mR^0,c
  1118   000CA6  0E00               	movlw	high main@motorR
  1119   000CA8  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1120   000CAA  EC62  F00E         	call	_fullSpeedAhead	;wreg free
  1121   000CAE  EFF2  F005         	goto	l3116
  1122   000CB2                     l3136:
  1123   000CB2  043D               	decf	main@state^0,w,c
  1124   000CB4  103E               	iorwf	(main@state+1)^0,w,c
  1125   000CB6  A4D8               	btfss	status,2,c
  1126   000CB8  EF60  F006         	goto	u2171
  1127   000CBC  EF62  F006         	goto	u2170
  1128   000CC0                     u2171:
  1129   000CC0  EF6E  F006         	goto	l448
  1130   000CC4                     u2170:
  1131   000CC4                     
  1132                           ;main.c: 59:             return_back(&motorL, &motorR);
  1133   000CC4  0E3F               	movlw	low main@motorL
  1134   000CC6  6E1E               	movwf	return_back@motorL^0,c
  1135   000CC8  0E00               	movlw	high main@motorL
  1136   000CCA  6E1F               	movwf	(return_back@motorL+1)^0,c
  1137   000CCC  0E48               	movlw	low main@motorR
  1138   000CCE  6E20               	movwf	return_back@motorR^0,c
  1139   000CD0  0E00               	movlw	high main@motorR
  1140   000CD2  6E21               	movwf	(return_back@motorR+1)^0,c
  1141   000CD4  EC8F  F004         	call	_return_back	;wreg free
  1142                           
  1143                           ;main.c: 60:         }else{
  1144   000CD8  EFF2  F005         	goto	l3116
  1145   000CDC                     l448:
  1146   000CDC  EFF2  F005         	goto	l3116
  1147   000CE0  EF17  F000         	goto	start
  1148   000CE4                     __end_of_main:
  1149                           	callstack 0
  1150                           
  1151 ;; *************** function _return_back *****************
  1152 ;; Defined at:
  1153 ;;		line 457 in file "dc_motor.c"
  1154 ;; Parameters:    Size  Location     Type
  1155 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  1156 ;;		 -> main@motorL(9), 
  1157 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  1158 ;;		 -> main@motorR(9), 
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1174 ;;Total ram usage:        6 bytes
  1175 ;; Hardware stack levels used: 1
  1176 ;; Hardware stack levels required when called: 5
  1177 ;; This function calls:
  1178 ;;		_TimedfullSpeedAhead
  1179 ;;		_moveBack
  1180 ;;		_stop
  1181 ;;		_turnLeft
  1182 ;;		_turnLeftLong
  1183 ;;		_turnRight
  1184 ;;		_turnRightLong
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           	psect	text1
  1191   00091E                     __ptext1:
  1192                           	callstack 0
  1193   00091E                     _return_back:
  1194                           	callstack 25
  1195   00091E                     
  1196                           ;dc_motor.c: 457: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 458: {;dc_motor.c: 459:     while (index > 0){
  1197   00091E  EF8E  F005         	goto	l314
  1198   000922                     l3028:
  1199                           
  1200                           ;dc_motor.c: 460:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1201   000922  90D8               	bcf	status,0,c
  1202   000924  345B               	rlcf	_index^0,w,c
  1203   000926  6ED9               	movwf	fsr2l,c
  1204   000928  345C               	rlcf	(_index+1)^0,w,c
  1205   00092A  6EDA               	movwf	fsr2h,c
  1206   00092C  0EFE               	movlw	low (_movement_list+65534)
  1207   00092E  26D9               	addwf	fsr2l,f,c
  1208   000930  0E01               	movlw	high (_movement_list+65534)
  1209   000932  22DA               	addwfc	fsr2h,f,c
  1210   000934  28DE               	incf	postinc2,w,c
  1211   000936  E106               	bnz	u2061
  1212   000938  28DE               	incf	postinc2,w,c
  1213   00093A  A4D8               	btfss	status,2,c
  1214   00093C  EFA2  F004         	goto	u2061
  1215   000940  EFA4  F004         	goto	u2060
  1216   000944                     u2061:
  1217   000944  EFB0  F004         	goto	l3032
  1218   000948                     u2060:
  1219   000948  C01E  F014         	movff	return_back@motorL,turnLeft@mL
  1220   00094C  C01F  F015         	movff	return_back@motorL+1,turnLeft@mL+1
  1221   000950  C020  F016         	movff	return_back@motorR,turnLeft@mR
  1222   000954  C021  F017         	movff	return_back@motorR+1,turnLeft@mR+1
  1223   000958  EC8B  F008         	call	_turnLeft	;wreg free
  1224   00095C  EF81  F005         	goto	l3056
  1225   000960                     l3032:
  1226   000960  90D8               	bcf	status,0,c
  1227   000962  345B               	rlcf	_index^0,w,c
  1228   000964  6ED9               	movwf	fsr2l,c
  1229   000966  345C               	rlcf	(_index+1)^0,w,c
  1230   000968  6EDA               	movwf	fsr2h,c
  1231   00096A  0EFE               	movlw	low (_movement_list+65534)
  1232   00096C  26D9               	addwf	fsr2l,f,c
  1233   00096E  0E01               	movlw	high (_movement_list+65534)
  1234   000970  22DA               	addwfc	fsr2h,f,c
  1235   000972  0EFE               	movlw	254
  1236   000974  18DE               	xorwf	postinc2,w,c
  1237   000976  E106               	bnz	u2071
  1238   000978  28DE               	incf	postinc2,w,c
  1239   00097A  A4D8               	btfss	status,2,c
  1240   00097C  EFC2  F004         	goto	u2071
  1241   000980  EFC4  F004         	goto	u2070
  1242   000984                     u2071:
  1243   000984  EFD0  F004         	goto	l3036
  1244   000988                     u2070:
  1245   000988  C01E  F014         	movff	return_back@motorL,turnRight@mL
  1246   00098C  C01F  F015         	movff	return_back@motorL+1,turnRight@mL+1
  1247   000990  C020  F016         	movff	return_back@motorR,turnRight@mR
  1248   000994  C021  F017         	movff	return_back@motorR+1,turnRight@mR+1
  1249   000998  ECE0  F009         	call	_turnRight	;wreg free
  1250   00099C  EF81  F005         	goto	l3056
  1251   0009A0                     l3036:
  1252   0009A0  90D8               	bcf	status,0,c
  1253   0009A2  345B               	rlcf	_index^0,w,c
  1254   0009A4  6ED9               	movwf	fsr2l,c
  1255   0009A6  345C               	rlcf	(_index+1)^0,w,c
  1256   0009A8  6EDA               	movwf	fsr2h,c
  1257   0009AA  0EFE               	movlw	low (_movement_list+65534)
  1258   0009AC  26D9               	addwf	fsr2l,f,c
  1259   0009AE  0E01               	movlw	high (_movement_list+65534)
  1260   0009B0  22DA               	addwfc	fsr2h,f,c
  1261   0009B2  0EFD               	movlw	253
  1262   0009B4  18DE               	xorwf	postinc2,w,c
  1263   0009B6  E106               	bnz	u2081
  1264   0009B8  28DE               	incf	postinc2,w,c
  1265   0009BA  A4D8               	btfss	status,2,c
  1266   0009BC  EFE2  F004         	goto	u2081
  1267   0009C0  EFE4  F004         	goto	u2080
  1268   0009C4                     u2081:
  1269   0009C4  EFF0  F004         	goto	l3040
  1270   0009C8                     u2080:
  1271   0009C8  C01E  F014         	movff	return_back@motorL,turnLeftLong@mL
  1272   0009CC  C01F  F015         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1273   0009D0  C020  F016         	movff	return_back@motorR,turnLeftLong@mR
  1274   0009D4  C021  F017         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1275   0009D8  ECDE  F007         	call	_turnLeftLong	;wreg free
  1276   0009DC  EF81  F005         	goto	l3056
  1277   0009E0                     l3040:
  1278   0009E0  90D8               	bcf	status,0,c
  1279   0009E2  345B               	rlcf	_index^0,w,c
  1280   0009E4  6ED9               	movwf	fsr2l,c
  1281   0009E6  345C               	rlcf	(_index+1)^0,w,c
  1282   0009E8  6EDA               	movwf	fsr2h,c
  1283   0009EA  0EFE               	movlw	low (_movement_list+65534)
  1284   0009EC  26D9               	addwf	fsr2l,f,c
  1285   0009EE  0E01               	movlw	high (_movement_list+65534)
  1286   0009F0  22DA               	addwfc	fsr2h,f,c
  1287   0009F2  0EFC               	movlw	252
  1288   0009F4  18DE               	xorwf	postinc2,w,c
  1289   0009F6  E106               	bnz	u2091
  1290   0009F8  28DE               	incf	postinc2,w,c
  1291   0009FA  A4D8               	btfss	status,2,c
  1292   0009FC  EF02  F005         	goto	u2091
  1293   000A00  EF04  F005         	goto	u2090
  1294   000A04                     u2091:
  1295   000A04  EF10  F005         	goto	l3044
  1296   000A08                     u2090:
  1297   000A08  C01E  F014         	movff	return_back@motorL,turnRightLong@mL
  1298   000A0C  C01F  F015         	movff	return_back@motorL+1,turnRightLong@mL+1
  1299   000A10  C020  F016         	movff	return_back@motorR,turnRightLong@mR
  1300   000A14  C021  F017         	movff	return_back@motorR+1,turnRightLong@mR+1
  1301   000A18  EC38  F009         	call	_turnRightLong	;wreg free
  1302   000A1C  EF81  F005         	goto	l3056
  1303   000A20                     l3044:
  1304   000A20  90D8               	bcf	status,0,c
  1305   000A22  345B               	rlcf	_index^0,w,c
  1306   000A24  6ED9               	movwf	fsr2l,c
  1307   000A26  345C               	rlcf	(_index+1)^0,w,c
  1308   000A28  6EDA               	movwf	fsr2h,c
  1309   000A2A  0EFE               	movlw	low (_movement_list+65534)
  1310   000A2C  26D9               	addwf	fsr2l,f,c
  1311   000A2E  0E01               	movlw	high (_movement_list+65534)
  1312   000A30  22DA               	addwfc	fsr2h,f,c
  1313   000A32  0E01               	movlw	1
  1314   000A34  BEDB               	btfsc	plusw2,7,c
  1315   000A36  EF28  F005         	goto	u2100
  1316   000A3A  0E01               	movlw	1
  1317   000A3C  50DB               	movf	plusw2,w,c
  1318   000A3E  E106               	bnz	u2101
  1319   000A40  04DE               	decf	postinc2,w,c
  1320   000A42  B0D8               	btfsc	status,0,c
  1321   000A44  EF26  F005         	goto	u2101
  1322   000A48  EF28  F005         	goto	u2100
  1323   000A4C                     u2101:
  1324   000A4C  EF40  F005         	goto	l3048
  1325   000A50                     u2100:
  1326   000A50  90D8               	bcf	status,0,c
  1327   000A52  345B               	rlcf	_index^0,w,c
  1328   000A54  6ED9               	movwf	fsr2l,c
  1329   000A56  345C               	rlcf	(_index+1)^0,w,c
  1330   000A58  6EDA               	movwf	fsr2h,c
  1331   000A5A  0EFC               	movlw	low (_movement_list+65532)
  1332   000A5C  26D9               	addwf	fsr2l,f,c
  1333   000A5E  0E01               	movlw	high (_movement_list+65532)
  1334   000A60  22DA               	addwfc	fsr2h,f,c
  1335   000A62  0E01               	movlw	1
  1336   000A64  AEDB               	btfss	plusw2,7,c
  1337   000A66  EF40  F005         	goto	u2110
  1338   000A6A  0EFE               	movlw	254
  1339   000A6C  5CDE               	subwf	postinc2,w,c
  1340   000A6E  0EFF               	movlw	255
  1341   000A70  58DE               	subwfb	postinc2,w,c
  1342   000A72  A0D8               	btfss	status,0,c
  1343   000A74  EF3E  F005         	goto	u2111
  1344   000A78  EF40  F005         	goto	u2110
  1345   000A7C                     u2111:
  1346   000A7C  EF81  F005         	goto	l319
  1347   000A80                     u2110:
  1348   000A80                     l3048:
  1349                           
  1350                           ;dc_motor.c: 465:         {;dc_motor.c: 466:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1351   000A80  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1352   000A84  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1353   000A88  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1354   000A8C  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1355   000A90  90D8               	bcf	status,0,c
  1356   000A92  345B               	rlcf	_index^0,w,c
  1357   000A94  6ED9               	movwf	fsr2l,c
  1358   000A96  345C               	rlcf	(_index+1)^0,w,c
  1359   000A98  6EDA               	movwf	fsr2h,c
  1360   000A9A  0EFE               	movlw	low (_movement_list+65534)
  1361   000A9C  26D9               	addwf	fsr2l,f,c
  1362   000A9E  0E01               	movlw	high (_movement_list+65534)
  1363   000AA0  22DA               	addwfc	fsr2h,f,c
  1364   000AA2  CFDE F018          	movff	postinc2,TimedfullSpeedAhead@time
  1365   000AA6  CFDD F019          	movff	postdec2,TimedfullSpeedAhead@time+1
  1366   000AAA  EC87  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1367   000AAE                     
  1368                           ;dc_motor.c: 467:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1369   000AAE  0E11               	movlw	17
  1370   000AB0  6E23               	movwf	(??_return_back+1)^0,c
  1371   000AB2  0E3C               	movlw	60
  1372   000AB4  6E22               	movwf	??_return_back^0,c
  1373   000AB6  0ECB               	movlw	203
  1374   000AB8                     u2557:
  1375   000AB8  2EE8               	decfsz	wreg,f,c
  1376   000ABA  D7FE               	bra	u2557
  1377   000ABC  2E22               	decfsz	??_return_back^0,f,c
  1378   000ABE  D7FC               	bra	u2557
  1379   000AC0  2E23               	decfsz	(??_return_back+1)^0,f,c
  1380   000AC2  D7FA               	bra	u2557
  1381   000AC4  F000               	nop	
  1382   000AC6                     
  1383                           ;dc_motor.c: 468:             TimedfullSpeedAhead(motorL, motorR, 5);
  1384   000AC6  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1385   000ACA  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1386   000ACE  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1387   000AD2  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1388   000AD6  0E00               	movlw	0
  1389   000AD8  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1390   000ADA  0E05               	movlw	5
  1391   000ADC  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1392   000ADE  EC87  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1393   000AE2                     
  1394                           ;dc_motor.c: 469:             moveBack(motorL, motorR, 5);
  1395   000AE2  C01E  F014         	movff	return_back@motorL,moveBack@mL
  1396   000AE6  C01F  F015         	movff	return_back@motorL+1,moveBack@mL+1
  1397   000AEA  C020  F016         	movff	return_back@motorR,moveBack@mR
  1398   000AEE  C021  F017         	movff	return_back@motorR+1,moveBack@mR+1
  1399   000AF2  0E00               	movlw	0
  1400   000AF4  6E19               	movwf	(moveBack@time+1)^0,c
  1401   000AF6  0E05               	movlw	5
  1402   000AF8  6E18               	movwf	moveBack@time^0,c
  1403   000AFA  EC4D  F00D         	call	_moveBack	;wreg free
  1404   000AFE  EF81  F005         	goto	l3056
  1405   000B02                     l319:
  1406   000B02                     l3056:
  1407                           
  1408                           ;dc_motor.c: 471:         stop(motorL,motorR);
  1409   000B02  C01E  F014         	movff	return_back@motorL,stop@mL
  1410   000B06  C01F  F015         	movff	return_back@motorL+1,stop@mL+1
  1411   000B0A  C020  F016         	movff	return_back@motorR,stop@mR
  1412   000B0E  C021  F017         	movff	return_back@motorR+1,stop@mR+1
  1413   000B12  EC2F  F00F         	call	_stop	;wreg free
  1414   000B16                     
  1415                           ;dc_motor.c: 472:         index -= 1;
  1416   000B16  065B               	decf	_index^0,f,c
  1417   000B18  A0D8               	btfss	status,0,c
  1418   000B1A  065C               	decf	(_index+1)^0,f,c
  1419   000B1C                     l314:
  1420                           
  1421                           ;dc_motor.c: 459:     while (index > 0){
  1422   000B1C  BE5C               	btfsc	(_index+1)^0,7,c
  1423   000B1E  EF9B  F005         	goto	u2120
  1424   000B22  505C               	movf	(_index+1)^0,w,c
  1425   000B24  E106               	bnz	u2121
  1426   000B26  045B               	decf	_index^0,w,c
  1427   000B28  B0D8               	btfsc	status,0,c
  1428   000B2A  EF99  F005         	goto	u2121
  1429   000B2E  EF9B  F005         	goto	u2120
  1430   000B32                     u2121:
  1431   000B32  EF91  F004         	goto	l3028
  1432   000B36                     u2120:
  1433   000B36                     
  1434                           ;dc_motor.c: 474:     if (index == 0){state = 2;}
  1435   000B36  505B               	movf	_index^0,w,c
  1436   000B38  105C               	iorwf	(_index+1)^0,w,c
  1437   000B3A  A4D8               	btfss	status,2,c
  1438   000B3C  EFA2  F005         	goto	u2131
  1439   000B40  EFA4  F005         	goto	u2130
  1440   000B44                     u2131:
  1441   000B44  EFA8  F005         	goto	l329
  1442   000B48                     u2130:
  1443   000B48  0E00               	movlw	0
  1444   000B4A  6E5A               	movwf	(_state+1)^0,c
  1445   000B4C  0E02               	movlw	2
  1446   000B4E  6E59               	movwf	_state^0,c
  1447   000B50                     l329:
  1448   000B50  0012               	return		;funcret
  1449   000B52                     __end_of_return_back:
  1450                           	callstack 0
  1451                           
  1452 ;; *************** function _initDCmotorsPWM *****************
  1453 ;; Defined at:
  1454 ;;		line 14 in file "dc_motor.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  PWMperiod       2    0[COMRAM] int 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  1    wreg      void 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1468 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1472 ;;Total ram usage:        2 bytes
  1473 ;; Hardware stack levels used: 1
  1474 ;; Hardware stack levels required when called: 2
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_main
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482                           	psect	text2
  1483   001A0A                     __ptext2:
  1484                           	callstack 0
  1485   001A0A                     _initDCmotorsPWM:
  1486                           	callstack 28
  1487   001A0A                     
  1488                           ;dc_motor.c: 16:     TRISEbits.TRISE2=0;
  1489   001A0A  9485               	bcf	133,2,c	;volatile
  1490                           
  1491                           ;dc_motor.c: 17:     TRISCbits.TRISC7=0;
  1492   001A0C  9E83               	bcf	131,7,c	;volatile
  1493                           
  1494                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  1495   001A0E  9C87               	bcf	135,6,c	;volatile
  1496                           
  1497                           ;dc_motor.c: 19:     TRISEbits.TRISE4=0;
  1498   001A10  9885               	bcf	133,4,c	;volatile
  1499                           
  1500                           ;dc_motor.c: 21:     LATEbits.LATE2=0;
  1501   001A12  947D               	bcf	125,2,c	;volatile
  1502                           
  1503                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1504   001A14  9E7B               	bcf	123,7,c	;volatile
  1505                           
  1506                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1507   001A16  9C7F               	bcf	127,6,c	;volatile
  1508                           
  1509                           ;dc_motor.c: 24:     LATEbits.LATE4=0;
  1510   001A18  987D               	bcf	125,4,c	;volatile
  1511   001A1A                     
  1512                           ;dc_motor.c: 27:     RE2PPS=0x05;
  1513   001A1A  0E05               	movlw	5
  1514   001A1C  010E               	movlb	14	; () banked
  1515   001A1E  6F74               	movwf	116,b	;volatile
  1516                           
  1517                           ;dc_motor.c: 28:     RE4PPS=0x06;
  1518   001A20  0E06               	movlw	6
  1519   001A22  6F76               	movwf	118,b	;volatile
  1520                           
  1521                           ;dc_motor.c: 29:     RC7PPS=0x07;
  1522   001A24  0E07               	movlw	7
  1523   001A26  6F69               	movwf	105,b	;volatile
  1524                           
  1525                           ;dc_motor.c: 30:     RG6PPS=0x08;
  1526   001A28  0E08               	movlw	8
  1527   001A2A  6F88               	movwf	136,b	;volatile
  1528                           
  1529                           ;dc_motor.c: 33:     T2CONbits.CKPS=0b100;
  1530   001A2C  50BD               	movf	189,w,c	;volatile
  1531   001A2E  0B8F               	andlw	-113
  1532   001A30  0940               	iorlw	64
  1533   001A32  6EBD               	movwf	189,c	;volatile
  1534                           
  1535                           ;dc_motor.c: 34:     T2HLTbits.MODE=0b00000;
  1536   001A34  0EE0               	movlw	-32
  1537   001A36  16BE               	andwf	190,f,c	;volatile
  1538                           
  1539                           ;dc_motor.c: 35:     T2CLKCONbits.CS=0b0001;
  1540   001A38  50BF               	movf	191,w,c	;volatile
  1541   001A3A  0BF0               	andlw	-16
  1542   001A3C  0901               	iorlw	1
  1543   001A3E  6EBF               	movwf	191,c	;volatile
  1544                           
  1545                           ;dc_motor.c: 39:     T2PR=99;
  1546   001A40  0E63               	movlw	99
  1547   001A42  6EBC               	movwf	188,c	;volatile
  1548   001A44                     
  1549                           ; BSR set to: 14
  1550                           ;dc_motor.c: 40:     T2CONbits.ON=1;
  1551   001A44  8EBD               	bsf	189,7,c	;volatile
  1552                           
  1553                           ;dc_motor.c: 44:     CCPR1H=0;
  1554   001A46  0E00               	movlw	0
  1555   001A48  6EAA               	movwf	170,c	;volatile
  1556                           
  1557                           ;dc_motor.c: 45:     CCPR2H=0;
  1558   001A4A  0E00               	movlw	0
  1559   001A4C  6EA6               	movwf	166,c	;volatile
  1560                           
  1561                           ;dc_motor.c: 46:     CCPR3H=0;
  1562   001A4E  0E00               	movlw	0
  1563   001A50  010F               	movlb	15	; () banked
  1564   001A52  6F25               	movwf	37,b	;volatile
  1565                           
  1566                           ;dc_motor.c: 47:     CCPR4H=0;
  1567   001A54  0E00               	movlw	0
  1568   001A56  6F21               	movwf	33,b	;volatile
  1569                           
  1570                           ;dc_motor.c: 50:     CCPTMRS0bits.C1TSEL=0;
  1571   001A58  0EFC               	movlw	-4
  1572   001A5A  16AD               	andwf	173,f,c	;volatile
  1573                           
  1574                           ;dc_motor.c: 51:     CCPTMRS0bits.C2TSEL=0;
  1575   001A5C  0EF3               	movlw	-13
  1576   001A5E  16AD               	andwf	173,f,c	;volatile
  1577                           
  1578                           ;dc_motor.c: 52:     CCPTMRS0bits.C3TSEL=0;
  1579   001A60  0ECF               	movlw	-49
  1580   001A62  16AD               	andwf	173,f,c	;volatile
  1581                           
  1582                           ;dc_motor.c: 53:     CCPTMRS0bits.C4TSEL=0;
  1583   001A64  0E3F               	movlw	-193
  1584   001A66  16AD               	andwf	173,f,c	;volatile
  1585   001A68                     
  1586                           ; BSR set to: 15
  1587                           ;dc_motor.c: 56:     CCP1CONbits.FMT=1;
  1588   001A68  88AB               	bsf	171,4,c	;volatile
  1589                           
  1590                           ;dc_motor.c: 57:     CCP1CONbits.CCP1MODE=0b1100;
  1591   001A6A  50AB               	movf	171,w,c	;volatile
  1592   001A6C  0BF0               	andlw	-16
  1593   001A6E  090C               	iorlw	12
  1594   001A70  6EAB               	movwf	171,c	;volatile
  1595   001A72                     
  1596                           ; BSR set to: 15
  1597                           ;dc_motor.c: 58:     CCP1CONbits.EN=1;
  1598   001A72  8EAB               	bsf	171,7,c	;volatile
  1599   001A74                     
  1600                           ; BSR set to: 15
  1601                           ;dc_motor.c: 60:     CCP2CONbits.FMT=1;
  1602   001A74  88A7               	bsf	167,4,c	;volatile
  1603                           
  1604                           ;dc_motor.c: 61:     CCP2CONbits.CCP2MODE=0b1100;
  1605   001A76  50A7               	movf	167,w,c	;volatile
  1606   001A78  0BF0               	andlw	-16
  1607   001A7A  090C               	iorlw	12
  1608   001A7C  6EA7               	movwf	167,c	;volatile
  1609   001A7E                     
  1610                           ; BSR set to: 15
  1611                           ;dc_motor.c: 62:     CCP2CONbits.EN=1;
  1612   001A7E  8EA7               	bsf	167,7,c	;volatile
  1613   001A80                     
  1614                           ; BSR set to: 15
  1615                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1616   001A80  8926               	bsf	38,4,b	;volatile
  1617                           
  1618                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1619   001A82  5126               	movf	38,w,b	;volatile
  1620   001A84  0BF0               	andlw	-16
  1621   001A86  090C               	iorlw	12
  1622   001A88  6F26               	movwf	38,b	;volatile
  1623   001A8A                     
  1624                           ; BSR set to: 15
  1625                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1626   001A8A  8F26               	bsf	38,7,b	;volatile
  1627   001A8C                     
  1628                           ; BSR set to: 15
  1629                           ;dc_motor.c: 68:     CCP4CONbits.FMT=1;
  1630   001A8C  8922               	bsf	34,4,b	;volatile
  1631                           
  1632                           ;dc_motor.c: 69:     CCP4CONbits.CCP4MODE=0b1100;
  1633   001A8E  5122               	movf	34,w,b	;volatile
  1634   001A90  0BF0               	andlw	-16
  1635   001A92  090C               	iorlw	12
  1636   001A94  6F22               	movwf	34,b	;volatile
  1637   001A96                     
  1638                           ; BSR set to: 15
  1639                           ;dc_motor.c: 70:     CCP4CONbits.EN=1;
  1640   001A96  8F22               	bsf	34,7,b	;volatile
  1641   001A98                     
  1642                           ; BSR set to: 15
  1643   001A98  0012               	return		;funcret
  1644   001A9A                     __end_of_initDCmotorsPWM:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _get_wall_presence *****************
  1648 ;; Defined at:
  1649 ;;		line 242 in file "color.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  clear2          2   17[COMRAM] unsigned int 
  1654 ;;  clear1          2   15[COMRAM] unsigned int 
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  2   11[COMRAM] unsigned int 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1664 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1665 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1666 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1667 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1668 ;;Total ram usage:        8 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 5
  1671 ;; This function calls:
  1672 ;;		___wmul
  1673 ;;		_color_read_Clear
  1674 ;;		_set_led_color
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text3
  1681   0018D4                     __ptext3:
  1682                           	callstack 0
  1683   0018D4                     _get_wall_presence:
  1684                           	callstack 25
  1685   0018D4                     
  1686                           ;color.c: 243:     set_led_color(0b000);
  1687   0018D4  0E00               	movlw	0
  1688   0018D6  6E02               	movwf	(set_led_color@color+1)^0,c
  1689   0018D8  0E00               	movlw	0
  1690   0018DA  6E01               	movwf	set_led_color@color^0,c
  1691   0018DC  EC78  F00F         	call	_set_led_color	;wreg free
  1692   0018E0                     
  1693                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1694   0018E0  0E12               	movlw	18
  1695   0018E2  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1696   0018E4  0EDC               	movlw	220
  1697   0018E6  6E0E               	movwf	??_get_wall_presence^0,c
  1698   0018E8  0E60               	movlw	96
  1699   0018EA                     u2567:
  1700   0018EA  2EE8               	decfsz	wreg,f,c
  1701   0018EC  D7FE               	bra	u2567
  1702   0018EE  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1703   0018F0  D7FC               	bra	u2567
  1704   0018F2  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1705   0018F4  D7FA               	bra	u2567
  1706   0018F6                     
  1707                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1708   0018F6  ECDF  F00E         	call	_color_read_Clear	;wreg free
  1709   0018FA  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1710   0018FE  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1711   001902                     
  1712                           ;color.c: 246:     set_led_color(0b111);
  1713   001902  0E00               	movlw	0
  1714   001904  6E02               	movwf	(set_led_color@color+1)^0,c
  1715   001906  0E07               	movlw	7
  1716   001908  6E01               	movwf	set_led_color@color^0,c
  1717   00190A  EC78  F00F         	call	_set_led_color	;wreg free
  1718   00190E                     
  1719                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1720   00190E  0E12               	movlw	18
  1721   001910  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1722   001912  0EDC               	movlw	220
  1723   001914  6E0E               	movwf	??_get_wall_presence^0,c
  1724   001916  0E60               	movlw	96
  1725   001918                     u2577:
  1726   001918  2EE8               	decfsz	wreg,f,c
  1727   00191A  D7FE               	bra	u2577
  1728   00191C  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1729   00191E  D7FC               	bra	u2577
  1730   001920  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1731   001922  D7FA               	bra	u2577
  1732                           
  1733                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1734   001924  ECDF  F00E         	call	_color_read_Clear	;wreg free
  1735   001928  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1736   00192C  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1737   001930                     
  1738                           ;color.c: 249:     set_led_color(0b000);
  1739   001930  0E00               	movlw	0
  1740   001932  6E02               	movwf	(set_led_color@color+1)^0,c
  1741   001934  0E00               	movlw	0
  1742   001936  6E01               	movwf	set_led_color@color^0,c
  1743   001938  EC78  F00F         	call	_set_led_color	;wreg free
  1744   00193C                     
  1745                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1746   00193C  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1747   001940  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1748   001944  C057  F003         	movff	_wall_coef,___wmul@multiplicand
  1749   001948  C058  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1750   00194C  ECE4  F00F         	call	___wmul	;wreg free
  1751   001950  5001               	movf	?___wmul^0,w,c
  1752   001952  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1753   001954  5002               	movf	(?___wmul+1)^0,w,c
  1754   001956  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1755   001958  B0D8               	btfsc	status,0,c
  1756   00195A  EFB1  F00C         	goto	u1861
  1757   00195E  EFB4  F00C         	goto	u1860
  1758   001962                     u1861:
  1759   001962  0E01               	movlw	1
  1760   001964  EFB5  F00C         	goto	u1870
  1761   001968                     u1860:
  1762   001968  0E00               	movlw	0
  1763   00196A                     u1870:
  1764   00196A  6E0C               	movwf	?_get_wall_presence^0,c
  1765   00196C  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1766   00196E  0012               	return		;funcret
  1767   001970                     __end_of_get_wall_presence:
  1768                           	callstack 0
  1769                           
  1770 ;; *************** function _get_state *****************
  1771 ;; Defined at:
  1772 ;;		line 442 in file "dc_motor.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;		None
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;		None
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  2    0[COMRAM] int 
  1779 ;; Registers used:
  1780 ;;		None
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1786 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1789 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1790 ;;Total ram usage:        2 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 2
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text4
  1801   00205E                     __ptext4:
  1802                           	callstack 0
  1803   00205E                     _get_state:
  1804                           	callstack 28
  1805   00205E                     
  1806                           ;dc_motor.c: 444:     return state;
  1807   00205E  C059  F001         	movff	_state,?_get_state
  1808   002062  C05A  F002         	movff	_state+1,?_get_state+1
  1809   002066  0012               	return		;funcret
  1810   002068                     __end_of_get_state:
  1811                           	callstack 0
  1812                           
  1813 ;; *************** function _get_color_code *****************
  1814 ;; Defined at:
  1815 ;;		line 176 in file "color.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  value           2   28[BANK0 ] unsigned int 
  1820 ;;  i               2   30[BANK0 ] unsigned int 
  1821 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1822 ;;  min_index       2   26[BANK0 ] unsigned int 
  1823 ;;  min_value       2   24[BANK0 ] unsigned int 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  2   52[COMRAM] unsigned int 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1834 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1835 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1836 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1837 ;;Total ram usage:       48 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; Hardware stack levels required when called: 5
  1840 ;; This function calls:
  1841 ;;		___lldiv
  1842 ;;		___lmul
  1843 ;;		___wmul
  1844 ;;		_color_read_Blue
  1845 ;;		_color_read_Green
  1846 ;;		_color_read_Red
  1847 ;;		_get_color_distance
  1848 ;;		_set_led_color
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text5
  1855   000580                     __ptext5:
  1856                           	callstack 0
  1857   000580                     _get_color_code:
  1858                           	callstack 25
  1859   000580                     
  1860                           ;color.c: 179:     set_led_color(0b100);
  1861   000580  0E00               	movlw	0
  1862   000582  6E02               	movwf	(set_led_color@color+1)^0,c
  1863   000584  0E04               	movlw	4
  1864   000586  6E01               	movwf	set_led_color@color^0,c
  1865   000588  EC78  F00F         	call	_set_led_color	;wreg free
  1866   00058C                     
  1867                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1868   00058C  0E12               	movlw	18
  1869   00058E  6E38               	movwf	(??_get_color_code+1)^0,c
  1870   000590  0EDC               	movlw	220
  1871   000592  6E37               	movwf	??_get_color_code^0,c
  1872   000594  0E60               	movlw	96
  1873   000596                     u2587:
  1874   000596  2EE8               	decfsz	wreg,f,c
  1875   000598  D7FE               	bra	u2587
  1876   00059A  2E37               	decfsz	??_get_color_code^0,f,c
  1877   00059C  D7FC               	bra	u2587
  1878   00059E  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1879   0005A0  D7FA               	bra	u2587
  1880   0005A2                     
  1881                           ;color.c: 181:     RGB.R = color_read_Red();
  1882   0005A2  EC8F  F00E         	call	_color_read_Red	;wreg free
  1883   0005A6  C005  F0F0         	movff	?_color_read_Red,_RGB
  1884   0005AA  C006  F0F1         	movff	?_color_read_Red+1,_RGB+1
  1885   0005AE  0100               	movlb	0	; () banked
  1886   0005B0  6BF2               	clrf	(_RGB+2)& (0+255),b
  1887   0005B2  6BF3               	clrf	(_RGB+3)& (0+255),b
  1888   0005B4                     
  1889                           ; BSR set to: 0
  1890                           ;color.c: 182:     set_led_color(0b010);
  1891   0005B4  0E00               	movlw	0
  1892   0005B6  6E02               	movwf	(set_led_color@color+1)^0,c
  1893   0005B8  0E02               	movlw	2
  1894   0005BA  6E01               	movwf	set_led_color@color^0,c
  1895   0005BC  EC78  F00F         	call	_set_led_color	;wreg free
  1896   0005C0                     
  1897                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1898   0005C0  0E12               	movlw	18
  1899   0005C2  6E38               	movwf	(??_get_color_code+1)^0,c
  1900   0005C4  0EDC               	movlw	220
  1901   0005C6  6E37               	movwf	??_get_color_code^0,c
  1902   0005C8  0E60               	movlw	96
  1903   0005CA                     u2597:
  1904   0005CA  2EE8               	decfsz	wreg,f,c
  1905   0005CC  D7FE               	bra	u2597
  1906   0005CE  2E37               	decfsz	??_get_color_code^0,f,c
  1907   0005D0  D7FC               	bra	u2597
  1908   0005D2  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1909   0005D4  D7FA               	bra	u2597
  1910                           
  1911                           ;color.c: 184:     RGB.G = color_read_Green();
  1912   0005D6  ECB7  F00E         	call	_color_read_Green	;wreg free
  1913   0005DA  C005  F0F4         	movff	?_color_read_Green,_RGB+4
  1914   0005DE  C006  F0F5         	movff	?_color_read_Green+1,_RGB+5
  1915   0005E2  0100               	movlb	0	; () banked
  1916   0005E4  6BF6               	clrf	(_RGB+6)& (0+255),b
  1917   0005E6  6BF7               	clrf	(_RGB+7)& (0+255),b
  1918   0005E8                     
  1919                           ; BSR set to: 0
  1920                           ;color.c: 185:     set_led_color(0b001);
  1921   0005E8  0E00               	movlw	0
  1922   0005EA  6E02               	movwf	(set_led_color@color+1)^0,c
  1923   0005EC  0E01               	movlw	1
  1924   0005EE  6E01               	movwf	set_led_color@color^0,c
  1925   0005F0  EC78  F00F         	call	_set_led_color	;wreg free
  1926   0005F4                     
  1927                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1928   0005F4  0E12               	movlw	18
  1929   0005F6  6E38               	movwf	(??_get_color_code+1)^0,c
  1930   0005F8  0EDC               	movlw	220
  1931   0005FA  6E37               	movwf	??_get_color_code^0,c
  1932   0005FC  0E60               	movlw	96
  1933   0005FE                     u2607:
  1934   0005FE  2EE8               	decfsz	wreg,f,c
  1935   000600  D7FE               	bra	u2607
  1936   000602  2E37               	decfsz	??_get_color_code^0,f,c
  1937   000604  D7FC               	bra	u2607
  1938   000606  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1939   000608  D7FA               	bra	u2607
  1940   00060A                     
  1941                           ;color.c: 187:     RGB.B = color_read_Blue();
  1942   00060A  EC07  F00F         	call	_color_read_Blue	;wreg free
  1943   00060E  C005  F0F8         	movff	?_color_read_Blue,_RGB+8
  1944   000612  C006  F0F9         	movff	?_color_read_Blue+1,_RGB+9
  1945   000616  0100               	movlb	0	; () banked
  1946   000618  6BFA               	clrf	(_RGB+10)& (0+255),b
  1947   00061A  6BFB               	clrf	(_RGB+11)& (0+255),b
  1948   00061C                     
  1949                           ; BSR set to: 0
  1950                           ;color.c: 188:     set_led_color(0b000);
  1951   00061C  0E00               	movlw	0
  1952   00061E  6E02               	movwf	(set_led_color@color+1)^0,c
  1953   000620  0E00               	movlw	0
  1954   000622  6E01               	movwf	set_led_color@color^0,c
  1955   000624  EC78  F00F         	call	_set_led_color	;wreg free
  1956   000628                     
  1957                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1958   000628  0100               	movlb	0	; () banked
  1959   00062A  5160               	movf	_Black_setup& (0+255),w,b
  1960   00062C  5DF0               	subwf	_RGB& (0+255),w,b
  1961   00062E  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1962   000630  59F1               	subwfb	(_RGB+1)& (0+255),w,b
  1963   000632  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1964   000634  59F2               	subwfb	(_RGB+2)& (0+255),w,b
  1965   000636  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1966   000638  59F3               	subwfb	(_RGB+3)& (0+255),w,b
  1967   00063A  B0D8               	btfsc	status,0,c
  1968   00063C  EF22  F003         	goto	u1761
  1969   000640  EF24  F003         	goto	u1760
  1970   000644                     u1761:
  1971   000644  EF2E  F003         	goto	l2808
  1972   000648                     u1760:
  1973   000648                     
  1974                           ; BSR set to: 0
  1975   000648  0E00               	movlw	0
  1976   00064A  6FD0               	movwf	_get_color_code$458& (0+255),b
  1977   00064C  0E00               	movlw	0
  1978   00064E  6FD1               	movwf	(_get_color_code$458+1)& (0+255),b
  1979   000650  0E00               	movlw	0
  1980   000652  6FD2               	movwf	(_get_color_code$458+2)& (0+255),b
  1981   000654  0E00               	movlw	0
  1982   000656  6FD3               	movwf	(_get_color_code$458+3)& (0+255),b
  1983   000658  EF63  F003         	goto	l2810
  1984   00065C                     l2808:
  1985                           
  1986                           ; BSR set to: 0
  1987   00065C  5160               	movf	_Black_setup& (0+255),w,b
  1988   00065E  5DF0               	subwf	_RGB& (0+255),w,b
  1989   000660  6E01               	movwf	___lmul@multiplier^0,c
  1990   000662  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1991   000664  59F1               	subwfb	(_RGB+1)& (0+255),w,b
  1992   000666  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1993   000668  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1994   00066A  59F2               	subwfb	(_RGB+2)& (0+255),w,b
  1995   00066C  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1996   00066E  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1997   000670  59F3               	subwfb	(_RGB+3)& (0+255),w,b
  1998   000672  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1999   000674  0E64               	movlw	100
  2000   000676  6E05               	movwf	___lmul@multiplicand^0,c
  2001   000678  0E00               	movlw	0
  2002   00067A  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2003   00067C  0E00               	movlw	0
  2004   00067E  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2005   000680  0E00               	movlw	0
  2006   000682  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2007   000684  ECFB  F00D         	call	___lmul	;wreg free
  2008   000688  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2009   00068C  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2010   000690  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2011   000694  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2012   000698  0100               	movlb	0	; () banked
  2013   00069A  5160               	movf	_Black_setup& (0+255),w,b
  2014   00069C  5D6C               	subwf	_White_setup& (0+255),w,b
  2015   00069E  6E11               	movwf	___lldiv@divisor^0,c
  2016   0006A0  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2017   0006A2  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  2018   0006A4  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2019   0006A6  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2020   0006A8  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  2021   0006AA  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2022   0006AC  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2023   0006AE  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  2024   0006B0  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2025   0006B2  EC18  F00C         	call	___lldiv	;wreg free
  2026   0006B6  C00D  F0D0         	movff	?___lldiv,_get_color_code$458
  2027   0006BA  C00E  F0D1         	movff	?___lldiv+1,_get_color_code$458+1
  2028   0006BE  C00F  F0D2         	movff	?___lldiv+2,_get_color_code$458+2
  2029   0006C2  C010  F0D3         	movff	?___lldiv+3,_get_color_code$458+3
  2030   0006C6                     l2810:
  2031   0006C6  C0D0  F0E4         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  2032   0006CA  C0D1  F0E5         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  2033   0006CE  C0D2  F0E6         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  2034   0006D2  C0D3  F0E7         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  2035   0006D6                     
  2036                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2037   0006D6  0100               	movlb	0	; () banked
  2038   0006D8  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2039   0006DA  5DF4               	subwf	(_RGB+4)& (0+255),w,b
  2040   0006DC  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2041   0006DE  59F5               	subwfb	(_RGB+5)& (0+255),w,b
  2042   0006E0  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2043   0006E2  59F6               	subwfb	(_RGB+6)& (0+255),w,b
  2044   0006E4  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2045   0006E6  59F7               	subwfb	(_RGB+7)& (0+255),w,b
  2046   0006E8  B0D8               	btfsc	status,0,c
  2047   0006EA  EF79  F003         	goto	u1771
  2048   0006EE  EF7B  F003         	goto	u1770
  2049   0006F2                     u1771:
  2050   0006F2  EF85  F003         	goto	l2816
  2051   0006F6                     u1770:
  2052   0006F6                     
  2053                           ; BSR set to: 0
  2054   0006F6  0E00               	movlw	0
  2055   0006F8  6FD4               	movwf	_get_color_code$459& (0+255),b
  2056   0006FA  0E00               	movlw	0
  2057   0006FC  6FD5               	movwf	(_get_color_code$459+1)& (0+255),b
  2058   0006FE  0E00               	movlw	0
  2059   000700  6FD6               	movwf	(_get_color_code$459+2)& (0+255),b
  2060   000702  0E00               	movlw	0
  2061   000704  6FD7               	movwf	(_get_color_code$459+3)& (0+255),b
  2062   000706  EFBA  F003         	goto	l2818
  2063   00070A                     l2816:
  2064                           
  2065                           ; BSR set to: 0
  2066   00070A  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2067   00070C  5DF4               	subwf	(_RGB+4)& (0+255),w,b
  2068   00070E  6E01               	movwf	___lmul@multiplier^0,c
  2069   000710  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2070   000712  59F5               	subwfb	(_RGB+5)& (0+255),w,b
  2071   000714  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2072   000716  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2073   000718  59F6               	subwfb	(_RGB+6)& (0+255),w,b
  2074   00071A  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2075   00071C  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2076   00071E  59F7               	subwfb	(_RGB+7)& (0+255),w,b
  2077   000720  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2078   000722  0E64               	movlw	100
  2079   000724  6E05               	movwf	___lmul@multiplicand^0,c
  2080   000726  0E00               	movlw	0
  2081   000728  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2082   00072A  0E00               	movlw	0
  2083   00072C  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2084   00072E  0E00               	movlw	0
  2085   000730  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2086   000732  ECFB  F00D         	call	___lmul	;wreg free
  2087   000736  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2088   00073A  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2089   00073E  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2090   000742  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2091   000746  0100               	movlb	0	; () banked
  2092   000748  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2093   00074A  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2094   00074C  6E11               	movwf	___lldiv@divisor^0,c
  2095   00074E  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2096   000750  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2097   000752  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2098   000754  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2099   000756  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2100   000758  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2101   00075A  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2102   00075C  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2103   00075E  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2104   000760  EC18  F00C         	call	___lldiv	;wreg free
  2105   000764  C00D  F0D4         	movff	?___lldiv,_get_color_code$459
  2106   000768  C00E  F0D5         	movff	?___lldiv+1,_get_color_code$459+1
  2107   00076C  C00F  F0D6         	movff	?___lldiv+2,_get_color_code$459+2
  2108   000770  C010  F0D7         	movff	?___lldiv+3,_get_color_code$459+3
  2109   000774                     l2818:
  2110   000774  C0D4  F0E8         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  2111   000778  C0D5  F0E9         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  2112   00077C  C0D6  F0EA         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  2113   000780  C0D7  F0EB         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  2114   000784                     
  2115                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2116   000784  0100               	movlb	0	; () banked
  2117   000786  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2118   000788  5DF8               	subwf	(_RGB+8)& (0+255),w,b
  2119   00078A  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2120   00078C  59F9               	subwfb	(_RGB+9)& (0+255),w,b
  2121   00078E  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2122   000790  59FA               	subwfb	(_RGB+10)& (0+255),w,b
  2123   000792  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2124   000794  59FB               	subwfb	(_RGB+11)& (0+255),w,b
  2125   000796  B0D8               	btfsc	status,0,c
  2126   000798  EFD0  F003         	goto	u1781
  2127   00079C  EFD2  F003         	goto	u1780
  2128   0007A0                     u1781:
  2129   0007A0  EFDC  F003         	goto	l2824
  2130   0007A4                     u1780:
  2131   0007A4                     
  2132                           ; BSR set to: 0
  2133   0007A4  0E00               	movlw	0
  2134   0007A6  6FD8               	movwf	_get_color_code$460& (0+255),b
  2135   0007A8  0E00               	movlw	0
  2136   0007AA  6FD9               	movwf	(_get_color_code$460+1)& (0+255),b
  2137   0007AC  0E00               	movlw	0
  2138   0007AE  6FDA               	movwf	(_get_color_code$460+2)& (0+255),b
  2139   0007B0  0E00               	movlw	0
  2140   0007B2  6FDB               	movwf	(_get_color_code$460+3)& (0+255),b
  2141   0007B4  EF11  F004         	goto	l2826
  2142   0007B8                     l2824:
  2143                           
  2144                           ; BSR set to: 0
  2145   0007B8  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2146   0007BA  5DF8               	subwf	(_RGB+8)& (0+255),w,b
  2147   0007BC  6E01               	movwf	___lmul@multiplier^0,c
  2148   0007BE  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2149   0007C0  59F9               	subwfb	(_RGB+9)& (0+255),w,b
  2150   0007C2  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2151   0007C4  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2152   0007C6  59FA               	subwfb	(_RGB+10)& (0+255),w,b
  2153   0007C8  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2154   0007CA  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2155   0007CC  59FB               	subwfb	(_RGB+11)& (0+255),w,b
  2156   0007CE  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2157   0007D0  0E64               	movlw	100
  2158   0007D2  6E05               	movwf	___lmul@multiplicand^0,c
  2159   0007D4  0E00               	movlw	0
  2160   0007D6  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2161   0007D8  0E00               	movlw	0
  2162   0007DA  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2163   0007DC  0E00               	movlw	0
  2164   0007DE  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2165   0007E0  ECFB  F00D         	call	___lmul	;wreg free
  2166   0007E4  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2167   0007E8  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2168   0007EC  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2169   0007F0  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2170   0007F4  0100               	movlb	0	; () banked
  2171   0007F6  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2172   0007F8  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2173   0007FA  6E11               	movwf	___lldiv@divisor^0,c
  2174   0007FC  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2175   0007FE  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2176   000800  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2177   000802  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2178   000804  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2179   000806  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2180   000808  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2181   00080A  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2182   00080C  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2183   00080E  EC18  F00C         	call	___lldiv	;wreg free
  2184   000812  C00D  F0D8         	movff	?___lldiv,_get_color_code$460
  2185   000816  C00E  F0D9         	movff	?___lldiv+1,_get_color_code$460+1
  2186   00081A  C00F  F0DA         	movff	?___lldiv+2,_get_color_code$460+2
  2187   00081E  C010  F0DB         	movff	?___lldiv+3,_get_color_code$460+3
  2188   000822                     l2826:
  2189   000822  C0D8  F0EC         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  2190   000826  C0D9  F0ED         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  2191   00082A  C0DA  F0EE         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  2192   00082E  C0DB  F0EF         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  2193   000832                     
  2194                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2195   000832  EE20  F0E4         	lfsr	2,get_color_code@NormalizedRGB
  2196   000836  EE00  F007         	lfsr	0,get_color_distance@color1
  2197   00083A  0E0B               	movlw	11
  2198   00083C                     u1791:
  2199   00083C  CFDB FFEB          	movff	plusw2,plusw0
  2200   000840  06E8               	decf	wreg,f,c
  2201   000842  E2FC               	bc	u1791
  2202   000844  EE21  F000         	lfsr	2,_Color_rules
  2203   000848  EE00  F013         	lfsr	0,get_color_distance@color2
  2204   00084C  0E0B               	movlw	11
  2205   00084E                     u1801:
  2206   00084E  CFDB FFEB          	movff	plusw2,plusw0
  2207   000852  06E8               	decf	wreg,f,c
  2208   000854  E2FC               	bc	u1801
  2209   000856  EC72  F006         	call	_get_color_distance	;wreg free
  2210   00085A  C007  F0DC         	movff	?_get_color_distance,get_color_code@min_value
  2211   00085E  C008  F0DD         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2212   000862                     
  2213                           ;color.c: 196:     unsigned int min_index = 0;
  2214   000862  0E00               	movlw	0
  2215   000864  0100               	movlb	0	; () banked
  2216   000866  6FDF               	movwf	(get_color_code@min_index+1)& (0+255),b
  2217   000868  0E00               	movlw	0
  2218   00086A  6FDE               	movwf	get_color_code@min_index& (0+255),b
  2219   00086C                     
  2220                           ; BSR set to: 0
  2221                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  2222   00086C  0E00               	movlw	0
  2223   00086E  6FE3               	movwf	(get_color_code@i+1)& (0+255),b
  2224   000870  0E01               	movlw	1
  2225   000872  6FE2               	movwf	get_color_code@i& (0+255),b
  2226   000874                     l2838:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2230   000874  C0E2  F001         	movff	get_color_code@i,___wmul@multiplier
  2231   000878  C0E3  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  2232   00087C  0E00               	movlw	0
  2233   00087E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2234   000880  0E0C               	movlw	12
  2235   000882  6E03               	movwf	___wmul@multiplicand^0,c
  2236   000884  ECE4  F00F         	call	___wmul	;wreg free
  2237   000888  0E00               	movlw	low _Color_rules
  2238   00088A  2401               	addwf	?___wmul^0,w,c
  2239   00088C  6ED9               	movwf	fsr2l,c
  2240   00088E  0E01               	movlw	high _Color_rules
  2241   000890  2002               	addwfc	(?___wmul+1)^0,w,c
  2242   000892  6EDA               	movwf	fsr2h,c
  2243   000894  EE10  F0C4         	lfsr	1,_get_color_code$2447
  2244   000898  0E0B               	movlw	11
  2245   00089A                     u1811:
  2246   00089A  CFDB FFE3          	movff	plusw2,plusw1
  2247   00089E  06E8               	decf	wreg,f,c
  2248   0008A0  E2FC               	bc	u1811
  2249   0008A2                     
  2250                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2251   0008A2  EE20  F0E4         	lfsr	2,get_color_code@NormalizedRGB
  2252   0008A6  EE00  F007         	lfsr	0,get_color_distance@color1
  2253   0008AA  0E0B               	movlw	11
  2254   0008AC                     u1821:
  2255   0008AC  CFDB FFEB          	movff	plusw2,plusw0
  2256   0008B0  06E8               	decf	wreg,f,c
  2257   0008B2  E2FC               	bc	u1821
  2258   0008B4  EE20  F0C4         	lfsr	2,_get_color_code$2447
  2259   0008B8  EE00  F013         	lfsr	0,get_color_distance@color2
  2260   0008BC  0E0B               	movlw	11
  2261   0008BE                     u1831:
  2262   0008BE  CFDB FFEB          	movff	plusw2,plusw0
  2263   0008C2  06E8               	decf	wreg,f,c
  2264   0008C4  E2FC               	bc	u1831
  2265   0008C6  EC72  F006         	call	_get_color_distance	;wreg free
  2266   0008CA  C007  F0E0         	movff	?_get_color_distance,get_color_code@value
  2267   0008CE  C008  F0E1         	movff	?_get_color_distance+1,get_color_code@value+1
  2268   0008D2                     
  2269                           ;color.c: 199:         if(value < min_value){
  2270   0008D2  0100               	movlb	0	; () banked
  2271   0008D4  51DC               	movf	get_color_code@min_value& (0+255),w,b
  2272   0008D6  5DE0               	subwf	get_color_code@value& (0+255),w,b
  2273   0008D8  51DD               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2274   0008DA  59E1               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2275   0008DC  B0D8               	btfsc	status,0,c
  2276   0008DE  EF73  F004         	goto	u1841
  2277   0008E2  EF75  F004         	goto	u1840
  2278   0008E6                     u1841:
  2279   0008E6  EF7D  F004         	goto	l2846
  2280   0008EA                     u1840:
  2281   0008EA                     
  2282                           ; BSR set to: 0
  2283                           ;color.c: 200:             min_index = i;
  2284   0008EA  C0E2  F0DE         	movff	get_color_code@i,get_color_code@min_index
  2285   0008EE  C0E3  F0DF         	movff	get_color_code@i+1,get_color_code@min_index+1
  2286                           
  2287                           ;color.c: 201:             min_value = value;
  2288   0008F2  C0E0  F0DC         	movff	get_color_code@value,get_color_code@min_value
  2289   0008F6  C0E1  F0DD         	movff	get_color_code@value+1,get_color_code@min_value+1
  2290   0008FA                     l2846:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;color.c: 203:     }
  2294   0008FA  4BE2               	infsnz	get_color_code@i& (0+255),f,b
  2295   0008FC  2BE3               	incf	(get_color_code@i+1)& (0+255),f,b
  2296   0008FE                     
  2297                           ; BSR set to: 0
  2298   0008FE  51E3               	movf	(get_color_code@i+1)& (0+255),w,b
  2299   000900  E109               	bnz	u1850
  2300   000902  0E09               	movlw	9
  2301   000904  5DE2               	subwf	get_color_code@i& (0+255),w,b
  2302   000906  A0D8               	btfss	status,0,c
  2303   000908  EF88  F004         	goto	u1851
  2304   00090C  EF8A  F004         	goto	u1850
  2305   000910                     u1851:
  2306   000910  EF3A  F004         	goto	l2838
  2307   000914                     u1850:
  2308   000914                     
  2309                           ; BSR set to: 0
  2310                           ;color.c: 204:     return min_index;
  2311   000914  C0DE  F035         	movff	get_color_code@min_index,?_get_color_code
  2312   000918  C0DF  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  2313   00091C                     
  2314                           ; BSR set to: 0
  2315   00091C  0012               	return		;funcret
  2316   00091E                     __end_of_get_color_code:
  2317                           	callstack 0
  2318                           
  2319 ;; *************** function _get_color_distance *****************
  2320 ;; Defined at:
  2321 ;;		line 146 in file "color.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  color1         12    6[COMRAM] struct RGB_val
  2324 ;;  color2         12   18[COMRAM] struct RGB_val
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  B_offset        2   50[COMRAM] unsigned int 
  2327 ;;  G_offset        2   48[COMRAM] unsigned int 
  2328 ;;  R_offset        2   46[COMRAM] unsigned int 
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  2    6[COMRAM] unsigned int 
  2331 ;; Registers used:
  2332 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2338 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2339 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2340 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2341 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2342 ;;Total ram usage:       46 bytes
  2343 ;; Hardware stack levels used: 1
  2344 ;; Hardware stack levels required when called: 3
  2345 ;; This function calls:
  2346 ;;		___wmul
  2347 ;; This function is called by:
  2348 ;;		_get_color_code
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text6
  2353   000CE4                     __ptext6:
  2354                           	callstack 0
  2355   000CE4                     _get_color_distance:
  2356                           	callstack 26
  2357   000CE4                     
  2358                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2359   000CE4  5013               	movf	get_color_distance@color2^0,w,c
  2360   000CE6  5C07               	subwf	get_color_distance@color1^0,w,c
  2361   000CE8  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2362   000CEA  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2363   000CEC  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2364   000CEE  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2365   000CF0  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2366   000CF2  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2367   000CF4  B0D8               	btfsc	status,0,c
  2368   000CF6  EF7F  F006         	goto	u1401
  2369   000CFA  EF81  F006         	goto	u1400
  2370   000CFE                     u1401:
  2371   000CFE  EF8F  F006         	goto	l2432
  2372   000D02                     u1400:
  2373   000D02  5007               	movf	get_color_distance@color1^0,w,c
  2374   000D04  5C13               	subwf	get_color_distance@color2^0,w,c
  2375   000D06  6E23               	movwf	_get_color_distance$417^0,c
  2376   000D08  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2377   000D0A  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2378   000D0C  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2379   000D0E  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2380   000D10  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2381   000D12  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2382   000D14  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2383   000D16  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2384   000D18  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2385   000D1A  EF9B  F006         	goto	l2434
  2386   000D1E                     l2432:
  2387   000D1E  5013               	movf	get_color_distance@color2^0,w,c
  2388   000D20  5C07               	subwf	get_color_distance@color1^0,w,c
  2389   000D22  6E23               	movwf	_get_color_distance$417^0,c
  2390   000D24  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2391   000D26  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2392   000D28  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2393   000D2A  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2394   000D2C  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2395   000D2E  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2396   000D30  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2397   000D32  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2398   000D34  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2399   000D36                     l2434:
  2400   000D36  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2401   000D3A  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2402                           
  2403                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2404   000D3E  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2405   000D40  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2406   000D42  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2407   000D44  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2408   000D46  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2409   000D48  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2410   000D4A  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2411   000D4C  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2412   000D4E  B0D8               	btfsc	status,0,c
  2413   000D50  EFAC  F006         	goto	u1411
  2414   000D54  EFAE  F006         	goto	u1410
  2415   000D58                     u1411:
  2416   000D58  EFBC  F006         	goto	l2438
  2417   000D5C                     u1410:
  2418   000D5C  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2419   000D5E  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2420   000D60  6E27               	movwf	_get_color_distance$419^0,c
  2421   000D62  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2422   000D64  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2423   000D66  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2424   000D68  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2425   000D6A  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2426   000D6C  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2427   000D6E  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2428   000D70  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2429   000D72  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2430   000D74  EFC8  F006         	goto	l2440
  2431   000D78                     l2438:
  2432   000D78  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2433   000D7A  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2434   000D7C  6E27               	movwf	_get_color_distance$419^0,c
  2435   000D7E  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2436   000D80  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2437   000D82  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2438   000D84  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2439   000D86  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2440   000D88  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2441   000D8A  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2442   000D8C  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2443   000D8E  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2444   000D90                     l2440:
  2445   000D90  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2446   000D94  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2447                           
  2448                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2449   000D98  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2450   000D9A  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2451   000D9C  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2452   000D9E  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2453   000DA0  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2454   000DA2  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2455   000DA4  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2456   000DA6  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2457   000DA8  B0D8               	btfsc	status,0,c
  2458   000DAA  EFD9  F006         	goto	u1421
  2459   000DAE  EFDB  F006         	goto	u1420
  2460   000DB2                     u1421:
  2461   000DB2  EFE9  F006         	goto	l2444
  2462   000DB6                     u1420:
  2463   000DB6  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2464   000DB8  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2465   000DBA  6E2B               	movwf	_get_color_distance$421^0,c
  2466   000DBC  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2467   000DBE  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2468   000DC0  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2469   000DC2  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2470   000DC4  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2471   000DC6  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2472   000DC8  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2473   000DCA  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2474   000DCC  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2475   000DCE  EFF5  F006         	goto	l2446
  2476   000DD2                     l2444:
  2477   000DD2  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2478   000DD4  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2479   000DD6  6E2B               	movwf	_get_color_distance$421^0,c
  2480   000DD8  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2481   000DDA  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2482   000DDC  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2483   000DDE  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2484   000DE0  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2485   000DE2  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2486   000DE4  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2487   000DE6  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2488   000DE8  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2489   000DEA                     l2446:
  2490   000DEA  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2491   000DEE  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2492   000DF2                     
  2493                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2494   000DF2  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2495   000DF6  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2496   000DFA  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2497   000DFE  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2498   000E02  ECE4  F00F         	call	___wmul	;wreg free
  2499   000E06  C001  F01F         	movff	?___wmul,??_get_color_distance
  2500   000E0A  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2501   000E0E  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2502   000E12  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2503   000E16  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2504   000E1A  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2505   000E1E  ECE4  F00F         	call	___wmul	;wreg free
  2506   000E22  5001               	movf	?___wmul^0,w,c
  2507   000E24  241F               	addwf	??_get_color_distance^0,w,c
  2508   000E26  6E21               	movwf	(??_get_color_distance+2)^0,c
  2509   000E28  5002               	movf	(?___wmul+1)^0,w,c
  2510   000E2A  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2511   000E2C  6E22               	movwf	(??_get_color_distance+3)^0,c
  2512   000E2E  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2513   000E32  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2514   000E36  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2515   000E3A  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2516   000E3E  ECE4  F00F         	call	___wmul	;wreg free
  2517   000E42  5001               	movf	?___wmul^0,w,c
  2518   000E44  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2519   000E46  6E07               	movwf	?_get_color_distance^0,c
  2520   000E48  5002               	movf	(?___wmul+1)^0,w,c
  2521   000E4A  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2522   000E4C  6E08               	movwf	(?_get_color_distance+1)^0,c
  2523   000E4E  0012               	return		;funcret
  2524   000E50                     __end_of_get_color_distance:
  2525                           	callstack 0
  2526                           
  2527 ;; *************** function ___lmul *****************
  2528 ;; Defined at:
  2529 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  multiplier      4    0[COMRAM] unsigned long 
  2532 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  product         4    8[COMRAM] unsigned long 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  4    0[COMRAM] unsigned long 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2544 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2545 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2547 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;Total ram usage:       12 bytes
  2549 ;; Hardware stack levels used: 1
  2550 ;; Hardware stack levels required when called: 2
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_get_color_code
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text7
  2559   001BF6                     __ptext7:
  2560                           	callstack 0
  2561   001BF6                     ___lmul:
  2562                           	callstack 27
  2563   001BF6  0E00               	movlw	0
  2564   001BF8  6E09               	movwf	___lmul@product^0,c
  2565   001BFA  0E00               	movlw	0
  2566   001BFC  6E0A               	movwf	(___lmul@product+1)^0,c
  2567   001BFE  0E00               	movlw	0
  2568   001C00  6E0B               	movwf	(___lmul@product+2)^0,c
  2569   001C02  0E00               	movlw	0
  2570   001C04  6E0C               	movwf	(___lmul@product+3)^0,c
  2571   001C06                     l2706:
  2572   001C06  A001               	btfss	___lmul@multiplier^0,0,c
  2573   001C08  EF08  F00E         	goto	u1571
  2574   001C0C  EF0A  F00E         	goto	u1570
  2575   001C10                     u1571:
  2576   001C10  EF12  F00E         	goto	l2710
  2577   001C14                     u1570:
  2578   001C14  5005               	movf	___lmul@multiplicand^0,w,c
  2579   001C16  2609               	addwf	___lmul@product^0,f,c
  2580   001C18  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2581   001C1A  220A               	addwfc	(___lmul@product+1)^0,f,c
  2582   001C1C  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2583   001C1E  220B               	addwfc	(___lmul@product+2)^0,f,c
  2584   001C20  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2585   001C22  220C               	addwfc	(___lmul@product+3)^0,f,c
  2586   001C24                     l2710:
  2587   001C24  90D8               	bcf	status,0,c
  2588   001C26  3605               	rlcf	___lmul@multiplicand^0,f,c
  2589   001C28  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2590   001C2A  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2591   001C2C  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2592   001C2E  90D8               	bcf	status,0,c
  2593   001C30  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2594   001C32  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2595   001C34  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2596   001C36  3201               	rrcf	___lmul@multiplier^0,f,c
  2597   001C38  5001               	movf	___lmul@multiplier^0,w,c
  2598   001C3A  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2599   001C3C  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2600   001C3E  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2601   001C40  A4D8               	btfss	status,2,c
  2602   001C42  EF25  F00E         	goto	u1581
  2603   001C46  EF27  F00E         	goto	u1580
  2604   001C4A                     u1581:
  2605   001C4A  EF03  F00E         	goto	l2706
  2606   001C4E                     u1580:
  2607   001C4E  C009  F001         	movff	___lmul@product,?___lmul
  2608   001C52  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2609   001C56  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2610   001C5A  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2611   001C5E  0012               	return		;funcret
  2612   001C60                     __end_of___lmul:
  2613                           	callstack 0
  2614                           
  2615 ;; *************** function ___lldiv *****************
  2616 ;; Defined at:
  2617 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  dividend        4   12[COMRAM] unsigned long 
  2620 ;;  divisor         4   16[COMRAM] unsigned long 
  2621 ;; Auto vars:     Size  Location     Type
  2622 ;;  quotient        4   20[COMRAM] unsigned long 
  2623 ;;  counter         1   24[COMRAM] unsigned char 
  2624 ;; Return value:  Size  Location     Type
  2625 ;;                  4   12[COMRAM] unsigned long 
  2626 ;; Registers used:
  2627 ;;		wreg, status,2, status,0
  2628 ;; Tracked objects:
  2629 ;;		On entry : 0/0
  2630 ;;		On exit  : 0/0
  2631 ;;		Unchanged: 0/0
  2632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2633 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2634 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2636 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2637 ;;Total ram usage:       13 bytes
  2638 ;; Hardware stack levels used: 1
  2639 ;; Hardware stack levels required when called: 2
  2640 ;; This function calls:
  2641 ;;		Nothing
  2642 ;; This function is called by:
  2643 ;;		_get_color_code
  2644 ;; This function uses a non-reentrant model
  2645 ;;
  2646                           
  2647                           	psect	text8
  2648   001830                     __ptext8:
  2649                           	callstack 0
  2650   001830                     ___lldiv:
  2651                           	callstack 27
  2652   001830  0E00               	movlw	0
  2653   001832  6E15               	movwf	___lldiv@quotient^0,c
  2654   001834  0E00               	movlw	0
  2655   001836  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2656   001838  0E00               	movlw	0
  2657   00183A  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2658   00183C  0E00               	movlw	0
  2659   00183E  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2660   001840  5011               	movf	___lldiv@divisor^0,w,c
  2661   001842  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2662   001844  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2663   001846  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2664   001848  B4D8               	btfsc	status,2,c
  2665   00184A  EF29  F00C         	goto	u1591
  2666   00184E  EF2B  F00C         	goto	u1590
  2667   001852                     u1591:
  2668   001852  EF61  F00C         	goto	l494
  2669   001856                     u1590:
  2670   001856  0E01               	movlw	1
  2671   001858  6E19               	movwf	___lldiv@counter^0,c
  2672   00185A  EF35  F00C         	goto	l2722
  2673   00185E                     l2720:
  2674   00185E  90D8               	bcf	status,0,c
  2675   001860  3611               	rlcf	___lldiv@divisor^0,f,c
  2676   001862  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2677   001864  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2678   001866  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2679   001868  2A19               	incf	___lldiv@counter^0,f,c
  2680   00186A                     l2722:
  2681   00186A  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2682   00186C  EF3A  F00C         	goto	u1601
  2683   001870  EF3C  F00C         	goto	u1600
  2684   001874                     u1601:
  2685   001874  EF2F  F00C         	goto	l2720
  2686   001878                     u1600:
  2687   001878                     l2724:
  2688   001878  90D8               	bcf	status,0,c
  2689   00187A  3615               	rlcf	___lldiv@quotient^0,f,c
  2690   00187C  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2691   00187E  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2692   001880  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2693   001882  5011               	movf	___lldiv@divisor^0,w,c
  2694   001884  5C0D               	subwf	___lldiv@dividend^0,w,c
  2695   001886  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2696   001888  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2697   00188A  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2698   00188C  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2699   00188E  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2700   001890  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2701   001892  A0D8               	btfss	status,0,c
  2702   001894  EF4E  F00C         	goto	u1611
  2703   001898  EF50  F00C         	goto	u1610
  2704   00189C                     u1611:
  2705   00189C  EF59  F00C         	goto	l2732
  2706   0018A0                     u1610:
  2707   0018A0  5011               	movf	___lldiv@divisor^0,w,c
  2708   0018A2  5E0D               	subwf	___lldiv@dividend^0,f,c
  2709   0018A4  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2710   0018A6  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2711   0018A8  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2712   0018AA  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2713   0018AC  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2714   0018AE  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2715   0018B0  8015               	bsf	___lldiv@quotient^0,0,c
  2716   0018B2                     l2732:
  2717   0018B2  90D8               	bcf	status,0,c
  2718   0018B4  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2719   0018B6  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2720   0018B8  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2721   0018BA  3211               	rrcf	___lldiv@divisor^0,f,c
  2722   0018BC  2E19               	decfsz	___lldiv@counter^0,f,c
  2723   0018BE  EF3C  F00C         	goto	l2724
  2724   0018C2                     l494:
  2725   0018C2  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2726   0018C6  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2727   0018CA  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2728   0018CE  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2729   0018D2  0012               	return		;funcret
  2730   0018D4                     __end_of___lldiv:
  2731                           	callstack 0
  2732                           
  2733 ;; *************** function _fullSpeedAhead *****************
  2734 ;; Defined at:
  2735 ;;		line 268 in file "dc_motor.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2738 ;;		 -> main@motorL(9), 
  2739 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2740 ;;		 -> main@motorR(9), 
  2741 ;; Auto vars:     Size  Location     Type
  2742 ;;		None
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  1    wreg      void 
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2752 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2755 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2756 ;;Total ram usage:        4 bytes
  2757 ;; Hardware stack levels used: 1
  2758 ;; Hardware stack levels required when called: 4
  2759 ;; This function calls:
  2760 ;;		_setMotorPWM
  2761 ;; This function is called by:
  2762 ;;		_main
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text9
  2767   001CC4                     __ptext9:
  2768                           	callstack 0
  2769   001CC4                     _fullSpeedAhead:
  2770                           	callstack 26
  2771   001CC4                     
  2772                           ;dc_motor.c: 268: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 269: {;dc_motor.c: 270:     seconds = 0;
  2773   001CC4  0E00               	movlw	0
  2774   001CC6  6E5E               	movwf	(_seconds+1)^0,c
  2775   001CC8  0E00               	movlw	0
  2776   001CCA  6E5D               	movwf	_seconds^0,c
  2777   001CCC                     
  2778                           ;dc_motor.c: 271:     (*mL).direction=0;
  2779   001CCC  EE20 F001          	lfsr	2,1
  2780   001CD0  5014               	movf	fullSpeedAhead@mL^0,w,c
  2781   001CD2  26D9               	addwf	fsr2l,f,c
  2782   001CD4  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2783   001CD6  22DA               	addwfc	fsr2h,f,c
  2784   001CD8  0E00               	movlw	0
  2785   001CDA  6EDF               	movwf	indf2,c
  2786   001CDC                     
  2787                           ;dc_motor.c: 272:     (*mR).direction=0;
  2788   001CDC  EE20 F001          	lfsr	2,1
  2789   001CE0  5016               	movf	fullSpeedAhead@mR^0,w,c
  2790   001CE2  26D9               	addwf	fsr2l,f,c
  2791   001CE4  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2792   001CE6  22DA               	addwfc	fsr2h,f,c
  2793   001CE8  0E00               	movlw	0
  2794   001CEA  6EDF               	movwf	indf2,c
  2795   001CEC                     
  2796                           ;dc_motor.c: 273:     (*mL).power=68;
  2797   001CEC  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2798   001CF0  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2799   001CF4  0E44               	movlw	68
  2800   001CF6  6EDF               	movwf	indf2,c
  2801   001CF8                     
  2802                           ;dc_motor.c: 274:     (*mR).power=68;
  2803   001CF8  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2804   001CFC  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2805   001D00  0E44               	movlw	68
  2806   001D02  6EDF               	movwf	indf2,c
  2807   001D04                     
  2808                           ;dc_motor.c: 275:     setMotorPWM(mL);
  2809   001D04  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2810   001D08  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2811   001D0C  EC28  F007         	call	_setMotorPWM	;wreg free
  2812   001D10                     
  2813                           ;dc_motor.c: 276:     setMotorPWM(mR);
  2814   001D10  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2815   001D14  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2816   001D18  EC28  F007         	call	_setMotorPWM	;wreg free
  2817   001D1C  0012               	return		;funcret
  2818   001D1E                     __end_of_fullSpeedAhead:
  2819                           	callstack 0
  2820                           
  2821 ;; *************** function _color_click_init *****************
  2822 ;; Defined at:
  2823 ;;		line 30 in file "color.c"
  2824 ;; Parameters:    Size  Location     Type
  2825 ;;		None
  2826 ;; Auto vars:     Size  Location     Type
  2827 ;;		None
  2828 ;; Return value:  Size  Location     Type
  2829 ;;                  1    wreg      void 
  2830 ;; Registers used:
  2831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2832 ;; Tracked objects:
  2833 ;;		On entry : 0/0
  2834 ;;		On exit  : 0/0
  2835 ;;		Unchanged: 0/0
  2836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2841 ;;Total ram usage:        1 bytes
  2842 ;; Hardware stack levels used: 1
  2843 ;; Hardware stack levels required when called: 6
  2844 ;; This function calls:
  2845 ;;		_I2C_2_Master_Init
  2846 ;;		_calibrate_black
  2847 ;;		_calibrate_white
  2848 ;;		_color_writetoaddr
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text10
  2855   00164E                     __ptext10:
  2856                           	callstack 0
  2857   00164E                     _color_click_init:
  2858                           	callstack 24
  2859   00164E                     
  2860                           ;color.c: 33:     I2C_2_Master_Init();
  2861   00164E  ECBB  F00F         	call	_I2C_2_Master_Init	;wreg free
  2862   001652                     
  2863                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2864   001652  0E01               	movlw	1
  2865   001654  6E03               	movwf	color_writetoaddr@value^0,c
  2866   001656  0E00               	movlw	0
  2867   001658  ECF7  F00F         	call	_color_writetoaddr
  2868   00165C                     
  2869                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2870   00165C  0E3F               	movlw	63
  2871   00165E  6E16               	movwf	??_color_click_init^0,c
  2872   001660  0E55               	movlw	85
  2873   001662                     u2617:
  2874   001662  2EE8               	decfsz	wreg,f,c
  2875   001664  D7FE               	bra	u2617
  2876   001666  2E16               	decfsz	??_color_click_init^0,f,c
  2877   001668  D7FC               	bra	u2617
  2878   00166A  F000               	nop	
  2879   00166C                     
  2880                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2881   00166C  0E03               	movlw	3
  2882   00166E  6E03               	movwf	color_writetoaddr@value^0,c
  2883   001670  0E00               	movlw	0
  2884   001672  ECF7  F00F         	call	_color_writetoaddr
  2885   001676                     
  2886                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2887   001676  0ED5               	movlw	213
  2888   001678  6E03               	movwf	color_writetoaddr@value^0,c
  2889   00167A  0E01               	movlw	1
  2890   00167C  ECF7  F00F         	call	_color_writetoaddr
  2891   001680                     
  2892                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2893   001680  9E86               	bcf	134,7,c	;volatile
  2894   001682                     
  2895                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2896   001682  9287               	bcf	135,1,c	;volatile
  2897   001684                     
  2898                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2899   001684  9881               	bcf	129,4,c	;volatile
  2900   001686                     
  2901                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2902   001686  EE20  F0B4         	lfsr	2,_Red_rule
  2903   00168A  EE11  F000         	lfsr	1,_Color_rules
  2904   00168E  0E0B               	movlw	11
  2905   001690                     u1621:
  2906   001690  CFDB FFE3          	movff	plusw2,plusw1
  2907   001694  06E8               	decf	wreg,f,c
  2908   001696  E2FC               	bc	u1621
  2909   001698                     
  2910                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2911   001698  EE20  F0A8         	lfsr	2,_Green_rule
  2912   00169C  EE11  F00C         	lfsr	1,_Color_rules+12
  2913   0016A0  0E0B               	movlw	11
  2914   0016A2                     u1631:
  2915   0016A2  CFDB FFE3          	movff	plusw2,plusw1
  2916   0016A6  06E8               	decf	wreg,f,c
  2917   0016A8  E2FC               	bc	u1631
  2918   0016AA                     
  2919                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2920   0016AA  EE20  F09C         	lfsr	2,_Blue_rule
  2921   0016AE  EE11  F018         	lfsr	1,_Color_rules+24
  2922   0016B2  0E0B               	movlw	11
  2923   0016B4                     u1641:
  2924   0016B4  CFDB FFE3          	movff	plusw2,plusw1
  2925   0016B8  06E8               	decf	wreg,f,c
  2926   0016BA  E2FC               	bc	u1641
  2927   0016BC                     
  2928                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2929   0016BC  EE20  F090         	lfsr	2,_Yellow_rule
  2930   0016C0  EE11  F024         	lfsr	1,_Color_rules+36
  2931   0016C4  0E0B               	movlw	11
  2932   0016C6                     u1651:
  2933   0016C6  CFDB FFE3          	movff	plusw2,plusw1
  2934   0016CA  06E8               	decf	wreg,f,c
  2935   0016CC  E2FC               	bc	u1651
  2936   0016CE                     
  2937                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2938   0016CE  EE20  F084         	lfsr	2,_Pink_rule
  2939   0016D2  EE11  F030         	lfsr	1,_Color_rules+48
  2940   0016D6  0E0B               	movlw	11
  2941   0016D8                     u1661:
  2942   0016D8  CFDB FFE3          	movff	plusw2,plusw1
  2943   0016DC  06E8               	decf	wreg,f,c
  2944   0016DE  E2FC               	bc	u1661
  2945   0016E0                     
  2946                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2947   0016E0  EE20  F078         	lfsr	2,_Orange_rule
  2948   0016E4  EE11  F03C         	lfsr	1,_Color_rules+60
  2949   0016E8  0E0B               	movlw	11
  2950   0016EA                     u1671:
  2951   0016EA  CFDB FFE3          	movff	plusw2,plusw1
  2952   0016EE  06E8               	decf	wreg,f,c
  2953   0016F0  E2FC               	bc	u1671
  2954   0016F2                     
  2955                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2956   0016F2  EE21  F084         	lfsr	2,_Lightblue_rule
  2957   0016F6  EE11  F048         	lfsr	1,_Color_rules+72
  2958   0016FA  0E0B               	movlw	11
  2959   0016FC                     u1681:
  2960   0016FC  CFDB FFE3          	movff	plusw2,plusw1
  2961   001700  06E8               	decf	wreg,f,c
  2962   001702  E2FC               	bc	u1681
  2963   001704                     
  2964                           ;color.c: 56:     Color_rules[7] = White_rule;
  2965   001704  EE21  F078         	lfsr	2,_White_rule
  2966   001708  EE11  F054         	lfsr	1,_Color_rules+84
  2967   00170C  0E0B               	movlw	11
  2968   00170E                     u1691:
  2969   00170E  CFDB FFE3          	movff	plusw2,plusw1
  2970   001712  06E8               	decf	wreg,f,c
  2971   001714  E2FC               	bc	u1691
  2972   001716                     
  2973                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2974   001716  EE21  F06C         	lfsr	2,_Black_rule
  2975   00171A  EE11  F060         	lfsr	1,_Color_rules+96
  2976   00171E  0E0B               	movlw	11
  2977   001720                     u1701:
  2978   001720  CFDB FFE3          	movff	plusw2,plusw1
  2979   001724  06E8               	decf	wreg,f,c
  2980   001726  E2FC               	bc	u1701
  2981   001728                     
  2982                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2983   001728  8686               	bsf	134,3,c	;volatile
  2984   00172A                     
  2985                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2986   00172A  010E               	movlb	14	; () banked
  2987   00172C  97B4               	bcf	180,3,b	;volatile
  2988   00172E                     
  2989                           ; BSR set to: 14
  2990                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2991   00172E  8486               	bsf	134,2,c	;volatile
  2992   001730                     
  2993                           ; BSR set to: 14
  2994                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2995   001730  95B4               	bcf	180,2,b	;volatile
  2996   001732                     l67:
  2997   001732  A68E               	btfss	142,3,c	;volatile
  2998   001734  EF9E  F00B         	goto	u1711
  2999   001738  EFA0  F00B         	goto	u1710
  3000   00173C                     u1711:
  3001   00173C  EFA7  F00B         	goto	l71
  3002   001740                     u1710:
  3003   001740  B48E               	btfsc	142,2,c	;volatile
  3004   001742  EFA5  F00B         	goto	u1721
  3005   001746  EFA7  F00B         	goto	u1720
  3006   00174A                     u1721:
  3007   00174A  EF99  F00B         	goto	l67
  3008   00174E                     u1720:
  3009   00174E                     l71:
  3010                           
  3011                           ;color.c: 72:     if(!PORTFbits.RF2){
  3012   00174E  B48E               	btfsc	142,2,c	;volatile
  3013   001750  EFAC  F00B         	goto	u1731
  3014   001754  EFAE  F00B         	goto	u1730
  3015   001758                     u1731:
  3016   001758  EFB0  F00B         	goto	l2782
  3017   00175C                     u1730:
  3018   00175C  EFC2  F00B         	goto	l73
  3019   001760                     l2782:
  3020                           
  3021                           ;color.c: 75:     calibrate_white();
  3022   001760  ECC3  F00B         	call	_calibrate_white	;wreg free
  3023   001764                     l74:
  3024   001764  B68E               	btfsc	142,3,c	;volatile
  3025   001766  EFB7  F00B         	goto	u1741
  3026   00176A  EFB9  F00B         	goto	u1740
  3027   00176E                     u1741:
  3028   00176E  EFB2  F00B         	goto	l74
  3029   001772                     u1740:
  3030   001772                     
  3031                           ;color.c: 77:     calibrate_black();
  3032   001772  EC88  F00A         	call	_calibrate_black	;wreg free
  3033   001776                     l77:
  3034   001776  B68E               	btfsc	142,3,c	;volatile
  3035   001778  EFC0  F00B         	goto	u1751
  3036   00177C  EFC2  F00B         	goto	u1750
  3037   001780                     u1751:
  3038   001780  EFBB  F00B         	goto	l77
  3039   001784                     u1750:
  3040   001784                     l73:
  3041   001784  0012               	return		;funcret
  3042   001786                     __end_of_color_click_init:
  3043                           	callstack 0
  3044                           
  3045 ;; *************** function _color_writetoaddr *****************
  3046 ;; Defined at:
  3047 ;;		line 82 in file "color.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  address         1    wreg     unsigned char 
  3050 ;;  value           1    2[COMRAM] unsigned char 
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;  address         1    3[COMRAM] unsigned char 
  3053 ;; Return value:  Size  Location     Type
  3054 ;;                  1    wreg      void 
  3055 ;; Registers used:
  3056 ;;		wreg, status,2, status,0, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3062 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3066 ;;Total ram usage:        2 bytes
  3067 ;; Hardware stack levels used: 1
  3068 ;; Hardware stack levels required when called: 4
  3069 ;; This function calls:
  3070 ;;		_I2C_2_Master_Start
  3071 ;;		_I2C_2_Master_Stop
  3072 ;;		_I2C_2_Master_Write
  3073 ;; This function is called by:
  3074 ;;		_color_click_init
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text11
  3079   001FEE                     __ptext11:
  3080                           	callstack 0
  3081   001FEE                     _color_writetoaddr:
  3082                           	callstack 25
  3083                           
  3084                           ;incstack = 0
  3085                           ;color_writetoaddr@address stored from wreg
  3086   001FEE  6E04               	movwf	color_writetoaddr@address^0,c
  3087   001FF0                     
  3088                           ;color.c: 83:     I2C_2_Master_Start();
  3089   001FF0  EC39  F010         	call	_I2C_2_Master_Start	;wreg free
  3090                           
  3091                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  3092   001FF4  0E52               	movlw	82
  3093   001FF6  EC23  F010         	call	_I2C_2_Master_Write
  3094                           
  3095                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  3096   001FFA  5004               	movf	color_writetoaddr@address^0,w,c
  3097   001FFC  0980               	iorlw	128
  3098   001FFE  EC23  F010         	call	_I2C_2_Master_Write
  3099                           
  3100                           ;color.c: 86:     I2C_2_Master_Write(value);
  3101   002002  5003               	movf	color_writetoaddr@value^0,w,c
  3102   002004  EC23  F010         	call	_I2C_2_Master_Write
  3103                           
  3104                           ;color.c: 87:     I2C_2_Master_Stop();
  3105   002008  EC34  F010         	call	_I2C_2_Master_Stop	;wreg free
  3106   00200C  0012               	return		;funcret
  3107   00200E                     __end_of_color_writetoaddr:
  3108                           	callstack 0
  3109                           
  3110 ;; *************** function _calibrate_white *****************
  3111 ;; Defined at:
  3112 ;;		line 229 in file "color.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3128 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3130 ;;Total ram usage:        2 bytes
  3131 ;; Hardware stack levels used: 1
  3132 ;; Hardware stack levels required when called: 5
  3133 ;; This function calls:
  3134 ;;		_color_read_Blue
  3135 ;;		_color_read_Green
  3136 ;;		_color_read_Red
  3137 ;;		_set_led_color
  3138 ;; This function is called by:
  3139 ;;		_color_click_init
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text12
  3144   001786                     __ptext12:
  3145                           	callstack 0
  3146   001786                     _calibrate_white:
  3147                           	callstack 24
  3148   001786                     
  3149                           ;color.c: 230:     set_led_color(0b100);
  3150   001786  0E00               	movlw	0
  3151   001788  6E02               	movwf	(set_led_color@color+1)^0,c
  3152   00178A  0E04               	movlw	4
  3153   00178C  6E01               	movwf	set_led_color@color^0,c
  3154   00178E  EC78  F00F         	call	_set_led_color	;wreg free
  3155   001792                     
  3156                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3157   001792  0E12               	movlw	18
  3158   001794  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3159   001796  0EDC               	movlw	220
  3160   001798  6E0C               	movwf	??_calibrate_white^0,c
  3161   00179A  0E60               	movlw	96
  3162   00179C                     u2627:
  3163   00179C  2EE8               	decfsz	wreg,f,c
  3164   00179E  D7FE               	bra	u2627
  3165   0017A0  2E0C               	decfsz	??_calibrate_white^0,f,c
  3166   0017A2  D7FC               	bra	u2627
  3167   0017A4  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3168   0017A6  D7FA               	bra	u2627
  3169   0017A8                     
  3170                           ;color.c: 232:     White_setup.R = color_read_Red();
  3171   0017A8  EC8F  F00E         	call	_color_read_Red	;wreg free
  3172   0017AC  C005  F06C         	movff	?_color_read_Red,_White_setup
  3173   0017B0  C006  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3174   0017B4  0100               	movlb	0	; () banked
  3175   0017B6  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3176   0017B8  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3177   0017BA                     
  3178                           ; BSR set to: 0
  3179                           ;color.c: 233:     set_led_color(0b010);
  3180   0017BA  0E00               	movlw	0
  3181   0017BC  6E02               	movwf	(set_led_color@color+1)^0,c
  3182   0017BE  0E02               	movlw	2
  3183   0017C0  6E01               	movwf	set_led_color@color^0,c
  3184   0017C2  EC78  F00F         	call	_set_led_color	;wreg free
  3185   0017C6                     
  3186                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3187   0017C6  0E12               	movlw	18
  3188   0017C8  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3189   0017CA  0EDC               	movlw	220
  3190   0017CC  6E0C               	movwf	??_calibrate_white^0,c
  3191   0017CE  0E60               	movlw	96
  3192   0017D0                     u2637:
  3193   0017D0  2EE8               	decfsz	wreg,f,c
  3194   0017D2  D7FE               	bra	u2637
  3195   0017D4  2E0C               	decfsz	??_calibrate_white^0,f,c
  3196   0017D6  D7FC               	bra	u2637
  3197   0017D8  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3198   0017DA  D7FA               	bra	u2637
  3199                           
  3200                           ;color.c: 235:     White_setup.G = color_read_Green();
  3201   0017DC  ECB7  F00E         	call	_color_read_Green	;wreg free
  3202   0017E0  C005  F070         	movff	?_color_read_Green,_White_setup+4
  3203   0017E4  C006  F071         	movff	?_color_read_Green+1,_White_setup+5
  3204   0017E8  0100               	movlb	0	; () banked
  3205   0017EA  6B72               	clrf	(_White_setup+6)& (0+255),b
  3206   0017EC  6B73               	clrf	(_White_setup+7)& (0+255),b
  3207   0017EE                     
  3208                           ; BSR set to: 0
  3209                           ;color.c: 236:     set_led_color(0b001);
  3210   0017EE  0E00               	movlw	0
  3211   0017F0  6E02               	movwf	(set_led_color@color+1)^0,c
  3212   0017F2  0E01               	movlw	1
  3213   0017F4  6E01               	movwf	set_led_color@color^0,c
  3214   0017F6  EC78  F00F         	call	_set_led_color	;wreg free
  3215   0017FA                     
  3216                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3217   0017FA  0E12               	movlw	18
  3218   0017FC  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3219   0017FE  0EDC               	movlw	220
  3220   001800  6E0C               	movwf	??_calibrate_white^0,c
  3221   001802  0E60               	movlw	96
  3222   001804                     u2647:
  3223   001804  2EE8               	decfsz	wreg,f,c
  3224   001806  D7FE               	bra	u2647
  3225   001808  2E0C               	decfsz	??_calibrate_white^0,f,c
  3226   00180A  D7FC               	bra	u2647
  3227   00180C  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3228   00180E  D7FA               	bra	u2647
  3229   001810                     
  3230                           ;color.c: 238:     White_setup.B = color_read_Blue();
  3231   001810  EC07  F00F         	call	_color_read_Blue	;wreg free
  3232   001814  C005  F074         	movff	?_color_read_Blue,_White_setup+8
  3233   001818  C006  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3234   00181C  0100               	movlb	0	; () banked
  3235   00181E  6B76               	clrf	(_White_setup+10)& (0+255),b
  3236   001820  6B77               	clrf	(_White_setup+11)& (0+255),b
  3237   001822                     
  3238                           ; BSR set to: 0
  3239                           ;color.c: 239:     set_led_color(0b000);
  3240   001822  0E00               	movlw	0
  3241   001824  6E02               	movwf	(set_led_color@color+1)^0,c
  3242   001826  0E00               	movlw	0
  3243   001828  6E01               	movwf	set_led_color@color^0,c
  3244   00182A  EC78  F00F         	call	_set_led_color	;wreg free
  3245   00182E  0012               	return		;funcret
  3246   001830                     __end_of_calibrate_white:
  3247                           	callstack 0
  3248                           
  3249 ;; *************** function _calibrate_black *****************
  3250 ;; Defined at:
  3251 ;;		line 209 in file "color.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;  clear2          2   17[COMRAM] unsigned int 
  3256 ;;  clear1          2   15[COMRAM] unsigned int 
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3267 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3269 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3270 ;;Total ram usage:        8 bytes
  3271 ;; Hardware stack levels used: 1
  3272 ;; Hardware stack levels required when called: 5
  3273 ;; This function calls:
  3274 ;;		___lwdiv
  3275 ;;		_color_read_Blue
  3276 ;;		_color_read_Clear
  3277 ;;		_color_read_Green
  3278 ;;		_color_read_Red
  3279 ;;		_set_led_color
  3280 ;; This function is called by:
  3281 ;;		_color_click_init
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text13
  3286   001510                     __ptext13:
  3287                           	callstack 0
  3288   001510                     _calibrate_black:
  3289                           	callstack 24
  3290   001510                     
  3291                           ;color.c: 210:     set_led_color(0b100);
  3292   001510  0E00               	movlw	0
  3293   001512  6E02               	movwf	(set_led_color@color+1)^0,c
  3294   001514  0E04               	movlw	4
  3295   001516  6E01               	movwf	set_led_color@color^0,c
  3296   001518  EC78  F00F         	call	_set_led_color	;wreg free
  3297   00151C                     
  3298                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3299   00151C  0E12               	movlw	18
  3300   00151E  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3301   001520  0EDC               	movlw	220
  3302   001522  6E0E               	movwf	??_calibrate_black^0,c
  3303   001524  0E60               	movlw	96
  3304   001526                     u2657:
  3305   001526  2EE8               	decfsz	wreg,f,c
  3306   001528  D7FE               	bra	u2657
  3307   00152A  2E0E               	decfsz	??_calibrate_black^0,f,c
  3308   00152C  D7FC               	bra	u2657
  3309   00152E  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3310   001530  D7FA               	bra	u2657
  3311   001532                     
  3312                           ;color.c: 212:     Black_setup.R = color_read_Red();
  3313   001532  EC8F  F00E         	call	_color_read_Red	;wreg free
  3314   001536  C005  F060         	movff	?_color_read_Red,_Black_setup
  3315   00153A  C006  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3316   00153E  0100               	movlb	0	; () banked
  3317   001540  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3318   001542  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3319   001544                     
  3320                           ; BSR set to: 0
  3321                           ;color.c: 213:     set_led_color(0b010);
  3322   001544  0E00               	movlw	0
  3323   001546  6E02               	movwf	(set_led_color@color+1)^0,c
  3324   001548  0E02               	movlw	2
  3325   00154A  6E01               	movwf	set_led_color@color^0,c
  3326   00154C  EC78  F00F         	call	_set_led_color	;wreg free
  3327   001550                     
  3328                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3329   001550  0E12               	movlw	18
  3330   001552  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3331   001554  0EDC               	movlw	220
  3332   001556  6E0E               	movwf	??_calibrate_black^0,c
  3333   001558  0E60               	movlw	96
  3334   00155A                     u2667:
  3335   00155A  2EE8               	decfsz	wreg,f,c
  3336   00155C  D7FE               	bra	u2667
  3337   00155E  2E0E               	decfsz	??_calibrate_black^0,f,c
  3338   001560  D7FC               	bra	u2667
  3339   001562  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3340   001564  D7FA               	bra	u2667
  3341                           
  3342                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3343   001566  ECB7  F00E         	call	_color_read_Green	;wreg free
  3344   00156A  C005  F064         	movff	?_color_read_Green,_Black_setup+4
  3345   00156E  C006  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3346   001572  0100               	movlb	0	; () banked
  3347   001574  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3348   001576  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3349   001578                     
  3350                           ; BSR set to: 0
  3351                           ;color.c: 216:     set_led_color(0b001);
  3352   001578  0E00               	movlw	0
  3353   00157A  6E02               	movwf	(set_led_color@color+1)^0,c
  3354   00157C  0E01               	movlw	1
  3355   00157E  6E01               	movwf	set_led_color@color^0,c
  3356   001580  EC78  F00F         	call	_set_led_color	;wreg free
  3357   001584                     
  3358                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3359   001584  0E12               	movlw	18
  3360   001586  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3361   001588  0EDC               	movlw	220
  3362   00158A  6E0E               	movwf	??_calibrate_black^0,c
  3363   00158C  0E60               	movlw	96
  3364   00158E                     u2677:
  3365   00158E  2EE8               	decfsz	wreg,f,c
  3366   001590  D7FE               	bra	u2677
  3367   001592  2E0E               	decfsz	??_calibrate_black^0,f,c
  3368   001594  D7FC               	bra	u2677
  3369   001596  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3370   001598  D7FA               	bra	u2677
  3371   00159A                     
  3372                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3373   00159A  EC07  F00F         	call	_color_read_Blue	;wreg free
  3374   00159E  C005  F068         	movff	?_color_read_Blue,_Black_setup+8
  3375   0015A2  C006  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3376   0015A6  0100               	movlb	0	; () banked
  3377   0015A8  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3378   0015AA  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3379   0015AC                     
  3380                           ; BSR set to: 0
  3381                           ;color.c: 219:     set_led_color(0b000);
  3382   0015AC  0E00               	movlw	0
  3383   0015AE  6E02               	movwf	(set_led_color@color+1)^0,c
  3384   0015B0  0E00               	movlw	0
  3385   0015B2  6E01               	movwf	set_led_color@color^0,c
  3386   0015B4  EC78  F00F         	call	_set_led_color	;wreg free
  3387                           
  3388                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3389   0015B8  0E12               	movlw	18
  3390   0015BA  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3391   0015BC  0EDC               	movlw	220
  3392   0015BE  6E0E               	movwf	??_calibrate_black^0,c
  3393   0015C0  0E60               	movlw	96
  3394   0015C2                     u2687:
  3395   0015C2  2EE8               	decfsz	wreg,f,c
  3396   0015C4  D7FE               	bra	u2687
  3397   0015C6  2E0E               	decfsz	??_calibrate_black^0,f,c
  3398   0015C8  D7FC               	bra	u2687
  3399   0015CA  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3400   0015CC  D7FA               	bra	u2687
  3401   0015CE                     
  3402                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3403   0015CE  ECDF  F00E         	call	_color_read_Clear	;wreg free
  3404   0015D2  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3405   0015D6  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3406   0015DA                     
  3407                           ;color.c: 222:     set_led_color(0b111);
  3408   0015DA  0E00               	movlw	0
  3409   0015DC  6E02               	movwf	(set_led_color@color+1)^0,c
  3410   0015DE  0E07               	movlw	7
  3411   0015E0  6E01               	movwf	set_led_color@color^0,c
  3412   0015E2  EC78  F00F         	call	_set_led_color	;wreg free
  3413   0015E6                     
  3414                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3415   0015E6  0E12               	movlw	18
  3416   0015E8  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3417   0015EA  0EDC               	movlw	220
  3418   0015EC  6E0E               	movwf	??_calibrate_black^0,c
  3419   0015EE  0E60               	movlw	96
  3420   0015F0                     u2697:
  3421   0015F0  2EE8               	decfsz	wreg,f,c
  3422   0015F2  D7FE               	bra	u2697
  3423   0015F4  2E0E               	decfsz	??_calibrate_black^0,f,c
  3424   0015F6  D7FC               	bra	u2697
  3425   0015F8  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3426   0015FA  D7FA               	bra	u2697
  3427   0015FC                     
  3428                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3429   0015FC  ECDF  F00E         	call	_color_read_Clear	;wreg free
  3430   001600  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3431   001604  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3432                           
  3433                           ;color.c: 225:     set_led_color(0b000);
  3434   001608  0E00               	movlw	0
  3435   00160A  6E02               	movwf	(set_led_color@color+1)^0,c
  3436   00160C  0E00               	movlw	0
  3437   00160E  6E01               	movwf	set_led_color@color^0,c
  3438   001610  EC78  F00F         	call	_set_led_color	;wreg free
  3439   001614                     
  3440                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3441   001614  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3442   001618  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3443   00161C  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3444   001620  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3445   001624  ECC1  F00D         	call	___lwdiv	;wreg free
  3446   001628  C007  F014         	movff	?___lwdiv,_calibrate_black$2448
  3447   00162C  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2448+1
  3448   001630                     
  3449                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3450   001630  C014  F007         	movff	_calibrate_black$2448,___lwdiv@dividend
  3451   001634  C015  F008         	movff	_calibrate_black$2448+1,___lwdiv@dividend+1
  3452   001638  0E00               	movlw	0
  3453   00163A  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3454   00163C  0E05               	movlw	5
  3455   00163E  6E09               	movwf	___lwdiv@divisor^0,c
  3456   001640  ECC1  F00D         	call	___lwdiv	;wreg free
  3457   001644  C007  F057         	movff	?___lwdiv,_wall_coef
  3458   001648  C008  F058         	movff	?___lwdiv+1,_wall_coef+1
  3459   00164C  0012               	return		;funcret
  3460   00164E                     __end_of_calibrate_black:
  3461                           	callstack 0
  3462                           
  3463 ;; *************** function _set_led_color *****************
  3464 ;; Defined at:
  3465 ;;		line 154 in file "color.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  color           2    0[COMRAM] unsigned int 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		None
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3483 ;;Total ram usage:        2 bytes
  3484 ;; Hardware stack levels used: 1
  3485 ;; Hardware stack levels required when called: 2
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_get_color_code
  3490 ;;		_calibrate_black
  3491 ;;		_calibrate_white
  3492 ;;		_get_wall_presence
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text14
  3497   001EF0                     __ptext14:
  3498                           	callstack 0
  3499   001EF0                     _set_led_color:
  3500                           	callstack 27
  3501   001EF0                     
  3502                           ;color.c: 158:     if(color & 0b100){
  3503   001EF0  A401               	btfss	set_led_color@color^0,2,c
  3504   001EF2  EF7D  F00F         	goto	u1351
  3505   001EF6  EF7F  F00F         	goto	u1350
  3506   001EFA                     u1351:
  3507   001EFA  EF82  F00F         	goto	l112
  3508   001EFE                     u1350:
  3509   001EFE                     
  3510                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3511   001EFE  827F               	bsf	127,1,c	;volatile
  3512                           
  3513                           ;color.c: 160:     }else{
  3514   001F00  EF83  F00F         	goto	l113
  3515   001F04                     l112:
  3516                           
  3517                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3518   001F04  927F               	bcf	127,1,c	;volatile
  3519   001F06                     l113:
  3520                           
  3521                           ;color.c: 163:     if(color & 0b010){
  3522   001F06  A201               	btfss	set_led_color@color^0,1,c
  3523   001F08  EF88  F00F         	goto	u1361
  3524   001F0C  EF8A  F00F         	goto	u1360
  3525   001F10                     u1361:
  3526   001F10  EF8D  F00F         	goto	l114
  3527   001F14                     u1360:
  3528   001F14                     
  3529                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3530   001F14  8879               	bsf	121,4,c	;volatile
  3531                           
  3532                           ;color.c: 165:     }else{
  3533   001F16  EF8E  F00F         	goto	l115
  3534   001F1A                     l114:
  3535                           
  3536                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3537   001F1A  9879               	bcf	121,4,c	;volatile
  3538   001F1C                     l115:
  3539                           
  3540                           ;color.c: 168:     if(color & 0b001){
  3541   001F1C  A001               	btfss	set_led_color@color^0,0,c
  3542   001F1E  EF93  F00F         	goto	u1371
  3543   001F22  EF95  F00F         	goto	u1370
  3544   001F26                     u1371:
  3545   001F26  EF98  F00F         	goto	l116
  3546   001F2A                     u1370:
  3547   001F2A                     
  3548                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3549   001F2A  8E7E               	bsf	126,7,c	;volatile
  3550                           
  3551                           ;color.c: 170:     }else{
  3552   001F2C  EF99  F00F         	goto	l118
  3553   001F30                     l116:
  3554                           
  3555                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3556   001F30  9E7E               	bcf	126,7,c	;volatile
  3557   001F32                     l118:
  3558   001F32  0012               	return		;funcret
  3559   001F34                     __end_of_set_led_color:
  3560                           	callstack 0
  3561                           
  3562 ;; *************** function _color_read_Red *****************
  3563 ;; Defined at:
  3564 ;;		line 90 in file "color.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  tmp             2    9[COMRAM] unsigned int 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  2    4[COMRAM] unsigned int 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;Total ram usage:        7 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 4
  3585 ;; This function calls:
  3586 ;;		_I2C_2_Master_Read
  3587 ;;		_I2C_2_Master_RepStart
  3588 ;;		_I2C_2_Master_Start
  3589 ;;		_I2C_2_Master_Stop
  3590 ;;		_I2C_2_Master_Write
  3591 ;; This function is called by:
  3592 ;;		_get_color_code
  3593 ;;		_calibrate_black
  3594 ;;		_calibrate_white
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text15
  3599   001D1E                     __ptext15:
  3600                           	callstack 0
  3601   001D1E                     _color_read_Red:
  3602                           	callstack 25
  3603   001D1E                     
  3604                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3605   001D1E  EC39  F010         	call	_I2C_2_Master_Start	;wreg free
  3606                           
  3607                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3608   001D22  0E52               	movlw	82
  3609   001D24  EC23  F010         	call	_I2C_2_Master_Write
  3610                           
  3611                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3612   001D28  0EB6               	movlw	182
  3613   001D2A  EC23  F010         	call	_I2C_2_Master_Write
  3614                           
  3615                           ;color.c: 96:  I2C_2_Master_RepStart();
  3616   001D2E  EC3E  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3617                           
  3618                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3619   001D32  0E53               	movlw	83
  3620   001D34  EC23  F010         	call	_I2C_2_Master_Write
  3621                           
  3622                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3623   001D38  0E01               	movlw	1
  3624   001D3A  EC9A  F00F         	call	_I2C_2_Master_Read
  3625   001D3E  6E07               	movwf	??_color_read_Red^0,c
  3626   001D40  5007               	movf	??_color_read_Red^0,w,c
  3627   001D42  6E0A               	movwf	color_read_Red@tmp^0,c
  3628   001D44  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3629                           
  3630                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3631   001D46  0E00               	movlw	0
  3632   001D48  EC9A  F00F         	call	_I2C_2_Master_Read
  3633   001D4C  6E07               	movwf	??_color_read_Red^0,c
  3634   001D4E  5007               	movf	??_color_read_Red^0,w,c
  3635   001D50  6E09               	movwf	(??_color_read_Red+2)^0,c
  3636   001D52  6A08               	clrf	(??_color_read_Red+1)^0,c
  3637   001D54  500A               	movf	color_read_Red@tmp^0,w,c
  3638   001D56  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3639   001D58  6E0A               	movwf	color_read_Red@tmp^0,c
  3640   001D5A  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3641   001D5C  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3642   001D5E  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3643                           
  3644                           ;color.c: 100:  I2C_2_Master_Stop();
  3645   001D60  EC34  F010         	call	_I2C_2_Master_Stop	;wreg free
  3646   001D64                     
  3647                           ;color.c: 101:  return tmp;
  3648   001D64  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3649   001D68  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3650   001D6C  0012               	return		;funcret
  3651   001D6E                     __end_of_color_read_Red:
  3652                           	callstack 0
  3653                           
  3654 ;; *************** function _color_read_Green *****************
  3655 ;; Defined at:
  3656 ;;		line 118 in file "color.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  tmp             2    9[COMRAM] unsigned int 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    4[COMRAM] unsigned int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3673 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;Total ram usage:        7 bytes
  3675 ;; Hardware stack levels used: 1
  3676 ;; Hardware stack levels required when called: 4
  3677 ;; This function calls:
  3678 ;;		_I2C_2_Master_Read
  3679 ;;		_I2C_2_Master_RepStart
  3680 ;;		_I2C_2_Master_Start
  3681 ;;		_I2C_2_Master_Stop
  3682 ;;		_I2C_2_Master_Write
  3683 ;; This function is called by:
  3684 ;;		_get_color_code
  3685 ;;		_calibrate_black
  3686 ;;		_calibrate_white
  3687 ;; This function uses a non-reentrant model
  3688 ;;
  3689                           
  3690                           	psect	text16
  3691   001D6E                     __ptext16:
  3692                           	callstack 0
  3693   001D6E                     _color_read_Green:
  3694                           	callstack 25
  3695   001D6E                     
  3696                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3697   001D6E  EC39  F010         	call	_I2C_2_Master_Start	;wreg free
  3698                           
  3699                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3700   001D72  0E52               	movlw	82
  3701   001D74  EC23  F010         	call	_I2C_2_Master_Write
  3702                           
  3703                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3704   001D78  0EB8               	movlw	184
  3705   001D7A  EC23  F010         	call	_I2C_2_Master_Write
  3706                           
  3707                           ;color.c: 124:  I2C_2_Master_RepStart();
  3708   001D7E  EC3E  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3709                           
  3710                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3711   001D82  0E53               	movlw	83
  3712   001D84  EC23  F010         	call	_I2C_2_Master_Write
  3713                           
  3714                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3715   001D88  0E01               	movlw	1
  3716   001D8A  EC9A  F00F         	call	_I2C_2_Master_Read
  3717   001D8E  6E07               	movwf	??_color_read_Green^0,c
  3718   001D90  5007               	movf	??_color_read_Green^0,w,c
  3719   001D92  6E0A               	movwf	color_read_Green@tmp^0,c
  3720   001D94  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3721                           
  3722                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3723   001D96  0E00               	movlw	0
  3724   001D98  EC9A  F00F         	call	_I2C_2_Master_Read
  3725   001D9C  6E07               	movwf	??_color_read_Green^0,c
  3726   001D9E  5007               	movf	??_color_read_Green^0,w,c
  3727   001DA0  6E09               	movwf	(??_color_read_Green+2)^0,c
  3728   001DA2  6A08               	clrf	(??_color_read_Green+1)^0,c
  3729   001DA4  500A               	movf	color_read_Green@tmp^0,w,c
  3730   001DA6  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3731   001DA8  6E0A               	movwf	color_read_Green@tmp^0,c
  3732   001DAA  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3733   001DAC  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3734   001DAE  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3735                           
  3736                           ;color.c: 128:  I2C_2_Master_Stop();
  3737   001DB0  EC34  F010         	call	_I2C_2_Master_Stop	;wreg free
  3738   001DB4                     
  3739                           ;color.c: 129:  return tmp;
  3740   001DB4  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3741   001DB8  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3742   001DBC  0012               	return		;funcret
  3743   001DBE                     __end_of_color_read_Green:
  3744                           	callstack 0
  3745                           
  3746 ;; *************** function _color_read_Clear *****************
  3747 ;; Defined at:
  3748 ;;		line 132 in file "color.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  tmp             2    9[COMRAM] unsigned int 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  2    4[COMRAM] unsigned int 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3764 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3765 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3766 ;;Total ram usage:        7 bytes
  3767 ;; Hardware stack levels used: 1
  3768 ;; Hardware stack levels required when called: 4
  3769 ;; This function calls:
  3770 ;;		_I2C_2_Master_Read
  3771 ;;		_I2C_2_Master_RepStart
  3772 ;;		_I2C_2_Master_Start
  3773 ;;		_I2C_2_Master_Stop
  3774 ;;		_I2C_2_Master_Write
  3775 ;; This function is called by:
  3776 ;;		_calibrate_black
  3777 ;;		_get_wall_presence
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text17
  3782   001DBE                     __ptext17:
  3783                           	callstack 0
  3784   001DBE                     _color_read_Clear:
  3785                           	callstack 25
  3786   001DBE                     
  3787                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3788   001DBE  EC39  F010         	call	_I2C_2_Master_Start	;wreg free
  3789                           
  3790                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3791   001DC2  0E52               	movlw	82
  3792   001DC4  EC23  F010         	call	_I2C_2_Master_Write
  3793                           
  3794                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3795   001DC8  0EB4               	movlw	180
  3796   001DCA  EC23  F010         	call	_I2C_2_Master_Write
  3797                           
  3798                           ;color.c: 138:  I2C_2_Master_RepStart();
  3799   001DCE  EC3E  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3800                           
  3801                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3802   001DD2  0E53               	movlw	83
  3803   001DD4  EC23  F010         	call	_I2C_2_Master_Write
  3804                           
  3805                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3806   001DD8  0E01               	movlw	1
  3807   001DDA  EC9A  F00F         	call	_I2C_2_Master_Read
  3808   001DDE  6E07               	movwf	??_color_read_Clear^0,c
  3809   001DE0  5007               	movf	??_color_read_Clear^0,w,c
  3810   001DE2  6E0A               	movwf	color_read_Clear@tmp^0,c
  3811   001DE4  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3812                           
  3813                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3814   001DE6  0E00               	movlw	0
  3815   001DE8  EC9A  F00F         	call	_I2C_2_Master_Read
  3816   001DEC  6E07               	movwf	??_color_read_Clear^0,c
  3817   001DEE  5007               	movf	??_color_read_Clear^0,w,c
  3818   001DF0  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3819   001DF2  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3820   001DF4  500A               	movf	color_read_Clear@tmp^0,w,c
  3821   001DF6  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3822   001DF8  6E0A               	movwf	color_read_Clear@tmp^0,c
  3823   001DFA  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3824   001DFC  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3825   001DFE  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3826                           
  3827                           ;color.c: 142:  I2C_2_Master_Stop();
  3828   001E00  EC34  F010         	call	_I2C_2_Master_Stop	;wreg free
  3829   001E04                     
  3830                           ;color.c: 143:  return tmp;
  3831   001E04  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3832   001E08  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3833   001E0C  0012               	return		;funcret
  3834   001E0E                     __end_of_color_read_Clear:
  3835                           	callstack 0
  3836                           
  3837 ;; *************** function _color_read_Blue *****************
  3838 ;; Defined at:
  3839 ;;		line 104 in file "color.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;		None
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  tmp             2    9[COMRAM] unsigned int 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  2    4[COMRAM] unsigned int 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3854 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3855 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3856 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3857 ;;Total ram usage:        7 bytes
  3858 ;; Hardware stack levels used: 1
  3859 ;; Hardware stack levels required when called: 4
  3860 ;; This function calls:
  3861 ;;		_I2C_2_Master_Read
  3862 ;;		_I2C_2_Master_RepStart
  3863 ;;		_I2C_2_Master_Start
  3864 ;;		_I2C_2_Master_Stop
  3865 ;;		_I2C_2_Master_Write
  3866 ;; This function is called by:
  3867 ;;		_get_color_code
  3868 ;;		_calibrate_black
  3869 ;;		_calibrate_white
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text18
  3874   001E0E                     __ptext18:
  3875                           	callstack 0
  3876   001E0E                     _color_read_Blue:
  3877                           	callstack 25
  3878   001E0E                     
  3879                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3880   001E0E  EC39  F010         	call	_I2C_2_Master_Start	;wreg free
  3881                           
  3882                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3883   001E12  0E52               	movlw	82
  3884   001E14  EC23  F010         	call	_I2C_2_Master_Write
  3885                           
  3886                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3887   001E18  0EBA               	movlw	186
  3888   001E1A  EC23  F010         	call	_I2C_2_Master_Write
  3889                           
  3890                           ;color.c: 110:  I2C_2_Master_RepStart();
  3891   001E1E  EC3E  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3892                           
  3893                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3894   001E22  0E53               	movlw	83
  3895   001E24  EC23  F010         	call	_I2C_2_Master_Write
  3896                           
  3897                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3898   001E28  0E01               	movlw	1
  3899   001E2A  EC9A  F00F         	call	_I2C_2_Master_Read
  3900   001E2E  6E07               	movwf	??_color_read_Blue^0,c
  3901   001E30  5007               	movf	??_color_read_Blue^0,w,c
  3902   001E32  6E0A               	movwf	color_read_Blue@tmp^0,c
  3903   001E34  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3904                           
  3905                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3906   001E36  0E00               	movlw	0
  3907   001E38  EC9A  F00F         	call	_I2C_2_Master_Read
  3908   001E3C  6E07               	movwf	??_color_read_Blue^0,c
  3909   001E3E  5007               	movf	??_color_read_Blue^0,w,c
  3910   001E40  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3911   001E42  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3912   001E44  500A               	movf	color_read_Blue@tmp^0,w,c
  3913   001E46  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3914   001E48  6E0A               	movwf	color_read_Blue@tmp^0,c
  3915   001E4A  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3916   001E4C  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3917   001E4E  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3918                           
  3919                           ;color.c: 114:  I2C_2_Master_Stop();
  3920   001E50  EC34  F010         	call	_I2C_2_Master_Stop	;wreg free
  3921   001E54                     
  3922                           ;color.c: 115:  return tmp;
  3923   001E54  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3924   001E58  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3925   001E5C  0012               	return		;funcret
  3926   001E5E                     __end_of_color_read_Blue:
  3927                           	callstack 0
  3928                           
  3929 ;; *************** function _I2C_2_Master_Write *****************
  3930 ;; Defined at:
  3931 ;;		line 45 in file "i2c.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  data_byte       1    wreg     unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  data_byte       1    1[COMRAM] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      void 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3948 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3949 ;;Total ram usage:        1 bytes
  3950 ;; Hardware stack levels used: 1
  3951 ;; Hardware stack levels required when called: 3
  3952 ;; This function calls:
  3953 ;;		_I2C_2_Master_Idle
  3954 ;; This function is called by:
  3955 ;;		_color_writetoaddr
  3956 ;;		_color_read_Red
  3957 ;;		_color_read_Blue
  3958 ;;		_color_read_Green
  3959 ;;		_color_read_Clear
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text19
  3964   002046                     __ptext19:
  3965                           	callstack 0
  3966   002046                     _I2C_2_Master_Write:
  3967                           	callstack 25
  3968                           
  3969                           ;incstack = 0
  3970                           ;I2C_2_Master_Write@data_byte stored from wreg
  3971   002046  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3972   002048                     
  3973                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3974   002048  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3975   00204C                     
  3976                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3977   00204C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3978   002050  0012               	return		;funcret
  3979   002052                     __end_of_I2C_2_Master_Write:
  3980                           	callstack 0
  3981                           
  3982 ;; *************** function _I2C_2_Master_Stop *****************
  3983 ;; Defined at:
  3984 ;;		line 39 in file "i2c.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, status,2, status,0, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used: 1
  4004 ;; Hardware stack levels required when called: 3
  4005 ;; This function calls:
  4006 ;;		_I2C_2_Master_Idle
  4007 ;; This function is called by:
  4008 ;;		_color_writetoaddr
  4009 ;;		_color_read_Red
  4010 ;;		_color_read_Blue
  4011 ;;		_color_read_Green
  4012 ;;		_color_read_Clear
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           	psect	text20
  4017   002068                     __ptext20:
  4018                           	callstack 0
  4019   002068                     _I2C_2_Master_Stop:
  4020                           	callstack 25
  4021   002068                     
  4022                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4023   002068  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4024   00206C                     
  4025                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4026   00206C  010E               	movlb	14	; () banked
  4027   00206E  85DA               	bsf	218,2,b	;volatile
  4028   002070                     
  4029                           ; BSR set to: 14
  4030   002070  0012               	return		;funcret
  4031   002072                     __end_of_I2C_2_Master_Stop:
  4032                           	callstack 0
  4033                           
  4034 ;; *************** function _I2C_2_Master_Start *****************
  4035 ;; Defined at:
  4036 ;;		line 27 in file "i2c.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;		None
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4054 ;;Total ram usage:        0 bytes
  4055 ;; Hardware stack levels used: 1
  4056 ;; Hardware stack levels required when called: 3
  4057 ;; This function calls:
  4058 ;;		_I2C_2_Master_Idle
  4059 ;; This function is called by:
  4060 ;;		_color_writetoaddr
  4061 ;;		_color_read_Red
  4062 ;;		_color_read_Blue
  4063 ;;		_color_read_Green
  4064 ;;		_color_read_Clear
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text21
  4069   002072                     __ptext21:
  4070                           	callstack 0
  4071   002072                     _I2C_2_Master_Start:
  4072                           	callstack 25
  4073   002072                     
  4074                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4075   002072  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4076   002076                     
  4077                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4078   002076  010E               	movlb	14	; () banked
  4079   002078  81DA               	bsf	218,0,b	;volatile
  4080   00207A                     
  4081                           ; BSR set to: 14
  4082   00207A  0012               	return		;funcret
  4083   00207C                     __end_of_I2C_2_Master_Start:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function _I2C_2_Master_RepStart *****************
  4087 ;; Defined at:
  4088 ;;		line 33 in file "i2c.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;Total ram usage:        0 bytes
  4107 ;; Hardware stack levels used: 1
  4108 ;; Hardware stack levels required when called: 3
  4109 ;; This function calls:
  4110 ;;		_I2C_2_Master_Idle
  4111 ;; This function is called by:
  4112 ;;		_color_read_Red
  4113 ;;		_color_read_Blue
  4114 ;;		_color_read_Green
  4115 ;;		_color_read_Clear
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text22
  4120   00207C                     __ptext22:
  4121                           	callstack 0
  4122   00207C                     _I2C_2_Master_RepStart:
  4123                           	callstack 25
  4124   00207C                     
  4125                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4126   00207C  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4127   002080                     
  4128                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4129   002080  010E               	movlb	14	; () banked
  4130   002082  83DA               	bsf	218,1,b	;volatile
  4131   002084                     
  4132                           ; BSR set to: 14
  4133   002084  0012               	return		;funcret
  4134   002086                     __end_of_I2C_2_Master_RepStart:
  4135                           	callstack 0
  4136                           
  4137 ;; *************** function _I2C_2_Master_Read *****************
  4138 ;; Defined at:
  4139 ;;		line 51 in file "i2c.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;  ack             1    wreg     unsigned char 
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;  ack             1    2[COMRAM] unsigned char 
  4144 ;;  tmp             1    3[COMRAM] unsigned char 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      unsigned char 
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4155 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4157 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4158 ;;Total ram usage:        3 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 3
  4161 ;; This function calls:
  4162 ;;		_I2C_2_Master_Idle
  4163 ;; This function is called by:
  4164 ;;		_color_read_Red
  4165 ;;		_color_read_Blue
  4166 ;;		_color_read_Green
  4167 ;;		_color_read_Clear
  4168 ;; This function uses a non-reentrant model
  4169 ;;
  4170                           
  4171                           	psect	text23
  4172   001F34                     __ptext23:
  4173                           	callstack 0
  4174   001F34                     _I2C_2_Master_Read:
  4175                           	callstack 25
  4176                           
  4177                           ; BSR set to: 14
  4178                           ;incstack = 0
  4179                           ;I2C_2_Master_Read@ack stored from wreg
  4180   001F34  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  4181   001F36                     
  4182                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4183   001F36  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4184   001F3A                     
  4185                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4186   001F3A  010E               	movlb	14	; () banked
  4187   001F3C  87DA               	bsf	218,3,b	;volatile
  4188                           
  4189                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4190   001F3E  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4191   001F42                     
  4192                           ;i2c.c: 57:   tmp = SSP2BUF;
  4193   001F42  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4194                           
  4195                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4196   001F46  ECD0  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4197   001F4A                     
  4198                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4199   001F4A  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  4200   001F4C  B4D8               	btfsc	status,2,c
  4201   001F4E  EFAB  F00F         	goto	u1301
  4202   001F52  EFAF  F00F         	goto	u1300
  4203   001F56                     u1301:
  4204   001F56  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4205   001F58  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  4206   001F5A  EFB0  F00F         	goto	u1318
  4207   001F5E                     u1300:
  4208   001F5E  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4209   001F60                     u1318:
  4210   001F60  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  4211   001F62  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  4212   001F64  010E               	movlb	14	; () banked
  4213   001F66  51DA               	movf	218,w,b	;volatile
  4214   001F68  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4215   001F6A  0BDF               	andlw	-33
  4216   001F6C  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4217   001F6E  6FDA               	movwf	218,b	;volatile
  4218   001F70                     
  4219                           ; BSR set to: 14
  4220                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4221   001F70  89DA               	bsf	218,4,b	;volatile
  4222   001F72                     
  4223                           ; BSR set to: 14
  4224                           ;i2c.c: 61:   return tmp;
  4225   001F72  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  4226   001F74                     
  4227                           ; BSR set to: 14
  4228   001F74  0012               	return		;funcret
  4229   001F76                     __end_of_I2C_2_Master_Read:
  4230                           	callstack 0
  4231                           
  4232 ;; *************** function _I2C_2_Master_Idle *****************
  4233 ;; Defined at:
  4234 ;;		line 22 in file "i2c.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;		None
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/0
  4245 ;;		On exit  : 0/0
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4252 ;;Total ram usage:        1 bytes
  4253 ;; Hardware stack levels used: 1
  4254 ;; Hardware stack levels required when called: 2
  4255 ;; This function calls:
  4256 ;;		Nothing
  4257 ;; This function is called by:
  4258 ;;		_I2C_2_Master_Start
  4259 ;;		_I2C_2_Master_RepStart
  4260 ;;		_I2C_2_Master_Stop
  4261 ;;		_I2C_2_Master_Write
  4262 ;;		_I2C_2_Master_Read
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text24
  4267   001FA0                     __ptext24:
  4268                           	callstack 0
  4269   001FA0                     _I2C_2_Master_Idle:
  4270                           	callstack 25
  4271   001FA0                     l359:
  4272   001FA0  010E               	movlb	14	; () banked
  4273   001FA2  B5D8               	btfsc	216,2,b	;volatile
  4274   001FA4  EFD6  F00F         	goto	u1281
  4275   001FA8  EFD8  F00F         	goto	u1280
  4276   001FAC                     u1281:
  4277   001FAC  EFD0  F00F         	goto	l359
  4278   001FB0                     u1280:
  4279   001FB0                     
  4280                           ; BSR set to: 14
  4281   001FB0  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4282   001FB4  0E1F               	movlw	31
  4283   001FB6  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4284   001FB8  A4D8               	btfss	status,2,c
  4285   001FBA  EFE1  F00F         	goto	u1291
  4286   001FBE  EFE3  F00F         	goto	u1290
  4287   001FC2                     u1291:
  4288   001FC2  EFD0  F00F         	goto	l359
  4289   001FC6                     u1290:
  4290   001FC6                     
  4291                           ; BSR set to: 14
  4292   001FC6  0012               	return		;funcret
  4293   001FC8                     __end_of_I2C_2_Master_Idle:
  4294                           	callstack 0
  4295                           
  4296 ;; *************** function _I2C_2_Master_Init *****************
  4297 ;; Defined at:
  4298 ;;		line 4 in file "i2c.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;		None
  4301 ;; Auto vars:     Size  Location     Type
  4302 ;;		None
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  1    wreg      void 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2
  4307 ;; Tracked objects:
  4308 ;;		On entry : 0/0
  4309 ;;		On exit  : 0/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4316 ;;Total ram usage:        0 bytes
  4317 ;; Hardware stack levels used: 1
  4318 ;; Hardware stack levels required when called: 2
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_color_click_init
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text25
  4327   001F76                     __ptext25:
  4328                           	callstack 0
  4329   001F76                     _I2C_2_Master_Init:
  4330                           	callstack 27
  4331   001F76                     
  4332                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4333   001F76  010E               	movlb	14	; () banked
  4334   001F78  51D9               	movf	217,w,b	;volatile
  4335   001F7A  0BF0               	andlw	-16
  4336   001F7C  0908               	iorlw	8
  4337   001F7E  6FD9               	movwf	217,b	;volatile
  4338   001F80                     
  4339                           ; BSR set to: 14
  4340                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4341   001F80  8BD9               	bsf	217,5,b	;volatile
  4342                           
  4343                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4344   001F82  0E9F               	movlw	159
  4345   001F84  6FD6               	movwf	214,b	;volatile
  4346   001F86                     
  4347                           ; BSR set to: 14
  4348                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4349   001F86  8A84               	bsf	132,5,c	;volatile
  4350   001F88                     
  4351                           ; BSR set to: 14
  4352                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4353   001F88  8C84               	bsf	132,6,c	;volatile
  4354   001F8A                     
  4355                           ; BSR set to: 14
  4356                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4357   001F8A  9BA7               	bcf	167,5,b	;volatile
  4358   001F8C                     
  4359                           ; BSR set to: 14
  4360                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4361   001F8C  9DA7               	bcf	167,6,b	;volatile
  4362                           
  4363                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4364   001F8E  0E1D               	movlw	29
  4365   001F90  6F1D               	movwf	29,b	;volatile
  4366                           
  4367                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4368   001F92  0E1E               	movlw	30
  4369   001F94  6F1C               	movwf	28,b	;volatile
  4370                           
  4371                           ;i2c.c: 18:   RD5PPS=0x1C;
  4372   001F96  0E1C               	movlw	28
  4373   001F98  6F6F               	movwf	111,b	;volatile
  4374                           
  4375                           ;i2c.c: 19:   RD6PPS=0x1B;
  4376   001F9A  0E1B               	movlw	27
  4377   001F9C  6F70               	movwf	112,b	;volatile
  4378   001F9E                     
  4379                           ; BSR set to: 14
  4380   001F9E  0012               	return		;funcret
  4381   001FA0                     __end_of_I2C_2_Master_Init:
  4382                           	callstack 0
  4383                           
  4384 ;; *************** function _add_seconds_to_list *****************
  4385 ;; Defined at:
  4386 ;;		line 448 in file "dc_motor.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;		None
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;		None
  4391 ;; Return value:  Size  Location     Type
  4392 ;;                  1    wreg      void 
  4393 ;; Registers used:
  4394 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4395 ;; Tracked objects:
  4396 ;;		On entry : 0/0
  4397 ;;		On exit  : 0/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4403 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4404 ;;Total ram usage:        2 bytes
  4405 ;; Hardware stack levels used: 1
  4406 ;; Hardware stack levels required when called: 2
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_main
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text26
  4415   001EA8                     __ptext26:
  4416                           	callstack 0
  4417   001EA8                     _add_seconds_to_list:
  4418                           	callstack 28
  4419   001EA8                     
  4420                           ;dc_motor.c: 450:     if (seconds > 11)
  4421   001EA8  BE5E               	btfsc	(_seconds+1)^0,7,c
  4422   001EAA  EF60  F00F         	goto	u2051
  4423   001EAE  505E               	movf	(_seconds+1)^0,w,c
  4424   001EB0  E109               	bnz	u2050
  4425   001EB2  0E0C               	movlw	12
  4426   001EB4  5C5D               	subwf	_seconds^0,w,c
  4427   001EB6  A0D8               	btfss	status,0,c
  4428   001EB8  EF60  F00F         	goto	u2051
  4429   001EBC  EF62  F00F         	goto	u2050
  4430   001EC0                     u2051:
  4431   001EC0  EF77  F00F         	goto	l311
  4432   001EC4                     u2050:
  4433   001EC4                     
  4434                           ;dc_motor.c: 451:     {;dc_motor.c: 452:         movement_list[index] = seconds - 5;
  4435   001EC4  0EFB               	movlw	251
  4436   001EC6  245D               	addwf	_seconds^0,w,c
  4437   001EC8  6E01               	movwf	??_add_seconds_to_list^0,c
  4438   001ECA  0EFF               	movlw	255
  4439   001ECC  205E               	addwfc	(_seconds+1)^0,w,c
  4440   001ECE  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4441   001ED0  90D8               	bcf	status,0,c
  4442   001ED2  345B               	rlcf	_index^0,w,c
  4443   001ED4  6ED9               	movwf	fsr2l,c
  4444   001ED6  345C               	rlcf	(_index+1)^0,w,c
  4445   001ED8  6EDA               	movwf	fsr2h,c
  4446   001EDA  0E00               	movlw	low _movement_list
  4447   001EDC  26D9               	addwf	fsr2l,f,c
  4448   001EDE  0E02               	movlw	high _movement_list
  4449   001EE0  22DA               	addwfc	fsr2h,f,c
  4450   001EE2  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4451   001EE6  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4452   001EEA                     
  4453                           ;dc_motor.c: 453:         index++;
  4454   001EEA  4A5B               	infsnz	_index^0,f,c
  4455   001EEC  2A5C               	incf	(_index+1)^0,f,c
  4456   001EEE                     l311:
  4457   001EEE  0012               	return		;funcret
  4458   001EF0                     __end_of_add_seconds_to_list:
  4459                           	callstack 0
  4460                           
  4461 ;; *************** function _Timer0_init *****************
  4462 ;; Defined at:
  4463 ;;		line 7 in file "timers.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;		None
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;		None
  4468 ;; Return value:  Size  Location     Type
  4469 ;;                  1    wreg      void 
  4470 ;; Registers used:
  4471 ;;		wreg, status,2
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4481 ;;Total ram usage:        0 bytes
  4482 ;; Hardware stack levels used: 1
  4483 ;; Hardware stack levels required when called: 2
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_main
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text27
  4492   00200E                     __ptext27:
  4493                           	callstack 0
  4494   00200E                     _Timer0_init:
  4495                           	callstack 28
  4496   00200E                     
  4497                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4498   00200E  50D6               	movf	214,w,c	;volatile
  4499   002010  0B1F               	andlw	-225
  4500   002012  0940               	iorlw	64
  4501   002014  6ED6               	movwf	214,c	;volatile
  4502   002016                     
  4503                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4504   002016  88D6               	bsf	214,4,c	;volatile
  4505                           
  4506                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4507   002018  50D6               	movf	214,w,c	;volatile
  4508   00201A  0BF0               	andlw	-16
  4509   00201C  0908               	iorlw	8
  4510   00201E  6ED6               	movwf	214,c	;volatile
  4511                           
  4512                           ;timers.c: 13:     TMR0H=0b11111101;
  4513   002020  0EFD               	movlw	253
  4514   002022  6ED4               	movwf	212,c	;volatile
  4515                           
  4516                           ;timers.c: 14:     TMR0L=0b10010000;
  4517   002024  0E90               	movlw	144
  4518   002026  6ED3               	movwf	211,c	;volatile
  4519   002028                     
  4520                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4521   002028  88D5               	bsf	213,4,c	;volatile
  4522   00202A                     
  4523                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4524   00202A  8ED5               	bsf	213,7,c	;volatile
  4525   00202C  0012               	return		;funcret
  4526   00202E                     __end_of_Timer0_init:
  4527                           	callstack 0
  4528                           
  4529 ;; *************** function _RobotMovement *****************
  4530 ;; Defined at:
  4531 ;;		line 315 in file "dc_motor.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  color           2   29[COMRAM] unsigned int 
  4534 ;;  motorL          2   31[COMRAM] PTR struct DC_motor
  4535 ;;		 -> main@motorL(9), 
  4536 ;;  motorR          2   33[COMRAM] PTR struct DC_motor
  4537 ;;		 -> main@motorR(9), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  i               2   39[COMRAM] int 
  4540 ;;  i               2   37[COMRAM] int 
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4550 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4551 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4553 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;Total ram usage:       12 bytes
  4555 ;; Hardware stack levels used: 1
  4556 ;; Hardware stack levels required when called: 5
  4557 ;; This function calls:
  4558 ;;		_TimedfullSpeedAhead
  4559 ;;		_moveBack
  4560 ;;		_stop
  4561 ;;		_turnLeft
  4562 ;;		_turnLeftLong
  4563 ;;		_turnRight
  4564 ;;		_turnRightLong
  4565 ;; This function is called by:
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text28
  4571   000032                     __ptext28:
  4572                           	callstack 0
  4573   000032                     _RobotMovement:
  4574                           	callstack 25
  4575   000032                     
  4576                           ;dc_motor.c: 315: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 316: {;dc_motor.c: 317:     moveBack(motorL, motorR, 5);
  4577   000032  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4578   000036  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4579   00003A  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4580   00003E  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4581   000042  0E00               	movlw	0
  4582   000044  6E19               	movwf	(moveBack@time+1)^0,c
  4583   000046  0E05               	movlw	5
  4584   000048  6E18               	movwf	moveBack@time^0,c
  4585   00004A  EC4D  F00D         	call	_moveBack	;wreg free
  4586                           
  4587                           ;dc_motor.c: 318:     stop(motorL,motorR);
  4588   00004E  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4589   000052  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4590   000056  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4591   00005A  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4592   00005E  EC2F  F00F         	call	_stop	;wreg free
  4593   000062                     
  4594                           ;dc_motor.c: 321:     if(color == 0){
  4595   000062  501E               	movf	RobotMovement@color^0,w,c
  4596   000064  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4597   000066  A4D8               	btfss	status,2,c
  4598   000068  EF38  F000         	goto	u1881
  4599   00006C  EF3A  F000         	goto	u1880
  4600   000070                     u1881:
  4601   000070  EF53  F000         	goto	l2912
  4602   000074                     u1880:
  4603   000074                     
  4604                           ;dc_motor.c: 322:         turnRight(motorL, motorR);
  4605   000074  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4606   000078  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4607   00007C  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4608   000080  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4609   000084  ECE0  F009         	call	_turnRight	;wreg free
  4610   000088                     
  4611                           ;dc_motor.c: 323:         movement_list[index] = -1;
  4612   000088  90D8               	bcf	status,0,c
  4613   00008A  345B               	rlcf	_index^0,w,c
  4614   00008C  6ED9               	movwf	fsr2l,c
  4615   00008E  345C               	rlcf	(_index+1)^0,w,c
  4616   000090  6EDA               	movwf	fsr2h,c
  4617   000092  0E00               	movlw	low _movement_list
  4618   000094  26D9               	addwf	fsr2l,f,c
  4619   000096  0E02               	movlw	high _movement_list
  4620   000098  22DA               	addwfc	fsr2h,f,c
  4621   00009A  0EFF               	movlw	255
  4622   00009C  6EDE               	movwf	postinc2,c
  4623   00009E  0EFF               	movlw	255
  4624   0000A0  6EDD               	movwf	postdec2,c
  4625   0000A2                     
  4626                           ;dc_motor.c: 324:         index++;
  4627   0000A2  4A5B               	infsnz	_index^0,f,c
  4628   0000A4  2A5C               	incf	(_index+1)^0,f,c
  4629   0000A6                     l2912:
  4630                           
  4631                           ;dc_motor.c: 327:     if(color == 1){
  4632   0000A6  041E               	decf	RobotMovement@color^0,w,c
  4633   0000A8  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4634   0000AA  A4D8               	btfss	status,2,c
  4635   0000AC  EF5A  F000         	goto	u1891
  4636   0000B0  EF5C  F000         	goto	u1890
  4637   0000B4                     u1891:
  4638   0000B4  EF75  F000         	goto	l2920
  4639   0000B8                     u1890:
  4640   0000B8                     
  4641                           ;dc_motor.c: 328:         turnLeft(motorL, motorR);
  4642   0000B8  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4643   0000BC  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4644   0000C0  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4645   0000C4  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4646   0000C8  EC8B  F008         	call	_turnLeft	;wreg free
  4647   0000CC                     
  4648                           ;dc_motor.c: 329:         movement_list[index] = -2;
  4649   0000CC  90D8               	bcf	status,0,c
  4650   0000CE  345B               	rlcf	_index^0,w,c
  4651   0000D0  6ED9               	movwf	fsr2l,c
  4652   0000D2  345C               	rlcf	(_index+1)^0,w,c
  4653   0000D4  6EDA               	movwf	fsr2h,c
  4654   0000D6  0E00               	movlw	low _movement_list
  4655   0000D8  26D9               	addwf	fsr2l,f,c
  4656   0000DA  0E02               	movlw	high _movement_list
  4657   0000DC  22DA               	addwfc	fsr2h,f,c
  4658   0000DE  0EFE               	movlw	254
  4659   0000E0  6EDE               	movwf	postinc2,c
  4660   0000E2  0EFF               	movlw	255
  4661   0000E4  6EDD               	movwf	postdec2,c
  4662   0000E6                     
  4663                           ;dc_motor.c: 330:         index++;
  4664   0000E6  4A5B               	infsnz	_index^0,f,c
  4665   0000E8  2A5C               	incf	(_index+1)^0,f,c
  4666   0000EA                     l2920:
  4667                           
  4668                           ;dc_motor.c: 333:     if(color == 2){
  4669   0000EA  0E02               	movlw	2
  4670   0000EC  181E               	xorwf	RobotMovement@color^0,w,c
  4671   0000EE  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4672   0000F0  A4D8               	btfss	status,2,c
  4673   0000F2  EF7D  F000         	goto	u1901
  4674   0000F6  EF7F  F000         	goto	u1900
  4675   0000FA                     u1901:
  4676   0000FA  EFAC  F000         	goto	l2938
  4677   0000FE                     u1900:
  4678   0000FE                     
  4679                           ;dc_motor.c: 334:         int i;;dc_motor.c: 335:         for (i=0;i<2;i++){
  4680   0000FE  0E00               	movlw	0
  4681   000100  6E27               	movwf	(RobotMovement@i+1)^0,c
  4682   000102  0E00               	movlw	0
  4683   000104  6E26               	movwf	RobotMovement@i^0,c
  4684   000106                     l2928:
  4685                           
  4686                           ;dc_motor.c: 336:             turnRight(motorL, motorR);
  4687   000106  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4688   00010A  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4689   00010E  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4690   000112  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4691   000116  ECE0  F009         	call	_turnRight	;wreg free
  4692   00011A                     
  4693                           ;dc_motor.c: 337:             movement_list[index] = -1;
  4694   00011A  90D8               	bcf	status,0,c
  4695   00011C  345B               	rlcf	_index^0,w,c
  4696   00011E  6ED9               	movwf	fsr2l,c
  4697   000120  345C               	rlcf	(_index+1)^0,w,c
  4698   000122  6EDA               	movwf	fsr2h,c
  4699   000124  0E00               	movlw	low _movement_list
  4700   000126  26D9               	addwf	fsr2l,f,c
  4701   000128  0E02               	movlw	high _movement_list
  4702   00012A  22DA               	addwfc	fsr2h,f,c
  4703   00012C  0EFF               	movlw	255
  4704   00012E  6EDE               	movwf	postinc2,c
  4705   000130  0EFF               	movlw	255
  4706   000132  6EDD               	movwf	postdec2,c
  4707   000134                     
  4708                           ;dc_motor.c: 338:             index++;
  4709   000134  4A5B               	infsnz	_index^0,f,c
  4710   000136  2A5C               	incf	(_index+1)^0,f,c
  4711   000138                     
  4712                           ;dc_motor.c: 339:         }
  4713   000138  4A26               	infsnz	RobotMovement@i^0,f,c
  4714   00013A  2A27               	incf	(RobotMovement@i+1)^0,f,c
  4715   00013C  BE27               	btfsc	(RobotMovement@i+1)^0,7,c
  4716   00013E  EFAA  F000         	goto	u1911
  4717   000142  5027               	movf	(RobotMovement@i+1)^0,w,c
  4718   000144  E109               	bnz	u1910
  4719   000146  0E02               	movlw	2
  4720   000148  5C26               	subwf	RobotMovement@i^0,w,c
  4721   00014A  A0D8               	btfss	status,0,c
  4722   00014C  EFAA  F000         	goto	u1911
  4723   000150  EFAC  F000         	goto	u1910
  4724   000154                     u1911:
  4725   000154  EF83  F000         	goto	l2928
  4726   000158                     u1910:
  4727   000158                     l2938:
  4728                           
  4729                           ;dc_motor.c: 342:     if(color == 3){
  4730   000158  0E03               	movlw	3
  4731   00015A  181E               	xorwf	RobotMovement@color^0,w,c
  4732   00015C  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4733   00015E  A4D8               	btfss	status,2,c
  4734   000160  EFB4  F000         	goto	u1921
  4735   000164  EFB6  F000         	goto	u1920
  4736   000168                     u1921:
  4737   000168  EF70  F001         	goto	l2960
  4738   00016C                     u1920:
  4739   00016C                     
  4740                           ;dc_motor.c: 344:         moveBack(motorL, motorR, 16);
  4741   00016C  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4742   000170  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4743   000174  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4744   000178  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4745   00017C  0E00               	movlw	0
  4746   00017E  6E19               	movwf	(moveBack@time+1)^0,c
  4747   000180  0E10               	movlw	16
  4748   000182  6E18               	movwf	moveBack@time^0,c
  4749   000184  EC4D  F00D         	call	_moveBack	;wreg free
  4750                           
  4751                           ;dc_motor.c: 345:         stop(motorL, motorR);
  4752   000188  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4753   00018C  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4754   000190  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4755   000194  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4756   000198  EC2F  F00F         	call	_stop	;wreg free
  4757                           
  4758                           ;dc_motor.c: 346:         turnRight(motorL, motorR);
  4759   00019C  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4760   0001A0  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4761   0001A4  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4762   0001A8  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4763   0001AC  ECE0  F009         	call	_turnRight	;wreg free
  4764   0001B0                     
  4765                           ;dc_motor.c: 348:         if (movement_list[index-1] > 5)
  4766   0001B0  90D8               	bcf	status,0,c
  4767   0001B2  345B               	rlcf	_index^0,w,c
  4768   0001B4  6ED9               	movwf	fsr2l,c
  4769   0001B6  345C               	rlcf	(_index+1)^0,w,c
  4770   0001B8  6EDA               	movwf	fsr2h,c
  4771   0001BA  0EFE               	movlw	low (_movement_list+65534)
  4772   0001BC  26D9               	addwf	fsr2l,f,c
  4773   0001BE  0E01               	movlw	high (_movement_list+65534)
  4774   0001C0  22DA               	addwfc	fsr2h,f,c
  4775   0001C2  0E01               	movlw	1
  4776   0001C4  BEDB               	btfsc	plusw2,7,c
  4777   0001C6  EFEF  F000         	goto	u1931
  4778   0001CA  0E01               	movlw	1
  4779   0001CC  50DB               	movf	plusw2,w,c
  4780   0001CE  E109               	bnz	u1930
  4781   0001D0  0E06               	movlw	6
  4782   0001D2  5CDE               	subwf	postinc2,w,c
  4783   0001D4  A0D8               	btfss	status,0,c
  4784   0001D6  EFEF  F000         	goto	u1931
  4785   0001DA  EFF1  F000         	goto	u1930
  4786   0001DE                     u1931:
  4787   0001DE  EF0F  F001         	goto	l2948
  4788   0001E2                     u1930:
  4789   0001E2                     
  4790                           ;dc_motor.c: 349:         {;dc_motor.c: 351:             movement_list[index-1] -= 11;
  4791   0001E2  90D8               	bcf	status,0,c
  4792   0001E4  345B               	rlcf	_index^0,w,c
  4793   0001E6  6ED9               	movwf	fsr2l,c
  4794   0001E8  345C               	rlcf	(_index+1)^0,w,c
  4795   0001EA  6EDA               	movwf	fsr2h,c
  4796   0001EC  0EFE               	movlw	low (_movement_list+65534)
  4797   0001EE  26D9               	addwf	fsr2l,f,c
  4798   0001F0  0E01               	movlw	high (_movement_list+65534)
  4799   0001F2  22DA               	addwfc	fsr2h,f,c
  4800   0001F4  0EF5               	movlw	245
  4801   0001F6  26DE               	addwf	postinc2,f,c
  4802   0001F8  0EFF               	movlw	255
  4803   0001FA  22DD               	addwfc	postdec2,f,c
  4804                           
  4805                           ;dc_motor.c: 353:             movement_list[index] = -1;
  4806   0001FC  90D8               	bcf	status,0,c
  4807   0001FE  345B               	rlcf	_index^0,w,c
  4808   000200  6ED9               	movwf	fsr2l,c
  4809   000202  345C               	rlcf	(_index+1)^0,w,c
  4810   000204  6EDA               	movwf	fsr2h,c
  4811   000206  0E00               	movlw	low _movement_list
  4812   000208  26D9               	addwf	fsr2l,f,c
  4813   00020A  0E02               	movlw	high _movement_list
  4814   00020C  22DA               	addwfc	fsr2h,f,c
  4815   00020E  0EFF               	movlw	255
  4816   000210  6EDE               	movwf	postinc2,c
  4817   000212  0EFF               	movlw	255
  4818   000214  6EDD               	movwf	postdec2,c
  4819   000216                     
  4820                           ;dc_motor.c: 354:             index += 1;
  4821   000216  4A5B               	infsnz	_index^0,f,c
  4822   000218  2A5C               	incf	(_index+1)^0,f,c
  4823                           
  4824                           ;dc_motor.c: 355:         }else{
  4825   00021A  EF70  F001         	goto	l2960
  4826   00021E                     l2948:
  4827                           
  4828                           ;dc_motor.c: 357:             if (movement_list[index-1] == -1)
  4829   00021E  90D8               	bcf	status,0,c
  4830   000220  345B               	rlcf	_index^0,w,c
  4831   000222  6ED9               	movwf	fsr2l,c
  4832   000224  345C               	rlcf	(_index+1)^0,w,c
  4833   000226  6EDA               	movwf	fsr2h,c
  4834   000228  0EFE               	movlw	low (_movement_list+65534)
  4835   00022A  26D9               	addwf	fsr2l,f,c
  4836   00022C  0E01               	movlw	high (_movement_list+65534)
  4837   00022E  22DA               	addwfc	fsr2h,f,c
  4838   000230  28DE               	incf	postinc2,w,c
  4839   000232  E106               	bnz	u1941
  4840   000234  28DE               	incf	postinc2,w,c
  4841   000236  A4D8               	btfss	status,2,c
  4842   000238  EF20  F001         	goto	u1941
  4843   00023C  EF22  F001         	goto	u1940
  4844   000240                     u1941:
  4845   000240  EF31  F001         	goto	l2952
  4846   000244                     u1940:
  4847   000244                     
  4848                           ;dc_motor.c: 358:             {;dc_motor.c: 360:                 movement_list[index-1] 
      +                          = -2;
  4849   000244  90D8               	bcf	status,0,c
  4850   000246  345B               	rlcf	_index^0,w,c
  4851   000248  6ED9               	movwf	fsr2l,c
  4852   00024A  345C               	rlcf	(_index+1)^0,w,c
  4853   00024C  6EDA               	movwf	fsr2h,c
  4854   00024E  0EFE               	movlw	low (_movement_list+65534)
  4855   000250  26D9               	addwf	fsr2l,f,c
  4856   000252  0E01               	movlw	high (_movement_list+65534)
  4857   000254  22DA               	addwfc	fsr2h,f,c
  4858   000256  0EFE               	movlw	254
  4859   000258  6EDE               	movwf	postinc2,c
  4860   00025A  0EFF               	movlw	255
  4861   00025C  6EDD               	movwf	postdec2,c
  4862                           
  4863                           ;dc_motor.c: 361:             }
  4864   00025E  EF52  F001         	goto	l290
  4865   000262                     l2952:
  4866   000262  90D8               	bcf	status,0,c
  4867   000264  345B               	rlcf	_index^0,w,c
  4868   000266  6ED9               	movwf	fsr2l,c
  4869   000268  345C               	rlcf	(_index+1)^0,w,c
  4870   00026A  6EDA               	movwf	fsr2h,c
  4871   00026C  0EFE               	movlw	low (_movement_list+65534)
  4872   00026E  26D9               	addwf	fsr2l,f,c
  4873   000270  0E01               	movlw	high (_movement_list+65534)
  4874   000272  22DA               	addwfc	fsr2h,f,c
  4875   000274  0EFE               	movlw	254
  4876   000276  18DE               	xorwf	postinc2,w,c
  4877   000278  E106               	bnz	u1951
  4878   00027A  28DE               	incf	postinc2,w,c
  4879   00027C  A4D8               	btfss	status,2,c
  4880   00027E  EF43  F001         	goto	u1951
  4881   000282  EF45  F001         	goto	u1950
  4882   000286                     u1951:
  4883   000286  EF52  F001         	goto	l290
  4884   00028A                     u1950:
  4885   00028A                     
  4886                           ;dc_motor.c: 364:             {;dc_motor.c: 366:                 movement_list[index-1] 
      +                          = -1;
  4887   00028A  90D8               	bcf	status,0,c
  4888   00028C  345B               	rlcf	_index^0,w,c
  4889   00028E  6ED9               	movwf	fsr2l,c
  4890   000290  345C               	rlcf	(_index+1)^0,w,c
  4891   000292  6EDA               	movwf	fsr2h,c
  4892   000294  0EFE               	movlw	low (_movement_list+65534)
  4893   000296  26D9               	addwf	fsr2l,f,c
  4894   000298  0E01               	movlw	high (_movement_list+65534)
  4895   00029A  22DA               	addwfc	fsr2h,f,c
  4896   00029C  0EFF               	movlw	255
  4897   00029E  6EDE               	movwf	postinc2,c
  4898   0002A0  0EFF               	movlw	255
  4899   0002A2  6EDD               	movwf	postdec2,c
  4900   0002A4                     l290:
  4901                           
  4902                           ;dc_motor.c: 369:             movement_list[index] = 16;
  4903   0002A4  90D8               	bcf	status,0,c
  4904   0002A6  345B               	rlcf	_index^0,w,c
  4905   0002A8  6ED9               	movwf	fsr2l,c
  4906   0002AA  345C               	rlcf	(_index+1)^0,w,c
  4907   0002AC  6EDA               	movwf	fsr2h,c
  4908   0002AE  0E00               	movlw	low _movement_list
  4909   0002B0  26D9               	addwf	fsr2l,f,c
  4910   0002B2  0E02               	movlw	high _movement_list
  4911   0002B4  22DA               	addwfc	fsr2h,f,c
  4912   0002B6  0E10               	movlw	16
  4913   0002B8  6EDE               	movwf	postinc2,c
  4914   0002BA  0E00               	movlw	0
  4915   0002BC  6EDD               	movwf	postdec2,c
  4916   0002BE                     
  4917                           ;dc_motor.c: 370:             index += 1;
  4918   0002BE  4A5B               	infsnz	_index^0,f,c
  4919   0002C0  2A5C               	incf	(_index+1)^0,f,c
  4920   0002C2                     
  4921                           ;dc_motor.c: 372:             movement_list[index] = -2;
  4922   0002C2  90D8               	bcf	status,0,c
  4923   0002C4  345B               	rlcf	_index^0,w,c
  4924   0002C6  6ED9               	movwf	fsr2l,c
  4925   0002C8  345C               	rlcf	(_index+1)^0,w,c
  4926   0002CA  6EDA               	movwf	fsr2h,c
  4927   0002CC  0E00               	movlw	low _movement_list
  4928   0002CE  26D9               	addwf	fsr2l,f,c
  4929   0002D0  0E02               	movlw	high _movement_list
  4930   0002D2  22DA               	addwfc	fsr2h,f,c
  4931   0002D4  0EFE               	movlw	254
  4932   0002D6  6EDE               	movwf	postinc2,c
  4933   0002D8  0EFF               	movlw	255
  4934   0002DA  6EDD               	movwf	postdec2,c
  4935                           
  4936                           ;dc_motor.c: 373:             index += 1;
  4937   0002DC  4A5B               	infsnz	_index^0,f,c
  4938   0002DE  2A5C               	incf	(_index+1)^0,f,c
  4939   0002E0                     l2960:
  4940                           
  4941                           ;dc_motor.c: 378:     if(color == 4){
  4942   0002E0  0E04               	movlw	4
  4943   0002E2  181E               	xorwf	RobotMovement@color^0,w,c
  4944   0002E4  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4945   0002E6  A4D8               	btfss	status,2,c
  4946   0002E8  EF78  F001         	goto	u1961
  4947   0002EC  EF7A  F001         	goto	u1960
  4948   0002F0                     u1961:
  4949   0002F0  EF34  F002         	goto	l2982
  4950   0002F4                     u1960:
  4951   0002F4                     
  4952                           ;dc_motor.c: 380:         moveBack(motorL, motorR, 16);
  4953   0002F4  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4954   0002F8  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4955   0002FC  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4956   000300  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4957   000304  0E00               	movlw	0
  4958   000306  6E19               	movwf	(moveBack@time+1)^0,c
  4959   000308  0E10               	movlw	16
  4960   00030A  6E18               	movwf	moveBack@time^0,c
  4961   00030C  EC4D  F00D         	call	_moveBack	;wreg free
  4962                           
  4963                           ;dc_motor.c: 381:         stop(motorL, motorR);
  4964   000310  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4965   000314  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4966   000318  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4967   00031C  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4968   000320  EC2F  F00F         	call	_stop	;wreg free
  4969                           
  4970                           ;dc_motor.c: 382:         turnLeft(motorL, motorR);
  4971   000324  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4972   000328  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4973   00032C  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4974   000330  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4975   000334  EC8B  F008         	call	_turnLeft	;wreg free
  4976   000338                     
  4977                           ;dc_motor.c: 384:         if (movement_list[index-1] > 5)
  4978   000338  90D8               	bcf	status,0,c
  4979   00033A  345B               	rlcf	_index^0,w,c
  4980   00033C  6ED9               	movwf	fsr2l,c
  4981   00033E  345C               	rlcf	(_index+1)^0,w,c
  4982   000340  6EDA               	movwf	fsr2h,c
  4983   000342  0EFE               	movlw	low (_movement_list+65534)
  4984   000344  26D9               	addwf	fsr2l,f,c
  4985   000346  0E01               	movlw	high (_movement_list+65534)
  4986   000348  22DA               	addwfc	fsr2h,f,c
  4987   00034A  0E01               	movlw	1
  4988   00034C  BEDB               	btfsc	plusw2,7,c
  4989   00034E  EFB3  F001         	goto	u1971
  4990   000352  0E01               	movlw	1
  4991   000354  50DB               	movf	plusw2,w,c
  4992   000356  E109               	bnz	u1970
  4993   000358  0E06               	movlw	6
  4994   00035A  5CDE               	subwf	postinc2,w,c
  4995   00035C  A0D8               	btfss	status,0,c
  4996   00035E  EFB3  F001         	goto	u1971
  4997   000362  EFB5  F001         	goto	u1970
  4998   000366                     u1971:
  4999   000366  EFD3  F001         	goto	l2970
  5000   00036A                     u1970:
  5001   00036A                     
  5002                           ;dc_motor.c: 385:         {;dc_motor.c: 387:             movement_list[index-1] -= 11;
  5003   00036A  90D8               	bcf	status,0,c
  5004   00036C  345B               	rlcf	_index^0,w,c
  5005   00036E  6ED9               	movwf	fsr2l,c
  5006   000370  345C               	rlcf	(_index+1)^0,w,c
  5007   000372  6EDA               	movwf	fsr2h,c
  5008   000374  0EFE               	movlw	low (_movement_list+65534)
  5009   000376  26D9               	addwf	fsr2l,f,c
  5010   000378  0E01               	movlw	high (_movement_list+65534)
  5011   00037A  22DA               	addwfc	fsr2h,f,c
  5012   00037C  0EF5               	movlw	245
  5013   00037E  26DE               	addwf	postinc2,f,c
  5014   000380  0EFF               	movlw	255
  5015   000382  22DD               	addwfc	postdec2,f,c
  5016                           
  5017                           ;dc_motor.c: 389:             movement_list[index] = -2;
  5018   000384  90D8               	bcf	status,0,c
  5019   000386  345B               	rlcf	_index^0,w,c
  5020   000388  6ED9               	movwf	fsr2l,c
  5021   00038A  345C               	rlcf	(_index+1)^0,w,c
  5022   00038C  6EDA               	movwf	fsr2h,c
  5023   00038E  0E00               	movlw	low _movement_list
  5024   000390  26D9               	addwf	fsr2l,f,c
  5025   000392  0E02               	movlw	high _movement_list
  5026   000394  22DA               	addwfc	fsr2h,f,c
  5027   000396  0EFE               	movlw	254
  5028   000398  6EDE               	movwf	postinc2,c
  5029   00039A  0EFF               	movlw	255
  5030   00039C  6EDD               	movwf	postdec2,c
  5031   00039E                     
  5032                           ;dc_motor.c: 390:             index += 1;
  5033   00039E  4A5B               	infsnz	_index^0,f,c
  5034   0003A0  2A5C               	incf	(_index+1)^0,f,c
  5035                           
  5036                           ;dc_motor.c: 391:         }else{
  5037   0003A2  EF34  F002         	goto	l2982
  5038   0003A6                     l2970:
  5039                           
  5040                           ;dc_motor.c: 393:             if (movement_list[index-1] == -1)
  5041   0003A6  90D8               	bcf	status,0,c
  5042   0003A8  345B               	rlcf	_index^0,w,c
  5043   0003AA  6ED9               	movwf	fsr2l,c
  5044   0003AC  345C               	rlcf	(_index+1)^0,w,c
  5045   0003AE  6EDA               	movwf	fsr2h,c
  5046   0003B0  0EFE               	movlw	low (_movement_list+65534)
  5047   0003B2  26D9               	addwf	fsr2l,f,c
  5048   0003B4  0E01               	movlw	high (_movement_list+65534)
  5049   0003B6  22DA               	addwfc	fsr2h,f,c
  5050   0003B8  28DE               	incf	postinc2,w,c
  5051   0003BA  E106               	bnz	u1981
  5052   0003BC  28DE               	incf	postinc2,w,c
  5053   0003BE  A4D8               	btfss	status,2,c
  5054   0003C0  EFE4  F001         	goto	u1981
  5055   0003C4  EFE6  F001         	goto	u1980
  5056   0003C8                     u1981:
  5057   0003C8  EFF5  F001         	goto	l2974
  5058   0003CC                     u1980:
  5059   0003CC                     
  5060                           ;dc_motor.c: 394:             {;dc_motor.c: 396:                 movement_list[index-1] 
      +                          = -2;
  5061   0003CC  90D8               	bcf	status,0,c
  5062   0003CE  345B               	rlcf	_index^0,w,c
  5063   0003D0  6ED9               	movwf	fsr2l,c
  5064   0003D2  345C               	rlcf	(_index+1)^0,w,c
  5065   0003D4  6EDA               	movwf	fsr2h,c
  5066   0003D6  0EFE               	movlw	low (_movement_list+65534)
  5067   0003D8  26D9               	addwf	fsr2l,f,c
  5068   0003DA  0E01               	movlw	high (_movement_list+65534)
  5069   0003DC  22DA               	addwfc	fsr2h,f,c
  5070   0003DE  0EFE               	movlw	254
  5071   0003E0  6EDE               	movwf	postinc2,c
  5072   0003E2  0EFF               	movlw	255
  5073   0003E4  6EDD               	movwf	postdec2,c
  5074                           
  5075                           ;dc_motor.c: 397:             }
  5076   0003E6  EF16  F002         	goto	l296
  5077   0003EA                     l2974:
  5078   0003EA  90D8               	bcf	status,0,c
  5079   0003EC  345B               	rlcf	_index^0,w,c
  5080   0003EE  6ED9               	movwf	fsr2l,c
  5081   0003F0  345C               	rlcf	(_index+1)^0,w,c
  5082   0003F2  6EDA               	movwf	fsr2h,c
  5083   0003F4  0EFE               	movlw	low (_movement_list+65534)
  5084   0003F6  26D9               	addwf	fsr2l,f,c
  5085   0003F8  0E01               	movlw	high (_movement_list+65534)
  5086   0003FA  22DA               	addwfc	fsr2h,f,c
  5087   0003FC  0EFE               	movlw	254
  5088   0003FE  18DE               	xorwf	postinc2,w,c
  5089   000400  E106               	bnz	u1991
  5090   000402  28DE               	incf	postinc2,w,c
  5091   000404  A4D8               	btfss	status,2,c
  5092   000406  EF07  F002         	goto	u1991
  5093   00040A  EF09  F002         	goto	u1990
  5094   00040E                     u1991:
  5095   00040E  EF16  F002         	goto	l296
  5096   000412                     u1990:
  5097   000412                     
  5098                           ;dc_motor.c: 400:             {;dc_motor.c: 402:                 movement_list[index-1] 
      +                          = -1;
  5099   000412  90D8               	bcf	status,0,c
  5100   000414  345B               	rlcf	_index^0,w,c
  5101   000416  6ED9               	movwf	fsr2l,c
  5102   000418  345C               	rlcf	(_index+1)^0,w,c
  5103   00041A  6EDA               	movwf	fsr2h,c
  5104   00041C  0EFE               	movlw	low (_movement_list+65534)
  5105   00041E  26D9               	addwf	fsr2l,f,c
  5106   000420  0E01               	movlw	high (_movement_list+65534)
  5107   000422  22DA               	addwfc	fsr2h,f,c
  5108   000424  0EFF               	movlw	255
  5109   000426  6EDE               	movwf	postinc2,c
  5110   000428  0EFF               	movlw	255
  5111   00042A  6EDD               	movwf	postdec2,c
  5112   00042C                     l296:
  5113                           
  5114                           ;dc_motor.c: 405:         movement_list[index] = 16;
  5115   00042C  90D8               	bcf	status,0,c
  5116   00042E  345B               	rlcf	_index^0,w,c
  5117   000430  6ED9               	movwf	fsr2l,c
  5118   000432  345C               	rlcf	(_index+1)^0,w,c
  5119   000434  6EDA               	movwf	fsr2h,c
  5120   000436  0E00               	movlw	low _movement_list
  5121   000438  26D9               	addwf	fsr2l,f,c
  5122   00043A  0E02               	movlw	high _movement_list
  5123   00043C  22DA               	addwfc	fsr2h,f,c
  5124   00043E  0E10               	movlw	16
  5125   000440  6EDE               	movwf	postinc2,c
  5126   000442  0E00               	movlw	0
  5127   000444  6EDD               	movwf	postdec2,c
  5128   000446                     
  5129                           ;dc_motor.c: 406:         index += 1;
  5130   000446  4A5B               	infsnz	_index^0,f,c
  5131   000448  2A5C               	incf	(_index+1)^0,f,c
  5132   00044A                     
  5133                           ;dc_motor.c: 408:         movement_list[index] = -1;
  5134   00044A  90D8               	bcf	status,0,c
  5135   00044C  345B               	rlcf	_index^0,w,c
  5136   00044E  6ED9               	movwf	fsr2l,c
  5137   000450  345C               	rlcf	(_index+1)^0,w,c
  5138   000452  6EDA               	movwf	fsr2h,c
  5139   000454  0E00               	movlw	low _movement_list
  5140   000456  26D9               	addwf	fsr2l,f,c
  5141   000458  0E02               	movlw	high _movement_list
  5142   00045A  22DA               	addwfc	fsr2h,f,c
  5143   00045C  0EFF               	movlw	255
  5144   00045E  6EDE               	movwf	postinc2,c
  5145   000460  0EFF               	movlw	255
  5146   000462  6EDD               	movwf	postdec2,c
  5147                           
  5148                           ;dc_motor.c: 409:         index += 1;
  5149   000464  4A5B               	infsnz	_index^0,f,c
  5150   000466  2A5C               	incf	(_index+1)^0,f,c
  5151   000468                     l2982:
  5152                           
  5153                           ;dc_motor.c: 413:     if(color == 5){
  5154   000468  0E05               	movlw	5
  5155   00046A  181E               	xorwf	RobotMovement@color^0,w,c
  5156   00046C  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5157   00046E  A4D8               	btfss	status,2,c
  5158   000470  EF3C  F002         	goto	u2001
  5159   000474  EF3E  F002         	goto	u2000
  5160   000478                     u2001:
  5161   000478  EF57  F002         	goto	l2990
  5162   00047C                     u2000:
  5163   00047C                     
  5164                           ;dc_motor.c: 414:         turnRightLong(motorL, motorR);
  5165   00047C  C020  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  5166   000480  C021  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5167   000484  C022  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  5168   000488  C023  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5169   00048C  EC38  F009         	call	_turnRightLong	;wreg free
  5170   000490                     
  5171                           ;dc_motor.c: 415:         movement_list[index] = -3;
  5172   000490  90D8               	bcf	status,0,c
  5173   000492  345B               	rlcf	_index^0,w,c
  5174   000494  6ED9               	movwf	fsr2l,c
  5175   000496  345C               	rlcf	(_index+1)^0,w,c
  5176   000498  6EDA               	movwf	fsr2h,c
  5177   00049A  0E00               	movlw	low _movement_list
  5178   00049C  26D9               	addwf	fsr2l,f,c
  5179   00049E  0E02               	movlw	high _movement_list
  5180   0004A0  22DA               	addwfc	fsr2h,f,c
  5181   0004A2  0EFD               	movlw	253
  5182   0004A4  6EDE               	movwf	postinc2,c
  5183   0004A6  0EFF               	movlw	255
  5184   0004A8  6EDD               	movwf	postdec2,c
  5185   0004AA                     
  5186                           ;dc_motor.c: 416:         index += 1;
  5187   0004AA  4A5B               	infsnz	_index^0,f,c
  5188   0004AC  2A5C               	incf	(_index+1)^0,f,c
  5189   0004AE                     l2990:
  5190                           
  5191                           ;dc_motor.c: 419:     if(color == 6){
  5192   0004AE  0E06               	movlw	6
  5193   0004B0  181E               	xorwf	RobotMovement@color^0,w,c
  5194   0004B2  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5195   0004B4  A4D8               	btfss	status,2,c
  5196   0004B6  EF5F  F002         	goto	u2011
  5197   0004BA  EF61  F002         	goto	u2010
  5198   0004BE                     u2011:
  5199   0004BE  EF7A  F002         	goto	l2998
  5200   0004C2                     u2010:
  5201   0004C2                     
  5202                           ;dc_motor.c: 420:         turnLeftLong(motorL, motorR);
  5203   0004C2  C020  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  5204   0004C6  C021  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5205   0004CA  C022  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  5206   0004CE  C023  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5207   0004D2  ECDE  F007         	call	_turnLeftLong	;wreg free
  5208   0004D6                     
  5209                           ;dc_motor.c: 421:         movement_list[index] = -4;
  5210   0004D6  90D8               	bcf	status,0,c
  5211   0004D8  345B               	rlcf	_index^0,w,c
  5212   0004DA  6ED9               	movwf	fsr2l,c
  5213   0004DC  345C               	rlcf	(_index+1)^0,w,c
  5214   0004DE  6EDA               	movwf	fsr2h,c
  5215   0004E0  0E00               	movlw	low _movement_list
  5216   0004E2  26D9               	addwf	fsr2l,f,c
  5217   0004E4  0E02               	movlw	high _movement_list
  5218   0004E6  22DA               	addwfc	fsr2h,f,c
  5219   0004E8  0EFC               	movlw	252
  5220   0004EA  6EDE               	movwf	postinc2,c
  5221   0004EC  0EFF               	movlw	255
  5222   0004EE  6EDD               	movwf	postdec2,c
  5223   0004F0                     
  5224                           ;dc_motor.c: 422:         index += 1;
  5225   0004F0  4A5B               	infsnz	_index^0,f,c
  5226   0004F2  2A5C               	incf	(_index+1)^0,f,c
  5227   0004F4                     l2998:
  5228                           
  5229                           ;dc_motor.c: 425:     if(color == 7){
  5230   0004F4  0E07               	movlw	7
  5231   0004F6  181E               	xorwf	RobotMovement@color^0,w,c
  5232   0004F8  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5233   0004FA  A4D8               	btfss	status,2,c
  5234   0004FC  EF82  F002         	goto	u2021
  5235   000500  EF84  F002         	goto	u2020
  5236   000504                     u2021:
  5237   000504  EFA6  F002         	goto	l3014
  5238   000508                     u2020:
  5239   000508                     
  5240                           ;dc_motor.c: 426:         int i;;dc_motor.c: 427:         for (i=0;i<2;i++)
  5241   000508  0E00               	movlw	0
  5242   00050A  6E29               	movwf	(RobotMovement@i_1271+1)^0,c
  5243   00050C  0E00               	movlw	0
  5244   00050E  6E28               	movwf	RobotMovement@i_1271^0,c
  5245   000510                     l3006:
  5246                           
  5247                           ;dc_motor.c: 428:         {;dc_motor.c: 429:             turnRight(motorL, motorR);
  5248   000510  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  5249   000514  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5250   000518  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  5251   00051C  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5252   000520  ECE0  F009         	call	_turnRight	;wreg free
  5253   000524                     
  5254                           ;dc_motor.c: 430:         }
  5255   000524  4A28               	infsnz	RobotMovement@i_1271^0,f,c
  5256   000526  2A29               	incf	(RobotMovement@i_1271+1)^0,f,c
  5257   000528  BE29               	btfsc	(RobotMovement@i_1271+1)^0,7,c
  5258   00052A  EFA0  F002         	goto	u2031
  5259   00052E  5029               	movf	(RobotMovement@i_1271+1)^0,w,c
  5260   000530  E109               	bnz	u2030
  5261   000532  0E02               	movlw	2
  5262   000534  5C28               	subwf	RobotMovement@i_1271^0,w,c
  5263   000536  A0D8               	btfss	status,0,c
  5264   000538  EFA0  F002         	goto	u2031
  5265   00053C  EFA2  F002         	goto	u2030
  5266   000540                     u2031:
  5267   000540  EF88  F002         	goto	l3006
  5268   000544                     u2030:
  5269   000544                     
  5270                           ;dc_motor.c: 432:         state = 1;
  5271   000544  0E00               	movlw	0
  5272   000546  6E5A               	movwf	(_state+1)^0,c
  5273   000548  0E01               	movlw	1
  5274   00054A  6E59               	movwf	_state^0,c
  5275   00054C                     l3014:
  5276                           
  5277                           ;dc_motor.c: 435:     if (color > 7)
  5278   00054C  501F               	movf	(RobotMovement@color+1)^0,w,c
  5279   00054E  E109               	bnz	u2040
  5280   000550  0E08               	movlw	8
  5281   000552  5C1E               	subwf	RobotMovement@color^0,w,c
  5282   000554  A0D8               	btfss	status,0,c
  5283   000556  EFAF  F002         	goto	u2041
  5284   00055A  EFB1  F002         	goto	u2040
  5285   00055E                     u2041:
  5286   00055E  EFBF  F002         	goto	l304
  5287   000562                     u2040:
  5288   000562                     
  5289                           ;dc_motor.c: 436:     {;dc_motor.c: 437:         TimedfullSpeedAhead(motorL, motorR, 5);
  5290   000562  C020  F014         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5291   000566  C021  F015         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5292   00056A  C022  F016         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5293   00056E  C023  F017         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5294   000572  0E00               	movlw	0
  5295   000574  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5296   000576  0E05               	movlw	5
  5297   000578  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  5298   00057A  EC87  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5299   00057E                     l304:
  5300   00057E  0012               	return		;funcret
  5301   000580                     __end_of_RobotMovement:
  5302                           	callstack 0
  5303                           
  5304 ;; *************** function _turnRightLong *****************
  5305 ;; Defined at:
  5306 ;;		line 239 in file "dc_motor.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5309 ;;		 -> main@motorL(9), 
  5310 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5311 ;;		 -> main@motorR(9), 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  i               2   27[COMRAM] int 
  5314 ;;  k               2   25[COMRAM] int 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5325 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5326 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5327 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5328 ;;Total ram usage:       10 bytes
  5329 ;; Hardware stack levels used: 1
  5330 ;; Hardware stack levels required when called: 4
  5331 ;; This function calls:
  5332 ;;		_setMotorPWM
  5333 ;; This function is called by:
  5334 ;;		_RobotMovement
  5335 ;;		_return_back
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text29
  5340   001270                     __ptext29:
  5341                           	callstack 0
  5342   001270                     _turnRightLong:
  5343                           	callstack 25
  5344   001270                     
  5345                           ;dc_motor.c: 239: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 240: {;dc_motor.c: 242:     int k;;dc_motor.c: 243:     for (k=0;k<3;k++)
  5346   001270  0E00               	movlw	0
  5347   001272  6E1B               	movwf	(turnRightLong@k+1)^0,c
  5348   001274  0E00               	movlw	0
  5349   001276  6E1A               	movwf	turnRightLong@k^0,c
  5350   001278                     l2628:
  5351                           
  5352                           ;dc_motor.c: 244:     {;dc_motor.c: 245:         int i;;dc_motor.c: 246:         for(i=2
      +                          3;i<38;i+=5){
  5353   001278  0E00               	movlw	0
  5354   00127A  6E1D               	movwf	(turnRightLong@i+1)^0,c
  5355   00127C  0E17               	movlw	23
  5356   00127E  6E1C               	movwf	turnRightLong@i^0,c
  5357   001280                     l2634:
  5358                           
  5359                           ;dc_motor.c: 247:         (*mL).direction=0;
  5360   001280  EE20 F001          	lfsr	2,1
  5361   001284  5014               	movf	turnRightLong@mL^0,w,c
  5362   001286  26D9               	addwf	fsr2l,f,c
  5363   001288  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5364   00128A  22DA               	addwfc	fsr2h,f,c
  5365   00128C  0E00               	movlw	0
  5366   00128E  6EDF               	movwf	indf2,c
  5367                           
  5368                           ;dc_motor.c: 248:         (*mR).direction=1;
  5369   001290  EE20 F001          	lfsr	2,1
  5370   001294  5016               	movf	turnRightLong@mR^0,w,c
  5371   001296  26D9               	addwf	fsr2l,f,c
  5372   001298  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5373   00129A  22DA               	addwfc	fsr2h,f,c
  5374   00129C  0E01               	movlw	1
  5375   00129E  6EDF               	movwf	indf2,c
  5376   0012A0                     
  5377                           ;dc_motor.c: 249:         (*mL).power=i;
  5378   0012A0  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5379   0012A4  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5380   0012A8  C01C  FFDF         	movff	turnRightLong@i,indf2
  5381   0012AC                     
  5382                           ;dc_motor.c: 250:         (*mR).power=i;
  5383   0012AC  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5384   0012B0  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5385   0012B4  C01C  FFDF         	movff	turnRightLong@i,indf2
  5386   0012B8                     
  5387                           ;dc_motor.c: 251:         setMotorPWM(mL);
  5388   0012B8  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5389   0012BC  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5390   0012C0  EC28  F007         	call	_setMotorPWM	;wreg free
  5391   0012C4                     
  5392                           ;dc_motor.c: 252:         setMotorPWM(mR);
  5393   0012C4  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5394   0012C8  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5395   0012CC  EC28  F007         	call	_setMotorPWM	;wreg free
  5396   0012D0                     
  5397                           ;dc_motor.c: 253:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5398   0012D0  0E09               	movlw	9
  5399   0012D2  6E19               	movwf	(??_turnRightLong+1)^0,c
  5400   0012D4  0EB0               	movlw	176
  5401   0012D6  6E18               	movwf	??_turnRightLong^0,c
  5402   0012D8  0E58               	movlw	88
  5403   0012DA                     u2707:
  5404   0012DA  2EE8               	decfsz	wreg,f,c
  5405   0012DC  D7FE               	bra	u2707
  5406   0012DE  2E18               	decfsz	??_turnRightLong^0,f,c
  5407   0012E0  D7FC               	bra	u2707
  5408   0012E2  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5409   0012E4  D7FA               	bra	u2707
  5410   0012E6  D000               	nop2	
  5411   0012E8                     
  5412                           ;dc_motor.c: 254:         }
  5413   0012E8  0E05               	movlw	5
  5414   0012EA  261C               	addwf	turnRightLong@i^0,f,c
  5415   0012EC  0E00               	movlw	0
  5416   0012EE  221D               	addwfc	(turnRightLong@i+1)^0,f,c
  5417   0012F0  BE1D               	btfsc	(turnRightLong@i+1)^0,7,c
  5418   0012F2  EF84  F009         	goto	u1521
  5419   0012F6  501D               	movf	(turnRightLong@i+1)^0,w,c
  5420   0012F8  E109               	bnz	u1520
  5421   0012FA  0E26               	movlw	38
  5422   0012FC  5C1C               	subwf	turnRightLong@i^0,w,c
  5423   0012FE  A0D8               	btfss	status,0,c
  5424   001300  EF84  F009         	goto	u1521
  5425   001304  EF86  F009         	goto	u1520
  5426   001308                     u1521:
  5427   001308  EF40  F009         	goto	l2634
  5428   00130C                     u1520:
  5429   00130C                     
  5430                           ;dc_motor.c: 255:         for(i=28;i>13;i-=5){
  5431   00130C  0E00               	movlw	0
  5432   00130E  6E1D               	movwf	(turnRightLong@i+1)^0,c
  5433   001310  0E1C               	movlw	28
  5434   001312  6E1C               	movwf	turnRightLong@i^0,c
  5435   001314                     l2656:
  5436                           
  5437                           ;dc_motor.c: 256:         (*mL).direction=0;
  5438   001314  EE20 F001          	lfsr	2,1
  5439   001318  5014               	movf	turnRightLong@mL^0,w,c
  5440   00131A  26D9               	addwf	fsr2l,f,c
  5441   00131C  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5442   00131E  22DA               	addwfc	fsr2h,f,c
  5443   001320  0E00               	movlw	0
  5444   001322  6EDF               	movwf	indf2,c
  5445                           
  5446                           ;dc_motor.c: 257:         (*mR).direction=1;
  5447   001324  EE20 F001          	lfsr	2,1
  5448   001328  5016               	movf	turnRightLong@mR^0,w,c
  5449   00132A  26D9               	addwf	fsr2l,f,c
  5450   00132C  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5451   00132E  22DA               	addwfc	fsr2h,f,c
  5452   001330  0E01               	movlw	1
  5453   001332  6EDF               	movwf	indf2,c
  5454   001334                     
  5455                           ;dc_motor.c: 258:         (*mL).power=i;
  5456   001334  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5457   001338  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5458   00133C  C01C  FFDF         	movff	turnRightLong@i,indf2
  5459   001340                     
  5460                           ;dc_motor.c: 259:         (*mR).power=i;
  5461   001340  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5462   001344  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5463   001348  C01C  FFDF         	movff	turnRightLong@i,indf2
  5464   00134C                     
  5465                           ;dc_motor.c: 260:         setMotorPWM(mL);
  5466   00134C  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5467   001350  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5468   001354  EC28  F007         	call	_setMotorPWM	;wreg free
  5469   001358                     
  5470                           ;dc_motor.c: 261:         setMotorPWM(mR);
  5471   001358  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5472   00135C  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5473   001360  EC28  F007         	call	_setMotorPWM	;wreg free
  5474   001364                     
  5475                           ;dc_motor.c: 262:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5476   001364  0E09               	movlw	9
  5477   001366  6E19               	movwf	(??_turnRightLong+1)^0,c
  5478   001368  0E86               	movlw	134
  5479   00136A  6E18               	movwf	??_turnRightLong^0,c
  5480   00136C  0ECA               	movlw	202
  5481   00136E                     u2717:
  5482   00136E  2EE8               	decfsz	wreg,f,c
  5483   001370  D7FE               	bra	u2717
  5484   001372  2E18               	decfsz	??_turnRightLong^0,f,c
  5485   001374  D7FC               	bra	u2717
  5486   001376  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5487   001378  D7FA               	bra	u2717
  5488   00137A                     
  5489                           ;dc_motor.c: 264:         }
  5490   00137A  0EFB               	movlw	251
  5491   00137C  261C               	addwf	turnRightLong@i^0,f,c
  5492   00137E  0EFF               	movlw	255
  5493   001380  221D               	addwfc	(turnRightLong@i+1)^0,f,c
  5494   001382  BE1D               	btfsc	(turnRightLong@i+1)^0,7,c
  5495   001384  EFCF  F009         	goto	u1530
  5496   001388  501D               	movf	(turnRightLong@i+1)^0,w,c
  5497   00138A  E107               	bnz	u1531
  5498   00138C  0E0E               	movlw	14
  5499   00138E  5C1C               	subwf	turnRightLong@i^0,w,c
  5500   001390  B0D8               	btfsc	status,0,c
  5501   001392  EFCD  F009         	goto	u1531
  5502   001396  EFCF  F009         	goto	u1530
  5503   00139A                     u1531:
  5504   00139A  EF8A  F009         	goto	l2656
  5505   00139E                     u1530:
  5506   00139E                     
  5507                           ;dc_motor.c: 265:     }
  5508   00139E  4A1A               	infsnz	turnRightLong@k^0,f,c
  5509   0013A0  2A1B               	incf	(turnRightLong@k+1)^0,f,c
  5510   0013A2  BE1B               	btfsc	(turnRightLong@k+1)^0,7,c
  5511   0013A4  EFDD  F009         	goto	u1541
  5512   0013A8  501B               	movf	(turnRightLong@k+1)^0,w,c
  5513   0013AA  E109               	bnz	u1540
  5514   0013AC  0E03               	movlw	3
  5515   0013AE  5C1A               	subwf	turnRightLong@k^0,w,c
  5516   0013B0  A0D8               	btfss	status,0,c
  5517   0013B2  EFDD  F009         	goto	u1541
  5518   0013B6  EFDF  F009         	goto	u1540
  5519   0013BA                     u1541:
  5520   0013BA  EF3C  F009         	goto	l2628
  5521   0013BE                     u1540:
  5522   0013BE  0012               	return		;funcret
  5523   0013C0                     __end_of_turnRightLong:
  5524                           	callstack 0
  5525                           
  5526 ;; *************** function _turnRight *****************
  5527 ;; Defined at:
  5528 ;;		line 159 in file "dc_motor.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5531 ;;		 -> main@motorL(9), 
  5532 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5533 ;;		 -> main@motorR(9), 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;  i               2   27[COMRAM] int 
  5536 ;;  k               2   25[COMRAM] int 
  5537 ;; Return value:  Size  Location     Type
  5538 ;;                  1    wreg      void 
  5539 ;; Registers used:
  5540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5541 ;; Tracked objects:
  5542 ;;		On entry : 0/0
  5543 ;;		On exit  : 0/0
  5544 ;;		Unchanged: 0/0
  5545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5546 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5550 ;;Total ram usage:       10 bytes
  5551 ;; Hardware stack levels used: 1
  5552 ;; Hardware stack levels required when called: 4
  5553 ;; This function calls:
  5554 ;;		_setMotorPWM
  5555 ;; This function is called by:
  5556 ;;		_RobotMovement
  5557 ;;		_return_back
  5558 ;; This function uses a non-reentrant model
  5559 ;;
  5560                           
  5561                           	psect	text30
  5562   0013C0                     __ptext30:
  5563                           	callstack 0
  5564   0013C0                     _turnRight:
  5565                           	callstack 25
  5566   0013C0                     
  5567                           ;dc_motor.c: 159: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          60: {;dc_motor.c: 185:     int k;;dc_motor.c: 186:     for (k=0;k<2;k++)
  5568   0013C0  0E00               	movlw	0
  5569   0013C2  6E1B               	movwf	(turnRight@k+1)^0,c
  5570   0013C4  0E00               	movlw	0
  5571   0013C6  6E1A               	movwf	turnRight@k^0,c
  5572   0013C8                     l2520:
  5573                           
  5574                           ;dc_motor.c: 187:     {;dc_motor.c: 188:         int i;;dc_motor.c: 189:         for(i=2
      +                          3;i<38;i+=5){
  5575   0013C8  0E00               	movlw	0
  5576   0013CA  6E1D               	movwf	(turnRight@i+1)^0,c
  5577   0013CC  0E17               	movlw	23
  5578   0013CE  6E1C               	movwf	turnRight@i^0,c
  5579   0013D0                     l2526:
  5580                           
  5581                           ;dc_motor.c: 190:         (*mL).direction=0;
  5582   0013D0  EE20 F001          	lfsr	2,1
  5583   0013D4  5014               	movf	turnRight@mL^0,w,c
  5584   0013D6  26D9               	addwf	fsr2l,f,c
  5585   0013D8  5015               	movf	(turnRight@mL+1)^0,w,c
  5586   0013DA  22DA               	addwfc	fsr2h,f,c
  5587   0013DC  0E00               	movlw	0
  5588   0013DE  6EDF               	movwf	indf2,c
  5589                           
  5590                           ;dc_motor.c: 191:         (*mR).direction=1;
  5591   0013E0  EE20 F001          	lfsr	2,1
  5592   0013E4  5016               	movf	turnRight@mR^0,w,c
  5593   0013E6  26D9               	addwf	fsr2l,f,c
  5594   0013E8  5017               	movf	(turnRight@mR+1)^0,w,c
  5595   0013EA  22DA               	addwfc	fsr2h,f,c
  5596   0013EC  0E01               	movlw	1
  5597   0013EE  6EDF               	movwf	indf2,c
  5598   0013F0                     
  5599                           ;dc_motor.c: 192:         (*mL).power=i;
  5600   0013F0  C014  FFD9         	movff	turnRight@mL,fsr2l
  5601   0013F4  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5602   0013F8  C01C  FFDF         	movff	turnRight@i,indf2
  5603   0013FC                     
  5604                           ;dc_motor.c: 193:         (*mR).power=i;
  5605   0013FC  C016  FFD9         	movff	turnRight@mR,fsr2l
  5606   001400  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5607   001404  C01C  FFDF         	movff	turnRight@i,indf2
  5608   001408                     
  5609                           ;dc_motor.c: 194:         setMotorPWM(mL);
  5610   001408  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5611   00140C  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5612   001410  EC28  F007         	call	_setMotorPWM	;wreg free
  5613   001414                     
  5614                           ;dc_motor.c: 195:         setMotorPWM(mR);
  5615   001414  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5616   001418  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5617   00141C  EC28  F007         	call	_setMotorPWM	;wreg free
  5618   001420                     
  5619                           ;dc_motor.c: 196:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5620   001420  0E09               	movlw	9
  5621   001422  6E19               	movwf	(??_turnRight+1)^0,c
  5622   001424  0EB0               	movlw	176
  5623   001426  6E18               	movwf	??_turnRight^0,c
  5624   001428  0E58               	movlw	88
  5625   00142A                     u2727:
  5626   00142A  2EE8               	decfsz	wreg,f,c
  5627   00142C  D7FE               	bra	u2727
  5628   00142E  2E18               	decfsz	??_turnRight^0,f,c
  5629   001430  D7FC               	bra	u2727
  5630   001432  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5631   001434  D7FA               	bra	u2727
  5632   001436  D000               	nop2	
  5633   001438                     
  5634                           ;dc_motor.c: 197:         }
  5635   001438  0E05               	movlw	5
  5636   00143A  261C               	addwf	turnRight@i^0,f,c
  5637   00143C  0E00               	movlw	0
  5638   00143E  221D               	addwfc	(turnRight@i+1)^0,f,c
  5639   001440  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5640   001442  EF2C  F00A         	goto	u1461
  5641   001446  501D               	movf	(turnRight@i+1)^0,w,c
  5642   001448  E109               	bnz	u1460
  5643   00144A  0E26               	movlw	38
  5644   00144C  5C1C               	subwf	turnRight@i^0,w,c
  5645   00144E  A0D8               	btfss	status,0,c
  5646   001450  EF2C  F00A         	goto	u1461
  5647   001454  EF2E  F00A         	goto	u1460
  5648   001458                     u1461:
  5649   001458  EFE8  F009         	goto	l2526
  5650   00145C                     u1460:
  5651   00145C                     
  5652                           ;dc_motor.c: 198:         for(i=28;i>13;i-=5){
  5653   00145C  0E00               	movlw	0
  5654   00145E  6E1D               	movwf	(turnRight@i+1)^0,c
  5655   001460  0E1C               	movlw	28
  5656   001462  6E1C               	movwf	turnRight@i^0,c
  5657   001464                     l2548:
  5658                           
  5659                           ;dc_motor.c: 199:         (*mL).direction=0;
  5660   001464  EE20 F001          	lfsr	2,1
  5661   001468  5014               	movf	turnRight@mL^0,w,c
  5662   00146A  26D9               	addwf	fsr2l,f,c
  5663   00146C  5015               	movf	(turnRight@mL+1)^0,w,c
  5664   00146E  22DA               	addwfc	fsr2h,f,c
  5665   001470  0E00               	movlw	0
  5666   001472  6EDF               	movwf	indf2,c
  5667                           
  5668                           ;dc_motor.c: 200:         (*mR).direction=1;
  5669   001474  EE20 F001          	lfsr	2,1
  5670   001478  5016               	movf	turnRight@mR^0,w,c
  5671   00147A  26D9               	addwf	fsr2l,f,c
  5672   00147C  5017               	movf	(turnRight@mR+1)^0,w,c
  5673   00147E  22DA               	addwfc	fsr2h,f,c
  5674   001480  0E01               	movlw	1
  5675   001482  6EDF               	movwf	indf2,c
  5676   001484                     
  5677                           ;dc_motor.c: 201:         (*mL).power=i;
  5678   001484  C014  FFD9         	movff	turnRight@mL,fsr2l
  5679   001488  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5680   00148C  C01C  FFDF         	movff	turnRight@i,indf2
  5681   001490                     
  5682                           ;dc_motor.c: 202:         (*mR).power=i;
  5683   001490  C016  FFD9         	movff	turnRight@mR,fsr2l
  5684   001494  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5685   001498  C01C  FFDF         	movff	turnRight@i,indf2
  5686   00149C                     
  5687                           ;dc_motor.c: 203:         setMotorPWM(mL);
  5688   00149C  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5689   0014A0  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5690   0014A4  EC28  F007         	call	_setMotorPWM	;wreg free
  5691   0014A8                     
  5692                           ;dc_motor.c: 204:         setMotorPWM(mR);
  5693   0014A8  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5694   0014AC  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5695   0014B0  EC28  F007         	call	_setMotorPWM	;wreg free
  5696   0014B4                     
  5697                           ;dc_motor.c: 205:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5698   0014B4  0E09               	movlw	9
  5699   0014B6  6E19               	movwf	(??_turnRight+1)^0,c
  5700   0014B8  0E86               	movlw	134
  5701   0014BA  6E18               	movwf	??_turnRight^0,c
  5702   0014BC  0ECA               	movlw	202
  5703   0014BE                     u2737:
  5704   0014BE  2EE8               	decfsz	wreg,f,c
  5705   0014C0  D7FE               	bra	u2737
  5706   0014C2  2E18               	decfsz	??_turnRight^0,f,c
  5707   0014C4  D7FC               	bra	u2737
  5708   0014C6  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5709   0014C8  D7FA               	bra	u2737
  5710   0014CA                     
  5711                           ;dc_motor.c: 207:         }
  5712   0014CA  0EFB               	movlw	251
  5713   0014CC  261C               	addwf	turnRight@i^0,f,c
  5714   0014CE  0EFF               	movlw	255
  5715   0014D0  221D               	addwfc	(turnRight@i+1)^0,f,c
  5716   0014D2  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5717   0014D4  EF77  F00A         	goto	u1470
  5718   0014D8  501D               	movf	(turnRight@i+1)^0,w,c
  5719   0014DA  E107               	bnz	u1471
  5720   0014DC  0E0E               	movlw	14
  5721   0014DE  5C1C               	subwf	turnRight@i^0,w,c
  5722   0014E0  B0D8               	btfsc	status,0,c
  5723   0014E2  EF75  F00A         	goto	u1471
  5724   0014E6  EF77  F00A         	goto	u1470
  5725   0014EA                     u1471:
  5726   0014EA  EF32  F00A         	goto	l2548
  5727   0014EE                     u1470:
  5728   0014EE                     
  5729                           ;dc_motor.c: 208:     }
  5730   0014EE  4A1A               	infsnz	turnRight@k^0,f,c
  5731   0014F0  2A1B               	incf	(turnRight@k+1)^0,f,c
  5732   0014F2  BE1B               	btfsc	(turnRight@k+1)^0,7,c
  5733   0014F4  EF85  F00A         	goto	u1481
  5734   0014F8  501B               	movf	(turnRight@k+1)^0,w,c
  5735   0014FA  E109               	bnz	u1480
  5736   0014FC  0E02               	movlw	2
  5737   0014FE  5C1A               	subwf	turnRight@k^0,w,c
  5738   001500  A0D8               	btfss	status,0,c
  5739   001502  EF85  F00A         	goto	u1481
  5740   001506  EF87  F00A         	goto	u1480
  5741   00150A                     u1481:
  5742   00150A  EFE4  F009         	goto	l2520
  5743   00150E                     u1480:
  5744   00150E  0012               	return		;funcret
  5745   001510                     __end_of_turnRight:
  5746                           	callstack 0
  5747                           
  5748 ;; *************** function _turnLeftLong *****************
  5749 ;; Defined at:
  5750 ;;		line 211 in file "dc_motor.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5753 ;;		 -> main@motorL(9), 
  5754 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5755 ;;		 -> main@motorR(9), 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;  i               2   27[COMRAM] int 
  5758 ;;  k               2   25[COMRAM] int 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      void 
  5761 ;; Registers used:
  5762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5768 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5769 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5770 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5771 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5772 ;;Total ram usage:       10 bytes
  5773 ;; Hardware stack levels used: 1
  5774 ;; Hardware stack levels required when called: 4
  5775 ;; This function calls:
  5776 ;;		_setMotorPWM
  5777 ;; This function is called by:
  5778 ;;		_RobotMovement
  5779 ;;		_return_back
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text31
  5784   000FBC                     __ptext31:
  5785                           	callstack 0
  5786   000FBC                     _turnLeftLong:
  5787                           	callstack 25
  5788   000FBC                     
  5789                           ;dc_motor.c: 211: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 212: {;dc_motor.c: 213:     int k = 0;
  5790   000FBC  0E00               	movlw	0
  5791   000FBE  6E1B               	movwf	(turnLeftLong@k+1)^0,c
  5792   000FC0  0E00               	movlw	0
  5793   000FC2  6E1A               	movwf	turnLeftLong@k^0,c
  5794                           
  5795                           ;dc_motor.c: 214:     for (k=0;k<3;k++)
  5796   000FC4  0E00               	movlw	0
  5797   000FC6  6E1B               	movwf	(turnLeftLong@k+1)^0,c
  5798   000FC8  0E00               	movlw	0
  5799   000FCA  6E1A               	movwf	turnLeftLong@k^0,c
  5800   000FCC                     l2574:
  5801                           
  5802                           ;dc_motor.c: 215:     {;dc_motor.c: 216:         int i;;dc_motor.c: 217:         for(i=4
      +                          1;i<56;i+=5){
  5803   000FCC  0E00               	movlw	0
  5804   000FCE  6E1D               	movwf	(turnLeftLong@i+1)^0,c
  5805   000FD0  0E29               	movlw	41
  5806   000FD2  6E1C               	movwf	turnLeftLong@i^0,c
  5807   000FD4                     l2580:
  5808                           
  5809                           ;dc_motor.c: 218:         (*mL).direction=1;
  5810   000FD4  EE20 F001          	lfsr	2,1
  5811   000FD8  5014               	movf	turnLeftLong@mL^0,w,c
  5812   000FDA  26D9               	addwf	fsr2l,f,c
  5813   000FDC  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5814   000FDE  22DA               	addwfc	fsr2h,f,c
  5815   000FE0  0E01               	movlw	1
  5816   000FE2  6EDF               	movwf	indf2,c
  5817                           
  5818                           ;dc_motor.c: 219:         (*mR).direction=0;
  5819   000FE4  EE20 F001          	lfsr	2,1
  5820   000FE8  5016               	movf	turnLeftLong@mR^0,w,c
  5821   000FEA  26D9               	addwf	fsr2l,f,c
  5822   000FEC  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5823   000FEE  22DA               	addwfc	fsr2h,f,c
  5824   000FF0  0E00               	movlw	0
  5825   000FF2  6EDF               	movwf	indf2,c
  5826   000FF4                     
  5827                           ;dc_motor.c: 220:         (*mL).power=i;
  5828   000FF4  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5829   000FF8  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5830   000FFC  C01C  FFDF         	movff	turnLeftLong@i,indf2
  5831   001000                     
  5832                           ;dc_motor.c: 221:         (*mR).power=i;
  5833   001000  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5834   001004  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5835   001008  C01C  FFDF         	movff	turnLeftLong@i,indf2
  5836   00100C                     
  5837                           ;dc_motor.c: 222:         setMotorPWM(mL);
  5838   00100C  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5839   001010  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5840   001014  EC28  F007         	call	_setMotorPWM	;wreg free
  5841   001018                     
  5842                           ;dc_motor.c: 223:         setMotorPWM(mR);
  5843   001018  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5844   00101C  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5845   001020  EC28  F007         	call	_setMotorPWM	;wreg free
  5846   001024                     
  5847                           ;dc_motor.c: 224:         _delay((unsigned long)((58)*(64000000/4000.0)));
  5848   001024  0E05               	movlw	5
  5849   001026  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5850   001028  0EB6               	movlw	182
  5851   00102A  6E18               	movwf	??_turnLeftLong^0,c
  5852   00102C  0E2C               	movlw	44
  5853   00102E                     u2747:
  5854   00102E  2EE8               	decfsz	wreg,f,c
  5855   001030  D7FE               	bra	u2747
  5856   001032  2E18               	decfsz	??_turnLeftLong^0,f,c
  5857   001034  D7FC               	bra	u2747
  5858   001036  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5859   001038  D7FA               	bra	u2747
  5860   00103A  D000               	nop2	
  5861   00103C                     
  5862                           ;dc_motor.c: 225:         }
  5863   00103C  0E05               	movlw	5
  5864   00103E  261C               	addwf	turnLeftLong@i^0,f,c
  5865   001040  0E00               	movlw	0
  5866   001042  221D               	addwfc	(turnLeftLong@i+1)^0,f,c
  5867   001044  BE1D               	btfsc	(turnLeftLong@i+1)^0,7,c
  5868   001046  EF2E  F008         	goto	u1491
  5869   00104A  501D               	movf	(turnLeftLong@i+1)^0,w,c
  5870   00104C  E109               	bnz	u1490
  5871   00104E  0E38               	movlw	56
  5872   001050  5C1C               	subwf	turnLeftLong@i^0,w,c
  5873   001052  A0D8               	btfss	status,0,c
  5874   001054  EF2E  F008         	goto	u1491
  5875   001058  EF30  F008         	goto	u1490
  5876   00105C                     u1491:
  5877   00105C  EFEA  F007         	goto	l2580
  5878   001060                     u1490:
  5879   001060                     
  5880                           ;dc_motor.c: 226:         for(i=46;i>31;i-=5){
  5881   001060  0E00               	movlw	0
  5882   001062  6E1D               	movwf	(turnLeftLong@i+1)^0,c
  5883   001064  0E2E               	movlw	46
  5884   001066  6E1C               	movwf	turnLeftLong@i^0,c
  5885   001068                     l2602:
  5886                           
  5887                           ;dc_motor.c: 227:         (*mL).direction=1;
  5888   001068  EE20 F001          	lfsr	2,1
  5889   00106C  5014               	movf	turnLeftLong@mL^0,w,c
  5890   00106E  26D9               	addwf	fsr2l,f,c
  5891   001070  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5892   001072  22DA               	addwfc	fsr2h,f,c
  5893   001074  0E01               	movlw	1
  5894   001076  6EDF               	movwf	indf2,c
  5895                           
  5896                           ;dc_motor.c: 228:         (*mR).direction=0;
  5897   001078  EE20 F001          	lfsr	2,1
  5898   00107C  5016               	movf	turnLeftLong@mR^0,w,c
  5899   00107E  26D9               	addwf	fsr2l,f,c
  5900   001080  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5901   001082  22DA               	addwfc	fsr2h,f,c
  5902   001084  0E00               	movlw	0
  5903   001086  6EDF               	movwf	indf2,c
  5904   001088                     
  5905                           ;dc_motor.c: 229:         (*mL).power=i;
  5906   001088  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5907   00108C  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5908   001090  C01C  FFDF         	movff	turnLeftLong@i,indf2
  5909   001094                     
  5910                           ;dc_motor.c: 230:         (*mR).power=i;
  5911   001094  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5912   001098  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5913   00109C  C01C  FFDF         	movff	turnLeftLong@i,indf2
  5914   0010A0                     
  5915                           ;dc_motor.c: 231:         setMotorPWM(mL);
  5916   0010A0  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5917   0010A4  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5918   0010A8  EC28  F007         	call	_setMotorPWM	;wreg free
  5919   0010AC                     
  5920                           ;dc_motor.c: 232:         setMotorPWM(mR);
  5921   0010AC  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5922   0010B0  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5923   0010B4  EC28  F007         	call	_setMotorPWM	;wreg free
  5924   0010B8                     
  5925                           ;dc_motor.c: 233:         _delay((unsigned long)((57)*(64000000/4000.0)));
  5926   0010B8  0E05               	movlw	5
  5927   0010BA  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5928   0010BC  0EA1               	movlw	161
  5929   0010BE  6E18               	movwf	??_turnLeftLong^0,c
  5930   0010C0  0E65               	movlw	101
  5931   0010C2                     u2757:
  5932   0010C2  2EE8               	decfsz	wreg,f,c
  5933   0010C4  D7FE               	bra	u2757
  5934   0010C6  2E18               	decfsz	??_turnLeftLong^0,f,c
  5935   0010C8  D7FC               	bra	u2757
  5936   0010CA  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5937   0010CC  D7FA               	bra	u2757
  5938   0010CE  F000               	nop	
  5939   0010D0                     
  5940                           ;dc_motor.c: 235:         }
  5941   0010D0  0EFB               	movlw	251
  5942   0010D2  261C               	addwf	turnLeftLong@i^0,f,c
  5943   0010D4  0EFF               	movlw	255
  5944   0010D6  221D               	addwfc	(turnLeftLong@i+1)^0,f,c
  5945   0010D8  BE1D               	btfsc	(turnLeftLong@i+1)^0,7,c
  5946   0010DA  EF7A  F008         	goto	u1500
  5947   0010DE  501D               	movf	(turnLeftLong@i+1)^0,w,c
  5948   0010E0  E107               	bnz	u1501
  5949   0010E2  0E20               	movlw	32
  5950   0010E4  5C1C               	subwf	turnLeftLong@i^0,w,c
  5951   0010E6  B0D8               	btfsc	status,0,c
  5952   0010E8  EF78  F008         	goto	u1501
  5953   0010EC  EF7A  F008         	goto	u1500
  5954   0010F0                     u1501:
  5955   0010F0  EF34  F008         	goto	l2602
  5956   0010F4                     u1500:
  5957   0010F4                     
  5958                           ;dc_motor.c: 236:     }
  5959   0010F4  4A1A               	infsnz	turnLeftLong@k^0,f,c
  5960   0010F6  2A1B               	incf	(turnLeftLong@k+1)^0,f,c
  5961   0010F8  BE1B               	btfsc	(turnLeftLong@k+1)^0,7,c
  5962   0010FA  EF88  F008         	goto	u1511
  5963   0010FE  501B               	movf	(turnLeftLong@k+1)^0,w,c
  5964   001100  E109               	bnz	u1510
  5965   001102  0E03               	movlw	3
  5966   001104  5C1A               	subwf	turnLeftLong@k^0,w,c
  5967   001106  A0D8               	btfss	status,0,c
  5968   001108  EF88  F008         	goto	u1511
  5969   00110C  EF8A  F008         	goto	u1510
  5970   001110                     u1511:
  5971   001110  EFE6  F007         	goto	l2574
  5972   001114                     u1510:
  5973   001114  0012               	return		;funcret
  5974   001116                     __end_of_turnLeftLong:
  5975                           	callstack 0
  5976                           
  5977 ;; *************** function _turnLeft *****************
  5978 ;; Defined at:
  5979 ;;		line 107 in file "dc_motor.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5982 ;;		 -> main@motorL(9), 
  5983 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5984 ;;		 -> main@motorR(9), 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  i               2   27[COMRAM] int 
  5987 ;;  k               2   25[COMRAM] int 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5997 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5998 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6000 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6001 ;;Total ram usage:       10 bytes
  6002 ;; Hardware stack levels used: 1
  6003 ;; Hardware stack levels required when called: 4
  6004 ;; This function calls:
  6005 ;;		_setMotorPWM
  6006 ;; This function is called by:
  6007 ;;		_RobotMovement
  6008 ;;		_return_back
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text32
  6013   001116                     __ptext32:
  6014                           	callstack 0
  6015   001116                     _turnLeft:
  6016                           	callstack 25
  6017   001116                     
  6018                           ;dc_motor.c: 107: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 108: {;dc_motor.
      +                          c: 133:     int k = 0;
  6019   001116  0E00               	movlw	0
  6020   001118  6E1B               	movwf	(turnLeft@k+1)^0,c
  6021   00111A  0E00               	movlw	0
  6022   00111C  6E1A               	movwf	turnLeft@k^0,c
  6023                           
  6024                           ;dc_motor.c: 134:     for (k=0;k<2;k++)
  6025   00111E  0E00               	movlw	0
  6026   001120  6E1B               	movwf	(turnLeft@k+1)^0,c
  6027   001122  0E00               	movlw	0
  6028   001124  6E1A               	movwf	turnLeft@k^0,c
  6029   001126                     l2466:
  6030                           
  6031                           ;dc_motor.c: 135:     {;dc_motor.c: 136:         int i;;dc_motor.c: 137:         for(i=4
      +                          1;i<56;i+=5){
  6032   001126  0E00               	movlw	0
  6033   001128  6E1D               	movwf	(turnLeft@i+1)^0,c
  6034   00112A  0E29               	movlw	41
  6035   00112C  6E1C               	movwf	turnLeft@i^0,c
  6036   00112E                     l2472:
  6037                           
  6038                           ;dc_motor.c: 138:         (*mL).direction=1;
  6039   00112E  EE20 F001          	lfsr	2,1
  6040   001132  5014               	movf	turnLeft@mL^0,w,c
  6041   001134  26D9               	addwf	fsr2l,f,c
  6042   001136  5015               	movf	(turnLeft@mL+1)^0,w,c
  6043   001138  22DA               	addwfc	fsr2h,f,c
  6044   00113A  0E01               	movlw	1
  6045   00113C  6EDF               	movwf	indf2,c
  6046                           
  6047                           ;dc_motor.c: 139:         (*mR).direction=0;
  6048   00113E  EE20 F001          	lfsr	2,1
  6049   001142  5016               	movf	turnLeft@mR^0,w,c
  6050   001144  26D9               	addwf	fsr2l,f,c
  6051   001146  5017               	movf	(turnLeft@mR+1)^0,w,c
  6052   001148  22DA               	addwfc	fsr2h,f,c
  6053   00114A  0E00               	movlw	0
  6054   00114C  6EDF               	movwf	indf2,c
  6055   00114E                     
  6056                           ;dc_motor.c: 140:         (*mL).power=i;
  6057   00114E  C014  FFD9         	movff	turnLeft@mL,fsr2l
  6058   001152  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  6059   001156  C01C  FFDF         	movff	turnLeft@i,indf2
  6060   00115A                     
  6061                           ;dc_motor.c: 141:         (*mR).power=i;
  6062   00115A  C016  FFD9         	movff	turnLeft@mR,fsr2l
  6063   00115E  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  6064   001162  C01C  FFDF         	movff	turnLeft@i,indf2
  6065   001166                     
  6066                           ;dc_motor.c: 142:         setMotorPWM(mL);
  6067   001166  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6068   00116A  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6069   00116E  EC28  F007         	call	_setMotorPWM	;wreg free
  6070   001172                     
  6071                           ;dc_motor.c: 143:         setMotorPWM(mR);
  6072   001172  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6073   001176  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6074   00117A  EC28  F007         	call	_setMotorPWM	;wreg free
  6075   00117E                     
  6076                           ;dc_motor.c: 144:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6077   00117E  0E05               	movlw	5
  6078   001180  6E19               	movwf	(??_turnLeft+1)^0,c
  6079   001182  0EB6               	movlw	182
  6080   001184  6E18               	movwf	??_turnLeft^0,c
  6081   001186  0E2C               	movlw	44
  6082   001188                     u2767:
  6083   001188  2EE8               	decfsz	wreg,f,c
  6084   00118A  D7FE               	bra	u2767
  6085   00118C  2E18               	decfsz	??_turnLeft^0,f,c
  6086   00118E  D7FC               	bra	u2767
  6087   001190  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6088   001192  D7FA               	bra	u2767
  6089   001194  D000               	nop2	
  6090   001196                     
  6091                           ;dc_motor.c: 145:         }
  6092   001196  0E05               	movlw	5
  6093   001198  261C               	addwf	turnLeft@i^0,f,c
  6094   00119A  0E00               	movlw	0
  6095   00119C  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6096   00119E  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6097   0011A0  EFDB  F008         	goto	u1431
  6098   0011A4  501D               	movf	(turnLeft@i+1)^0,w,c
  6099   0011A6  E109               	bnz	u1430
  6100   0011A8  0E38               	movlw	56
  6101   0011AA  5C1C               	subwf	turnLeft@i^0,w,c
  6102   0011AC  A0D8               	btfss	status,0,c
  6103   0011AE  EFDB  F008         	goto	u1431
  6104   0011B2  EFDD  F008         	goto	u1430
  6105   0011B6                     u1431:
  6106   0011B6  EF97  F008         	goto	l2472
  6107   0011BA                     u1430:
  6108   0011BA                     
  6109                           ;dc_motor.c: 146:         for(i=46;i>31;i-=5){
  6110   0011BA  0E00               	movlw	0
  6111   0011BC  6E1D               	movwf	(turnLeft@i+1)^0,c
  6112   0011BE  0E2E               	movlw	46
  6113   0011C0  6E1C               	movwf	turnLeft@i^0,c
  6114   0011C2                     l2494:
  6115                           
  6116                           ;dc_motor.c: 147:         (*mL).direction=1;
  6117   0011C2  EE20 F001          	lfsr	2,1
  6118   0011C6  5014               	movf	turnLeft@mL^0,w,c
  6119   0011C8  26D9               	addwf	fsr2l,f,c
  6120   0011CA  5015               	movf	(turnLeft@mL+1)^0,w,c
  6121   0011CC  22DA               	addwfc	fsr2h,f,c
  6122   0011CE  0E01               	movlw	1
  6123   0011D0  6EDF               	movwf	indf2,c
  6124                           
  6125                           ;dc_motor.c: 148:         (*mR).direction=0;
  6126   0011D2  EE20 F001          	lfsr	2,1
  6127   0011D6  5016               	movf	turnLeft@mR^0,w,c
  6128   0011D8  26D9               	addwf	fsr2l,f,c
  6129   0011DA  5017               	movf	(turnLeft@mR+1)^0,w,c
  6130   0011DC  22DA               	addwfc	fsr2h,f,c
  6131   0011DE  0E00               	movlw	0
  6132   0011E0  6EDF               	movwf	indf2,c
  6133   0011E2                     
  6134                           ;dc_motor.c: 149:         (*mL).power=i;
  6135   0011E2  C014  FFD9         	movff	turnLeft@mL,fsr2l
  6136   0011E6  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  6137   0011EA  C01C  FFDF         	movff	turnLeft@i,indf2
  6138   0011EE                     
  6139                           ;dc_motor.c: 150:         (*mR).power=i;
  6140   0011EE  C016  FFD9         	movff	turnLeft@mR,fsr2l
  6141   0011F2  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  6142   0011F6  C01C  FFDF         	movff	turnLeft@i,indf2
  6143   0011FA                     
  6144                           ;dc_motor.c: 151:         setMotorPWM(mL);
  6145   0011FA  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  6146   0011FE  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6147   001202  EC28  F007         	call	_setMotorPWM	;wreg free
  6148   001206                     
  6149                           ;dc_motor.c: 152:         setMotorPWM(mR);
  6150   001206  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6151   00120A  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6152   00120E  EC28  F007         	call	_setMotorPWM	;wreg free
  6153   001212                     
  6154                           ;dc_motor.c: 153:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6155   001212  0E05               	movlw	5
  6156   001214  6E19               	movwf	(??_turnLeft+1)^0,c
  6157   001216  0EA1               	movlw	161
  6158   001218  6E18               	movwf	??_turnLeft^0,c
  6159   00121A  0E65               	movlw	101
  6160   00121C                     u2777:
  6161   00121C  2EE8               	decfsz	wreg,f,c
  6162   00121E  D7FE               	bra	u2777
  6163   001220  2E18               	decfsz	??_turnLeft^0,f,c
  6164   001222  D7FC               	bra	u2777
  6165   001224  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6166   001226  D7FA               	bra	u2777
  6167   001228  F000               	nop	
  6168   00122A                     
  6169                           ;dc_motor.c: 155:         }
  6170   00122A  0EFB               	movlw	251
  6171   00122C  261C               	addwf	turnLeft@i^0,f,c
  6172   00122E  0EFF               	movlw	255
  6173   001230  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6174   001232  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6175   001234  EF27  F009         	goto	u1440
  6176   001238  501D               	movf	(turnLeft@i+1)^0,w,c
  6177   00123A  E107               	bnz	u1441
  6178   00123C  0E20               	movlw	32
  6179   00123E  5C1C               	subwf	turnLeft@i^0,w,c
  6180   001240  B0D8               	btfsc	status,0,c
  6181   001242  EF25  F009         	goto	u1441
  6182   001246  EF27  F009         	goto	u1440
  6183   00124A                     u1441:
  6184   00124A  EFE1  F008         	goto	l2494
  6185   00124E                     u1440:
  6186   00124E                     
  6187                           ;dc_motor.c: 156:     }
  6188   00124E  4A1A               	infsnz	turnLeft@k^0,f,c
  6189   001250  2A1B               	incf	(turnLeft@k+1)^0,f,c
  6190   001252  BE1B               	btfsc	(turnLeft@k+1)^0,7,c
  6191   001254  EF35  F009         	goto	u1451
  6192   001258  501B               	movf	(turnLeft@k+1)^0,w,c
  6193   00125A  E109               	bnz	u1450
  6194   00125C  0E02               	movlw	2
  6195   00125E  5C1A               	subwf	turnLeft@k^0,w,c
  6196   001260  A0D8               	btfss	status,0,c
  6197   001262  EF35  F009         	goto	u1451
  6198   001266  EF37  F009         	goto	u1450
  6199   00126A                     u1451:
  6200   00126A  EF93  F008         	goto	l2466
  6201   00126E                     u1450:
  6202   00126E  0012               	return		;funcret
  6203   001270                     __end_of_turnLeft:
  6204                           	callstack 0
  6205                           
  6206 ;; *************** function _stop *****************
  6207 ;; Defined at:
  6208 ;;		line 97 in file "dc_motor.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6211 ;;		 -> main@motorL(9), 
  6212 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6213 ;;		 -> main@motorR(9), 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;		None
  6216 ;; Return value:  Size  Location     Type
  6217 ;;                  1    wreg      void 
  6218 ;; Registers used:
  6219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6229 ;;Total ram usage:        6 bytes
  6230 ;; Hardware stack levels used: 1
  6231 ;; Hardware stack levels required when called: 4
  6232 ;; This function calls:
  6233 ;;		_setMotorPWM
  6234 ;; This function is called by:
  6235 ;;		_RobotMovement
  6236 ;;		_return_back
  6237 ;;		_main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text33
  6242   001E5E                     __ptext33:
  6243                           	callstack 0
  6244   001E5E                     _stop:
  6245                           	callstack 26
  6246   001E5E                     
  6247                           ;dc_motor.c: 97: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 98: {;d
      +                          c_motor.c: 99:     (*mL).power=0;
  6248   001E5E  C014  FFD9         	movff	stop@mL,fsr2l
  6249   001E62  C015  FFDA         	movff	stop@mL+1,fsr2h
  6250   001E66  0E00               	movlw	0
  6251   001E68  6EDF               	movwf	indf2,c
  6252                           
  6253                           ;dc_motor.c: 100:     (*mR).power=0;
  6254   001E6A  C016  FFD9         	movff	stop@mR,fsr2l
  6255   001E6E  C017  FFDA         	movff	stop@mR+1,fsr2h
  6256   001E72  0E00               	movlw	0
  6257   001E74  6EDF               	movwf	indf2,c
  6258   001E76                     
  6259                           ;dc_motor.c: 101:     setMotorPWM(mL);
  6260   001E76  C014  F00E         	movff	stop@mL,setMotorPWM@m
  6261   001E7A  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  6262   001E7E  EC28  F007         	call	_setMotorPWM	;wreg free
  6263   001E82                     
  6264                           ;dc_motor.c: 102:     setMotorPWM(mR);
  6265   001E82  C016  F00E         	movff	stop@mR,setMotorPWM@m
  6266   001E86  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  6267   001E8A  EC28  F007         	call	_setMotorPWM	;wreg free
  6268   001E8E                     
  6269                           ;dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6270   001E8E  0E29               	movlw	41
  6271   001E90  6E19               	movwf	(??_stop+1)^0,c
  6272   001E92  0E96               	movlw	150
  6273   001E94  6E18               	movwf	??_stop^0,c
  6274   001E96  0E7F               	movlw	127
  6275   001E98                     u2787:
  6276   001E98  2EE8               	decfsz	wreg,f,c
  6277   001E9A  D7FE               	bra	u2787
  6278   001E9C  2E18               	decfsz	??_stop^0,f,c
  6279   001E9E  D7FC               	bra	u2787
  6280   001EA0  2E19               	decfsz	(??_stop+1)^0,f,c
  6281   001EA2  D7FA               	bra	u2787
  6282   001EA4  F000               	nop	
  6283   001EA6  0012               	return		;funcret
  6284   001EA8                     __end_of_stop:
  6285                           	callstack 0
  6286                           
  6287 ;; *************** function _moveBack *****************
  6288 ;; Defined at:
  6289 ;;		line 294 in file "dc_motor.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6292 ;;		 -> main@motorL(9), 
  6293 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6294 ;;		 -> main@motorR(9), 
  6295 ;;  time            2   23[COMRAM] unsigned int 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;		None
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6307 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6310 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6311 ;;Total ram usage:        6 bytes
  6312 ;; Hardware stack levels used: 1
  6313 ;; Hardware stack levels required when called: 4
  6314 ;; This function calls:
  6315 ;;		_setMotorPWM
  6316 ;; This function is called by:
  6317 ;;		_RobotMovement
  6318 ;;		_return_back
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text34
  6323   001A9A                     __ptext34:
  6324                           	callstack 0
  6325   001A9A                     _moveBack:
  6326                           	callstack 25
  6327   001A9A                     
  6328                           ;dc_motor.c: 294: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 295: {;dc_motor.c: 296:     seconds = 0;
  6329   001A9A  0E00               	movlw	0
  6330   001A9C  6E5E               	movwf	(_seconds+1)^0,c
  6331   001A9E  0E00               	movlw	0
  6332   001AA0  6E5D               	movwf	_seconds^0,c
  6333                           
  6334                           ;dc_motor.c: 297:     while (seconds<time)
  6335   001AA2  EF7B  F00D         	goto	l2702
  6336   001AA6                     l2692:
  6337                           
  6338                           ;dc_motor.c: 298:     {;dc_motor.c: 299:         (*mL).direction=1;
  6339   001AA6  EE20 F001          	lfsr	2,1
  6340   001AAA  5014               	movf	moveBack@mL^0,w,c
  6341   001AAC  26D9               	addwf	fsr2l,f,c
  6342   001AAE  5015               	movf	(moveBack@mL+1)^0,w,c
  6343   001AB0  22DA               	addwfc	fsr2h,f,c
  6344   001AB2  0E01               	movlw	1
  6345   001AB4  6EDF               	movwf	indf2,c
  6346                           
  6347                           ;dc_motor.c: 300:         (*mR).direction=1;
  6348   001AB6  EE20 F001          	lfsr	2,1
  6349   001ABA  5016               	movf	moveBack@mR^0,w,c
  6350   001ABC  26D9               	addwf	fsr2l,f,c
  6351   001ABE  5017               	movf	(moveBack@mR+1)^0,w,c
  6352   001AC0  22DA               	addwfc	fsr2h,f,c
  6353   001AC2  0E01               	movlw	1
  6354   001AC4  6EDF               	movwf	indf2,c
  6355   001AC6                     
  6356                           ;dc_motor.c: 301:         (*mL).power=70;
  6357   001AC6  C014  FFD9         	movff	moveBack@mL,fsr2l
  6358   001ACA  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  6359   001ACE  0E46               	movlw	70
  6360   001AD0  6EDF               	movwf	indf2,c
  6361   001AD2                     
  6362                           ;dc_motor.c: 302:         (*mR).power=68;
  6363   001AD2  C016  FFD9         	movff	moveBack@mR,fsr2l
  6364   001AD6  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  6365   001ADA  0E44               	movlw	68
  6366   001ADC  6EDF               	movwf	indf2,c
  6367   001ADE                     
  6368                           ;dc_motor.c: 303:         setMotorPWM(mL);
  6369   001ADE  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  6370   001AE2  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6371   001AE6  EC28  F007         	call	_setMotorPWM	;wreg free
  6372   001AEA                     
  6373                           ;dc_motor.c: 304:         setMotorPWM(mR);
  6374   001AEA  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  6375   001AEE  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6376   001AF2  EC28  F007         	call	_setMotorPWM	;wreg free
  6377   001AF6                     l2702:
  6378                           
  6379                           ;dc_motor.c: 297:     while (seconds<time)
  6380   001AF6  5018               	movf	moveBack@time^0,w,c
  6381   001AF8  5C5D               	subwf	_seconds^0,w,c
  6382   001AFA  5019               	movf	(moveBack@time+1)^0,w,c
  6383   001AFC  585E               	subwfb	(_seconds+1)^0,w,c
  6384   001AFE  A0D8               	btfss	status,0,c
  6385   001B00  EF84  F00D         	goto	u1561
  6386   001B04  EF86  F00D         	goto	u1560
  6387   001B08                     u1561:
  6388   001B08  EF53  F00D         	goto	l2692
  6389   001B0C                     u1560:
  6390   001B0C  0012               	return		;funcret
  6391   001B0E                     __end_of_moveBack:
  6392                           	callstack 0
  6393                           
  6394 ;; *************** function _TimedfullSpeedAhead *****************
  6395 ;; Defined at:
  6396 ;;		line 279 in file "dc_motor.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6399 ;;		 -> main@motorL(9), 
  6400 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6401 ;;		 -> main@motorR(9), 
  6402 ;;  time            2   23[COMRAM] unsigned int 
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;		None
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6414 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6417 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6418 ;;Total ram usage:        6 bytes
  6419 ;; Hardware stack levels used: 1
  6420 ;; Hardware stack levels required when called: 4
  6421 ;; This function calls:
  6422 ;;		_setMotorPWM
  6423 ;; This function is called by:
  6424 ;;		_RobotMovement
  6425 ;;		_return_back
  6426 ;;		_main
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text35
  6431   001B0E                     __ptext35:
  6432                           	callstack 0
  6433   001B0E                     _TimedfullSpeedAhead:
  6434                           	callstack 25
  6435   001B0E                     
  6436                           ;dc_motor.c: 279: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 280: {;dc_motor.c: 281:     seconds = 0;
  6437   001B0E  0E00               	movlw	0
  6438   001B10  6E5E               	movwf	(_seconds+1)^0,c
  6439   001B12  0E00               	movlw	0
  6440   001B14  6E5D               	movwf	_seconds^0,c
  6441                           
  6442                           ;dc_motor.c: 282:     while (seconds<time)
  6443   001B16  EFB5  F00D         	goto	l2688
  6444   001B1A                     l2678:
  6445                           
  6446                           ;dc_motor.c: 283:     {;dc_motor.c: 285:         (*mL).direction=0;
  6447   001B1A  EE20 F001          	lfsr	2,1
  6448   001B1E  5014               	movf	TimedfullSpeedAhead@mL^0,w,c
  6449   001B20  26D9               	addwf	fsr2l,f,c
  6450   001B22  5015               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6451   001B24  22DA               	addwfc	fsr2h,f,c
  6452   001B26  0E00               	movlw	0
  6453   001B28  6EDF               	movwf	indf2,c
  6454                           
  6455                           ;dc_motor.c: 286:         (*mR).direction=0;
  6456   001B2A  EE20 F001          	lfsr	2,1
  6457   001B2E  5016               	movf	TimedfullSpeedAhead@mR^0,w,c
  6458   001B30  26D9               	addwf	fsr2l,f,c
  6459   001B32  5017               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6460   001B34  22DA               	addwfc	fsr2h,f,c
  6461   001B36  0E00               	movlw	0
  6462   001B38  6EDF               	movwf	indf2,c
  6463   001B3A                     
  6464                           ;dc_motor.c: 287:         (*mL).power=68;
  6465   001B3A  C014  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6466   001B3E  C015  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6467   001B42  0E44               	movlw	68
  6468   001B44  6EDF               	movwf	indf2,c
  6469   001B46                     
  6470                           ;dc_motor.c: 288:         (*mR).power=68;
  6471   001B46  C016  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6472   001B4A  C017  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6473   001B4E  0E44               	movlw	68
  6474   001B50  6EDF               	movwf	indf2,c
  6475   001B52                     
  6476                           ;dc_motor.c: 289:         setMotorPWM(mL);
  6477   001B52  C014  F00E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6478   001B56  C015  F00F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6479   001B5A  EC28  F007         	call	_setMotorPWM	;wreg free
  6480   001B5E                     
  6481                           ;dc_motor.c: 290:         setMotorPWM(mR);
  6482   001B5E  C016  F00E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6483   001B62  C017  F00F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6484   001B66  EC28  F007         	call	_setMotorPWM	;wreg free
  6485   001B6A                     l2688:
  6486                           
  6487                           ;dc_motor.c: 282:     while (seconds<time)
  6488   001B6A  5018               	movf	TimedfullSpeedAhead@time^0,w,c
  6489   001B6C  5C5D               	subwf	_seconds^0,w,c
  6490   001B6E  5019               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6491   001B70  585E               	subwfb	(_seconds+1)^0,w,c
  6492   001B72  A0D8               	btfss	status,0,c
  6493   001B74  EFBE  F00D         	goto	u1551
  6494   001B78  EFC0  F00D         	goto	u1550
  6495   001B7C                     u1551:
  6496   001B7C  EF8D  F00D         	goto	l2678
  6497   001B80                     u1550:
  6498   001B80  0012               	return		;funcret
  6499   001B82                     __end_of_TimedfullSpeedAhead:
  6500                           	callstack 0
  6501                           
  6502 ;; *************** function _setMotorPWM *****************
  6503 ;; Defined at:
  6504 ;;		line 74 in file "dc_motor.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;  m               2   13[COMRAM] PTR struct DC_motor
  6507 ;;		 -> main@motorR(9), main@motorL(9), 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  negDuty         1   18[COMRAM] unsigned char 
  6510 ;;  posDuty         1   17[COMRAM] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;                  1    wreg      void 
  6513 ;; Registers used:
  6514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6522 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6523 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6524 ;;Total ram usage:        6 bytes
  6525 ;; Hardware stack levels used: 1
  6526 ;; Hardware stack levels required when called: 3
  6527 ;; This function calls:
  6528 ;;		___lwdiv
  6529 ;;		___wmul
  6530 ;; This function is called by:
  6531 ;;		_stop
  6532 ;;		_turnLeft
  6533 ;;		_turnRight
  6534 ;;		_turnLeftLong
  6535 ;;		_turnRightLong
  6536 ;;		_fullSpeedAhead
  6537 ;;		_TimedfullSpeedAhead
  6538 ;;		_moveBack
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text36
  6543   000E50                     __ptext36:
  6544                           	callstack 0
  6545   000E50                     _setMotorPWM:
  6546                           	callstack 26
  6547   000E50                     
  6548                           ;dc_motor.c: 74: void setMotorPWM(DC_motor *m);dc_motor.c: 75: {;dc_motor.c: 76:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 78:     if(m->brakemode) {
  6549   000E50  EE20 F002          	lfsr	2,2
  6550   000E54  500E               	movf	setMotorPWM@m^0,w,c
  6551   000E56  26D9               	addwf	fsr2l,f,c
  6552   000E58  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6553   000E5A  22DA               	addwfc	fsr2h,f,c
  6554   000E5C  50DF               	movf	indf2,w,c
  6555   000E5E  B4D8               	btfsc	status,2,c
  6556   000E60  EF34  F007         	goto	u1381
  6557   000E64  EF36  F007         	goto	u1380
  6558   000E68                     u1381:
  6559   000E68  EF6A  F007         	goto	l2356
  6560   000E6C                     u1380:
  6561   000E6C                     
  6562                           ;dc_motor.c: 79:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6563   000E6C  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6564   000E70  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6565   000E74  50DF               	movf	indf2,w,c
  6566   000E76  6E10               	movwf	??_setMotorPWM^0,c
  6567   000E78  5010               	movf	??_setMotorPWM^0,w,c
  6568   000E7A  6E01               	movwf	___wmul@multiplier^0,c
  6569   000E7C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6570   000E7E  EE20 F003          	lfsr	2,3
  6571   000E82  500E               	movf	setMotorPWM@m^0,w,c
  6572   000E84  26D9               	addwf	fsr2l,f,c
  6573   000E86  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6574   000E88  22DA               	addwfc	fsr2h,f,c
  6575   000E8A  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6576   000E8E  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6577   000E92  ECE4  F00F         	call	___wmul	;wreg free
  6578   000E96  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6579   000E9A  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6580   000E9E  0E00               	movlw	0
  6581   000EA0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6582   000EA2  0E64               	movlw	100
  6583   000EA4  6E09               	movwf	___lwdiv@divisor^0,c
  6584   000EA6  ECC1  F00D         	call	___lwdiv	;wreg free
  6585   000EAA  EE20 F003          	lfsr	2,3
  6586   000EAE  500E               	movf	setMotorPWM@m^0,w,c
  6587   000EB0  26D9               	addwf	fsr2l,f,c
  6588   000EB2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6589   000EB4  22DA               	addwfc	fsr2h,f,c
  6590   000EB6  50DF               	movf	indf2,w,c
  6591   000EB8  6E11               	movwf	(??_setMotorPWM+1)^0,c
  6592   000EBA  5007               	movf	?___lwdiv^0,w,c
  6593   000EBC  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  6594   000EBE  6E12               	movwf	setMotorPWM@posDuty^0,c
  6595   000EC0                     
  6596                           ;dc_motor.c: 80:         negDuty=m->PWMperiod;
  6597   000EC0  EE20 F003          	lfsr	2,3
  6598   000EC4  500E               	movf	setMotorPWM@m^0,w,c
  6599   000EC6  26D9               	addwf	fsr2l,f,c
  6600   000EC8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6601   000ECA  22DA               	addwfc	fsr2h,f,c
  6602   000ECC  50DF               	movf	indf2,w,c
  6603   000ECE  6E13               	movwf	setMotorPWM@negDuty^0,c
  6604                           
  6605                           ;dc_motor.c: 81:     }
  6606   000ED0  EF8D  F007         	goto	l2360
  6607   000ED4                     l2356:
  6608                           
  6609                           ;dc_motor.c: 83:         posDuty=0;
  6610   000ED4  0E00               	movlw	0
  6611   000ED6  6E12               	movwf	setMotorPWM@posDuty^0,c
  6612   000ED8                     
  6613                           ;dc_motor.c: 84:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6614   000ED8  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6615   000EDC  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6616   000EE0  50DF               	movf	indf2,w,c
  6617   000EE2  6E10               	movwf	??_setMotorPWM^0,c
  6618   000EE4  5010               	movf	??_setMotorPWM^0,w,c
  6619   000EE6  6E01               	movwf	___wmul@multiplier^0,c
  6620   000EE8  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6621   000EEA  EE20 F003          	lfsr	2,3
  6622   000EEE  500E               	movf	setMotorPWM@m^0,w,c
  6623   000EF0  26D9               	addwf	fsr2l,f,c
  6624   000EF2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6625   000EF4  22DA               	addwfc	fsr2h,f,c
  6626   000EF6  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6627   000EFA  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6628   000EFE  ECE4  F00F         	call	___wmul	;wreg free
  6629   000F02  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6630   000F06  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6631   000F0A  0E00               	movlw	0
  6632   000F0C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6633   000F0E  0E64               	movlw	100
  6634   000F10  6E09               	movwf	___lwdiv@divisor^0,c
  6635   000F12  ECC1  F00D         	call	___lwdiv	;wreg free
  6636   000F16  5007               	movf	?___lwdiv^0,w,c
  6637   000F18  6E13               	movwf	setMotorPWM@negDuty^0,c
  6638   000F1A                     l2360:
  6639                           
  6640                           ;dc_motor.c: 87:     if (m->direction) {
  6641   000F1A  EE20 F001          	lfsr	2,1
  6642   000F1E  500E               	movf	setMotorPWM@m^0,w,c
  6643   000F20  26D9               	addwf	fsr2l,f,c
  6644   000F22  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6645   000F24  22DA               	addwfc	fsr2h,f,c
  6646   000F26  50DF               	movf	indf2,w,c
  6647   000F28  B4D8               	btfsc	status,2,c
  6648   000F2A  EF99  F007         	goto	u1391
  6649   000F2E  EF9B  F007         	goto	u1390
  6650   000F32                     u1391:
  6651   000F32  EFBD  F007         	goto	l2364
  6652   000F36                     u1390:
  6653   000F36                     
  6654                           ;dc_motor.c: 88:         *(m->posDutyHighByte)=posDuty;
  6655   000F36  EE20 F005          	lfsr	2,5
  6656   000F3A  500E               	movf	setMotorPWM@m^0,w,c
  6657   000F3C  26D9               	addwf	fsr2l,f,c
  6658   000F3E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6659   000F40  22DA               	addwfc	fsr2h,f,c
  6660   000F42  CFDE F010          	movff	postinc2,??_setMotorPWM
  6661   000F46  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6662   000F4A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6663   000F4E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6664   000F52  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6665                           
  6666                           ;dc_motor.c: 89:         *(m->negDutyHighByte)=negDuty;
  6667   000F56  EE20 F007          	lfsr	2,7
  6668   000F5A  500E               	movf	setMotorPWM@m^0,w,c
  6669   000F5C  26D9               	addwf	fsr2l,f,c
  6670   000F5E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6671   000F60  22DA               	addwfc	fsr2h,f,c
  6672   000F62  CFDE F010          	movff	postinc2,??_setMotorPWM
  6673   000F66  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6674   000F6A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6675   000F6E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6676   000F72  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6677                           
  6678                           ;dc_motor.c: 90:     } else {
  6679   000F76  EFDD  F007         	goto	l221
  6680   000F7A                     l2364:
  6681                           
  6682                           ;dc_motor.c: 91:         *(m->posDutyHighByte)=negDuty;
  6683   000F7A  EE20 F005          	lfsr	2,5
  6684   000F7E  500E               	movf	setMotorPWM@m^0,w,c
  6685   000F80  26D9               	addwf	fsr2l,f,c
  6686   000F82  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6687   000F84  22DA               	addwfc	fsr2h,f,c
  6688   000F86  CFDE F010          	movff	postinc2,??_setMotorPWM
  6689   000F8A  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6690   000F8E  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6691   000F92  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6692   000F96  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6693                           
  6694                           ;dc_motor.c: 92:         *(m->negDutyHighByte)=posDuty;
  6695   000F9A  EE20 F007          	lfsr	2,7
  6696   000F9E  500E               	movf	setMotorPWM@m^0,w,c
  6697   000FA0  26D9               	addwf	fsr2l,f,c
  6698   000FA2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6699   000FA4  22DA               	addwfc	fsr2h,f,c
  6700   000FA6  CFDE F010          	movff	postinc2,??_setMotorPWM
  6701   000FAA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6702   000FAE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6703   000FB2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6704   000FB6  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6705   000FBA                     l221:
  6706   000FBA  0012               	return		;funcret
  6707   000FBC                     __end_of_setMotorPWM:
  6708                           	callstack 0
  6709                           
  6710 ;; *************** function ___wmul *****************
  6711 ;; Defined at:
  6712 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  multiplier      2    0[COMRAM] unsigned int 
  6715 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  product         2    4[COMRAM] unsigned int 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  2    0[COMRAM] unsigned int 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0, prodl, prodh
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6727 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6730 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6731 ;;Total ram usage:        6 bytes
  6732 ;; Hardware stack levels used: 1
  6733 ;; Hardware stack levels required when called: 2
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_get_color_distance
  6738 ;;		_get_color_code
  6739 ;;		_get_wall_presence
  6740 ;;		_setMotorPWM
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text37
  6745   001FC8                     __ptext37:
  6746                           	callstack 0
  6747   001FC8                     ___wmul:
  6748                           	callstack 26
  6749   001FC8  5001               	movf	___wmul@multiplier^0,w,c
  6750   001FCA  0203               	mulwf	___wmul@multiplicand^0,c
  6751   001FCC  CFF3 F005          	movff	prodl,___wmul@product
  6752   001FD0  CFF4 F006          	movff	prodh,___wmul@product+1
  6753   001FD4  5001               	movf	___wmul@multiplier^0,w,c
  6754   001FD6  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6755   001FD8  50F3               	movf	243,w,c
  6756   001FDA  2606               	addwf	(___wmul@product+1)^0,f,c
  6757   001FDC  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6758   001FDE  0203               	mulwf	___wmul@multiplicand^0,c
  6759   001FE0  50F3               	movf	243,w,c
  6760   001FE2  2606               	addwf	(___wmul@product+1)^0,f,c
  6761   001FE4  C005  F001         	movff	___wmul@product,?___wmul
  6762   001FE8  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6763   001FEC  0012               	return		;funcret
  6764   001FEE                     __end_of___wmul:
  6765                           	callstack 0
  6766                           
  6767 ;; *************** function ___lwdiv *****************
  6768 ;; Defined at:
  6769 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6770 ;; Parameters:    Size  Location     Type
  6771 ;;  dividend        2    6[COMRAM] unsigned int 
  6772 ;;  divisor         2    8[COMRAM] unsigned int 
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  quotient        2   10[COMRAM] unsigned int 
  6775 ;;  counter         1   12[COMRAM] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  2    6[COMRAM] unsigned int 
  6778 ;; Registers used:
  6779 ;;		wreg, status,2, status,0
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;Total ram usage:        7 bytes
  6790 ;; Hardware stack levels used: 1
  6791 ;; Hardware stack levels required when called: 2
  6792 ;; This function calls:
  6793 ;;		Nothing
  6794 ;; This function is called by:
  6795 ;;		_calibrate_black
  6796 ;;		_setMotorPWM
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text38
  6801   001B82                     __ptext38:
  6802                           	callstack 0
  6803   001B82                     ___lwdiv:
  6804                           	callstack 26
  6805   001B82  0E00               	movlw	0
  6806   001B84  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6807   001B86  0E00               	movlw	0
  6808   001B88  6E0B               	movwf	___lwdiv@quotient^0,c
  6809   001B8A  5009               	movf	___lwdiv@divisor^0,w,c
  6810   001B8C  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6811   001B8E  B4D8               	btfsc	status,2,c
  6812   001B90  EFCC  F00D         	goto	u1321
  6813   001B94  EFCE  F00D         	goto	u1320
  6814   001B98                     u1321:
  6815   001B98  EFF6  F00D         	goto	l958
  6816   001B9C                     u1320:
  6817   001B9C  0E01               	movlw	1
  6818   001B9E  6E0D               	movwf	___lwdiv@counter^0,c
  6819   001BA0  EFD6  F00D         	goto	l2304
  6820   001BA4                     l2302:
  6821   001BA4  90D8               	bcf	status,0,c
  6822   001BA6  3609               	rlcf	___lwdiv@divisor^0,f,c
  6823   001BA8  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6824   001BAA  2A0D               	incf	___lwdiv@counter^0,f,c
  6825   001BAC                     l2304:
  6826   001BAC  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6827   001BAE  EFDB  F00D         	goto	u1331
  6828   001BB2  EFDD  F00D         	goto	u1330
  6829   001BB6                     u1331:
  6830   001BB6  EFD2  F00D         	goto	l2302
  6831   001BBA                     u1330:
  6832   001BBA                     l2306:
  6833   001BBA  90D8               	bcf	status,0,c
  6834   001BBC  360B               	rlcf	___lwdiv@quotient^0,f,c
  6835   001BBE  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6836   001BC0  5009               	movf	___lwdiv@divisor^0,w,c
  6837   001BC2  5C07               	subwf	___lwdiv@dividend^0,w,c
  6838   001BC4  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6839   001BC6  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6840   001BC8  A0D8               	btfss	status,0,c
  6841   001BCA  EFE9  F00D         	goto	u1341
  6842   001BCE  EFEB  F00D         	goto	u1340
  6843   001BD2                     u1341:
  6844   001BD2  EFF0  F00D         	goto	l2314
  6845   001BD6                     u1340:
  6846   001BD6  5009               	movf	___lwdiv@divisor^0,w,c
  6847   001BD8  5E07               	subwf	___lwdiv@dividend^0,f,c
  6848   001BDA  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6849   001BDC  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6850   001BDE  800B               	bsf	___lwdiv@quotient^0,0,c
  6851   001BE0                     l2314:
  6852   001BE0  90D8               	bcf	status,0,c
  6853   001BE2  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6854   001BE4  3209               	rrcf	___lwdiv@divisor^0,f,c
  6855   001BE6  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6856   001BE8  EFDD  F00D         	goto	l2306
  6857   001BEC                     l958:
  6858   001BEC  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6859   001BF0  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6860   001BF4  0012               	return		;funcret
  6861   001BF6                     __end_of___lwdiv:
  6862                           	callstack 0
  6863                           
  6864 ;; *************** function _Interrupts_init *****************
  6865 ;; Defined at:
  6866 ;;		line 10 in file "interrupts.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;                  1    wreg      void 
  6873 ;; Registers used:
  6874 ;;		None
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used: 1
  6886 ;; Hardware stack levels required when called: 2
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_main
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text39
  6895   002052                     __ptext39:
  6896                           	callstack 0
  6897   002052                     _Interrupts_init:
  6898                           	callstack 28
  6899   002052                     
  6900                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6901   002052  8CF2               	bsf	242,6,c	;volatile
  6902                           
  6903                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6904   002054  010E               	movlb	14	; () banked
  6905   002056  8B29               	bsf	41,5,b	;volatile
  6906                           
  6907                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6908   002058  812B               	bsf	43,0,b	;volatile
  6909                           
  6910                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6911   00205A  8EF2               	bsf	242,7,c	;volatile
  6912   00205C                     
  6913                           ; BSR set to: 14
  6914   00205C  0012               	return		;funcret
  6915   00205E                     __end_of_Interrupts_init:
  6916                           	callstack 0
  6917                           
  6918 ;; *************** function _HighISR *****************
  6919 ;; Defined at:
  6920 ;;		line 22 in file "interrupts.c"
  6921 ;; Parameters:    Size  Location     Type
  6922 ;;		None
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;		None
  6925 ;; Return value:  Size  Location     Type
  6926 ;;                  1    wreg      void 
  6927 ;; Registers used:
  6928 ;;		wreg, status,2, status,0, cstack
  6929 ;; Tracked objects:
  6930 ;;		On entry : 0/0
  6931 ;;		On exit  : 0/0
  6932 ;;		Unchanged: 0/0
  6933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6937 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6938 ;;Total ram usage:        0 bytes
  6939 ;; Hardware stack levels used: 1
  6940 ;; Hardware stack levels required when called: 1
  6941 ;; This function calls:
  6942 ;;		_increment_seconds
  6943 ;; This function is called by:
  6944 ;;		Interrupt level 2
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           	psect	intcode
  6949   000008                     __pintcode:
  6950                           	callstack 0
  6951   000008                     _HighISR:
  6952                           	callstack 24
  6953                           
  6954                           ; BSR set to: 14
  6955                           ;incstack = 0
  6956   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6957   00000A                     
  6958                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6959   00000A  010E               	movlb	14	; () banked
  6960   00000C  AB33               	btfss	51,5,b	;volatile
  6961   00000E  EF0B  F000         	goto	i2u87_41
  6962   000012  EF0D  F000         	goto	i2u87_40
  6963   000016                     i2u87_41:
  6964   000016  EF15  F000         	goto	i2l400
  6965   00001A                     i2u87_40:
  6966   00001A                     
  6967                           ; BSR set to: 14
  6968                           ;interrupts.c: 25:     increment_seconds();
  6969   00001A  EC47  F010         	call	_increment_seconds	;wreg free
  6970   00001E                     
  6971                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6972   00001E  0EE7               	movlw	231
  6973   000020  6ED4               	movwf	212,c	;volatile
  6974   000022                     
  6975                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6976   000022  0E95               	movlw	149
  6977   000024  6ED3               	movwf	211,c	;volatile
  6978   000026                     
  6979                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6980   000026  010E               	movlb	14	; () banked
  6981   000028  9B33               	bcf	51,5,b	;volatile
  6982   00002A                     i2l400:
  6983                           
  6984                           ; BSR set to: 14
  6985   00002A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6986   00002C  0011               	retfie		f
  6987   00002E                     __end_of_HighISR:
  6988                           	callstack 0
  6989                           
  6990 ;; *************** function _increment_seconds *****************
  6991 ;; Defined at:
  6992 ;;		line 309 in file "dc_motor.c"
  6993 ;; Parameters:    Size  Location     Type
  6994 ;;		None
  6995 ;; Auto vars:     Size  Location     Type
  6996 ;;		None
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  1    wreg      void 
  6999 ;; Registers used:
  7000 ;;		status,2, status,0
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7010 ;;Total ram usage:        0 bytes
  7011 ;; Hardware stack levels used: 1
  7012 ;; This function calls:
  7013 ;;		Nothing
  7014 ;; This function is called by:
  7015 ;;		_HighISR
  7016 ;; This function uses a non-reentrant model
  7017 ;;
  7018                           
  7019                           	psect	text41
  7020   00208E                     __ptext41:
  7021                           	callstack 0
  7022   00208E                     _increment_seconds:
  7023                           	callstack 24
  7024   00208E                     
  7025                           ;dc_motor.c: 311:     seconds += 1;
  7026   00208E  4A5D               	infsnz	_seconds^0,f,c
  7027   002090  2A5E               	incf	(_seconds+1)^0,f,c
  7028   002092  0012               	return		;funcret
  7029   002094                     __end_of_increment_seconds:
  7030                           	callstack 0
  7031   000000                     
  7032                           	psect	rparam
  7033   000000                     
  7034                           	psect	temp
  7035   00005F                     btemp:
  7036                           	callstack 0
  7037   00005F                     	ds	1
  7038   000000                     int$flags	set	btemp
  7039   000000                     wtemp8	set	btemp+1
  7040   000000                     ttemp5	set	btemp+1
  7041   000000                     ttemp6	set	btemp+4
  7042   000000                     ttemp7	set	btemp+8
  7043                           
  7044                           	psect	idloc
  7045                           
  7046                           ;Config register IDLOC0 @ 0x200000
  7047                           ;	unspecified, using default values
  7048   200000                     	org	2097152
  7049   200000  0FFF               	dw	4095
  7050                           
  7051                           ;Config register IDLOC1 @ 0x200002
  7052                           ;	unspecified, using default values
  7053   200002                     	org	2097154
  7054   200002  0FFF               	dw	4095
  7055                           
  7056                           ;Config register IDLOC2 @ 0x200004
  7057                           ;	unspecified, using default values
  7058   200004                     	org	2097156
  7059   200004  0FFF               	dw	4095
  7060                           
  7061                           ;Config register IDLOC3 @ 0x200006
  7062                           ;	unspecified, using default values
  7063   200006                     	org	2097158
  7064   200006  0FFF               	dw	4095
  7065                           
  7066                           ;Config register IDLOC4 @ 0x200008
  7067                           ;	unspecified, using default values
  7068   200008                     	org	2097160
  7069   200008  0FFF               	dw	4095
  7070                           
  7071                           ;Config register IDLOC5 @ 0x20000A
  7072                           ;	unspecified, using default values
  7073   20000A                     	org	2097162
  7074   20000A  0FFF               	dw	4095
  7075                           
  7076                           ;Config register IDLOC6 @ 0x20000C
  7077                           ;	unspecified, using default values
  7078   20000C                     	org	2097164
  7079   20000C  0FFF               	dw	4095
  7080                           
  7081                           ;Config register IDLOC7 @ 0x20000E
  7082                           ;	unspecified, using default values
  7083   20000E                     	org	2097166
  7084   20000E  0FFF               	dw	4095
  7085                           
  7086                           	psect	config
  7087                           
  7088                           ;Config register CONFIG1L @ 0x300000
  7089                           ;	External Oscillator mode Selection bits
  7090                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7091                           ;	Power-up default value for COSC bits
  7092                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7093   300000                     	org	3145728
  7094   300000  AA                 	db	170
  7095                           
  7096                           ;Config register CONFIG1H @ 0x300001
  7097                           ;	unspecified, using default values
  7098                           ;	Clock Out Enable bit
  7099                           ;	CLKOUTEN = 0x1, unprogrammed default
  7100                           ;	Clock Switch Enable bit
  7101                           ;	CSWEN = 0x1, unprogrammed default
  7102                           ;	Fail-Safe Clock Monitor Enable bit
  7103                           ;	FCMEN = 0x1, unprogrammed default
  7104   300001                     	org	3145729
  7105   300001  FF                 	db	255
  7106                           
  7107                           ;Config register CONFIG2L @ 0x300002
  7108                           ;	unspecified, using default values
  7109                           ;	Master Clear Enable bit
  7110                           ;	MCLRE = 0x1, unprogrammed default
  7111                           ;	Power-up Timer Enable bit
  7112                           ;	PWRTE = 0x1, unprogrammed default
  7113                           ;	Low-power BOR enable bit
  7114                           ;	LPBOREN = 0x1, unprogrammed default
  7115                           ;	Brown-out Reset Enable bits
  7116                           ;	BOREN = 0x3, unprogrammed default
  7117   300002                     	org	3145730
  7118   300002  FF                 	db	255
  7119                           
  7120                           ;Config register CONFIG2H @ 0x300003
  7121                           ;	unspecified, using default values
  7122                           ;	Brown Out Reset Voltage selection bits
  7123                           ;	BORV = 0x3, unprogrammed default
  7124                           ;	ZCD Disable bit
  7125                           ;	ZCD = 0x1, unprogrammed default
  7126                           ;	PPSLOCK bit One-Way Set Enable bit
  7127                           ;	PPS1WAY = 0x1, unprogrammed default
  7128                           ;	Stack Full/Underflow Reset Enable bit
  7129                           ;	STVREN = 0x1, unprogrammed default
  7130                           ;	Debugger Enable bit
  7131                           ;	DEBUG = 0x1, unprogrammed default
  7132                           ;	Extended Instruction Set Enable bit
  7133                           ;	XINST = 0x1, unprogrammed default
  7134   300003                     	org	3145731
  7135   300003  FF                 	db	255
  7136                           
  7137                           ;Config register CONFIG3L @ 0x300004
  7138                           ;	WDT Period Select bits
  7139                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7140                           ;	WDT operating mode
  7141                           ;	WDTE = OFF, WDT Disabled
  7142   300004                     	org	3145732
  7143   300004  9F                 	db	159
  7144                           
  7145                           ;Config register CONFIG3H @ 0x300005
  7146                           ;	unspecified, using default values
  7147                           ;	WDT Window Select bits
  7148                           ;	WDTCWS = 0x7, unprogrammed default
  7149                           ;	WDT input clock selector
  7150                           ;	WDTCCS = 0x7, unprogrammed default
  7151   300005                     	org	3145733
  7152   300005  FF                 	db	255
  7153                           
  7154                           ;Config register CONFIG4L @ 0x300006
  7155                           ;	unspecified, using default values
  7156                           ;	Write Protection Block 0
  7157                           ;	WRT0 = 0x1, unprogrammed default
  7158                           ;	Write Protection Block 1
  7159                           ;	WRT1 = 0x1, unprogrammed default
  7160                           ;	Write Protection Block 2
  7161                           ;	WRT2 = 0x1, unprogrammed default
  7162                           ;	Write Protection Block 3
  7163                           ;	WRT3 = 0x1, unprogrammed default
  7164                           ;	Write Protection Block 3
  7165                           ;	WRT4 = 0x1, unprogrammed default
  7166                           ;	Write Protection Block 3
  7167                           ;	WRT5 = 0x1, unprogrammed default
  7168                           ;	Write Protection Block 3
  7169                           ;	WRT6 = 0x1, unprogrammed default
  7170                           ;	Write Protection Block 3
  7171                           ;	WRT7 = 0x1, unprogrammed default
  7172   300006                     	org	3145734
  7173   300006  FF                 	db	255
  7174                           
  7175                           ;Config register CONFIG4H @ 0x300007
  7176                           ;	unspecified, using default values
  7177                           ;	Configuration Register Write Protection bit
  7178                           ;	WRTC = 0x1, unprogrammed default
  7179                           ;	Boot Block Write Protection bit
  7180                           ;	WRTB = 0x1, unprogrammed default
  7181                           ;	Data EEPROM Write Protection bit
  7182                           ;	WRTD = 0x1, unprogrammed default
  7183                           ;	Scanner Enable bit
  7184                           ;	SCANE = 0x1, unprogrammed default
  7185                           ;	Low Voltage Programming Enable bit
  7186                           ;	LVP = 0x1, unprogrammed default
  7187   300007                     	org	3145735
  7188   300007  FF                 	db	255
  7189                           
  7190                           ;Config register CONFIG5L @ 0x300008
  7191                           ;	unspecified, using default values
  7192                           ;	UserNVM Program Memory Code Protection bit
  7193                           ;	CP = 0x1, unprogrammed default
  7194                           ;	DataNVM Memory Code Protection bit
  7195                           ;	CPD = 0x1, unprogrammed default
  7196   300008                     	org	3145736
  7197   300008  FF                 	db	255
  7198                           
  7199                           ;Config register CONFIG5H @ 0x300009
  7200                           ;	unspecified, using default values
  7201   300009                     	org	3145737
  7202   300009  FF                 	db	255
  7203                           
  7204                           ;Config register CONFIG6L @ 0x30000A
  7205                           ;	unspecified, using default values
  7206                           ;	Table Read Protection Block 0
  7207                           ;	EBTR0 = 0x1, unprogrammed default
  7208                           ;	Table Read Protection Block 1
  7209                           ;	EBTR1 = 0x1, unprogrammed default
  7210                           ;	Table Read Protection Block 2
  7211                           ;	EBTR2 = 0x1, unprogrammed default
  7212                           ;	Table Read Protection Block 3
  7213                           ;	EBTR3 = 0x1, unprogrammed default
  7214                           ;	Table Read Protection Block 4
  7215                           ;	EBTR4 = 0x1, unprogrammed default
  7216                           ;	Table Read Protection Block 5
  7217                           ;	EBTR5 = 0x1, unprogrammed default
  7218                           ;	Table Read Protection Block 6
  7219                           ;	EBTR6 = 0x1, unprogrammed default
  7220                           ;	Table Read Protection Block 7
  7221                           ;	EBTR7 = 0x1, unprogrammed default
  7222   30000A                     	org	3145738
  7223   30000A  FF                 	db	255
  7224                           
  7225                           ;Config register CONFIG6H @ 0x30000B
  7226                           ;	unspecified, using default values
  7227                           ;	Boot Block Table Read Protection bit
  7228                           ;	EBTRB = 0x1, unprogrammed default
  7229   30000B                     	org	3145739
  7230   30000B  FF                 	db	255
  7231                           tosu	equ	0xFFF
  7232                           tosh	equ	0xFFE
  7233                           tosl	equ	0xFFD
  7234                           stkptr	equ	0xFFC
  7235                           pclatu	equ	0xFFB
  7236                           pclath	equ	0xFFA
  7237                           pcl	equ	0xFF9
  7238                           tblptru	equ	0xFF8
  7239                           tblptrh	equ	0xFF7
  7240                           tblptrl	equ	0xFF6
  7241                           tablat	equ	0xFF5
  7242                           prodh	equ	0xFF4
  7243                           prodl	equ	0xFF3
  7244                           indf0	equ	0xFEF
  7245                           postinc0	equ	0xFEE
  7246                           postdec0	equ	0xFED
  7247                           preinc0	equ	0xFEC
  7248                           plusw0	equ	0xFEB
  7249                           fsr0h	equ	0xFEA
  7250                           fsr0l	equ	0xFE9
  7251                           wreg	equ	0xFE8
  7252                           indf1	equ	0xFE7
  7253                           postinc1	equ	0xFE6
  7254                           postdec1	equ	0xFE5
  7255                           preinc1	equ	0xFE4
  7256                           plusw1	equ	0xFE3
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           bsr	equ	0xFE0
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           preinc2	equ	0xFDC
  7264                           plusw2	equ	0xFDB
  7265                           fsr2h	equ	0xFDA
  7266                           fsr2l	equ	0xFD9
  7267                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        132
    BSS         338
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      94
    BANK0           160     44     156
    BANK1           256      0     144
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _return_back->_turnLeft
    _return_back->_turnLeftLong
    _return_back->_turnRight
    _return_back->_turnRightLong
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   99839
                                             56 COMRAM    24    24      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                  _get_wall_presence
                    _initDCmotorsPWM
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   35121
                                             29 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4393
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   35795
                                             29 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                       10     6      4    4751
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    5207
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                        10     6      4    4752
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    4904
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    5023
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    5023
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3957
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      5E       1      100.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     252      60        0.0%
DATA                 0      0     252       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 15:23:51 2022

               _color_read_Red 1D1E             RobotMovement@color 001E                _color_read_Blue 1E0E  
                           l71 174E                             l73 1784                             l82 200C  
                           l74 1764                             l91 1DBC                             l67 1732  
                           l85 1D6C                             l77 1776                             l94 1E0C  
                           l88 1E5C            ___wmul@multiplicand 0003               _color_read_Clear 1DBE  
             ?_calibrate_black 0001               _color_read_Green 1D6E            RobotMovement@motorL 0020  
          RobotMovement@motorR 0022              ??_Interrupts_init 0001                            l112 1F04  
                          l113 1F06                            l114 1F1A                            l115 1F1C  
                          l116 1F30                            l221 0FBA                            l141 164C  
                          l109 0E4E                            l118 1F32                            l214 1A98  
                          l311 1EEE                            l224 1EA6                            l304 057E  
                          l144 182E                            l136 0914                            l233 126E  
                          l242 150E                            l138 091C                            l314 0B1C  
                          l251 1114                            l307 2066                            l147 196E  
                          l260 13BE                            l501 18D2                            l263 1D1C  
                          l319 0B02                            l329 0B50                            l290 02A4  
                          l362 1FC6                            l275 1B0C                            l371 2070  
                          l356 1F9E                            l269 1B80                            l365 207A  
                          l374 2050                            l359 1FA0                            l296 042C  
                          l464 202C                            l368 2084                            l448 0CDC  
                          l377 1F74                            l394 205C                            l467 1FEC  
                          l494 18C2                            l478 1C4E                            l479 1C5E  
                          l965 1BF4                            l958 1BEC                            _RGB 00F0  
             ?_calibrate_white 0001                            wreg 000FE8                           l3000 0508  
                         l3010 0528                           l2300 1B9C                           l3012 0544  
                         l3020 1EA8                           l3100 0B94                           l2310 1BD6  
                         l2302 1BA4                           l3006 0510                           l3014 054C  
                         l3022 1EC4                           l3030 0948                           l3110 0BB0  
                         l3102 0B98                           l2312 1BDE                           l2304 1BAC  
                         l3016 0562                           l3008 0524                           l3024 1EEA  
                         l2320 1D64                           l2400 151C                           l3040 09E0  
                         l3032 0960                           l3120 0C06                           l3112 0BB8  
                         l3104 0B9C                           l2314 1BE0                           l2306 1BBA  
                         l2330 1D6E                           l2410 1584                           l2402 1532  
                         l3018 205E                           l3050 0AAE                           l3042 0A08  
                         l3034 0988                           l3026 091E                           l3130 0C58  
                         l3122 0C18                           l3114 0BD0                           l3106 0BA0  
                         l2316 1BE6                           l2308 1BC0                           l2500 11FA  
                         l2260 2072                           l2324 1E0E                           l2332 1DB4  
                         l2420 15E6                           l2412 159A                           l2404 1544  
                         l3060 0B36                           l3052 0AC6                           l3044 0A20  
                         l3036 09A0                           l3028 0922                           l3132 0C74  
                         l3124 0C1C                           l3116 0BE4                           l3108 0BA8  
                         l2350 0E50                           l2510 124E                           l2502 1206  
                         l3070 2028                           l2262 2076                           l2270 206C  
                         l2326 1E54                           l2318 1D1E                           l2342 1EF0  
                         l2422 15FC                           l2414 15AC                           l2406 1550  
                         l2430 0D02                           l3062 0B48                           l3054 0AE2  
                         l3046 0A50                           l3038 09C8                           l3134 0C86  
                         l3126 0C30                           l3118 0BF0                           l3064 2052  
                         l2360 0F1A                           l2352 0E6C                           l2512 1252  
                         l2504 1212                           l2520 13C8                           l3072 202A  
                         l2256 1FA0                           l2280 1F42                           l2272 207C  
                         l2264 2048                           l2336 1DBE                           l2344 1EFE  
                         l2424 1614                           l2416 15CE                           l2408 1578  
                         l2440 0D90                           l2432 0D1E                           l3048 0A80  
                         l3056 0B02                           l3128 0C3C                           l3136 0CB2  
                         l3080 0B66                           l2290 1FC8                           l2362 0F36  
                         l2354 0EC0                           l2506 122A                           l2610 10AC  
                         l2602 1068                           l2530 13FC                           l2514 13C0  
                         l3066 200E                           l2370 1F86                           l2258 1FB0  
                         l2282 1F4A                           l2274 2080                           l2266 204C  
                         l2338 1E04                           l2346 1F14                           l2426 1630  
                         l2418 15DA                           l2442 0DB6                           l2434 0D36  
                         l3058 0B16                           l3138 0CC4                           l3090 0B74  
                         l3082 0B66                           l3074 0B52                           l2292 1FE4  
                         l2364 0F7A                           l2356 0ED4                           l2700 1AEA  
                         l2452 1E5E                           l2508 1232                           l2460 1116  
                         l2620 10F8                           l2612 10B8                           l2604 1088  
                         l2540 1440                           l2532 1408                           l3068 2016  
                         l2372 1F88                           l2284 1F70                           l2276 1F36  
                         l2268 2068                           l2348 1F2A                           l2380 1786  
                         l2444 0DD2                           l2436 0D5C                           l2428 0CE4  
                         l3092 0B78                           l3084 0B6A                           l3076 0B56  
                         l2358 0ED8                           l2702 1AF6                           l2454 1E76  
                         l2614 10D0                           l2606 1094                           l2550 1484  
                         l2542 145C                           l2534 1414                           l2526 13D0  
                         l2622 1270                           l2374 1F8A                           l2366 1F76  
                         l2286 1F72                           l2278 1F3A                           l2390 17EE  
                         l2382 1792                           l2710 1C24                           l2446 0DEA  
                         l2438 0D78                           l3094 0B7C                           l3086 0B6E  
                         l3078 0B5A                           l2296 1B82                           l2456 1E82  
                         l2480 1172                           l2472 112E                           l2616 10D8  
                         l2608 10A0                           l2560 14CA                           l2552 1490  
                         l2536 1420                           l2528 13F0                           l2640 12B8  
                         l2376 1F8C                           l2368 1F80                           l2392 17FA  
                         l2384 17A8                           l2720 185E                           l2712 1C2E  
                         l2704 1BF6                           l2448 0DF2                           l2800 060A  
                         l3096 0B84                           l3088 0B70                           l2298 1B8A  
                         l2458 1E8E                           l2482 117E                           l2474 114E  
                         l2466 1126                           l2618 10F4                           l2562 14D2  
                         l2554 149C                           l2538 1438                           l2650 130C  
                         l2642 12C4                           l2634 1280                           l2394 1810  
                         l2386 17BA                           l2378 1FF0                           l2730 18B0  
                         l2722 186A                           l2714 1830                           l2706 1C06  
                         l2810 06C6                           l2802 061C                           l3098 0B8C  
                         l2484 1196                           l2476 115A                           l2580 0FD4  
                         l2564 14EE                           l2556 14A8                           l2548 1464  
                         l2660 1340                           l2644 12D0                           l2636 12A0  
                         l2628 1278                           l2396 1822                           l2388 17C6  
                         l2740 165C                           l2900 1D10                           l2732 18B2  
                         l2724 1878                           l2716 1840                           l2708 1C14  
                         l2820 0784                           l2812 06D6                           l2804 0628  
                         l2494 11C2                           l2486 119E                           l2478 1166  
                         l2590 1024                           l2582 0FF4                           l2574 0FCC  
                         l2566 14F2                           l2558 14B4                           l2670 1382  
                         l2662 134C                           l2646 12E8                           l2638 12AC  
                         l2910 00A2                           l2902 0032                           l2398 1510  
                         l2750 1684                           l2742 166C                           l2734 18BC  
                         l2726 1882                           l2718 1856                           l2830 0862  
                         l2822 07A4                           l2814 06F6                           l2806 0648  
                         l2680 1B3A                           l2496 11E2                           l2488 11BA  
                         l2592 103C                           l2584 1000                           l2568 0FBC  
                         l2672 139E                           l2664 1358                           l2656 1314  
                         l2648 12F0                           l2920 00EA                           l2912 00A6  
                         l2904 0062                           l2760 16CE                           l2752 1686  
                         l2744 1676                           l2736 164E                           l2728 18A0  
                         l2840 08A2                           l2832 086C                           l2824 07B8  
                         l2816 070A                           l2808 065C                           l2682 1B46  
                         l2690 1A9A                           l2498 11EE                           l2594 1044  
                         l2586 100C                           l2674 13A2                           l2666 1364  
                         l2658 1334                           l2930 011A                           l2922 00FE  
                         l2914 00B8                           l2906 0074                           l2770 1728  
                         l2762 16E0                           l2754 1698                           l2746 1680  
                         l2738 1652                           l2842 08D2                           l2826 0822  
                         l2818 0774                           l2850 18D4                           l2684 1B52  
                         l2676 1B0E                           l2692 1AA6                           l2596 1060  
                         l2588 1018                           l2668 137A                           l2940 016C  
                         l2932 0134                           l2916 00CC                           l2908 0088  
                         l2772 172A                           l2764 16F2                           l2756 16AA  
                         l2748 1682                           l2844 08EA                           l2828 0832  
                         l2860 1930                           l2852 18E0                           l2686 1B5E  
                         l2678 1B1A                           l2694 1AC6                           l2950 0244  
                         l2942 01B0                           l2934 0138                           l2918 00E6  
                         l2782 1760                           l2774 172E                           l2766 1704  
                         l2758 16BC                           l2846 08FA                           l2838 0874  
                         l2790 05A2                           l2862 193C                           l2854 18F6  
                         l2870 1A44                           l2688 1B6A                           l2696 1AD2  
                         l2952 0262                           l2944 01E2                           l2960 02E0  
                         l2936 013C                           l2928 0106                           l2784 1772  
                         l2776 1730                           l2768 1716                           l2848 08FE  
                         l2792 05B4                           l2856 1902                           l2880 1A80  
                         l2872 1A68                           l2698 1ADE                           l2970 03A6  
                         l2962 02F4                           l2954 028A                           l2946 0216  
                         l2938 0158                           l2778 1740                           l2890 1CCC  
                         l2794 05C0                           l2786 0580                           l2858 190E  
                         l2882 1A8A                           l2874 1A72                           l2866 1A0A  
                         l2980 044A                           l2972 03CC                           l2964 0338  
                         l2956 02BE                           l2948 021E                           l2892 1CDC  
                         l2796 05E8                           l2788 058C                           l2884 1A8C  
                         l2876 1A74                           l2868 1A1A                           l2990 04AE  
                         l2974 03EA                           l2966 036A                           l2982 0468  
                         l2958 02C2                           l2894 1CEC                           l2798 05F4  
                         l2886 1A96                           l2878 1A7E                           l2992 04C2  
                         l2984 047C                           l2976 0412                           l2968 039E  
                         l2896 1CF8                           l2888 1CC4                           l2994 04D6  
                         l2986 0490                           l2978 0446                           l2898 1D04  
                         l2996 04F0                           l2988 04AA                           l2998 04F4  
                         u2000 047C                           u2001 0478                           u2010 04C2  
                         u2011 04BE                           u2020 0508                           u1300 1F5E  
                         u2100 0A50                           u2021 0504                           u1301 1F56  
                         u2101 0A4C                           u2030 0544                           u2110 0A80  
                         u2031 0540                           u2111 0A7C                           u1320 1B9C  
                         u2040 0562                           u1400 0D02                           u2120 0B36  
                         u1321 1B98                           u2041 055E                           u1401 0CFE  
                         u2121 0B32                           u1330 1BBA                           u2050 1EC4  
                         u1410 0D5C                           u2130 0B48                           u1331 1BB6  
                         u2051 1EC0                           u1411 0D58                           u2131 0B44  
                         u1340 1BD6                           u1500 10F4                           u1420 0DB6  
                         u2060 0948                           u2140 0C06                           u1341 1BD2  
                         u1501 10F0                           u1421 0DB2                           u2061 0944  
                         u2141 0C02                           u1430 11BA                           u1510 1114  
                         u1318 1F60                           u1350 1EFE                           u2070 0988  
                         u2150 0C18                           u1431 11B6                           u1511 1110  
                         u1351 1EFA                           u2071 0984                           u2151 0C14  
                         u1440 124E                           u1520 130C                           u1280 1FB0  
                         u1360 1F14                           u1600 1878                           u2080 09C8  
                         u2160 0C86                           u1441 124A                           u1521 1308  
                         u1281 1FAC                           u1361 1F10                           u1601 1874  
                         u2081 09C4                           u2161 0C82                           u1450 126E  
                         u1530 139E                           u1290 1FC6                           u1370 1F2A  
                         u1610 18A0                           u2090 0A08                           u2170 0CC4  
                         u1451 126A                           u1531 139A                           u1291 1FC2  
                         u1371 1F26                           u1611 189C                           u2091 0A04  
                         u2171 0CC0                           u1380 0E6C                           u1460 145C  
                         u1540 13BE                           u1381 0E68                           u1461 1458  
                         u1541 13BA                           u1701 1720                           u1621 1690  
                         u1390 0F36                           u1550 1B80                           u1470 14EE  
                         u1710 1740                           u1391 0F32                           u1551 1B7C  
                         u1471 14EA                           u1711 173C                           u1631 16A2  
                         u1560 1B0C                           u1480 150E                           u1720 174E  
                         u1561 1B08                           u1481 150A                           u1721 174A  
                         u1641 16B4                           u1801 084E                           u1490 1060  
                         u1730 175C                           u1570 1C14                           _T2PR 000FBC  
                   _Black_rule 016C                           u1491 105C                           u1731 1758  
                         u1651 16C6                           u1571 1C10                           u1811 089A  
                         u1900 00FE                           u1740 1772                           u1580 1C4E  
                         u1901 00FA                           u1741 176E                           u1661 16D8  
                         u1581 1C4A                           u1821 08AC                           u1910 0158  
                         u1750 1784                           u1590 1856                           u1911 0154  
                         u1751 1780                           u1671 16EA                           u1591 1852  
                         u1831 08BE                           u2607 05FE                           u1920 016C  
                         u1840 08EA                           u1760 0648                           u1921 0168  
                         u1681 16FC                           u2617 1662                           u1841 08E6  
                         u1761 0644                           u1930 01E2                           u1850 0914  
                         u1770 06F6                           u2707 12DA                           u1931 01DE  
                         u2627 179C                           u1691 170E                           u1851 0910  
                         u1771 06F2                           u2547 0BC2                           u1940 0244  
                         u1780 07A4                           u1860 1968                           u2717 136E  
                         u1941 0240                           u2637 17D0                           u1781 07A0  
                         u1861 1962                           u2557 0AB8                           u1950 028A  
                         u1870 196A                           u2727 142A                           u1951 0286  
                         u2647 1804                           u1791 083C                           u2567 18EA  
                         u1960 02F4                           u1880 0074                           u2737 14BE  
                         u1961 02F0                           u1881 0070                           u2657 1526  
                         u2577 1918                           u1970 036A                           u1890 00B8  
                         u2747 102E                           u1971 0366                           u1891 00B4  
                         u2667 155A                           u2587 0596                           u1980 03CC  
                         u2757 10C2                           u1981 03C8                           u2677 158E  
                         u2597 05CA                           u1990 0412                           u2767 1188  
                         u1991 040E                           u2687 15C2                           u2777 121C  
                         u2697 15F0                           u2787 1E98                           _main 0B52  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 005F                           _stop 1E5E  
                         prodh 000FF4                           prodl 000FF3                           start 002E  
       __end_of_color_read_Red 1D6E                __end_of_HighISR 002E                   ___param_bank 000000  
           _get_color_code$460 00D8             _get_color_code$458 00D0             _get_color_code$459 00D4  
                        ?_main 0001                __end_of___lldiv 18D4                          ?_stop 0014  
          _add_seconds_to_list 1EA8                    _Black_setup 0060                __end_of___lwdiv 1BF6  
                        i2l400 002A                          i2l278 2092                          _TMR0H 000FD4  
                        _TMR0L 000FD3            ___lmul@multiplicand 0005     __end_of_I2C_2_Master_Start 207C  
   __end_of_I2C_2_Master_Write 2052             _get_color_distance 0CE4                          _index 005B  
                        _state 0059                          tablat 000FF5                          plusw0 000FEB  
                        plusw1 000FE3                          plusw2 000FDB            ?_get_color_distance 0007  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 000FD8                          wtemp8 0060           ?_add_seconds_to_list 0001  
                   _Green_rule 00A8        __end_of_color_read_Blue 1E5E          _I2C_2_Master_RepStart 207C  
              ?_color_read_Red 0005                __initialization 1970                   __end_of_main 0CE4  
                 __end_of_stop 1EA8                   _turnLeftLong 0FBC           ??_get_color_distance 001F  
                       ??_main 0039                         ??_stop 0018                  __activetblptr 000000  
          _get_color_code$2447 00C4                   ?_setMotorPWM 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         i2l1960 000A  
                       i2l1786 208E                         i2l1962 001A                         i2l1964 001E  
                       i2l1966 0022                         i2l1968 0026                         _RG6PPS 000E88  
                    ??_HighISR 0001       __end_of_color_click_init 1786          ??_add_seconds_to_list 0001  
               RobotMovement@i 0026          __end_of_RobotMovement 0580               ??_get_color_code 0037  
                ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD                         ___lmul 1BF6  
     get_color_distance@color1 0007       get_color_distance@color2 0013                         ___wmul 1FC8  
                    ??___lldiv 0015                      ??___lwdiv 000B                    _Color_rules 0100  
                       clear_0 19D6                         clear_1 19E2                         clear_2 19EE  
                       isa$std 000001               __end_of_moveBack 1B0E          calibrate_black@clear1 0010  
        calibrate_black@clear2 0012                   __pdataCOMRAM 0051                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                   ?_return_back 001E  
               _Lightblue_rule 0184                     _White_rule 0178                         stop@mL 0014  
                       stop@mR 0016              ??_initDCmotorsPWM 0003               __end_of_turnLeft 1270  
        __end_of_set_led_color 1F34                     __accesstop 0060        __end_of__initialization 1A00  
     __end_of_color_read_Clear 1E0E        get_wall_presence@clear1 0010        get_wall_presence@clear2 0012  
     __end_of_color_read_Green 1DBE         ?_I2C_2_Master_RepStart 0001                  ___rparam_used 000001  
             ?_color_read_Blue 0005                _Interrupts_init 2052                 __pcstackCOMRAM 0001  
                 __pidataBANK0 1C60                   __pidataBANK1 202E            __end_of_Timer0_init 202E  
                   __pbssBANK0 00F0                     __pbssBANK1 0100                     __pbssBANK2 0200  
                _turnRightLong 1270              _color_writetoaddr 1FEE                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?___wmul 0001  
               main@color_code 003B                     _blockahead 0053                 ___lmul@product 0009  
              get_color_code@i 00E2            ??_color_writetoaddr 0004              return_back@motorL 001E  
            return_back@motorR 0020        get_color_code@min_index 00DE                        i2u87_40 001A  
                      i2u87_41 0016                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      get_color_code@min_value 00DC              _get_wall_presence 18D4                    _Orange_rule 0078  
           ?_get_wall_presence 000C        __end_of_Interrupts_init 205E         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        _HighISR 0008      __end_of_color_writetoaddr 200E  
               ?_turnRightLong 0014             _I2C_2_Master_Start 2072             _I2C_2_Master_Write 2046  
                    ?_moveBack 0014                        __Hparam 0000            ??_get_wall_presence 000E  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 200E  
            __end_of_get_state 2068                        ___lldiv 1830            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 1B82            ?_I2C_2_Master_Write 0001                        __pcinit 1970  
                      __ramtop 0E00                      ?_turnLeft 0014                        __ptext0 0B52  
                      __ptext1 091E                        __ptext2 1A0A                        __ptext3 18D4  
                      __ptext4 205E                        __ptext5 0580                        __ptext6 0CE4  
                      __ptext7 1BF6                        __ptext8 1830                        __ptext9 1CC4  
                    _T2CONbits 000FBD                        _seconds 005D                      _T2HLTbits 000FBE  
    __end_of_get_wall_presence 1970           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 1A00              ?_color_click_init 0001                     ??_moveBack 001A  
              ___lldiv@divisor 0011             ??_color_click_init 0016                ___lldiv@counter 0019  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                    _White_setup 006C                _initDCmotorsPWM 1A0A  
                   ??_turnLeft 0018                      _PORTFbits 000F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 1510                    _Yellow_rule 0090                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
         _calibrate_black$2448 0014    __end_of_add_seconds_to_list 1EF0               fullSpeedAhead@mL 0014  
             fullSpeedAhead@mR 0016       color_writetoaddr@address 0004     get_color_distance@B_offset 0033  
      ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001                ??_turnRightLong 0018  
                  _CCP1CONbits 000FAB     get_color_distance@G_offset 0031              _increment_seconds 208E  
            ?_color_read_Clear 0005                    _CCP2CONbits 000FA7              ??_calibrate_black 000E  
            ?_color_read_Green 0005                    _CCP3CONbits 000F26                    _CCP4CONbits 000F22  
                   main@motorL 003F                     main@motorR 0048              ??_calibrate_white 000C  
           ?_increment_seconds 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
               _fullSpeedAhead 1CC4     get_color_distance@R_offset 002F                      _Blue_rule 009C  
          ??_increment_seconds 0001                 __end_of___lmul 1C60                 __end_of___wmul 1FEE  
                __pidataCOMRAM 2086            color_read_Clear@tmp 000A            start_initialization 1970  
          _TimedfullSpeedAhead 1B0E      __end_of_increment_seconds 2094                      _Pink_rule 0084  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1A9A           ?_TimedfullSpeedAhead 0014  
       __end_of_fullSpeedAhead 1D1E                       ??___lmul 0009                       ??___wmul 0005  
                  __pdataBANK0 0060                    __pdataBANK1 0178         _get_color_distance$421 002B  
       _get_color_distance$417 0023         _get_color_distance$419 0027                    __pbssCOMRAM 0059  
                __pcstackBANK0 00C4            get_color_code@value 00E0                       ?_HighISR 0001  
                _RobotMovement 0032               ___lwdiv@dividend 0007          ??_TimedfullSpeedAhead 001A  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0014                     moveBack@mL 0014  
                   moveBack@mR 0016                      __pintcode 0008                      _blockback 0051  
                     ?___lldiv 000D                       ?___lwdiv 0007                  ?_turnLeftLong 0014  
                 moveBack@time 0018                      _get_state 205E           I2C_2_Master_Read@ack 0003  
         I2C_2_Master_Read@tmp 0004          TimedfullSpeedAhead@mL 0014          TimedfullSpeedAhead@mR 0016  
  get_color_code@NormalizedRGB 00E4              _I2C_2_Master_Idle 1FA0              _I2C_2_Master_Init 1F76  
            _I2C_2_Master_Read 1F34              _I2C_2_Master_Stop 2068             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001  
              turnRightLong@mL 0014                turnRightLong@mR 0016                 turnLeftLong@mL 0014  
               turnLeftLong@mR 0016            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 000F79  
                _set_led_color 1EF0            ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B  
                     _LATEbits 000F7D                       _LATFbits 000F7E                       _LATGbits 000F7F  
                     _PIE0bits 000E29                 ?_RobotMovement 001E                       _PIE2bits 000E2B  
                  turnRight@mL 0014                    turnRight@mR 0016                       _PIR0bits 000E33  
             ?_initDCmotorsPWM 0001                      _wall_coef 0057                      _wait_time 0055  
                     _SSP2CON2 000EDA                 ??_turnLeftLong 0018                       _SSP2STAT 000ED8  
           set_led_color@color 0001                     ?_get_state 0001      __end_of_I2C_2_Master_Idle 1FC8  
    __end_of_I2C_2_Master_Init 1FA0      __end_of_I2C_2_Master_Read 1F76              ___wmul@multiplier 0001  
    __end_of_I2C_2_Master_Stop 2072                   setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002  
                _movement_list 0200                      main@state 003D              ??_color_read_Blue 0007  
                ??_return_back 0022                _calibrate_black 1510        TimedfullSpeedAhead@time 0018  
                    _turnRight 13C0                _calibrate_white 1786              ___lmul@multiplier 0001  
                    copy_data0 1984                      copy_data1 19A4                      copy_data2 19C4  
                    _twothirds 00C0                 ?_set_led_color 0001  __end_of_I2C_2_Master_RepStart 2086  
           color_read_Blue@tmp 000A            __end_of_setMotorPWM 0FBC                       _Red_rule 00B4  
                     __Hrparam 0000                       __Lrparam 0000     __end_of_get_color_distance 0E50  
               _get_color_code 0580                     _ANSELDbits 000EA7                     _ANSELFbits 000EB4  
                   _T0CON0bits 000FD5                     _T0CON1bits 000FD6                ___lwdiv@divisor 0009  
                     _halfback 00C2                ___lwdiv@counter 000D                     ?_turnRight 0014  
                     __ptext10 164E                       __ptext11 1FEE                       __ptext20 2068  
                     __ptext12 1786                       __ptext21 2072                       __ptext13 1510  
                     __ptext30 13C0                       __ptext22 207C                       __ptext14 1EF0  
                     __ptext31 0FBC                       __ptext23 1F34                       __ptext15 1D1E  
                     __ptext32 1116                       __ptext24 1FA0                       __ptext16 1D6E  
                     __ptext41 208E                       __ptext33 1E5E                       __ptext25 1F76  
                     __ptext17 1DBE                       __ptext34 1A9A                       __ptext26 1EA8  
                     __ptext18 1E0E                       __ptext35 1B0E                       __ptext27 200E  
                     __ptext19 2046                       __ptext36 0E50                       __ptext28 0032  
                     __ptext37 1FC8                       __ptext29 1270                       __ptext38 1B82  
                     __ptext39 2052                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
              ??_RobotMovement 0024            __end_of_return_back 0B52                     turnLeft@mL 0014  
                   turnLeft@mR 0016                 turnRightLong@i 001C                 turnRightLong@k 001A  
                turnLeftLong@i 001C                  turnLeftLong@k 001A          __end_of_turnRightLong 13C0  
                     _moveBack 1A9A                     turnRight@i 001C                     turnRight@k 001A  
                     isa$xinst 000000                       int$flags 005F         __end_of_get_color_code 091E  
      __end_of_calibrate_black 164E                       _turnLeft 1116                    ??_get_state 0003  
      __end_of_calibrate_white 1830                     _INTCONbits 000FF2                    _setMotorPWM 0E50  
              ??_set_led_color 0003           __end_of_turnLeftLong 1116                       intlevel2 0000  
             ___lldiv@dividend 000D               ??_fullSpeedAhead 0018                      turnLeft@i 001C  
                    turnLeft@k 001A                ?_get_color_code 0035               _color_click_init 164E  
                   _SSP2DATPPS 000E1D               ___lldiv@quotient 0015                     _SSP2CLKPPS 000E1C  
                  _return_back 091E                    ??_turnRight 0018    __end_of_TimedfullSpeedAhead 1B82  
          RobotMovement@i_1271 0028  
