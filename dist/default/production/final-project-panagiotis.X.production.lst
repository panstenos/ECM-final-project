

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 15 11:05:48 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Generated 06/04/2022 GMT
    78                           ; 
    79                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112                           	psect	idataCOMRAM
   113   0023F4                     __pidataCOMRAM:
   114                           	callstack 0
   115                           
   116                           ;initializer for _Black_setup
   117   0023F4  0404               	dw	1028
   118   0023F6  0000               	dw	0
   119   0023F8  024B               	dw	587
   120   0023FA  0000               	dw	0
   121   0023FC  00A1               	dw	161
   122   0023FE  0000               	dw	0
   123                           
   124                           	psect	idataBANK0
   125   00212E                     __pidataBANK0:
   126                           	callstack 0
   127                           
   128                           ;initializer for _White_setup
   129   00212E  28FC               	dw	10492
   130   002130  0000               	dw	0
   131   002132  1B55               	dw	6997
   132   002134  0000               	dw	0
   133   002136  0770               	dw	1904
   134   002138  0000               	dw	0
   135                           
   136                           ;initializer for _Yellow_rule
   137   00213A  005D               	dw	93
   138   00213C  0000               	dw	0
   139   00213E  004C               	dw	76
   140   002140  0000               	dw	0
   141   002142  0014               	dw	20
   142   002144  0000               	dw	0
   143                           
   144                           ;initializer for _Blue_rule
   145   002146  0003               	dw	3
   146   002148  0000               	dw	0
   147   00214A  0009               	dw	9
   148   00214C  0000               	dw	0
   149   00214E  0024               	dw	36
   150   002150  0000               	dw	0
   151                           
   152                           ;initializer for _Green_rule
   153   002152  0019               	dw	25
   154   002154  0000               	dw	0
   155   002156  0036               	dw	54
   156   002158  0000               	dw	0
   157   00215A  0008               	dw	8
   158   00215C  0000               	dw	0
   159                           
   160                           ;initializer for _Red_rule
   161   00215E  0048               	dw	72
   162   002160  0000               	dw	0
   163   002162  0002               	dw	2
   164   002164  0000               	dw	0
   165   002166  0002               	dw	2
   166   002168  0000               	dw	0
   167                           
   168                           ;initializer for _twothirds
   169   00216A  000B               	dw	11
   170                           
   171                           ;initializer for _halfblock
   172   00216C  0005               	dw	5
   173                           
   174                           ;initializer for _blockback
   175   00216E  0010               	dw	16
   176                           
   177                           ;initializer for _blockahead
   178   002170  0010               	dw	16
   179                           
   180                           ;initializer for _wait_time
   181   002172  00DC               	dw	220
   182                           
   183                           ;initializer for _wall_coef
   184   002174  000F               	dw	15
   185                           
   186                           	psect	idataBANK1
   187   0022CA                     __pidataBANK1:
   188                           	callstack 0
   189                           
   190                           ;initializer for _White_rule
   191   0022CA  0064               	dw	100
   192   0022CC  0000               	dw	0
   193   0022CE  0064               	dw	100
   194   0022D0  0000               	dw	0
   195   0022D2  0064               	dw	100
   196   0022D4  0000               	dw	0
   197                           
   198                           ;initializer for _Lightblue_rule
   199   0022D6  0026               	dw	38
   200   0022D8  0000               	dw	0
   201   0022DA  0048               	dw	72
   202   0022DC  0000               	dw	0
   203   0022DE  0054               	dw	84
   204   0022E0  0000               	dw	0
   205                           
   206                           ;initializer for _Orange_rule
   207   0022E2  005C               	dw	92
   208   0022E4  0000               	dw	0
   209   0022E6  0027               	dw	39
   210   0022E8  0000               	dw	0
   211   0022EA  001C               	dw	28
   212   0022EC  0000               	dw	0
   213                           
   214                           ;initializer for _Pink_rule
   215   0022EE  004D               	dw	77
   216   0022F0  0000               	dw	0
   217   0022F2  003C               	dw	60
   218   0022F4  0000               	dw	0
   219   0022F6  0040               	dw	64
   220   0022F8  0000               	dw	0
   221   000000                     _T0CON0bits	set	4053
   222   000000                     _T0CON1bits	set	4054
   223   000000                     _TRISDbits	set	3972
   224   000000                     _SSP2CON2bits	set	3802
   225   000000                     _SSP2CLKPPS	set	3612
   226   000000                     _SSP2DATPPS	set	3613
   227   000000                     _RC7PPS	set	3689
   228   000000                     _RE2PPS	set	3700
   229   000000                     _ANSELFbits	set	3764
   230   000000                     _TRISAbits	set	3969
   231   000000                     _TRISFbits	set	3974
   232   000000                     _PORTFbits	set	3982
   233   000000                     _TRISGbits	set	3975
   234   000000                     _TRISCbits	set	3971
   235   000000                     _TRISEbits	set	3973
   236   000000                     _SSP2BUF	set	3797
   237   000000                     _SSP2ADD	set	3798
   238   000000                     _SSP2CON1bits	set	3801
   239   000000                     _LATAbits	set	3961
   240   000000                     _LATGbits	set	3967
   241   000000                     _CCPR4H	set	3873
   242   000000                     _CCPR3H	set	3877
   243   000000                     _T2PR	set	4028
   244   000000                     _T2CONbits	set	4029
   245   000000                     _CCPR2H	set	4006
   246   000000                     _CCPR1H	set	4010
   247   000000                     _LATCbits	set	3963
   248   000000                     _LATEbits	set	3965
   249   000000                     _LATFbits	set	3966
   250   000000                     _RE4PPS	set	3702
   251   000000                     _RG6PPS	set	3720
   252   000000                     _RD5PPS	set	3695
   253   000000                     _ANSELDbits	set	3751
   254   000000                     _TMR0L	set	4051
   255   000000                     _TMR0H	set	4052
   256   000000                     _INTCONbits	set	4082
   257   000000                     _T2CLKCONbits	set	4031
   258   000000                     _T2HLTbits	set	4030
   259   000000                     _CCP1CONbits	set	4011
   260   000000                     _CCPTMRS0bits	set	4013
   261   000000                     _CCP2CONbits	set	4007
   262   000000                     _CCP3CONbits	set	3878
   263   000000                     _CCP4CONbits	set	3874
   264   000000                     _SSP2CON2	set	3802
   265   000000                     _SSP2STAT	set	3800
   266   000000                     _PIE0bits	set	3625
   267   000000                     _RD6PPS	set	3696
   268   000000                     _PIE2bits	set	3627
   269   000000                     _PIR0bits	set	3635
   270                           
   271                           ; #config settings
   272                           
   273                           	psect	cinit
   274   001B34                     __pcinit:
   275                           	callstack 0
   276   001B34                     start_initialization:
   277                           	callstack 0
   278   001B34                     __initialization:
   279                           	callstack 0
   280                           
   281                           ; Initialize objects allocated to BANK1 (48 bytes)
   282                           ; load TBLPTR registers with __pidataBANK1
   283   001B34  0ECA               	movlw	low __pidataBANK1
   284   001B36  6EF6               	movwf	tblptrl,c
   285   001B38  0E22               	movlw	high __pidataBANK1
   286   001B3A  6EF7               	movwf	tblptrh,c
   287   001B3C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   288   001B3E  6EF8               	movwf	tblptru,c
   289   001B40  EE01  F078         	lfsr	0,__pdataBANK1
   290   001B44  EE10 F030          	lfsr	1,48
   291   001B48                     copy_data0:
   292   001B48  0009               	tblrd		*+
   293   001B4A  CFF5 FFEE          	movff	tablat,postinc0
   294   001B4E  50E5               	movf	postdec1,w,c
   295   001B50  50E1               	movf	fsr1l,w,c
   296   001B52  E1FA               	bnz	copy_data0
   297                           
   298                           ; Initialize objects allocated to BANK0 (72 bytes)
   299                           ; load TBLPTR registers with __pidataBANK0
   300   001B54  0E2E               	movlw	low __pidataBANK0
   301   001B56  6EF6               	movwf	tblptrl,c
   302   001B58  0E21               	movlw	high __pidataBANK0
   303   001B5A  6EF7               	movwf	tblptrh,c
   304   001B5C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   305   001B5E  6EF8               	movwf	tblptru,c
   306   001B60  EE00  F060         	lfsr	0,__pdataBANK0
   307   001B64  EE10 F048          	lfsr	1,72
   308   001B68                     copy_data1:
   309   001B68  0009               	tblrd		*+
   310   001B6A  CFF5 FFEE          	movff	tablat,postinc0
   311   001B6E  50E5               	movf	postdec1,w,c
   312   001B70  50E1               	movf	fsr1l,w,c
   313   001B72  E1FA               	bnz	copy_data1
   314                           
   315                           ; Initialize objects allocated to COMRAM (12 bytes)
   316                           ; load TBLPTR registers with __pidataCOMRAM
   317   001B74  0EF4               	movlw	low __pidataCOMRAM
   318   001B76  6EF6               	movwf	tblptrl,c
   319   001B78  0E23               	movlw	high __pidataCOMRAM
   320   001B7A  6EF7               	movwf	tblptrh,c
   321   001B7C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   322   001B7E  6EF8               	movwf	tblptru,c
   323   001B80  EE00  F039         	lfsr	0,__pdataCOMRAM
   324   001B84  EE10 F00C          	lfsr	1,12
   325   001B88                     copy_data2:
   326   001B88  0009               	tblrd		*+
   327   001B8A  CFF5 FFEE          	movff	tablat,postinc0
   328   001B8E  50E5               	movf	postdec1,w,c
   329   001B90  50E1               	movf	fsr1l,w,c
   330   001B92  E1FA               	bnz	copy_data2
   331                           
   332                           ; Clear objects allocated to BANK2 (200 bytes)
   333   001B94  EE02  F000         	lfsr	0,__pbssBANK2
   334   001B98  0EC8               	movlw	200
   335   001B9A                     clear_0:
   336   001B9A  6AEE               	clrf	postinc0,c
   337   001B9C  06E8               	decf	wreg,f,c
   338   001B9E  E1FD               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to BANK1 (120 bytes)
   341   001BA0  EE01  F000         	lfsr	0,__pbssBANK1
   342   001BA4  0E78               	movlw	120
   343   001BA6                     clear_1:
   344   001BA6  6AEE               	clrf	postinc0,c
   345   001BA8  06E8               	decf	wreg,f,c
   346   001BAA  E1FD               	bnz	clear_1
   347                           
   348                           ; Clear objects allocated to BANK0 (18 bytes)
   349   001BAC  EE00  F0E6         	lfsr	0,__pbssBANK0
   350   001BB0  0E12               	movlw	18
   351   001BB2                     clear_2:
   352   001BB2  6AEE               	clrf	postinc0,c
   353   001BB4  06E8               	decf	wreg,f,c
   354   001BB6  E1FD               	bnz	clear_2
   355                           
   356                           ; Clear objects allocated to COMRAM (10 bytes)
   357   001BB8  EE00  F045         	lfsr	0,__pbssCOMRAM
   358   001BBC  0E0A               	movlw	10
   359   001BBE                     clear_3:
   360   001BBE  6AEE               	clrf	postinc0,c
   361   001BC0  06E8               	decf	wreg,f,c
   362   001BC2  E1FD               	bnz	clear_3
   363   001BC4                     end_of_initialization:
   364                           	callstack 0
   365   001BC4                     __end_of__initialization:
   366                           	callstack 0
   367   001BC4  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   368   001BC6  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   369   001BC8  0100               	movlb	0
   370   001BCA  EFC6  F006         	goto	_main	;jump to C main() function
   371                           
   372                           	psect	bssCOMRAM
   373   000045                     __pbssCOMRAM:
   374                           	callstack 0
   375   000045                     _wall_detection_counter:
   376                           	callstack 0
   377   000045                     	ds	2
   378   000047                     _index:
   379                           	callstack 0
   380   000047                     	ds	2
   381   000049                     _seconds:
   382                           	callstack 0
   383   000049                     	ds	2
   384   00004B                     _clear2:
   385                           	callstack 0
   386   00004B                     	ds	2
   387   00004D                     _clear1:
   388                           	callstack 0
   389   00004D                     	ds	2
   390                           
   391                           	psect	dataCOMRAM
   392   000039                     __pdataCOMRAM:
   393                           	callstack 0
   394   000039                     _Black_setup:
   395                           	callstack 0
   396   000039                     	ds	12
   397                           
   398                           	psect	bssBANK0
   399   0000E6                     __pbssBANK0:
   400                           	callstack 0
   401   0000E6                     _RGB:
   402                           	callstack 0
   403   0000E6                     	ds	12
   404   0000F2                     _incr_sec_counter:
   405                           	callstack 0
   406   0000F2                     	ds	2
   407   0000F4                     _state:
   408                           	callstack 0
   409   0000F4                     	ds	2
   410   0000F6                     _wall_detection_mode:
   411                           	callstack 0
   412   0000F6                     	ds	2
   413                           
   414                           	psect	dataBANK0
   415   000060                     __pdataBANK0:
   416                           	callstack 0
   417   000060                     _White_setup:
   418                           	callstack 0
   419   000060                     	ds	12
   420   00006C                     _Yellow_rule:
   421                           	callstack 0
   422   00006C                     	ds	12
   423   000078                     _Blue_rule:
   424                           	callstack 0
   425   000078                     	ds	12
   426   000084                     _Green_rule:
   427                           	callstack 0
   428   000084                     	ds	12
   429   000090                     _Red_rule:
   430                           	callstack 0
   431   000090                     	ds	12
   432   00009C                     _twothirds:
   433                           	callstack 0
   434   00009C                     	ds	2
   435   00009E                     _halfblock:
   436                           	callstack 0
   437   00009E                     	ds	2
   438   0000A0                     _blockback:
   439                           	callstack 0
   440   0000A0                     	ds	2
   441   0000A2                     _blockahead:
   442                           	callstack 0
   443   0000A2                     	ds	2
   444   0000A4                     _wait_time:
   445                           	callstack 0
   446   0000A4                     	ds	2
   447   0000A6                     _wall_coef:
   448                           	callstack 0
   449   0000A6                     	ds	2
   450                           
   451                           	psect	bssBANK1
   452   000100                     __pbssBANK1:
   453                           	callstack 0
   454   000100                     _Color_rules:
   455                           	callstack 0
   456   000100                     	ds	108
   457   00016C                     _Black_rule:
   458                           	callstack 0
   459   00016C                     	ds	12
   460                           
   461                           	psect	dataBANK1
   462   000178                     __pdataBANK1:
   463                           	callstack 0
   464   000178                     _White_rule:
   465                           	callstack 0
   466   000178                     	ds	12
   467   000184                     _Lightblue_rule:
   468                           	callstack 0
   469   000184                     	ds	12
   470   000190                     _Orange_rule:
   471                           	callstack 0
   472   000190                     	ds	12
   473   00019C                     _Pink_rule:
   474                           	callstack 0
   475   00019C                     	ds	12
   476                           
   477                           	psect	bssBANK2
   478   000200                     __pbssBANK2:
   479                           	callstack 0
   480   000200                     _movement_list:
   481                           	callstack 0
   482   000200                     	ds	200
   483                           
   484                           	psect	cstackBANK1
   485   0001A8                     __pcstackBANK1:
   486                           	callstack 0
   487   0001A8                     main@color_code:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x0
   491   0001A8                     	ds	2
   492   0001AA                     main@state:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496   0001AA                     	ds	2
   497   0001AC                     main@motorL:
   498                           	callstack 0
   499                           
   500                           ; 9 bytes @ 0x4
   501   0001AC                     	ds	9
   502   0001B5                     main@motorR:
   503                           	callstack 0
   504                           
   505                           ; 9 bytes @ 0xD
   506   0001B5                     	ds	9
   507                           
   508                           	psect	cstackBANK0
   509   0000A8                     __pcstackBANK0:
   510                           	callstack 0
   511   0000A8                     _get_color_distance$422:
   512                           	callstack 0
   513                           
   514                           ; 4 bytes @ 0x0
   515   0000A8                     	ds	4
   516   0000AC                     _get_color_distance$424:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x4
   520   0000AC                     	ds	4
   521   0000B0                     _get_color_distance$426:
   522                           	callstack 0
   523                           
   524                           ; 4 bytes @ 0x8
   525   0000B0                     	ds	4
   526   0000B4                     get_color_distance@R_offset:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0xC
   530   0000B4                     	ds	2
   531   0000B6                     get_color_distance@G_offset:
   532                           	callstack 0
   533                           
   534                           ; 2 bytes @ 0xE
   535   0000B6                     	ds	2
   536   0000B8                     get_color_distance@B_offset:
   537                           	callstack 0
   538                           
   539                           ; 2 bytes @ 0x10
   540   0000B8                     	ds	2
   541   0000BA                     _get_color_code$2462:
   542                           	callstack 0
   543                           
   544                           ; 12 bytes @ 0x12
   545   0000BA                     	ds	12
   546   0000C6                     _get_color_code$463:
   547                           	callstack 0
   548                           
   549                           ; 4 bytes @ 0x1E
   550   0000C6                     	ds	4
   551   0000CA                     _get_color_code$464:
   552                           	callstack 0
   553                           
   554                           ; 4 bytes @ 0x22
   555   0000CA                     	ds	4
   556   0000CE                     _get_color_code$465:
   557                           	callstack 0
   558                           
   559                           ; 4 bytes @ 0x26
   560   0000CE                     	ds	4
   561   0000D2                     get_color_code@min_value:
   562                           	callstack 0
   563                           
   564                           ; 2 bytes @ 0x2A
   565   0000D2                     	ds	2
   566   0000D4                     get_color_code@min_index:
   567                           	callstack 0
   568                           
   569                           ; 2 bytes @ 0x2C
   570   0000D4                     	ds	2
   571   0000D6                     get_color_code@value:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x2E
   575   0000D6                     	ds	2
   576   0000D8                     get_color_code@i:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0x30
   580   0000D8                     	ds	2
   581   0000DA                     get_color_code@NormalizedRGB:
   582                           	callstack 0
   583                           
   584                           ; 12 bytes @ 0x32
   585   0000DA                     	ds	12
   586                           
   587                           	psect	cstackCOMRAM
   588   000001                     __pcstackCOMRAM:
   589                           	callstack 0
   590   000001                     ??i2_I2C_2_Master_Idle:
   591   000001                     i2set_led_color@color:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x0
   595   000001                     	ds	1
   596   000002                     ??i2_I2C_2_Master_Read:
   597   000002                     i2I2C_2_Master_Write@data_byte:
   598                           	callstack 0
   599                           
   600                           ; 1 bytes @ 0x1
   601   000002                     	ds	1
   602   000003                     i2I2C_2_Master_Read@ack:
   603                           	callstack 0
   604                           
   605                           ; 1 bytes @ 0x2
   606   000003                     	ds	1
   607   000004                     i2I2C_2_Master_Read@tmp:
   608                           	callstack 0
   609                           
   610                           ; 1 bytes @ 0x3
   611   000004                     	ds	1
   612   000005                     ?i2_color_read_Clear:
   613                           	callstack 0
   614                           
   615                           ; 2 bytes @ 0x4
   616   000005                     	ds	2
   617   000007                     ??i2_color_read_Clear:
   618                           
   619                           ; 1 bytes @ 0x6
   620   000007                     	ds	3
   621   00000A                     i2color_read_Clear@tmp:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x9
   625   00000A                     	ds	2
   626   00000C                     set_wall_detection@mode:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0xB
   630   00000C                     	ds	2
   631   00000E                     ??_add_seconds_to_list:
   632   00000E                     ??_I2C_2_Master_Idle:
   633   00000E                     ?_get_state:
   634                           	callstack 0
   635   00000E                     ?___wmul:
   636                           	callstack 0
   637   00000E                     ?___lmul:
   638                           	callstack 0
   639   00000E                     set_wall_detection_mode@mode:
   640                           	callstack 0
   641   00000E                     set_led_color@color:
   642                           	callstack 0
   643   00000E                     initDCmotorsPWM@PWMperiod:
   644                           	callstack 0
   645   00000E                     ___wmul@multiplier:
   646                           	callstack 0
   647   00000E                     ___lmul@multiplier:
   648                           	callstack 0
   649                           
   650                           ; 4 bytes @ 0xD
   651   00000E                     	ds	1
   652   00000F                     ??_I2C_2_Master_Read:
   653   00000F                     I2C_2_Master_Write@data_byte:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0xE
   657   00000F                     	ds	1
   658   000010                     color_writetoaddr@value:
   659                           	callstack 0
   660   000010                     I2C_2_Master_Read@ack:
   661                           	callstack 0
   662   000010                     ___wmul@multiplicand:
   663                           	callstack 0
   664                           
   665                           ; 2 bytes @ 0xF
   666   000010                     	ds	1
   667   000011                     color_writetoaddr@address:
   668                           	callstack 0
   669   000011                     I2C_2_Master_Read@tmp:
   670                           	callstack 0
   671                           
   672                           ; 1 bytes @ 0x10
   673   000011                     	ds	1
   674   000012                     ?_color_read_Red:
   675                           	callstack 0
   676   000012                     ?_color_read_Blue:
   677                           	callstack 0
   678   000012                     ?_color_read_Green:
   679                           	callstack 0
   680   000012                     ?_color_read_Clear:
   681                           	callstack 0
   682   000012                     ___wmul@product:
   683                           	callstack 0
   684   000012                     ___lmul@multiplicand:
   685                           	callstack 0
   686                           
   687                           ; 4 bytes @ 0x11
   688   000012                     	ds	2
   689   000014                     ??_color_read_Red:
   690   000014                     ??_color_read_Blue:
   691   000014                     ??_color_read_Green:
   692   000014                     ??_color_read_Clear:
   693   000014                     ?_get_color_distance:
   694                           	callstack 0
   695   000014                     ?_get_wall_detection:
   696                           	callstack 0
   697   000014                     ?___lwdiv:
   698                           	callstack 0
   699   000014                     ___lwdiv@dividend:
   700                           	callstack 0
   701   000014                     get_color_distance@color1:
   702                           	callstack 0
   703                           
   704                           ; 12 bytes @ 0x13
   705   000014                     	ds	2
   706   000016                     ___lwdiv@divisor:
   707                           	callstack 0
   708   000016                     ___lmul@product:
   709                           	callstack 0
   710                           
   711                           ; 4 bytes @ 0x15
   712   000016                     	ds	1
   713   000017                     color_read_Red@tmp:
   714                           	callstack 0
   715   000017                     color_read_Blue@tmp:
   716                           	callstack 0
   717   000017                     color_read_Green@tmp:
   718                           	callstack 0
   719   000017                     color_read_Clear@tmp:
   720                           	callstack 0
   721                           
   722                           ; 2 bytes @ 0x16
   723   000017                     	ds	1
   724   000018                     ___lwdiv@counter:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x17
   728   000018                     	ds	1
   729   000019                     ??_calibrate_white:
   730   000019                     ___lwdiv@quotient:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x18
   734   000019                     	ds	1
   735   00001A                     ?___lldiv:
   736                           	callstack 0
   737   00001A                     ___lldiv@dividend:
   738                           	callstack 0
   739                           
   740                           ; 4 bytes @ 0x19
   741   00001A                     	ds	1
   742   00001B                     ??_calibrate_black:
   743   00001B                     setMotorPWM@m:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x1A
   747   00001B                     	ds	2
   748   00001D                     ??_setMotorPWM:
   749   00001D                     calibrate_black@clear1:
   750                           	callstack 0
   751                           
   752                           ; 2 bytes @ 0x1C
   753   00001D                     	ds	1
   754   00001E                     ___lldiv@divisor:
   755                           	callstack 0
   756                           
   757                           ; 4 bytes @ 0x1D
   758   00001E                     	ds	1
   759   00001F                     setMotorPWM@posDuty:
   760                           	callstack 0
   761   00001F                     calibrate_black@clear2:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x1E
   765   00001F                     	ds	1
   766   000020                     setMotorPWM@negDuty:
   767                           	callstack 0
   768   000020                     get_color_distance@color2:
   769                           	callstack 0
   770                           
   771                           ; 12 bytes @ 0x1F
   772   000020                     	ds	1
   773   000021                     stop@mL:
   774                           	callstack 0
   775   000021                     turnLeft@mL:
   776                           	callstack 0
   777   000021                     turnRight@mL:
   778                           	callstack 0
   779   000021                     turnLeftLong@mL:
   780                           	callstack 0
   781   000021                     turnRightLong@mL:
   782                           	callstack 0
   783   000021                     fullSpeedAhead@mL:
   784                           	callstack 0
   785   000021                     TimedfullSpeedAhead@mL:
   786                           	callstack 0
   787   000021                     moveBack@mL:
   788                           	callstack 0
   789   000021                     _calibrate_black$2463:
   790                           	callstack 0
   791                           
   792                           ; 2 bytes @ 0x20
   793   000021                     	ds	1
   794   000022                     ___lldiv@quotient:
   795                           	callstack 0
   796                           
   797                           ; 4 bytes @ 0x21
   798   000022                     	ds	1
   799   000023                     ??_color_click_init:
   800   000023                     stop@mR:
   801                           	callstack 0
   802   000023                     turnLeft@mR:
   803                           	callstack 0
   804   000023                     turnRight@mR:
   805                           	callstack 0
   806   000023                     turnLeftLong@mR:
   807                           	callstack 0
   808   000023                     turnRightLong@mR:
   809                           	callstack 0
   810   000023                     fullSpeedAhead@mR:
   811                           	callstack 0
   812   000023                     TimedfullSpeedAhead@mR:
   813                           	callstack 0
   814   000023                     moveBack@mR:
   815                           	callstack 0
   816                           
   817                           ; 2 bytes @ 0x22
   818   000023                     	ds	2
   819   000025                     ??_stop:
   820   000025                     ??_turnLeft:
   821   000025                     ??_turnRight:
   822   000025                     ??_turnLeftLong:
   823   000025                     ??_turnRightLong:
   824   000025                     TimedfullSpeedAhead@time:
   825                           	callstack 0
   826   000025                     moveBack@time:
   827                           	callstack 0
   828                           
   829                           ; 2 bytes @ 0x24
   830   000025                     	ds	1
   831   000026                     ___lldiv@counter:
   832                           	callstack 0
   833                           
   834                           ; 1 bytes @ 0x25
   835   000026                     	ds	1
   836   000027                     turnLeft@k:
   837                           	callstack 0
   838   000027                     turnRight@k:
   839                           	callstack 0
   840   000027                     turnLeftLong@k:
   841                           	callstack 0
   842   000027                     turnRightLong@k:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x26
   846   000027                     	ds	2
   847   000029                     turnLeft@i:
   848                           	callstack 0
   849   000029                     turnRight@i:
   850                           	callstack 0
   851   000029                     turnLeftLong@i:
   852                           	callstack 0
   853   000029                     turnRightLong@i:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0x28
   857   000029                     	ds	2
   858   00002B                     RobotMovement@color:
   859                           	callstack 0
   860   00002B                     return_back@motorL:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x2A
   864   00002B                     	ds	1
   865   00002C                     ??_get_color_distance:
   866                           
   867                           ; 1 bytes @ 0x2B
   868   00002C                     	ds	1
   869   00002D                     RobotMovement@motorL:
   870                           	callstack 0
   871   00002D                     return_back@motorR:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x2C
   875   00002D                     	ds	2
   876   00002F                     ??_return_back:
   877   00002F                     RobotMovement@motorR:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x2E
   881   00002F                     	ds	1
   882   000030                     ?_get_color_code:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x2F
   886   000030                     	ds	1
   887   000031                     
   888                           ; 1 bytes @ 0x30
   889   000031                     	ds	1
   890   000032                     ??_get_color_code:
   891                           
   892                           ; 1 bytes @ 0x31
   893   000032                     	ds	1
   894   000033                     RobotMovement@i:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0x32
   898   000033                     	ds	2
   899   000035                     RobotMovement@i_1276:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0x34
   903   000035                     	ds	2
   904   000037                     ??_main:
   905                           
   906                           ; 1 bytes @ 0x36
   907   000037                     	ds	2
   908                           
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 17 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  color_code      2    0[BANK1 ] unsigned int 
   919 ;;  state           2    2[BANK1 ] int 
   920 ;;  motorR          9   13[BANK1 ] struct DC_motor
   921 ;;  motorL          9    4[BANK1 ] struct DC_motor
   922 ;;  PWMcycle        2    0        unsigned int 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   933 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   935 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   936 ;;Total ram usage:       24 bytes
   937 ;; Hardware stack levels required when called: 10
   938 ;; This function calls:
   939 ;;		_Interrupts_init
   940 ;;		_RobotMovement
   941 ;;		_TimedfullSpeedAhead
   942 ;;		_Timer0_init
   943 ;;		_add_seconds_to_list
   944 ;;		_color_click_init
   945 ;;		_fullSpeedAhead
   946 ;;		_get_color_code
   947 ;;		_get_state
   948 ;;		_get_wall_detection
   949 ;;		_initDCmotorsPWM
   950 ;;		_return_back
   951 ;;		_set_wall_detection_mode
   952 ;;		_stop
   953 ;; This function is called by:
   954 ;;		Startup code after reset
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text0
   959   000D8C                     __ptext0:
   960                           	callstack 0
   961   000D8C                     _main:
   962                           	callstack 21
   963   000D8C                     
   964                           ;main.c: 19:     color_click_init();
   965   000D8C  ECBB  F00B         	call	_color_click_init	;wreg free
   966   000D90                     
   967                           ;main.c: 20:     Timer0_init();
   968   000D90  ECDD  F011         	call	_Timer0_init	;wreg free
   969   000D94                     
   970                           ;main.c: 21:     Interrupts_init();
   971   000D94  EC06  F012         	call	_Interrupts_init	;wreg free
   972   000D98                     
   973                           ;main.c: 22:     initDCmotorsPWM(99);
   974   000D98  0E00               	movlw	0
   975   000D9A  6E0F               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   976   000D9C  0E63               	movlw	99
   977   000D9E  6E0E               	movwf	initDCmotorsPWM@PWMperiod^0,c
   978   000DA0  ECE7  F00D         	call	_initDCmotorsPWM	;wreg free
   979   000DA4                     
   980                           ;main.c: 26:     ANSELFbits.ANSELF2 = 0;
   981   000DA4  010E               	movlb	14	; () banked
   982   000DA6  95B4               	bcf	180,2,b	;volatile
   983   000DA8                     
   984                           ; BSR set to: 14
   985                           ;main.c: 27:     TRISFbits.TRISF2 = 1;
   986   000DA8  8486               	bsf	134,2,c	;volatile
   987   000DAA                     
   988                           ; BSR set to: 14
   989                           ;main.c: 29:     DC_motor motorL, motorR;;main.c: 30:     motorL.power=0;
   990   000DAA  0E00               	movlw	0
   991   000DAC  0101               	movlb	1	; () banked
   992   000DAE  6FAC               	movwf	main@motorL& (0+255),b
   993   000DB0                     
   994                           ; BSR set to: 1
   995                           ;main.c: 31:     motorL.direction=1;
   996   000DB0  0E01               	movlw	1
   997   000DB2  6FAD               	movwf	(main@motorL+1)& (0+255),b
   998   000DB4                     
   999                           ; BSR set to: 1
  1000                           ;main.c: 32:     motorL.brakemode=1;
  1001   000DB4  0E01               	movlw	1
  1002   000DB6  6FAE               	movwf	(main@motorL+2)& (0+255),b
  1003   000DB8                     
  1004                           ; BSR set to: 1
  1005                           ;main.c: 33:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
  1006   000DB8  0EAA               	movlw	170
  1007   000DBA  6FB1               	movwf	(main@motorL+5)& (0+255),b
  1008   000DBC  0E0F               	movlw	15
  1009   000DBE  6FB2               	movwf	(main@motorL+6)& (0+255),b
  1010   000DC0                     
  1011                           ; BSR set to: 1
  1012                           ;main.c: 34:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
  1013   000DC0  0EA6               	movlw	166
  1014   000DC2  6FB3               	movwf	(main@motorL+7)& (0+255),b
  1015   000DC4  0E0F               	movlw	15
  1016   000DC6  6FB4               	movwf	(main@motorL+8)& (0+255),b
  1017   000DC8                     
  1018                           ; BSR set to: 1
  1019                           ;main.c: 35:     motorL.PWMperiod=PWMcycle;
  1020   000DC8  0E00               	movlw	0
  1021   000DCA  6FB0               	movwf	(main@motorL+4)& (0+255),b
  1022   000DCC  0E63               	movlw	99
  1023   000DCE  6FAF               	movwf	(main@motorL+3)& (0+255),b
  1024   000DD0                     
  1025                           ; BSR set to: 1
  1026                           ;main.c: 37:     motorR.power=0;
  1027   000DD0  0E00               	movlw	0
  1028   000DD2  6FB5               	movwf	main@motorR& (0+255),b
  1029   000DD4                     
  1030                           ; BSR set to: 1
  1031                           ;main.c: 38:     motorR.direction=1;
  1032   000DD4  0E01               	movlw	1
  1033   000DD6  6FB6               	movwf	(main@motorR+1)& (0+255),b
  1034   000DD8                     
  1035                           ; BSR set to: 1
  1036                           ;main.c: 39:     motorR.brakemode=1;
  1037   000DD8  0E01               	movlw	1
  1038   000DDA  6FB7               	movwf	(main@motorR+2)& (0+255),b
  1039   000DDC                     
  1040                           ; BSR set to: 1
  1041                           ;main.c: 40:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1042   000DDC  0E25               	movlw	37
  1043   000DDE  6FBA               	movwf	(main@motorR+5)& (0+255),b
  1044   000DE0  0E0F               	movlw	15
  1045   000DE2  6FBB               	movwf	(main@motorR+6)& (0+255),b
  1046   000DE4                     
  1047                           ; BSR set to: 1
  1048                           ;main.c: 41:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1049   000DE4  0E21               	movlw	33
  1050   000DE6  6FBC               	movwf	(main@motorR+7)& (0+255),b
  1051   000DE8  0E0F               	movlw	15
  1052   000DEA  6FBD               	movwf	(main@motorR+8)& (0+255),b
  1053   000DEC                     
  1054                           ; BSR set to: 1
  1055                           ;main.c: 42:     motorR.PWMperiod=PWMcycle;
  1056   000DEC  0E00               	movlw	0
  1057   000DEE  6FB9               	movwf	(main@motorR+4)& (0+255),b
  1058   000DF0  0E63               	movlw	99
  1059   000DF2  6FB8               	movwf	(main@motorR+3)& (0+255),b
  1060   000DF4                     
  1061                           ; BSR set to: 1
  1062                           ;main.c: 44:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1063   000DF4  0E52               	movlw	82
  1064   000DF6  6E38               	movwf	(??_main+1)^0,c
  1065   000DF8  0E2B               	movlw	43
  1066   000DFA  6E37               	movwf	??_main^0,c
  1067   000DFC  0E00               	movlw	0
  1068   000DFE                     u4317:
  1069   000DFE  2EE8               	decfsz	wreg,f,c
  1070   000E00  D7FE               	bra	u4317
  1071   000E02  2E37               	decfsz	??_main^0,f,c
  1072   000E04  D7FC               	bra	u4317
  1073   000E06  2E38               	decfsz	(??_main+1)^0,f,c
  1074   000E08  D7FA               	bra	u4317
  1075   000E0A  D000               	nop2	
  1076   000E0C                     
  1077                           ;main.c: 45:     fullSpeedAhead(&motorL,&motorR);
  1078   000E0C  0EAC               	movlw	low main@motorL
  1079   000E0E  6E21               	movwf	fullSpeedAhead@mL^0,c
  1080   000E10  0E01               	movlw	high main@motorL
  1081   000E12  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1082   000E14  0EB5               	movlw	low main@motorR
  1083   000E16  6E23               	movwf	fullSpeedAhead@mR^0,c
  1084   000E18  0E01               	movlw	high main@motorR
  1085   000E1A  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1086   000E1C  EC7D  F00F         	call	_fullSpeedAhead	;wreg free
  1087   000E20                     l4518:
  1088                           
  1089                           ;main.c: 46:     set_wall_detection_mode(1);
  1090   000E20  0E00               	movlw	0
  1091   000E22  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1092   000E24  0E01               	movlw	1
  1093   000E26  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1094   000E28  ECED  F011         	call	_set_wall_detection_mode	;wreg free
  1095   000E2C                     l4520:
  1096                           
  1097                           ;main.c: 48:         int state = get_state();
  1098   000E2C  EC12  F012         	call	_get_state	;wreg free
  1099   000E30  C00E  F1AA         	movff	?_get_state,main@state
  1100   000E34  C00F  F1AB         	movff	?_get_state+1,main@state+1
  1101   000E38                     
  1102                           ;main.c: 49:         if(get_wall_detection() == 1 && state == 0 ){
  1103   000E38  EC4B  F00F         	call	_get_wall_detection	;wreg free
  1104   000E3C  0414               	decf	?_get_wall_detection^0,w,c
  1105   000E3E  1015               	iorwf	(?_get_wall_detection+1)^0,w,c
  1106   000E40  A4D8               	btfss	status,2,c
  1107   000E42  EF25  F007         	goto	u3911
  1108   000E46  EF27  F007         	goto	u3910
  1109   000E4A                     u3911:
  1110   000E4A  EF85  F007         	goto	l4544
  1111   000E4E                     u3910:
  1112   000E4E  0101               	movlb	1	; () banked
  1113   000E50  51AA               	movf	main@state& (0+255),w,b
  1114   000E52  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1115   000E54  A4D8               	btfss	status,2,c
  1116   000E56  EF2F  F007         	goto	u3921
  1117   000E5A  EF31  F007         	goto	u3920
  1118   000E5E                     u3921:
  1119   000E5E  EF85  F007         	goto	l4544
  1120   000E62                     u3920:
  1121   000E62                     
  1122                           ; BSR set to: 1
  1123                           ;main.c: 50:             set_wall_detection_mode(0);
  1124   000E62  0E00               	movlw	0
  1125   000E64  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1126   000E66  0E00               	movlw	0
  1127   000E68  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1128   000E6A  ECED  F011         	call	_set_wall_detection_mode	;wreg free
  1129   000E6E                     
  1130                           ;main.c: 52:             add_seconds_to_list();
  1131   000E6E  ECBB  F010         	call	_add_seconds_to_list	;wreg free
  1132   000E72                     
  1133                           ;main.c: 53:             stop(&motorL,&motorR);
  1134   000E72  0EAC               	movlw	low main@motorL
  1135   000E74  6E21               	movwf	stop@mL^0,c
  1136   000E76  0E01               	movlw	high main@motorL
  1137   000E78  6E22               	movwf	(stop@mL+1)^0,c
  1138   000E7A  0EB5               	movlw	low main@motorR
  1139   000E7C  6E23               	movwf	stop@mR^0,c
  1140   000E7E  0E01               	movlw	high main@motorR
  1141   000E80  6E24               	movwf	(stop@mR+1)^0,c
  1142   000E82  EC72  F010         	call	_stop	;wreg free
  1143   000E86                     
  1144                           ;main.c: 54:             unsigned int color_code = get_color_code();
  1145   000E86  EC87  F003         	call	_get_color_code	;wreg free
  1146   000E8A  C030  F1A8         	movff	?_get_color_code,main@color_code
  1147   000E8E  C031  F1A9         	movff	?_get_color_code+1,main@color_code+1
  1148   000E92                     
  1149                           ;main.c: 55:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1150   000E92  0EAC               	movlw	low main@motorL
  1151   000E94  6E21               	movwf	TimedfullSpeedAhead@mL^0,c
  1152   000E96  0E01               	movlw	high main@motorL
  1153   000E98  6E22               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1154   000E9A  0EB5               	movlw	low main@motorR
  1155   000E9C  6E23               	movwf	TimedfullSpeedAhead@mR^0,c
  1156   000E9E  0E01               	movlw	high main@motorR
  1157   000EA0  6E24               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1158   000EA2  0E00               	movlw	0
  1159   000EA4  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1160   000EA6  0E05               	movlw	5
  1161   000EA8  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1162   000EAA  EC69  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1163   000EAE                     
  1164                           ;main.c: 56:             RobotMovement(color_code, &motorL, &motorR);
  1165   000EAE  C1A8  F02B         	movff	main@color_code,RobotMovement@color
  1166   000EB2  C1A9  F02C         	movff	main@color_code+1,RobotMovement@color+1
  1167   000EB6  0EAC               	movlw	low main@motorL
  1168   000EB8  6E2D               	movwf	RobotMovement@motorL^0,c
  1169   000EBA  0E01               	movlw	high main@motorL
  1170   000EBC  6E2E               	movwf	(RobotMovement@motorL+1)^0,c
  1171   000EBE  0EB5               	movlw	low main@motorR
  1172   000EC0  6E2F               	movwf	RobotMovement@motorR^0,c
  1173   000EC2  0E01               	movlw	high main@motorR
  1174   000EC4  6E30               	movwf	(RobotMovement@motorR+1)^0,c
  1175   000EC6  EC53  F000         	call	_RobotMovement	;wreg free
  1176   000ECA                     
  1177                           ;main.c: 57:             if (state == 0)
  1178   000ECA  0101               	movlb	1	; () banked
  1179   000ECC  51AA               	movf	main@state& (0+255),w,b
  1180   000ECE  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1181   000ED0  A4D8               	btfss	status,2,c
  1182   000ED2  EF6D  F007         	goto	u3931
  1183   000ED6  EF6F  F007         	goto	u3930
  1184   000EDA                     u3931:
  1185   000EDA  EF10  F007         	goto	l4518
  1186   000EDE                     u3930:
  1187   000EDE                     
  1188                           ; BSR set to: 1
  1189                           ;main.c: 58:             {;main.c: 59:                 stop(&motorL,&motorR);
  1190   000EDE  0EAC               	movlw	low main@motorL
  1191   000EE0  6E21               	movwf	stop@mL^0,c
  1192   000EE2  0E01               	movlw	high main@motorL
  1193   000EE4  6E22               	movwf	(stop@mL+1)^0,c
  1194   000EE6  0EB5               	movlw	low main@motorR
  1195   000EE8  6E23               	movwf	stop@mR^0,c
  1196   000EEA  0E01               	movlw	high main@motorR
  1197   000EEC  6E24               	movwf	(stop@mR+1)^0,c
  1198   000EEE  EC72  F010         	call	_stop	;wreg free
  1199                           
  1200                           ;main.c: 60:                 fullSpeedAhead(&motorL,&motorR);
  1201   000EF2  0EAC               	movlw	low main@motorL
  1202   000EF4  6E21               	movwf	fullSpeedAhead@mL^0,c
  1203   000EF6  0E01               	movlw	high main@motorL
  1204   000EF8  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1205   000EFA  0EB5               	movlw	low main@motorR
  1206   000EFC  6E23               	movwf	fullSpeedAhead@mR^0,c
  1207   000EFE  0E01               	movlw	high main@motorR
  1208   000F00  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1209   000F02  EC7D  F00F         	call	_fullSpeedAhead	;wreg free
  1210   000F06  EF10  F007         	goto	l4518
  1211   000F0A                     l4544:
  1212   000F0A  0101               	movlb	1	; () banked
  1213   000F0C  05AA               	decf	main@state& (0+255),w,b
  1214   000F0E  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1215   000F10  A4D8               	btfss	status,2,c
  1216   000F12  EF8D  F007         	goto	u3941
  1217   000F16  EF8F  F007         	goto	u3940
  1218   000F1A                     u3941:
  1219   000F1A  EF16  F007         	goto	l4520
  1220   000F1E                     u3940:
  1221   000F1E                     
  1222                           ; BSR set to: 1
  1223                           ;main.c: 65:             set_wall_detection_mode(0);
  1224   000F1E  0E00               	movlw	0
  1225   000F20  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1226   000F22  0E00               	movlw	0
  1227   000F24  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1228   000F26  ECED  F011         	call	_set_wall_detection_mode	;wreg free
  1229   000F2A                     
  1230                           ;main.c: 66:             return_back(&motorL, &motorR);
  1231   000F2A  0EAC               	movlw	low main@motorL
  1232   000F2C  6E2B               	movwf	return_back@motorL^0,c
  1233   000F2E  0E01               	movlw	high main@motorL
  1234   000F30  6E2C               	movwf	(return_back@motorL+1)^0,c
  1235   000F32  0EB5               	movlw	low main@motorR
  1236   000F34  6E2D               	movwf	return_back@motorR^0,c
  1237   000F36  0E01               	movlw	high main@motorR
  1238   000F38  6E2E               	movwf	(return_back@motorR+1)^0,c
  1239   000F3A  EC56  F005         	call	_return_back	;wreg free
  1240   000F3E  EF16  F007         	goto	l4520
  1241   000F42  EF51  F000         	goto	start
  1242   000F46                     __end_of_main:
  1243                           	callstack 0
  1244                           
  1245 ;; *************** function _set_wall_detection_mode *****************
  1246 ;; Defined at:
  1247 ;;		line 33 in file "color.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  mode            2   13[COMRAM] unsigned int 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, status,2
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1265 ;;Total ram usage:        2 bytes
  1266 ;; Hardware stack levels used: 1
  1267 ;; Hardware stack levels required when called: 5
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		_main
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           	psect	text1
  1276   0023DA                     __ptext1:
  1277                           	callstack 0
  1278   0023DA                     _set_wall_detection_mode:
  1279                           	callstack 25
  1280   0023DA                     
  1281                           ;color.c: 34:     wall_detection_mode = mode;
  1282   0023DA  C00E  F0F6         	movff	set_wall_detection_mode@mode,_wall_detection_mode
  1283   0023DE  C00F  F0F7         	movff	set_wall_detection_mode@mode+1,_wall_detection_mode+1
  1284   0023E2                     
  1285                           ;color.c: 35:     clear1 = 0;
  1286   0023E2  0E00               	movlw	0
  1287   0023E4  6E4E               	movwf	(_clear1+1)^0,c
  1288   0023E6  0E00               	movlw	0
  1289   0023E8  6E4D               	movwf	_clear1^0,c
  1290                           
  1291                           ;color.c: 36:     clear2 = 0;
  1292   0023EA  0E00               	movlw	0
  1293   0023EC  6E4C               	movwf	(_clear2+1)^0,c
  1294   0023EE  0E00               	movlw	0
  1295   0023F0  6E4B               	movwf	_clear2^0,c
  1296   0023F2  0012               	return		;funcret
  1297   0023F4                     __end_of_set_wall_detection_mode:
  1298                           	callstack 0
  1299                           
  1300 ;; *************** function _return_back *****************
  1301 ;; Defined at:
  1302 ;;		line 429 in file "dc_motor.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  motorL          2   42[COMRAM] PTR struct DC_motor
  1305 ;;		 -> main@motorL(9), 
  1306 ;;  motorR          2   44[COMRAM] PTR struct DC_motor
  1307 ;;		 -> main@motorR(9), 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1321 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1322 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;Total ram usage:        6 bytes
  1324 ;; Hardware stack levels used: 1
  1325 ;; Hardware stack levels required when called: 8
  1326 ;; This function calls:
  1327 ;;		_TimedfullSpeedAhead
  1328 ;;		_moveBack
  1329 ;;		_stop
  1330 ;;		_turnLeft
  1331 ;;		_turnLeftLong
  1332 ;;		_turnRight
  1333 ;;		_turnRightLong
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text2
  1340   000AAC                     __ptext2:
  1341                           	callstack 0
  1342   000AAC                     _return_back:
  1343                           	callstack 22
  1344   000AAC                     
  1345                           ;dc_motor.c: 429: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 430: {;dc_motor.c: 431:     while (index > 0){
  1346   000AAC  EFAA  F006         	goto	l341
  1347   000AB0                     l4422:
  1348                           
  1349                           ;dc_motor.c: 432:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1350   000AB0  90D8               	bcf	status,0,c
  1351   000AB2  3447               	rlcf	_index^0,w,c
  1352   000AB4  6ED9               	movwf	fsr2l,c
  1353   000AB6  3448               	rlcf	(_index+1)^0,w,c
  1354   000AB8  6EDA               	movwf	fsr2h,c
  1355   000ABA  0EFE               	movlw	low (_movement_list+65534)
  1356   000ABC  26D9               	addwf	fsr2l,f,c
  1357   000ABE  0E01               	movlw	high (_movement_list+65534)
  1358   000AC0  22DA               	addwfc	fsr2h,f,c
  1359   000AC2  28DE               	incf	postinc2,w,c
  1360   000AC4  E106               	bnz	u3811
  1361   000AC6  28DE               	incf	postinc2,w,c
  1362   000AC8  A4D8               	btfss	status,2,c
  1363   000ACA  EF69  F005         	goto	u3811
  1364   000ACE  EF6B  F005         	goto	u3810
  1365   000AD2                     u3811:
  1366   000AD2  EF77  F005         	goto	l4426
  1367   000AD6                     u3810:
  1368   000AD6  C02B  F021         	movff	return_back@motorL,turnLeft@mL
  1369   000ADA  C02C  F022         	movff	return_back@motorL+1,turnLeft@mL+1
  1370   000ADE  C02D  F023         	movff	return_back@motorR,turnLeft@mR
  1371   000AE2  C02E  F024         	movff	return_back@motorR+1,turnLeft@mR+1
  1372   000AE6  ECBE  F009         	call	_turnLeft	;wreg free
  1373   000AEA  EF9D  F006         	goto	l4458
  1374   000AEE                     l4426:
  1375   000AEE  90D8               	bcf	status,0,c
  1376   000AF0  3447               	rlcf	_index^0,w,c
  1377   000AF2  6ED9               	movwf	fsr2l,c
  1378   000AF4  3448               	rlcf	(_index+1)^0,w,c
  1379   000AF6  6EDA               	movwf	fsr2h,c
  1380   000AF8  0EFE               	movlw	low (_movement_list+65534)
  1381   000AFA  26D9               	addwf	fsr2l,f,c
  1382   000AFC  0E01               	movlw	high (_movement_list+65534)
  1383   000AFE  22DA               	addwfc	fsr2h,f,c
  1384   000B00  0EFE               	movlw	254
  1385   000B02  18DE               	xorwf	postinc2,w,c
  1386   000B04  E106               	bnz	u3821
  1387   000B06  28DE               	incf	postinc2,w,c
  1388   000B08  A4D8               	btfss	status,2,c
  1389   000B0A  EF89  F005         	goto	u3821
  1390   000B0E  EF8B  F005         	goto	u3820
  1391   000B12                     u3821:
  1392   000B12  EF97  F005         	goto	l4430
  1393   000B16                     u3820:
  1394   000B16  C02B  F021         	movff	return_back@motorL,turnRight@mL
  1395   000B1A  C02C  F022         	movff	return_back@motorL+1,turnRight@mL+1
  1396   000B1E  C02D  F023         	movff	return_back@motorR,turnRight@mR
  1397   000B22  C02E  F024         	movff	return_back@motorR+1,turnRight@mR+1
  1398   000B26  EC13  F00B         	call	_turnRight	;wreg free
  1399   000B2A  EF9D  F006         	goto	l4458
  1400   000B2E                     l4430:
  1401   000B2E  90D8               	bcf	status,0,c
  1402   000B30  3447               	rlcf	_index^0,w,c
  1403   000B32  6ED9               	movwf	fsr2l,c
  1404   000B34  3448               	rlcf	(_index+1)^0,w,c
  1405   000B36  6EDA               	movwf	fsr2h,c
  1406   000B38  0EFE               	movlw	low (_movement_list+65534)
  1407   000B3A  26D9               	addwf	fsr2l,f,c
  1408   000B3C  0E01               	movlw	high (_movement_list+65534)
  1409   000B3E  22DA               	addwfc	fsr2h,f,c
  1410   000B40  0EFD               	movlw	253
  1411   000B42  18DE               	xorwf	postinc2,w,c
  1412   000B44  E106               	bnz	u3831
  1413   000B46  28DE               	incf	postinc2,w,c
  1414   000B48  A4D8               	btfss	status,2,c
  1415   000B4A  EFA9  F005         	goto	u3831
  1416   000B4E  EFAB  F005         	goto	u3830
  1417   000B52                     u3831:
  1418   000B52  EFB7  F005         	goto	l4434
  1419   000B56                     u3830:
  1420   000B56  C02B  F021         	movff	return_back@motorL,turnLeftLong@mL
  1421   000B5A  C02C  F022         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1422   000B5E  C02D  F023         	movff	return_back@motorR,turnLeftLong@mR
  1423   000B62  C02E  F024         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1424   000B66  EC11  F009         	call	_turnLeftLong	;wreg free
  1425   000B6A  EF9D  F006         	goto	l4458
  1426   000B6E                     l4434:
  1427   000B6E  90D8               	bcf	status,0,c
  1428   000B70  3447               	rlcf	_index^0,w,c
  1429   000B72  6ED9               	movwf	fsr2l,c
  1430   000B74  3448               	rlcf	(_index+1)^0,w,c
  1431   000B76  6EDA               	movwf	fsr2h,c
  1432   000B78  0EFE               	movlw	low (_movement_list+65534)
  1433   000B7A  26D9               	addwf	fsr2l,f,c
  1434   000B7C  0E01               	movlw	high (_movement_list+65534)
  1435   000B7E  22DA               	addwfc	fsr2h,f,c
  1436   000B80  0EFC               	movlw	252
  1437   000B82  18DE               	xorwf	postinc2,w,c
  1438   000B84  E106               	bnz	u3841
  1439   000B86  28DE               	incf	postinc2,w,c
  1440   000B88  A4D8               	btfss	status,2,c
  1441   000B8A  EFC9  F005         	goto	u3841
  1442   000B8E  EFCB  F005         	goto	u3840
  1443   000B92                     u3841:
  1444   000B92  EFD7  F005         	goto	l4438
  1445   000B96                     u3840:
  1446   000B96  C02B  F021         	movff	return_back@motorL,turnRightLong@mL
  1447   000B9A  C02C  F022         	movff	return_back@motorL+1,turnRightLong@mL+1
  1448   000B9E  C02D  F023         	movff	return_back@motorR,turnRightLong@mR
  1449   000BA2  C02E  F024         	movff	return_back@motorR+1,turnRightLong@mR+1
  1450   000BA6  EC6B  F00A         	call	_turnRightLong	;wreg free
  1451   000BAA  EF9D  F006         	goto	l4458
  1452   000BAE                     l4438:
  1453   000BAE  90D8               	bcf	status,0,c
  1454   000BB0  3447               	rlcf	_index^0,w,c
  1455   000BB2  6ED9               	movwf	fsr2l,c
  1456   000BB4  3448               	rlcf	(_index+1)^0,w,c
  1457   000BB6  6EDA               	movwf	fsr2h,c
  1458   000BB8  0EFE               	movlw	low (_movement_list+65534)
  1459   000BBA  26D9               	addwf	fsr2l,f,c
  1460   000BBC  0E01               	movlw	high (_movement_list+65534)
  1461   000BBE  22DA               	addwfc	fsr2h,f,c
  1462   000BC0  0E01               	movlw	1
  1463   000BC2  BEDB               	btfsc	plusw2,7,c
  1464   000BC4  EFED  F005         	goto	u3851
  1465   000BC8  0E01               	movlw	1
  1466   000BCA  50DB               	movf	plusw2,w,c
  1467   000BCC  E108               	bnz	u3850
  1468   000BCE  04DE               	decf	postinc2,w,c
  1469   000BD0  A0D8               	btfss	status,0,c
  1470   000BD2  EFED  F005         	goto	u3851
  1471   000BD6  EFEF  F005         	goto	u3850
  1472   000BDA                     u3851:
  1473   000BDA  EF48  F006         	goto	l4450
  1474   000BDE                     u3850:
  1475   000BDE  90D8               	bcf	status,0,c
  1476   000BE0  3447               	rlcf	_index^0,w,c
  1477   000BE2  6ED9               	movwf	fsr2l,c
  1478   000BE4  3448               	rlcf	(_index+1)^0,w,c
  1479   000BE6  6EDA               	movwf	fsr2h,c
  1480   000BE8  0EFC               	movlw	low (_movement_list+65532)
  1481   000BEA  26D9               	addwf	fsr2l,f,c
  1482   000BEC  0E01               	movlw	high (_movement_list+65532)
  1483   000BEE  22DA               	addwfc	fsr2h,f,c
  1484   000BF0  0E01               	movlw	1
  1485   000BF2  AEDB               	btfss	plusw2,7,c
  1486   000BF4  EF07  F006         	goto	u3860
  1487   000BF8  0EFE               	movlw	254
  1488   000BFA  5CDE               	subwf	postinc2,w,c
  1489   000BFC  0EFF               	movlw	255
  1490   000BFE  58DE               	subwfb	postinc2,w,c
  1491   000C00  A0D8               	btfss	status,0,c
  1492   000C02  EF05  F006         	goto	u3861
  1493   000C06  EF07  F006         	goto	u3860
  1494   000C0A                     u3861:
  1495   000C0A  EF48  F006         	goto	l4450
  1496   000C0E                     u3860:
  1497   000C0E                     
  1498                           ;dc_motor.c: 437:         {;dc_motor.c: 438:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1499   000C0E  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1500   000C12  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1501   000C16  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1502   000C1A  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1503   000C1E  90D8               	bcf	status,0,c
  1504   000C20  3447               	rlcf	_index^0,w,c
  1505   000C22  6ED9               	movwf	fsr2l,c
  1506   000C24  3448               	rlcf	(_index+1)^0,w,c
  1507   000C26  6EDA               	movwf	fsr2h,c
  1508   000C28  0EFE               	movlw	low (_movement_list+65534)
  1509   000C2A  26D9               	addwf	fsr2l,f,c
  1510   000C2C  0E01               	movlw	high (_movement_list+65534)
  1511   000C2E  22DA               	addwfc	fsr2h,f,c
  1512   000C30  CFDE F025          	movff	postinc2,TimedfullSpeedAhead@time
  1513   000C34  CFDD F026          	movff	postdec2,TimedfullSpeedAhead@time+1
  1514   000C38  EC69  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1515   000C3C                     
  1516                           ;dc_motor.c: 439:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1517   000C3C  0E11               	movlw	17
  1518   000C3E  6E30               	movwf	(??_return_back+1)^0,c
  1519   000C40  0E3C               	movlw	60
  1520   000C42  6E2F               	movwf	??_return_back^0,c
  1521   000C44  0ECB               	movlw	203
  1522   000C46                     u4327:
  1523   000C46  2EE8               	decfsz	wreg,f,c
  1524   000C48  D7FE               	bra	u4327
  1525   000C4A  2E2F               	decfsz	??_return_back^0,f,c
  1526   000C4C  D7FC               	bra	u4327
  1527   000C4E  2E30               	decfsz	(??_return_back+1)^0,f,c
  1528   000C50  D7FA               	bra	u4327
  1529   000C52  F000               	nop	
  1530   000C54                     
  1531                           ;dc_motor.c: 440:             TimedfullSpeedAhead(motorL, motorR, halfblock);
  1532   000C54  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1533   000C58  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1534   000C5C  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1535   000C60  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1536   000C64  0E00               	movlw	0
  1537   000C66  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1538   000C68  0E05               	movlw	5
  1539   000C6A  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1540   000C6C  EC69  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1541   000C70                     
  1542                           ;dc_motor.c: 441:             moveBack(motorL, motorR, halfblock);
  1543   000C70  C02B  F021         	movff	return_back@motorL,moveBack@mL
  1544   000C74  C02C  F022         	movff	return_back@motorL+1,moveBack@mL+1
  1545   000C78  C02D  F023         	movff	return_back@motorR,moveBack@mR
  1546   000C7C  C02E  F024         	movff	return_back@motorR+1,moveBack@mR+1
  1547   000C80  0E00               	movlw	0
  1548   000C82  6E26               	movwf	(moveBack@time+1)^0,c
  1549   000C84  0E05               	movlw	5
  1550   000C86  6E25               	movwf	moveBack@time^0,c
  1551   000C88  EC2F  F00E         	call	_moveBack	;wreg free
  1552                           
  1553                           ;dc_motor.c: 442:         }
  1554   000C8C  EF9D  F006         	goto	l4458
  1555   000C90                     l4450:
  1556   000C90  90D8               	bcf	status,0,c
  1557   000C92  3447               	rlcf	_index^0,w,c
  1558   000C94  6ED9               	movwf	fsr2l,c
  1559   000C96  3448               	rlcf	(_index+1)^0,w,c
  1560   000C98  6EDA               	movwf	fsr2h,c
  1561   000C9A  0EFE               	movlw	low (_movement_list+65534)
  1562   000C9C  26D9               	addwf	fsr2l,f,c
  1563   000C9E  0E01               	movlw	high (_movement_list+65534)
  1564   000CA0  22DA               	addwfc	fsr2h,f,c
  1565   000CA2  0E01               	movlw	1
  1566   000CA4  BEDB               	btfsc	plusw2,7,c
  1567   000CA6  EF5E  F006         	goto	u3871
  1568   000CAA  0E01               	movlw	1
  1569   000CAC  50DB               	movf	plusw2,w,c
  1570   000CAE  E108               	bnz	u3870
  1571   000CB0  04DE               	decf	postinc2,w,c
  1572   000CB2  A0D8               	btfss	status,0,c
  1573   000CB4  EF5E  F006         	goto	u3871
  1574   000CB8  EF60  F006         	goto	u3870
  1575   000CBC                     u3871:
  1576   000CBC  EF9D  F006         	goto	l348
  1577   000CC0                     u3870:
  1578   000CC0  90D8               	bcf	status,0,c
  1579   000CC2  3447               	rlcf	_index^0,w,c
  1580   000CC4  6ED9               	movwf	fsr2l,c
  1581   000CC6  3448               	rlcf	(_index+1)^0,w,c
  1582   000CC8  6EDA               	movwf	fsr2h,c
  1583   000CCA  0EFC               	movlw	low (_movement_list+65532)
  1584   000CCC  26D9               	addwf	fsr2l,f,c
  1585   000CCE  0E01               	movlw	high (_movement_list+65532)
  1586   000CD0  22DA               	addwfc	fsr2h,f,c
  1587   000CD2  0E01               	movlw	1
  1588   000CD4  AEDB               	btfss	plusw2,7,c
  1589   000CD6  EF76  F006         	goto	u3881
  1590   000CDA  0EFE               	movlw	254
  1591   000CDC  5CDE               	subwf	postinc2,w,c
  1592   000CDE  0EFF               	movlw	255
  1593   000CE0  58DE               	subwfb	postinc2,w,c
  1594   000CE2  B0D8               	btfsc	status,0,c
  1595   000CE4  EF76  F006         	goto	u3881
  1596   000CE8  EF78  F006         	goto	u3880
  1597   000CEC                     u3881:
  1598   000CEC  EF9D  F006         	goto	l348
  1599   000CF0                     u3880:
  1600   000CF0                     
  1601                           ;dc_motor.c: 444:         {;dc_motor.c: 445:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1602   000CF0  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1603   000CF4  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1604   000CF8  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1605   000CFC  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1606   000D00  90D8               	bcf	status,0,c
  1607   000D02  3447               	rlcf	_index^0,w,c
  1608   000D04  6ED9               	movwf	fsr2l,c
  1609   000D06  3448               	rlcf	(_index+1)^0,w,c
  1610   000D08  6EDA               	movwf	fsr2h,c
  1611   000D0A  0EFE               	movlw	low (_movement_list+65534)
  1612   000D0C  26D9               	addwf	fsr2l,f,c
  1613   000D0E  0E01               	movlw	high (_movement_list+65534)
  1614   000D10  22DA               	addwfc	fsr2h,f,c
  1615   000D12  CFDE F025          	movff	postinc2,TimedfullSpeedAhead@time
  1616   000D16  CFDD F026          	movff	postdec2,TimedfullSpeedAhead@time+1
  1617   000D1A  EC69  F00E         	call	_TimedfullSpeedAhead	;wreg free
  1618   000D1E                     
  1619                           ;dc_motor.c: 446:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1620   000D1E  0E11               	movlw	17
  1621   000D20  6E30               	movwf	(??_return_back+1)^0,c
  1622   000D22  0E3C               	movlw	60
  1623   000D24  6E2F               	movwf	??_return_back^0,c
  1624   000D26  0ECB               	movlw	203
  1625   000D28                     u4337:
  1626   000D28  2EE8               	decfsz	wreg,f,c
  1627   000D2A  D7FE               	bra	u4337
  1628   000D2C  2E2F               	decfsz	??_return_back^0,f,c
  1629   000D2E  D7FC               	bra	u4337
  1630   000D30  2E30               	decfsz	(??_return_back+1)^0,f,c
  1631   000D32  D7FA               	bra	u4337
  1632   000D34  F000               	nop	
  1633   000D36  EF9D  F006         	goto	l4458
  1634   000D3A                     l348:
  1635   000D3A                     l4458:
  1636                           
  1637                           ;dc_motor.c: 448:         stop(motorL,motorR);
  1638   000D3A  C02B  F021         	movff	return_back@motorL,stop@mL
  1639   000D3E  C02C  F022         	movff	return_back@motorL+1,stop@mL+1
  1640   000D42  C02D  F023         	movff	return_back@motorR,stop@mR
  1641   000D46  C02E  F024         	movff	return_back@motorR+1,stop@mR+1
  1642   000D4A  EC72  F010         	call	_stop	;wreg free
  1643   000D4E                     
  1644                           ;dc_motor.c: 449:         index -= 1;
  1645   000D4E  0647               	decf	_index^0,f,c
  1646   000D50  A0D8               	btfss	status,0,c
  1647   000D52  0648               	decf	(_index+1)^0,f,c
  1648   000D54                     l341:
  1649                           
  1650                           ;dc_motor.c: 431:     while (index > 0){
  1651   000D54  BE48               	btfsc	(_index+1)^0,7,c
  1652   000D56  EFB7  F006         	goto	u3890
  1653   000D5A  5048               	movf	(_index+1)^0,w,c
  1654   000D5C  E106               	bnz	u3891
  1655   000D5E  0447               	decf	_index^0,w,c
  1656   000D60  B0D8               	btfsc	status,0,c
  1657   000D62  EFB5  F006         	goto	u3891
  1658   000D66  EFB7  F006         	goto	u3890
  1659   000D6A                     u3891:
  1660   000D6A  EF58  F005         	goto	l4422
  1661   000D6E                     u3890:
  1662   000D6E                     
  1663                           ;dc_motor.c: 451:     if (index == 0){state = 2;}
  1664   000D6E  5047               	movf	_index^0,w,c
  1665   000D70  1048               	iorwf	(_index+1)^0,w,c
  1666   000D72  A4D8               	btfss	status,2,c
  1667   000D74  EFBE  F006         	goto	u3901
  1668   000D78  EFC0  F006         	goto	u3900
  1669   000D7C                     u3901:
  1670   000D7C  EFC5  F006         	goto	l356
  1671   000D80                     u3900:
  1672   000D80  0E00               	movlw	0
  1673   000D82  0100               	movlb	0	; () banked
  1674   000D84  6FF5               	movwf	(_state+1)& (0+255),b
  1675   000D86  0E02               	movlw	2
  1676   000D88  6FF4               	movwf	_state& (0+255),b
  1677   000D8A                     l356:
  1678   000D8A  0012               	return		;funcret
  1679   000D8C                     __end_of_return_back:
  1680                           	callstack 0
  1681                           
  1682 ;; *************** function _initDCmotorsPWM *****************
  1683 ;; Defined at:
  1684 ;;		line 14 in file "dc_motor.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;  PWMperiod       2   13[COMRAM] int 
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1698 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1701 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1702 ;;Total ram usage:        2 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 5
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text3
  1713   001BCE                     __ptext3:
  1714                           	callstack 0
  1715   001BCE                     _initDCmotorsPWM:
  1716                           	callstack 25
  1717   001BCE                     
  1718                           ;dc_motor.c: 16:     TRISEbits.TRISE2=0;
  1719   001BCE  9485               	bcf	133,2,c	;volatile
  1720                           
  1721                           ;dc_motor.c: 17:     TRISCbits.TRISC7=0;
  1722   001BD0  9E83               	bcf	131,7,c	;volatile
  1723                           
  1724                           ;dc_motor.c: 18:     TRISGbits.TRISG6=0;
  1725   001BD2  9C87               	bcf	135,6,c	;volatile
  1726                           
  1727                           ;dc_motor.c: 19:     TRISEbits.TRISE4=0;
  1728   001BD4  9885               	bcf	133,4,c	;volatile
  1729                           
  1730                           ;dc_motor.c: 21:     LATEbits.LATE2=0;
  1731   001BD6  947D               	bcf	125,2,c	;volatile
  1732                           
  1733                           ;dc_motor.c: 22:     LATCbits.LATC7=0;
  1734   001BD8  9E7B               	bcf	123,7,c	;volatile
  1735                           
  1736                           ;dc_motor.c: 23:     LATGbits.LATG6=0;
  1737   001BDA  9C7F               	bcf	127,6,c	;volatile
  1738                           
  1739                           ;dc_motor.c: 24:     LATEbits.LATE4=0;
  1740   001BDC  987D               	bcf	125,4,c	;volatile
  1741   001BDE                     
  1742                           ;dc_motor.c: 27:     RE2PPS=0x05;
  1743   001BDE  0E05               	movlw	5
  1744   001BE0  010E               	movlb	14	; () banked
  1745   001BE2  6F74               	movwf	116,b	;volatile
  1746                           
  1747                           ;dc_motor.c: 28:     RE4PPS=0x06;
  1748   001BE4  0E06               	movlw	6
  1749   001BE6  6F76               	movwf	118,b	;volatile
  1750                           
  1751                           ;dc_motor.c: 29:     RC7PPS=0x07;
  1752   001BE8  0E07               	movlw	7
  1753   001BEA  6F69               	movwf	105,b	;volatile
  1754                           
  1755                           ;dc_motor.c: 30:     RG6PPS=0x08;
  1756   001BEC  0E08               	movlw	8
  1757   001BEE  6F88               	movwf	136,b	;volatile
  1758                           
  1759                           ;dc_motor.c: 33:     T2CONbits.CKPS=0b100;
  1760   001BF0  50BD               	movf	189,w,c	;volatile
  1761   001BF2  0B8F               	andlw	-113
  1762   001BF4  0940               	iorlw	64
  1763   001BF6  6EBD               	movwf	189,c	;volatile
  1764                           
  1765                           ;dc_motor.c: 34:     T2HLTbits.MODE=0b00000;
  1766   001BF8  0EE0               	movlw	-32
  1767   001BFA  16BE               	andwf	190,f,c	;volatile
  1768                           
  1769                           ;dc_motor.c: 35:     T2CLKCONbits.CS=0b0001;
  1770   001BFC  50BF               	movf	191,w,c	;volatile
  1771   001BFE  0BF0               	andlw	-16
  1772   001C00  0901               	iorlw	1
  1773   001C02  6EBF               	movwf	191,c	;volatile
  1774                           
  1775                           ;dc_motor.c: 39:     T2PR=99;
  1776   001C04  0E63               	movlw	99
  1777   001C06  6EBC               	movwf	188,c	;volatile
  1778   001C08                     
  1779                           ; BSR set to: 14
  1780                           ;dc_motor.c: 40:     T2CONbits.ON=1;
  1781   001C08  8EBD               	bsf	189,7,c	;volatile
  1782                           
  1783                           ;dc_motor.c: 44:     CCPR1H=0;
  1784   001C0A  0E00               	movlw	0
  1785   001C0C  6EAA               	movwf	170,c	;volatile
  1786                           
  1787                           ;dc_motor.c: 45:     CCPR2H=0;
  1788   001C0E  0E00               	movlw	0
  1789   001C10  6EA6               	movwf	166,c	;volatile
  1790                           
  1791                           ;dc_motor.c: 46:     CCPR3H=0;
  1792   001C12  0E00               	movlw	0
  1793   001C14  010F               	movlb	15	; () banked
  1794   001C16  6F25               	movwf	37,b	;volatile
  1795                           
  1796                           ;dc_motor.c: 47:     CCPR4H=0;
  1797   001C18  0E00               	movlw	0
  1798   001C1A  6F21               	movwf	33,b	;volatile
  1799                           
  1800                           ;dc_motor.c: 50:     CCPTMRS0bits.C1TSEL=0;
  1801   001C1C  0EFC               	movlw	-4
  1802   001C1E  16AD               	andwf	173,f,c	;volatile
  1803                           
  1804                           ;dc_motor.c: 51:     CCPTMRS0bits.C2TSEL=0;
  1805   001C20  0EF3               	movlw	-13
  1806   001C22  16AD               	andwf	173,f,c	;volatile
  1807                           
  1808                           ;dc_motor.c: 52:     CCPTMRS0bits.C3TSEL=0;
  1809   001C24  0ECF               	movlw	-49
  1810   001C26  16AD               	andwf	173,f,c	;volatile
  1811                           
  1812                           ;dc_motor.c: 53:     CCPTMRS0bits.C4TSEL=0;
  1813   001C28  0E3F               	movlw	-193
  1814   001C2A  16AD               	andwf	173,f,c	;volatile
  1815   001C2C                     
  1816                           ; BSR set to: 15
  1817                           ;dc_motor.c: 56:     CCP1CONbits.FMT=1;
  1818   001C2C  88AB               	bsf	171,4,c	;volatile
  1819                           
  1820                           ;dc_motor.c: 57:     CCP1CONbits.CCP1MODE=0b1100;
  1821   001C2E  50AB               	movf	171,w,c	;volatile
  1822   001C30  0BF0               	andlw	-16
  1823   001C32  090C               	iorlw	12
  1824   001C34  6EAB               	movwf	171,c	;volatile
  1825   001C36                     
  1826                           ; BSR set to: 15
  1827                           ;dc_motor.c: 58:     CCP1CONbits.EN=1;
  1828   001C36  8EAB               	bsf	171,7,c	;volatile
  1829   001C38                     
  1830                           ; BSR set to: 15
  1831                           ;dc_motor.c: 60:     CCP2CONbits.FMT=1;
  1832   001C38  88A7               	bsf	167,4,c	;volatile
  1833                           
  1834                           ;dc_motor.c: 61:     CCP2CONbits.CCP2MODE=0b1100;
  1835   001C3A  50A7               	movf	167,w,c	;volatile
  1836   001C3C  0BF0               	andlw	-16
  1837   001C3E  090C               	iorlw	12
  1838   001C40  6EA7               	movwf	167,c	;volatile
  1839   001C42                     
  1840                           ; BSR set to: 15
  1841                           ;dc_motor.c: 62:     CCP2CONbits.EN=1;
  1842   001C42  8EA7               	bsf	167,7,c	;volatile
  1843   001C44                     
  1844                           ; BSR set to: 15
  1845                           ;dc_motor.c: 64:     CCP3CONbits.FMT=1;
  1846   001C44  8926               	bsf	38,4,b	;volatile
  1847                           
  1848                           ;dc_motor.c: 65:     CCP3CONbits.CCP3MODE=0b1100;
  1849   001C46  5126               	movf	38,w,b	;volatile
  1850   001C48  0BF0               	andlw	-16
  1851   001C4A  090C               	iorlw	12
  1852   001C4C  6F26               	movwf	38,b	;volatile
  1853   001C4E                     
  1854                           ; BSR set to: 15
  1855                           ;dc_motor.c: 66:     CCP3CONbits.EN=1;
  1856   001C4E  8F26               	bsf	38,7,b	;volatile
  1857   001C50                     
  1858                           ; BSR set to: 15
  1859                           ;dc_motor.c: 68:     CCP4CONbits.FMT=1;
  1860   001C50  8922               	bsf	34,4,b	;volatile
  1861                           
  1862                           ;dc_motor.c: 69:     CCP4CONbits.CCP4MODE=0b1100;
  1863   001C52  5122               	movf	34,w,b	;volatile
  1864   001C54  0BF0               	andlw	-16
  1865   001C56  090C               	iorlw	12
  1866   001C58  6F22               	movwf	34,b	;volatile
  1867   001C5A                     
  1868                           ; BSR set to: 15
  1869                           ;dc_motor.c: 70:     CCP4CONbits.EN=1;
  1870   001C5A  8F22               	bsf	34,7,b	;volatile
  1871   001C5C                     
  1872                           ; BSR set to: 15
  1873   001C5C  0012               	return		;funcret
  1874   001C5E                     __end_of_initDCmotorsPWM:
  1875                           	callstack 0
  1876                           
  1877 ;; *************** function _get_wall_detection *****************
  1878 ;; Defined at:
  1879 ;;		line 249 in file "color.c"
  1880 ;; Parameters:    Size  Location     Type
  1881 ;;		None
  1882 ;; Auto vars:     Size  Location     Type
  1883 ;;		None
  1884 ;; Return value:  Size  Location     Type
  1885 ;;                  2   19[COMRAM] unsigned int 
  1886 ;; Registers used:
  1887 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1888 ;; Tracked objects:
  1889 ;;		On entry : 0/0
  1890 ;;		On exit  : 0/0
  1891 ;;		Unchanged: 0/0
  1892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1893 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1896 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1897 ;;Total ram usage:        2 bytes
  1898 ;; Hardware stack levels used: 1
  1899 ;; Hardware stack levels required when called: 6
  1900 ;; This function calls:
  1901 ;;		___wmul
  1902 ;; This function is called by:
  1903 ;;		_main
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           	psect	text4
  1908   001E96                     __ptext4:
  1909                           	callstack 0
  1910   001E96                     _get_wall_detection:
  1911                           	callstack 24
  1912   001E96                     
  1913                           ;color.c: 250:     if(clear1 == 0 || clear2 == 0){return 0;}
  1914   001E96  504D               	movf	_clear1^0,w,c
  1915   001E98  104E               	iorwf	(_clear1+1)^0,w,c
  1916   001E9A  B4D8               	btfsc	status,2,c
  1917   001E9C  EF52  F00F         	goto	u3551
  1918   001EA0  EF54  F00F         	goto	u3550
  1919   001EA4                     u3551:
  1920   001EA4  EF5D  F00F         	goto	l4236
  1921   001EA8                     u3550:
  1922   001EA8  504B               	movf	_clear2^0,w,c
  1923   001EAA  104C               	iorwf	(_clear2+1)^0,w,c
  1924   001EAC  A4D8               	btfss	status,2,c
  1925   001EAE  EF5B  F00F         	goto	u3561
  1926   001EB2  EF5D  F00F         	goto	u3560
  1927   001EB6                     u3561:
  1928   001EB6  EF63  F00F         	goto	l4240
  1929   001EBA                     u3560:
  1930   001EBA                     l4236:
  1931   001EBA  0E00               	movlw	0
  1932   001EBC  6E15               	movwf	(?_get_wall_detection+1)^0,c
  1933   001EBE  0E00               	movlw	0
  1934   001EC0  6E14               	movwf	?_get_wall_detection^0,c
  1935   001EC2  EF7C  F00F         	goto	l159
  1936   001EC6                     l4240:
  1937                           
  1938                           ;color.c: 251:     return clear2 >= clear1*wall_coef;
  1939   001EC6  C04D  F00E         	movff	_clear1,___wmul@multiplier
  1940   001ECA  C04E  F00F         	movff	_clear1+1,___wmul@multiplier+1
  1941   001ECE  C0A6  F010         	movff	_wall_coef,___wmul@multiplicand
  1942   001ED2  C0A7  F011         	movff	_wall_coef+1,___wmul@multiplicand+1
  1943   001ED6  ECBA  F011         	call	___wmul	;wreg free
  1944   001EDA  500E               	movf	?___wmul^0,w,c
  1945   001EDC  5C4B               	subwf	_clear2^0,w,c
  1946   001EDE  500F               	movf	(?___wmul+1)^0,w,c
  1947   001EE0  584C               	subwfb	(_clear2+1)^0,w,c
  1948   001EE2  B0D8               	btfsc	status,0,c
  1949   001EE4  EF76  F00F         	goto	u3571
  1950   001EE8  EF79  F00F         	goto	u3570
  1951   001EEC                     u3571:
  1952   001EEC  0E01               	movlw	1
  1953   001EEE  EF7A  F00F         	goto	u3580
  1954   001EF2                     u3570:
  1955   001EF2  0E00               	movlw	0
  1956   001EF4                     u3580:
  1957   001EF4  6E14               	movwf	?_get_wall_detection^0,c
  1958   001EF6  6A15               	clrf	(?_get_wall_detection+1)^0,c
  1959   001EF8                     l159:
  1960   001EF8  0012               	return		;funcret
  1961   001EFA                     __end_of_get_wall_detection:
  1962                           	callstack 0
  1963                           
  1964 ;; *************** function _get_state *****************
  1965 ;; Defined at:
  1966 ;;		line 414 in file "dc_motor.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  2   13[COMRAM] int 
  1973 ;; Registers used:
  1974 ;;		None
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1980 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1984 ;;Total ram usage:        2 bytes
  1985 ;; Hardware stack levels used: 1
  1986 ;; Hardware stack levels required when called: 5
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text5
  1995   002424                     __ptext5:
  1996                           	callstack 0
  1997   002424                     _get_state:
  1998                           	callstack 25
  1999   002424                     
  2000                           ;dc_motor.c: 416:     return state;
  2001   002424  C0F4  F00E         	movff	_state,?_get_state
  2002   002428  C0F5  F00F         	movff	_state+1,?_get_state+1
  2003   00242C  0012               	return		;funcret
  2004   00242E                     __end_of_get_state:
  2005                           	callstack 0
  2006                           
  2007 ;; *************** function _get_color_code *****************
  2008 ;; Defined at:
  2009 ;;		line 180 in file "color.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  value           2   46[BANK0 ] unsigned int 
  2014 ;;  i               2   48[BANK0 ] unsigned int 
  2015 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  2016 ;;  min_index       2   44[BANK0 ] unsigned int 
  2017 ;;  min_value       2   42[BANK0 ] unsigned int 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2   47[COMRAM] unsigned int 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2027 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2028 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2029 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2030 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2031 ;;Total ram usage:       48 bytes
  2032 ;; Hardware stack levels used: 1
  2033 ;; Hardware stack levels required when called: 8
  2034 ;; This function calls:
  2035 ;;		___lldiv
  2036 ;;		___lmul
  2037 ;;		___wmul
  2038 ;;		_color_read_Blue
  2039 ;;		_color_read_Green
  2040 ;;		_color_read_Red
  2041 ;;		_get_color_distance
  2042 ;;		_set_led_color
  2043 ;; This function is called by:
  2044 ;;		_main
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text6
  2049   00070E                     __ptext6:
  2050                           	callstack 0
  2051   00070E                     _get_color_code:
  2052                           	callstack 22
  2053   00070E                     
  2054                           ;color.c: 184:     set_led_color(0b100);
  2055   00070E  0E00               	movlw	0
  2056   000710  6E0F               	movwf	(set_led_color@color+1)^0,c
  2057   000712  0E04               	movlw	4
  2058   000714  6E0E               	movwf	set_led_color@color^0,c
  2059   000716  ECDF  F010         	call	_set_led_color	;wreg free
  2060   00071A                     
  2061                           ;color.c: 185:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2062   00071A  0E12               	movlw	18
  2063   00071C  6E33               	movwf	(??_get_color_code+1)^0,c
  2064   00071E  0EDC               	movlw	220
  2065   000720  6E32               	movwf	??_get_color_code^0,c
  2066   000722  0E60               	movlw	96
  2067   000724                     u4347:
  2068   000724  2EE8               	decfsz	wreg,f,c
  2069   000726  D7FE               	bra	u4347
  2070   000728  2E32               	decfsz	??_get_color_code^0,f,c
  2071   00072A  D7FC               	bra	u4347
  2072   00072C  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2073   00072E  D7FA               	bra	u4347
  2074   000730                     
  2075                           ;color.c: 186:     RGB.R = color_read_Red();
  2076   000730  ECAA  F00F         	call	_color_read_Red	;wreg free
  2077   000734  C012  F0E6         	movff	?_color_read_Red,_RGB
  2078   000738  C013  F0E7         	movff	?_color_read_Red+1,_RGB+1
  2079   00073C  0100               	movlb	0	; () banked
  2080   00073E  6BE8               	clrf	(_RGB+2)& (0+255),b
  2081   000740  6BE9               	clrf	(_RGB+3)& (0+255),b
  2082   000742                     
  2083                           ; BSR set to: 0
  2084                           ;color.c: 187:     set_led_color(0b010);
  2085   000742  0E00               	movlw	0
  2086   000744  6E0F               	movwf	(set_led_color@color+1)^0,c
  2087   000746  0E02               	movlw	2
  2088   000748  6E0E               	movwf	set_led_color@color^0,c
  2089   00074A  ECDF  F010         	call	_set_led_color	;wreg free
  2090   00074E                     
  2091                           ;color.c: 188:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2092   00074E  0E12               	movlw	18
  2093   000750  6E33               	movwf	(??_get_color_code+1)^0,c
  2094   000752  0EDC               	movlw	220
  2095   000754  6E32               	movwf	??_get_color_code^0,c
  2096   000756  0E60               	movlw	96
  2097   000758                     u4357:
  2098   000758  2EE8               	decfsz	wreg,f,c
  2099   00075A  D7FE               	bra	u4357
  2100   00075C  2E32               	decfsz	??_get_color_code^0,f,c
  2101   00075E  D7FC               	bra	u4357
  2102   000760  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2103   000762  D7FA               	bra	u4357
  2104                           
  2105                           ;color.c: 189:     RGB.G = color_read_Green();
  2106   000764  ECD2  F00F         	call	_color_read_Green	;wreg free
  2107   000768  C012  F0EA         	movff	?_color_read_Green,_RGB+4
  2108   00076C  C013  F0EB         	movff	?_color_read_Green+1,_RGB+5
  2109   000770  0100               	movlb	0	; () banked
  2110   000772  6BEC               	clrf	(_RGB+6)& (0+255),b
  2111   000774  6BED               	clrf	(_RGB+7)& (0+255),b
  2112   000776                     
  2113                           ; BSR set to: 0
  2114                           ;color.c: 190:     set_led_color(0b001);
  2115   000776  0E00               	movlw	0
  2116   000778  6E0F               	movwf	(set_led_color@color+1)^0,c
  2117   00077A  0E01               	movlw	1
  2118   00077C  6E0E               	movwf	set_led_color@color^0,c
  2119   00077E  ECDF  F010         	call	_set_led_color	;wreg free
  2120   000782                     
  2121                           ;color.c: 191:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2122   000782  0E12               	movlw	18
  2123   000784  6E33               	movwf	(??_get_color_code+1)^0,c
  2124   000786  0EDC               	movlw	220
  2125   000788  6E32               	movwf	??_get_color_code^0,c
  2126   00078A  0E60               	movlw	96
  2127   00078C                     u4367:
  2128   00078C  2EE8               	decfsz	wreg,f,c
  2129   00078E  D7FE               	bra	u4367
  2130   000790  2E32               	decfsz	??_get_color_code^0,f,c
  2131   000792  D7FC               	bra	u4367
  2132   000794  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2133   000796  D7FA               	bra	u4367
  2134   000798                     
  2135                           ;color.c: 192:     RGB.B = color_read_Blue();
  2136   000798  EC22  F010         	call	_color_read_Blue	;wreg free
  2137   00079C  C012  F0EE         	movff	?_color_read_Blue,_RGB+8
  2138   0007A0  C013  F0EF         	movff	?_color_read_Blue+1,_RGB+9
  2139   0007A4  0100               	movlb	0	; () banked
  2140   0007A6  6BF0               	clrf	(_RGB+10)& (0+255),b
  2141   0007A8  6BF1               	clrf	(_RGB+11)& (0+255),b
  2142   0007AA                     
  2143                           ; BSR set to: 0
  2144                           ;color.c: 193:     set_led_color(0b000);
  2145   0007AA  0E00               	movlw	0
  2146   0007AC  6E0F               	movwf	(set_led_color@color+1)^0,c
  2147   0007AE  0E00               	movlw	0
  2148   0007B0  6E0E               	movwf	set_led_color@color^0,c
  2149   0007B2  ECDF  F010         	call	_set_led_color	;wreg free
  2150   0007B6                     
  2151                           ;color.c: 195:     struct RGB_val NormalizedRGB;;color.c: 196:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  2152   0007B6  5039               	movf	_Black_setup^0,w,c
  2153   0007B8  0100               	movlb	0	; () banked
  2154   0007BA  5DE6               	subwf	_RGB& (0+255),w,b
  2155   0007BC  503A               	movf	(_Black_setup+1)^0,w,c
  2156   0007BE  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2157   0007C0  503B               	movf	(_Black_setup+2)^0,w,c
  2158   0007C2  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2159   0007C4  503C               	movf	(_Black_setup+3)^0,w,c
  2160   0007C6  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2161   0007C8  B0D8               	btfsc	status,0,c
  2162   0007CA  EFE9  F003         	goto	u3451
  2163   0007CE  EFEB  F003         	goto	u3450
  2164   0007D2                     u3451:
  2165   0007D2  EFF5  F003         	goto	l4190
  2166   0007D6                     u3450:
  2167   0007D6                     
  2168                           ; BSR set to: 0
  2169   0007D6  0E00               	movlw	0
  2170   0007D8  6FC6               	movwf	_get_color_code$463& (0+255),b
  2171   0007DA  0E00               	movlw	0
  2172   0007DC  6FC7               	movwf	(_get_color_code$463+1)& (0+255),b
  2173   0007DE  0E00               	movlw	0
  2174   0007E0  6FC8               	movwf	(_get_color_code$463+2)& (0+255),b
  2175   0007E2  0E00               	movlw	0
  2176   0007E4  6FC9               	movwf	(_get_color_code$463+3)& (0+255),b
  2177   0007E6  EF2A  F004         	goto	l4192
  2178   0007EA                     l4190:
  2179                           
  2180                           ; BSR set to: 0
  2181   0007EA  5039               	movf	_Black_setup^0,w,c
  2182   0007EC  5DE6               	subwf	_RGB& (0+255),w,b
  2183   0007EE  6E0E               	movwf	___lmul@multiplier^0,c
  2184   0007F0  503A               	movf	(_Black_setup+1)^0,w,c
  2185   0007F2  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2186   0007F4  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2187   0007F6  503B               	movf	(_Black_setup+2)^0,w,c
  2188   0007F8  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2189   0007FA  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2190   0007FC  503C               	movf	(_Black_setup+3)^0,w,c
  2191   0007FE  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2192   000800  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2193   000802  0E64               	movlw	100
  2194   000804  6E12               	movwf	___lmul@multiplicand^0,c
  2195   000806  0E00               	movlw	0
  2196   000808  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2197   00080A  0E00               	movlw	0
  2198   00080C  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2199   00080E  0E00               	movlw	0
  2200   000810  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2201   000812  EC16  F00F         	call	___lmul	;wreg free
  2202   000816  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2203   00081A  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2204   00081E  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2205   000822  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2206   000826  5039               	movf	_Black_setup^0,w,c
  2207   000828  0100               	movlb	0	; () banked
  2208   00082A  5D60               	subwf	_White_setup& (0+255),w,b
  2209   00082C  6E1E               	movwf	___lldiv@divisor^0,c
  2210   00082E  503A               	movf	(_Black_setup+1)^0,w,c
  2211   000830  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  2212   000832  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2213   000834  503B               	movf	(_Black_setup+2)^0,w,c
  2214   000836  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  2215   000838  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2216   00083A  503C               	movf	(_Black_setup+3)^0,w,c
  2217   00083C  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  2218   00083E  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2219   000840  EC48  F00D         	call	___lldiv	;wreg free
  2220   000844  C01A  F0C6         	movff	?___lldiv,_get_color_code$463
  2221   000848  C01B  F0C7         	movff	?___lldiv+1,_get_color_code$463+1
  2222   00084C  C01C  F0C8         	movff	?___lldiv+2,_get_color_code$463+2
  2223   000850  C01D  F0C9         	movff	?___lldiv+3,_get_color_code$463+3
  2224   000854                     l4192:
  2225   000854  C0C6  F0DA         	movff	_get_color_code$463,get_color_code@NormalizedRGB
  2226   000858  C0C7  F0DB         	movff	_get_color_code$463+1,get_color_code@NormalizedRGB+1
  2227   00085C  C0C8  F0DC         	movff	_get_color_code$463+2,get_color_code@NormalizedRGB+2
  2228   000860  C0C9  F0DD         	movff	_get_color_code$463+3,get_color_code@NormalizedRGB+3
  2229   000864                     
  2230                           ;color.c: 197:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2231   000864  503D               	movf	(_Black_setup+4)^0,w,c
  2232   000866  0100               	movlb	0	; () banked
  2233   000868  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2234   00086A  503E               	movf	(_Black_setup+5)^0,w,c
  2235   00086C  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2236   00086E  503F               	movf	(_Black_setup+6)^0,w,c
  2237   000870  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2238   000872  5040               	movf	(_Black_setup+7)^0,w,c
  2239   000874  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2240   000876  B0D8               	btfsc	status,0,c
  2241   000878  EF40  F004         	goto	u3461
  2242   00087C  EF42  F004         	goto	u3460
  2243   000880                     u3461:
  2244   000880  EF4C  F004         	goto	l4198
  2245   000884                     u3460:
  2246   000884                     
  2247                           ; BSR set to: 0
  2248   000884  0E00               	movlw	0
  2249   000886  6FCA               	movwf	_get_color_code$464& (0+255),b
  2250   000888  0E00               	movlw	0
  2251   00088A  6FCB               	movwf	(_get_color_code$464+1)& (0+255),b
  2252   00088C  0E00               	movlw	0
  2253   00088E  6FCC               	movwf	(_get_color_code$464+2)& (0+255),b
  2254   000890  0E00               	movlw	0
  2255   000892  6FCD               	movwf	(_get_color_code$464+3)& (0+255),b
  2256   000894  EF81  F004         	goto	l4200
  2257   000898                     l4198:
  2258                           
  2259                           ; BSR set to: 0
  2260   000898  503D               	movf	(_Black_setup+4)^0,w,c
  2261   00089A  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2262   00089C  6E0E               	movwf	___lmul@multiplier^0,c
  2263   00089E  503E               	movf	(_Black_setup+5)^0,w,c
  2264   0008A0  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2265   0008A2  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2266   0008A4  503F               	movf	(_Black_setup+6)^0,w,c
  2267   0008A6  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2268   0008A8  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2269   0008AA  5040               	movf	(_Black_setup+7)^0,w,c
  2270   0008AC  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2271   0008AE  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2272   0008B0  0E64               	movlw	100
  2273   0008B2  6E12               	movwf	___lmul@multiplicand^0,c
  2274   0008B4  0E00               	movlw	0
  2275   0008B6  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2276   0008B8  0E00               	movlw	0
  2277   0008BA  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2278   0008BC  0E00               	movlw	0
  2279   0008BE  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2280   0008C0  EC16  F00F         	call	___lmul	;wreg free
  2281   0008C4  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2282   0008C8  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2283   0008CC  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2284   0008D0  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2285   0008D4  503D               	movf	(_Black_setup+4)^0,w,c
  2286   0008D6  0100               	movlb	0	; () banked
  2287   0008D8  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  2288   0008DA  6E1E               	movwf	___lldiv@divisor^0,c
  2289   0008DC  503E               	movf	(_Black_setup+5)^0,w,c
  2290   0008DE  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  2291   0008E0  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2292   0008E2  503F               	movf	(_Black_setup+6)^0,w,c
  2293   0008E4  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  2294   0008E6  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2295   0008E8  5040               	movf	(_Black_setup+7)^0,w,c
  2296   0008EA  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  2297   0008EC  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2298   0008EE  EC48  F00D         	call	___lldiv	;wreg free
  2299   0008F2  C01A  F0CA         	movff	?___lldiv,_get_color_code$464
  2300   0008F6  C01B  F0CB         	movff	?___lldiv+1,_get_color_code$464+1
  2301   0008FA  C01C  F0CC         	movff	?___lldiv+2,_get_color_code$464+2
  2302   0008FE  C01D  F0CD         	movff	?___lldiv+3,_get_color_code$464+3
  2303   000902                     l4200:
  2304   000902  C0CA  F0DE         	movff	_get_color_code$464,get_color_code@NormalizedRGB+4
  2305   000906  C0CB  F0DF         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+5
  2306   00090A  C0CC  F0E0         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+6
  2307   00090E  C0CD  F0E1         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+7
  2308   000912                     
  2309                           ;color.c: 198:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2310   000912  5041               	movf	(_Black_setup+8)^0,w,c
  2311   000914  0100               	movlb	0	; () banked
  2312   000916  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2313   000918  5042               	movf	(_Black_setup+9)^0,w,c
  2314   00091A  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2315   00091C  5043               	movf	(_Black_setup+10)^0,w,c
  2316   00091E  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2317   000920  5044               	movf	(_Black_setup+11)^0,w,c
  2318   000922  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2319   000924  B0D8               	btfsc	status,0,c
  2320   000926  EF97  F004         	goto	u3471
  2321   00092A  EF99  F004         	goto	u3470
  2322   00092E                     u3471:
  2323   00092E  EFA3  F004         	goto	l4206
  2324   000932                     u3470:
  2325   000932                     
  2326                           ; BSR set to: 0
  2327   000932  0E00               	movlw	0
  2328   000934  6FCE               	movwf	_get_color_code$465& (0+255),b
  2329   000936  0E00               	movlw	0
  2330   000938  6FCF               	movwf	(_get_color_code$465+1)& (0+255),b
  2331   00093A  0E00               	movlw	0
  2332   00093C  6FD0               	movwf	(_get_color_code$465+2)& (0+255),b
  2333   00093E  0E00               	movlw	0
  2334   000940  6FD1               	movwf	(_get_color_code$465+3)& (0+255),b
  2335   000942  EFD8  F004         	goto	l4208
  2336   000946                     l4206:
  2337                           
  2338                           ; BSR set to: 0
  2339   000946  5041               	movf	(_Black_setup+8)^0,w,c
  2340   000948  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2341   00094A  6E0E               	movwf	___lmul@multiplier^0,c
  2342   00094C  5042               	movf	(_Black_setup+9)^0,w,c
  2343   00094E  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2344   000950  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2345   000952  5043               	movf	(_Black_setup+10)^0,w,c
  2346   000954  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2347   000956  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2348   000958  5044               	movf	(_Black_setup+11)^0,w,c
  2349   00095A  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2350   00095C  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2351   00095E  0E64               	movlw	100
  2352   000960  6E12               	movwf	___lmul@multiplicand^0,c
  2353   000962  0E00               	movlw	0
  2354   000964  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2355   000966  0E00               	movlw	0
  2356   000968  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2357   00096A  0E00               	movlw	0
  2358   00096C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2359   00096E  EC16  F00F         	call	___lmul	;wreg free
  2360   000972  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2361   000976  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2362   00097A  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2363   00097E  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2364   000982  5041               	movf	(_Black_setup+8)^0,w,c
  2365   000984  0100               	movlb	0	; () banked
  2366   000986  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  2367   000988  6E1E               	movwf	___lldiv@divisor^0,c
  2368   00098A  5042               	movf	(_Black_setup+9)^0,w,c
  2369   00098C  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  2370   00098E  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2371   000990  5043               	movf	(_Black_setup+10)^0,w,c
  2372   000992  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  2373   000994  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2374   000996  5044               	movf	(_Black_setup+11)^0,w,c
  2375   000998  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  2376   00099A  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2377   00099C  EC48  F00D         	call	___lldiv	;wreg free
  2378   0009A0  C01A  F0CE         	movff	?___lldiv,_get_color_code$465
  2379   0009A4  C01B  F0CF         	movff	?___lldiv+1,_get_color_code$465+1
  2380   0009A8  C01C  F0D0         	movff	?___lldiv+2,_get_color_code$465+2
  2381   0009AC  C01D  F0D1         	movff	?___lldiv+3,_get_color_code$465+3
  2382   0009B0                     l4208:
  2383   0009B0  C0CE  F0E2         	movff	_get_color_code$465,get_color_code@NormalizedRGB+8
  2384   0009B4  C0CF  F0E3         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+9
  2385   0009B8  C0D0  F0E4         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+10
  2386   0009BC  C0D1  F0E5         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+11
  2387   0009C0                     
  2388                           ;color.c: 200:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2389   0009C0  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2390   0009C4  EE00  F014         	lfsr	0,get_color_distance@color1
  2391   0009C8  0E0B               	movlw	11
  2392   0009CA                     u3481:
  2393   0009CA  CFDB FFEB          	movff	plusw2,plusw0
  2394   0009CE  06E8               	decf	wreg,f,c
  2395   0009D0  E2FC               	bc	u3481
  2396   0009D2  EE21  F000         	lfsr	2,_Color_rules
  2397   0009D6  EE00  F020         	lfsr	0,get_color_distance@color2
  2398   0009DA  0E0B               	movlw	11
  2399   0009DC                     u3491:
  2400   0009DC  CFDB FFEB          	movff	plusw2,plusw0
  2401   0009E0  06E8               	decf	wreg,f,c
  2402   0009E2  E2FC               	bc	u3491
  2403   0009E4  ECA3  F007         	call	_get_color_distance	;wreg free
  2404   0009E8  C014  F0D2         	movff	?_get_color_distance,get_color_code@min_value
  2405   0009EC  C015  F0D3         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2406   0009F0                     
  2407                           ;color.c: 201:     unsigned int min_index = 0;
  2408   0009F0  0E00               	movlw	0
  2409   0009F2  0100               	movlb	0	; () banked
  2410   0009F4  6FD5               	movwf	(get_color_code@min_index+1)& (0+255),b
  2411   0009F6  0E00               	movlw	0
  2412   0009F8  6FD4               	movwf	get_color_code@min_index& (0+255),b
  2413   0009FA                     
  2414                           ; BSR set to: 0
  2415                           ;color.c: 202:     for(unsigned int i = 1;i < 9; i++){
  2416   0009FA  0E00               	movlw	0
  2417   0009FC  6FD9               	movwf	(get_color_code@i+1)& (0+255),b
  2418   0009FE  0E01               	movlw	1
  2419   000A00  6FD8               	movwf	get_color_code@i& (0+255),b
  2420   000A02                     l4220:
  2421                           
  2422                           ; BSR set to: 0
  2423                           ;color.c: 203:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2424   000A02  C0D8  F00E         	movff	get_color_code@i,___wmul@multiplier
  2425   000A06  C0D9  F00F         	movff	get_color_code@i+1,___wmul@multiplier+1
  2426   000A0A  0E00               	movlw	0
  2427   000A0C  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  2428   000A0E  0E0C               	movlw	12
  2429   000A10  6E10               	movwf	___wmul@multiplicand^0,c
  2430   000A12  ECBA  F011         	call	___wmul	;wreg free
  2431   000A16  0E00               	movlw	low _Color_rules
  2432   000A18  240E               	addwf	?___wmul^0,w,c
  2433   000A1A  6ED9               	movwf	fsr2l,c
  2434   000A1C  0E01               	movlw	high _Color_rules
  2435   000A1E  200F               	addwfc	(?___wmul+1)^0,w,c
  2436   000A20  6EDA               	movwf	fsr2h,c
  2437   000A22  EE10  F0BA         	lfsr	1,_get_color_code$2462
  2438   000A26  0E0B               	movlw	11
  2439   000A28                     u3501:
  2440   000A28  CFDB FFE3          	movff	plusw2,plusw1
  2441   000A2C  06E8               	decf	wreg,f,c
  2442   000A2E  E2FC               	bc	u3501
  2443   000A30                     
  2444                           ;color.c: 203:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2445   000A30  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2446   000A34  EE00  F014         	lfsr	0,get_color_distance@color1
  2447   000A38  0E0B               	movlw	11
  2448   000A3A                     u3511:
  2449   000A3A  CFDB FFEB          	movff	plusw2,plusw0
  2450   000A3E  06E8               	decf	wreg,f,c
  2451   000A40  E2FC               	bc	u3511
  2452   000A42  EE20  F0BA         	lfsr	2,_get_color_code$2462
  2453   000A46  EE00  F020         	lfsr	0,get_color_distance@color2
  2454   000A4A  0E0B               	movlw	11
  2455   000A4C                     u3521:
  2456   000A4C  CFDB FFEB          	movff	plusw2,plusw0
  2457   000A50  06E8               	decf	wreg,f,c
  2458   000A52  E2FC               	bc	u3521
  2459   000A54  ECA3  F007         	call	_get_color_distance	;wreg free
  2460   000A58  C014  F0D6         	movff	?_get_color_distance,get_color_code@value
  2461   000A5C  C015  F0D7         	movff	?_get_color_distance+1,get_color_code@value+1
  2462   000A60                     
  2463                           ;color.c: 204:         if(value < min_value){
  2464   000A60  0100               	movlb	0	; () banked
  2465   000A62  51D2               	movf	get_color_code@min_value& (0+255),w,b
  2466   000A64  5DD6               	subwf	get_color_code@value& (0+255),w,b
  2467   000A66  51D3               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2468   000A68  59D7               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2469   000A6A  B0D8               	btfsc	status,0,c
  2470   000A6C  EF3A  F005         	goto	u3531
  2471   000A70  EF3C  F005         	goto	u3530
  2472   000A74                     u3531:
  2473   000A74  EF44  F005         	goto	l4228
  2474   000A78                     u3530:
  2475   000A78                     
  2476                           ; BSR set to: 0
  2477                           ;color.c: 205:             min_index = i;
  2478   000A78  C0D8  F0D4         	movff	get_color_code@i,get_color_code@min_index
  2479   000A7C  C0D9  F0D5         	movff	get_color_code@i+1,get_color_code@min_index+1
  2480                           
  2481                           ;color.c: 206:             min_value = value;
  2482   000A80  C0D6  F0D2         	movff	get_color_code@value,get_color_code@min_value
  2483   000A84  C0D7  F0D3         	movff	get_color_code@value+1,get_color_code@min_value+1
  2484   000A88                     l4228:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;color.c: 208:     }
  2488   000A88  4BD8               	infsnz	get_color_code@i& (0+255),f,b
  2489   000A8A  2BD9               	incf	(get_color_code@i+1)& (0+255),f,b
  2490   000A8C                     
  2491                           ; BSR set to: 0
  2492   000A8C  51D9               	movf	(get_color_code@i+1)& (0+255),w,b
  2493   000A8E  E109               	bnz	u3540
  2494   000A90  0E09               	movlw	9
  2495   000A92  5DD8               	subwf	get_color_code@i& (0+255),w,b
  2496   000A94  A0D8               	btfss	status,0,c
  2497   000A96  EF4F  F005         	goto	u3541
  2498   000A9A  EF51  F005         	goto	u3540
  2499   000A9E                     u3541:
  2500   000A9E  EF01  F005         	goto	l4220
  2501   000AA2                     u3540:
  2502   000AA2                     
  2503                           ; BSR set to: 0
  2504                           ;color.c: 209:     return min_index;
  2505   000AA2  C0D4  F030         	movff	get_color_code@min_index,?_get_color_code
  2506   000AA6  C0D5  F031         	movff	get_color_code@min_index+1,?_get_color_code+1
  2507   000AAA                     
  2508                           ; BSR set to: 0
  2509   000AAA  0012               	return		;funcret
  2510   000AAC                     __end_of_get_color_code:
  2511                           	callstack 0
  2512                           
  2513 ;; *************** function _get_color_distance *****************
  2514 ;; Defined at:
  2515 ;;		line 149 in file "color.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  color1         12   19[COMRAM] struct RGB_val
  2518 ;;  color2         12   31[COMRAM] struct RGB_val
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2521 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2522 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  2   19[COMRAM] unsigned int 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2532 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2533 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2534 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2535 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2536 ;;Total ram usage:       46 bytes
  2537 ;; Hardware stack levels used: 1
  2538 ;; Hardware stack levels required when called: 6
  2539 ;; This function calls:
  2540 ;;		___wmul
  2541 ;; This function is called by:
  2542 ;;		_get_color_code
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text7
  2547   000F46                     __ptext7:
  2548                           	callstack 0
  2549   000F46                     _get_color_distance:
  2550                           	callstack 23
  2551   000F46                     
  2552                           ;color.c: 150:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2553   000F46  5020               	movf	get_color_distance@color2^0,w,c
  2554   000F48  5C14               	subwf	get_color_distance@color1^0,w,c
  2555   000F4A  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2556   000F4C  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2557   000F4E  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2558   000F50  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2559   000F52  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2560   000F54  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2561   000F56  B0D8               	btfsc	status,0,c
  2562   000F58  EFB0  F007         	goto	u3091
  2563   000F5C  EFB2  F007         	goto	u3090
  2564   000F60                     u3091:
  2565   000F60  EFC1  F007         	goto	l3810
  2566   000F64                     u3090:
  2567   000F64  5014               	movf	get_color_distance@color1^0,w,c
  2568   000F66  5C20               	subwf	get_color_distance@color2^0,w,c
  2569   000F68  0100               	movlb	0	; () banked
  2570   000F6A  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2571   000F6C  5015               	movf	(get_color_distance@color1+1)^0,w,c
  2572   000F6E  5821               	subwfb	(get_color_distance@color2+1)^0,w,c
  2573   000F70  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2574   000F72  5016               	movf	(get_color_distance@color1+2)^0,w,c
  2575   000F74  5822               	subwfb	(get_color_distance@color2+2)^0,w,c
  2576   000F76  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2577   000F78  5017               	movf	(get_color_distance@color1+3)^0,w,c
  2578   000F7A  5823               	subwfb	(get_color_distance@color2+3)^0,w,c
  2579   000F7C  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2580   000F7E  EFCE  F007         	goto	l3812
  2581   000F82                     l3810:
  2582   000F82  5020               	movf	get_color_distance@color2^0,w,c
  2583   000F84  5C14               	subwf	get_color_distance@color1^0,w,c
  2584   000F86  0100               	movlb	0	; () banked
  2585   000F88  6FA8               	movwf	_get_color_distance$422& (0+255),b
  2586   000F8A  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2587   000F8C  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2588   000F8E  6FA9               	movwf	(_get_color_distance$422+1)& (0+255),b
  2589   000F90  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2590   000F92  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2591   000F94  6FAA               	movwf	(_get_color_distance$422+2)& (0+255),b
  2592   000F96  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2593   000F98  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2594   000F9A  6FAB               	movwf	(_get_color_distance$422+3)& (0+255),b
  2595   000F9C                     l3812:
  2596                           
  2597                           ; BSR set to: 0
  2598   000F9C  C0A8  F0B4         	movff	_get_color_distance$422,get_color_distance@R_offset
  2599   000FA0  C0A9  F0B5         	movff	_get_color_distance$422+1,get_color_distance@R_offset+1
  2600                           
  2601                           ;color.c: 151:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2602   000FA4  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2603   000FA6  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2604   000FA8  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2605   000FAA  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2606   000FAC  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2607   000FAE  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2608   000FB0  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2609   000FB2  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2610   000FB4  B0D8               	btfsc	status,0,c
  2611   000FB6  EFDF  F007         	goto	u3101
  2612   000FBA  EFE1  F007         	goto	u3100
  2613   000FBE                     u3101:
  2614   000FBE  EFEF  F007         	goto	l3816
  2615   000FC2                     u3100:
  2616   000FC2                     
  2617                           ; BSR set to: 0
  2618   000FC2  5018               	movf	(get_color_distance@color1+4)^0,w,c
  2619   000FC4  5C24               	subwf	(get_color_distance@color2+4)^0,w,c
  2620   000FC6  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2621   000FC8  5019               	movf	(get_color_distance@color1+5)^0,w,c
  2622   000FCA  5825               	subwfb	(get_color_distance@color2+5)^0,w,c
  2623   000FCC  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2624   000FCE  501A               	movf	(get_color_distance@color1+6)^0,w,c
  2625   000FD0  5826               	subwfb	(get_color_distance@color2+6)^0,w,c
  2626   000FD2  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2627   000FD4  501B               	movf	(get_color_distance@color1+7)^0,w,c
  2628   000FD6  5827               	subwfb	(get_color_distance@color2+7)^0,w,c
  2629   000FD8  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2630   000FDA  EFFB  F007         	goto	l3818
  2631   000FDE                     l3816:
  2632                           
  2633                           ; BSR set to: 0
  2634   000FDE  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2635   000FE0  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2636   000FE2  6FAC               	movwf	_get_color_distance$424& (0+255),b
  2637   000FE4  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2638   000FE6  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2639   000FE8  6FAD               	movwf	(_get_color_distance$424+1)& (0+255),b
  2640   000FEA  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2641   000FEC  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2642   000FEE  6FAE               	movwf	(_get_color_distance$424+2)& (0+255),b
  2643   000FF0  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2644   000FF2  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2645   000FF4  6FAF               	movwf	(_get_color_distance$424+3)& (0+255),b
  2646   000FF6                     l3818:
  2647                           
  2648                           ; BSR set to: 0
  2649   000FF6  C0AC  F0B6         	movff	_get_color_distance$424,get_color_distance@G_offset
  2650   000FFA  C0AD  F0B7         	movff	_get_color_distance$424+1,get_color_distance@G_offset+1
  2651                           
  2652                           ;color.c: 152:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2653   000FFE  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2654   001000  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2655   001002  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2656   001004  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2657   001006  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2658   001008  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2659   00100A  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2660   00100C  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2661   00100E  B0D8               	btfsc	status,0,c
  2662   001010  EF0C  F008         	goto	u3111
  2663   001014  EF0E  F008         	goto	u3110
  2664   001018                     u3111:
  2665   001018  EF1C  F008         	goto	l3822
  2666   00101C                     u3110:
  2667   00101C                     
  2668                           ; BSR set to: 0
  2669   00101C  501C               	movf	(get_color_distance@color1+8)^0,w,c
  2670   00101E  5C28               	subwf	(get_color_distance@color2+8)^0,w,c
  2671   001020  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2672   001022  501D               	movf	(get_color_distance@color1+9)^0,w,c
  2673   001024  5829               	subwfb	(get_color_distance@color2+9)^0,w,c
  2674   001026  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2675   001028  501E               	movf	(get_color_distance@color1+10)^0,w,c
  2676   00102A  582A               	subwfb	(get_color_distance@color2+10)^0,w,c
  2677   00102C  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2678   00102E  501F               	movf	(get_color_distance@color1+11)^0,w,c
  2679   001030  582B               	subwfb	(get_color_distance@color2+11)^0,w,c
  2680   001032  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2681   001034  EF28  F008         	goto	l3824
  2682   001038                     l3822:
  2683                           
  2684                           ; BSR set to: 0
  2685   001038  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2686   00103A  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2687   00103C  6FB0               	movwf	_get_color_distance$426& (0+255),b
  2688   00103E  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2689   001040  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2690   001042  6FB1               	movwf	(_get_color_distance$426+1)& (0+255),b
  2691   001044  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2692   001046  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2693   001048  6FB2               	movwf	(_get_color_distance$426+2)& (0+255),b
  2694   00104A  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2695   00104C  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2696   00104E  6FB3               	movwf	(_get_color_distance$426+3)& (0+255),b
  2697   001050                     l3824:
  2698                           
  2699                           ; BSR set to: 0
  2700   001050  C0B0  F0B8         	movff	_get_color_distance$426,get_color_distance@B_offset
  2701   001054  C0B1  F0B9         	movff	_get_color_distance$426+1,get_color_distance@B_offset+1
  2702   001058                     
  2703                           ; BSR set to: 0
  2704                           ;color.c: 154:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2705   001058  C0B4  F00E         	movff	get_color_distance@R_offset,___wmul@multiplier
  2706   00105C  C0B5  F00F         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2707   001060  C0B4  F010         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2708   001064  C0B5  F011         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2709   001068  ECBA  F011         	call	___wmul	;wreg free
  2710   00106C  C00E  F02C         	movff	?___wmul,??_get_color_distance
  2711   001070  C00F  F02D         	movff	?___wmul+1,??_get_color_distance+1
  2712   001074  C0B6  F00E         	movff	get_color_distance@G_offset,___wmul@multiplier
  2713   001078  C0B7  F00F         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2714   00107C  C0B6  F010         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2715   001080  C0B7  F011         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2716   001084  ECBA  F011         	call	___wmul	;wreg free
  2717   001088  500E               	movf	?___wmul^0,w,c
  2718   00108A  242C               	addwf	??_get_color_distance^0,w,c
  2719   00108C  6E2E               	movwf	(??_get_color_distance+2)^0,c
  2720   00108E  500F               	movf	(?___wmul+1)^0,w,c
  2721   001090  202D               	addwfc	(??_get_color_distance+1)^0,w,c
  2722   001092  6E2F               	movwf	(??_get_color_distance+3)^0,c
  2723   001094  C0B8  F00E         	movff	get_color_distance@B_offset,___wmul@multiplier
  2724   001098  C0B9  F00F         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2725   00109C  C0B8  F010         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2726   0010A0  C0B9  F011         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2727   0010A4  ECBA  F011         	call	___wmul	;wreg free
  2728   0010A8  500E               	movf	?___wmul^0,w,c
  2729   0010AA  242E               	addwf	(??_get_color_distance+2)^0,w,c
  2730   0010AC  6E14               	movwf	?_get_color_distance^0,c
  2731   0010AE  500F               	movf	(?___wmul+1)^0,w,c
  2732   0010B0  202F               	addwfc	(??_get_color_distance+3)^0,w,c
  2733   0010B2  6E15               	movwf	(?_get_color_distance+1)^0,c
  2734   0010B4  0012               	return		;funcret
  2735   0010B6                     __end_of_get_color_distance:
  2736                           	callstack 0
  2737                           
  2738 ;; *************** function ___lmul *****************
  2739 ;; Defined at:
  2740 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  multiplier      4   13[COMRAM] unsigned long 
  2743 ;;  multiplicand    4   17[COMRAM] unsigned long 
  2744 ;; Auto vars:     Size  Location     Type
  2745 ;;  product         4   21[COMRAM] unsigned long 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  4   13[COMRAM] unsigned long 
  2748 ;; Registers used:
  2749 ;;		wreg, status,2, status,0
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2755 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2756 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2758 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2759 ;;Total ram usage:       12 bytes
  2760 ;; Hardware stack levels used: 1
  2761 ;; Hardware stack levels required when called: 5
  2762 ;; This function calls:
  2763 ;;		Nothing
  2764 ;; This function is called by:
  2765 ;;		_get_color_code
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text8
  2770   001E2C                     __ptext8:
  2771                           	callstack 0
  2772   001E2C                     ___lmul:
  2773                           	callstack 24
  2774   001E2C  0E00               	movlw	0
  2775   001E2E  6E16               	movwf	___lmul@product^0,c
  2776   001E30  0E00               	movlw	0
  2777   001E32  6E17               	movwf	(___lmul@product+1)^0,c
  2778   001E34  0E00               	movlw	0
  2779   001E36  6E18               	movwf	(___lmul@product+2)^0,c
  2780   001E38  0E00               	movlw	0
  2781   001E3A  6E19               	movwf	(___lmul@product+3)^0,c
  2782   001E3C                     l4084:
  2783   001E3C  A00E               	btfss	___lmul@multiplier^0,0,c
  2784   001E3E  EF23  F00F         	goto	u3261
  2785   001E42  EF25  F00F         	goto	u3260
  2786   001E46                     u3261:
  2787   001E46  EF2D  F00F         	goto	l4088
  2788   001E4A                     u3260:
  2789   001E4A  5012               	movf	___lmul@multiplicand^0,w,c
  2790   001E4C  2616               	addwf	___lmul@product^0,f,c
  2791   001E4E  5013               	movf	(___lmul@multiplicand+1)^0,w,c
  2792   001E50  2217               	addwfc	(___lmul@product+1)^0,f,c
  2793   001E52  5014               	movf	(___lmul@multiplicand+2)^0,w,c
  2794   001E54  2218               	addwfc	(___lmul@product+2)^0,f,c
  2795   001E56  5015               	movf	(___lmul@multiplicand+3)^0,w,c
  2796   001E58  2219               	addwfc	(___lmul@product+3)^0,f,c
  2797   001E5A                     l4088:
  2798   001E5A  90D8               	bcf	status,0,c
  2799   001E5C  3612               	rlcf	___lmul@multiplicand^0,f,c
  2800   001E5E  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2801   001E60  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2802   001E62  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2803   001E64  90D8               	bcf	status,0,c
  2804   001E66  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
  2805   001E68  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
  2806   001E6A  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
  2807   001E6C  320E               	rrcf	___lmul@multiplier^0,f,c
  2808   001E6E  500E               	movf	___lmul@multiplier^0,w,c
  2809   001E70  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
  2810   001E72  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
  2811   001E74  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
  2812   001E76  A4D8               	btfss	status,2,c
  2813   001E78  EF40  F00F         	goto	u3271
  2814   001E7C  EF42  F00F         	goto	u3270
  2815   001E80                     u3271:
  2816   001E80  EF1E  F00F         	goto	l4084
  2817   001E84                     u3270:
  2818   001E84  C016  F00E         	movff	___lmul@product,?___lmul
  2819   001E88  C017  F00F         	movff	___lmul@product+1,?___lmul+1
  2820   001E8C  C018  F010         	movff	___lmul@product+2,?___lmul+2
  2821   001E90  C019  F011         	movff	___lmul@product+3,?___lmul+3
  2822   001E94  0012               	return		;funcret
  2823   001E96                     __end_of___lmul:
  2824                           	callstack 0
  2825                           
  2826 ;; *************** function ___lldiv *****************
  2827 ;; Defined at:
  2828 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;  dividend        4   25[COMRAM] unsigned long 
  2831 ;;  divisor         4   29[COMRAM] unsigned long 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  quotient        4   33[COMRAM] unsigned long 
  2834 ;;  counter         1   37[COMRAM] unsigned char 
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  4   25[COMRAM] unsigned long 
  2837 ;; Registers used:
  2838 ;;		wreg, status,2, status,0
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2844 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2845 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2847 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2848 ;;Total ram usage:       13 bytes
  2849 ;; Hardware stack levels used: 1
  2850 ;; Hardware stack levels required when called: 5
  2851 ;; This function calls:
  2852 ;;		Nothing
  2853 ;; This function is called by:
  2854 ;;		_get_color_code
  2855 ;; This function uses a non-reentrant model
  2856 ;;
  2857                           
  2858                           	psect	text9
  2859   001A90                     __ptext9:
  2860                           	callstack 0
  2861   001A90                     ___lldiv:
  2862                           	callstack 24
  2863   001A90  0E00               	movlw	0
  2864   001A92  6E22               	movwf	___lldiv@quotient^0,c
  2865   001A94  0E00               	movlw	0
  2866   001A96  6E23               	movwf	(___lldiv@quotient+1)^0,c
  2867   001A98  0E00               	movlw	0
  2868   001A9A  6E24               	movwf	(___lldiv@quotient+2)^0,c
  2869   001A9C  0E00               	movlw	0
  2870   001A9E  6E25               	movwf	(___lldiv@quotient+3)^0,c
  2871   001AA0  501E               	movf	___lldiv@divisor^0,w,c
  2872   001AA2  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
  2873   001AA4  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
  2874   001AA6  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
  2875   001AA8  B4D8               	btfsc	status,2,c
  2876   001AAA  EF59  F00D         	goto	u3281
  2877   001AAE  EF5B  F00D         	goto	u3280
  2878   001AB2                     u3281:
  2879   001AB2  EF91  F00D         	goto	l532
  2880   001AB6                     u3280:
  2881   001AB6  0E01               	movlw	1
  2882   001AB8  6E26               	movwf	___lldiv@counter^0,c
  2883   001ABA  EF65  F00D         	goto	l4100
  2884   001ABE                     l4098:
  2885   001ABE  90D8               	bcf	status,0,c
  2886   001AC0  361E               	rlcf	___lldiv@divisor^0,f,c
  2887   001AC2  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
  2888   001AC4  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
  2889   001AC6  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
  2890   001AC8  2A26               	incf	___lldiv@counter^0,f,c
  2891   001ACA                     l4100:
  2892   001ACA  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
  2893   001ACC  EF6A  F00D         	goto	u3291
  2894   001AD0  EF6C  F00D         	goto	u3290
  2895   001AD4                     u3291:
  2896   001AD4  EF5F  F00D         	goto	l4098
  2897   001AD8                     u3290:
  2898   001AD8                     l4102:
  2899   001AD8  90D8               	bcf	status,0,c
  2900   001ADA  3622               	rlcf	___lldiv@quotient^0,f,c
  2901   001ADC  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
  2902   001ADE  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
  2903   001AE0  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
  2904   001AE2  501E               	movf	___lldiv@divisor^0,w,c
  2905   001AE4  5C1A               	subwf	___lldiv@dividend^0,w,c
  2906   001AE6  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2907   001AE8  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
  2908   001AEA  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2909   001AEC  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
  2910   001AEE  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2911   001AF0  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
  2912   001AF2  A0D8               	btfss	status,0,c
  2913   001AF4  EF7E  F00D         	goto	u3301
  2914   001AF8  EF80  F00D         	goto	u3300
  2915   001AFC                     u3301:
  2916   001AFC  EF89  F00D         	goto	l4110
  2917   001B00                     u3300:
  2918   001B00  501E               	movf	___lldiv@divisor^0,w,c
  2919   001B02  5E1A               	subwf	___lldiv@dividend^0,f,c
  2920   001B04  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2921   001B06  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
  2922   001B08  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2923   001B0A  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
  2924   001B0C  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2925   001B0E  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
  2926   001B10  8022               	bsf	___lldiv@quotient^0,0,c
  2927   001B12                     l4110:
  2928   001B12  90D8               	bcf	status,0,c
  2929   001B14  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
  2930   001B16  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
  2931   001B18  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
  2932   001B1A  321E               	rrcf	___lldiv@divisor^0,f,c
  2933   001B1C  2E26               	decfsz	___lldiv@counter^0,f,c
  2934   001B1E  EF6C  F00D         	goto	l4102
  2935   001B22                     l532:
  2936   001B22  C022  F01A         	movff	___lldiv@quotient,?___lldiv
  2937   001B26  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
  2938   001B2A  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
  2939   001B2E  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
  2940   001B32  0012               	return		;funcret
  2941   001B34                     __end_of___lldiv:
  2942                           	callstack 0
  2943                           
  2944 ;; *************** function _fullSpeedAhead *****************
  2945 ;; Defined at:
  2946 ;;		line 215 in file "dc_motor.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2949 ;;		 -> main@motorL(9), 
  2950 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2951 ;;		 -> main@motorR(9), 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2966 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2967 ;;Total ram usage:        4 bytes
  2968 ;; Hardware stack levels used: 1
  2969 ;; Hardware stack levels required when called: 7
  2970 ;; This function calls:
  2971 ;;		_setMotorPWM
  2972 ;; This function is called by:
  2973 ;;		_main
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text10
  2978   001EFA                     __ptext10:
  2979                           	callstack 0
  2980   001EFA                     _fullSpeedAhead:
  2981                           	callstack 23
  2982   001EFA                     
  2983                           ;dc_motor.c: 215: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 216: {;dc_motor.c: 217:     seconds = 0;
  2984   001EFA  0E00               	movlw	0
  2985   001EFC  6E4A               	movwf	(_seconds+1)^0,c
  2986   001EFE  0E00               	movlw	0
  2987   001F00  6E49               	movwf	_seconds^0,c
  2988   001F02                     
  2989                           ;dc_motor.c: 218:     (*mL).direction=0;
  2990   001F02  EE20 F001          	lfsr	2,1
  2991   001F06  5021               	movf	fullSpeedAhead@mL^0,w,c
  2992   001F08  26D9               	addwf	fsr2l,f,c
  2993   001F0A  5022               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2994   001F0C  22DA               	addwfc	fsr2h,f,c
  2995   001F0E  0E00               	movlw	0
  2996   001F10  6EDF               	movwf	indf2,c
  2997   001F12                     
  2998                           ;dc_motor.c: 219:     (*mR).direction=0;
  2999   001F12  EE20 F001          	lfsr	2,1
  3000   001F16  5023               	movf	fullSpeedAhead@mR^0,w,c
  3001   001F18  26D9               	addwf	fsr2l,f,c
  3002   001F1A  5024               	movf	(fullSpeedAhead@mR+1)^0,w,c
  3003   001F1C  22DA               	addwfc	fsr2h,f,c
  3004   001F1E  0E00               	movlw	0
  3005   001F20  6EDF               	movwf	indf2,c
  3006   001F22                     
  3007                           ;dc_motor.c: 220:     (*mL).power=68;
  3008   001F22  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  3009   001F26  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  3010   001F2A  0E44               	movlw	68
  3011   001F2C  6EDF               	movwf	indf2,c
  3012   001F2E                     
  3013                           ;dc_motor.c: 221:     (*mR).power=68;
  3014   001F2E  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  3015   001F32  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  3016   001F36  0E44               	movlw	68
  3017   001F38  6EDF               	movwf	indf2,c
  3018   001F3A                     
  3019                           ;dc_motor.c: 222:     setMotorPWM(mL);
  3020   001F3A  C021  F01B         	movff	fullSpeedAhead@mL,setMotorPWM@m
  3021   001F3E  C022  F01C         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  3022   001F42  EC5B  F008         	call	_setMotorPWM	;wreg free
  3023   001F46                     
  3024                           ;dc_motor.c: 223:     setMotorPWM(mR);
  3025   001F46  C023  F01B         	movff	fullSpeedAhead@mR,setMotorPWM@m
  3026   001F4A  C024  F01C         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  3027   001F4E  EC5B  F008         	call	_setMotorPWM	;wreg free
  3028   001F52  0012               	return		;funcret
  3029   001F54                     __end_of_fullSpeedAhead:
  3030                           	callstack 0
  3031                           
  3032 ;; *************** function _color_click_init *****************
  3033 ;; Defined at:
  3034 ;;		line 39 in file "color.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  1    wreg      void 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3051 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3052 ;;Total ram usage:        1 bytes
  3053 ;; Hardware stack levels used: 1
  3054 ;; Hardware stack levels required when called: 9
  3055 ;; This function calls:
  3056 ;;		_I2C_2_Master_Init
  3057 ;;		_calibrate_black
  3058 ;;		_calibrate_white
  3059 ;;		_color_writetoaddr
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text11
  3066   001776                     __ptext11:
  3067                           	callstack 0
  3068   001776                     _color_click_init:
  3069                           	callstack 21
  3070   001776                     
  3071                           ;color.c: 42:     I2C_2_Master_Init();
  3072   001776  EC7D  F011         	call	_I2C_2_Master_Init	;wreg free
  3073   00177A                     
  3074                           ;color.c: 45:   color_writetoaddr(0x00, 0x01);
  3075   00177A  0E01               	movlw	1
  3076   00177C  6E10               	movwf	color_writetoaddr@value^0,c
  3077   00177E  0E00               	movlw	0
  3078   001780  ECCD  F011         	call	_color_writetoaddr
  3079   001784                     
  3080                           ;color.c: 46:     _delay((unsigned long)((3)*(64000000/4000.0)));
  3081   001784  0E3F               	movlw	63
  3082   001786  6E23               	movwf	??_color_click_init^0,c
  3083   001788  0E55               	movlw	85
  3084   00178A                     u4377:
  3085   00178A  2EE8               	decfsz	wreg,f,c
  3086   00178C  D7FE               	bra	u4377
  3087   00178E  2E23               	decfsz	??_color_click_init^0,f,c
  3088   001790  D7FC               	bra	u4377
  3089   001792  F000               	nop	
  3090   001794                     
  3091                           ;color.c: 49:  color_writetoaddr(0x00, 0x03);
  3092   001794  0E03               	movlw	3
  3093   001796  6E10               	movwf	color_writetoaddr@value^0,c
  3094   001798  0E00               	movlw	0
  3095   00179A  ECCD  F011         	call	_color_writetoaddr
  3096   00179E                     
  3097                           ;color.c: 52:  color_writetoaddr(0x01, 0xD5);
  3098   00179E  0ED5               	movlw	213
  3099   0017A0  6E10               	movwf	color_writetoaddr@value^0,c
  3100   0017A2  0E01               	movlw	1
  3101   0017A4  ECCD  F011         	call	_color_writetoaddr
  3102   0017A8                     
  3103                           ;color.c: 54:     TRISFbits.TRISF7 = 0;
  3104   0017A8  9E86               	bcf	134,7,c	;volatile
  3105   0017AA                     
  3106                           ;color.c: 55:     TRISGbits.TRISG1 = 0;
  3107   0017AA  9287               	bcf	135,1,c	;volatile
  3108   0017AC                     
  3109                           ;color.c: 56:     TRISAbits.TRISA4 = 0;
  3110   0017AC  9881               	bcf	129,4,c	;volatile
  3111   0017AE                     
  3112                           ;color.c: 58:     Color_rules[0] = Red_rule;
  3113   0017AE  EE20  F090         	lfsr	2,_Red_rule
  3114   0017B2  EE11  F000         	lfsr	1,_Color_rules
  3115   0017B6  0E0B               	movlw	11
  3116   0017B8                     u3311:
  3117   0017B8  CFDB FFE3          	movff	plusw2,plusw1
  3118   0017BC  06E8               	decf	wreg,f,c
  3119   0017BE  E2FC               	bc	u3311
  3120   0017C0                     
  3121                           ;color.c: 59:     Color_rules[1] = Green_rule;
  3122   0017C0  EE20  F084         	lfsr	2,_Green_rule
  3123   0017C4  EE11  F00C         	lfsr	1,_Color_rules+12
  3124   0017C8  0E0B               	movlw	11
  3125   0017CA                     u3321:
  3126   0017CA  CFDB FFE3          	movff	plusw2,plusw1
  3127   0017CE  06E8               	decf	wreg,f,c
  3128   0017D0  E2FC               	bc	u3321
  3129   0017D2                     
  3130                           ;color.c: 60:     Color_rules[2] = Blue_rule;
  3131   0017D2  EE20  F078         	lfsr	2,_Blue_rule
  3132   0017D6  EE11  F018         	lfsr	1,_Color_rules+24
  3133   0017DA  0E0B               	movlw	11
  3134   0017DC                     u3331:
  3135   0017DC  CFDB FFE3          	movff	plusw2,plusw1
  3136   0017E0  06E8               	decf	wreg,f,c
  3137   0017E2  E2FC               	bc	u3331
  3138   0017E4                     
  3139                           ;color.c: 61:     Color_rules[3] = Yellow_rule;
  3140   0017E4  EE20  F06C         	lfsr	2,_Yellow_rule
  3141   0017E8  EE11  F024         	lfsr	1,_Color_rules+36
  3142   0017EC  0E0B               	movlw	11
  3143   0017EE                     u3341:
  3144   0017EE  CFDB FFE3          	movff	plusw2,plusw1
  3145   0017F2  06E8               	decf	wreg,f,c
  3146   0017F4  E2FC               	bc	u3341
  3147   0017F6                     
  3148                           ;color.c: 62:     Color_rules[4] = Pink_rule;
  3149   0017F6  EE21  F09C         	lfsr	2,_Pink_rule
  3150   0017FA  EE11  F030         	lfsr	1,_Color_rules+48
  3151   0017FE  0E0B               	movlw	11
  3152   001800                     u3351:
  3153   001800  CFDB FFE3          	movff	plusw2,plusw1
  3154   001804  06E8               	decf	wreg,f,c
  3155   001806  E2FC               	bc	u3351
  3156   001808                     
  3157                           ;color.c: 63:     Color_rules[5] = Orange_rule;
  3158   001808  EE21  F090         	lfsr	2,_Orange_rule
  3159   00180C  EE11  F03C         	lfsr	1,_Color_rules+60
  3160   001810  0E0B               	movlw	11
  3161   001812                     u3361:
  3162   001812  CFDB FFE3          	movff	plusw2,plusw1
  3163   001816  06E8               	decf	wreg,f,c
  3164   001818  E2FC               	bc	u3361
  3165   00181A                     
  3166                           ;color.c: 64:     Color_rules[6] = Lightblue_rule;
  3167   00181A  EE21  F084         	lfsr	2,_Lightblue_rule
  3168   00181E  EE11  F048         	lfsr	1,_Color_rules+72
  3169   001822  0E0B               	movlw	11
  3170   001824                     u3371:
  3171   001824  CFDB FFE3          	movff	plusw2,plusw1
  3172   001828  06E8               	decf	wreg,f,c
  3173   00182A  E2FC               	bc	u3371
  3174   00182C                     
  3175                           ;color.c: 65:     Color_rules[7] = White_rule;
  3176   00182C  EE21  F078         	lfsr	2,_White_rule
  3177   001830  EE11  F054         	lfsr	1,_Color_rules+84
  3178   001834  0E0B               	movlw	11
  3179   001836                     u3381:
  3180   001836  CFDB FFE3          	movff	plusw2,plusw1
  3181   00183A  06E8               	decf	wreg,f,c
  3182   00183C  E2FC               	bc	u3381
  3183   00183E                     
  3184                           ;color.c: 66:     Color_rules[8] = Black_rule;
  3185   00183E  EE21  F06C         	lfsr	2,_Black_rule
  3186   001842  EE11  F060         	lfsr	1,_Color_rules+96
  3187   001846  0E0B               	movlw	11
  3188   001848                     u3391:
  3189   001848  CFDB FFE3          	movff	plusw2,plusw1
  3190   00184C  06E8               	decf	wreg,f,c
  3191   00184E  E2FC               	bc	u3391
  3192   001850                     
  3193                           ;color.c: 68:     TRISFbits.TRISF3=1;
  3194   001850  8686               	bsf	134,3,c	;volatile
  3195   001852                     
  3196                           ;color.c: 69:     ANSELFbits.ANSELF3=0;
  3197   001852  010E               	movlb	14	; () banked
  3198   001854  97B4               	bcf	180,3,b	;volatile
  3199   001856                     
  3200                           ; BSR set to: 14
  3201                           ;color.c: 70:     TRISFbits.TRISF2=1;
  3202   001856  8486               	bsf	134,2,c	;volatile
  3203   001858                     
  3204                           ; BSR set to: 14
  3205                           ;color.c: 71:     ANSELFbits.ANSELF2=0;
  3206   001858  95B4               	bcf	180,2,b	;volatile
  3207   00185A                     l76:
  3208   00185A  A68E               	btfss	142,3,c	;volatile
  3209   00185C  EF32  F00C         	goto	u3401
  3210   001860  EF34  F00C         	goto	u3400
  3211   001864                     u3401:
  3212   001864  EF3B  F00C         	goto	l80
  3213   001868                     u3400:
  3214   001868  B48E               	btfsc	142,2,c	;volatile
  3215   00186A  EF39  F00C         	goto	u3411
  3216   00186E  EF3B  F00C         	goto	u3410
  3217   001872                     u3411:
  3218   001872  EF2D  F00C         	goto	l76
  3219   001876                     u3410:
  3220   001876                     l80:
  3221                           
  3222                           ;color.c: 75:     if(!PORTFbits.RF2){
  3223   001876  B48E               	btfsc	142,2,c	;volatile
  3224   001878  EF40  F00C         	goto	u3421
  3225   00187C  EF42  F00C         	goto	u3420
  3226   001880                     u3421:
  3227   001880  EF44  F00C         	goto	l4164
  3228   001884                     u3420:
  3229   001884  EF56  F00C         	goto	l82
  3230   001888                     l4164:
  3231                           
  3232                           ;color.c: 78:     calibrate_white();
  3233   001888  ECF3  F00C         	call	_calibrate_white	;wreg free
  3234   00188C                     l83:
  3235   00188C  B68E               	btfsc	142,3,c	;volatile
  3236   00188E  EF4B  F00C         	goto	u3431
  3237   001892  EF4D  F00C         	goto	u3430
  3238   001896                     u3431:
  3239   001896  EF46  F00C         	goto	l83
  3240   00189A                     u3430:
  3241   00189A                     
  3242                           ;color.c: 80:     calibrate_black();
  3243   00189A  EC57  F00C         	call	_calibrate_black	;wreg free
  3244   00189E                     l86:
  3245   00189E  B68E               	btfsc	142,3,c	;volatile
  3246   0018A0  EF54  F00C         	goto	u3441
  3247   0018A4  EF56  F00C         	goto	u3440
  3248   0018A8                     u3441:
  3249   0018A8  EF4F  F00C         	goto	l86
  3250   0018AC                     u3440:
  3251   0018AC                     l82:
  3252   0018AC  0012               	return		;funcret
  3253   0018AE                     __end_of_color_click_init:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _color_writetoaddr *****************
  3257 ;; Defined at:
  3258 ;;		line 85 in file "color.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  address         1    wreg     unsigned char 
  3261 ;;  value           1   15[COMRAM] unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  address         1   16[COMRAM] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, status,2, status,0, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3273 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3277 ;;Total ram usage:        2 bytes
  3278 ;; Hardware stack levels used: 1
  3279 ;; Hardware stack levels required when called: 7
  3280 ;; This function calls:
  3281 ;;		_I2C_2_Master_Start
  3282 ;;		_I2C_2_Master_Stop
  3283 ;;		_I2C_2_Master_Write
  3284 ;; This function is called by:
  3285 ;;		_color_click_init
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text12
  3290   00239A                     __ptext12:
  3291                           	callstack 0
  3292   00239A                     _color_writetoaddr:
  3293                           	callstack 22
  3294                           
  3295                           ;incstack = 0
  3296                           ;color_writetoaddr@address stored from wreg
  3297   00239A  6E11               	movwf	color_writetoaddr@address^0,c
  3298   00239C                     
  3299                           ;color.c: 86:     I2C_2_Master_Start();
  3300   00239C  EC1C  F012         	call	_I2C_2_Master_Start	;wreg free
  3301                           
  3302                           ;color.c: 87:     I2C_2_Master_Write(0x52 | 0x00);
  3303   0023A0  0E52               	movlw	82
  3304   0023A2  EC00  F012         	call	_I2C_2_Master_Write
  3305                           
  3306                           ;color.c: 88:     I2C_2_Master_Write(0x80 | address);
  3307   0023A6  5011               	movf	color_writetoaddr@address^0,w,c
  3308   0023A8  0980               	iorlw	128
  3309   0023AA  EC00  F012         	call	_I2C_2_Master_Write
  3310                           
  3311                           ;color.c: 89:     I2C_2_Master_Write(value);
  3312   0023AE  5010               	movf	color_writetoaddr@value^0,w,c
  3313   0023B0  EC00  F012         	call	_I2C_2_Master_Write
  3314                           
  3315                           ;color.c: 90:     I2C_2_Master_Stop();
  3316   0023B4  EC17  F012         	call	_I2C_2_Master_Stop	;wreg free
  3317   0023B8  0012               	return		;funcret
  3318   0023BA                     __end_of_color_writetoaddr:
  3319                           	callstack 0
  3320                           
  3321 ;; *************** function _calibrate_white *****************
  3322 ;; Defined at:
  3323 ;;		line 234 in file "color.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3339 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3340 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3341 ;;Total ram usage:        2 bytes
  3342 ;; Hardware stack levels used: 1
  3343 ;; Hardware stack levels required when called: 8
  3344 ;; This function calls:
  3345 ;;		_color_read_Blue
  3346 ;;		_color_read_Green
  3347 ;;		_color_read_Red
  3348 ;;		_set_led_color
  3349 ;; This function is called by:
  3350 ;;		_color_click_init
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           	psect	text13
  3355   0019E6                     __ptext13:
  3356                           	callstack 0
  3357   0019E6                     _calibrate_white:
  3358                           	callstack 21
  3359   0019E6                     
  3360                           ;color.c: 235:     set_led_color(0b100);
  3361   0019E6  0E00               	movlw	0
  3362   0019E8  6E0F               	movwf	(set_led_color@color+1)^0,c
  3363   0019EA  0E04               	movlw	4
  3364   0019EC  6E0E               	movwf	set_led_color@color^0,c
  3365   0019EE  ECDF  F010         	call	_set_led_color	;wreg free
  3366   0019F2                     
  3367                           ;color.c: 236:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3368   0019F2  0E12               	movlw	18
  3369   0019F4  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3370   0019F6  0EDC               	movlw	220
  3371   0019F8  6E19               	movwf	??_calibrate_white^0,c
  3372   0019FA  0E60               	movlw	96
  3373   0019FC                     u4387:
  3374   0019FC  2EE8               	decfsz	wreg,f,c
  3375   0019FE  D7FE               	bra	u4387
  3376   001A00  2E19               	decfsz	??_calibrate_white^0,f,c
  3377   001A02  D7FC               	bra	u4387
  3378   001A04  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3379   001A06  D7FA               	bra	u4387
  3380   001A08                     
  3381                           ;color.c: 237:     White_setup.R = color_read_Red();
  3382   001A08  ECAA  F00F         	call	_color_read_Red	;wreg free
  3383   001A0C  C012  F060         	movff	?_color_read_Red,_White_setup
  3384   001A10  C013  F061         	movff	?_color_read_Red+1,_White_setup+1
  3385   001A14  0100               	movlb	0	; () banked
  3386   001A16  6B62               	clrf	(_White_setup+2)& (0+255),b
  3387   001A18  6B63               	clrf	(_White_setup+3)& (0+255),b
  3388   001A1A                     
  3389                           ; BSR set to: 0
  3390                           ;color.c: 238:     set_led_color(0b010);
  3391   001A1A  0E00               	movlw	0
  3392   001A1C  6E0F               	movwf	(set_led_color@color+1)^0,c
  3393   001A1E  0E02               	movlw	2
  3394   001A20  6E0E               	movwf	set_led_color@color^0,c
  3395   001A22  ECDF  F010         	call	_set_led_color	;wreg free
  3396   001A26                     
  3397                           ;color.c: 239:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3398   001A26  0E12               	movlw	18
  3399   001A28  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3400   001A2A  0EDC               	movlw	220
  3401   001A2C  6E19               	movwf	??_calibrate_white^0,c
  3402   001A2E  0E60               	movlw	96
  3403   001A30                     u4397:
  3404   001A30  2EE8               	decfsz	wreg,f,c
  3405   001A32  D7FE               	bra	u4397
  3406   001A34  2E19               	decfsz	??_calibrate_white^0,f,c
  3407   001A36  D7FC               	bra	u4397
  3408   001A38  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3409   001A3A  D7FA               	bra	u4397
  3410                           
  3411                           ;color.c: 240:     White_setup.G = color_read_Green();
  3412   001A3C  ECD2  F00F         	call	_color_read_Green	;wreg free
  3413   001A40  C012  F064         	movff	?_color_read_Green,_White_setup+4
  3414   001A44  C013  F065         	movff	?_color_read_Green+1,_White_setup+5
  3415   001A48  0100               	movlb	0	; () banked
  3416   001A4A  6B66               	clrf	(_White_setup+6)& (0+255),b
  3417   001A4C  6B67               	clrf	(_White_setup+7)& (0+255),b
  3418   001A4E                     
  3419                           ; BSR set to: 0
  3420                           ;color.c: 241:     set_led_color(0b001);
  3421   001A4E  0E00               	movlw	0
  3422   001A50  6E0F               	movwf	(set_led_color@color+1)^0,c
  3423   001A52  0E01               	movlw	1
  3424   001A54  6E0E               	movwf	set_led_color@color^0,c
  3425   001A56  ECDF  F010         	call	_set_led_color	;wreg free
  3426   001A5A                     
  3427                           ;color.c: 242:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3428   001A5A  0E12               	movlw	18
  3429   001A5C  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3430   001A5E  0EDC               	movlw	220
  3431   001A60  6E19               	movwf	??_calibrate_white^0,c
  3432   001A62  0E60               	movlw	96
  3433   001A64                     u4407:
  3434   001A64  2EE8               	decfsz	wreg,f,c
  3435   001A66  D7FE               	bra	u4407
  3436   001A68  2E19               	decfsz	??_calibrate_white^0,f,c
  3437   001A6A  D7FC               	bra	u4407
  3438   001A6C  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3439   001A6E  D7FA               	bra	u4407
  3440   001A70                     
  3441                           ;color.c: 243:     White_setup.B = color_read_Blue();
  3442   001A70  EC22  F010         	call	_color_read_Blue	;wreg free
  3443   001A74  C012  F068         	movff	?_color_read_Blue,_White_setup+8
  3444   001A78  C013  F069         	movff	?_color_read_Blue+1,_White_setup+9
  3445   001A7C  0100               	movlb	0	; () banked
  3446   001A7E  6B6A               	clrf	(_White_setup+10)& (0+255),b
  3447   001A80  6B6B               	clrf	(_White_setup+11)& (0+255),b
  3448   001A82                     
  3449                           ; BSR set to: 0
  3450                           ;color.c: 244:     set_led_color(0b000);
  3451   001A82  0E00               	movlw	0
  3452   001A84  6E0F               	movwf	(set_led_color@color+1)^0,c
  3453   001A86  0E00               	movlw	0
  3454   001A88  6E0E               	movwf	set_led_color@color^0,c
  3455   001A8A  ECDF  F010         	call	_set_led_color	;wreg free
  3456   001A8E  0012               	return		;funcret
  3457   001A90                     __end_of_calibrate_white:
  3458                           	callstack 0
  3459                           
  3460 ;; *************** function _calibrate_black *****************
  3461 ;; Defined at:
  3462 ;;		line 214 in file "color.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  clear2          2   30[COMRAM] unsigned int 
  3467 ;;  clear1          2   28[COMRAM] unsigned int 
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		wreg, status,2, status,0, cstack
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3478 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3479 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3480 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3481 ;;Total ram usage:        8 bytes
  3482 ;; Hardware stack levels used: 1
  3483 ;; Hardware stack levels required when called: 8
  3484 ;; This function calls:
  3485 ;;		___lwdiv
  3486 ;;		_color_read_Blue
  3487 ;;		_color_read_Clear
  3488 ;;		_color_read_Green
  3489 ;;		_color_read_Red
  3490 ;;		_set_led_color
  3491 ;; This function is called by:
  3492 ;;		_color_click_init
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text14
  3497   0018AE                     __ptext14:
  3498                           	callstack 0
  3499   0018AE                     _calibrate_black:
  3500                           	callstack 21
  3501   0018AE                     
  3502                           ;color.c: 215:     set_led_color(0b100);
  3503   0018AE  0E00               	movlw	0
  3504   0018B0  6E0F               	movwf	(set_led_color@color+1)^0,c
  3505   0018B2  0E04               	movlw	4
  3506   0018B4  6E0E               	movwf	set_led_color@color^0,c
  3507   0018B6  ECDF  F010         	call	_set_led_color	;wreg free
  3508   0018BA                     
  3509                           ;color.c: 216:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3510   0018BA  0E12               	movlw	18
  3511   0018BC  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3512   0018BE  0EDC               	movlw	220
  3513   0018C0  6E1B               	movwf	??_calibrate_black^0,c
  3514   0018C2  0E60               	movlw	96
  3515   0018C4                     u4417:
  3516   0018C4  2EE8               	decfsz	wreg,f,c
  3517   0018C6  D7FE               	bra	u4417
  3518   0018C8  2E1B               	decfsz	??_calibrate_black^0,f,c
  3519   0018CA  D7FC               	bra	u4417
  3520   0018CC  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3521   0018CE  D7FA               	bra	u4417
  3522   0018D0                     
  3523                           ;color.c: 217:     Black_setup.R = color_read_Red();
  3524   0018D0  ECAA  F00F         	call	_color_read_Red	;wreg free
  3525   0018D4  C012  F039         	movff	?_color_read_Red,_Black_setup
  3526   0018D8  C013  F03A         	movff	?_color_read_Red+1,_Black_setup+1
  3527   0018DC  6A3B               	clrf	(_Black_setup+2)^0,c
  3528   0018DE  6A3C               	clrf	(_Black_setup+3)^0,c
  3529   0018E0                     
  3530                           ;color.c: 218:     set_led_color(0b010);
  3531   0018E0  0E00               	movlw	0
  3532   0018E2  6E0F               	movwf	(set_led_color@color+1)^0,c
  3533   0018E4  0E02               	movlw	2
  3534   0018E6  6E0E               	movwf	set_led_color@color^0,c
  3535   0018E8  ECDF  F010         	call	_set_led_color	;wreg free
  3536   0018EC                     
  3537                           ;color.c: 219:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3538   0018EC  0E12               	movlw	18
  3539   0018EE  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3540   0018F0  0EDC               	movlw	220
  3541   0018F2  6E1B               	movwf	??_calibrate_black^0,c
  3542   0018F4  0E60               	movlw	96
  3543   0018F6                     u4427:
  3544   0018F6  2EE8               	decfsz	wreg,f,c
  3545   0018F8  D7FE               	bra	u4427
  3546   0018FA  2E1B               	decfsz	??_calibrate_black^0,f,c
  3547   0018FC  D7FC               	bra	u4427
  3548   0018FE  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3549   001900  D7FA               	bra	u4427
  3550                           
  3551                           ;color.c: 220:     Black_setup.G = color_read_Green();
  3552   001902  ECD2  F00F         	call	_color_read_Green	;wreg free
  3553   001906  C012  F03D         	movff	?_color_read_Green,_Black_setup+4
  3554   00190A  C013  F03E         	movff	?_color_read_Green+1,_Black_setup+5
  3555   00190E  6A3F               	clrf	(_Black_setup+6)^0,c
  3556   001910  6A40               	clrf	(_Black_setup+7)^0,c
  3557   001912                     
  3558                           ;color.c: 221:     set_led_color(0b001);
  3559   001912  0E00               	movlw	0
  3560   001914  6E0F               	movwf	(set_led_color@color+1)^0,c
  3561   001916  0E01               	movlw	1
  3562   001918  6E0E               	movwf	set_led_color@color^0,c
  3563   00191A  ECDF  F010         	call	_set_led_color	;wreg free
  3564   00191E                     
  3565                           ;color.c: 222:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3566   00191E  0E12               	movlw	18
  3567   001920  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3568   001922  0EDC               	movlw	220
  3569   001924  6E1B               	movwf	??_calibrate_black^0,c
  3570   001926  0E60               	movlw	96
  3571   001928                     u4437:
  3572   001928  2EE8               	decfsz	wreg,f,c
  3573   00192A  D7FE               	bra	u4437
  3574   00192C  2E1B               	decfsz	??_calibrate_black^0,f,c
  3575   00192E  D7FC               	bra	u4437
  3576   001930  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3577   001932  D7FA               	bra	u4437
  3578   001934                     
  3579                           ;color.c: 223:     Black_setup.B = color_read_Blue();
  3580   001934  EC22  F010         	call	_color_read_Blue	;wreg free
  3581   001938  C012  F041         	movff	?_color_read_Blue,_Black_setup+8
  3582   00193C  C013  F042         	movff	?_color_read_Blue+1,_Black_setup+9
  3583   001940  6A43               	clrf	(_Black_setup+10)^0,c
  3584   001942  6A44               	clrf	(_Black_setup+11)^0,c
  3585   001944                     
  3586                           ;color.c: 224:     set_led_color(0b000);
  3587   001944  0E00               	movlw	0
  3588   001946  6E0F               	movwf	(set_led_color@color+1)^0,c
  3589   001948  0E00               	movlw	0
  3590   00194A  6E0E               	movwf	set_led_color@color^0,c
  3591   00194C  ECDF  F010         	call	_set_led_color	;wreg free
  3592                           
  3593                           ;color.c: 225:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3594   001950  0E12               	movlw	18
  3595   001952  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3596   001954  0EDC               	movlw	220
  3597   001956  6E1B               	movwf	??_calibrate_black^0,c
  3598   001958  0E60               	movlw	96
  3599   00195A                     u4447:
  3600   00195A  2EE8               	decfsz	wreg,f,c
  3601   00195C  D7FE               	bra	u4447
  3602   00195E  2E1B               	decfsz	??_calibrate_black^0,f,c
  3603   001960  D7FC               	bra	u4447
  3604   001962  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3605   001964  D7FA               	bra	u4447
  3606   001966                     
  3607                           ;color.c: 226:     unsigned int clear1 = color_read_Clear();
  3608   001966  ECFA  F00F         	call	_color_read_Clear	;wreg free
  3609   00196A  C012  F01D         	movff	?_color_read_Clear,calibrate_black@clear1
  3610   00196E  C013  F01E         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3611   001972                     
  3612                           ;color.c: 227:     set_led_color(0b111);
  3613   001972  0E00               	movlw	0
  3614   001974  6E0F               	movwf	(set_led_color@color+1)^0,c
  3615   001976  0E07               	movlw	7
  3616   001978  6E0E               	movwf	set_led_color@color^0,c
  3617   00197A  ECDF  F010         	call	_set_led_color	;wreg free
  3618   00197E                     
  3619                           ;color.c: 228:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3620   00197E  0E12               	movlw	18
  3621   001980  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3622   001982  0EDC               	movlw	220
  3623   001984  6E1B               	movwf	??_calibrate_black^0,c
  3624   001986  0E60               	movlw	96
  3625   001988                     u4457:
  3626   001988  2EE8               	decfsz	wreg,f,c
  3627   00198A  D7FE               	bra	u4457
  3628   00198C  2E1B               	decfsz	??_calibrate_black^0,f,c
  3629   00198E  D7FC               	bra	u4457
  3630   001990  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3631   001992  D7FA               	bra	u4457
  3632   001994                     
  3633                           ;color.c: 229:     unsigned int clear2 = color_read_Clear();
  3634   001994  ECFA  F00F         	call	_color_read_Clear	;wreg free
  3635   001998  C012  F01F         	movff	?_color_read_Clear,calibrate_black@clear2
  3636   00199C  C013  F020         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3637                           
  3638                           ;color.c: 230:     set_led_color(0b000);
  3639   0019A0  0E00               	movlw	0
  3640   0019A2  6E0F               	movwf	(set_led_color@color+1)^0,c
  3641   0019A4  0E00               	movlw	0
  3642   0019A6  6E0E               	movwf	set_led_color@color^0,c
  3643   0019A8  ECDF  F010         	call	_set_led_color	;wreg free
  3644   0019AC                     
  3645                           ;color.c: 231:     wall_coef = clear2/clear1/5;
  3646   0019AC  C01D  F016         	movff	calibrate_black@clear1,___lwdiv@divisor
  3647   0019B0  C01E  F017         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3648   0019B4  C01F  F014         	movff	calibrate_black@clear2,___lwdiv@dividend
  3649   0019B8  C020  F015         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3650   0019BC  ECA3  F00E         	call	___lwdiv	;wreg free
  3651   0019C0  C014  F021         	movff	?___lwdiv,_calibrate_black$2463
  3652   0019C4  C015  F022         	movff	?___lwdiv+1,_calibrate_black$2463+1
  3653   0019C8                     
  3654                           ;color.c: 231:     wall_coef = clear2/clear1/5;
  3655   0019C8  C021  F014         	movff	_calibrate_black$2463,___lwdiv@dividend
  3656   0019CC  C022  F015         	movff	_calibrate_black$2463+1,___lwdiv@dividend+1
  3657   0019D0  0E00               	movlw	0
  3658   0019D2  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  3659   0019D4  0E05               	movlw	5
  3660   0019D6  6E16               	movwf	___lwdiv@divisor^0,c
  3661   0019D8  ECA3  F00E         	call	___lwdiv	;wreg free
  3662   0019DC  C014  F0A6         	movff	?___lwdiv,_wall_coef
  3663   0019E0  C015  F0A7         	movff	?___lwdiv+1,_wall_coef+1
  3664   0019E4  0012               	return		;funcret
  3665   0019E6                     __end_of_calibrate_black:
  3666                           	callstack 0
  3667                           
  3668 ;; *************** function _set_led_color *****************
  3669 ;; Defined at:
  3670 ;;		line 157 in file "color.c"
  3671 ;; Parameters:    Size  Location     Type
  3672 ;;  color           2   13[COMRAM] unsigned int 
  3673 ;; Auto vars:     Size  Location     Type
  3674 ;;		None
  3675 ;; Return value:  Size  Location     Type
  3676 ;;                  1    wreg      void 
  3677 ;; Registers used:
  3678 ;;		None
  3679 ;; Tracked objects:
  3680 ;;		On entry : 0/0
  3681 ;;		On exit  : 0/0
  3682 ;;		Unchanged: 0/0
  3683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3688 ;;Total ram usage:        2 bytes
  3689 ;; Hardware stack levels used: 1
  3690 ;; Hardware stack levels required when called: 5
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_get_color_code
  3695 ;;		_calibrate_black
  3696 ;;		_calibrate_white
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           	psect	text15
  3701   0021BE                     __ptext15:
  3702                           	callstack 0
  3703   0021BE                     _set_led_color:
  3704                           	callstack 24
  3705   0021BE                     
  3706                           ;color.c: 161:     if(color & 0b100){
  3707   0021BE  A40E               	btfss	set_led_color@color^0,2,c
  3708   0021C0  EFE4  F010         	goto	u3041
  3709   0021C4  EFE6  F010         	goto	u3040
  3710   0021C8                     u3041:
  3711   0021C8  EFE9  F010         	goto	l121
  3712   0021CC                     u3040:
  3713   0021CC                     
  3714                           ;color.c: 162:         LATGbits.LATG1 = 1;
  3715   0021CC  827F               	bsf	127,1,c	;volatile
  3716                           
  3717                           ;color.c: 163:     }else{
  3718   0021CE  EFEA  F010         	goto	l122
  3719   0021D2                     l121:
  3720                           
  3721                           ;color.c: 164:         LATGbits.LATG1 = 0;
  3722   0021D2  927F               	bcf	127,1,c	;volatile
  3723   0021D4                     l122:
  3724                           
  3725                           ;color.c: 166:     if(color & 0b010){
  3726   0021D4  A20E               	btfss	set_led_color@color^0,1,c
  3727   0021D6  EFEF  F010         	goto	u3051
  3728   0021DA  EFF1  F010         	goto	u3050
  3729   0021DE                     u3051:
  3730   0021DE  EFF4  F010         	goto	l123
  3731   0021E2                     u3050:
  3732   0021E2                     
  3733                           ;color.c: 167:         LATAbits.LATA4 = 1;
  3734   0021E2  8879               	bsf	121,4,c	;volatile
  3735                           
  3736                           ;color.c: 168:     }else{
  3737   0021E4  EFF5  F010         	goto	l124
  3738   0021E8                     l123:
  3739                           
  3740                           ;color.c: 169:         LATAbits.LATA4 = 0;
  3741   0021E8  9879               	bcf	121,4,c	;volatile
  3742   0021EA                     l124:
  3743                           
  3744                           ;color.c: 171:     if(color & 0b001){
  3745   0021EA  A00E               	btfss	set_led_color@color^0,0,c
  3746   0021EC  EFFA  F010         	goto	u3061
  3747   0021F0  EFFC  F010         	goto	u3060
  3748   0021F4                     u3061:
  3749   0021F4  EFFF  F010         	goto	l125
  3750   0021F8                     u3060:
  3751   0021F8                     
  3752                           ;color.c: 172:         LATFbits.LATF7 = 1;
  3753   0021F8  8E7E               	bsf	126,7,c	;volatile
  3754                           
  3755                           ;color.c: 173:     }else{
  3756   0021FA  EF00  F011         	goto	l127
  3757   0021FE                     l125:
  3758                           
  3759                           ;color.c: 174:         LATFbits.LATF7 = 0;
  3760   0021FE  9E7E               	bcf	126,7,c	;volatile
  3761   002200                     l127:
  3762   002200  0012               	return		;funcret
  3763   002202                     __end_of_set_led_color:
  3764                           	callstack 0
  3765                           
  3766 ;; *************** function _color_read_Red *****************
  3767 ;; Defined at:
  3768 ;;		line 93 in file "color.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;  tmp             2   22[COMRAM] unsigned int 
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  2   17[COMRAM] unsigned int 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3784 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3785 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3786 ;;Total ram usage:        7 bytes
  3787 ;; Hardware stack levels used: 1
  3788 ;; Hardware stack levels required when called: 7
  3789 ;; This function calls:
  3790 ;;		_I2C_2_Master_Read
  3791 ;;		_I2C_2_Master_RepStart
  3792 ;;		_I2C_2_Master_Start
  3793 ;;		_I2C_2_Master_Stop
  3794 ;;		_I2C_2_Master_Write
  3795 ;; This function is called by:
  3796 ;;		_get_color_code
  3797 ;;		_calibrate_black
  3798 ;;		_calibrate_white
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text16
  3803   001F54                     __ptext16:
  3804                           	callstack 0
  3805   001F54                     _color_read_Red:
  3806                           	callstack 22
  3807   001F54                     
  3808                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  3809   001F54  EC1C  F012         	call	_I2C_2_Master_Start	;wreg free
  3810                           
  3811                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  3812   001F58  0E52               	movlw	82
  3813   001F5A  EC00  F012         	call	_I2C_2_Master_Write
  3814                           
  3815                           ;color.c: 98:  I2C_2_Master_Write(0xA0 | 0x16);
  3816   001F5E  0EB6               	movlw	182
  3817   001F60  EC00  F012         	call	_I2C_2_Master_Write
  3818                           
  3819                           ;color.c: 99:  I2C_2_Master_RepStart();
  3820   001F64  EC21  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3821                           
  3822                           ;color.c: 100:  I2C_2_Master_Write(0x52 | 0x01);
  3823   001F68  0E53               	movlw	83
  3824   001F6A  EC00  F012         	call	_I2C_2_Master_Write
  3825                           
  3826                           ;color.c: 101:  tmp=I2C_2_Master_Read(1);
  3827   001F6E  0E01               	movlw	1
  3828   001F70  EC23  F011         	call	_I2C_2_Master_Read
  3829   001F74  6E14               	movwf	??_color_read_Red^0,c
  3830   001F76  5014               	movf	??_color_read_Red^0,w,c
  3831   001F78  6E17               	movwf	color_read_Red@tmp^0,c
  3832   001F7A  6A18               	clrf	(color_read_Red@tmp+1)^0,c
  3833                           
  3834                           ;color.c: 102:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3835   001F7C  0E00               	movlw	0
  3836   001F7E  EC23  F011         	call	_I2C_2_Master_Read
  3837   001F82  6E14               	movwf	??_color_read_Red^0,c
  3838   001F84  5014               	movf	??_color_read_Red^0,w,c
  3839   001F86  6E16               	movwf	(??_color_read_Red+2)^0,c
  3840   001F88  6A15               	clrf	(??_color_read_Red+1)^0,c
  3841   001F8A  5017               	movf	color_read_Red@tmp^0,w,c
  3842   001F8C  1015               	iorwf	(??_color_read_Red+1)^0,w,c
  3843   001F8E  6E17               	movwf	color_read_Red@tmp^0,c
  3844   001F90  5018               	movf	(color_read_Red@tmp+1)^0,w,c
  3845   001F92  1016               	iorwf	(??_color_read_Red+2)^0,w,c
  3846   001F94  6E18               	movwf	(color_read_Red@tmp+1)^0,c
  3847                           
  3848                           ;color.c: 103:  I2C_2_Master_Stop();
  3849   001F96  EC17  F012         	call	_I2C_2_Master_Stop	;wreg free
  3850   001F9A                     
  3851                           ;color.c: 104:  return tmp;
  3852   001F9A  C017  F012         	movff	color_read_Red@tmp,?_color_read_Red
  3853   001F9E  C018  F013         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3854   001FA2  0012               	return		;funcret
  3855   001FA4                     __end_of_color_read_Red:
  3856                           	callstack 0
  3857                           
  3858 ;; *************** function _color_read_Green *****************
  3859 ;; Defined at:
  3860 ;;		line 121 in file "color.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  tmp             2   22[COMRAM] unsigned int 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  2   17[COMRAM] unsigned int 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : 0/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3874 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3875 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;Total ram usage:        7 bytes
  3879 ;; Hardware stack levels used: 1
  3880 ;; Hardware stack levels required when called: 7
  3881 ;; This function calls:
  3882 ;;		_I2C_2_Master_Read
  3883 ;;		_I2C_2_Master_RepStart
  3884 ;;		_I2C_2_Master_Start
  3885 ;;		_I2C_2_Master_Stop
  3886 ;;		_I2C_2_Master_Write
  3887 ;; This function is called by:
  3888 ;;		_get_color_code
  3889 ;;		_calibrate_black
  3890 ;;		_calibrate_white
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           	psect	text17
  3895   001FA4                     __ptext17:
  3896                           	callstack 0
  3897   001FA4                     _color_read_Green:
  3898                           	callstack 22
  3899   001FA4                     
  3900                           ;color.c: 123:  unsigned int tmp;;color.c: 124:  I2C_2_Master_Start();
  3901   001FA4  EC1C  F012         	call	_I2C_2_Master_Start	;wreg free
  3902                           
  3903                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x00);
  3904   001FA8  0E52               	movlw	82
  3905   001FAA  EC00  F012         	call	_I2C_2_Master_Write
  3906                           
  3907                           ;color.c: 126:  I2C_2_Master_Write(0xA0 | 0x18);
  3908   001FAE  0EB8               	movlw	184
  3909   001FB0  EC00  F012         	call	_I2C_2_Master_Write
  3910                           
  3911                           ;color.c: 127:  I2C_2_Master_RepStart();
  3912   001FB4  EC21  F012         	call	_I2C_2_Master_RepStart	;wreg free
  3913                           
  3914                           ;color.c: 128:  I2C_2_Master_Write(0x52 | 0x01);
  3915   001FB8  0E53               	movlw	83
  3916   001FBA  EC00  F012         	call	_I2C_2_Master_Write
  3917                           
  3918                           ;color.c: 129:  tmp=I2C_2_Master_Read(1);
  3919   001FBE  0E01               	movlw	1
  3920   001FC0  EC23  F011         	call	_I2C_2_Master_Read
  3921   001FC4  6E14               	movwf	??_color_read_Green^0,c
  3922   001FC6  5014               	movf	??_color_read_Green^0,w,c
  3923   001FC8  6E17               	movwf	color_read_Green@tmp^0,c
  3924   001FCA  6A18               	clrf	(color_read_Green@tmp+1)^0,c
  3925                           
  3926                           ;color.c: 130:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3927   001FCC  0E00               	movlw	0
  3928   001FCE  EC23  F011         	call	_I2C_2_Master_Read
  3929   001FD2  6E14               	movwf	??_color_read_Green^0,c
  3930   001FD4  5014               	movf	??_color_read_Green^0,w,c
  3931   001FD6  6E16               	movwf	(??_color_read_Green+2)^0,c
  3932   001FD8  6A15               	clrf	(??_color_read_Green+1)^0,c
  3933   001FDA  5017               	movf	color_read_Green@tmp^0,w,c
  3934   001FDC  1015               	iorwf	(??_color_read_Green+1)^0,w,c
  3935   001FDE  6E17               	movwf	color_read_Green@tmp^0,c
  3936   001FE0  5018               	movf	(color_read_Green@tmp+1)^0,w,c
  3937   001FE2  1016               	iorwf	(??_color_read_Green+2)^0,w,c
  3938   001FE4  6E18               	movwf	(color_read_Green@tmp+1)^0,c
  3939                           
  3940                           ;color.c: 131:  I2C_2_Master_Stop();
  3941   001FE6  EC17  F012         	call	_I2C_2_Master_Stop	;wreg free
  3942   001FEA                     
  3943                           ;color.c: 132:  return tmp;
  3944   001FEA  C017  F012         	movff	color_read_Green@tmp,?_color_read_Green
  3945   001FEE  C018  F013         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3946   001FF2  0012               	return		;funcret
  3947   001FF4                     __end_of_color_read_Green:
  3948                           	callstack 0
  3949                           
  3950 ;; *************** function _color_read_Clear *****************
  3951 ;; Defined at:
  3952 ;;		line 135 in file "color.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  tmp             2   22[COMRAM] unsigned int 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  2   17[COMRAM] unsigned int 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3966 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3967 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;Total ram usage:        7 bytes
  3971 ;; Hardware stack levels used: 1
  3972 ;; Hardware stack levels required when called: 7
  3973 ;; This function calls:
  3974 ;;		_I2C_2_Master_Read
  3975 ;;		_I2C_2_Master_RepStart
  3976 ;;		_I2C_2_Master_Start
  3977 ;;		_I2C_2_Master_Stop
  3978 ;;		_I2C_2_Master_Write
  3979 ;; This function is called by:
  3980 ;;		_calibrate_black
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text18
  3985   001FF4                     __ptext18:
  3986                           	callstack 0
  3987   001FF4                     _color_read_Clear:
  3988                           	callstack 21
  3989   001FF4                     
  3990                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  3991   001FF4  EC1C  F012         	call	_I2C_2_Master_Start	;wreg free
  3992                           
  3993                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  3994   001FF8  0E52               	movlw	82
  3995   001FFA  EC00  F012         	call	_I2C_2_Master_Write
  3996                           
  3997                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  3998   001FFE  0EB4               	movlw	180
  3999   002000  EC00  F012         	call	_I2C_2_Master_Write
  4000                           
  4001                           ;color.c: 141:  I2C_2_Master_RepStart();
  4002   002004  EC21  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4003                           
  4004                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  4005   002008  0E53               	movlw	83
  4006   00200A  EC00  F012         	call	_I2C_2_Master_Write
  4007                           
  4008                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  4009   00200E  0E01               	movlw	1
  4010   002010  EC23  F011         	call	_I2C_2_Master_Read
  4011   002014  6E14               	movwf	??_color_read_Clear^0,c
  4012   002016  5014               	movf	??_color_read_Clear^0,w,c
  4013   002018  6E17               	movwf	color_read_Clear@tmp^0,c
  4014   00201A  6A18               	clrf	(color_read_Clear@tmp+1)^0,c
  4015                           
  4016                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4017   00201C  0E00               	movlw	0
  4018   00201E  EC23  F011         	call	_I2C_2_Master_Read
  4019   002022  6E14               	movwf	??_color_read_Clear^0,c
  4020   002024  5014               	movf	??_color_read_Clear^0,w,c
  4021   002026  6E16               	movwf	(??_color_read_Clear+2)^0,c
  4022   002028  6A15               	clrf	(??_color_read_Clear+1)^0,c
  4023   00202A  5017               	movf	color_read_Clear@tmp^0,w,c
  4024   00202C  1015               	iorwf	(??_color_read_Clear+1)^0,w,c
  4025   00202E  6E17               	movwf	color_read_Clear@tmp^0,c
  4026   002030  5018               	movf	(color_read_Clear@tmp+1)^0,w,c
  4027   002032  1016               	iorwf	(??_color_read_Clear+2)^0,w,c
  4028   002034  6E18               	movwf	(color_read_Clear@tmp+1)^0,c
  4029                           
  4030                           ;color.c: 145:  I2C_2_Master_Stop();
  4031   002036  EC17  F012         	call	_I2C_2_Master_Stop	;wreg free
  4032   00203A                     
  4033                           ;color.c: 146:  return tmp;
  4034   00203A  C017  F012         	movff	color_read_Clear@tmp,?_color_read_Clear
  4035   00203E  C018  F013         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  4036   002042  0012               	return		;funcret
  4037   002044                     __end_of_color_read_Clear:
  4038                           	callstack 0
  4039                           
  4040 ;; *************** function _color_read_Blue *****************
  4041 ;; Defined at:
  4042 ;;		line 107 in file "color.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;  tmp             2   22[COMRAM] unsigned int 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  2   17[COMRAM] unsigned int 
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4056 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4057 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4058 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4059 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4060 ;;Total ram usage:        7 bytes
  4061 ;; Hardware stack levels used: 1
  4062 ;; Hardware stack levels required when called: 7
  4063 ;; This function calls:
  4064 ;;		_I2C_2_Master_Read
  4065 ;;		_I2C_2_Master_RepStart
  4066 ;;		_I2C_2_Master_Start
  4067 ;;		_I2C_2_Master_Stop
  4068 ;;		_I2C_2_Master_Write
  4069 ;; This function is called by:
  4070 ;;		_get_color_code
  4071 ;;		_calibrate_black
  4072 ;;		_calibrate_white
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text19
  4077   002044                     __ptext19:
  4078                           	callstack 0
  4079   002044                     _color_read_Blue:
  4080                           	callstack 22
  4081   002044                     
  4082                           ;color.c: 109:  unsigned int tmp;;color.c: 110:  I2C_2_Master_Start();
  4083   002044  EC1C  F012         	call	_I2C_2_Master_Start	;wreg free
  4084                           
  4085                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x00);
  4086   002048  0E52               	movlw	82
  4087   00204A  EC00  F012         	call	_I2C_2_Master_Write
  4088                           
  4089                           ;color.c: 112:  I2C_2_Master_Write(0xA0 | 0x1A);
  4090   00204E  0EBA               	movlw	186
  4091   002050  EC00  F012         	call	_I2C_2_Master_Write
  4092                           
  4093                           ;color.c: 113:  I2C_2_Master_RepStart();
  4094   002054  EC21  F012         	call	_I2C_2_Master_RepStart	;wreg free
  4095                           
  4096                           ;color.c: 114:  I2C_2_Master_Write(0x52 | 0x01);
  4097   002058  0E53               	movlw	83
  4098   00205A  EC00  F012         	call	_I2C_2_Master_Write
  4099                           
  4100                           ;color.c: 115:  tmp=I2C_2_Master_Read(1);
  4101   00205E  0E01               	movlw	1
  4102   002060  EC23  F011         	call	_I2C_2_Master_Read
  4103   002064  6E14               	movwf	??_color_read_Blue^0,c
  4104   002066  5014               	movf	??_color_read_Blue^0,w,c
  4105   002068  6E17               	movwf	color_read_Blue@tmp^0,c
  4106   00206A  6A18               	clrf	(color_read_Blue@tmp+1)^0,c
  4107                           
  4108                           ;color.c: 116:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  4109   00206C  0E00               	movlw	0
  4110   00206E  EC23  F011         	call	_I2C_2_Master_Read
  4111   002072  6E14               	movwf	??_color_read_Blue^0,c
  4112   002074  5014               	movf	??_color_read_Blue^0,w,c
  4113   002076  6E16               	movwf	(??_color_read_Blue+2)^0,c
  4114   002078  6A15               	clrf	(??_color_read_Blue+1)^0,c
  4115   00207A  5017               	movf	color_read_Blue@tmp^0,w,c
  4116   00207C  1015               	iorwf	(??_color_read_Blue+1)^0,w,c
  4117   00207E  6E17               	movwf	color_read_Blue@tmp^0,c
  4118   002080  5018               	movf	(color_read_Blue@tmp+1)^0,w,c
  4119   002082  1016               	iorwf	(??_color_read_Blue+2)^0,w,c
  4120   002084  6E18               	movwf	(color_read_Blue@tmp+1)^0,c
  4121                           
  4122                           ;color.c: 117:  I2C_2_Master_Stop();
  4123   002086  EC17  F012         	call	_I2C_2_Master_Stop	;wreg free
  4124   00208A                     
  4125                           ;color.c: 118:  return tmp;
  4126   00208A  C017  F012         	movff	color_read_Blue@tmp,?_color_read_Blue
  4127   00208E  C018  F013         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4128   002092  0012               	return		;funcret
  4129   002094                     __end_of_color_read_Blue:
  4130                           	callstack 0
  4131                           
  4132 ;; *************** function _I2C_2_Master_Write *****************
  4133 ;; Defined at:
  4134 ;;		line 45 in file "i2c.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  data_byte       1    wreg     unsigned char 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  data_byte       1   14[COMRAM] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg, status,2, status,0, cstack
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4151 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4152 ;;Total ram usage:        1 bytes
  4153 ;; Hardware stack levels used: 1
  4154 ;; Hardware stack levels required when called: 6
  4155 ;; This function calls:
  4156 ;;		_I2C_2_Master_Idle
  4157 ;; This function is called by:
  4158 ;;		_color_writetoaddr
  4159 ;;		_color_read_Red
  4160 ;;		_color_read_Blue
  4161 ;;		_color_read_Green
  4162 ;;		_color_read_Clear
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text20
  4167   002400                     __ptext20:
  4168                           	callstack 0
  4169   002400                     _I2C_2_Master_Write:
  4170                           	callstack 22
  4171                           
  4172                           ;incstack = 0
  4173                           ;I2C_2_Master_Write@data_byte stored from wreg
  4174   002400  6E0F               	movwf	I2C_2_Master_Write@data_byte^0,c
  4175   002402                     
  4176                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4177   002402  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4178   002406                     
  4179                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4180   002406  C00F  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4181   00240A  0012               	return		;funcret
  4182   00240C                     __end_of_I2C_2_Master_Write:
  4183                           	callstack 0
  4184                           
  4185 ;; *************** function _I2C_2_Master_Stop *****************
  4186 ;; Defined at:
  4187 ;;		line 39 in file "i2c.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4205 ;;Total ram usage:        0 bytes
  4206 ;; Hardware stack levels used: 1
  4207 ;; Hardware stack levels required when called: 6
  4208 ;; This function calls:
  4209 ;;		_I2C_2_Master_Idle
  4210 ;; This function is called by:
  4211 ;;		_color_writetoaddr
  4212 ;;		_color_read_Red
  4213 ;;		_color_read_Blue
  4214 ;;		_color_read_Green
  4215 ;;		_color_read_Clear
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text21
  4220   00242E                     __ptext21:
  4221                           	callstack 0
  4222   00242E                     _I2C_2_Master_Stop:
  4223                           	callstack 22
  4224   00242E                     
  4225                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4226   00242E  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4227   002432                     
  4228                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4229   002432  010E               	movlb	14	; () banked
  4230   002434  85DA               	bsf	218,2,b	;volatile
  4231   002436                     
  4232                           ; BSR set to: 14
  4233   002436  0012               	return		;funcret
  4234   002438                     __end_of_I2C_2_Master_Stop:
  4235                           	callstack 0
  4236                           
  4237 ;; *************** function _I2C_2_Master_Start *****************
  4238 ;; Defined at:
  4239 ;;		line 27 in file "i2c.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;		None
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;		None
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		wreg, status,2, status,0, cstack
  4248 ;; Tracked objects:
  4249 ;;		On entry : 0/0
  4250 ;;		On exit  : 0/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;Total ram usage:        0 bytes
  4258 ;; Hardware stack levels used: 1
  4259 ;; Hardware stack levels required when called: 6
  4260 ;; This function calls:
  4261 ;;		_I2C_2_Master_Idle
  4262 ;; This function is called by:
  4263 ;;		_color_writetoaddr
  4264 ;;		_color_read_Red
  4265 ;;		_color_read_Blue
  4266 ;;		_color_read_Green
  4267 ;;		_color_read_Clear
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text22
  4272   002438                     __ptext22:
  4273                           	callstack 0
  4274   002438                     _I2C_2_Master_Start:
  4275                           	callstack 22
  4276   002438                     
  4277                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4278   002438  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4279   00243C                     
  4280                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4281   00243C  010E               	movlb	14	; () banked
  4282   00243E  81DA               	bsf	218,0,b	;volatile
  4283   002440                     
  4284                           ; BSR set to: 14
  4285   002440  0012               	return		;funcret
  4286   002442                     __end_of_I2C_2_Master_Start:
  4287                           	callstack 0
  4288                           
  4289 ;; *************** function _I2C_2_Master_RepStart *****************
  4290 ;; Defined at:
  4291 ;;		line 33 in file "i2c.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;		None
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;		None
  4296 ;; Return value:  Size  Location     Type
  4297 ;;                  1    wreg      void 
  4298 ;; Registers used:
  4299 ;;		wreg, status,2, status,0, cstack
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;Total ram usage:        0 bytes
  4310 ;; Hardware stack levels used: 1
  4311 ;; Hardware stack levels required when called: 6
  4312 ;; This function calls:
  4313 ;;		_I2C_2_Master_Idle
  4314 ;; This function is called by:
  4315 ;;		_color_read_Red
  4316 ;;		_color_read_Blue
  4317 ;;		_color_read_Green
  4318 ;;		_color_read_Clear
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text23
  4323   002442                     __ptext23:
  4324                           	callstack 0
  4325   002442                     _I2C_2_Master_RepStart:
  4326                           	callstack 22
  4327   002442                     
  4328                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4329   002442  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4330   002446                     
  4331                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4332   002446  010E               	movlb	14	; () banked
  4333   002448  83DA               	bsf	218,1,b	;volatile
  4334   00244A                     
  4335                           ; BSR set to: 14
  4336   00244A  0012               	return		;funcret
  4337   00244C                     __end_of_I2C_2_Master_RepStart:
  4338                           	callstack 0
  4339                           
  4340 ;; *************** function _I2C_2_Master_Read *****************
  4341 ;; Defined at:
  4342 ;;		line 51 in file "i2c.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  ack             1    wreg     unsigned char 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  ack             1   15[COMRAM] unsigned char 
  4347 ;;  tmp             1   16[COMRAM] unsigned char 
  4348 ;; Return value:  Size  Location     Type
  4349 ;;                  1    wreg      unsigned char 
  4350 ;; Registers used:
  4351 ;;		wreg, status,2, status,0, cstack
  4352 ;; Tracked objects:
  4353 ;;		On entry : 0/0
  4354 ;;		On exit  : 0/0
  4355 ;;		Unchanged: 0/0
  4356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4358 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4361 ;;Total ram usage:        3 bytes
  4362 ;; Hardware stack levels used: 1
  4363 ;; Hardware stack levels required when called: 6
  4364 ;; This function calls:
  4365 ;;		_I2C_2_Master_Idle
  4366 ;; This function is called by:
  4367 ;;		_color_read_Red
  4368 ;;		_color_read_Blue
  4369 ;;		_color_read_Green
  4370 ;;		_color_read_Clear
  4371 ;; This function uses a non-reentrant model
  4372 ;;
  4373                           
  4374                           	psect	text24
  4375   002246                     __ptext24:
  4376                           	callstack 0
  4377   002246                     _I2C_2_Master_Read:
  4378                           	callstack 22
  4379                           
  4380                           ; BSR set to: 14
  4381                           ;incstack = 0
  4382                           ;I2C_2_Master_Read@ack stored from wreg
  4383   002246  6E10               	movwf	I2C_2_Master_Read@ack^0,c
  4384   002248                     
  4385                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4386   002248  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4387   00224C                     
  4388                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4389   00224C  010E               	movlb	14	; () banked
  4390   00224E  87DA               	bsf	218,3,b	;volatile
  4391                           
  4392                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4393   002250  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4394   002254                     
  4395                           ;i2c.c: 57:   tmp = SSP2BUF;
  4396   002254  CED5 F011          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4397                           
  4398                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4399   002258  EC92  F011         	call	_I2C_2_Master_Idle	;wreg free
  4400   00225C                     
  4401                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4402   00225C  5010               	movf	I2C_2_Master_Read@ack^0,w,c
  4403   00225E  B4D8               	btfsc	status,2,c
  4404   002260  EF34  F011         	goto	u2991
  4405   002264  EF38  F011         	goto	u2990
  4406   002268                     u2991:
  4407   002268  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4408   00226A  2A0F               	incf	??_I2C_2_Master_Read^0,f,c
  4409   00226C  EF39  F011         	goto	u3008
  4410   002270                     u2990:
  4411   002270  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4412   002272                     u3008:
  4413   002272  3A0F               	swapf	??_I2C_2_Master_Read^0,f,c
  4414   002274  460F               	rlncf	??_I2C_2_Master_Read^0,f,c
  4415   002276  010E               	movlb	14	; () banked
  4416   002278  51DA               	movf	218,w,b	;volatile
  4417   00227A  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4418   00227C  0BDF               	andlw	-33
  4419   00227E  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4420   002280  6FDA               	movwf	218,b	;volatile
  4421   002282                     
  4422                           ; BSR set to: 14
  4423                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4424   002282  89DA               	bsf	218,4,b	;volatile
  4425   002284                     
  4426                           ; BSR set to: 14
  4427                           ;i2c.c: 61:   return tmp;
  4428   002284  5011               	movf	I2C_2_Master_Read@tmp^0,w,c
  4429   002286                     
  4430                           ; BSR set to: 14
  4431   002286  0012               	return		;funcret
  4432   002288                     __end_of_I2C_2_Master_Read:
  4433                           	callstack 0
  4434                           
  4435 ;; *************** function _I2C_2_Master_Idle *****************
  4436 ;; Defined at:
  4437 ;;		line 22 in file "i2c.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;		None
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4453 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4455 ;;Total ram usage:        1 bytes
  4456 ;; Hardware stack levels used: 1
  4457 ;; Hardware stack levels required when called: 5
  4458 ;; This function calls:
  4459 ;;		Nothing
  4460 ;; This function is called by:
  4461 ;;		_I2C_2_Master_Start
  4462 ;;		_I2C_2_Master_RepStart
  4463 ;;		_I2C_2_Master_Stop
  4464 ;;		_I2C_2_Master_Write
  4465 ;;		_I2C_2_Master_Read
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text25
  4470   002324                     __ptext25:
  4471                           	callstack 0
  4472   002324                     _I2C_2_Master_Idle:
  4473                           	callstack 22
  4474   002324                     l386:
  4475   002324  010E               	movlb	14	; () banked
  4476   002326  B5D8               	btfsc	216,2,b	;volatile
  4477   002328  EF98  F011         	goto	u2971
  4478   00232C  EF9A  F011         	goto	u2970
  4479   002330                     u2971:
  4480   002330  EF92  F011         	goto	l386
  4481   002334                     u2970:
  4482   002334                     
  4483                           ; BSR set to: 14
  4484   002334  CEDA F00E          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4485   002338  0E1F               	movlw	31
  4486   00233A  160E               	andwf	??_I2C_2_Master_Idle^0,f,c
  4487   00233C  A4D8               	btfss	status,2,c
  4488   00233E  EFA3  F011         	goto	u2981
  4489   002342  EFA5  F011         	goto	u2980
  4490   002346                     u2981:
  4491   002346  EF92  F011         	goto	l386
  4492   00234A                     u2980:
  4493   00234A                     
  4494                           ; BSR set to: 14
  4495   00234A  0012               	return		;funcret
  4496   00234C                     __end_of_I2C_2_Master_Idle:
  4497                           	callstack 0
  4498                           
  4499 ;; *************** function _I2C_2_Master_Init *****************
  4500 ;; Defined at:
  4501 ;;		line 4 in file "i2c.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;		None
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;		None
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4519 ;;Total ram usage:        0 bytes
  4520 ;; Hardware stack levels used: 1
  4521 ;; Hardware stack levels required when called: 5
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_color_click_init
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text26
  4530   0022FA                     __ptext26:
  4531                           	callstack 0
  4532   0022FA                     _I2C_2_Master_Init:
  4533                           	callstack 24
  4534   0022FA                     
  4535                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4536   0022FA  010E               	movlb	14	; () banked
  4537   0022FC  51D9               	movf	217,w,b	;volatile
  4538   0022FE  0BF0               	andlw	-16
  4539   002300  0908               	iorlw	8
  4540   002302  6FD9               	movwf	217,b	;volatile
  4541   002304                     
  4542                           ; BSR set to: 14
  4543                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4544   002304  8BD9               	bsf	217,5,b	;volatile
  4545                           
  4546                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4547   002306  0E9F               	movlw	159
  4548   002308  6FD6               	movwf	214,b	;volatile
  4549   00230A                     
  4550                           ; BSR set to: 14
  4551                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4552   00230A  8A84               	bsf	132,5,c	;volatile
  4553   00230C                     
  4554                           ; BSR set to: 14
  4555                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4556   00230C  8C84               	bsf	132,6,c	;volatile
  4557   00230E                     
  4558                           ; BSR set to: 14
  4559                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4560   00230E  9BA7               	bcf	167,5,b	;volatile
  4561   002310                     
  4562                           ; BSR set to: 14
  4563                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4564   002310  9DA7               	bcf	167,6,b	;volatile
  4565                           
  4566                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4567   002312  0E1D               	movlw	29
  4568   002314  6F1D               	movwf	29,b	;volatile
  4569                           
  4570                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4571   002316  0E1E               	movlw	30
  4572   002318  6F1C               	movwf	28,b	;volatile
  4573                           
  4574                           ;i2c.c: 18:   RD5PPS=0x1C;
  4575   00231A  0E1C               	movlw	28
  4576   00231C  6F6F               	movwf	111,b	;volatile
  4577                           
  4578                           ;i2c.c: 19:   RD6PPS=0x1B;
  4579   00231E  0E1B               	movlw	27
  4580   002320  6F70               	movwf	112,b	;volatile
  4581   002322                     
  4582                           ; BSR set to: 14
  4583   002322  0012               	return		;funcret
  4584   002324                     __end_of_I2C_2_Master_Init:
  4585                           	callstack 0
  4586                           
  4587 ;; *************** function _add_seconds_to_list *****************
  4588 ;; Defined at:
  4589 ;;		line 420 in file "dc_motor.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;		None
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;		None
  4594 ;; Return value:  Size  Location     Type
  4595 ;;                  1    wreg      void 
  4596 ;; Registers used:
  4597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4598 ;; Tracked objects:
  4599 ;;		On entry : 0/0
  4600 ;;		On exit  : 0/0
  4601 ;;		Unchanged: 0/0
  4602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4605 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4606 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4607 ;;Total ram usage:        2 bytes
  4608 ;; Hardware stack levels used: 1
  4609 ;; Hardware stack levels required when called: 5
  4610 ;; This function calls:
  4611 ;;		Nothing
  4612 ;; This function is called by:
  4613 ;;		_main
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text27
  4618   002176                     __ptext27:
  4619                           	callstack 0
  4620   002176                     _add_seconds_to_list:
  4621                           	callstack 25
  4622   002176                     
  4623                           ;dc_motor.c: 422:     if (seconds > twothirds)
  4624   002176  BE4A               	btfsc	(_seconds+1)^0,7,c
  4625   002178  EFC7  F010         	goto	u3801
  4626   00217C  504A               	movf	(_seconds+1)^0,w,c
  4627   00217E  E109               	bnz	u3800
  4628   002180  0E0C               	movlw	12
  4629   002182  5C49               	subwf	_seconds^0,w,c
  4630   002184  A0D8               	btfss	status,0,c
  4631   002186  EFC7  F010         	goto	u3801
  4632   00218A  EFC9  F010         	goto	u3800
  4633   00218E                     u3801:
  4634   00218E  EFDE  F010         	goto	l338
  4635   002192                     u3800:
  4636   002192                     
  4637                           ;dc_motor.c: 423:     {;dc_motor.c: 424:         movement_list[index] = seconds - halfbl
      +                          ock;
  4638   002192  0EFB               	movlw	251
  4639   002194  2449               	addwf	_seconds^0,w,c
  4640   002196  6E0E               	movwf	??_add_seconds_to_list^0,c
  4641   002198  0EFF               	movlw	255
  4642   00219A  204A               	addwfc	(_seconds+1)^0,w,c
  4643   00219C  6E0F               	movwf	(??_add_seconds_to_list+1)^0,c
  4644   00219E  90D8               	bcf	status,0,c
  4645   0021A0  3447               	rlcf	_index^0,w,c
  4646   0021A2  6ED9               	movwf	fsr2l,c
  4647   0021A4  3448               	rlcf	(_index+1)^0,w,c
  4648   0021A6  6EDA               	movwf	fsr2h,c
  4649   0021A8  0E00               	movlw	low _movement_list
  4650   0021AA  26D9               	addwf	fsr2l,f,c
  4651   0021AC  0E02               	movlw	high _movement_list
  4652   0021AE  22DA               	addwfc	fsr2h,f,c
  4653   0021B0  C00E  FFDE         	movff	??_add_seconds_to_list,postinc2
  4654   0021B4  C00F  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4655   0021B8                     
  4656                           ;dc_motor.c: 425:         index++;
  4657   0021B8  4A47               	infsnz	_index^0,f,c
  4658   0021BA  2A48               	incf	(_index+1)^0,f,c
  4659   0021BC                     l338:
  4660   0021BC  0012               	return		;funcret
  4661   0021BE                     __end_of_add_seconds_to_list:
  4662                           	callstack 0
  4663                           
  4664 ;; *************** function _Timer0_init *****************
  4665 ;; Defined at:
  4666 ;;		line 7 in file "timers.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      void 
  4673 ;; Registers used:
  4674 ;;		wreg, status,2
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used: 1
  4686 ;; Hardware stack levels required when called: 5
  4687 ;; This function calls:
  4688 ;;		Nothing
  4689 ;; This function is called by:
  4690 ;;		_main
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           	psect	text28
  4695   0023BA                     __ptext28:
  4696                           	callstack 0
  4697   0023BA                     _Timer0_init:
  4698                           	callstack 25
  4699   0023BA                     
  4700                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4701   0023BA  50D6               	movf	214,w,c	;volatile
  4702   0023BC  0B1F               	andlw	-225
  4703   0023BE  0940               	iorlw	64
  4704   0023C0  6ED6               	movwf	214,c	;volatile
  4705   0023C2                     
  4706                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4707   0023C2  88D6               	bsf	214,4,c	;volatile
  4708                           
  4709                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4710   0023C4  50D6               	movf	214,w,c	;volatile
  4711   0023C6  0BF0               	andlw	-16
  4712   0023C8  0908               	iorlw	8
  4713   0023CA  6ED6               	movwf	214,c	;volatile
  4714                           
  4715                           ;timers.c: 13:     TMR0H=0b11111101;
  4716   0023CC  0EFD               	movlw	253
  4717   0023CE  6ED4               	movwf	212,c	;volatile
  4718                           
  4719                           ;timers.c: 14:     TMR0L=0b10010000;
  4720   0023D0  0E90               	movlw	144
  4721   0023D2  6ED3               	movwf	211,c	;volatile
  4722   0023D4                     
  4723                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4724   0023D4  88D5               	bsf	213,4,c	;volatile
  4725   0023D6                     
  4726                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4727   0023D6  8ED5               	bsf	213,7,c	;volatile
  4728   0023D8  0012               	return		;funcret
  4729   0023DA                     __end_of_Timer0_init:
  4730                           	callstack 0
  4731                           
  4732 ;; *************** function _RobotMovement *****************
  4733 ;; Defined at:
  4734 ;;		line 263 in file "dc_motor.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  color           2   42[COMRAM] unsigned int 
  4737 ;;  motorL          2   44[COMRAM] PTR struct DC_motor
  4738 ;;		 -> main@motorL(9), 
  4739 ;;  motorR          2   46[COMRAM] PTR struct DC_motor
  4740 ;;		 -> main@motorR(9), 
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;  i               2   52[COMRAM] int 
  4743 ;;  i               2   50[COMRAM] int 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      void 
  4746 ;; Registers used:
  4747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 0/0
  4750 ;;		On exit  : 0/0
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4753 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4754 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4756 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4757 ;;Total ram usage:       12 bytes
  4758 ;; Hardware stack levels used: 1
  4759 ;; Hardware stack levels required when called: 8
  4760 ;; This function calls:
  4761 ;;		_TimedfullSpeedAhead
  4762 ;;		_moveBack
  4763 ;;		_stop
  4764 ;;		_turnLeft
  4765 ;;		_turnLeftLong
  4766 ;;		_turnRight
  4767 ;;		_turnRightLong
  4768 ;; This function is called by:
  4769 ;;		_main
  4770 ;; This function uses a non-reentrant model
  4771 ;;
  4772                           
  4773                           	psect	text29
  4774   0000A6                     __ptext29:
  4775                           	callstack 0
  4776   0000A6                     _RobotMovement:
  4777                           	callstack 22
  4778   0000A6                     
  4779                           ;dc_motor.c: 263: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 264: {;dc_motor.c: 265:     moveBack(motorL, motorR, halfblock);
  4780   0000A6  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4781   0000AA  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4782   0000AE  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4783   0000B2  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4784   0000B6  0E00               	movlw	0
  4785   0000B8  6E26               	movwf	(moveBack@time+1)^0,c
  4786   0000BA  0E05               	movlw	5
  4787   0000BC  6E25               	movwf	moveBack@time^0,c
  4788   0000BE  EC2F  F00E         	call	_moveBack	;wreg free
  4789                           
  4790                           ;dc_motor.c: 266:     stop(motorL,motorR);
  4791   0000C2  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4792   0000C6  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4793   0000CA  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4794   0000CE  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4795   0000D2  EC72  F010         	call	_stop	;wreg free
  4796   0000D6                     
  4797                           ;dc_motor.c: 269:     if(color == 0){
  4798   0000D6  502B               	movf	RobotMovement@color^0,w,c
  4799   0000D8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4800   0000DA  A4D8               	btfss	status,2,c
  4801   0000DC  EF72  F000         	goto	u3591
  4802   0000E0  EF74  F000         	goto	u3590
  4803   0000E4                     u3591:
  4804   0000E4  EF8D  F000         	goto	l4290
  4805   0000E8                     u3590:
  4806   0000E8                     
  4807                           ;dc_motor.c: 270:         turnRight(motorL, motorR);
  4808   0000E8  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4809   0000EC  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4810   0000F0  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4811   0000F4  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4812   0000F8  EC13  F00B         	call	_turnRight	;wreg free
  4813   0000FC                     
  4814                           ;dc_motor.c: 271:         movement_list[index] = -1;
  4815   0000FC  90D8               	bcf	status,0,c
  4816   0000FE  3447               	rlcf	_index^0,w,c
  4817   000100  6ED9               	movwf	fsr2l,c
  4818   000102  3448               	rlcf	(_index+1)^0,w,c
  4819   000104  6EDA               	movwf	fsr2h,c
  4820   000106  0E00               	movlw	low _movement_list
  4821   000108  26D9               	addwf	fsr2l,f,c
  4822   00010A  0E02               	movlw	high _movement_list
  4823   00010C  22DA               	addwfc	fsr2h,f,c
  4824   00010E  0EFF               	movlw	255
  4825   000110  6EDE               	movwf	postinc2,c
  4826   000112  0EFF               	movlw	255
  4827   000114  6EDD               	movwf	postdec2,c
  4828   000116                     
  4829                           ;dc_motor.c: 272:         index++;
  4830   000116  4A47               	infsnz	_index^0,f,c
  4831   000118  2A48               	incf	(_index+1)^0,f,c
  4832   00011A                     l4290:
  4833                           
  4834                           ;dc_motor.c: 275:     if(color == 1){
  4835   00011A  042B               	decf	RobotMovement@color^0,w,c
  4836   00011C  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4837   00011E  A4D8               	btfss	status,2,c
  4838   000120  EF94  F000         	goto	u3601
  4839   000124  EF96  F000         	goto	u3600
  4840   000128                     u3601:
  4841   000128  EFAF  F000         	goto	l4298
  4842   00012C                     u3600:
  4843   00012C                     
  4844                           ;dc_motor.c: 276:         turnLeft(motorL, motorR);
  4845   00012C  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  4846   000130  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4847   000134  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  4848   000138  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4849   00013C  ECBE  F009         	call	_turnLeft	;wreg free
  4850   000140                     
  4851                           ;dc_motor.c: 277:         movement_list[index] = -2;
  4852   000140  90D8               	bcf	status,0,c
  4853   000142  3447               	rlcf	_index^0,w,c
  4854   000144  6ED9               	movwf	fsr2l,c
  4855   000146  3448               	rlcf	(_index+1)^0,w,c
  4856   000148  6EDA               	movwf	fsr2h,c
  4857   00014A  0E00               	movlw	low _movement_list
  4858   00014C  26D9               	addwf	fsr2l,f,c
  4859   00014E  0E02               	movlw	high _movement_list
  4860   000150  22DA               	addwfc	fsr2h,f,c
  4861   000152  0EFE               	movlw	254
  4862   000154  6EDE               	movwf	postinc2,c
  4863   000156  0EFF               	movlw	255
  4864   000158  6EDD               	movwf	postdec2,c
  4865   00015A                     
  4866                           ;dc_motor.c: 278:         index++;
  4867   00015A  4A47               	infsnz	_index^0,f,c
  4868   00015C  2A48               	incf	(_index+1)^0,f,c
  4869   00015E                     l4298:
  4870                           
  4871                           ;dc_motor.c: 281:     if(color == 2){
  4872   00015E  0E02               	movlw	2
  4873   000160  182B               	xorwf	RobotMovement@color^0,w,c
  4874   000162  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4875   000164  A4D8               	btfss	status,2,c
  4876   000166  EFB7  F000         	goto	u3611
  4877   00016A  EFB9  F000         	goto	u3610
  4878   00016E                     u3611:
  4879   00016E  EFE6  F000         	goto	l4316
  4880   000172                     u3610:
  4881   000172                     
  4882                           ;dc_motor.c: 282:         int i;;dc_motor.c: 283:         for (i=0;i<2;i++){
  4883   000172  0E00               	movlw	0
  4884   000174  6E34               	movwf	(RobotMovement@i+1)^0,c
  4885   000176  0E00               	movlw	0
  4886   000178  6E33               	movwf	RobotMovement@i^0,c
  4887   00017A                     l4306:
  4888                           
  4889                           ;dc_motor.c: 284:             turnRight(motorL, motorR);
  4890   00017A  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4891   00017E  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4892   000182  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4893   000186  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4894   00018A  EC13  F00B         	call	_turnRight	;wreg free
  4895   00018E                     
  4896                           ;dc_motor.c: 285:             movement_list[index] = -1;
  4897   00018E  90D8               	bcf	status,0,c
  4898   000190  3447               	rlcf	_index^0,w,c
  4899   000192  6ED9               	movwf	fsr2l,c
  4900   000194  3448               	rlcf	(_index+1)^0,w,c
  4901   000196  6EDA               	movwf	fsr2h,c
  4902   000198  0E00               	movlw	low _movement_list
  4903   00019A  26D9               	addwf	fsr2l,f,c
  4904   00019C  0E02               	movlw	high _movement_list
  4905   00019E  22DA               	addwfc	fsr2h,f,c
  4906   0001A0  0EFF               	movlw	255
  4907   0001A2  6EDE               	movwf	postinc2,c
  4908   0001A4  0EFF               	movlw	255
  4909   0001A6  6EDD               	movwf	postdec2,c
  4910   0001A8                     
  4911                           ;dc_motor.c: 286:             index++;
  4912   0001A8  4A47               	infsnz	_index^0,f,c
  4913   0001AA  2A48               	incf	(_index+1)^0,f,c
  4914   0001AC                     
  4915                           ;dc_motor.c: 287:         }
  4916   0001AC  4A33               	infsnz	RobotMovement@i^0,f,c
  4917   0001AE  2A34               	incf	(RobotMovement@i+1)^0,f,c
  4918   0001B0  BE34               	btfsc	(RobotMovement@i+1)^0,7,c
  4919   0001B2  EFE4  F000         	goto	u3621
  4920   0001B6  5034               	movf	(RobotMovement@i+1)^0,w,c
  4921   0001B8  E109               	bnz	u3620
  4922   0001BA  0E02               	movlw	2
  4923   0001BC  5C33               	subwf	RobotMovement@i^0,w,c
  4924   0001BE  A0D8               	btfss	status,0,c
  4925   0001C0  EFE4  F000         	goto	u3621
  4926   0001C4  EFE6  F000         	goto	u3620
  4927   0001C8                     u3621:
  4928   0001C8  EFBD  F000         	goto	l4306
  4929   0001CC                     u3620:
  4930   0001CC                     l4316:
  4931                           
  4932                           ;dc_motor.c: 290:     if(color == 3){
  4933   0001CC  0E03               	movlw	3
  4934   0001CE  182B               	xorwf	RobotMovement@color^0,w,c
  4935   0001D0  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4936   0001D2  A4D8               	btfss	status,2,c
  4937   0001D4  EFEE  F000         	goto	u3631
  4938   0001D8  EFF0  F000         	goto	u3630
  4939   0001DC                     u3631:
  4940   0001DC  EFF0  F001         	goto	l4346
  4941   0001E0                     u3630:
  4942   0001E0                     
  4943                           ;dc_motor.c: 292:         moveBack(motorL, motorR, blockback);
  4944   0001E0  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4945   0001E4  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4946   0001E8  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4947   0001EC  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4948   0001F0  0E00               	movlw	0
  4949   0001F2  6E26               	movwf	(moveBack@time+1)^0,c
  4950   0001F4  0E10               	movlw	16
  4951   0001F6  6E25               	movwf	moveBack@time^0,c
  4952   0001F8  EC2F  F00E         	call	_moveBack	;wreg free
  4953                           
  4954                           ;dc_motor.c: 293:         stop(motorL, motorR);
  4955   0001FC  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4956   000200  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4957   000204  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4958   000208  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4959   00020C  EC72  F010         	call	_stop	;wreg free
  4960                           
  4961                           ;dc_motor.c: 294:         turnRight(motorL, motorR);
  4962   000210  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4963   000214  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4964   000218  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4965   00021C  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4966   000220  EC13  F00B         	call	_turnRight	;wreg free
  4967   000224                     
  4968                           ;dc_motor.c: 296:         if (movement_list[index-1] > halfblock)
  4969   000224  90D8               	bcf	status,0,c
  4970   000226  3447               	rlcf	_index^0,w,c
  4971   000228  6ED9               	movwf	fsr2l,c
  4972   00022A  3448               	rlcf	(_index+1)^0,w,c
  4973   00022C  6EDA               	movwf	fsr2h,c
  4974   00022E  0EFE               	movlw	low (_movement_list+65534)
  4975   000230  26D9               	addwf	fsr2l,f,c
  4976   000232  0E01               	movlw	high (_movement_list+65534)
  4977   000234  22DA               	addwfc	fsr2h,f,c
  4978   000236  0E01               	movlw	1
  4979   000238  BEDB               	btfsc	plusw2,7,c
  4980   00023A  EF29  F001         	goto	u3641
  4981   00023E  0E01               	movlw	1
  4982   000240  50DB               	movf	plusw2,w,c
  4983   000242  E109               	bnz	u3640
  4984   000244  0E06               	movlw	6
  4985   000246  5CDE               	subwf	postinc2,w,c
  4986   000248  A0D8               	btfss	status,0,c
  4987   00024A  EF29  F001         	goto	u3641
  4988   00024E  EF2B  F001         	goto	u3640
  4989   000252                     u3641:
  4990   000252  EF49  F001         	goto	l4326
  4991   000256                     u3640:
  4992   000256                     
  4993                           ;dc_motor.c: 297:         {;dc_motor.c: 299:             movement_list[index-1] -= twoth
      +                          irds;
  4994   000256  90D8               	bcf	status,0,c
  4995   000258  3447               	rlcf	_index^0,w,c
  4996   00025A  6ED9               	movwf	fsr2l,c
  4997   00025C  3448               	rlcf	(_index+1)^0,w,c
  4998   00025E  6EDA               	movwf	fsr2h,c
  4999   000260  0EFE               	movlw	low (_movement_list+65534)
  5000   000262  26D9               	addwf	fsr2l,f,c
  5001   000264  0E01               	movlw	high (_movement_list+65534)
  5002   000266  22DA               	addwfc	fsr2h,f,c
  5003   000268  0EF5               	movlw	245
  5004   00026A  26DE               	addwf	postinc2,f,c
  5005   00026C  0EFF               	movlw	255
  5006   00026E  22DD               	addwfc	postdec2,f,c
  5007                           
  5008                           ;dc_motor.c: 301:             movement_list[index] = -1;
  5009   000270  90D8               	bcf	status,0,c
  5010   000272  3447               	rlcf	_index^0,w,c
  5011   000274  6ED9               	movwf	fsr2l,c
  5012   000276  3448               	rlcf	(_index+1)^0,w,c
  5013   000278  6EDA               	movwf	fsr2h,c
  5014   00027A  0E00               	movlw	low _movement_list
  5015   00027C  26D9               	addwf	fsr2l,f,c
  5016   00027E  0E02               	movlw	high _movement_list
  5017   000280  22DA               	addwfc	fsr2h,f,c
  5018   000282  0EFF               	movlw	255
  5019   000284  6EDE               	movwf	postinc2,c
  5020   000286  0EFF               	movlw	255
  5021   000288  6EDD               	movwf	postdec2,c
  5022   00028A                     
  5023                           ;dc_motor.c: 302:             index += 1;
  5024   00028A  4A47               	infsnz	_index^0,f,c
  5025   00028C  2A48               	incf	(_index+1)^0,f,c
  5026                           
  5027                           ;dc_motor.c: 303:         }else{
  5028   00028E  EFF0  F001         	goto	l4346
  5029   000292                     l4326:
  5030                           
  5031                           ;dc_motor.c: 305:             if (movement_list[index-1] == -1)
  5032   000292  90D8               	bcf	status,0,c
  5033   000294  3447               	rlcf	_index^0,w,c
  5034   000296  6ED9               	movwf	fsr2l,c
  5035   000298  3448               	rlcf	(_index+1)^0,w,c
  5036   00029A  6EDA               	movwf	fsr2h,c
  5037   00029C  0EFE               	movlw	low (_movement_list+65534)
  5038   00029E  26D9               	addwf	fsr2l,f,c
  5039   0002A0  0E01               	movlw	high (_movement_list+65534)
  5040   0002A2  22DA               	addwfc	fsr2h,f,c
  5041   0002A4  28DE               	incf	postinc2,w,c
  5042   0002A6  E106               	bnz	u3651
  5043   0002A8  28DE               	incf	postinc2,w,c
  5044   0002AA  A4D8               	btfss	status,2,c
  5045   0002AC  EF5A  F001         	goto	u3651
  5046   0002B0  EF5C  F001         	goto	u3650
  5047   0002B4                     u3651:
  5048   0002B4  EF6B  F001         	goto	l4330
  5049   0002B8                     u3650:
  5050   0002B8                     
  5051                           ;dc_motor.c: 306:             {;dc_motor.c: 308:                 movement_list[index-1] 
      +                          = -2;
  5052   0002B8  90D8               	bcf	status,0,c
  5053   0002BA  3447               	rlcf	_index^0,w,c
  5054   0002BC  6ED9               	movwf	fsr2l,c
  5055   0002BE  3448               	rlcf	(_index+1)^0,w,c
  5056   0002C0  6EDA               	movwf	fsr2h,c
  5057   0002C2  0EFE               	movlw	low (_movement_list+65534)
  5058   0002C4  26D9               	addwf	fsr2l,f,c
  5059   0002C6  0E01               	movlw	high (_movement_list+65534)
  5060   0002C8  22DA               	addwfc	fsr2h,f,c
  5061   0002CA  0EFE               	movlw	254
  5062   0002CC  6EDE               	movwf	postinc2,c
  5063   0002CE  0EFF               	movlw	255
  5064   0002D0  6EDD               	movwf	postdec2,c
  5065                           
  5066                           ;dc_motor.c: 309:             }
  5067   0002D2  EFD2  F001         	goto	l309
  5068   0002D6                     l4330:
  5069   0002D6  90D8               	bcf	status,0,c
  5070   0002D8  3447               	rlcf	_index^0,w,c
  5071   0002DA  6ED9               	movwf	fsr2l,c
  5072   0002DC  3448               	rlcf	(_index+1)^0,w,c
  5073   0002DE  6EDA               	movwf	fsr2h,c
  5074   0002E0  0EFE               	movlw	low (_movement_list+65534)
  5075   0002E2  26D9               	addwf	fsr2l,f,c
  5076   0002E4  0E01               	movlw	high (_movement_list+65534)
  5077   0002E6  22DA               	addwfc	fsr2h,f,c
  5078   0002E8  0EFE               	movlw	254
  5079   0002EA  18DE               	xorwf	postinc2,w,c
  5080   0002EC  E106               	bnz	u3661
  5081   0002EE  28DE               	incf	postinc2,w,c
  5082   0002F0  A4D8               	btfss	status,2,c
  5083   0002F2  EF7D  F001         	goto	u3661
  5084   0002F6  EF7F  F001         	goto	u3660
  5085   0002FA                     u3661:
  5086   0002FA  EF8E  F001         	goto	l4334
  5087   0002FE                     u3660:
  5088   0002FE                     
  5089                           ;dc_motor.c: 312:             {;dc_motor.c: 314:                 movement_list[index-1] 
      +                          = -1;
  5090   0002FE  90D8               	bcf	status,0,c
  5091   000300  3447               	rlcf	_index^0,w,c
  5092   000302  6ED9               	movwf	fsr2l,c
  5093   000304  3448               	rlcf	(_index+1)^0,w,c
  5094   000306  6EDA               	movwf	fsr2h,c
  5095   000308  0EFE               	movlw	low (_movement_list+65534)
  5096   00030A  26D9               	addwf	fsr2l,f,c
  5097   00030C  0E01               	movlw	high (_movement_list+65534)
  5098   00030E  22DA               	addwfc	fsr2h,f,c
  5099   000310  0EFF               	movlw	255
  5100   000312  6EDE               	movwf	postinc2,c
  5101   000314  0EFF               	movlw	255
  5102   000316  6EDD               	movwf	postdec2,c
  5103                           
  5104                           ;dc_motor.c: 315:             }
  5105   000318  EFD2  F001         	goto	l309
  5106   00031C                     l4334:
  5107   00031C  90D8               	bcf	status,0,c
  5108   00031E  3447               	rlcf	_index^0,w,c
  5109   000320  6ED9               	movwf	fsr2l,c
  5110   000322  3448               	rlcf	(_index+1)^0,w,c
  5111   000324  6EDA               	movwf	fsr2h,c
  5112   000326  0EFE               	movlw	low (_movement_list+65534)
  5113   000328  26D9               	addwf	fsr2l,f,c
  5114   00032A  0E01               	movlw	high (_movement_list+65534)
  5115   00032C  22DA               	addwfc	fsr2h,f,c
  5116   00032E  0EFD               	movlw	253
  5117   000330  18DE               	xorwf	postinc2,w,c
  5118   000332  E106               	bnz	u3671
  5119   000334  28DE               	incf	postinc2,w,c
  5120   000336  A4D8               	btfss	status,2,c
  5121   000338  EFA0  F001         	goto	u3671
  5122   00033C  EFA2  F001         	goto	u3670
  5123   000340                     u3671:
  5124   000340  EFB1  F001         	goto	l4338
  5125   000344                     u3670:
  5126   000344                     
  5127                           ;dc_motor.c: 318:             {;dc_motor.c: 320:                 movement_list[index-1] 
      +                          = -4;
  5128   000344  90D8               	bcf	status,0,c
  5129   000346  3447               	rlcf	_index^0,w,c
  5130   000348  6ED9               	movwf	fsr2l,c
  5131   00034A  3448               	rlcf	(_index+1)^0,w,c
  5132   00034C  6EDA               	movwf	fsr2h,c
  5133   00034E  0EFE               	movlw	low (_movement_list+65534)
  5134   000350  26D9               	addwf	fsr2l,f,c
  5135   000352  0E01               	movlw	high (_movement_list+65534)
  5136   000354  22DA               	addwfc	fsr2h,f,c
  5137   000356  0EFC               	movlw	252
  5138   000358  6EDE               	movwf	postinc2,c
  5139   00035A  0EFF               	movlw	255
  5140   00035C  6EDD               	movwf	postdec2,c
  5141                           
  5142                           ;dc_motor.c: 321:             }
  5143   00035E  EFD2  F001         	goto	l309
  5144   000362                     l4338:
  5145   000362  90D8               	bcf	status,0,c
  5146   000364  3447               	rlcf	_index^0,w,c
  5147   000366  6ED9               	movwf	fsr2l,c
  5148   000368  3448               	rlcf	(_index+1)^0,w,c
  5149   00036A  6EDA               	movwf	fsr2h,c
  5150   00036C  0EFE               	movlw	low (_movement_list+65534)
  5151   00036E  26D9               	addwf	fsr2l,f,c
  5152   000370  0E01               	movlw	high (_movement_list+65534)
  5153   000372  22DA               	addwfc	fsr2h,f,c
  5154   000374  0EFC               	movlw	252
  5155   000376  18DE               	xorwf	postinc2,w,c
  5156   000378  E106               	bnz	u3681
  5157   00037A  28DE               	incf	postinc2,w,c
  5158   00037C  A4D8               	btfss	status,2,c
  5159   00037E  EFC3  F001         	goto	u3681
  5160   000382  EFC5  F001         	goto	u3680
  5161   000386                     u3681:
  5162   000386  EFD2  F001         	goto	l309
  5163   00038A                     u3680:
  5164   00038A                     
  5165                           ;dc_motor.c: 324:             {;dc_motor.c: 326:                 movement_list[index-1] 
      +                          = -3;
  5166   00038A  90D8               	bcf	status,0,c
  5167   00038C  3447               	rlcf	_index^0,w,c
  5168   00038E  6ED9               	movwf	fsr2l,c
  5169   000390  3448               	rlcf	(_index+1)^0,w,c
  5170   000392  6EDA               	movwf	fsr2h,c
  5171   000394  0EFE               	movlw	low (_movement_list+65534)
  5172   000396  26D9               	addwf	fsr2l,f,c
  5173   000398  0E01               	movlw	high (_movement_list+65534)
  5174   00039A  22DA               	addwfc	fsr2h,f,c
  5175   00039C  0EFD               	movlw	253
  5176   00039E  6EDE               	movwf	postinc2,c
  5177   0003A0  0EFF               	movlw	255
  5178   0003A2  6EDD               	movwf	postdec2,c
  5179   0003A4                     l309:
  5180                           
  5181                           ;dc_motor.c: 329:             movement_list[index] = blockahead;
  5182   0003A4  90D8               	bcf	status,0,c
  5183   0003A6  3447               	rlcf	_index^0,w,c
  5184   0003A8  6ED9               	movwf	fsr2l,c
  5185   0003AA  3448               	rlcf	(_index+1)^0,w,c
  5186   0003AC  6EDA               	movwf	fsr2h,c
  5187   0003AE  0E00               	movlw	low _movement_list
  5188   0003B0  26D9               	addwf	fsr2l,f,c
  5189   0003B2  0E02               	movlw	high _movement_list
  5190   0003B4  22DA               	addwfc	fsr2h,f,c
  5191   0003B6  0E10               	movlw	16
  5192   0003B8  6EDE               	movwf	postinc2,c
  5193   0003BA  0E00               	movlw	0
  5194   0003BC  6EDD               	movwf	postdec2,c
  5195   0003BE                     
  5196                           ;dc_motor.c: 330:             index += 1;
  5197   0003BE  4A47               	infsnz	_index^0,f,c
  5198   0003C0  2A48               	incf	(_index+1)^0,f,c
  5199   0003C2                     
  5200                           ;dc_motor.c: 332:             movement_list[index] = -2;
  5201   0003C2  90D8               	bcf	status,0,c
  5202   0003C4  3447               	rlcf	_index^0,w,c
  5203   0003C6  6ED9               	movwf	fsr2l,c
  5204   0003C8  3448               	rlcf	(_index+1)^0,w,c
  5205   0003CA  6EDA               	movwf	fsr2h,c
  5206   0003CC  0E00               	movlw	low _movement_list
  5207   0003CE  26D9               	addwf	fsr2l,f,c
  5208   0003D0  0E02               	movlw	high _movement_list
  5209   0003D2  22DA               	addwfc	fsr2h,f,c
  5210   0003D4  0EFE               	movlw	254
  5211   0003D6  6EDE               	movwf	postinc2,c
  5212   0003D8  0EFF               	movlw	255
  5213   0003DA  6EDD               	movwf	postdec2,c
  5214                           
  5215                           ;dc_motor.c: 333:             index += 1;
  5216   0003DC  4A47               	infsnz	_index^0,f,c
  5217   0003DE  2A48               	incf	(_index+1)^0,f,c
  5218   0003E0                     l4346:
  5219                           
  5220                           ;dc_motor.c: 338:     if(color == 4){
  5221   0003E0  0E04               	movlw	4
  5222   0003E2  182B               	xorwf	RobotMovement@color^0,w,c
  5223   0003E4  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5224   0003E6  A4D8               	btfss	status,2,c
  5225   0003E8  EFF8  F001         	goto	u3691
  5226   0003EC  EFFA  F001         	goto	u3690
  5227   0003F0                     u3691:
  5228   0003F0  EFFA  F002         	goto	l4376
  5229   0003F4                     u3690:
  5230   0003F4                     
  5231                           ;dc_motor.c: 340:         moveBack(motorL, motorR, blockback);
  5232   0003F4  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  5233   0003F8  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  5234   0003FC  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  5235   000400  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  5236   000404  0E00               	movlw	0
  5237   000406  6E26               	movwf	(moveBack@time+1)^0,c
  5238   000408  0E10               	movlw	16
  5239   00040A  6E25               	movwf	moveBack@time^0,c
  5240   00040C  EC2F  F00E         	call	_moveBack	;wreg free
  5241                           
  5242                           ;dc_motor.c: 341:         stop(motorL, motorR);
  5243   000410  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  5244   000414  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  5245   000418  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  5246   00041C  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  5247   000420  EC72  F010         	call	_stop	;wreg free
  5248                           
  5249                           ;dc_motor.c: 342:         turnLeft(motorL, motorR);
  5250   000424  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  5251   000428  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  5252   00042C  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  5253   000430  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  5254   000434  ECBE  F009         	call	_turnLeft	;wreg free
  5255   000438                     
  5256                           ;dc_motor.c: 344:         if (movement_list[index-1] > halfblock)
  5257   000438  90D8               	bcf	status,0,c
  5258   00043A  3447               	rlcf	_index^0,w,c
  5259   00043C  6ED9               	movwf	fsr2l,c
  5260   00043E  3448               	rlcf	(_index+1)^0,w,c
  5261   000440  6EDA               	movwf	fsr2h,c
  5262   000442  0EFE               	movlw	low (_movement_list+65534)
  5263   000444  26D9               	addwf	fsr2l,f,c
  5264   000446  0E01               	movlw	high (_movement_list+65534)
  5265   000448  22DA               	addwfc	fsr2h,f,c
  5266   00044A  0E01               	movlw	1
  5267   00044C  BEDB               	btfsc	plusw2,7,c
  5268   00044E  EF33  F002         	goto	u3701
  5269   000452  0E01               	movlw	1
  5270   000454  50DB               	movf	plusw2,w,c
  5271   000456  E109               	bnz	u3700
  5272   000458  0E06               	movlw	6
  5273   00045A  5CDE               	subwf	postinc2,w,c
  5274   00045C  A0D8               	btfss	status,0,c
  5275   00045E  EF33  F002         	goto	u3701
  5276   000462  EF35  F002         	goto	u3700
  5277   000466                     u3701:
  5278   000466  EF53  F002         	goto	l4356
  5279   00046A                     u3700:
  5280   00046A                     
  5281                           ;dc_motor.c: 345:         {;dc_motor.c: 347:             movement_list[index-1] -= twoth
      +                          irds;
  5282   00046A  90D8               	bcf	status,0,c
  5283   00046C  3447               	rlcf	_index^0,w,c
  5284   00046E  6ED9               	movwf	fsr2l,c
  5285   000470  3448               	rlcf	(_index+1)^0,w,c
  5286   000472  6EDA               	movwf	fsr2h,c
  5287   000474  0EFE               	movlw	low (_movement_list+65534)
  5288   000476  26D9               	addwf	fsr2l,f,c
  5289   000478  0E01               	movlw	high (_movement_list+65534)
  5290   00047A  22DA               	addwfc	fsr2h,f,c
  5291   00047C  0EF5               	movlw	245
  5292   00047E  26DE               	addwf	postinc2,f,c
  5293   000480  0EFF               	movlw	255
  5294   000482  22DD               	addwfc	postdec2,f,c
  5295                           
  5296                           ;dc_motor.c: 349:             movement_list[index] = -2;
  5297   000484  90D8               	bcf	status,0,c
  5298   000486  3447               	rlcf	_index^0,w,c
  5299   000488  6ED9               	movwf	fsr2l,c
  5300   00048A  3448               	rlcf	(_index+1)^0,w,c
  5301   00048C  6EDA               	movwf	fsr2h,c
  5302   00048E  0E00               	movlw	low _movement_list
  5303   000490  26D9               	addwf	fsr2l,f,c
  5304   000492  0E02               	movlw	high _movement_list
  5305   000494  22DA               	addwfc	fsr2h,f,c
  5306   000496  0EFE               	movlw	254
  5307   000498  6EDE               	movwf	postinc2,c
  5308   00049A  0EFF               	movlw	255
  5309   00049C  6EDD               	movwf	postdec2,c
  5310   00049E                     
  5311                           ;dc_motor.c: 350:             index += 1;
  5312   00049E  4A47               	infsnz	_index^0,f,c
  5313   0004A0  2A48               	incf	(_index+1)^0,f,c
  5314                           
  5315                           ;dc_motor.c: 351:         }else{
  5316   0004A2  EFFA  F002         	goto	l4376
  5317   0004A6                     l4356:
  5318                           
  5319                           ;dc_motor.c: 353:             if (movement_list[index-1] == -1)
  5320   0004A6  90D8               	bcf	status,0,c
  5321   0004A8  3447               	rlcf	_index^0,w,c
  5322   0004AA  6ED9               	movwf	fsr2l,c
  5323   0004AC  3448               	rlcf	(_index+1)^0,w,c
  5324   0004AE  6EDA               	movwf	fsr2h,c
  5325   0004B0  0EFE               	movlw	low (_movement_list+65534)
  5326   0004B2  26D9               	addwf	fsr2l,f,c
  5327   0004B4  0E01               	movlw	high (_movement_list+65534)
  5328   0004B6  22DA               	addwfc	fsr2h,f,c
  5329   0004B8  28DE               	incf	postinc2,w,c
  5330   0004BA  E106               	bnz	u3711
  5331   0004BC  28DE               	incf	postinc2,w,c
  5332   0004BE  A4D8               	btfss	status,2,c
  5333   0004C0  EF64  F002         	goto	u3711
  5334   0004C4  EF66  F002         	goto	u3710
  5335   0004C8                     u3711:
  5336   0004C8  EF75  F002         	goto	l4360
  5337   0004CC                     u3710:
  5338   0004CC                     
  5339                           ;dc_motor.c: 354:             {;dc_motor.c: 356:                 movement_list[index-1] 
      +                          = -2;
  5340   0004CC  90D8               	bcf	status,0,c
  5341   0004CE  3447               	rlcf	_index^0,w,c
  5342   0004D0  6ED9               	movwf	fsr2l,c
  5343   0004D2  3448               	rlcf	(_index+1)^0,w,c
  5344   0004D4  6EDA               	movwf	fsr2h,c
  5345   0004D6  0EFE               	movlw	low (_movement_list+65534)
  5346   0004D8  26D9               	addwf	fsr2l,f,c
  5347   0004DA  0E01               	movlw	high (_movement_list+65534)
  5348   0004DC  22DA               	addwfc	fsr2h,f,c
  5349   0004DE  0EFE               	movlw	254
  5350   0004E0  6EDE               	movwf	postinc2,c
  5351   0004E2  0EFF               	movlw	255
  5352   0004E4  6EDD               	movwf	postdec2,c
  5353                           
  5354                           ;dc_motor.c: 357:             }
  5355   0004E6  EFDC  F002         	goto	l319
  5356   0004EA                     l4360:
  5357   0004EA  90D8               	bcf	status,0,c
  5358   0004EC  3447               	rlcf	_index^0,w,c
  5359   0004EE  6ED9               	movwf	fsr2l,c
  5360   0004F0  3448               	rlcf	(_index+1)^0,w,c
  5361   0004F2  6EDA               	movwf	fsr2h,c
  5362   0004F4  0EFE               	movlw	low (_movement_list+65534)
  5363   0004F6  26D9               	addwf	fsr2l,f,c
  5364   0004F8  0E01               	movlw	high (_movement_list+65534)
  5365   0004FA  22DA               	addwfc	fsr2h,f,c
  5366   0004FC  0EFE               	movlw	254
  5367   0004FE  18DE               	xorwf	postinc2,w,c
  5368   000500  E106               	bnz	u3721
  5369   000502  28DE               	incf	postinc2,w,c
  5370   000504  A4D8               	btfss	status,2,c
  5371   000506  EF87  F002         	goto	u3721
  5372   00050A  EF89  F002         	goto	u3720
  5373   00050E                     u3721:
  5374   00050E  EF98  F002         	goto	l4364
  5375   000512                     u3720:
  5376   000512                     
  5377                           ;dc_motor.c: 360:             {;dc_motor.c: 362:                 movement_list[index-1] 
      +                          = -1;
  5378   000512  90D8               	bcf	status,0,c
  5379   000514  3447               	rlcf	_index^0,w,c
  5380   000516  6ED9               	movwf	fsr2l,c
  5381   000518  3448               	rlcf	(_index+1)^0,w,c
  5382   00051A  6EDA               	movwf	fsr2h,c
  5383   00051C  0EFE               	movlw	low (_movement_list+65534)
  5384   00051E  26D9               	addwf	fsr2l,f,c
  5385   000520  0E01               	movlw	high (_movement_list+65534)
  5386   000522  22DA               	addwfc	fsr2h,f,c
  5387   000524  0EFF               	movlw	255
  5388   000526  6EDE               	movwf	postinc2,c
  5389   000528  0EFF               	movlw	255
  5390   00052A  6EDD               	movwf	postdec2,c
  5391                           
  5392                           ;dc_motor.c: 363:             }
  5393   00052C  EFDC  F002         	goto	l319
  5394   000530                     l4364:
  5395   000530  90D8               	bcf	status,0,c
  5396   000532  3447               	rlcf	_index^0,w,c
  5397   000534  6ED9               	movwf	fsr2l,c
  5398   000536  3448               	rlcf	(_index+1)^0,w,c
  5399   000538  6EDA               	movwf	fsr2h,c
  5400   00053A  0EFE               	movlw	low (_movement_list+65534)
  5401   00053C  26D9               	addwf	fsr2l,f,c
  5402   00053E  0E01               	movlw	high (_movement_list+65534)
  5403   000540  22DA               	addwfc	fsr2h,f,c
  5404   000542  0EFD               	movlw	253
  5405   000544  18DE               	xorwf	postinc2,w,c
  5406   000546  E106               	bnz	u3731
  5407   000548  28DE               	incf	postinc2,w,c
  5408   00054A  A4D8               	btfss	status,2,c
  5409   00054C  EFAA  F002         	goto	u3731
  5410   000550  EFAC  F002         	goto	u3730
  5411   000554                     u3731:
  5412   000554  EFBB  F002         	goto	l4368
  5413   000558                     u3730:
  5414   000558                     
  5415                           ;dc_motor.c: 366:             {;dc_motor.c: 368:                 movement_list[index-1] 
      +                          = -4;
  5416   000558  90D8               	bcf	status,0,c
  5417   00055A  3447               	rlcf	_index^0,w,c
  5418   00055C  6ED9               	movwf	fsr2l,c
  5419   00055E  3448               	rlcf	(_index+1)^0,w,c
  5420   000560  6EDA               	movwf	fsr2h,c
  5421   000562  0EFE               	movlw	low (_movement_list+65534)
  5422   000564  26D9               	addwf	fsr2l,f,c
  5423   000566  0E01               	movlw	high (_movement_list+65534)
  5424   000568  22DA               	addwfc	fsr2h,f,c
  5425   00056A  0EFC               	movlw	252
  5426   00056C  6EDE               	movwf	postinc2,c
  5427   00056E  0EFF               	movlw	255
  5428   000570  6EDD               	movwf	postdec2,c
  5429                           
  5430                           ;dc_motor.c: 369:             }
  5431   000572  EFDC  F002         	goto	l319
  5432   000576                     l4368:
  5433   000576  90D8               	bcf	status,0,c
  5434   000578  3447               	rlcf	_index^0,w,c
  5435   00057A  6ED9               	movwf	fsr2l,c
  5436   00057C  3448               	rlcf	(_index+1)^0,w,c
  5437   00057E  6EDA               	movwf	fsr2h,c
  5438   000580  0EFE               	movlw	low (_movement_list+65534)
  5439   000582  26D9               	addwf	fsr2l,f,c
  5440   000584  0E01               	movlw	high (_movement_list+65534)
  5441   000586  22DA               	addwfc	fsr2h,f,c
  5442   000588  0EFC               	movlw	252
  5443   00058A  18DE               	xorwf	postinc2,w,c
  5444   00058C  E106               	bnz	u3741
  5445   00058E  28DE               	incf	postinc2,w,c
  5446   000590  A4D8               	btfss	status,2,c
  5447   000592  EFCD  F002         	goto	u3741
  5448   000596  EFCF  F002         	goto	u3740
  5449   00059A                     u3741:
  5450   00059A  EFDC  F002         	goto	l319
  5451   00059E                     u3740:
  5452   00059E                     
  5453                           ;dc_motor.c: 372:             {;dc_motor.c: 374:                 movement_list[index-1] 
      +                          = -3;
  5454   00059E  90D8               	bcf	status,0,c
  5455   0005A0  3447               	rlcf	_index^0,w,c
  5456   0005A2  6ED9               	movwf	fsr2l,c
  5457   0005A4  3448               	rlcf	(_index+1)^0,w,c
  5458   0005A6  6EDA               	movwf	fsr2h,c
  5459   0005A8  0EFE               	movlw	low (_movement_list+65534)
  5460   0005AA  26D9               	addwf	fsr2l,f,c
  5461   0005AC  0E01               	movlw	high (_movement_list+65534)
  5462   0005AE  22DA               	addwfc	fsr2h,f,c
  5463   0005B0  0EFD               	movlw	253
  5464   0005B2  6EDE               	movwf	postinc2,c
  5465   0005B4  0EFF               	movlw	255
  5466   0005B6  6EDD               	movwf	postdec2,c
  5467   0005B8                     l319:
  5468                           
  5469                           ;dc_motor.c: 377:         movement_list[index] = blockahead;
  5470   0005B8  90D8               	bcf	status,0,c
  5471   0005BA  3447               	rlcf	_index^0,w,c
  5472   0005BC  6ED9               	movwf	fsr2l,c
  5473   0005BE  3448               	rlcf	(_index+1)^0,w,c
  5474   0005C0  6EDA               	movwf	fsr2h,c
  5475   0005C2  0E00               	movlw	low _movement_list
  5476   0005C4  26D9               	addwf	fsr2l,f,c
  5477   0005C6  0E02               	movlw	high _movement_list
  5478   0005C8  22DA               	addwfc	fsr2h,f,c
  5479   0005CA  0E10               	movlw	16
  5480   0005CC  6EDE               	movwf	postinc2,c
  5481   0005CE  0E00               	movlw	0
  5482   0005D0  6EDD               	movwf	postdec2,c
  5483   0005D2                     
  5484                           ;dc_motor.c: 378:         index += 1;
  5485   0005D2  4A47               	infsnz	_index^0,f,c
  5486   0005D4  2A48               	incf	(_index+1)^0,f,c
  5487   0005D6                     
  5488                           ;dc_motor.c: 380:         movement_list[index] = -1;
  5489   0005D6  90D8               	bcf	status,0,c
  5490   0005D8  3447               	rlcf	_index^0,w,c
  5491   0005DA  6ED9               	movwf	fsr2l,c
  5492   0005DC  3448               	rlcf	(_index+1)^0,w,c
  5493   0005DE  6EDA               	movwf	fsr2h,c
  5494   0005E0  0E00               	movlw	low _movement_list
  5495   0005E2  26D9               	addwf	fsr2l,f,c
  5496   0005E4  0E02               	movlw	high _movement_list
  5497   0005E6  22DA               	addwfc	fsr2h,f,c
  5498   0005E8  0EFF               	movlw	255
  5499   0005EA  6EDE               	movwf	postinc2,c
  5500   0005EC  0EFF               	movlw	255
  5501   0005EE  6EDD               	movwf	postdec2,c
  5502                           
  5503                           ;dc_motor.c: 381:         index += 1;
  5504   0005F0  4A47               	infsnz	_index^0,f,c
  5505   0005F2  2A48               	incf	(_index+1)^0,f,c
  5506   0005F4                     l4376:
  5507                           
  5508                           ;dc_motor.c: 385:     if(color == 5){
  5509   0005F4  0E05               	movlw	5
  5510   0005F6  182B               	xorwf	RobotMovement@color^0,w,c
  5511   0005F8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5512   0005FA  A4D8               	btfss	status,2,c
  5513   0005FC  EF02  F003         	goto	u3751
  5514   000600  EF04  F003         	goto	u3750
  5515   000604                     u3751:
  5516   000604  EF1D  F003         	goto	l4384
  5517   000608                     u3750:
  5518   000608                     
  5519                           ;dc_motor.c: 386:         turnRightLong(motorL, motorR);
  5520   000608  C02D  F021         	movff	RobotMovement@motorL,turnRightLong@mL
  5521   00060C  C02E  F022         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5522   000610  C02F  F023         	movff	RobotMovement@motorR,turnRightLong@mR
  5523   000614  C030  F024         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5524   000618  EC6B  F00A         	call	_turnRightLong	;wreg free
  5525   00061C                     
  5526                           ;dc_motor.c: 387:         movement_list[index] = -3;
  5527   00061C  90D8               	bcf	status,0,c
  5528   00061E  3447               	rlcf	_index^0,w,c
  5529   000620  6ED9               	movwf	fsr2l,c
  5530   000622  3448               	rlcf	(_index+1)^0,w,c
  5531   000624  6EDA               	movwf	fsr2h,c
  5532   000626  0E00               	movlw	low _movement_list
  5533   000628  26D9               	addwf	fsr2l,f,c
  5534   00062A  0E02               	movlw	high _movement_list
  5535   00062C  22DA               	addwfc	fsr2h,f,c
  5536   00062E  0EFD               	movlw	253
  5537   000630  6EDE               	movwf	postinc2,c
  5538   000632  0EFF               	movlw	255
  5539   000634  6EDD               	movwf	postdec2,c
  5540   000636                     
  5541                           ;dc_motor.c: 388:         index += 1;
  5542   000636  4A47               	infsnz	_index^0,f,c
  5543   000638  2A48               	incf	(_index+1)^0,f,c
  5544   00063A                     l4384:
  5545                           
  5546                           ;dc_motor.c: 391:     if(color == 6){
  5547   00063A  0E06               	movlw	6
  5548   00063C  182B               	xorwf	RobotMovement@color^0,w,c
  5549   00063E  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5550   000640  A4D8               	btfss	status,2,c
  5551   000642  EF25  F003         	goto	u3761
  5552   000646  EF27  F003         	goto	u3760
  5553   00064A                     u3761:
  5554   00064A  EF40  F003         	goto	l4392
  5555   00064E                     u3760:
  5556   00064E                     
  5557                           ;dc_motor.c: 392:         turnLeftLong(motorL, motorR);
  5558   00064E  C02D  F021         	movff	RobotMovement@motorL,turnLeftLong@mL
  5559   000652  C02E  F022         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5560   000656  C02F  F023         	movff	RobotMovement@motorR,turnLeftLong@mR
  5561   00065A  C030  F024         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5562   00065E  EC11  F009         	call	_turnLeftLong	;wreg free
  5563   000662                     
  5564                           ;dc_motor.c: 393:         movement_list[index] = -4;
  5565   000662  90D8               	bcf	status,0,c
  5566   000664  3447               	rlcf	_index^0,w,c
  5567   000666  6ED9               	movwf	fsr2l,c
  5568   000668  3448               	rlcf	(_index+1)^0,w,c
  5569   00066A  6EDA               	movwf	fsr2h,c
  5570   00066C  0E00               	movlw	low _movement_list
  5571   00066E  26D9               	addwf	fsr2l,f,c
  5572   000670  0E02               	movlw	high _movement_list
  5573   000672  22DA               	addwfc	fsr2h,f,c
  5574   000674  0EFC               	movlw	252
  5575   000676  6EDE               	movwf	postinc2,c
  5576   000678  0EFF               	movlw	255
  5577   00067A  6EDD               	movwf	postdec2,c
  5578   00067C                     
  5579                           ;dc_motor.c: 394:         index += 1;
  5580   00067C  4A47               	infsnz	_index^0,f,c
  5581   00067E  2A48               	incf	(_index+1)^0,f,c
  5582   000680                     l4392:
  5583                           
  5584                           ;dc_motor.c: 397:     if(color == 7){
  5585   000680  0E07               	movlw	7
  5586   000682  182B               	xorwf	RobotMovement@color^0,w,c
  5587   000684  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5588   000686  A4D8               	btfss	status,2,c
  5589   000688  EF48  F003         	goto	u3771
  5590   00068C  EF4A  F003         	goto	u3770
  5591   000690                     u3771:
  5592   000690  EF6D  F003         	goto	l4408
  5593   000694                     u3770:
  5594   000694                     
  5595                           ;dc_motor.c: 398:         int i;;dc_motor.c: 399:         for (i=0;i<2;i++)
  5596   000694  0E00               	movlw	0
  5597   000696  6E36               	movwf	(RobotMovement@i_1276+1)^0,c
  5598   000698  0E00               	movlw	0
  5599   00069A  6E35               	movwf	RobotMovement@i_1276^0,c
  5600   00069C                     l4400:
  5601                           
  5602                           ;dc_motor.c: 400:         {;dc_motor.c: 401:             turnRight(motorL, motorR);
  5603   00069C  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  5604   0006A0  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5605   0006A4  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  5606   0006A8  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5607   0006AC  EC13  F00B         	call	_turnRight	;wreg free
  5608   0006B0                     
  5609                           ;dc_motor.c: 402:         }
  5610   0006B0  4A35               	infsnz	RobotMovement@i_1276^0,f,c
  5611   0006B2  2A36               	incf	(RobotMovement@i_1276+1)^0,f,c
  5612   0006B4  BE36               	btfsc	(RobotMovement@i_1276+1)^0,7,c
  5613   0006B6  EF66  F003         	goto	u3781
  5614   0006BA  5036               	movf	(RobotMovement@i_1276+1)^0,w,c
  5615   0006BC  E109               	bnz	u3780
  5616   0006BE  0E02               	movlw	2
  5617   0006C0  5C35               	subwf	RobotMovement@i_1276^0,w,c
  5618   0006C2  A0D8               	btfss	status,0,c
  5619   0006C4  EF66  F003         	goto	u3781
  5620   0006C8  EF68  F003         	goto	u3780
  5621   0006CC                     u3781:
  5622   0006CC  EF4E  F003         	goto	l4400
  5623   0006D0                     u3780:
  5624   0006D0                     
  5625                           ;dc_motor.c: 404:         state = 1;
  5626   0006D0  0E00               	movlw	0
  5627   0006D2  0100               	movlb	0	; () banked
  5628   0006D4  6FF5               	movwf	(_state+1)& (0+255),b
  5629   0006D6  0E01               	movlw	1
  5630   0006D8  6FF4               	movwf	_state& (0+255),b
  5631   0006DA                     l4408:
  5632                           
  5633                           ;dc_motor.c: 407:     if (color > 7)
  5634   0006DA  502C               	movf	(RobotMovement@color+1)^0,w,c
  5635   0006DC  E109               	bnz	u3790
  5636   0006DE  0E08               	movlw	8
  5637   0006E0  5C2B               	subwf	RobotMovement@color^0,w,c
  5638   0006E2  A0D8               	btfss	status,0,c
  5639   0006E4  EF76  F003         	goto	u3791
  5640   0006E8  EF78  F003         	goto	u3790
  5641   0006EC                     u3791:
  5642   0006EC  EF86  F003         	goto	l331
  5643   0006F0                     u3790:
  5644   0006F0                     
  5645                           ;dc_motor.c: 408:     {;dc_motor.c: 409:         TimedfullSpeedAhead(motorL, motorR, hal
      +                          fblock);
  5646   0006F0  C02D  F021         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5647   0006F4  C02E  F022         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5648   0006F8  C02F  F023         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5649   0006FC  C030  F024         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5650   000700  0E00               	movlw	0
  5651   000702  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5652   000704  0E05               	movlw	5
  5653   000706  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  5654   000708  EC69  F00E         	call	_TimedfullSpeedAhead	;wreg free
  5655   00070C                     l331:
  5656   00070C  0012               	return		;funcret
  5657   00070E                     __end_of_RobotMovement:
  5658                           	callstack 0
  5659                           
  5660 ;; *************** function _turnRightLong *****************
  5661 ;; Defined at:
  5662 ;;		line 188 in file "dc_motor.c"
  5663 ;; Parameters:    Size  Location     Type
  5664 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5665 ;;		 -> main@motorL(9), 
  5666 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5667 ;;		 -> main@motorR(9), 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  i               2   40[COMRAM] int 
  5670 ;;  k               2   38[COMRAM] int 
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5680 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5681 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5682 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5683 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5684 ;;Total ram usage:       10 bytes
  5685 ;; Hardware stack levels used: 1
  5686 ;; Hardware stack levels required when called: 7
  5687 ;; This function calls:
  5688 ;;		_setMotorPWM
  5689 ;; This function is called by:
  5690 ;;		_RobotMovement
  5691 ;;		_return_back
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text30
  5696   0014D6                     __ptext30:
  5697                           	callstack 0
  5698   0014D6                     _turnRightLong:
  5699                           	callstack 22
  5700   0014D6                     
  5701                           ;dc_motor.c: 188: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 189: {;dc_motor.c: 190:     int k;;dc_motor.c: 191:     for (k=0;k<3;k++)
  5702   0014D6  0E00               	movlw	0
  5703   0014D8  6E28               	movwf	(turnRightLong@k+1)^0,c
  5704   0014DA  0E00               	movlw	0
  5705   0014DC  6E27               	movwf	turnRightLong@k^0,c
  5706   0014DE                     l4006:
  5707                           
  5708                           ;dc_motor.c: 192:     {;dc_motor.c: 193:         int i;;dc_motor.c: 194:         for(i=2
      +                          3;i<38;i+=5){
  5709   0014DE  0E00               	movlw	0
  5710   0014E0  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5711   0014E2  0E17               	movlw	23
  5712   0014E4  6E29               	movwf	turnRightLong@i^0,c
  5713   0014E6                     l4012:
  5714                           
  5715                           ;dc_motor.c: 195:         (*mL).direction=0;
  5716   0014E6  EE20 F001          	lfsr	2,1
  5717   0014EA  5021               	movf	turnRightLong@mL^0,w,c
  5718   0014EC  26D9               	addwf	fsr2l,f,c
  5719   0014EE  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5720   0014F0  22DA               	addwfc	fsr2h,f,c
  5721   0014F2  0E00               	movlw	0
  5722   0014F4  6EDF               	movwf	indf2,c
  5723                           
  5724                           ;dc_motor.c: 196:         (*mR).direction=1;
  5725   0014F6  EE20 F001          	lfsr	2,1
  5726   0014FA  5023               	movf	turnRightLong@mR^0,w,c
  5727   0014FC  26D9               	addwf	fsr2l,f,c
  5728   0014FE  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5729   001500  22DA               	addwfc	fsr2h,f,c
  5730   001502  0E01               	movlw	1
  5731   001504  6EDF               	movwf	indf2,c
  5732   001506                     
  5733                           ;dc_motor.c: 197:         (*mL).power=i;
  5734   001506  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5735   00150A  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5736   00150E  C029  FFDF         	movff	turnRightLong@i,indf2
  5737   001512                     
  5738                           ;dc_motor.c: 198:         (*mR).power=i;
  5739   001512  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5740   001516  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5741   00151A  C029  FFDF         	movff	turnRightLong@i,indf2
  5742   00151E                     
  5743                           ;dc_motor.c: 199:         setMotorPWM(mL);
  5744   00151E  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5745   001522  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5746   001526  EC5B  F008         	call	_setMotorPWM	;wreg free
  5747   00152A                     
  5748                           ;dc_motor.c: 200:         setMotorPWM(mR);
  5749   00152A  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5750   00152E  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5751   001532  EC5B  F008         	call	_setMotorPWM	;wreg free
  5752   001536                     
  5753                           ;dc_motor.c: 201:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5754   001536  0E09               	movlw	9
  5755   001538  6E26               	movwf	(??_turnRightLong+1)^0,c
  5756   00153A  0EB0               	movlw	176
  5757   00153C  6E25               	movwf	??_turnRightLong^0,c
  5758   00153E  0E58               	movlw	88
  5759   001540                     u4467:
  5760   001540  2EE8               	decfsz	wreg,f,c
  5761   001542  D7FE               	bra	u4467
  5762   001544  2E25               	decfsz	??_turnRightLong^0,f,c
  5763   001546  D7FC               	bra	u4467
  5764   001548  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5765   00154A  D7FA               	bra	u4467
  5766   00154C  D000               	nop2	
  5767   00154E                     
  5768                           ;dc_motor.c: 202:         }
  5769   00154E  0E05               	movlw	5
  5770   001550  2629               	addwf	turnRightLong@i^0,f,c
  5771   001552  0E00               	movlw	0
  5772   001554  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5773   001556  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5774   001558  EFB7  F00A         	goto	u3211
  5775   00155C  502A               	movf	(turnRightLong@i+1)^0,w,c
  5776   00155E  E109               	bnz	u3210
  5777   001560  0E26               	movlw	38
  5778   001562  5C29               	subwf	turnRightLong@i^0,w,c
  5779   001564  A0D8               	btfss	status,0,c
  5780   001566  EFB7  F00A         	goto	u3211
  5781   00156A  EFB9  F00A         	goto	u3210
  5782   00156E                     u3211:
  5783   00156E  EF73  F00A         	goto	l4012
  5784   001572                     u3210:
  5785   001572                     
  5786                           ;dc_motor.c: 203:         for(i=28;i>13;i-=5){
  5787   001572  0E00               	movlw	0
  5788   001574  6E2A               	movwf	(turnRightLong@i+1)^0,c
  5789   001576  0E1C               	movlw	28
  5790   001578  6E29               	movwf	turnRightLong@i^0,c
  5791   00157A                     l4034:
  5792                           
  5793                           ;dc_motor.c: 204:         (*mL).direction=0;
  5794   00157A  EE20 F001          	lfsr	2,1
  5795   00157E  5021               	movf	turnRightLong@mL^0,w,c
  5796   001580  26D9               	addwf	fsr2l,f,c
  5797   001582  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5798   001584  22DA               	addwfc	fsr2h,f,c
  5799   001586  0E00               	movlw	0
  5800   001588  6EDF               	movwf	indf2,c
  5801                           
  5802                           ;dc_motor.c: 205:         (*mR).direction=1;
  5803   00158A  EE20 F001          	lfsr	2,1
  5804   00158E  5023               	movf	turnRightLong@mR^0,w,c
  5805   001590  26D9               	addwf	fsr2l,f,c
  5806   001592  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5807   001594  22DA               	addwfc	fsr2h,f,c
  5808   001596  0E01               	movlw	1
  5809   001598  6EDF               	movwf	indf2,c
  5810   00159A                     
  5811                           ;dc_motor.c: 206:         (*mL).power=i;
  5812   00159A  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5813   00159E  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5814   0015A2  C029  FFDF         	movff	turnRightLong@i,indf2
  5815   0015A6                     
  5816                           ;dc_motor.c: 207:         (*mR).power=i;
  5817   0015A6  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5818   0015AA  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5819   0015AE  C029  FFDF         	movff	turnRightLong@i,indf2
  5820   0015B2                     
  5821                           ;dc_motor.c: 208:         setMotorPWM(mL);
  5822   0015B2  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5823   0015B6  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5824   0015BA  EC5B  F008         	call	_setMotorPWM	;wreg free
  5825   0015BE                     
  5826                           ;dc_motor.c: 209:         setMotorPWM(mR);
  5827   0015BE  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5828   0015C2  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5829   0015C6  EC5B  F008         	call	_setMotorPWM	;wreg free
  5830   0015CA                     
  5831                           ;dc_motor.c: 210:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5832   0015CA  0E09               	movlw	9
  5833   0015CC  6E26               	movwf	(??_turnRightLong+1)^0,c
  5834   0015CE  0E86               	movlw	134
  5835   0015D0  6E25               	movwf	??_turnRightLong^0,c
  5836   0015D2  0ECA               	movlw	202
  5837   0015D4                     u4477:
  5838   0015D4  2EE8               	decfsz	wreg,f,c
  5839   0015D6  D7FE               	bra	u4477
  5840   0015D8  2E25               	decfsz	??_turnRightLong^0,f,c
  5841   0015DA  D7FC               	bra	u4477
  5842   0015DC  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5843   0015DE  D7FA               	bra	u4477
  5844   0015E0                     
  5845                           ;dc_motor.c: 211:         }
  5846   0015E0  0EFB               	movlw	251
  5847   0015E2  2629               	addwf	turnRightLong@i^0,f,c
  5848   0015E4  0EFF               	movlw	255
  5849   0015E6  222A               	addwfc	(turnRightLong@i+1)^0,f,c
  5850   0015E8  BE2A               	btfsc	(turnRightLong@i+1)^0,7,c
  5851   0015EA  EF02  F00B         	goto	u3220
  5852   0015EE  502A               	movf	(turnRightLong@i+1)^0,w,c
  5853   0015F0  E107               	bnz	u3221
  5854   0015F2  0E0E               	movlw	14
  5855   0015F4  5C29               	subwf	turnRightLong@i^0,w,c
  5856   0015F6  B0D8               	btfsc	status,0,c
  5857   0015F8  EF00  F00B         	goto	u3221
  5858   0015FC  EF02  F00B         	goto	u3220
  5859   001600                     u3221:
  5860   001600  EFBD  F00A         	goto	l4034
  5861   001604                     u3220:
  5862   001604                     
  5863                           ;dc_motor.c: 212:     }
  5864   001604  4A27               	infsnz	turnRightLong@k^0,f,c
  5865   001606  2A28               	incf	(turnRightLong@k+1)^0,f,c
  5866   001608  BE28               	btfsc	(turnRightLong@k+1)^0,7,c
  5867   00160A  EF10  F00B         	goto	u3231
  5868   00160E  5028               	movf	(turnRightLong@k+1)^0,w,c
  5869   001610  E109               	bnz	u3230
  5870   001612  0E03               	movlw	3
  5871   001614  5C27               	subwf	turnRightLong@k^0,w,c
  5872   001616  A0D8               	btfss	status,0,c
  5873   001618  EF10  F00B         	goto	u3231
  5874   00161C  EF12  F00B         	goto	u3230
  5875   001620                     u3231:
  5876   001620  EF6F  F00A         	goto	l4006
  5877   001624                     u3230:
  5878   001624  0012               	return		;funcret
  5879   001626                     __end_of_turnRightLong:
  5880                           	callstack 0
  5881                           
  5882 ;; *************** function _turnRight *****************
  5883 ;; Defined at:
  5884 ;;		line 134 in file "dc_motor.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5887 ;;		 -> main@motorL(9), 
  5888 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5889 ;;		 -> main@motorR(9), 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  i               2   40[COMRAM] int 
  5892 ;;  k               2   38[COMRAM] int 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      void 
  5895 ;; Registers used:
  5896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5902 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5904 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5905 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5906 ;;Total ram usage:       10 bytes
  5907 ;; Hardware stack levels used: 1
  5908 ;; Hardware stack levels required when called: 7
  5909 ;; This function calls:
  5910 ;;		_setMotorPWM
  5911 ;; This function is called by:
  5912 ;;		_RobotMovement
  5913 ;;		_return_back
  5914 ;; This function uses a non-reentrant model
  5915 ;;
  5916                           
  5917                           	psect	text31
  5918   001626                     __ptext31:
  5919                           	callstack 0
  5920   001626                     _turnRight:
  5921                           	callstack 22
  5922   001626                     
  5923                           ;dc_motor.c: 134: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          35: {;dc_motor.c: 136:     int k;;dc_motor.c: 137:     for (k=0;k<2;k++)
  5924   001626  0E00               	movlw	0
  5925   001628  6E28               	movwf	(turnRight@k+1)^0,c
  5926   00162A  0E00               	movlw	0
  5927   00162C  6E27               	movwf	turnRight@k^0,c
  5928   00162E                     l3898:
  5929                           
  5930                           ;dc_motor.c: 138:     {;dc_motor.c: 139:         int i;;dc_motor.c: 140:         for(i=2
      +                          4;i<39;i+=5){
  5931   00162E  0E00               	movlw	0
  5932   001630  6E2A               	movwf	(turnRight@i+1)^0,c
  5933   001632  0E18               	movlw	24
  5934   001634  6E29               	movwf	turnRight@i^0,c
  5935   001636                     l3904:
  5936                           
  5937                           ;dc_motor.c: 141:         (*mL).direction=0;
  5938   001636  EE20 F001          	lfsr	2,1
  5939   00163A  5021               	movf	turnRight@mL^0,w,c
  5940   00163C  26D9               	addwf	fsr2l,f,c
  5941   00163E  5022               	movf	(turnRight@mL+1)^0,w,c
  5942   001640  22DA               	addwfc	fsr2h,f,c
  5943   001642  0E00               	movlw	0
  5944   001644  6EDF               	movwf	indf2,c
  5945                           
  5946                           ;dc_motor.c: 142:         (*mR).direction=1;
  5947   001646  EE20 F001          	lfsr	2,1
  5948   00164A  5023               	movf	turnRight@mR^0,w,c
  5949   00164C  26D9               	addwf	fsr2l,f,c
  5950   00164E  5024               	movf	(turnRight@mR+1)^0,w,c
  5951   001650  22DA               	addwfc	fsr2h,f,c
  5952   001652  0E01               	movlw	1
  5953   001654  6EDF               	movwf	indf2,c
  5954   001656                     
  5955                           ;dc_motor.c: 143:         (*mL).power=i;
  5956   001656  C021  FFD9         	movff	turnRight@mL,fsr2l
  5957   00165A  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5958   00165E  C029  FFDF         	movff	turnRight@i,indf2
  5959   001662                     
  5960                           ;dc_motor.c: 144:         (*mR).power=i;
  5961   001662  C023  FFD9         	movff	turnRight@mR,fsr2l
  5962   001666  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5963   00166A  C029  FFDF         	movff	turnRight@i,indf2
  5964   00166E                     
  5965                           ;dc_motor.c: 145:         setMotorPWM(mL);
  5966   00166E  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5967   001672  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5968   001676  EC5B  F008         	call	_setMotorPWM	;wreg free
  5969   00167A                     
  5970                           ;dc_motor.c: 146:         setMotorPWM(mR);
  5971   00167A  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5972   00167E  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5973   001682  EC5B  F008         	call	_setMotorPWM	;wreg free
  5974   001686                     
  5975                           ;dc_motor.c: 147:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5976   001686  0E09               	movlw	9
  5977   001688  6E26               	movwf	(??_turnRight+1)^0,c
  5978   00168A  0EB0               	movlw	176
  5979   00168C  6E25               	movwf	??_turnRight^0,c
  5980   00168E  0E58               	movlw	88
  5981   001690                     u4487:
  5982   001690  2EE8               	decfsz	wreg,f,c
  5983   001692  D7FE               	bra	u4487
  5984   001694  2E25               	decfsz	??_turnRight^0,f,c
  5985   001696  D7FC               	bra	u4487
  5986   001698  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5987   00169A  D7FA               	bra	u4487
  5988   00169C  D000               	nop2	
  5989   00169E                     
  5990                           ;dc_motor.c: 148:         }
  5991   00169E  0E05               	movlw	5
  5992   0016A0  2629               	addwf	turnRight@i^0,f,c
  5993   0016A2  0E00               	movlw	0
  5994   0016A4  222A               	addwfc	(turnRight@i+1)^0,f,c
  5995   0016A6  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5996   0016A8  EF5F  F00B         	goto	u3151
  5997   0016AC  502A               	movf	(turnRight@i+1)^0,w,c
  5998   0016AE  E109               	bnz	u3150
  5999   0016B0  0E27               	movlw	39
  6000   0016B2  5C29               	subwf	turnRight@i^0,w,c
  6001   0016B4  A0D8               	btfss	status,0,c
  6002   0016B6  EF5F  F00B         	goto	u3151
  6003   0016BA  EF61  F00B         	goto	u3150
  6004   0016BE                     u3151:
  6005   0016BE  EF1B  F00B         	goto	l3904
  6006   0016C2                     u3150:
  6007   0016C2                     
  6008                           ;dc_motor.c: 149:         for(i=29;i>14;i-=5){
  6009   0016C2  0E00               	movlw	0
  6010   0016C4  6E2A               	movwf	(turnRight@i+1)^0,c
  6011   0016C6  0E1D               	movlw	29
  6012   0016C8  6E29               	movwf	turnRight@i^0,c
  6013   0016CA                     l3926:
  6014                           
  6015                           ;dc_motor.c: 150:         (*mL).direction=0;
  6016   0016CA  EE20 F001          	lfsr	2,1
  6017   0016CE  5021               	movf	turnRight@mL^0,w,c
  6018   0016D0  26D9               	addwf	fsr2l,f,c
  6019   0016D2  5022               	movf	(turnRight@mL+1)^0,w,c
  6020   0016D4  22DA               	addwfc	fsr2h,f,c
  6021   0016D6  0E00               	movlw	0
  6022   0016D8  6EDF               	movwf	indf2,c
  6023                           
  6024                           ;dc_motor.c: 151:         (*mR).direction=1;
  6025   0016DA  EE20 F001          	lfsr	2,1
  6026   0016DE  5023               	movf	turnRight@mR^0,w,c
  6027   0016E0  26D9               	addwf	fsr2l,f,c
  6028   0016E2  5024               	movf	(turnRight@mR+1)^0,w,c
  6029   0016E4  22DA               	addwfc	fsr2h,f,c
  6030   0016E6  0E01               	movlw	1
  6031   0016E8  6EDF               	movwf	indf2,c
  6032   0016EA                     
  6033                           ;dc_motor.c: 152:         (*mL).power=i;
  6034   0016EA  C021  FFD9         	movff	turnRight@mL,fsr2l
  6035   0016EE  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  6036   0016F2  C029  FFDF         	movff	turnRight@i,indf2
  6037   0016F6                     
  6038                           ;dc_motor.c: 153:         (*mR).power=i;
  6039   0016F6  C023  FFD9         	movff	turnRight@mR,fsr2l
  6040   0016FA  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  6041   0016FE  C029  FFDF         	movff	turnRight@i,indf2
  6042   001702                     
  6043                           ;dc_motor.c: 154:         setMotorPWM(mL);
  6044   001702  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  6045   001706  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  6046   00170A  EC5B  F008         	call	_setMotorPWM	;wreg free
  6047   00170E                     
  6048                           ;dc_motor.c: 155:         setMotorPWM(mR);
  6049   00170E  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  6050   001712  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  6051   001716  EC5B  F008         	call	_setMotorPWM	;wreg free
  6052   00171A                     
  6053                           ;dc_motor.c: 156:         _delay((unsigned long)((105)*(64000000/4000.0)));
  6054   00171A  0E09               	movlw	9
  6055   00171C  6E26               	movwf	(??_turnRight+1)^0,c
  6056   00171E  0E86               	movlw	134
  6057   001720  6E25               	movwf	??_turnRight^0,c
  6058   001722  0ECA               	movlw	202
  6059   001724                     u4497:
  6060   001724  2EE8               	decfsz	wreg,f,c
  6061   001726  D7FE               	bra	u4497
  6062   001728  2E25               	decfsz	??_turnRight^0,f,c
  6063   00172A  D7FC               	bra	u4497
  6064   00172C  2E26               	decfsz	(??_turnRight+1)^0,f,c
  6065   00172E  D7FA               	bra	u4497
  6066   001730                     
  6067                           ;dc_motor.c: 157:         }
  6068   001730  0EFB               	movlw	251
  6069   001732  2629               	addwf	turnRight@i^0,f,c
  6070   001734  0EFF               	movlw	255
  6071   001736  222A               	addwfc	(turnRight@i+1)^0,f,c
  6072   001738  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  6073   00173A  EFAA  F00B         	goto	u3160
  6074   00173E  502A               	movf	(turnRight@i+1)^0,w,c
  6075   001740  E107               	bnz	u3161
  6076   001742  0E0F               	movlw	15
  6077   001744  5C29               	subwf	turnRight@i^0,w,c
  6078   001746  B0D8               	btfsc	status,0,c
  6079   001748  EFA8  F00B         	goto	u3161
  6080   00174C  EFAA  F00B         	goto	u3160
  6081   001750                     u3161:
  6082   001750  EF65  F00B         	goto	l3926
  6083   001754                     u3160:
  6084   001754                     
  6085                           ;dc_motor.c: 158:     }
  6086   001754  4A27               	infsnz	turnRight@k^0,f,c
  6087   001756  2A28               	incf	(turnRight@k+1)^0,f,c
  6088   001758  BE28               	btfsc	(turnRight@k+1)^0,7,c
  6089   00175A  EFB8  F00B         	goto	u3171
  6090   00175E  5028               	movf	(turnRight@k+1)^0,w,c
  6091   001760  E109               	bnz	u3170
  6092   001762  0E02               	movlw	2
  6093   001764  5C27               	subwf	turnRight@k^0,w,c
  6094   001766  A0D8               	btfss	status,0,c
  6095   001768  EFB8  F00B         	goto	u3171
  6096   00176C  EFBA  F00B         	goto	u3170
  6097   001770                     u3171:
  6098   001770  EF17  F00B         	goto	l3898
  6099   001774                     u3170:
  6100   001774  0012               	return		;funcret
  6101   001776                     __end_of_turnRight:
  6102                           	callstack 0
  6103                           
  6104 ;; *************** function _turnLeftLong *****************
  6105 ;; Defined at:
  6106 ;;		line 161 in file "dc_motor.c"
  6107 ;; Parameters:    Size  Location     Type
  6108 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6109 ;;		 -> main@motorL(9), 
  6110 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6111 ;;		 -> main@motorR(9), 
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  i               2   40[COMRAM] int 
  6114 ;;  k               2   38[COMRAM] int 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  1    wreg      void 
  6117 ;; Registers used:
  6118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6124 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6125 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6126 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6127 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6128 ;;Total ram usage:       10 bytes
  6129 ;; Hardware stack levels used: 1
  6130 ;; Hardware stack levels required when called: 7
  6131 ;; This function calls:
  6132 ;;		_setMotorPWM
  6133 ;; This function is called by:
  6134 ;;		_RobotMovement
  6135 ;;		_return_back
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text32
  6140   001222                     __ptext32:
  6141                           	callstack 0
  6142   001222                     _turnLeftLong:
  6143                           	callstack 22
  6144   001222                     
  6145                           ;dc_motor.c: 161: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 162: {;dc_motor.c: 163:     int k = 0;
  6146   001222  0E00               	movlw	0
  6147   001224  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6148   001226  0E00               	movlw	0
  6149   001228  6E27               	movwf	turnLeftLong@k^0,c
  6150                           
  6151                           ;dc_motor.c: 164:     for (k=0;k<3;k++)
  6152   00122A  0E00               	movlw	0
  6153   00122C  6E28               	movwf	(turnLeftLong@k+1)^0,c
  6154   00122E  0E00               	movlw	0
  6155   001230  6E27               	movwf	turnLeftLong@k^0,c
  6156   001232                     l3952:
  6157                           
  6158                           ;dc_motor.c: 165:     {;dc_motor.c: 166:         int i;;dc_motor.c: 167:         for(i=4
      +                          1;i<56;i+=5){
  6159   001232  0E00               	movlw	0
  6160   001234  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6161   001236  0E29               	movlw	41
  6162   001238  6E29               	movwf	turnLeftLong@i^0,c
  6163   00123A                     l3958:
  6164                           
  6165                           ;dc_motor.c: 168:         (*mL).direction=1;
  6166   00123A  EE20 F001          	lfsr	2,1
  6167   00123E  5021               	movf	turnLeftLong@mL^0,w,c
  6168   001240  26D9               	addwf	fsr2l,f,c
  6169   001242  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6170   001244  22DA               	addwfc	fsr2h,f,c
  6171   001246  0E01               	movlw	1
  6172   001248  6EDF               	movwf	indf2,c
  6173                           
  6174                           ;dc_motor.c: 169:         (*mR).direction=0;
  6175   00124A  EE20 F001          	lfsr	2,1
  6176   00124E  5023               	movf	turnLeftLong@mR^0,w,c
  6177   001250  26D9               	addwf	fsr2l,f,c
  6178   001252  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6179   001254  22DA               	addwfc	fsr2h,f,c
  6180   001256  0E00               	movlw	0
  6181   001258  6EDF               	movwf	indf2,c
  6182   00125A                     
  6183                           ;dc_motor.c: 170:         (*mL).power=i;
  6184   00125A  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6185   00125E  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6186   001262  C029  FFDF         	movff	turnLeftLong@i,indf2
  6187   001266                     
  6188                           ;dc_motor.c: 171:         (*mR).power=i;
  6189   001266  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6190   00126A  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6191   00126E  C029  FFDF         	movff	turnLeftLong@i,indf2
  6192   001272                     
  6193                           ;dc_motor.c: 172:         setMotorPWM(mL);
  6194   001272  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6195   001276  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6196   00127A  EC5B  F008         	call	_setMotorPWM	;wreg free
  6197   00127E                     
  6198                           ;dc_motor.c: 173:         setMotorPWM(mR);
  6199   00127E  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6200   001282  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6201   001286  EC5B  F008         	call	_setMotorPWM	;wreg free
  6202   00128A                     
  6203                           ;dc_motor.c: 174:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6204   00128A  0E05               	movlw	5
  6205   00128C  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6206   00128E  0EB6               	movlw	182
  6207   001290  6E25               	movwf	??_turnLeftLong^0,c
  6208   001292  0E2C               	movlw	44
  6209   001294                     u4507:
  6210   001294  2EE8               	decfsz	wreg,f,c
  6211   001296  D7FE               	bra	u4507
  6212   001298  2E25               	decfsz	??_turnLeftLong^0,f,c
  6213   00129A  D7FC               	bra	u4507
  6214   00129C  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6215   00129E  D7FA               	bra	u4507
  6216   0012A0  D000               	nop2	
  6217   0012A2                     
  6218                           ;dc_motor.c: 175:         }
  6219   0012A2  0E05               	movlw	5
  6220   0012A4  2629               	addwf	turnLeftLong@i^0,f,c
  6221   0012A6  0E00               	movlw	0
  6222   0012A8  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6223   0012AA  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6224   0012AC  EF61  F009         	goto	u3181
  6225   0012B0  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6226   0012B2  E109               	bnz	u3180
  6227   0012B4  0E38               	movlw	56
  6228   0012B6  5C29               	subwf	turnLeftLong@i^0,w,c
  6229   0012B8  A0D8               	btfss	status,0,c
  6230   0012BA  EF61  F009         	goto	u3181
  6231   0012BE  EF63  F009         	goto	u3180
  6232   0012C2                     u3181:
  6233   0012C2  EF1D  F009         	goto	l3958
  6234   0012C6                     u3180:
  6235   0012C6                     
  6236                           ;dc_motor.c: 176:         for(i=46;i>31;i-=5){
  6237   0012C6  0E00               	movlw	0
  6238   0012C8  6E2A               	movwf	(turnLeftLong@i+1)^0,c
  6239   0012CA  0E2E               	movlw	46
  6240   0012CC  6E29               	movwf	turnLeftLong@i^0,c
  6241   0012CE                     l3980:
  6242                           
  6243                           ;dc_motor.c: 177:         (*mL).direction=1;
  6244   0012CE  EE20 F001          	lfsr	2,1
  6245   0012D2  5021               	movf	turnLeftLong@mL^0,w,c
  6246   0012D4  26D9               	addwf	fsr2l,f,c
  6247   0012D6  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  6248   0012D8  22DA               	addwfc	fsr2h,f,c
  6249   0012DA  0E01               	movlw	1
  6250   0012DC  6EDF               	movwf	indf2,c
  6251                           
  6252                           ;dc_motor.c: 178:         (*mR).direction=0;
  6253   0012DE  EE20 F001          	lfsr	2,1
  6254   0012E2  5023               	movf	turnLeftLong@mR^0,w,c
  6255   0012E4  26D9               	addwf	fsr2l,f,c
  6256   0012E6  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  6257   0012E8  22DA               	addwfc	fsr2h,f,c
  6258   0012EA  0E00               	movlw	0
  6259   0012EC  6EDF               	movwf	indf2,c
  6260   0012EE                     
  6261                           ;dc_motor.c: 179:         (*mL).power=i;
  6262   0012EE  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  6263   0012F2  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  6264   0012F6  C029  FFDF         	movff	turnLeftLong@i,indf2
  6265   0012FA                     
  6266                           ;dc_motor.c: 180:         (*mR).power=i;
  6267   0012FA  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  6268   0012FE  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  6269   001302  C029  FFDF         	movff	turnLeftLong@i,indf2
  6270   001306                     
  6271                           ;dc_motor.c: 181:         setMotorPWM(mL);
  6272   001306  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  6273   00130A  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  6274   00130E  EC5B  F008         	call	_setMotorPWM	;wreg free
  6275   001312                     
  6276                           ;dc_motor.c: 182:         setMotorPWM(mR);
  6277   001312  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  6278   001316  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  6279   00131A  EC5B  F008         	call	_setMotorPWM	;wreg free
  6280   00131E                     
  6281                           ;dc_motor.c: 183:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6282   00131E  0E05               	movlw	5
  6283   001320  6E26               	movwf	(??_turnLeftLong+1)^0,c
  6284   001322  0EA1               	movlw	161
  6285   001324  6E25               	movwf	??_turnLeftLong^0,c
  6286   001326  0E65               	movlw	101
  6287   001328                     u4517:
  6288   001328  2EE8               	decfsz	wreg,f,c
  6289   00132A  D7FE               	bra	u4517
  6290   00132C  2E25               	decfsz	??_turnLeftLong^0,f,c
  6291   00132E  D7FC               	bra	u4517
  6292   001330  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  6293   001332  D7FA               	bra	u4517
  6294   001334  F000               	nop	
  6295   001336                     
  6296                           ;dc_motor.c: 184:         }
  6297   001336  0EFB               	movlw	251
  6298   001338  2629               	addwf	turnLeftLong@i^0,f,c
  6299   00133A  0EFF               	movlw	255
  6300   00133C  222A               	addwfc	(turnLeftLong@i+1)^0,f,c
  6301   00133E  BE2A               	btfsc	(turnLeftLong@i+1)^0,7,c
  6302   001340  EFAD  F009         	goto	u3190
  6303   001344  502A               	movf	(turnLeftLong@i+1)^0,w,c
  6304   001346  E107               	bnz	u3191
  6305   001348  0E20               	movlw	32
  6306   00134A  5C29               	subwf	turnLeftLong@i^0,w,c
  6307   00134C  B0D8               	btfsc	status,0,c
  6308   00134E  EFAB  F009         	goto	u3191
  6309   001352  EFAD  F009         	goto	u3190
  6310   001356                     u3191:
  6311   001356  EF67  F009         	goto	l3980
  6312   00135A                     u3190:
  6313   00135A                     
  6314                           ;dc_motor.c: 185:     }
  6315   00135A  4A27               	infsnz	turnLeftLong@k^0,f,c
  6316   00135C  2A28               	incf	(turnLeftLong@k+1)^0,f,c
  6317   00135E  BE28               	btfsc	(turnLeftLong@k+1)^0,7,c
  6318   001360  EFBB  F009         	goto	u3201
  6319   001364  5028               	movf	(turnLeftLong@k+1)^0,w,c
  6320   001366  E109               	bnz	u3200
  6321   001368  0E03               	movlw	3
  6322   00136A  5C27               	subwf	turnLeftLong@k^0,w,c
  6323   00136C  A0D8               	btfss	status,0,c
  6324   00136E  EFBB  F009         	goto	u3201
  6325   001372  EFBD  F009         	goto	u3200
  6326   001376                     u3201:
  6327   001376  EF19  F009         	goto	l3952
  6328   00137A                     u3200:
  6329   00137A  0012               	return		;funcret
  6330   00137C                     __end_of_turnLeftLong:
  6331                           	callstack 0
  6332                           
  6333 ;; *************** function _turnLeft *****************
  6334 ;; Defined at:
  6335 ;;		line 107 in file "dc_motor.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6338 ;;		 -> main@motorL(9), 
  6339 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6340 ;;		 -> main@motorR(9), 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  i               2   40[COMRAM] int 
  6343 ;;  k               2   38[COMRAM] int 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      void 
  6346 ;; Registers used:
  6347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6353 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6354 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6356 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6357 ;;Total ram usage:       10 bytes
  6358 ;; Hardware stack levels used: 1
  6359 ;; Hardware stack levels required when called: 7
  6360 ;; This function calls:
  6361 ;;		_setMotorPWM
  6362 ;; This function is called by:
  6363 ;;		_RobotMovement
  6364 ;;		_return_back
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           	psect	text33
  6369   00137C                     __ptext33:
  6370                           	callstack 0
  6371   00137C                     _turnLeft:
  6372                           	callstack 22
  6373   00137C                     
  6374                           ;dc_motor.c: 107: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 108: {;dc_motor.
      +                          c: 109:     int k = 0;
  6375   00137C  0E00               	movlw	0
  6376   00137E  6E28               	movwf	(turnLeft@k+1)^0,c
  6377   001380  0E00               	movlw	0
  6378   001382  6E27               	movwf	turnLeft@k^0,c
  6379                           
  6380                           ;dc_motor.c: 110:     for (k=0;k<2;k++)
  6381   001384  0E00               	movlw	0
  6382   001386  6E28               	movwf	(turnLeft@k+1)^0,c
  6383   001388  0E00               	movlw	0
  6384   00138A  6E27               	movwf	turnLeft@k^0,c
  6385   00138C                     l3844:
  6386                           
  6387                           ;dc_motor.c: 111:     {;dc_motor.c: 112:         int i;;dc_motor.c: 113:         for(i=4
      +                          1;i<56;i+=5){
  6388   00138C  0E00               	movlw	0
  6389   00138E  6E2A               	movwf	(turnLeft@i+1)^0,c
  6390   001390  0E29               	movlw	41
  6391   001392  6E29               	movwf	turnLeft@i^0,c
  6392   001394                     l3850:
  6393                           
  6394                           ;dc_motor.c: 114:         (*mL).direction=1;
  6395   001394  EE20 F001          	lfsr	2,1
  6396   001398  5021               	movf	turnLeft@mL^0,w,c
  6397   00139A  26D9               	addwf	fsr2l,f,c
  6398   00139C  5022               	movf	(turnLeft@mL+1)^0,w,c
  6399   00139E  22DA               	addwfc	fsr2h,f,c
  6400   0013A0  0E01               	movlw	1
  6401   0013A2  6EDF               	movwf	indf2,c
  6402                           
  6403                           ;dc_motor.c: 115:         (*mR).direction=0;
  6404   0013A4  EE20 F001          	lfsr	2,1
  6405   0013A8  5023               	movf	turnLeft@mR^0,w,c
  6406   0013AA  26D9               	addwf	fsr2l,f,c
  6407   0013AC  5024               	movf	(turnLeft@mR+1)^0,w,c
  6408   0013AE  22DA               	addwfc	fsr2h,f,c
  6409   0013B0  0E00               	movlw	0
  6410   0013B2  6EDF               	movwf	indf2,c
  6411   0013B4                     
  6412                           ;dc_motor.c: 116:         (*mL).power=i;
  6413   0013B4  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6414   0013B8  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6415   0013BC  C029  FFDF         	movff	turnLeft@i,indf2
  6416   0013C0                     
  6417                           ;dc_motor.c: 117:         (*mR).power=i;
  6418   0013C0  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6419   0013C4  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6420   0013C8  C029  FFDF         	movff	turnLeft@i,indf2
  6421   0013CC                     
  6422                           ;dc_motor.c: 118:         setMotorPWM(mL);
  6423   0013CC  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6424   0013D0  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6425   0013D4  EC5B  F008         	call	_setMotorPWM	;wreg free
  6426   0013D8                     
  6427                           ;dc_motor.c: 119:         setMotorPWM(mR);
  6428   0013D8  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6429   0013DC  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6430   0013E0  EC5B  F008         	call	_setMotorPWM	;wreg free
  6431   0013E4                     
  6432                           ;dc_motor.c: 120:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6433   0013E4  0E05               	movlw	5
  6434   0013E6  6E26               	movwf	(??_turnLeft+1)^0,c
  6435   0013E8  0EB6               	movlw	182
  6436   0013EA  6E25               	movwf	??_turnLeft^0,c
  6437   0013EC  0E2C               	movlw	44
  6438   0013EE                     u4527:
  6439   0013EE  2EE8               	decfsz	wreg,f,c
  6440   0013F0  D7FE               	bra	u4527
  6441   0013F2  2E25               	decfsz	??_turnLeft^0,f,c
  6442   0013F4  D7FC               	bra	u4527
  6443   0013F6  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6444   0013F8  D7FA               	bra	u4527
  6445   0013FA  D000               	nop2	
  6446   0013FC                     
  6447                           ;dc_motor.c: 121:         }
  6448   0013FC  0E05               	movlw	5
  6449   0013FE  2629               	addwf	turnLeft@i^0,f,c
  6450   001400  0E00               	movlw	0
  6451   001402  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6452   001404  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6453   001406  EF0E  F00A         	goto	u3121
  6454   00140A  502A               	movf	(turnLeft@i+1)^0,w,c
  6455   00140C  E109               	bnz	u3120
  6456   00140E  0E38               	movlw	56
  6457   001410  5C29               	subwf	turnLeft@i^0,w,c
  6458   001412  A0D8               	btfss	status,0,c
  6459   001414  EF0E  F00A         	goto	u3121
  6460   001418  EF10  F00A         	goto	u3120
  6461   00141C                     u3121:
  6462   00141C  EFCA  F009         	goto	l3850
  6463   001420                     u3120:
  6464   001420                     
  6465                           ;dc_motor.c: 122:         for(i=46;i>31;i-=5){
  6466   001420  0E00               	movlw	0
  6467   001422  6E2A               	movwf	(turnLeft@i+1)^0,c
  6468   001424  0E2E               	movlw	46
  6469   001426  6E29               	movwf	turnLeft@i^0,c
  6470   001428                     l3872:
  6471                           
  6472                           ;dc_motor.c: 123:         (*mL).direction=1;
  6473   001428  EE20 F001          	lfsr	2,1
  6474   00142C  5021               	movf	turnLeft@mL^0,w,c
  6475   00142E  26D9               	addwf	fsr2l,f,c
  6476   001430  5022               	movf	(turnLeft@mL+1)^0,w,c
  6477   001432  22DA               	addwfc	fsr2h,f,c
  6478   001434  0E01               	movlw	1
  6479   001436  6EDF               	movwf	indf2,c
  6480                           
  6481                           ;dc_motor.c: 124:         (*mR).direction=0;
  6482   001438  EE20 F001          	lfsr	2,1
  6483   00143C  5023               	movf	turnLeft@mR^0,w,c
  6484   00143E  26D9               	addwf	fsr2l,f,c
  6485   001440  5024               	movf	(turnLeft@mR+1)^0,w,c
  6486   001442  22DA               	addwfc	fsr2h,f,c
  6487   001444  0E00               	movlw	0
  6488   001446  6EDF               	movwf	indf2,c
  6489   001448                     
  6490                           ;dc_motor.c: 125:         (*mL).power=i;
  6491   001448  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6492   00144C  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6493   001450  C029  FFDF         	movff	turnLeft@i,indf2
  6494   001454                     
  6495                           ;dc_motor.c: 126:         (*mR).power=i;
  6496   001454  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6497   001458  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6498   00145C  C029  FFDF         	movff	turnLeft@i,indf2
  6499   001460                     
  6500                           ;dc_motor.c: 127:         setMotorPWM(mL);
  6501   001460  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6502   001464  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6503   001468  EC5B  F008         	call	_setMotorPWM	;wreg free
  6504   00146C                     
  6505                           ;dc_motor.c: 128:         setMotorPWM(mR);
  6506   00146C  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6507   001470  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6508   001474  EC5B  F008         	call	_setMotorPWM	;wreg free
  6509   001478                     
  6510                           ;dc_motor.c: 129:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6511   001478  0E05               	movlw	5
  6512   00147A  6E26               	movwf	(??_turnLeft+1)^0,c
  6513   00147C  0EA1               	movlw	161
  6514   00147E  6E25               	movwf	??_turnLeft^0,c
  6515   001480  0E65               	movlw	101
  6516   001482                     u4537:
  6517   001482  2EE8               	decfsz	wreg,f,c
  6518   001484  D7FE               	bra	u4537
  6519   001486  2E25               	decfsz	??_turnLeft^0,f,c
  6520   001488  D7FC               	bra	u4537
  6521   00148A  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6522   00148C  D7FA               	bra	u4537
  6523   00148E  F000               	nop	
  6524   001490                     
  6525                           ;dc_motor.c: 130:         }
  6526   001490  0EFB               	movlw	251
  6527   001492  2629               	addwf	turnLeft@i^0,f,c
  6528   001494  0EFF               	movlw	255
  6529   001496  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6530   001498  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6531   00149A  EF5A  F00A         	goto	u3130
  6532   00149E  502A               	movf	(turnLeft@i+1)^0,w,c
  6533   0014A0  E107               	bnz	u3131
  6534   0014A2  0E20               	movlw	32
  6535   0014A4  5C29               	subwf	turnLeft@i^0,w,c
  6536   0014A6  B0D8               	btfsc	status,0,c
  6537   0014A8  EF58  F00A         	goto	u3131
  6538   0014AC  EF5A  F00A         	goto	u3130
  6539   0014B0                     u3131:
  6540   0014B0  EF14  F00A         	goto	l3872
  6541   0014B4                     u3130:
  6542   0014B4                     
  6543                           ;dc_motor.c: 131:     }
  6544   0014B4  4A27               	infsnz	turnLeft@k^0,f,c
  6545   0014B6  2A28               	incf	(turnLeft@k+1)^0,f,c
  6546   0014B8  BE28               	btfsc	(turnLeft@k+1)^0,7,c
  6547   0014BA  EF68  F00A         	goto	u3141
  6548   0014BE  5028               	movf	(turnLeft@k+1)^0,w,c
  6549   0014C0  E109               	bnz	u3140
  6550   0014C2  0E02               	movlw	2
  6551   0014C4  5C27               	subwf	turnLeft@k^0,w,c
  6552   0014C6  A0D8               	btfss	status,0,c
  6553   0014C8  EF68  F00A         	goto	u3141
  6554   0014CC  EF6A  F00A         	goto	u3140
  6555   0014D0                     u3141:
  6556   0014D0  EFC6  F009         	goto	l3844
  6557   0014D4                     u3140:
  6558   0014D4  0012               	return		;funcret
  6559   0014D6                     __end_of_turnLeft:
  6560                           	callstack 0
  6561                           
  6562 ;; *************** function _stop *****************
  6563 ;; Defined at:
  6564 ;;		line 97 in file "dc_motor.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6567 ;;		 -> main@motorL(9), 
  6568 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6569 ;;		 -> main@motorR(9), 
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  1    wreg      void 
  6574 ;; Registers used:
  6575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6581 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6583 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6584 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6585 ;;Total ram usage:        6 bytes
  6586 ;; Hardware stack levels used: 1
  6587 ;; Hardware stack levels required when called: 7
  6588 ;; This function calls:
  6589 ;;		_setMotorPWM
  6590 ;; This function is called by:
  6591 ;;		_RobotMovement
  6592 ;;		_return_back
  6593 ;;		_main
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text34
  6598   0020E4                     __ptext34:
  6599                           	callstack 0
  6600   0020E4                     _stop:
  6601                           	callstack 23
  6602   0020E4                     
  6603                           ;dc_motor.c: 97: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 98: {;d
      +                          c_motor.c: 99:     (*mL).power=0;
  6604   0020E4  C021  FFD9         	movff	stop@mL,fsr2l
  6605   0020E8  C022  FFDA         	movff	stop@mL+1,fsr2h
  6606   0020EC  0E00               	movlw	0
  6607   0020EE  6EDF               	movwf	indf2,c
  6608                           
  6609                           ;dc_motor.c: 100:     (*mR).power=0;
  6610   0020F0  C023  FFD9         	movff	stop@mR,fsr2l
  6611   0020F4  C024  FFDA         	movff	stop@mR+1,fsr2h
  6612   0020F8  0E00               	movlw	0
  6613   0020FA  6EDF               	movwf	indf2,c
  6614   0020FC                     
  6615                           ;dc_motor.c: 101:     setMotorPWM(mL);
  6616   0020FC  C021  F01B         	movff	stop@mL,setMotorPWM@m
  6617   002100  C022  F01C         	movff	stop@mL+1,setMotorPWM@m+1
  6618   002104  EC5B  F008         	call	_setMotorPWM	;wreg free
  6619   002108                     
  6620                           ;dc_motor.c: 102:     setMotorPWM(mR);
  6621   002108  C023  F01B         	movff	stop@mR,setMotorPWM@m
  6622   00210C  C024  F01C         	movff	stop@mR+1,setMotorPWM@m+1
  6623   002110  EC5B  F008         	call	_setMotorPWM	;wreg free
  6624   002114                     
  6625                           ;dc_motor.c: 103:     _delay((unsigned long)((500)*(64000000/4000.0)));
  6626   002114  0E29               	movlw	41
  6627   002116  6E26               	movwf	(??_stop+1)^0,c
  6628   002118  0E96               	movlw	150
  6629   00211A  6E25               	movwf	??_stop^0,c
  6630   00211C  0E7F               	movlw	127
  6631   00211E                     u4547:
  6632   00211E  2EE8               	decfsz	wreg,f,c
  6633   002120  D7FE               	bra	u4547
  6634   002122  2E25               	decfsz	??_stop^0,f,c
  6635   002124  D7FC               	bra	u4547
  6636   002126  2E26               	decfsz	(??_stop+1)^0,f,c
  6637   002128  D7FA               	bra	u4547
  6638   00212A  F000               	nop	
  6639   00212C  0012               	return		;funcret
  6640   00212E                     __end_of_stop:
  6641                           	callstack 0
  6642                           
  6643 ;; *************** function _moveBack *****************
  6644 ;; Defined at:
  6645 ;;		line 242 in file "dc_motor.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6648 ;;		 -> main@motorL(9), 
  6649 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6650 ;;		 -> main@motorR(9), 
  6651 ;;  time            2   36[COMRAM] unsigned int 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;		None
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6663 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6666 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6667 ;;Total ram usage:        6 bytes
  6668 ;; Hardware stack levels used: 1
  6669 ;; Hardware stack levels required when called: 7
  6670 ;; This function calls:
  6671 ;;		_setMotorPWM
  6672 ;; This function is called by:
  6673 ;;		_RobotMovement
  6674 ;;		_return_back
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text35
  6679   001C5E                     __ptext35:
  6680                           	callstack 0
  6681   001C5E                     _moveBack:
  6682                           	callstack 22
  6683   001C5E                     
  6684                           ;dc_motor.c: 242: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 243: {;dc_motor.c: 244:     seconds = 0;
  6685   001C5E  0E00               	movlw	0
  6686   001C60  6E4A               	movwf	(_seconds+1)^0,c
  6687   001C62  0E00               	movlw	0
  6688   001C64  6E49               	movwf	_seconds^0,c
  6689                           
  6690                           ;dc_motor.c: 245:     while (seconds<time)
  6691   001C66  EF5D  F00E         	goto	l4080
  6692   001C6A                     l4070:
  6693                           
  6694                           ;dc_motor.c: 246:     {;dc_motor.c: 247:         (*mL).direction=1;
  6695   001C6A  EE20 F001          	lfsr	2,1
  6696   001C6E  5021               	movf	moveBack@mL^0,w,c
  6697   001C70  26D9               	addwf	fsr2l,f,c
  6698   001C72  5022               	movf	(moveBack@mL+1)^0,w,c
  6699   001C74  22DA               	addwfc	fsr2h,f,c
  6700   001C76  0E01               	movlw	1
  6701   001C78  6EDF               	movwf	indf2,c
  6702                           
  6703                           ;dc_motor.c: 248:         (*mR).direction=1;
  6704   001C7A  EE20 F001          	lfsr	2,1
  6705   001C7E  5023               	movf	moveBack@mR^0,w,c
  6706   001C80  26D9               	addwf	fsr2l,f,c
  6707   001C82  5024               	movf	(moveBack@mR+1)^0,w,c
  6708   001C84  22DA               	addwfc	fsr2h,f,c
  6709   001C86  0E01               	movlw	1
  6710   001C88  6EDF               	movwf	indf2,c
  6711   001C8A                     
  6712                           ;dc_motor.c: 249:         (*mL).power=70;
  6713   001C8A  C021  FFD9         	movff	moveBack@mL,fsr2l
  6714   001C8E  C022  FFDA         	movff	moveBack@mL+1,fsr2h
  6715   001C92  0E46               	movlw	70
  6716   001C94  6EDF               	movwf	indf2,c
  6717   001C96                     
  6718                           ;dc_motor.c: 250:         (*mR).power=68;
  6719   001C96  C023  FFD9         	movff	moveBack@mR,fsr2l
  6720   001C9A  C024  FFDA         	movff	moveBack@mR+1,fsr2h
  6721   001C9E  0E44               	movlw	68
  6722   001CA0  6EDF               	movwf	indf2,c
  6723   001CA2                     
  6724                           ;dc_motor.c: 251:         setMotorPWM(mL);
  6725   001CA2  C021  F01B         	movff	moveBack@mL,setMotorPWM@m
  6726   001CA6  C022  F01C         	movff	moveBack@mL+1,setMotorPWM@m+1
  6727   001CAA  EC5B  F008         	call	_setMotorPWM	;wreg free
  6728   001CAE                     
  6729                           ;dc_motor.c: 252:         setMotorPWM(mR);
  6730   001CAE  C023  F01B         	movff	moveBack@mR,setMotorPWM@m
  6731   001CB2  C024  F01C         	movff	moveBack@mR+1,setMotorPWM@m+1
  6732   001CB6  EC5B  F008         	call	_setMotorPWM	;wreg free
  6733   001CBA                     l4080:
  6734                           
  6735                           ;dc_motor.c: 245:     while (seconds<time)
  6736   001CBA  5025               	movf	moveBack@time^0,w,c
  6737   001CBC  5C49               	subwf	_seconds^0,w,c
  6738   001CBE  5026               	movf	(moveBack@time+1)^0,w,c
  6739   001CC0  584A               	subwfb	(_seconds+1)^0,w,c
  6740   001CC2  A0D8               	btfss	status,0,c
  6741   001CC4  EF66  F00E         	goto	u3251
  6742   001CC8  EF68  F00E         	goto	u3250
  6743   001CCC                     u3251:
  6744   001CCC  EF35  F00E         	goto	l4070
  6745   001CD0                     u3250:
  6746   001CD0  0012               	return		;funcret
  6747   001CD2                     __end_of_moveBack:
  6748                           	callstack 0
  6749                           
  6750 ;; *************** function _TimedfullSpeedAhead *****************
  6751 ;; Defined at:
  6752 ;;		line 226 in file "dc_motor.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6755 ;;		 -> main@motorL(9), 
  6756 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6757 ;;		 -> main@motorR(9), 
  6758 ;;  time            2   36[COMRAM] unsigned int 
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      void 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6770 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6773 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6774 ;;Total ram usage:        6 bytes
  6775 ;; Hardware stack levels used: 1
  6776 ;; Hardware stack levels required when called: 7
  6777 ;; This function calls:
  6778 ;;		_setMotorPWM
  6779 ;; This function is called by:
  6780 ;;		_RobotMovement
  6781 ;;		_return_back
  6782 ;;		_main
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text36
  6787   001CD2                     __ptext36:
  6788                           	callstack 0
  6789   001CD2                     _TimedfullSpeedAhead:
  6790                           	callstack 22
  6791   001CD2                     
  6792                           ;dc_motor.c: 226: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 227: {;dc_motor.c: 228:     seconds = 0;
  6793   001CD2  0E00               	movlw	0
  6794   001CD4  6E4A               	movwf	(_seconds+1)^0,c
  6795   001CD6  0E00               	movlw	0
  6796   001CD8  6E49               	movwf	_seconds^0,c
  6797                           
  6798                           ;dc_motor.c: 229:     while (seconds<time)
  6799   001CDA  EF97  F00E         	goto	l4066
  6800   001CDE                     l4056:
  6801                           
  6802                           ;dc_motor.c: 230:     {;dc_motor.c: 232:         (*mL).direction=0;
  6803   001CDE  EE20 F001          	lfsr	2,1
  6804   001CE2  5021               	movf	TimedfullSpeedAhead@mL^0,w,c
  6805   001CE4  26D9               	addwf	fsr2l,f,c
  6806   001CE6  5022               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6807   001CE8  22DA               	addwfc	fsr2h,f,c
  6808   001CEA  0E00               	movlw	0
  6809   001CEC  6EDF               	movwf	indf2,c
  6810                           
  6811                           ;dc_motor.c: 233:         (*mR).direction=0;
  6812   001CEE  EE20 F001          	lfsr	2,1
  6813   001CF2  5023               	movf	TimedfullSpeedAhead@mR^0,w,c
  6814   001CF4  26D9               	addwf	fsr2l,f,c
  6815   001CF6  5024               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6816   001CF8  22DA               	addwfc	fsr2h,f,c
  6817   001CFA  0E00               	movlw	0
  6818   001CFC  6EDF               	movwf	indf2,c
  6819   001CFE                     
  6820                           ;dc_motor.c: 234:         (*mL).power=68;
  6821   001CFE  C021  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6822   001D02  C022  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6823   001D06  0E44               	movlw	68
  6824   001D08  6EDF               	movwf	indf2,c
  6825   001D0A                     
  6826                           ;dc_motor.c: 235:         (*mR).power=68;
  6827   001D0A  C023  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6828   001D0E  C024  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6829   001D12  0E44               	movlw	68
  6830   001D14  6EDF               	movwf	indf2,c
  6831   001D16                     
  6832                           ;dc_motor.c: 236:         setMotorPWM(mL);
  6833   001D16  C021  F01B         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6834   001D1A  C022  F01C         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6835   001D1E  EC5B  F008         	call	_setMotorPWM	;wreg free
  6836   001D22                     
  6837                           ;dc_motor.c: 237:         setMotorPWM(mR);
  6838   001D22  C023  F01B         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6839   001D26  C024  F01C         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6840   001D2A  EC5B  F008         	call	_setMotorPWM	;wreg free
  6841   001D2E                     l4066:
  6842                           
  6843                           ;dc_motor.c: 229:     while (seconds<time)
  6844   001D2E  5025               	movf	TimedfullSpeedAhead@time^0,w,c
  6845   001D30  5C49               	subwf	_seconds^0,w,c
  6846   001D32  5026               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6847   001D34  584A               	subwfb	(_seconds+1)^0,w,c
  6848   001D36  A0D8               	btfss	status,0,c
  6849   001D38  EFA0  F00E         	goto	u3241
  6850   001D3C  EFA2  F00E         	goto	u3240
  6851   001D40                     u3241:
  6852   001D40  EF6F  F00E         	goto	l4056
  6853   001D44                     u3240:
  6854   001D44  0012               	return		;funcret
  6855   001D46                     __end_of_TimedfullSpeedAhead:
  6856                           	callstack 0
  6857                           
  6858 ;; *************** function _setMotorPWM *****************
  6859 ;; Defined at:
  6860 ;;		line 74 in file "dc_motor.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;  m               2   26[COMRAM] PTR struct DC_motor
  6863 ;;		 -> main@motorR(9), main@motorL(9), 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  negDuty         1   31[COMRAM] unsigned char 
  6866 ;;  posDuty         1   30[COMRAM] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6876 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6877 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6878 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6879 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6880 ;;Total ram usage:        6 bytes
  6881 ;; Hardware stack levels used: 1
  6882 ;; Hardware stack levels required when called: 6
  6883 ;; This function calls:
  6884 ;;		___lwdiv
  6885 ;;		___wmul
  6886 ;; This function is called by:
  6887 ;;		_stop
  6888 ;;		_turnLeft
  6889 ;;		_turnRight
  6890 ;;		_turnLeftLong
  6891 ;;		_turnRightLong
  6892 ;;		_fullSpeedAhead
  6893 ;;		_TimedfullSpeedAhead
  6894 ;;		_moveBack
  6895 ;; This function uses a non-reentrant model
  6896 ;;
  6897                           
  6898                           	psect	text37
  6899   0010B6                     __ptext37:
  6900                           	callstack 0
  6901   0010B6                     _setMotorPWM:
  6902                           	callstack 23
  6903   0010B6                     
  6904                           ;dc_motor.c: 74: void setMotorPWM(DC_motor *m);dc_motor.c: 75: {;dc_motor.c: 76:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 78:     if(m->brakemode) {
  6905   0010B6  EE20 F002          	lfsr	2,2
  6906   0010BA  501B               	movf	setMotorPWM@m^0,w,c
  6907   0010BC  26D9               	addwf	fsr2l,f,c
  6908   0010BE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6909   0010C0  22DA               	addwfc	fsr2h,f,c
  6910   0010C2  50DF               	movf	indf2,w,c
  6911   0010C4  B4D8               	btfsc	status,2,c
  6912   0010C6  EF67  F008         	goto	u3071
  6913   0010CA  EF69  F008         	goto	u3070
  6914   0010CE                     u3071:
  6915   0010CE  EF9D  F008         	goto	l3734
  6916   0010D2                     u3070:
  6917   0010D2                     
  6918                           ;dc_motor.c: 79:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6919   0010D2  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6920   0010D6  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6921   0010DA  50DF               	movf	indf2,w,c
  6922   0010DC  6E1D               	movwf	??_setMotorPWM^0,c
  6923   0010DE  501D               	movf	??_setMotorPWM^0,w,c
  6924   0010E0  6E0E               	movwf	___wmul@multiplier^0,c
  6925   0010E2  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6926   0010E4  EE20 F003          	lfsr	2,3
  6927   0010E8  501B               	movf	setMotorPWM@m^0,w,c
  6928   0010EA  26D9               	addwf	fsr2l,f,c
  6929   0010EC  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6930   0010EE  22DA               	addwfc	fsr2h,f,c
  6931   0010F0  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6932   0010F4  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6933   0010F8  ECBA  F011         	call	___wmul	;wreg free
  6934   0010FC  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6935   001100  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6936   001104  0E00               	movlw	0
  6937   001106  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6938   001108  0E64               	movlw	100
  6939   00110A  6E16               	movwf	___lwdiv@divisor^0,c
  6940   00110C  ECA3  F00E         	call	___lwdiv	;wreg free
  6941   001110  EE20 F003          	lfsr	2,3
  6942   001114  501B               	movf	setMotorPWM@m^0,w,c
  6943   001116  26D9               	addwf	fsr2l,f,c
  6944   001118  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6945   00111A  22DA               	addwfc	fsr2h,f,c
  6946   00111C  50DF               	movf	indf2,w,c
  6947   00111E  6E1E               	movwf	(??_setMotorPWM+1)^0,c
  6948   001120  5014               	movf	?___lwdiv^0,w,c
  6949   001122  5C1E               	subwf	(??_setMotorPWM+1)^0,w,c
  6950   001124  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6951   001126                     
  6952                           ;dc_motor.c: 80:         negDuty=m->PWMperiod;
  6953   001126  EE20 F003          	lfsr	2,3
  6954   00112A  501B               	movf	setMotorPWM@m^0,w,c
  6955   00112C  26D9               	addwf	fsr2l,f,c
  6956   00112E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6957   001130  22DA               	addwfc	fsr2h,f,c
  6958   001132  50DF               	movf	indf2,w,c
  6959   001134  6E20               	movwf	setMotorPWM@negDuty^0,c
  6960                           
  6961                           ;dc_motor.c: 81:     }
  6962   001136  EFC0  F008         	goto	l3738
  6963   00113A                     l3734:
  6964                           
  6965                           ;dc_motor.c: 83:         posDuty=0;
  6966   00113A  0E00               	movlw	0
  6967   00113C  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6968   00113E                     
  6969                           ;dc_motor.c: 84:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6970   00113E  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6971   001142  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6972   001146  50DF               	movf	indf2,w,c
  6973   001148  6E1D               	movwf	??_setMotorPWM^0,c
  6974   00114A  501D               	movf	??_setMotorPWM^0,w,c
  6975   00114C  6E0E               	movwf	___wmul@multiplier^0,c
  6976   00114E  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6977   001150  EE20 F003          	lfsr	2,3
  6978   001154  501B               	movf	setMotorPWM@m^0,w,c
  6979   001156  26D9               	addwf	fsr2l,f,c
  6980   001158  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6981   00115A  22DA               	addwfc	fsr2h,f,c
  6982   00115C  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6983   001160  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6984   001164  ECBA  F011         	call	___wmul	;wreg free
  6985   001168  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6986   00116C  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6987   001170  0E00               	movlw	0
  6988   001172  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6989   001174  0E64               	movlw	100
  6990   001176  6E16               	movwf	___lwdiv@divisor^0,c
  6991   001178  ECA3  F00E         	call	___lwdiv	;wreg free
  6992   00117C  5014               	movf	?___lwdiv^0,w,c
  6993   00117E  6E20               	movwf	setMotorPWM@negDuty^0,c
  6994   001180                     l3738:
  6995                           
  6996                           ;dc_motor.c: 87:     if (m->direction) {
  6997   001180  EE20 F001          	lfsr	2,1
  6998   001184  501B               	movf	setMotorPWM@m^0,w,c
  6999   001186  26D9               	addwf	fsr2l,f,c
  7000   001188  501C               	movf	(setMotorPWM@m+1)^0,w,c
  7001   00118A  22DA               	addwfc	fsr2h,f,c
  7002   00118C  50DF               	movf	indf2,w,c
  7003   00118E  B4D8               	btfsc	status,2,c
  7004   001190  EFCC  F008         	goto	u3081
  7005   001194  EFCE  F008         	goto	u3080
  7006   001198                     u3081:
  7007   001198  EFF0  F008         	goto	l3742
  7008   00119C                     u3080:
  7009   00119C                     
  7010                           ;dc_motor.c: 88:         *(m->posDutyHighByte)=posDuty;
  7011   00119C  EE20 F005          	lfsr	2,5
  7012   0011A0  501B               	movf	setMotorPWM@m^0,w,c
  7013   0011A2  26D9               	addwf	fsr2l,f,c
  7014   0011A4  501C               	movf	(setMotorPWM@m+1)^0,w,c
  7015   0011A6  22DA               	addwfc	fsr2h,f,c
  7016   0011A8  CFDE F01D          	movff	postinc2,??_setMotorPWM
  7017   0011AC  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  7018   0011B0  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  7019   0011B4  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7020   0011B8  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  7021                           
  7022                           ;dc_motor.c: 89:         *(m->negDutyHighByte)=negDuty;
  7023   0011BC  EE20 F007          	lfsr	2,7
  7024   0011C0  501B               	movf	setMotorPWM@m^0,w,c
  7025   0011C2  26D9               	addwf	fsr2l,f,c
  7026   0011C4  501C               	movf	(setMotorPWM@m+1)^0,w,c
  7027   0011C6  22DA               	addwfc	fsr2h,f,c
  7028   0011C8  CFDE F01D          	movff	postinc2,??_setMotorPWM
  7029   0011CC  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  7030   0011D0  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  7031   0011D4  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7032   0011D8  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  7033                           
  7034                           ;dc_motor.c: 90:     } else {
  7035   0011DC  EF10  F009         	goto	l240
  7036   0011E0                     l3742:
  7037                           
  7038                           ;dc_motor.c: 91:         *(m->posDutyHighByte)=negDuty;
  7039   0011E0  EE20 F005          	lfsr	2,5
  7040   0011E4  501B               	movf	setMotorPWM@m^0,w,c
  7041   0011E6  26D9               	addwf	fsr2l,f,c
  7042   0011E8  501C               	movf	(setMotorPWM@m+1)^0,w,c
  7043   0011EA  22DA               	addwfc	fsr2h,f,c
  7044   0011EC  CFDE F01D          	movff	postinc2,??_setMotorPWM
  7045   0011F0  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  7046   0011F4  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  7047   0011F8  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7048   0011FC  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  7049                           
  7050                           ;dc_motor.c: 92:         *(m->negDutyHighByte)=posDuty;
  7051   001200  EE20 F007          	lfsr	2,7
  7052   001204  501B               	movf	setMotorPWM@m^0,w,c
  7053   001206  26D9               	addwf	fsr2l,f,c
  7054   001208  501C               	movf	(setMotorPWM@m+1)^0,w,c
  7055   00120A  22DA               	addwfc	fsr2h,f,c
  7056   00120C  CFDE F01D          	movff	postinc2,??_setMotorPWM
  7057   001210  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  7058   001214  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  7059   001218  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  7060   00121C  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  7061   001220                     l240:
  7062   001220  0012               	return		;funcret
  7063   001222                     __end_of_setMotorPWM:
  7064                           	callstack 0
  7065                           
  7066 ;; *************** function ___wmul *****************
  7067 ;; Defined at:
  7068 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;  multiplier      2   13[COMRAM] unsigned int 
  7071 ;;  multiplicand    2   15[COMRAM] unsigned int 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  product         2   17[COMRAM] unsigned int 
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  2   13[COMRAM] unsigned int 
  7076 ;; Registers used:
  7077 ;;		wreg, status,2, status,0, prodl, prodh
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7083 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7084 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7086 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7087 ;;Total ram usage:        6 bytes
  7088 ;; Hardware stack levels used: 1
  7089 ;; Hardware stack levels required when called: 5
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_get_color_distance
  7094 ;;		_get_color_code
  7095 ;;		_get_wall_detection
  7096 ;;		_setMotorPWM
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           	psect	text38
  7101   002374                     __ptext38:
  7102                           	callstack 0
  7103   002374                     ___wmul:
  7104                           	callstack 23
  7105   002374  500E               	movf	___wmul@multiplier^0,w,c
  7106   002376  0210               	mulwf	___wmul@multiplicand^0,c
  7107   002378  CFF3 F012          	movff	prodl,___wmul@product
  7108   00237C  CFF4 F013          	movff	prodh,___wmul@product+1
  7109   002380  500E               	movf	___wmul@multiplier^0,w,c
  7110   002382  0211               	mulwf	(___wmul@multiplicand+1)^0,c
  7111   002384  50F3               	movf	243,w,c
  7112   002386  2613               	addwf	(___wmul@product+1)^0,f,c
  7113   002388  500F               	movf	(___wmul@multiplier+1)^0,w,c
  7114   00238A  0210               	mulwf	___wmul@multiplicand^0,c
  7115   00238C  50F3               	movf	243,w,c
  7116   00238E  2613               	addwf	(___wmul@product+1)^0,f,c
  7117   002390  C012  F00E         	movff	___wmul@product,?___wmul
  7118   002394  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  7119   002398  0012               	return		;funcret
  7120   00239A                     __end_of___wmul:
  7121                           	callstack 0
  7122                           
  7123 ;; *************** function ___lwdiv *****************
  7124 ;; Defined at:
  7125 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  dividend        2   19[COMRAM] unsigned int 
  7128 ;;  divisor         2   21[COMRAM] unsigned int 
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;  quotient        2   24[COMRAM] unsigned int 
  7131 ;;  counter         1   23[COMRAM] unsigned char 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  2   19[COMRAM] unsigned int 
  7134 ;; Registers used:
  7135 ;;		wreg, status,2, status,0
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7142 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7144 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7145 ;;Total ram usage:        7 bytes
  7146 ;; Hardware stack levels used: 1
  7147 ;; Hardware stack levels required when called: 5
  7148 ;; This function calls:
  7149 ;;		Nothing
  7150 ;; This function is called by:
  7151 ;;		_calibrate_black
  7152 ;;		_setMotorPWM
  7153 ;; This function uses a non-reentrant model
  7154 ;;
  7155                           
  7156                           	psect	text39
  7157   001D46                     __ptext39:
  7158                           	callstack 0
  7159   001D46                     ___lwdiv:
  7160                           	callstack 23
  7161   001D46  0E00               	movlw	0
  7162   001D48  6E1A               	movwf	(___lwdiv@quotient+1)^0,c
  7163   001D4A  0E00               	movlw	0
  7164   001D4C  6E19               	movwf	___lwdiv@quotient^0,c
  7165   001D4E  5016               	movf	___lwdiv@divisor^0,w,c
  7166   001D50  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
  7167   001D52  B4D8               	btfsc	status,2,c
  7168   001D54  EFAE  F00E         	goto	u3011
  7169   001D58  EFB0  F00E         	goto	u3010
  7170   001D5C                     u3011:
  7171   001D5C  EFD8  F00E         	goto	l996
  7172   001D60                     u3010:
  7173   001D60  0E01               	movlw	1
  7174   001D62  6E18               	movwf	___lwdiv@counter^0,c
  7175   001D64  EFB8  F00E         	goto	l3682
  7176   001D68                     l3680:
  7177   001D68  90D8               	bcf	status,0,c
  7178   001D6A  3616               	rlcf	___lwdiv@divisor^0,f,c
  7179   001D6C  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
  7180   001D6E  2A18               	incf	___lwdiv@counter^0,f,c
  7181   001D70                     l3682:
  7182   001D70  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
  7183   001D72  EFBD  F00E         	goto	u3021
  7184   001D76  EFBF  F00E         	goto	u3020
  7185   001D7A                     u3021:
  7186   001D7A  EFB4  F00E         	goto	l3680
  7187   001D7E                     u3020:
  7188   001D7E                     l3684:
  7189   001D7E  90D8               	bcf	status,0,c
  7190   001D80  3619               	rlcf	___lwdiv@quotient^0,f,c
  7191   001D82  361A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  7192   001D84  5016               	movf	___lwdiv@divisor^0,w,c
  7193   001D86  5C14               	subwf	___lwdiv@dividend^0,w,c
  7194   001D88  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7195   001D8A  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
  7196   001D8C  A0D8               	btfss	status,0,c
  7197   001D8E  EFCB  F00E         	goto	u3031
  7198   001D92  EFCD  F00E         	goto	u3030
  7199   001D96                     u3031:
  7200   001D96  EFD2  F00E         	goto	l3692
  7201   001D9A                     u3030:
  7202   001D9A  5016               	movf	___lwdiv@divisor^0,w,c
  7203   001D9C  5E14               	subwf	___lwdiv@dividend^0,f,c
  7204   001D9E  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  7205   001DA0  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
  7206   001DA2  8019               	bsf	___lwdiv@quotient^0,0,c
  7207   001DA4                     l3692:
  7208   001DA4  90D8               	bcf	status,0,c
  7209   001DA6  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
  7210   001DA8  3216               	rrcf	___lwdiv@divisor^0,f,c
  7211   001DAA  2E18               	decfsz	___lwdiv@counter^0,f,c
  7212   001DAC  EFBF  F00E         	goto	l3684
  7213   001DB0                     l996:
  7214   001DB0  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  7215   001DB4  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7216   001DB8  0012               	return		;funcret
  7217   001DBA                     __end_of___lwdiv:
  7218                           	callstack 0
  7219                           
  7220 ;; *************** function _Interrupts_init *****************
  7221 ;; Defined at:
  7222 ;;		line 11 in file "interrupts.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		None
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used: 1
  7242 ;; Hardware stack levels required when called: 5
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_main
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text40
  7251   00240C                     __ptext40:
  7252                           	callstack 0
  7253   00240C                     _Interrupts_init:
  7254                           	callstack 25
  7255   00240C                     
  7256                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  7257   00240C  8CF2               	bsf	242,6,c	;volatile
  7258                           
  7259                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  7260   00240E  010E               	movlb	14	; () banked
  7261   002410  8B29               	bsf	41,5,b	;volatile
  7262                           
  7263                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  7264   002412  812B               	bsf	43,0,b	;volatile
  7265                           
  7266                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  7267   002414  8EF2               	bsf	242,7,c	;volatile
  7268   002416                     
  7269                           ; BSR set to: 14
  7270   002416  0012               	return		;funcret
  7271   002418                     __end_of_Interrupts_init:
  7272                           	callstack 0
  7273                           
  7274 ;; *************** function _HighISR *****************
  7275 ;; Defined at:
  7276 ;;		line 25 in file "interrupts.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;		None
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;		None
  7281 ;; Return value:  Size  Location     Type
  7282 ;;                  1    wreg      void 
  7283 ;; Registers used:
  7284 ;;		wreg, status,2, status,0, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7294 ;;Total ram usage:        0 bytes
  7295 ;; Hardware stack levels used: 1
  7296 ;; Hardware stack levels required when called: 4
  7297 ;; This function calls:
  7298 ;;		_increment_seconds
  7299 ;;		_set_wall_detection
  7300 ;; This function is called by:
  7301 ;;		Interrupt level 2
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           	psect	intcode
  7306   000008                     __pintcode:
  7307                           	callstack 0
  7308   000008                     _HighISR:
  7309                           	callstack 21
  7310                           
  7311                           ; BSR set to: 14
  7312                           ;incstack = 0
  7313   000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  7314   00000A                     
  7315                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  7316   00000A  010E               	movlb	14	; () banked
  7317   00000C  AB33               	btfss	51,5,b	;volatile
  7318   00000E  EF0B  F000         	goto	i2u253_41
  7319   000012  EF0D  F000         	goto	i2u253_40
  7320   000016                     i2u253_41:
  7321   000016  EF4F  F000         	goto	i2l437
  7322   00001A                     i2u253_40:
  7323   00001A                     
  7324                           ; BSR set to: 14
  7325                           ;interrupts.c: 28:         incr_sec_counter += 1;
  7326   00001A  0100               	movlb	0	; () banked
  7327   00001C  4BF2               	infsnz	_incr_sec_counter& (0+255),f,b
  7328   00001E  2BF3               	incf	(_incr_sec_counter+1)& (0+255),f,b
  7329                           
  7330                           ;interrupts.c: 29:         wall_detection_counter += 1;
  7331   000020  4A45               	infsnz	_wall_detection_counter^0,f,c
  7332   000022  2A46               	incf	(_wall_detection_counter+1)^0,f,c
  7333   000024                     
  7334                           ; BSR set to: 0
  7335                           ;interrupts.c: 31:         if(incr_sec_counter == 10){
  7336   000024  0E0A               	movlw	10
  7337   000026  19F2               	xorwf	_incr_sec_counter& (0+255),w,b
  7338   000028  11F3               	iorwf	(_incr_sec_counter+1)& (0+255),w,b
  7339   00002A  A4D8               	btfss	status,2,c
  7340   00002C  EF1A  F000         	goto	i2u254_41
  7341   000030  EF1C  F000         	goto	i2u254_40
  7342   000034                     i2u254_41:
  7343   000034  EF23  F000         	goto	i2l3324
  7344   000038                     i2u254_40:
  7345   000038                     
  7346                           ; BSR set to: 0
  7347                           ;interrupts.c: 32:             increment_seconds();
  7348   000038  EC35  F012         	call	_increment_seconds	;wreg free
  7349   00003C                     
  7350                           ;interrupts.c: 33:             incr_sec_counter = 0;
  7351   00003C  0E00               	movlw	0
  7352   00003E  0100               	movlb	0	; () banked
  7353   000040  6FF3               	movwf	(_incr_sec_counter+1)& (0+255),b
  7354   000042  0E00               	movlw	0
  7355   000044  6FF2               	movwf	_incr_sec_counter& (0+255),b
  7356   000046                     i2l3324:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;interrupts.c: 36:         if(wall_detection_counter == 22){
  7360   000046  0E16               	movlw	22
  7361   000048  1845               	xorwf	_wall_detection_counter^0,w,c
  7362   00004A  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7363   00004C  A4D8               	btfss	status,2,c
  7364   00004E  EF2B  F000         	goto	i2u255_41
  7365   000052  EF2D  F000         	goto	i2u255_40
  7366   000056                     i2u255_41:
  7367   000056  EF35  F000         	goto	i2l3328
  7368   00005A                     i2u255_40:
  7369   00005A                     
  7370                           ; BSR set to: 0
  7371                           ;interrupts.c: 37:             set_wall_detection(0);
  7372   00005A  0E00               	movlw	0
  7373   00005C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7374   00005E  0E00               	movlw	0
  7375   000060  6E0C               	movwf	set_wall_detection@mode^0,c
  7376   000062  ECDD  F00E         	call	_set_wall_detection	;wreg free
  7377                           
  7378                           ;interrupts.c: 38:         }
  7379   000066  EF49  F000         	goto	i2l3334
  7380   00006A                     i2l3328:
  7381                           
  7382                           ; BSR set to: 0
  7383   00006A  0E2C               	movlw	44
  7384   00006C  1845               	xorwf	_wall_detection_counter^0,w,c
  7385   00006E  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7386   000070  A4D8               	btfss	status,2,c
  7387   000072  EF3D  F000         	goto	i2u256_41
  7388   000076  EF3F  F000         	goto	i2u256_40
  7389   00007A                     i2u256_41:
  7390   00007A  EF49  F000         	goto	i2l3334
  7391   00007E                     i2u256_40:
  7392   00007E                     
  7393                           ; BSR set to: 0
  7394                           ;interrupts.c: 40:             set_wall_detection(1);
  7395   00007E  0E00               	movlw	0
  7396   000080  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7397   000082  0E01               	movlw	1
  7398   000084  6E0C               	movwf	set_wall_detection@mode^0,c
  7399   000086  ECDD  F00E         	call	_set_wall_detection	;wreg free
  7400   00008A                     
  7401                           ;interrupts.c: 41:             wall_detection_counter = 0;
  7402   00008A  0E00               	movlw	0
  7403   00008C  6E46               	movwf	(_wall_detection_counter+1)^0,c
  7404   00008E  0E00               	movlw	0
  7405   000090  6E45               	movwf	_wall_detection_counter^0,c
  7406   000092                     i2l3334:
  7407                           
  7408                           ;interrupts.c: 44:         TMR0H=0b11111101;
  7409   000092  0EFD               	movlw	253
  7410   000094  6ED4               	movwf	212,c	;volatile
  7411   000096                     
  7412                           ;interrupts.c: 45:         TMR0L=0b10010000;
  7413   000096  0E90               	movlw	144
  7414   000098  6ED3               	movwf	211,c	;volatile
  7415   00009A                     
  7416                           ;interrupts.c: 47:         PIR0bits.TMR0IF = 0;
  7417   00009A  010E               	movlb	14	; () banked
  7418   00009C  9B33               	bcf	51,5,b	;volatile
  7419   00009E                     i2l437:
  7420                           
  7421                           ; BSR set to: 14
  7422   00009E  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7423   0000A0  0011               	retfie		f
  7424   0000A2                     __end_of_HighISR:
  7425                           	callstack 0
  7426                           
  7427 ;; *************** function _set_wall_detection *****************
  7428 ;; Defined at:
  7429 ;;		line 254 in file "color.c"
  7430 ;; Parameters:    Size  Location     Type
  7431 ;;  mode            2   11[COMRAM] unsigned int 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;		None
  7434 ;; Return value:  Size  Location     Type
  7435 ;;                  1    wreg      void 
  7436 ;; Registers used:
  7437 ;;		wreg, status,2, status,0, cstack
  7438 ;; Tracked objects:
  7439 ;;		On entry : 0/0
  7440 ;;		On exit  : 0/0
  7441 ;;		Unchanged: 0/0
  7442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7443 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7446 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7447 ;;Total ram usage:        2 bytes
  7448 ;; Hardware stack levels used: 1
  7449 ;; Hardware stack levels required when called: 3
  7450 ;; This function calls:
  7451 ;;		i2_color_read_Clear
  7452 ;;		i2_set_led_color
  7453 ;; This function is called by:
  7454 ;;		_HighISR
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           	psect	text42
  7459   001DBA                     __ptext42:
  7460                           	callstack 0
  7461   001DBA                     _set_wall_detection:
  7462                           	callstack 21
  7463   001DBA                     
  7464                           ;color.c: 256:     if(wall_detection_mode == 0){
  7465   001DBA  0100               	movlb	0	; () banked
  7466   001DBC  51F6               	movf	_wall_detection_mode& (0+255),w,b
  7467   001DBE  11F7               	iorwf	(_wall_detection_mode+1)& (0+255),w,b
  7468   001DC0  A4D8               	btfss	status,2,c
  7469   001DC2  EFE5  F00E         	goto	i2u218_41
  7470   001DC6  EFE7  F00E         	goto	i2u218_40
  7471   001DCA                     i2u218_41:
  7472   001DCA  EFE9  F00E         	goto	i2l3068
  7473   001DCE                     i2u218_40:
  7474   001DCE  EF15  F00F         	goto	i2l163
  7475   001DD2                     i2l3068:
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;color.c: 259:     if(mode == 0){
  7479   001DD2  500C               	movf	set_wall_detection@mode^0,w,c
  7480   001DD4  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7481   001DD6  A4D8               	btfss	status,2,c
  7482   001DD8  EFF0  F00E         	goto	i2u219_41
  7483   001DDC  EFF2  F00E         	goto	i2u219_40
  7484   001DE0                     i2u219_41:
  7485   001DE0  EF00  F00F         	goto	i2l3074
  7486   001DE4                     i2u219_40:
  7487   001DE4                     
  7488                           ; BSR set to: 0
  7489                           ;color.c: 260:         clear1 = color_read_Clear();
  7490   001DE4  EC4A  F010         	call	i2_color_read_Clear	;wreg free
  7491   001DE8  C005  F04D         	movff	?i2_color_read_Clear,_clear1
  7492   001DEC  C006  F04E         	movff	?i2_color_read_Clear+1,_clear1+1
  7493   001DF0                     
  7494                           ;color.c: 261:         set_led_color(0b111);
  7495   001DF0  0E00               	movlw	0
  7496   001DF2  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7497   001DF4  0E07               	movlw	7
  7498   001DF6  6E01               	movwf	i2set_led_color@color^0,c
  7499   001DF8  EC01  F011         	call	i2_set_led_color	;wreg free
  7500                           
  7501                           ;color.c: 262:     }else if(mode == 1){
  7502   001DFC  EF15  F00F         	goto	i2l163
  7503   001E00                     i2l3074:
  7504                           
  7505                           ; BSR set to: 0
  7506   001E00  040C               	decf	set_wall_detection@mode^0,w,c
  7507   001E02  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7508   001E04  A4D8               	btfss	status,2,c
  7509   001E06  EF07  F00F         	goto	i2u220_41
  7510   001E0A  EF09  F00F         	goto	i2u220_40
  7511   001E0E                     i2u220_41:
  7512   001E0E  EF15  F00F         	goto	i2l163
  7513   001E12                     i2u220_40:
  7514   001E12                     
  7515                           ; BSR set to: 0
  7516                           ;color.c: 263:         clear2 = color_read_Clear();
  7517   001E12  EC4A  F010         	call	i2_color_read_Clear	;wreg free
  7518   001E16  C005  F04B         	movff	?i2_color_read_Clear,_clear2
  7519   001E1A  C006  F04C         	movff	?i2_color_read_Clear+1,_clear2+1
  7520   001E1E                     
  7521                           ;color.c: 264:         set_led_color(0b000);
  7522   001E1E  0E00               	movlw	0
  7523   001E20  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7524   001E22  0E00               	movlw	0
  7525   001E24  6E01               	movwf	i2set_led_color@color^0,c
  7526   001E26  EC01  F011         	call	i2_set_led_color	;wreg free
  7527   001E2A                     i2l163:
  7528   001E2A  0012               	return		;funcret
  7529   001E2C                     __end_of_set_wall_detection:
  7530                           	callstack 0
  7531                           
  7532 ;; *************** function i2_set_led_color *****************
  7533 ;; Defined at:
  7534 ;;		line 157 in file "color.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  color           2    0[COMRAM] unsigned int 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		None
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7548 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7551 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7552 ;;Total ram usage:        2 bytes
  7553 ;; Hardware stack levels used: 1
  7554 ;; This function calls:
  7555 ;;		Nothing
  7556 ;; This function is called by:
  7557 ;;		_set_wall_detection
  7558 ;; This function uses a non-reentrant model
  7559 ;;
  7560                           
  7561                           	psect	text43
  7562   002202                     __ptext43:
  7563                           	callstack 0
  7564   002202                     i2_set_led_color:
  7565                           	callstack 23
  7566   002202                     
  7567                           ;color.c: 161:     if(color & 0b100){
  7568   002202  A401               	btfss	i2set_led_color@color^0,2,c
  7569   002204  EF06  F011         	goto	i2u187_41
  7570   002208  EF08  F011         	goto	i2u187_40
  7571   00220C                     i2u187_41:
  7572   00220C  EF0B  F011         	goto	i2l121
  7573   002210                     i2u187_40:
  7574   002210                     
  7575                           ;color.c: 162:         LATGbits.LATG1 = 1;
  7576   002210  827F               	bsf	127,1,c	;volatile
  7577                           
  7578                           ;color.c: 163:     }else{
  7579   002212  EF0C  F011         	goto	i2l122
  7580   002216                     i2l121:
  7581                           
  7582                           ;color.c: 164:         LATGbits.LATG1 = 0;
  7583   002216  927F               	bcf	127,1,c	;volatile
  7584   002218                     i2l122:
  7585                           
  7586                           ;color.c: 166:     if(color & 0b010){
  7587   002218  A201               	btfss	i2set_led_color@color^0,1,c
  7588   00221A  EF11  F011         	goto	i2u188_41
  7589   00221E  EF13  F011         	goto	i2u188_40
  7590   002222                     i2u188_41:
  7591   002222  EF16  F011         	goto	i2l123
  7592   002226                     i2u188_40:
  7593   002226                     
  7594                           ;color.c: 167:         LATAbits.LATA4 = 1;
  7595   002226  8879               	bsf	121,4,c	;volatile
  7596                           
  7597                           ;color.c: 168:     }else{
  7598   002228  EF17  F011         	goto	i2l124
  7599   00222C                     i2l123:
  7600                           
  7601                           ;color.c: 169:         LATAbits.LATA4 = 0;
  7602   00222C  9879               	bcf	121,4,c	;volatile
  7603   00222E                     i2l124:
  7604                           
  7605                           ;color.c: 171:     if(color & 0b001){
  7606   00222E  A001               	btfss	i2set_led_color@color^0,0,c
  7607   002230  EF1C  F011         	goto	i2u189_41
  7608   002234  EF1E  F011         	goto	i2u189_40
  7609   002238                     i2u189_41:
  7610   002238  EF21  F011         	goto	i2l125
  7611   00223C                     i2u189_40:
  7612   00223C                     
  7613                           ;color.c: 172:         LATFbits.LATF7 = 1;
  7614   00223C  8E7E               	bsf	126,7,c	;volatile
  7615                           
  7616                           ;color.c: 173:     }else{
  7617   00223E  EF22  F011         	goto	i2l127
  7618   002242                     i2l125:
  7619                           
  7620                           ;color.c: 174:         LATFbits.LATF7 = 0;
  7621   002242  9E7E               	bcf	126,7,c	;volatile
  7622   002244                     i2l127:
  7623   002244  0012               	return		;funcret
  7624   002246                     __end_ofi2_set_led_color:
  7625                           	callstack 0
  7626                           
  7627 ;; *************** function i2_color_read_Clear *****************
  7628 ;; Defined at:
  7629 ;;		line 135 in file "color.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;		None
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;  tmp             2    9[COMRAM] unsigned int 
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  2    4[COMRAM] unsigned int 
  7636 ;; Registers used:
  7637 ;;		wreg, status,2, status,0, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7645 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7646 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7647 ;;Total ram usage:        7 bytes
  7648 ;; Hardware stack levels used: 1
  7649 ;; Hardware stack levels required when called: 2
  7650 ;; This function calls:
  7651 ;;		i2_I2C_2_Master_Read
  7652 ;;		i2_I2C_2_Master_RepStart
  7653 ;;		i2_I2C_2_Master_Start
  7654 ;;		i2_I2C_2_Master_Stop
  7655 ;;		i2_I2C_2_Master_Write
  7656 ;; This function is called by:
  7657 ;;		_set_wall_detection
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text44
  7662   002094                     __ptext44:
  7663                           	callstack 0
  7664   002094                     i2_color_read_Clear:
  7665                           	callstack 21
  7666   002094                     
  7667                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  7668   002094  EC2B  F012         	call	i2_I2C_2_Master_Start	;wreg free
  7669                           
  7670                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  7671   002098  0E52               	movlw	82
  7672   00209A  EC0C  F012         	call	i2_I2C_2_Master_Write
  7673                           
  7674                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  7675   00209E  0EB4               	movlw	180
  7676   0020A0  EC0C  F012         	call	i2_I2C_2_Master_Write
  7677                           
  7678                           ;color.c: 141:  I2C_2_Master_RepStart();
  7679   0020A4  EC30  F012         	call	i2_I2C_2_Master_RepStart	;wreg free
  7680                           
  7681                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  7682   0020A8  0E53               	movlw	83
  7683   0020AA  EC0C  F012         	call	i2_I2C_2_Master_Write
  7684                           
  7685                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  7686   0020AE  0E01               	movlw	1
  7687   0020B0  EC44  F011         	call	i2_I2C_2_Master_Read
  7688   0020B4  6E07               	movwf	??i2_color_read_Clear^0,c
  7689   0020B6  5007               	movf	??i2_color_read_Clear^0,w,c
  7690   0020B8  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7691   0020BA  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7692                           
  7693                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7694   0020BC  0E00               	movlw	0
  7695   0020BE  EC44  F011         	call	i2_I2C_2_Master_Read
  7696   0020C2  6E07               	movwf	??i2_color_read_Clear^0,c
  7697   0020C4  5007               	movf	??i2_color_read_Clear^0,w,c
  7698   0020C6  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7699   0020C8  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7700   0020CA  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7701   0020CC  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7702   0020CE  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7703   0020D0  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7704   0020D2  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7705   0020D4  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7706                           
  7707                           ;color.c: 145:  I2C_2_Master_Stop();
  7708   0020D6  EC26  F012         	call	i2_I2C_2_Master_Stop	;wreg free
  7709   0020DA                     
  7710                           ;color.c: 146:  return tmp;
  7711   0020DA  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7712   0020DE  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7713   0020E2  0012               	return		;funcret
  7714   0020E4                     __end_ofi2_color_read_Clear:
  7715                           	callstack 0
  7716                           
  7717 ;; *************** function i2_I2C_2_Master_Write *****************
  7718 ;; Defined at:
  7719 ;;		line 45 in file "i2c.c"
  7720 ;; Parameters:    Size  Location     Type
  7721 ;;  data_byte       1    wreg     unsigned char 
  7722 ;; Auto vars:     Size  Location     Type
  7723 ;;  data_byte       1    1[COMRAM] unsigned char 
  7724 ;; Return value:  Size  Location     Type
  7725 ;;                  1    wreg      void 
  7726 ;; Registers used:
  7727 ;;		wreg, status,2, status,0, cstack
  7728 ;; Tracked objects:
  7729 ;;		On entry : 0/0
  7730 ;;		On exit  : 0/0
  7731 ;;		Unchanged: 0/0
  7732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7734 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7737 ;;Total ram usage:        1 bytes
  7738 ;; Hardware stack levels used: 1
  7739 ;; Hardware stack levels required when called: 1
  7740 ;; This function calls:
  7741 ;;		i2_I2C_2_Master_Idle
  7742 ;; This function is called by:
  7743 ;;		i2_color_read_Clear
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           	psect	text45
  7748   002418                     __ptext45:
  7749                           	callstack 0
  7750   002418                     i2_I2C_2_Master_Write:
  7751                           	callstack 21
  7752                           
  7753                           ;incstack = 0
  7754                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7755   002418  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7756   00241A                     
  7757                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7758   00241A  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7759   00241E                     
  7760                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7761   00241E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7762   002422  0012               	return		;funcret
  7763   002424                     __end_ofi2_I2C_2_Master_Write:
  7764                           	callstack 0
  7765                           
  7766 ;; *************** function i2_I2C_2_Master_Stop *****************
  7767 ;; Defined at:
  7768 ;;		line 39 in file "i2c.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used: 1
  7788 ;; Hardware stack levels required when called: 1
  7789 ;; This function calls:
  7790 ;;		i2_I2C_2_Master_Idle
  7791 ;; This function is called by:
  7792 ;;		i2_color_read_Clear
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text46
  7797   00244C                     __ptext46:
  7798                           	callstack 0
  7799   00244C                     i2_I2C_2_Master_Stop:
  7800                           	callstack 21
  7801   00244C                     
  7802                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7803   00244C  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7804   002450                     
  7805                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7806   002450  010E               	movlb	14	; () banked
  7807   002452  85DA               	bsf	218,2,b	;volatile
  7808   002454                     
  7809                           ; BSR set to: 14
  7810   002454  0012               	return		;funcret
  7811   002456                     __end_ofi2_I2C_2_Master_Stop:
  7812                           	callstack 0
  7813                           
  7814 ;; *************** function i2_I2C_2_Master_Start *****************
  7815 ;; Defined at:
  7816 ;;		line 27 in file "i2c.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;		None
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;		None
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      void 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7834 ;;Total ram usage:        0 bytes
  7835 ;; Hardware stack levels used: 1
  7836 ;; Hardware stack levels required when called: 1
  7837 ;; This function calls:
  7838 ;;		i2_I2C_2_Master_Idle
  7839 ;; This function is called by:
  7840 ;;		i2_color_read_Clear
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text47
  7845   002456                     __ptext47:
  7846                           	callstack 0
  7847   002456                     i2_I2C_2_Master_Start:
  7848                           	callstack 21
  7849   002456                     
  7850                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7851   002456  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7852   00245A                     
  7853                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7854   00245A  010E               	movlb	14	; () banked
  7855   00245C  81DA               	bsf	218,0,b	;volatile
  7856   00245E                     
  7857                           ; BSR set to: 14
  7858   00245E  0012               	return		;funcret
  7859   002460                     __end_ofi2_I2C_2_Master_Start:
  7860                           	callstack 0
  7861                           
  7862 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7863 ;; Defined at:
  7864 ;;		line 33 in file "i2c.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  1    wreg      void 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7882 ;;Total ram usage:        0 bytes
  7883 ;; Hardware stack levels used: 1
  7884 ;; Hardware stack levels required when called: 1
  7885 ;; This function calls:
  7886 ;;		i2_I2C_2_Master_Idle
  7887 ;; This function is called by:
  7888 ;;		i2_color_read_Clear
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text48
  7893   002460                     __ptext48:
  7894                           	callstack 0
  7895   002460                     i2_I2C_2_Master_RepStart:
  7896                           	callstack 21
  7897   002460                     
  7898                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7899   002460  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7900   002464                     
  7901                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7902   002464  010E               	movlb	14	; () banked
  7903   002466  83DA               	bsf	218,1,b	;volatile
  7904   002468                     
  7905                           ; BSR set to: 14
  7906   002468  0012               	return		;funcret
  7907   00246A                     __end_ofi2_I2C_2_Master_RepStart:
  7908                           	callstack 0
  7909                           
  7910 ;; *************** function i2_I2C_2_Master_Read *****************
  7911 ;; Defined at:
  7912 ;;		line 51 in file "i2c.c"
  7913 ;; Parameters:    Size  Location     Type
  7914 ;;  ack             1    wreg     unsigned char 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  ack             1    2[COMRAM] unsigned char 
  7917 ;;  tmp             1    3[COMRAM] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      unsigned char 
  7920 ;; Registers used:
  7921 ;;		wreg, status,2, status,0, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7928 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7930 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7931 ;;Total ram usage:        3 bytes
  7932 ;; Hardware stack levels used: 1
  7933 ;; Hardware stack levels required when called: 1
  7934 ;; This function calls:
  7935 ;;		i2_I2C_2_Master_Idle
  7936 ;; This function is called by:
  7937 ;;		i2_color_read_Clear
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text49
  7942   002288                     __ptext49:
  7943                           	callstack 0
  7944   002288                     i2_I2C_2_Master_Read:
  7945                           	callstack 21
  7946                           
  7947                           ; BSR set to: 14
  7948                           ;incstack = 0
  7949                           ;i2I2C_2_Master_Read@ack stored from wreg
  7950   002288  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7951   00228A                     
  7952                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7953   00228A  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7954   00228E                     
  7955                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7956   00228E  010E               	movlb	14	; () banked
  7957   002290  87DA               	bsf	218,3,b	;volatile
  7958                           
  7959                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7960   002292  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7961   002296                     
  7962                           ;i2c.c: 57:   tmp = SSP2BUF;
  7963   002296  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7964                           
  7965                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7966   00229A  ECA6  F011         	call	i2_I2C_2_Master_Idle	;wreg free
  7967   00229E                     
  7968                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7969   00229E  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7970   0022A0  B4D8               	btfsc	status,2,c
  7971   0022A2  EF55  F011         	goto	i2u163_41
  7972   0022A6  EF59  F011         	goto	i2u163_40
  7973   0022AA                     i2u163_41:
  7974   0022AA  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7975   0022AC  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7976   0022AE  EF5A  F011         	goto	i2u164_48
  7977   0022B2                     i2u163_40:
  7978   0022B2  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7979   0022B4                     i2u164_48:
  7980   0022B4  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7981   0022B6  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7982   0022B8  010E               	movlb	14	; () banked
  7983   0022BA  51DA               	movf	218,w,b	;volatile
  7984   0022BC  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7985   0022BE  0BDF               	andlw	-33
  7986   0022C0  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7987   0022C2  6FDA               	movwf	218,b	;volatile
  7988   0022C4                     
  7989                           ; BSR set to: 14
  7990                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7991   0022C4  89DA               	bsf	218,4,b	;volatile
  7992   0022C6                     
  7993                           ; BSR set to: 14
  7994                           ;i2c.c: 61:   return tmp;
  7995   0022C6  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7996   0022C8                     
  7997                           ; BSR set to: 14
  7998   0022C8  0012               	return		;funcret
  7999   0022CA                     __end_ofi2_I2C_2_Master_Read:
  8000                           	callstack 0
  8001                           
  8002 ;; *************** function i2_I2C_2_Master_Idle *****************
  8003 ;; Defined at:
  8004 ;;		line 22 in file "i2c.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;		None
  8007 ;; Auto vars:     Size  Location     Type
  8008 ;;		None
  8009 ;; Return value:  Size  Location     Type
  8010 ;;                  1    wreg      void 
  8011 ;; Registers used:
  8012 ;;		wreg, status,2, status,0
  8013 ;; Tracked objects:
  8014 ;;		On entry : 0/0
  8015 ;;		On exit  : 0/0
  8016 ;;		Unchanged: 0/0
  8017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8020 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8021 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8022 ;;Total ram usage:        1 bytes
  8023 ;; Hardware stack levels used: 1
  8024 ;; This function calls:
  8025 ;;		Nothing
  8026 ;; This function is called by:
  8027 ;;		i2_I2C_2_Master_Start
  8028 ;;		i2_I2C_2_Master_RepStart
  8029 ;;		i2_I2C_2_Master_Stop
  8030 ;;		i2_I2C_2_Master_Write
  8031 ;;		i2_I2C_2_Master_Read
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text50
  8036   00234C                     __ptext50:
  8037                           	callstack 0
  8038   00234C                     i2_I2C_2_Master_Idle:
  8039                           	callstack 21
  8040   00234C                     i2l386:
  8041   00234C  010E               	movlb	14	; () banked
  8042   00234E  B5D8               	btfsc	216,2,b	;volatile
  8043   002350  EFAC  F011         	goto	i2u156_41
  8044   002354  EFAE  F011         	goto	i2u156_40
  8045   002358                     i2u156_41:
  8046   002358  EFA6  F011         	goto	i2l386
  8047   00235C                     i2u156_40:
  8048   00235C                     
  8049                           ; BSR set to: 14
  8050   00235C  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  8051   002360  0E1F               	movlw	31
  8052   002362  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  8053   002364  A4D8               	btfss	status,2,c
  8054   002366  EFB7  F011         	goto	i2u157_41
  8055   00236A  EFB9  F011         	goto	i2u157_40
  8056   00236E                     i2u157_41:
  8057   00236E  EFA6  F011         	goto	i2l386
  8058   002372                     i2u157_40:
  8059   002372                     
  8060                           ; BSR set to: 14
  8061   002372  0012               	return		;funcret
  8062   002374                     __end_ofi2_I2C_2_Master_Idle:
  8063                           	callstack 0
  8064                           
  8065 ;; *************** function _increment_seconds *****************
  8066 ;; Defined at:
  8067 ;;		line 257 in file "dc_motor.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		status,2, status,0
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used: 1
  8087 ;; This function calls:
  8088 ;;		Nothing
  8089 ;; This function is called by:
  8090 ;;		_HighISR
  8091 ;; This function uses a non-reentrant model
  8092 ;;
  8093                           
  8094                           	psect	text51
  8095   00246A                     __ptext51:
  8096                           	callstack 0
  8097   00246A                     _increment_seconds:
  8098                           	callstack 24
  8099   00246A                     
  8100                           ;dc_motor.c: 259:     seconds += 1;
  8101   00246A  4A49               	infsnz	_seconds^0,f,c
  8102   00246C  2A4A               	incf	(_seconds+1)^0,f,c
  8103   00246E  0012               	return		;funcret
  8104   002470                     __end_of_increment_seconds:
  8105                           	callstack 0
  8106   000000                     
  8107                           	psect	rparam
  8108   000000                     
  8109                           	psect	temp
  8110   00004F                     btemp:
  8111                           	callstack 0
  8112   00004F                     	ds	1
  8113   000000                     int$flags	set	btemp
  8114   000000                     wtemp8	set	btemp+1
  8115   000000                     ttemp5	set	btemp+1
  8116   000000                     ttemp6	set	btemp+4
  8117   000000                     ttemp7	set	btemp+8
  8118                           
  8119                           	psect	idloc
  8120                           
  8121                           ;Config register IDLOC0 @ 0x200000
  8122                           ;	unspecified, using default values
  8123   200000                     	org	2097152
  8124   200000  0FFF               	dw	4095
  8125                           
  8126                           ;Config register IDLOC1 @ 0x200002
  8127                           ;	unspecified, using default values
  8128   200002                     	org	2097154
  8129   200002  0FFF               	dw	4095
  8130                           
  8131                           ;Config register IDLOC2 @ 0x200004
  8132                           ;	unspecified, using default values
  8133   200004                     	org	2097156
  8134   200004  0FFF               	dw	4095
  8135                           
  8136                           ;Config register IDLOC3 @ 0x200006
  8137                           ;	unspecified, using default values
  8138   200006                     	org	2097158
  8139   200006  0FFF               	dw	4095
  8140                           
  8141                           ;Config register IDLOC4 @ 0x200008
  8142                           ;	unspecified, using default values
  8143   200008                     	org	2097160
  8144   200008  0FFF               	dw	4095
  8145                           
  8146                           ;Config register IDLOC5 @ 0x20000A
  8147                           ;	unspecified, using default values
  8148   20000A                     	org	2097162
  8149   20000A  0FFF               	dw	4095
  8150                           
  8151                           ;Config register IDLOC6 @ 0x20000C
  8152                           ;	unspecified, using default values
  8153   20000C                     	org	2097164
  8154   20000C  0FFF               	dw	4095
  8155                           
  8156                           ;Config register IDLOC7 @ 0x20000E
  8157                           ;	unspecified, using default values
  8158   20000E                     	org	2097166
  8159   20000E  0FFF               	dw	4095
  8160                           
  8161                           	psect	config
  8162                           
  8163                           ;Config register CONFIG1L @ 0x300000
  8164                           ;	External Oscillator mode Selection bits
  8165                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  8166                           ;	Power-up default value for COSC bits
  8167                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  8168   300000                     	org	3145728
  8169   300000  AA                 	db	170
  8170                           
  8171                           ;Config register CONFIG1H @ 0x300001
  8172                           ;	unspecified, using default values
  8173                           ;	Clock Out Enable bit
  8174                           ;	CLKOUTEN = 0x1, unprogrammed default
  8175                           ;	Clock Switch Enable bit
  8176                           ;	CSWEN = 0x1, unprogrammed default
  8177                           ;	Fail-Safe Clock Monitor Enable bit
  8178                           ;	FCMEN = 0x1, unprogrammed default
  8179   300001                     	org	3145729
  8180   300001  FF                 	db	255
  8181                           
  8182                           ;Config register CONFIG2L @ 0x300002
  8183                           ;	unspecified, using default values
  8184                           ;	Master Clear Enable bit
  8185                           ;	MCLRE = 0x1, unprogrammed default
  8186                           ;	Power-up Timer Enable bit
  8187                           ;	PWRTE = 0x1, unprogrammed default
  8188                           ;	Low-power BOR enable bit
  8189                           ;	LPBOREN = 0x1, unprogrammed default
  8190                           ;	Brown-out Reset Enable bits
  8191                           ;	BOREN = 0x3, unprogrammed default
  8192   300002                     	org	3145730
  8193   300002  FF                 	db	255
  8194                           
  8195                           ;Config register CONFIG2H @ 0x300003
  8196                           ;	unspecified, using default values
  8197                           ;	Brown Out Reset Voltage selection bits
  8198                           ;	BORV = 0x3, unprogrammed default
  8199                           ;	ZCD Disable bit
  8200                           ;	ZCD = 0x1, unprogrammed default
  8201                           ;	PPSLOCK bit One-Way Set Enable bit
  8202                           ;	PPS1WAY = 0x1, unprogrammed default
  8203                           ;	Stack Full/Underflow Reset Enable bit
  8204                           ;	STVREN = 0x1, unprogrammed default
  8205                           ;	Debugger Enable bit
  8206                           ;	DEBUG = 0x1, unprogrammed default
  8207                           ;	Extended Instruction Set Enable bit
  8208                           ;	XINST = 0x1, unprogrammed default
  8209   300003                     	org	3145731
  8210   300003  FF                 	db	255
  8211                           
  8212                           ;Config register CONFIG3L @ 0x300004
  8213                           ;	WDT Period Select bits
  8214                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  8215                           ;	WDT operating mode
  8216                           ;	WDTE = OFF, WDT Disabled
  8217   300004                     	org	3145732
  8218   300004  9F                 	db	159
  8219                           
  8220                           ;Config register CONFIG3H @ 0x300005
  8221                           ;	unspecified, using default values
  8222                           ;	WDT Window Select bits
  8223                           ;	WDTCWS = 0x7, unprogrammed default
  8224                           ;	WDT input clock selector
  8225                           ;	WDTCCS = 0x7, unprogrammed default
  8226   300005                     	org	3145733
  8227   300005  FF                 	db	255
  8228                           
  8229                           ;Config register CONFIG4L @ 0x300006
  8230                           ;	unspecified, using default values
  8231                           ;	Write Protection Block 0
  8232                           ;	WRT0 = 0x1, unprogrammed default
  8233                           ;	Write Protection Block 1
  8234                           ;	WRT1 = 0x1, unprogrammed default
  8235                           ;	Write Protection Block 2
  8236                           ;	WRT2 = 0x1, unprogrammed default
  8237                           ;	Write Protection Block 3
  8238                           ;	WRT3 = 0x1, unprogrammed default
  8239                           ;	Write Protection Block 3
  8240                           ;	WRT4 = 0x1, unprogrammed default
  8241                           ;	Write Protection Block 3
  8242                           ;	WRT5 = 0x1, unprogrammed default
  8243                           ;	Write Protection Block 3
  8244                           ;	WRT6 = 0x1, unprogrammed default
  8245                           ;	Write Protection Block 3
  8246                           ;	WRT7 = 0x1, unprogrammed default
  8247   300006                     	org	3145734
  8248   300006  FF                 	db	255
  8249                           
  8250                           ;Config register CONFIG4H @ 0x300007
  8251                           ;	unspecified, using default values
  8252                           ;	Configuration Register Write Protection bit
  8253                           ;	WRTC = 0x1, unprogrammed default
  8254                           ;	Boot Block Write Protection bit
  8255                           ;	WRTB = 0x1, unprogrammed default
  8256                           ;	Data EEPROM Write Protection bit
  8257                           ;	WRTD = 0x1, unprogrammed default
  8258                           ;	Scanner Enable bit
  8259                           ;	SCANE = 0x1, unprogrammed default
  8260                           ;	Low Voltage Programming Enable bit
  8261                           ;	LVP = 0x1, unprogrammed default
  8262   300007                     	org	3145735
  8263   300007  FF                 	db	255
  8264                           
  8265                           ;Config register CONFIG5L @ 0x300008
  8266                           ;	unspecified, using default values
  8267                           ;	UserNVM Program Memory Code Protection bit
  8268                           ;	CP = 0x1, unprogrammed default
  8269                           ;	DataNVM Memory Code Protection bit
  8270                           ;	CPD = 0x1, unprogrammed default
  8271   300008                     	org	3145736
  8272   300008  FF                 	db	255
  8273                           
  8274                           ;Config register CONFIG5H @ 0x300009
  8275                           ;	unspecified, using default values
  8276   300009                     	org	3145737
  8277   300009  FF                 	db	255
  8278                           
  8279                           ;Config register CONFIG6L @ 0x30000A
  8280                           ;	unspecified, using default values
  8281                           ;	Table Read Protection Block 0
  8282                           ;	EBTR0 = 0x1, unprogrammed default
  8283                           ;	Table Read Protection Block 1
  8284                           ;	EBTR1 = 0x1, unprogrammed default
  8285                           ;	Table Read Protection Block 2
  8286                           ;	EBTR2 = 0x1, unprogrammed default
  8287                           ;	Table Read Protection Block 3
  8288                           ;	EBTR3 = 0x1, unprogrammed default
  8289                           ;	Table Read Protection Block 4
  8290                           ;	EBTR4 = 0x1, unprogrammed default
  8291                           ;	Table Read Protection Block 5
  8292                           ;	EBTR5 = 0x1, unprogrammed default
  8293                           ;	Table Read Protection Block 6
  8294                           ;	EBTR6 = 0x1, unprogrammed default
  8295                           ;	Table Read Protection Block 7
  8296                           ;	EBTR7 = 0x1, unprogrammed default
  8297   30000A                     	org	3145738
  8298   30000A  FF                 	db	255
  8299                           
  8300                           ;Config register CONFIG6H @ 0x30000B
  8301                           ;	unspecified, using default values
  8302                           ;	Boot Block Table Read Protection bit
  8303                           ;	EBTRB = 0x1, unprogrammed default
  8304   30000B                     	org	3145739
  8305   30000B  FF                 	db	255
  8306                           tosu	equ	0xFFF
  8307                           tosh	equ	0xFFE
  8308                           tosl	equ	0xFFD
  8309                           stkptr	equ	0xFFC
  8310                           pclatu	equ	0xFFB
  8311                           pclath	equ	0xFFA
  8312                           pcl	equ	0xFF9
  8313                           tblptru	equ	0xFF8
  8314                           tblptrh	equ	0xFF7
  8315                           tblptrl	equ	0xFF6
  8316                           tablat	equ	0xFF5
  8317                           prodh	equ	0xFF4
  8318                           prodl	equ	0xFF3
  8319                           indf0	equ	0xFEF
  8320                           postinc0	equ	0xFEE
  8321                           postdec0	equ	0xFED
  8322                           preinc0	equ	0xFEC
  8323                           plusw0	equ	0xFEB
  8324                           fsr0h	equ	0xFEA
  8325                           fsr0l	equ	0xFE9
  8326                           wreg	equ	0xFE8
  8327                           indf1	equ	0xFE7
  8328                           postinc1	equ	0xFE6
  8329                           postdec1	equ	0xFE5
  8330                           preinc1	equ	0xFE4
  8331                           plusw1	equ	0xFE3
  8332                           fsr1h	equ	0xFE2
  8333                           fsr1l	equ	0xFE1
  8334                           bsr	equ	0xFE0
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           preinc2	equ	0xFDC
  8339                           plusw2	equ	0xFDB
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        132
    BSS         348
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      78
    BANK0           160     62     152
    BANK1           256     22     190
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1020DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1020DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnLeftLong
    _return_back->_turnRight
    _return_back->_turnRightLong
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  123410
                                             54 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
            _set_wall_detection_mode
                               _stop
 ---------------------------------------------------------------------------------
 (1) _set_wall_detection_mode                              2     0      2     391
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43939
                                             42 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             19 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8109
                                             47 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             19 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             25 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             32 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5380
                                             34 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             15 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1955
                                             24 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3062
                                             26 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1463
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             14 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             14 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44816
                                             42 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                       10     6      4    5941
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                        10     6      4    5944
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             32 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6448
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             26 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             19 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     427
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   2     0      2     427
                                             11 COMRAM     2     0      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     118
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _set_wall_detection_mode
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      BE       7       74.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4E       1       83.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26C      60        0.0%
DATA                 0      0     26C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 15 11:05:48 2022

                 _color_read_Red 1F54               RobotMovement@color 002B  
                _color_read_Blue 2044                               l80 1876  
                             l73 23F2                               l82 18AC  
                             l91 23B8                               l83 188C  
                             l76 185A                               l94 1FA2  
                             l86 189E                               l97 2092  
            ___wmul@multiplicand 0010                 _color_read_Clear 1FF4  
               ?_calibrate_black 0001                 _color_read_Green 1FA4  
            RobotMovement@motorL 002D              RobotMovement@motorR 002F  
              ??_Interrupts_init 000E                              l100 1FF2  
                            l103 2042                              l121 21D2  
                            l122 21D4                              l123 21E8  
                            l124 21EA                              l125 21FE  
                            l150 19E4                              l118 10B4  
                            l127 2200                              l240 1220  
                            l401 240A                              l153 1A8E  
                            l145 0AA2                              l233 1C5C  
                            l243 212C                              l331 070C  
                            l147 0AAA                              l252 14D4  
                            l404 2286                              l261 1774  
                            l309 03A4                              l341 0D54  
                            l270 137A                              l502 23D8  
                            l334 242C                              l423 2416  
                            l319 05B8                              l159 1EF8  
                            l505 2398                              l338 21BC  
                            l282 1F52                              l532 1B22  
                            l516 1E84                              l356 0D8A  
                            l348 0D3A                              l517 1E94  
                            l294 1CD0                              l279 1624  
                            l383 2322                              l288 1D44  
                            l392 2440                              l386 2324  
                            l395 244A                              l539 1B32  
                            l389 234A                              l398 2436  
                            l996 1DB0                              _RGB 00E6  
               ?_calibrate_white 0001                              wreg 000FE8  
                           l1003 1DB8                             l4000 14D6  
                           l4020 152A                             l4012 14E6  
                           l4100 1ACA                             l4022 1536  
                           l4014 1506                             l4006 14DE  
                           l4110 1B12                             l4102 1AD8  
                           l4040 15B2                             l4024 154E  
                           l4016 1512                             l4120 177A  
                           l4112 1B1C                             l4104 1AE2  
                           l4200 0902                             l4050 1604  
                           l4042 15BE                             l4034 157A  
                           l4026 1556                             l4018 151E  
                           l4130 17AA                             l4122 1784  
                           l4106 1B00                             l4210 09C0  
                           l4202 0912                             l4114 23DA  
                           l4060 1D0A                             l4052 1608  
                           l4044 15CA                             l4036 159A  
                           l4028 1572                             l4300 0172  
                           l4140 17E4                             l4132 17AC  
                           l4124 1794                             l4108 1B10  
                           l4220 0A02                             l4212 09F0  
                           l4204 0932                             l4116 23E2  
                           l4062 1D16                             l4054 1CD2  
                           l4070 1C6A                             l4046 15E0  
                           l4038 15A6                             l4310 01A8  
                           l4150 183E                             l4142 17F6  
                           l4134 17AE                             l4126 179E  
                           l4118 1776                             l4230 0A8C  
                           l4222 0A30                             l4214 09FA  
                           l4206 0946                             l4064 1D22  
                           l4056 1CDE                             l4072 1C8A  
                           l4080 1CBA                             l4048 15E8  
                           l4400 069C                             l4320 0224  
                           l4312 01AC                             l4160 1868  
                           l4152 1850                             l4144 1808  
                           l4136 17C0                             l4128 17A8  
                           l4224 0A60                             l4208 09B0  
                           l4240 1EC6                             l4232 1E96  
                           l4058 1CFE                             l4066 1D2E  
                           l4074 1C96                             l4410 06F0  
                           l4402 06B0                             l4330 02D6  
                           l4322 0256                             l4314 01B0  
                           l4306 017A                             l4154 1852  
                           l4146 181A                             l4138 17D2  
                           l4090 1E64                             l4082 1E2C  
                           l4226 0A78                             l4170 071A  
                           l4234 1EA8                             l4250 1C2C  
                           l4076 1CA2                             l4068 1C5E  
                           l4404 06B4                             l4340 038A  
                           l4332 02FE                             l4324 028A  
                           l4308 018E                             l4316 01CC  
                           l4164 1888                             l4156 1856  
                           l4148 182C                             l4092 1A90  
                           l4084 1E3C                             l4228 0A88  
                           l4180 0782                             l4172 0730  
                           l4412 2424                             l4236 1EBA  
                           l4260 1C4E                             l4252 1C36  
                           l4244 1BCE                             l4420 0AAC  
                           l4500 0DC8                             l4078 1CAE  
                           l4406 06D0                             l4350 0438  
                           l4342 03BE                             l4334 031C  
                           l4326 0292                             l4318 01E0  
                           l4414 2176                             l3702 2044  
                           l3710 1FEA                             l4166 189A  
                           l4158 1858                             l4270 1F12  
                           l4094 1AA0                             l4086 1E4A  
                           l4190 07EA                             l4182 0798  
                           l4174 0742                             l4262 1C50  
                           l4254 1C38                             l4246 1BDE  
                           l4430 0B2E                             l4422 0AB0  
                           l4510 0DE4                             l4502 0DD0  
                           l4408 06DA                             l4360 04EA  
                           l4352 046A                             l4344 03C2  
                           l4336 0344                             l4328 02B8  
                           l4280 00A6                             l4416 2192  
                           l3640 243C                             l3704 208A  
                           l3720 21BE                             l3800 1994  
                           l4272 1F22                             l4096 1AB6  
                           l4088 1E5A                             l4192 0854  
                           l4184 07AA                             l4176 074E  
                           l4168 070E                             l4264 1C5A  
                           l4256 1C42                             l4248 1C08  
                           l4440 0BDE                             l4432 0B56  
                           l4424 0AD6                             l4520 0E2C  
                           l4512 0DEC                             l4504 0DD4  
                           l3730 10D2                             l4370 059E  
                           l4362 0512                             l4354 049E  
                           l4338 0362                             l4346 03E0  
                           l4290 011A                             l4282 00D6  
                           l4418 21B8                             l3634 2324  
                           l3650 2442                             l3642 2402  
                           l3714 1FF4                             l3722 21CC  
                           l3802 19AC                             l4274 1F2E  
                           l4266 1EFA                             l4098 1ABE  
                           l3810 0F82                             l4194 0864  
                           l4186 07B6                             l4178 0776  
                           l4258 1C44                             l4442 0C0E  
                           l4450 0C90                             l4434 0B6E  
                           l4426 0AEE                             l4530 0E72  
                           l4522 0E38                             l4514 0DF4  
                           l4506 0DD8                             l3740 119C  
                           l3732 1126                             l4380 061C  
                           l4372 05D2                             l4364 0530  
                           l4356 04A6                             l4348 03F4  
                           l4292 012C                             l4284 00E8  
                           l3636 2334                             l3660 225C  
                           l3652 2446                             l3644 2406  
                           l3716 203A                             l3708 1FA4  
                           l3724 21E2                             l3804 19C8  
                           l4276 1F3A                             l4268 1F02  
                           l3820 101C                             l3812 0F9C  
                           l4196 0884                             l4188 07D6  
                           l4460 0D4E                             l4452 0CC0  
                           l4444 0C3C                             l4436 0B96  
                           l4428 0B16                             l4540 0EDE  
                           l4532 0E86                             l4524 0E4E  
                           l4516 0E0C                             l4508 0DDC  
                           l3670 2390                             l3742 11E0  
                           l3734 113A                             l3830 20E4  
                           l3910 166E                             l4390 067C  
                           l4382 0636                             l4374 05D6  
                           l4366 0558                             l4358 04CC  
                           l4294 0140                             l4286 00FC  
                           l4470 23C2                             l3750 230C  
                           l3662 2282                             l3654 2248  
                           l3638 2438                             l3646 242E  
                           l3726 21F8                             l4278 1F46  
                           l3822 1038                             l3814 0FC2  
                           l3806 0F46                             l4198 0898  
                           l4462 0D6E                             l4454 0CF0  
                           l4446 0C54                             l4438 0BAE  
                           l4534 0E92                             l4526 0E62  
                           l4518 0E20                             l3680 1D68  
                           l3736 113E                             l3728 10B6  
                           l3832 20FC                             l3920 16C2  
                           l3912 167A                             l3904 1636  
                           l4392 0680                             l4384 063A  
                           l4368 0576                             l4376 05F4  
                           l4296 015A                             l4288 0116  
                           l4472 23D4                             l3752 230E  
                           l3744 22FA                             l3664 2284  
                           l3656 224C                             l3648 2432  
                           l3760 19F2                             l3824 1050  
                           l3816 0FDE                             l3808 0F64  
                           l4464 0D80                             l4456 0D1E  
                           l4448 0C70                             l4536 0EAE  
                           l4528 0E6E                             l4544 0F0A  
                           l4480 0D94                             l4466 240C  
                           l3690 1DA2                             l3682 1D70  
                           l3674 1D46                             l3738 1180  
                           l3834 2108                             l3850 1394  
                           l3930 16F6                             l3914 1686  
                           l3906 1656                             l4394 0694  
                           l4386 064E                             l4378 0608  
                           l4298 015E                             l4474 23D6  
                           l3754 2310                             l3746 2304  
                           l3658 2254                             l3770 1A5A  
                           l3762 1A08                             l3826 1058  
                           l3818 0FF6                             l4458 0D3A  
                           l4546 0F1E                             l4538 0ECA  
                           l4490 0DAA                             l4482 0D98  
                           l3692 1DA4                             l3684 1D7E  
                           l3676 1D4E                             l3668 2374  
                           l3836 2114                             l3860 13E4  
                           l3852 13B4                             l3844 138C  
                           l3940 1738                             l3932 1702  
                           l3916 169E                             l3908 1662  
                           l4388 0662                             l4468 23BA  
                           l3748 230A                             l3780 18D0  
                           l3772 1A70                             l3764 1A1A  
                           l3756 239C                             l4548 0F2A  
                           l4492 0DB0                             l4484 0DA4  
                           l4476 0D8C                             l3694 1DAA  
                           l3686 1D84                             l3678 1D60  
                           l3862 13FC                             l3854 13C0  
                           l3838 137C                             l3942 1754  
                           l3934 170E                             l3926 16CA  
                           l3918 16A6                             l3790 1934  
                           l3782 18E0                             l3774 1A82  
                           l3766 1A26                             l3758 19E6  
                           l4494 0DB4                             l4486 0DA4  
                           l4478 0D90                             l3688 1D9A  
                           l3880 146C                             l3872 1428  
                           l3864 1404                             l3856 13CC  
                           l3960 125A                             l3952 1232  
                           l3944 1758                             l3936 171A  
                           l3928 16EA                             l3696 1F54  
                           l3792 1944                             l3784 18EC  
                           l3776 18AE                             l3768 1A4E  
                           l4496 0DB8                             l4488 0DA8  
                           l3890 14B8                             l3882 1478  
                           l3874 1448                             l3866 1420  
                           l3858 13D8                             l3970 12A2  
                           l3962 1266                             l3946 1222  
                           l3938 1730                             l3698 1F9A  
                           l3794 1966                             l3786 1912  
                           l3778 18BA                             l4498 0DC0  
                           l3884 1490                             l3876 1454  
                           l3980 12CE                             l3972 12AA  
                           l3964 1272                             l3892 1626  
                           l3796 1972                             l3788 191E  
                           l3886 1498                             l3878 1460  
                           l3990 131E                             l3982 12EE  
                           l3974 12C6                             l3966 127E  
                           l3958 123A                             l3798 197E  
                           l3888 14B4                             l3992 1336  
                           l3984 12FA                             l3968 128A  
                           l3994 133E                             l3986 1306  
                           l3898 162E                             l3996 135A  
                           l3988 1312                             l3998 135E  
                           u3010 1D60                             u3011 1D5C  
                           u3020 1D7E                             u3100 0FC2  
                           u3021 1D7A                             u3101 0FBE  
                           u3030 1D9A                             u3110 101C  
                           u3031 1D96                             u3111 1018  
                           u3120 1420                             u3200 137A  
                           u3008 2272                             u3040 21CC  
                           u3121 141C                             u3201 1376  
                           u3041 21C8                             u3130 14B4  
                           u3210 1572                             u3050 21E2  
                           u3131 14B0                             u3211 156E  
                           u3051 21DE                             u3140 14D4  
                           u3220 1604                             u3060 21F8  
                           u3300 1B00                             u3141 14D0  
                           u3221 1600                             u3061 21F4  
                           u3301 1AFC                             u3070 10D2  
                           u3150 16C2                             u3230 1624  
                           u3071 10CE                             u3151 16BE  
                           u3231 1620                             u3311 17B8  
                           u3080 119C                             u3240 1D44  
                           u3160 1754                             u3400 1868  
                           u3081 1198                             u3241 1D40  
                           u3161 1750                             u3401 1864  
                           u3321 17CA                             u3250 1CD0  
                           u3170 1774                             u3410 1876  
                           u3090 0F64                             _T2PR 000FBC  
                     _Black_rule 016C                             u3251 1CCC  
                           u3171 1770                             u3411 1872  
                           u3331 17DC                             u3091 0F60  
                           u3180 12C6                             u3420 1884  
                           u3260 1E4A                             u3181 12C2  
                           u3421 1880                             u3341 17EE  
                           u3261 1E46                             u3501 0A28  
                           u3190 135A                             u3430 189A  
                           u3270 1E84                             u3191 1356  
                           u3431 1896                             u3351 1800  
                           u3271 1E80                             u3511 0A3A  
                           u3600 012C                             u3440 18AC  
                           u3280 1AB6                             u3601 0128  
                           u3441 18A8                             u3361 1812  
                           u3281 1AB2                             u3521 0A4C  
                           u3610 0172                             u3290 1AD8  
                           u3530 0A78                             u3450 07D6  
                           u3611 016E                             u3371 1824  
                           u3291 1AD4                             u3531 0A74  
                           u3451 07D2                             u3700 046A  
                           u3620 01CC                             u3540 0AA2  
                           u3460 0884                             u3701 0466  
                           u3621 01C8                             u3381 1836  
                           u3541 0A9E                             u3461 0880  
                           u4317 0DFE                             u3710 04CC  
                           u3630 01E0                             u3470 0932  
                           u3550 1EA8                             u3711 04C8  
                           u3631 01DC                             u4407 1A64  
                           u3391 1848                             u3471 092E  
                           u3551 1EA4                             u4327 0C46  
                           u3720 0512                             u3640 0256  
                           u3800 2192                             u3560 1EBA  
                           u3721 050E                             u3641 0252  
                           u3801 218E                             u4417 18C4  
                           u3481 09CA                             u3561 1EB6  
                           u4337 0D28                             u3730 0558  
                           u3650 02B8                             u3570 1EF2  
                           u3810 0AD6                             u4507 1294  
                           u3731 0554                             u3651 02B4  
                           u4427 18F6                             u3491 09DC  
                           u4347 0724                             u3571 1EEC  
                           u3811 0AD2                             u3740 059E  
                           u3660 02FE                             u3580 1EF4  
                           u3900 0D80                             u3820 0B16  
                           u4517 1328                             u3741 059A  
                           u3661 02FA                             u4437 1928  
                           u4357 0758                             u3901 0D7C  
                           u3821 0B12                             u3750 0608  
                           u3670 0344                             u3590 00E8  
                           u3830 0B56                             u3910 0E4E  
                           u4527 13EE                             u3751 0604  
                           u3671 0340                             u3591 00E4  
                           u4447 195A                             u4367 078C  
                           u3831 0B52                             u3911 0E4A  
                           u3760 064E                             u3680 038A  
                           u3840 0B96                             u3920 0E62  
                           u4537 1482                             u3761 064A  
                           u3681 0386                             u4457 1988  
                           u4377 178A                             u3841 0B92  
                           u3921 0E5E                             u3770 0694  
                           u3690 03F4                             u2970 2334  
                           u3850 0BDE                             u3930 0EDE  
                           u4547 211E                             u4467 1540  
                           u3771 0690                             u3691 03F0  
                           u2971 2330                             u4387 19FC  
                           u3851 0BDA                             u3931 0EDA  
                           u3780 06D0                             u2980 234A  
                           u3860 0C0E                             u3940 0F1E  
                           u4477 15D4                             u3781 06CC  
                           u2981 2346                             u4397 1A30  
                           u3861 0C0A                             u3941 0F1A  
                           u3790 06F0                             u2990 2270  
                           u3870 0CC0                             u4487 1690  
                           u3791 06EC                             u2991 2268  
                           u3871 0CBC                             u3880 0CF0  
                           u4497 1724                             u3881 0CEC  
                           u3890 0D6E                             u3891 0D6A  
                           _main 0D8C                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004F  
                           _stop 20E4                             prodh 000FF4  
                           prodl 000FF3                             start 00A2  
         __end_of_color_read_Red 1FA4                  __end_of_HighISR 00A2  
                   ___param_bank 000000       __end_ofi2_color_read_Clear 20E4  
             _get_color_code$463 00C6               _get_color_code$464 00CA  
             _get_color_code$465 00CE                            ?_main 0001  
                __end_of___lldiv 1B34                            ?_stop 0021  
            _add_seconds_to_list 2176                      _Black_setup 0039  
                __end_of___lwdiv 1DBA                            i2l103 20E2  
                          i2l121 2216                            i2l122 2218  
                          i2l123 222C                            i2l124 222E  
                          i2l125 2242                            i2l127 2244  
                          i2l401 2422                            i2l163 1E2A  
                          i2l404 22C8                            i2l437 009E  
                          i2l392 245E                            i2l297 246E  
                          i2l386 234C                            i2l395 2468  
                          i2l389 2372                            i2l398 2454  
                          _TMR0H 000FD4                            _TMR0L 000FD3  
            ___lmul@multiplicand 0012       __end_of_I2C_2_Master_Start 2442  
     __end_of_I2C_2_Master_Write 240C               _get_color_distance 0F46  
                          _index 0047                            _state 00F4  
                          tablat 000FF5                            plusw0 000FEB  
                          plusw1 000FE3                            plusw2 000FDB  
            ?_get_color_distance 0014                            ttemp5 0050  
                          ttemp6 0053                            ttemp7 0057  
                          status 000FD8                            wtemp8 0050  
           ?_add_seconds_to_list 0001                       _Green_rule 0084  
        __end_of_color_read_Blue 2094            _I2C_2_Master_RepStart 2442  
                ?_color_read_Red 0012                  __initialization 1B34  
                   __end_of_main 0F46                  i2_set_led_color 2202  
                   __end_of_stop 212E                     _turnLeftLong 1222  
           i2set_led_color@color 0001             ??_get_color_distance 002C  
                         ??_main 0037                           ??_stop 0025  
                  __activetblptr 000000              _get_color_code$2462 00BA  
                   ?_setMotorPWM 001B                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           _RE2PPS 000E74  
                         _RD5PPS 000E6F                           _RC7PPS 000E69  
                         _RD6PPS 000E70                           _RE4PPS 000E76  
                         i2l3116 246A                           i2l3070 1DE4  
                         i2l2520 2456                           i2l3072 1DF0  
                         i2l3064 1DBA                           i2l3320 0038  
                         i2l2522 245A                           i2l2530 2450  
                         i2l3074 1E00                           i2l3330 007E  
                         i2l3322 003C                           i2l3314 000A  
                         i2l2540 2296                           i2l2524 2460  
                         i2l2532 241A                           i2l3076 1E12  
                         i2l3068 1DD2                           i2l3332 008A  
                         i2l3324 0046                           i2l3316 001A  
                         i2l2470 235C                           i2l2542 229E  
                         i2l2526 2464                           i2l2534 241E  
                         i2l3078 1E1E                           i2l3334 0092  
                         i2l3326 005A                           i2l3318 0024  
                         i2l2544 22C4                           i2l2536 228A  
                         i2l2528 244C                           i2l3336 0096  
                         i2l3328 006A                           i2l2546 22C6  
                         i2l2538 228E                           i2l3338 009A  
                         i2l2468 234C                           i2l2920 2094  
                         i2l2922 20DA                           i2l2930 2226  
                         i2l2932 223C                           i2l2926 2202  
                         i2l2928 2210                           _RG6PPS 000E88  
                      ??_HighISR 000E         __end_of_color_click_init 18AE  
          ??_add_seconds_to_list 000E                   RobotMovement@i 0033  
          __end_of_RobotMovement 070E                 ??_get_color_code 0032  
                  ??_Timer0_init 000E                     _CCPTMRS0bits 000FAD  
       ?_set_wall_detection_mode 000E                           ___lmul 1E2C  
       get_color_distance@color1 0014         get_color_distance@color2 0020  
                         ___wmul 2374                           _clear1 004D  
                         _clear2 004B                        ??___lldiv 0022  
                      ??___lwdiv 0018                      _Color_rules 0100  
                         clear_0 1B9A                           clear_1 1BA6  
                         clear_2 1BB2                           clear_3 1BBE  
                         isa$std 000001                 __end_of_moveBack 1CD2  
          calibrate_black@clear1 001D            calibrate_black@clear2 001F  
                   __pdataCOMRAM 0039                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                   ?_return_back 002B                   _Lightblue_rule 0184  
                     _White_rule 0178                           stop@mL 0021  
                         stop@mR 0023                ??_initDCmotorsPWM 0010  
               __end_of_turnLeft 14D6              _wall_detection_mode 00F6  
          __end_of_set_led_color 2202                       __accesstop 0060  
        __end_of__initialization 1BC4         __end_of_color_read_Clear 2044  
       __end_of_color_read_Green 1FF4           ?_I2C_2_Master_RepStart 0001  
        __end_ofi2_set_led_color 2246                    ___rparam_used 000001  
               ?_color_read_Blue 0012                  _Interrupts_init 240C  
                 __pcstackCOMRAM 0001                     __pidataBANK0 212E  
                   __pidataBANK1 22CA           i2I2C_2_Master_Read@ack 0003  
            __end_of_Timer0_init 23DA           i2I2C_2_Master_Read@tmp 0004  
                     __pbssBANK0 00E6                       __pbssBANK1 0100  
                     __pbssBANK2 0200          i2_I2C_2_Master_RepStart 2460  
                  _turnRightLong 14D6                _color_writetoaddr 239A  
                   _T2CLKCONbits 000FBF               ?_color_writetoaddr 0010  
                        ?___lmul 000E                          ?___wmul 000E  
                 main@color_code 01A8                       _blockahead 00A2  
                 ___lmul@product 0016                  get_color_code@i 00D8  
            ??_color_writetoaddr 0011            i2color_read_Clear@tmp 000A  
              return_back@motorL 002B                return_back@motorR 002D  
             i2_color_read_Clear 2094          get_color_code@min_index 00D4  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
        get_color_code@min_value 00D2                      _Orange_rule 0190  
        __end_of_Interrupts_init 2418           color_writetoaddr@value 0010  
               ??_color_read_Red 0014              ?i2_color_read_Clear 0005  
     __end_of_get_wall_detection 1EFA                          _HighISR 0008  
     __end_of_set_wall_detection 1E2C        __end_of_color_writetoaddr 23BA  
               ?i2_set_led_color 0001                   ?_turnRightLong 0021  
             _I2C_2_Master_Start 2438              i2_I2C_2_Master_Idle 234C  
             _I2C_2_Master_Write 2400                        ?_moveBack 0021  
            i2_I2C_2_Master_Read 2288                          __Hparam 0000  
            i2_I2C_2_Master_Stop 244C                          __Lparam 0000  
              color_read_Red@tmp 0017                      _Timer0_init 23BA  
              __end_of_get_state 242E                          ___lldiv 1A90  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 1D46  
            ?_I2C_2_Master_Write 0001                          __pcinit 1B34  
           ??i2_color_read_Clear 0007                          __ramtop 0E00  
                      ?_turnLeft 0021                          __ptext0 0D8C  
                        __ptext1 23DA                          __ptext2 0AAC  
                        __ptext3 1BCE                          __ptext4 1E96  
                        __ptext5 2424                          __ptext6 070E  
                        __ptext7 0F46                          __ptext8 1E2C  
                        __ptext9 1A90             ?i2_I2C_2_Master_Idle 0001  
                      _T2CONbits 000FBD             ?i2_I2C_2_Master_Read 0001  
           ?i2_I2C_2_Master_Stop 0001                          _seconds 0049  
                      _T2HLTbits 000FBE             ??_I2C_2_Master_Start 000F  
           ??_I2C_2_Master_Write 000F             end_of_initialization 1BC4  
      ??i2_I2C_2_Master_RepStart 0002                ?_color_click_init 0001  
                     ??_moveBack 0027                  ___lldiv@divisor 001E  
             ??_color_click_init 0023                  ___lldiv@counter 0026  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                    _White_setup 0060                  _initDCmotorsPWM 1BCE  
                     ??_turnLeft 0025                        _PORTFbits 000F8E  
             setMotorPWM@negDuty 0020            ??i2_I2C_2_Master_Idle 0001  
          ??i2_I2C_2_Master_Read 0002                __end_of_turnRight 1776  
          ??i2_I2C_2_Master_Stop 0002                      _Yellow_rule 006C  
                      _TRISAbits 000F81               setMotorPWM@posDuty 001F  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87             _calibrate_black$2463 0021  
    __end_of_add_seconds_to_list 21BE                 fullSpeedAhead@mL 0021  
               fullSpeedAhead@mR 0023         color_writetoaddr@address 0011  
     get_color_distance@B_offset 00B8          ??_I2C_2_Master_RepStart 000F  
               ?_Interrupts_init 0001                  ??_turnRightLong 0025  
                    _CCP1CONbits 000FAB       get_color_distance@G_offset 00B6  
              _increment_seconds 246A                ?_color_read_Clear 0012  
                    _CCP2CONbits 000FA7                ??_calibrate_black 001B  
              ?_color_read_Green 0012                      _CCP3CONbits 000F26  
                    _CCP4CONbits 000F22                       main@motorL 01AC  
                     main@motorR 01B5                ??_calibrate_white 0019  
             ?_increment_seconds 0001               ??_color_read_Clear 0014  
             ??_color_read_Green 0014                   _fullSpeedAhead 1EFA  
     get_color_distance@R_offset 00B4                        _Blue_rule 0078  
            ??_increment_seconds 0001                   __end_of___lmul 1E96  
                 __end_of___wmul 239A                    __pidataCOMRAM 23F4  
            color_read_Clear@tmp 0017              start_initialization 1B34  
            _TimedfullSpeedAhead 1CD2                 _incr_sec_counter 00F2  
      __end_of_increment_seconds 2470                        _Pink_rule 019C  
            color_read_Green@tmp 0017          __end_of_initDCmotorsPWM 1C5E  
           ?_TimedfullSpeedAhead 0021           __end_of_fullSpeedAhead 1F54  
                       ??___lmul 0016                         ??___wmul 0012  
                    __pdataBANK0 0060                      __pdataBANK1 0178  
  i2I2C_2_Master_Write@data_byte 0002     __end_ofi2_I2C_2_Master_Start 2460  
   __end_ofi2_I2C_2_Master_Write 2424           _get_color_distance$422 00A8  
         _get_color_distance$424 00AC           _get_color_distance$426 00B0  
                    __pbssCOMRAM 0045                    __pcstackBANK0 00A8  
                  __pcstackBANK1 01A8              get_color_code@value 00D6  
                       ?_HighISR 0001      set_wall_detection_mode@mode 000E  
                  _RobotMovement 00A6                 ___lwdiv@dividend 0014  
          ??_TimedfullSpeedAhead 0027                     ?_Timer0_init 0001  
                ?_fullSpeedAhead 0021                       moveBack@mL 0021  
                     moveBack@mR 0023                        __pintcode 0008  
                      _blockback 00A0                        _halfblock 009E  
                       ?___lldiv 001A                         ?___lwdiv 0014  
             _get_wall_detection 1E96               _set_wall_detection 1DBA  
                  ?_turnLeftLong 0021                     moveBack@time 0025  
                      _get_state 2424             I2C_2_Master_Read@ack 0010  
           I2C_2_Master_Read@tmp 0011          _set_wall_detection_mode 23DA  
          TimedfullSpeedAhead@mL 0021            TimedfullSpeedAhead@mR 0023  
            ?_get_wall_detection 0014              ?_set_wall_detection 000C  
    get_color_code@NormalizedRGB 00DA                _I2C_2_Master_Idle 2324  
              _I2C_2_Master_Init 22FA                _I2C_2_Master_Read 2246  
              _I2C_2_Master_Stop 242E               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 001D               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 0019         initDCmotorsPWM@PWMperiod 000E  
                turnRightLong@mL 0021                  turnRightLong@mR 0023  
                 turnLeftLong@mL 0021                   turnLeftLong@mR 0023  
            ??_I2C_2_Master_Idle 000E              ??_I2C_2_Master_Init 000E  
            ??_I2C_2_Master_Read 000F                   ___wmul@product 0012  
                       _LATAbits 000F79                    _set_led_color 21BE  
            ??_I2C_2_Master_Stop 000F                         _LATCbits 000F7B  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                       _LATGbits 000F7F             ??_get_wall_detection 0016  
                       _PIE0bits 000E29                   ?_RobotMovement 002B  
                       _PIE2bits 000E2B             ??_set_wall_detection 000E  
                       i2u220_40 1E12                         i2u220_41 1E0E  
                    turnRight@mL 0021                      turnRight@mR 0023  
                       i2u218_40 1DCE                         i2u218_41 1DCA  
                       i2u163_40 22B2                         i2u219_40 1DE4  
                       i2u163_41 22AA                         i2u219_41 1DE0  
                       i2u156_40 235C                         i2u156_41 2358  
                       i2u157_40 2372                         i2u164_48 22B4  
                       i2u253_40 001A                         i2u157_41 236E  
                       i2u253_41 0016                         i2u254_40 0038  
                       i2u254_41 0034                         i2u255_40 005A  
                       i2u255_41 0056                         _PIR0bits 000E33  
                       i2u256_40 007E                         i2u256_41 007A  
                       i2u187_40 2210                         i2u187_41 220C  
                       i2u188_40 2226                         i2u188_41 2222  
                       i2u189_40 223C                         i2u189_41 2238  
               ?_initDCmotorsPWM 000E                        _wall_coef 00A6  
                      _wait_time 00A4                         _SSP2CON2 000EDA  
                 ??_turnLeftLong 0025                         _SSP2STAT 000ED8  
             set_led_color@color 000E                       ?_get_state 000E  
      __end_of_I2C_2_Master_Idle 234C        __end_of_I2C_2_Master_Init 2324  
      __end_of_I2C_2_Master_Read 2288                ___wmul@multiplier 000E  
      __end_of_I2C_2_Master_Stop 2438                     setMotorPWM@m 001B  
    I2C_2_Master_Write@data_byte 000F                    _movement_list 0200  
                      main@state 01AA                ??_color_read_Blue 0014  
                  ??_return_back 002F                  _calibrate_black 18AE  
        TimedfullSpeedAhead@time 0025                        _turnRight 1626  
                _calibrate_white 19E6                ___lmul@multiplier 000E  
                      copy_data0 1B48                        copy_data1 1B68  
                      copy_data2 1B88                        _twothirds 009C  
                 ?_set_led_color 000E    __end_of_I2C_2_Master_RepStart 244C  
             color_read_Blue@tmp 0017              __end_of_setMotorPWM 1222  
                       _Red_rule 0090             i2_I2C_2_Master_Start 2456  
           i2_I2C_2_Master_Write 2418                         __Hrparam 0000  
                       __Lrparam 0000      __end_ofi2_I2C_2_Master_Idle 2374  
    __end_ofi2_I2C_2_Master_Read 22CA       __end_of_get_color_distance 10B6  
    __end_ofi2_I2C_2_Master_Stop 2456        ??_set_wall_detection_mode 0010  
                 _get_color_code 070E                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6         ?i2_I2C_2_Master_RepStart 0001  
                ___lwdiv@divisor 0016                  ___lwdiv@counter 0018  
                     ?_turnRight 0021                         __ptext10 1EFA  
                       __ptext11 1776                         __ptext20 2400  
                       __ptext12 239A                         __ptext21 242E  
                       __ptext13 19E6                         __ptext30 14D6  
                       __ptext22 2438                         __ptext14 18AE  
                       __ptext31 1626                         __ptext23 2442  
                       __ptext15 21BE                         __ptext40 240C  
                       __ptext32 1222                         __ptext24 2246  
                       __ptext16 1F54                         __ptext33 137C  
                       __ptext25 2324                         __ptext17 1FA4  
                       __ptext50 234C                         __ptext42 1DBA  
                       __ptext34 20E4                         __ptext26 22FA  
                       __ptext18 1FF4                         __ptext51 246A  
                       __ptext43 2202                         __ptext35 1C5E  
                       __ptext27 2176                         __ptext19 2044  
                       __ptext44 2094                         __ptext36 1CD2  
                       __ptext28 23BA                         __ptext45 2418  
                       __ptext37 10B6                         __ptext29 00A6  
                       __ptext46 244C                         __ptext38 2374  
                       __ptext47 2456                         __ptext39 1D46  
                       __ptext48 2460                         __ptext49 2288  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                ??_RobotMovement 0031              __end_of_return_back 0D8C  
                     turnLeft@mL 0021                       turnLeft@mR 0023  
          ?i2_I2C_2_Master_Start 0001                   turnRightLong@i 0029  
                 turnRightLong@k 0027            ?i2_I2C_2_Master_Write 0001  
                  turnLeftLong@i 0029                    turnLeftLong@k 0027  
          __end_of_turnRightLong 1626                         _moveBack 1C5E  
                     turnRight@i 0029                       turnRight@k 0027  
                       isa$xinst 000000                         int$flags 004F  
         __end_of_get_color_code 0AAC          __end_of_calibrate_black 19E6  
                       _turnLeft 137C                      ??_get_state 0010  
        __end_of_calibrate_white 1A90                       _INTCONbits 000FF2  
              ??i2_set_led_color 0003                      _setMotorPWM 10B6  
                ??_set_led_color 0010             __end_of_turnLeftLong 137C  
                       intlevel2 0000  __end_of_set_wall_detection_mode 23F4  
               ___lldiv@dividend 001A                 ??_fullSpeedAhead 0025  
                      turnLeft@i 0029                        turnLeft@k 0027  
                ?_get_color_code 0030                 _color_click_init 1776  
__end_ofi2_I2C_2_Master_RepStart 246A           _wall_detection_counter 0045  
                     _SSP2DATPPS 000E1D                 ___lldiv@quotient 0022  
                     _SSP2CLKPPS 000E1C           set_wall_detection@mode 000C  
                    _return_back 0AAC                      ??_turnRight 0025  
    __end_of_TimedfullSpeedAhead 1D46           ??i2_I2C_2_Master_Start 0002  
         ??i2_I2C_2_Master_Write 0002              RobotMovement@i_1276 0035  
