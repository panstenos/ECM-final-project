

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 18:20:34 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    61                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    62                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    63                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 06/04/2022 GMT
    67                           ; 
    68                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F67K40 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   001FA6                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _wait_time
   106   001FA6  00DC               	dw	220
   107                           
   108                           ;initializer for _wall_coef
   109   001FA8  000F               	dw	15
   110                           
   111                           	psect	idataBANK0
   112   001B7E                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _Black_setup
   116   001B7E  0404               	dw	1028
   117   001B80  0000               	dw	0
   118   001B82  024B               	dw	587
   119   001B84  0000               	dw	0
   120   001B86  00A1               	dw	161
   121   001B88  0000               	dw	0
   122                           
   123                           ;initializer for _White_setup
   124   001B8A  28FC               	dw	10492
   125   001B8C  0000               	dw	0
   126   001B8E  1B55               	dw	6997
   127   001B90  0000               	dw	0
   128   001B92  0770               	dw	1904
   129   001B94  0000               	dw	0
   130                           
   131                           ;initializer for _Orange_rule
   132   001B96  005C               	dw	92
   133   001B98  0000               	dw	0
   134   001B9A  0027               	dw	39
   135   001B9C  0000               	dw	0
   136   001B9E  001C               	dw	28
   137   001BA0  0000               	dw	0
   138                           
   139                           ;initializer for _Pink_rule
   140   001BA2  004D               	dw	77
   141   001BA4  0000               	dw	0
   142   001BA6  003C               	dw	60
   143   001BA8  0000               	dw	0
   144   001BAA  0040               	dw	64
   145   001BAC  0000               	dw	0
   146                           
   147                           ;initializer for _Yellow_rule
   148   001BAE  005D               	dw	93
   149   001BB0  0000               	dw	0
   150   001BB2  004C               	dw	76
   151   001BB4  0000               	dw	0
   152   001BB6  0014               	dw	20
   153   001BB8  0000               	dw	0
   154                           
   155                           ;initializer for _Blue_rule
   156   001BBA  0003               	dw	3
   157   001BBC  0000               	dw	0
   158   001BBE  0009               	dw	9
   159   001BC0  0000               	dw	0
   160   001BC2  0024               	dw	36
   161   001BC4  0000               	dw	0
   162                           
   163                           ;initializer for _Green_rule
   164   001BC6  0019               	dw	25
   165   001BC8  0000               	dw	0
   166   001BCA  0036               	dw	54
   167   001BCC  0000               	dw	0
   168   001BCE  0008               	dw	8
   169   001BD0  0000               	dw	0
   170                           
   171                           ;initializer for _Red_rule
   172   001BD2  0048               	dw	72
   173   001BD4  0000               	dw	0
   174   001BD6  0002               	dw	2
   175   001BD8  0000               	dw	0
   176   001BDA  0002               	dw	2
   177   001BDC  0000               	dw	0
   178                           
   179                           	psect	idataBANK1
   180   001F48                     __pidataBANK1:
   181                           	callstack 0
   182                           
   183                           ;initializer for _White_rule
   184   001F48  0064               	dw	100
   185   001F4A  0000               	dw	0
   186   001F4C  0064               	dw	100
   187   001F4E  0000               	dw	0
   188   001F50  0064               	dw	100
   189   001F52  0000               	dw	0
   190                           
   191                           ;initializer for _Lightblue_rule
   192   001F54  0026               	dw	38
   193   001F56  0000               	dw	0
   194   001F58  0048               	dw	72
   195   001F5A  0000               	dw	0
   196   001F5C  0054               	dw	84
   197   001F5E  0000               	dw	0
   198   000000                     _T0CON0bits	set	4053
   199   000000                     _T0CON1bits	set	4054
   200   000000                     _TRISDbits	set	3972
   201   000000                     _SSP2CON2bits	set	3802
   202   000000                     _SSP2CLKPPS	set	3612
   203   000000                     _SSP2DATPPS	set	3613
   204   000000                     _RC7PPS	set	3689
   205   000000                     _RE2PPS	set	3700
   206   000000                     _ANSELFbits	set	3764
   207   000000                     _TRISAbits	set	3969
   208   000000                     _TRISFbits	set	3974
   209   000000                     _PORTFbits	set	3982
   210   000000                     _TRISGbits	set	3975
   211   000000                     _TRISCbits	set	3971
   212   000000                     _TRISEbits	set	3973
   213   000000                     _SSP2BUF	set	3797
   214   000000                     _SSP2ADD	set	3798
   215   000000                     _SSP2CON1bits	set	3801
   216   000000                     _LATAbits	set	3961
   217   000000                     _LATGbits	set	3967
   218   000000                     _CCPR4H	set	3873
   219   000000                     _CCPR3H	set	3877
   220   000000                     _T2PR	set	4028
   221   000000                     _T2CONbits	set	4029
   222   000000                     _CCPR2H	set	4006
   223   000000                     _CCPR1H	set	4010
   224   000000                     _LATCbits	set	3963
   225   000000                     _LATEbits	set	3965
   226   000000                     _LATFbits	set	3966
   227   000000                     _RE4PPS	set	3702
   228   000000                     _RG6PPS	set	3720
   229   000000                     _RD5PPS	set	3695
   230   000000                     _ANSELDbits	set	3751
   231   000000                     _TMR0L	set	4051
   232   000000                     _TMR0H	set	4052
   233   000000                     _INTCONbits	set	4082
   234   000000                     _T2CLKCONbits	set	4031
   235   000000                     _T2HLTbits	set	4030
   236   000000                     _CCP1CONbits	set	4011
   237   000000                     _CCPTMRS0bits	set	4013
   238   000000                     _CCP2CONbits	set	4007
   239   000000                     _CCP3CONbits	set	3878
   240   000000                     _CCP4CONbits	set	3874
   241   000000                     _SSP2CON2	set	3802
   242   000000                     _SSP2STAT	set	3800
   243   000000                     _PIE0bits	set	3625
   244   000000                     _RD6PPS	set	3696
   245   000000                     _PIE2bits	set	3627
   246   000000                     _PIR0bits	set	3635
   247                           
   248                           ; #config settings
   249                           
   250                           	psect	cinit
   251   00188E                     __pcinit:
   252                           	callstack 0
   253   00188E                     start_initialization:
   254                           	callstack 0
   255   00188E                     __initialization:
   256                           	callstack 0
   257                           
   258                           ; Initialize objects allocated to BANK1 (24 bytes)
   259                           ; load TBLPTR registers with __pidataBANK1
   260   00188E  0E48               	movlw	low __pidataBANK1
   261   001890  6EF6               	movwf	tblptrl,c
   262   001892  0E1F               	movlw	high __pidataBANK1
   263   001894  6EF7               	movwf	tblptrh,c
   264   001896  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   265   001898  6EF8               	movwf	tblptru,c
   266   00189A  EE01  F078         	lfsr	0,__pdataBANK1
   267   00189E  EE10 F018          	lfsr	1,24
   268   0018A2                     copy_data0:
   269   0018A2  0009               	tblrd		*+
   270   0018A4  CFF5 FFEE          	movff	tablat,postinc0
   271   0018A8  50E5               	movf	postdec1,w,c
   272   0018AA  50E1               	movf	fsr1l,w,c
   273   0018AC  E1FA               	bnz	copy_data0
   274                           
   275                           ; Initialize objects allocated to BANK0 (96 bytes)
   276                           ; load TBLPTR registers with __pidataBANK0
   277   0018AE  0E7E               	movlw	low __pidataBANK0
   278   0018B0  6EF6               	movwf	tblptrl,c
   279   0018B2  0E1B               	movlw	high __pidataBANK0
   280   0018B4  6EF7               	movwf	tblptrh,c
   281   0018B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   282   0018B8  6EF8               	movwf	tblptru,c
   283   0018BA  EE00  F060         	lfsr	0,__pdataBANK0
   284   0018BE  EE10 F060          	lfsr	1,96
   285   0018C2                     copy_data1:
   286   0018C2  0009               	tblrd		*+
   287   0018C4  CFF5 FFEE          	movff	tablat,postinc0
   288   0018C8  50E5               	movf	postdec1,w,c
   289   0018CA  50E1               	movf	fsr1l,w,c
   290   0018CC  E1FA               	bnz	copy_data1
   291                           
   292                           ; Initialize objects allocated to COMRAM (4 bytes)
   293                           ; load TBLPTR registers with __pidataCOMRAM
   294   0018CE  0EA6               	movlw	low __pidataCOMRAM
   295   0018D0  6EF6               	movwf	tblptrl,c
   296   0018D2  0E1F               	movlw	high __pidataCOMRAM
   297   0018D4  6EF7               	movwf	tblptrh,c
   298   0018D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   299   0018D8  6EF8               	movwf	tblptru,c
   300   0018DA  EE00  F057         	lfsr	0,__pdataCOMRAM
   301   0018DE  EE10 F004          	lfsr	1,4
   302   0018E2                     copy_data2:
   303   0018E2  0009               	tblrd		*+
   304   0018E4  CFF5 FFEE          	movff	tablat,postinc0
   305   0018E8  50E5               	movf	postdec1,w,c
   306   0018EA  50E1               	movf	fsr1l,w,c
   307   0018EC  E1FA               	bnz	copy_data2
   308                           
   309                           ; Clear objects allocated to BANK2 (200 bytes)
   310   0018EE  EE02  F000         	lfsr	0,__pbssBANK2
   311   0018F2  0EC8               	movlw	200
   312   0018F4                     clear_0:
   313   0018F4  6AEE               	clrf	postinc0,c
   314   0018F6  06E8               	decf	wreg,f,c
   315   0018F8  E1FD               	bnz	clear_0
   316                           
   317                           ; Clear objects allocated to BANK1 (120 bytes)
   318   0018FA  EE01  F000         	lfsr	0,__pbssBANK1
   319   0018FE  0E78               	movlw	120
   320   001900                     clear_1:
   321   001900  6AEE               	clrf	postinc0,c
   322   001902  06E8               	decf	wreg,f,c
   323   001904  E1FD               	bnz	clear_1
   324                           
   325                           ; Clear objects allocated to BANK0 (12 bytes)
   326   001906  EE00  F0EC         	lfsr	0,__pbssBANK0
   327   00190A  0E0C               	movlw	12
   328   00190C                     clear_2:
   329   00190C  6AEE               	clrf	postinc0,c
   330   00190E  06E8               	decf	wreg,f,c
   331   001910  E1FD               	bnz	clear_2
   332                           
   333                           ; Clear objects allocated to COMRAM (6 bytes)
   334   001912  6A56               	clrf	(__pbssCOMRAM+5)& (0+255),c
   335   001914  6A55               	clrf	(__pbssCOMRAM+4)& (0+255),c
   336   001916  6A54               	clrf	(__pbssCOMRAM+3)& (0+255),c
   337   001918  6A53               	clrf	(__pbssCOMRAM+2)& (0+255),c
   338   00191A  6A52               	clrf	(__pbssCOMRAM+1)& (0+255),c
   339   00191C  6A51               	clrf	__pbssCOMRAM& (0+255),c
   340   00191E                     end_of_initialization:
   341                           	callstack 0
   342   00191E                     __end_of__initialization:
   343                           	callstack 0
   344   00191E  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   345   001920  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   346   001922  0100               	movlb	0
   347   001924  EF65  F005         	goto	_main	;jump to C main() function
   348                           
   349                           	psect	bssCOMRAM
   350   000051                     __pbssCOMRAM:
   351                           	callstack 0
   352   000051                     _state:
   353                           	callstack 0
   354   000051                     	ds	2
   355   000053                     _index:
   356                           	callstack 0
   357   000053                     	ds	2
   358   000055                     _seconds:
   359                           	callstack 0
   360   000055                     	ds	2
   361                           
   362                           	psect	dataCOMRAM
   363   000057                     __pdataCOMRAM:
   364                           	callstack 0
   365   000057                     _wait_time:
   366                           	callstack 0
   367   000057                     	ds	2
   368   000059                     _wall_coef:
   369                           	callstack 0
   370   000059                     	ds	2
   371                           
   372                           	psect	bssBANK0
   373   0000EC                     __pbssBANK0:
   374                           	callstack 0
   375   0000EC                     _RGB:
   376                           	callstack 0
   377   0000EC                     	ds	12
   378                           
   379                           	psect	dataBANK0
   380   000060                     __pdataBANK0:
   381                           	callstack 0
   382   000060                     _Black_setup:
   383                           	callstack 0
   384   000060                     	ds	12
   385   00006C                     _White_setup:
   386                           	callstack 0
   387   00006C                     	ds	12
   388   000078                     _Orange_rule:
   389                           	callstack 0
   390   000078                     	ds	12
   391   000084                     _Pink_rule:
   392                           	callstack 0
   393   000084                     	ds	12
   394   000090                     _Yellow_rule:
   395                           	callstack 0
   396   000090                     	ds	12
   397   00009C                     _Blue_rule:
   398                           	callstack 0
   399   00009C                     	ds	12
   400   0000A8                     _Green_rule:
   401                           	callstack 0
   402   0000A8                     	ds	12
   403   0000B4                     _Red_rule:
   404                           	callstack 0
   405   0000B4                     	ds	12
   406                           
   407                           	psect	bssBANK1
   408   000100                     __pbssBANK1:
   409                           	callstack 0
   410   000100                     _Color_rules:
   411                           	callstack 0
   412   000100                     	ds	108
   413   00016C                     _Black_rule:
   414                           	callstack 0
   415   00016C                     	ds	12
   416                           
   417                           	psect	dataBANK1
   418   000178                     __pdataBANK1:
   419                           	callstack 0
   420   000178                     _White_rule:
   421                           	callstack 0
   422   000178                     	ds	12
   423   000184                     _Lightblue_rule:
   424                           	callstack 0
   425   000184                     	ds	12
   426                           
   427                           	psect	bssBANK2
   428   000200                     __pbssBANK2:
   429                           	callstack 0
   430   000200                     _movement_list:
   431                           	callstack 0
   432   000200                     	ds	200
   433                           
   434                           	psect	cstackBANK0
   435   0000C0                     __pcstackBANK0:
   436                           	callstack 0
   437   0000C0                     _get_color_code$2441:
   438                           	callstack 0
   439                           
   440                           ; 12 bytes @ 0x0
   441   0000C0                     	ds	12
   442   0000CC                     _get_color_code$458:
   443                           	callstack 0
   444                           
   445                           ; 4 bytes @ 0xC
   446   0000CC                     	ds	4
   447   0000D0                     _get_color_code$459:
   448                           	callstack 0
   449                           
   450                           ; 4 bytes @ 0x10
   451   0000D0                     	ds	4
   452   0000D4                     _get_color_code$460:
   453                           	callstack 0
   454                           
   455                           ; 4 bytes @ 0x14
   456   0000D4                     	ds	4
   457   0000D8                     get_color_code@min_value:
   458                           	callstack 0
   459                           
   460                           ; 2 bytes @ 0x18
   461   0000D8                     	ds	2
   462   0000DA                     get_color_code@min_index:
   463                           	callstack 0
   464                           
   465                           ; 2 bytes @ 0x1A
   466   0000DA                     	ds	2
   467   0000DC                     get_color_code@value:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x1C
   471   0000DC                     	ds	2
   472   0000DE                     get_color_code@i:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x1E
   476   0000DE                     	ds	2
   477   0000E0                     get_color_code@NormalizedRGB:
   478                           	callstack 0
   479                           
   480                           ; 12 bytes @ 0x20
   481   0000E0                     	ds	12
   482                           
   483                           	psect	cstackCOMRAM
   484   000001                     __pcstackCOMRAM:
   485                           	callstack 0
   486   000001                     ??_add_seconds_to_list:
   487   000001                     ??_I2C_2_Master_Idle:
   488   000001                     ?_get_state:
   489                           	callstack 0
   490   000001                     ?___wmul:
   491                           	callstack 0
   492   000001                     ?___lmul:
   493                           	callstack 0
   494   000001                     set_led_color@color:
   495                           	callstack 0
   496   000001                     initDCmotorsPWM@PWMperiod:
   497                           	callstack 0
   498   000001                     ___wmul@multiplier:
   499                           	callstack 0
   500   000001                     ___lmul@multiplier:
   501                           	callstack 0
   502                           
   503                           ; 4 bytes @ 0x0
   504   000001                     	ds	1
   505   000002                     ??_I2C_2_Master_Read:
   506   000002                     I2C_2_Master_Write@data_byte:
   507                           	callstack 0
   508                           
   509                           ; 1 bytes @ 0x1
   510   000002                     	ds	1
   511   000003                     color_writetoaddr@value:
   512                           	callstack 0
   513   000003                     I2C_2_Master_Read@ack:
   514                           	callstack 0
   515   000003                     ___wmul@multiplicand:
   516                           	callstack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519   000003                     	ds	1
   520   000004                     color_writetoaddr@address:
   521                           	callstack 0
   522   000004                     I2C_2_Master_Read@tmp:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x3
   526   000004                     	ds	1
   527   000005                     ?_color_read_Red:
   528                           	callstack 0
   529   000005                     ?_color_read_Blue:
   530                           	callstack 0
   531   000005                     ?_color_read_Green:
   532                           	callstack 0
   533   000005                     ?_color_read_Clear:
   534                           	callstack 0
   535   000005                     ___wmul@product:
   536                           	callstack 0
   537   000005                     ___lmul@multiplicand:
   538                           	callstack 0
   539                           
   540                           ; 4 bytes @ 0x4
   541   000005                     	ds	2
   542   000007                     ??_color_read_Red:
   543   000007                     ??_color_read_Blue:
   544   000007                     ??_color_read_Green:
   545   000007                     ??_color_read_Clear:
   546   000007                     ?_get_color_distance:
   547                           	callstack 0
   548   000007                     ?___lwdiv:
   549                           	callstack 0
   550   000007                     ___lwdiv@dividend:
   551                           	callstack 0
   552   000007                     get_color_distance@color1:
   553                           	callstack 0
   554                           
   555                           ; 12 bytes @ 0x6
   556   000007                     	ds	2
   557   000009                     ___lwdiv@divisor:
   558                           	callstack 0
   559   000009                     ___lmul@product:
   560                           	callstack 0
   561                           
   562                           ; 4 bytes @ 0x8
   563   000009                     	ds	1
   564   00000A                     color_read_Red@tmp:
   565                           	callstack 0
   566   00000A                     color_read_Blue@tmp:
   567                           	callstack 0
   568   00000A                     color_read_Green@tmp:
   569                           	callstack 0
   570   00000A                     color_read_Clear@tmp:
   571                           	callstack 0
   572                           
   573                           ; 2 bytes @ 0x9
   574   00000A                     	ds	1
   575   00000B                     ___lwdiv@quotient:
   576                           	callstack 0
   577                           
   578                           ; 2 bytes @ 0xA
   579   00000B                     	ds	1
   580   00000C                     ??_calibrate_white:
   581   00000C                     ?_get_wall_presence:
   582                           	callstack 0
   583                           
   584                           ; 2 bytes @ 0xB
   585   00000C                     	ds	1
   586   00000D                     ?___lldiv:
   587                           	callstack 0
   588   00000D                     ___lwdiv@counter:
   589                           	callstack 0
   590   00000D                     ___lldiv@dividend:
   591                           	callstack 0
   592                           
   593                           ; 4 bytes @ 0xC
   594   00000D                     	ds	1
   595   00000E                     ??_calibrate_black:
   596   00000E                     ??_get_wall_presence:
   597   00000E                     setMotorPWM@m:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0xD
   601   00000E                     	ds	2
   602   000010                     ??_setMotorPWM:
   603   000010                     calibrate_black@clear1:
   604                           	callstack 0
   605   000010                     get_wall_presence@clear1:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0xF
   609   000010                     	ds	1
   610   000011                     ___lldiv@divisor:
   611                           	callstack 0
   612                           
   613                           ; 4 bytes @ 0x10
   614   000011                     	ds	1
   615   000012                     setMotorPWM@posDuty:
   616                           	callstack 0
   617   000012                     calibrate_black@clear2:
   618                           	callstack 0
   619   000012                     get_wall_presence@clear2:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x11
   623   000012                     	ds	1
   624   000013                     setMotorPWM@negDuty:
   625                           	callstack 0
   626   000013                     get_color_distance@color2:
   627                           	callstack 0
   628                           
   629                           ; 12 bytes @ 0x12
   630   000013                     	ds	1
   631   000014                     stop@mL:
   632                           	callstack 0
   633   000014                     turnLeft@mL:
   634                           	callstack 0
   635   000014                     turnRight@mL:
   636                           	callstack 0
   637   000014                     turnLeftLong@mL:
   638                           	callstack 0
   639   000014                     turnRightLong@mL:
   640                           	callstack 0
   641   000014                     fullSpeedAhead@mL:
   642                           	callstack 0
   643   000014                     TimedfullSpeedAhead@mL:
   644                           	callstack 0
   645   000014                     moveBack@mL:
   646                           	callstack 0
   647   000014                     _calibrate_black$2442:
   648                           	callstack 0
   649                           
   650                           ; 2 bytes @ 0x13
   651   000014                     	ds	1
   652   000015                     ___lldiv@quotient:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x14
   656   000015                     	ds	1
   657   000016                     ??_color_click_init:
   658   000016                     stop@mR:
   659                           	callstack 0
   660   000016                     turnLeft@mR:
   661                           	callstack 0
   662   000016                     turnRight@mR:
   663                           	callstack 0
   664   000016                     turnLeftLong@mR:
   665                           	callstack 0
   666   000016                     turnRightLong@mR:
   667                           	callstack 0
   668   000016                     fullSpeedAhead@mR:
   669                           	callstack 0
   670   000016                     TimedfullSpeedAhead@mR:
   671                           	callstack 0
   672   000016                     moveBack@mR:
   673                           	callstack 0
   674                           
   675                           ; 2 bytes @ 0x15
   676   000016                     	ds	2
   677   000018                     ??_stop:
   678   000018                     ??_turnLeft:
   679   000018                     ??_turnRight:
   680   000018                     ??_turnLeftLong:
   681   000018                     ??_turnRightLong:
   682   000018                     TimedfullSpeedAhead@time:
   683                           	callstack 0
   684   000018                     moveBack@time:
   685                           	callstack 0
   686                           
   687                           ; 2 bytes @ 0x17
   688   000018                     	ds	1
   689   000019                     ___lldiv@counter:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x18
   693   000019                     	ds	1
   694   00001A                     turnLeft@k:
   695                           	callstack 0
   696   00001A                     turnRight@k:
   697                           	callstack 0
   698   00001A                     turnLeftLong@i:
   699                           	callstack 0
   700   00001A                     turnRightLong@i:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x19
   704   00001A                     	ds	2
   705   00001C                     turnLeft@i:
   706                           	callstack 0
   707   00001C                     turnRight@i:
   708                           	callstack 0
   709                           
   710                           ; 2 bytes @ 0x1B
   711   00001C                     	ds	2
   712   00001E                     RobotMovement@color:
   713                           	callstack 0
   714   00001E                     return_back@motorL:
   715                           	callstack 0
   716                           
   717                           ; 2 bytes @ 0x1D
   718   00001E                     	ds	1
   719   00001F                     ??_get_color_distance:
   720                           
   721                           ; 1 bytes @ 0x1E
   722   00001F                     	ds	1
   723   000020                     RobotMovement@motorL:
   724                           	callstack 0
   725   000020                     return_back@motorR:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x1F
   729   000020                     	ds	2
   730   000022                     RobotMovement@motorR:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x21
   734   000022                     	ds	1
   735   000023                     _get_color_distance$417:
   736                           	callstack 0
   737                           
   738                           ; 4 bytes @ 0x22
   739   000023                     	ds	1
   740   000024                     
   741                           ; 1 bytes @ 0x23
   742   000024                     	ds	2
   743   000026                     RobotMovement@i:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x25
   747   000026                     	ds	1
   748   000027                     _get_color_distance$419:
   749                           	callstack 0
   750                           
   751                           ; 4 bytes @ 0x26
   752   000027                     	ds	1
   753   000028                     RobotMovement@i_1265:
   754                           	callstack 0
   755                           
   756                           ; 2 bytes @ 0x27
   757   000028                     	ds	3
   758   00002B                     _get_color_distance$421:
   759                           	callstack 0
   760                           
   761                           ; 4 bytes @ 0x2A
   762   00002B                     	ds	4
   763   00002F                     get_color_distance@R_offset:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x2E
   767   00002F                     	ds	2
   768   000031                     get_color_distance@G_offset:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x30
   772   000031                     	ds	2
   773   000033                     get_color_distance@B_offset:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x32
   777   000033                     	ds	2
   778   000035                     ?_get_color_code:
   779                           	callstack 0
   780                           
   781                           ; 2 bytes @ 0x34
   782   000035                     	ds	2
   783   000037                     ??_get_color_code:
   784                           
   785                           ; 1 bytes @ 0x36
   786   000037                     	ds	2
   787   000039                     ??_main:
   788                           
   789                           ; 1 bytes @ 0x38
   790   000039                     	ds	2
   791   00003B                     main@color_code:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x3A
   795   00003B                     	ds	2
   796   00003D                     main@state:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x3C
   800   00003D                     	ds	2
   801   00003F                     main@motorL:
   802                           	callstack 0
   803                           
   804                           ; 9 bytes @ 0x3E
   805   00003F                     	ds	9
   806   000048                     main@motorR:
   807                           	callstack 0
   808                           
   809                           ; 9 bytes @ 0x47
   810   000048                     	ds	9
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 17 in file "main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;  color_code      2   58[COMRAM] unsigned int 
   822 ;;  state           2   60[COMRAM] int 
   823 ;;  motorR          9   71[COMRAM] struct DC_motor
   824 ;;  motorL          9   62[COMRAM] struct DC_motor
   825 ;;  PWMcycle        2    0        unsigned int 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      void 
   828 ;; Registers used:
   829 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   836 ;;      Locals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   838 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   839 ;;Total ram usage:       24 bytes
   840 ;; Hardware stack levels required when called: 7
   841 ;; This function calls:
   842 ;;		_Interrupts_init
   843 ;;		_RobotMovement
   844 ;;		_TimedfullSpeedAhead
   845 ;;		_Timer0_init
   846 ;;		_add_seconds_to_list
   847 ;;		_color_click_init
   848 ;;		_fullSpeedAhead
   849 ;;		_get_color_code
   850 ;;		_get_state
   851 ;;		_get_wall_presence
   852 ;;		_initDCmotorsPWM
   853 ;;		_return_back
   854 ;;		_stop
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861   000ACA                     __ptext0:
   862                           	callstack 0
   863   000ACA                     _main:
   864                           	callstack 24
   865   000ACA                     
   866                           ;main.c: 18:     Timer0_init();
   867   000ACA  EC94  F00F         	call	_Timer0_init	;wreg free
   868   000ACE                     
   869                           ;main.c: 19:     Interrupts_init();
   870   000ACE  ECB6  F00F         	call	_Interrupts_init	;wreg free
   871   000AD2                     
   872                           ;main.c: 20:     initDCmotorsPWM(99);
   873   000AD2  0E00               	movlw	0
   874   000AD4  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   875   000AD6  0E63               	movlw	99
   876   000AD8  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   877   000ADA  EC94  F00C         	call	_initDCmotorsPWM	;wreg free
   878   000ADE                     
   879                           ;main.c: 22:     color_click_init();
   880   000ADE  EC8E  F009         	call	_color_click_init	;wreg free
   881   000AE2                     
   882                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   883   000AE2  010E               	movlb	14	; () banked
   884   000AE4  95B4               	bcf	180,2,b	;volatile
   885   000AE6                     
   886                           ; BSR set to: 14
   887                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   888   000AE6  8486               	bsf	134,2,c	;volatile
   889   000AE8                     
   890                           ; BSR set to: 14
   891                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   892   000AE8  0E00               	movlw	0
   893   000AEA  6E3F               	movwf	main@motorL^0,c
   894   000AEC                     
   895                           ; BSR set to: 14
   896                           ;main.c: 29:     motorL.direction=1;
   897   000AEC  0E01               	movlw	1
   898   000AEE  6E40               	movwf	(main@motorL+1)^0,c
   899   000AF0                     
   900                           ; BSR set to: 14
   901                           ;main.c: 30:     motorL.brakemode=1;
   902   000AF0  0E01               	movlw	1
   903   000AF2  6E41               	movwf	(main@motorL+2)^0,c
   904   000AF4                     
   905                           ; BSR set to: 14
   906                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   907   000AF4  0EAA               	movlw	170
   908   000AF6  6E44               	movwf	(main@motorL+5)^0,c
   909   000AF8  0E0F               	movlw	15
   910   000AFA  6E45               	movwf	(main@motorL+6)^0,c
   911   000AFC                     
   912                           ; BSR set to: 14
   913                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   914   000AFC  0EA6               	movlw	166
   915   000AFE  6E46               	movwf	(main@motorL+7)^0,c
   916   000B00  0E0F               	movlw	15
   917   000B02  6E47               	movwf	(main@motorL+8)^0,c
   918   000B04                     
   919                           ; BSR set to: 14
   920                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   921   000B04  0E00               	movlw	0
   922   000B06  6E43               	movwf	(main@motorL+4)^0,c
   923   000B08  0E63               	movlw	99
   924   000B0A  6E42               	movwf	(main@motorL+3)^0,c
   925   000B0C                     
   926                           ; BSR set to: 14
   927                           ;main.c: 35:     motorR.power=0;
   928   000B0C  0E00               	movlw	0
   929   000B0E  6E48               	movwf	main@motorR^0,c
   930   000B10                     
   931                           ; BSR set to: 14
   932                           ;main.c: 36:     motorR.direction=1;
   933   000B10  0E01               	movlw	1
   934   000B12  6E49               	movwf	(main@motorR+1)^0,c
   935   000B14                     
   936                           ; BSR set to: 14
   937                           ;main.c: 37:     motorR.brakemode=1;
   938   000B14  0E01               	movlw	1
   939   000B16  6E4A               	movwf	(main@motorR+2)^0,c
   940   000B18                     
   941                           ; BSR set to: 14
   942                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   943   000B18  0E25               	movlw	37
   944   000B1A  6E4D               	movwf	(main@motorR+5)^0,c
   945   000B1C  0E0F               	movlw	15
   946   000B1E  6E4E               	movwf	(main@motorR+6)^0,c
   947   000B20                     
   948                           ; BSR set to: 14
   949                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   950   000B20  0E21               	movlw	33
   951   000B22  6E4F               	movwf	(main@motorR+7)^0,c
   952   000B24  0E0F               	movlw	15
   953   000B26  6E50               	movwf	(main@motorR+8)^0,c
   954   000B28                     
   955                           ; BSR set to: 14
   956                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   957   000B28  0E00               	movlw	0
   958   000B2A  6E4C               	movwf	(main@motorR+4)^0,c
   959   000B2C  0E63               	movlw	99
   960   000B2E  6E4B               	movwf	(main@motorR+3)^0,c
   961   000B30                     
   962                           ; BSR set to: 14
   963                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   964   000B30  0E52               	movlw	82
   965   000B32  6E3A               	movwf	(??_main+1)^0,c
   966   000B34  0E2B               	movlw	43
   967   000B36  6E39               	movwf	??_main^0,c
   968   000B38  0E00               	movlw	0
   969   000B3A                     u2487:
   970   000B3A  2EE8               	decfsz	wreg,f,c
   971   000B3C  D7FE               	bra	u2487
   972   000B3E  2E39               	decfsz	??_main^0,f,c
   973   000B40  D7FC               	bra	u2487
   974   000B42  2E3A               	decfsz	(??_main+1)^0,f,c
   975   000B44  D7FA               	bra	u2487
   976   000B46  D000               	nop2	
   977   000B48                     
   978                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
   979   000B48  0E3F               	movlw	low main@motorL
   980   000B4A  6E14               	movwf	fullSpeedAhead@mL^0,c
   981   000B4C  0E00               	movlw	high main@motorL
   982   000B4E  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   983   000B50  0E48               	movlw	low main@motorR
   984   000B52  6E16               	movwf	fullSpeedAhead@mR^0,c
   985   000B54  0E00               	movlw	high main@motorR
   986   000B56  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   987   000B58  ECEF  F00D         	call	_fullSpeedAhead	;wreg free
   988   000B5C                     l3036:
   989                           
   990                           ;main.c: 45:         int state = get_state();
   991   000B5C  ECBC  F00F         	call	_get_state	;wreg free
   992   000B60  C001  F03D         	movff	?_get_state,main@state
   993   000B64  C002  F03E         	movff	?_get_state+1,main@state+1
   994   000B68                     
   995                           ;main.c: 46:         if(get_wall_presence() == 1 && state == 0 ){
   996   000B68  ECF9  F00B         	call	_get_wall_presence	;wreg free
   997   000B6C  040C               	decf	?_get_wall_presence^0,w,c
   998   000B6E  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
   999   000B70  A4D8               	btfss	status,2,c
  1000   000B72  EFBD  F005         	goto	u2081
  1001   000B76  EFBF  F005         	goto	u2080
  1002   000B7A                     u2081:
  1003   000B7A  EF15  F006         	goto	l3056
  1004   000B7E                     u2080:
  1005   000B7E  503D               	movf	main@state^0,w,c
  1006   000B80  103E               	iorwf	(main@state+1)^0,w,c
  1007   000B82  A4D8               	btfss	status,2,c
  1008   000B84  EFC6  F005         	goto	u2091
  1009   000B88  EFC8  F005         	goto	u2090
  1010   000B8C                     u2091:
  1011   000B8C  EF15  F006         	goto	l3056
  1012   000B90                     u2090:
  1013   000B90                     
  1014                           ;main.c: 48:             add_seconds_to_list();
  1015   000B90  ECE1  F00E         	call	_add_seconds_to_list	;wreg free
  1016   000B94                     
  1017                           ;main.c: 49:             stop(&motorL,&motorR);
  1018   000B94  0E3F               	movlw	low main@motorL
  1019   000B96  6E14               	movwf	stop@mL^0,c
  1020   000B98  0E00               	movlw	high main@motorL
  1021   000B9A  6E15               	movwf	(stop@mL+1)^0,c
  1022   000B9C  0E48               	movlw	low main@motorR
  1023   000B9E  6E16               	movwf	stop@mR^0,c
  1024   000BA0  0E00               	movlw	high main@motorR
  1025   000BA2  6E17               	movwf	(stop@mR+1)^0,c
  1026   000BA4  ECBC  F00E         	call	_stop	;wreg free
  1027   000BA8                     
  1028                           ;main.c: 50:             unsigned int color_code = get_color_code();
  1029   000BA8  ECBC  F002         	call	_get_color_code	;wreg free
  1030   000BAC  C035  F03B         	movff	?_get_color_code,main@color_code
  1031   000BB0  C036  F03C         	movff	?_get_color_code+1,main@color_code+1
  1032   000BB4                     
  1033                           ;main.c: 51:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1034   000BB4  0E3F               	movlw	low main@motorL
  1035   000BB6  6E14               	movwf	TimedfullSpeedAhead@mL^0,c
  1036   000BB8  0E00               	movlw	high main@motorL
  1037   000BBA  6E15               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1038   000BBC  0E48               	movlw	low main@motorR
  1039   000BBE  6E16               	movwf	TimedfullSpeedAhead@mR^0,c
  1040   000BC0  0E00               	movlw	high main@motorR
  1041   000BC2  6E17               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1042   000BC4  0E00               	movlw	0
  1043   000BC6  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1044   000BC8  0E05               	movlw	5
  1045   000BCA  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  1046   000BCC  EC16  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1047   000BD0                     
  1048                           ;main.c: 52:             RobotMovement(color_code, &motorL, &motorR);
  1049   000BD0  C03B  F01E         	movff	main@color_code,RobotMovement@color
  1050   000BD4  C03C  F01F         	movff	main@color_code+1,RobotMovement@color+1
  1051   000BD8  0E3F               	movlw	low main@motorL
  1052   000BDA  6E20               	movwf	RobotMovement@motorL^0,c
  1053   000BDC  0E00               	movlw	high main@motorL
  1054   000BDE  6E21               	movwf	(RobotMovement@motorL+1)^0,c
  1055   000BE0  0E48               	movlw	low main@motorR
  1056   000BE2  6E22               	movwf	RobotMovement@motorR^0,c
  1057   000BE4  0E00               	movlw	high main@motorR
  1058   000BE6  6E23               	movwf	(RobotMovement@motorR+1)^0,c
  1059   000BE8  EC19  F000         	call	_RobotMovement	;wreg free
  1060   000BEC                     
  1061                           ;main.c: 53:             if (state == 0)
  1062   000BEC  503D               	movf	main@state^0,w,c
  1063   000BEE  103E               	iorwf	(main@state+1)^0,w,c
  1064   000BF0  A4D8               	btfss	status,2,c
  1065   000BF2  EFFD  F005         	goto	u2101
  1066   000BF6  EFFF  F005         	goto	u2100
  1067   000BFA                     u2101:
  1068   000BFA  EFAE  F005         	goto	l3036
  1069   000BFE                     u2100:
  1070   000BFE                     
  1071                           ;main.c: 54:             {;main.c: 55:                 stop(&motorL,&motorR);
  1072   000BFE  0E3F               	movlw	low main@motorL
  1073   000C00  6E14               	movwf	stop@mL^0,c
  1074   000C02  0E00               	movlw	high main@motorL
  1075   000C04  6E15               	movwf	(stop@mL+1)^0,c
  1076   000C06  0E48               	movlw	low main@motorR
  1077   000C08  6E16               	movwf	stop@mR^0,c
  1078   000C0A  0E00               	movlw	high main@motorR
  1079   000C0C  6E17               	movwf	(stop@mR+1)^0,c
  1080   000C0E  ECBC  F00E         	call	_stop	;wreg free
  1081                           
  1082                           ;main.c: 56:                 fullSpeedAhead(&motorL,&motorR);
  1083   000C12  0E3F               	movlw	low main@motorL
  1084   000C14  6E14               	movwf	fullSpeedAhead@mL^0,c
  1085   000C16  0E00               	movlw	high main@motorL
  1086   000C18  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
  1087   000C1A  0E48               	movlw	low main@motorR
  1088   000C1C  6E16               	movwf	fullSpeedAhead@mR^0,c
  1089   000C1E  0E00               	movlw	high main@motorR
  1090   000C20  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
  1091   000C22  ECEF  F00D         	call	_fullSpeedAhead	;wreg free
  1092   000C26  EFAE  F005         	goto	l3036
  1093   000C2A                     l3056:
  1094   000C2A  043D               	decf	main@state^0,w,c
  1095   000C2C  103E               	iorwf	(main@state+1)^0,w,c
  1096   000C2E  A4D8               	btfss	status,2,c
  1097   000C30  EF1C  F006         	goto	u2111
  1098   000C34  EF1E  F006         	goto	u2110
  1099   000C38                     u2111:
  1100   000C38  EF2A  F006         	goto	l432
  1101   000C3C                     u2110:
  1102   000C3C                     
  1103                           ;main.c: 59:             return_back(&motorL, &motorR);
  1104   000C3C  0E3F               	movlw	low main@motorL
  1105   000C3E  6E1E               	movwf	return_back@motorL^0,c
  1106   000C40  0E00               	movlw	high main@motorL
  1107   000C42  6E1F               	movwf	(return_back@motorL+1)^0,c
  1108   000C44  0E48               	movlw	low main@motorR
  1109   000C46  6E20               	movwf	return_back@motorR^0,c
  1110   000C48  0E00               	movlw	high main@motorR
  1111   000C4A  6E21               	movwf	(return_back@motorR+1)^0,c
  1112   000C4C  EC8B  F004         	call	_return_back	;wreg free
  1113                           
  1114                           ;main.c: 60:         }else{
  1115   000C50  EFAE  F005         	goto	l3036
  1116   000C54                     l432:
  1117   000C54  EFAE  F005         	goto	l3036
  1118   000C58  EF17  F000         	goto	start
  1119   000C5C                     __end_of_main:
  1120                           	callstack 0
  1121                           
  1122 ;; *************** function _return_back *****************
  1123 ;; Defined at:
  1124 ;;		line 445 in file "dc_motor.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  1127 ;;		 -> main@motorL(9), 
  1128 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  1129 ;;		 -> main@motorR(9), 
  1130 ;; Auto vars:     Size  Location     Type
  1131 ;;		None
  1132 ;; Return value:  Size  Location     Type
  1133 ;;                  1    wreg      void 
  1134 ;; Registers used:
  1135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1136 ;; Tracked objects:
  1137 ;;		On entry : 0/0
  1138 ;;		On exit  : 0/0
  1139 ;;		Unchanged: 0/0
  1140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1144 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1145 ;;Total ram usage:        6 bytes
  1146 ;; Hardware stack levels used: 1
  1147 ;; Hardware stack levels required when called: 5
  1148 ;; This function calls:
  1149 ;;		_TimedfullSpeedAhead
  1150 ;;		_stop
  1151 ;;		_turnLeft
  1152 ;;		_turnLeftLong
  1153 ;;		_turnRight
  1154 ;;		_turnRightLong
  1155 ;; This function is called by:
  1156 ;;		_main
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text1
  1161   000916                     __ptext1:
  1162                           	callstack 0
  1163   000916                     _return_back:
  1164                           	callstack 25
  1165   000916                     
  1166                           ;dc_motor.c: 445: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 446: {;dc_motor.c: 447:     while (index > 0){
  1167   000916  EF4A  F005         	goto	l2978
  1168   00091A                     l2956:
  1169                           
  1170                           ;dc_motor.c: 448:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1171   00091A  90D8               	bcf	status,0,c
  1172   00091C  3453               	rlcf	_index^0,w,c
  1173   00091E  6ED9               	movwf	fsr2l,c
  1174   000920  3454               	rlcf	(_index+1)^0,w,c
  1175   000922  6EDA               	movwf	fsr2h,c
  1176   000924  0EFE               	movlw	low (_movement_list+65534)
  1177   000926  26D9               	addwf	fsr2l,f,c
  1178   000928  0E01               	movlw	high (_movement_list+65534)
  1179   00092A  22DA               	addwfc	fsr2h,f,c
  1180   00092C  28DE               	incf	postinc2,w,c
  1181   00092E  E106               	bnz	u2011
  1182   000930  28DE               	incf	postinc2,w,c
  1183   000932  A4D8               	btfss	status,2,c
  1184   000934  EF9E  F004         	goto	u2011
  1185   000938  EFA0  F004         	goto	u2010
  1186   00093C                     u2011:
  1187   00093C  EFAC  F004         	goto	l2960
  1188   000940                     u2010:
  1189   000940  C01E  F014         	movff	return_back@motorL,turnLeft@mL
  1190   000944  C01F  F015         	movff	return_back@motorL+1,turnLeft@mL+1
  1191   000948  C020  F016         	movff	return_back@motorR,turnLeft@mR
  1192   00094C  C021  F017         	movff	return_back@motorR+1,turnLeft@mR+1
  1193   000950  EC9A  F007         	call	_turnLeft	;wreg free
  1194   000954  EF3D  F005         	goto	l303
  1195   000958                     l2960:
  1196   000958  90D8               	bcf	status,0,c
  1197   00095A  3453               	rlcf	_index^0,w,c
  1198   00095C  6ED9               	movwf	fsr2l,c
  1199   00095E  3454               	rlcf	(_index+1)^0,w,c
  1200   000960  6EDA               	movwf	fsr2h,c
  1201   000962  0EFE               	movlw	low (_movement_list+65534)
  1202   000964  26D9               	addwf	fsr2l,f,c
  1203   000966  0E01               	movlw	high (_movement_list+65534)
  1204   000968  22DA               	addwfc	fsr2h,f,c
  1205   00096A  0EFE               	movlw	254
  1206   00096C  18DE               	xorwf	postinc2,w,c
  1207   00096E  E106               	bnz	u2021
  1208   000970  28DE               	incf	postinc2,w,c
  1209   000972  A4D8               	btfss	status,2,c
  1210   000974  EFBE  F004         	goto	u2021
  1211   000978  EFC0  F004         	goto	u2020
  1212   00097C                     u2021:
  1213   00097C  EFCC  F004         	goto	l2964
  1214   000980                     u2020:
  1215   000980  C01E  F014         	movff	return_back@motorL,turnRight@mL
  1216   000984  C01F  F015         	movff	return_back@motorL+1,turnRight@mL+1
  1217   000988  C020  F016         	movff	return_back@motorR,turnRight@mR
  1218   00098C  C021  F017         	movff	return_back@motorR+1,turnRight@mR+1
  1219   000990  EC47  F008         	call	_turnRight	;wreg free
  1220   000994  EF3D  F005         	goto	l303
  1221   000998                     l2964:
  1222   000998  90D8               	bcf	status,0,c
  1223   00099A  3453               	rlcf	_index^0,w,c
  1224   00099C  6ED9               	movwf	fsr2l,c
  1225   00099E  3454               	rlcf	(_index+1)^0,w,c
  1226   0009A0  6EDA               	movwf	fsr2h,c
  1227   0009A2  0EFE               	movlw	low (_movement_list+65534)
  1228   0009A4  26D9               	addwf	fsr2l,f,c
  1229   0009A6  0E01               	movlw	high (_movement_list+65534)
  1230   0009A8  22DA               	addwfc	fsr2h,f,c
  1231   0009AA  0EFD               	movlw	253
  1232   0009AC  18DE               	xorwf	postinc2,w,c
  1233   0009AE  E106               	bnz	u2031
  1234   0009B0  28DE               	incf	postinc2,w,c
  1235   0009B2  A4D8               	btfss	status,2,c
  1236   0009B4  EFDE  F004         	goto	u2031
  1237   0009B8  EFE0  F004         	goto	u2030
  1238   0009BC                     u2031:
  1239   0009BC  EFEC  F004         	goto	l2968
  1240   0009C0                     u2030:
  1241   0009C0  C01E  F014         	movff	return_back@motorL,turnLeftLong@mL
  1242   0009C4  C01F  F015         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1243   0009C8  C020  F016         	movff	return_back@motorR,turnLeftLong@mR
  1244   0009CC  C021  F017         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1245   0009D0  ECBE  F00A         	call	_turnLeftLong	;wreg free
  1246   0009D4  EF3D  F005         	goto	l303
  1247   0009D8                     l2968:
  1248   0009D8  90D8               	bcf	status,0,c
  1249   0009DA  3453               	rlcf	_index^0,w,c
  1250   0009DC  6ED9               	movwf	fsr2l,c
  1251   0009DE  3454               	rlcf	(_index+1)^0,w,c
  1252   0009E0  6EDA               	movwf	fsr2h,c
  1253   0009E2  0EFE               	movlw	low (_movement_list+65534)
  1254   0009E4  26D9               	addwf	fsr2l,f,c
  1255   0009E6  0E01               	movlw	high (_movement_list+65534)
  1256   0009E8  22DA               	addwfc	fsr2h,f,c
  1257   0009EA  0EFC               	movlw	252
  1258   0009EC  18DE               	xorwf	postinc2,w,c
  1259   0009EE  E106               	bnz	u2041
  1260   0009F0  28DE               	incf	postinc2,w,c
  1261   0009F2  A4D8               	btfss	status,2,c
  1262   0009F4  EFFE  F004         	goto	u2041
  1263   0009F8  EF00  F005         	goto	u2040
  1264   0009FC                     u2041:
  1265   0009FC  EF0C  F005         	goto	l2972
  1266   000A00                     u2040:
  1267   000A00  C01E  F014         	movff	return_back@motorL,turnRightLong@mL
  1268   000A04  C01F  F015         	movff	return_back@motorL+1,turnRightLong@mL+1
  1269   000A08  C020  F016         	movff	return_back@motorR,turnRightLong@mR
  1270   000A0C  C021  F017         	movff	return_back@motorR+1,turnRightLong@mR+1
  1271   000A10  EC2A  F00A         	call	_turnRightLong	;wreg free
  1272   000A14  EF3D  F005         	goto	l303
  1273   000A18                     l2972:
  1274   000A18  90D8               	bcf	status,0,c
  1275   000A1A  3453               	rlcf	_index^0,w,c
  1276   000A1C  6ED9               	movwf	fsr2l,c
  1277   000A1E  3454               	rlcf	(_index+1)^0,w,c
  1278   000A20  6EDA               	movwf	fsr2h,c
  1279   000A22  0EFE               	movlw	low (_movement_list+65534)
  1280   000A24  26D9               	addwf	fsr2l,f,c
  1281   000A26  0E01               	movlw	high (_movement_list+65534)
  1282   000A28  22DA               	addwfc	fsr2h,f,c
  1283   000A2A  0E01               	movlw	1
  1284   000A2C  BEDB               	btfsc	plusw2,7,c
  1285   000A2E  EF22  F005         	goto	u2051
  1286   000A32  0E01               	movlw	1
  1287   000A34  50DB               	movf	plusw2,w,c
  1288   000A36  E108               	bnz	u2050
  1289   000A38  04DE               	decf	postinc2,w,c
  1290   000A3A  A0D8               	btfss	status,0,c
  1291   000A3C  EF22  F005         	goto	u2051
  1292   000A40  EF24  F005         	goto	u2050
  1293   000A44                     u2051:
  1294   000A44  EF3D  F005         	goto	l307
  1295   000A48                     u2050:
  1296   000A48  C01E  F014         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1297   000A4C  C01F  F015         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1298   000A50  C020  F016         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1299   000A54  C021  F017         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1300   000A58  90D8               	bcf	status,0,c
  1301   000A5A  3453               	rlcf	_index^0,w,c
  1302   000A5C  6ED9               	movwf	fsr2l,c
  1303   000A5E  3454               	rlcf	(_index+1)^0,w,c
  1304   000A60  6EDA               	movwf	fsr2h,c
  1305   000A62  0EFE               	movlw	low (_movement_list+65534)
  1306   000A64  26D9               	addwf	fsr2l,f,c
  1307   000A66  0E01               	movlw	high (_movement_list+65534)
  1308   000A68  22DA               	addwfc	fsr2h,f,c
  1309   000A6A  CFDE F018          	movff	postinc2,TimedfullSpeedAhead@time
  1310   000A6E  CFDD F019          	movff	postdec2,TimedfullSpeedAhead@time+1
  1311   000A72  EC16  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1312   000A76  EF3D  F005         	goto	l303
  1313   000A7A                     l307:
  1314   000A7A                     l303:
  1315                           
  1316                           ;dc_motor.c: 453:         stop(motorL,motorR);
  1317   000A7A  C01E  F014         	movff	return_back@motorL,stop@mL
  1318   000A7E  C01F  F015         	movff	return_back@motorL+1,stop@mL+1
  1319   000A82  C020  F016         	movff	return_back@motorR,stop@mR
  1320   000A86  C021  F017         	movff	return_back@motorR+1,stop@mR+1
  1321   000A8A  ECBC  F00E         	call	_stop	;wreg free
  1322   000A8E                     
  1323                           ;dc_motor.c: 454:         index -= 1;
  1324   000A8E  0653               	decf	_index^0,f,c
  1325   000A90  A0D8               	btfss	status,0,c
  1326   000A92  0654               	decf	(_index+1)^0,f,c
  1327   000A94                     l2978:
  1328                           
  1329                           ;dc_motor.c: 447:     while (index > 0){
  1330   000A94  BE54               	btfsc	(_index+1)^0,7,c
  1331   000A96  EF57  F005         	goto	u2060
  1332   000A9A  5054               	movf	(_index+1)^0,w,c
  1333   000A9C  E106               	bnz	u2061
  1334   000A9E  0453               	decf	_index^0,w,c
  1335   000AA0  B0D8               	btfsc	status,0,c
  1336   000AA2  EF55  F005         	goto	u2061
  1337   000AA6  EF57  F005         	goto	u2060
  1338   000AAA                     u2061:
  1339   000AAA  EF8D  F004         	goto	l2956
  1340   000AAE                     u2060:
  1341   000AAE                     
  1342                           ;dc_motor.c: 456:     if (index == 0){state = 2;}
  1343   000AAE  5053               	movf	_index^0,w,c
  1344   000AB0  1054               	iorwf	(_index+1)^0,w,c
  1345   000AB2  A4D8               	btfss	status,2,c
  1346   000AB4  EF5E  F005         	goto	u2071
  1347   000AB8  EF60  F005         	goto	u2070
  1348   000ABC                     u2071:
  1349   000ABC  EF64  F005         	goto	l313
  1350   000AC0                     u2070:
  1351   000AC0  0E00               	movlw	0
  1352   000AC2  6E52               	movwf	(_state+1)^0,c
  1353   000AC4  0E02               	movlw	2
  1354   000AC6  6E51               	movwf	_state^0,c
  1355   000AC8                     l313:
  1356   000AC8  0012               	return		;funcret
  1357   000ACA                     __end_of_return_back:
  1358                           	callstack 0
  1359                           
  1360 ;; *************** function _initDCmotorsPWM *****************
  1361 ;; Defined at:
  1362 ;;		line 9 in file "dc_motor.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  PWMperiod       2    0[COMRAM] int 
  1365 ;; Auto vars:     Size  Location     Type
  1366 ;;		None
  1367 ;; Return value:  Size  Location     Type
  1368 ;;                  1    wreg      void 
  1369 ;; Registers used:
  1370 ;;		wreg, status,2
  1371 ;; Tracked objects:
  1372 ;;		On entry : 0/0
  1373 ;;		On exit  : 0/0
  1374 ;;		Unchanged: 0/0
  1375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1376 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1379 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1380 ;;Total ram usage:        2 bytes
  1381 ;; Hardware stack levels used: 1
  1382 ;; Hardware stack levels required when called: 2
  1383 ;; This function calls:
  1384 ;;		Nothing
  1385 ;; This function is called by:
  1386 ;;		_main
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           	psect	text2
  1391   001928                     __ptext2:
  1392                           	callstack 0
  1393   001928                     _initDCmotorsPWM:
  1394                           	callstack 28
  1395   001928                     
  1396                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1397   001928  9485               	bcf	133,2,c	;volatile
  1398                           
  1399                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1400   00192A  9E83               	bcf	131,7,c	;volatile
  1401                           
  1402                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1403   00192C  9C87               	bcf	135,6,c	;volatile
  1404                           
  1405                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1406   00192E  9885               	bcf	133,4,c	;volatile
  1407                           
  1408                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1409   001930  947D               	bcf	125,2,c	;volatile
  1410                           
  1411                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1412   001932  9E7B               	bcf	123,7,c	;volatile
  1413                           
  1414                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1415   001934  9C7F               	bcf	127,6,c	;volatile
  1416                           
  1417                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1418   001936  987D               	bcf	125,4,c	;volatile
  1419   001938                     
  1420                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1421   001938  0E05               	movlw	5
  1422   00193A  010E               	movlb	14	; () banked
  1423   00193C  6F74               	movwf	116,b	;volatile
  1424                           
  1425                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1426   00193E  0E06               	movlw	6
  1427   001940  6F76               	movwf	118,b	;volatile
  1428                           
  1429                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1430   001942  0E07               	movlw	7
  1431   001944  6F69               	movwf	105,b	;volatile
  1432                           
  1433                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1434   001946  0E08               	movlw	8
  1435   001948  6F88               	movwf	136,b	;volatile
  1436                           
  1437                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1438   00194A  50BD               	movf	189,w,c	;volatile
  1439   00194C  0B8F               	andlw	-113
  1440   00194E  0940               	iorlw	64
  1441   001950  6EBD               	movwf	189,c	;volatile
  1442                           
  1443                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1444   001952  0EE0               	movlw	-32
  1445   001954  16BE               	andwf	190,f,c	;volatile
  1446                           
  1447                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1448   001956  50BF               	movf	191,w,c	;volatile
  1449   001958  0BF0               	andlw	-16
  1450   00195A  0901               	iorlw	1
  1451   00195C  6EBF               	movwf	191,c	;volatile
  1452                           
  1453                           ;dc_motor.c: 34:     T2PR=99;
  1454   00195E  0E63               	movlw	99
  1455   001960  6EBC               	movwf	188,c	;volatile
  1456   001962                     
  1457                           ; BSR set to: 14
  1458                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1459   001962  8EBD               	bsf	189,7,c	;volatile
  1460                           
  1461                           ;dc_motor.c: 39:     CCPR1H=0;
  1462   001964  0E00               	movlw	0
  1463   001966  6EAA               	movwf	170,c	;volatile
  1464                           
  1465                           ;dc_motor.c: 40:     CCPR2H=0;
  1466   001968  0E00               	movlw	0
  1467   00196A  6EA6               	movwf	166,c	;volatile
  1468                           
  1469                           ;dc_motor.c: 41:     CCPR3H=0;
  1470   00196C  0E00               	movlw	0
  1471   00196E  010F               	movlb	15	; () banked
  1472   001970  6F25               	movwf	37,b	;volatile
  1473                           
  1474                           ;dc_motor.c: 42:     CCPR4H=0;
  1475   001972  0E00               	movlw	0
  1476   001974  6F21               	movwf	33,b	;volatile
  1477                           
  1478                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1479   001976  0EFC               	movlw	-4
  1480   001978  16AD               	andwf	173,f,c	;volatile
  1481                           
  1482                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1483   00197A  0EF3               	movlw	-13
  1484   00197C  16AD               	andwf	173,f,c	;volatile
  1485                           
  1486                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1487   00197E  0ECF               	movlw	-49
  1488   001980  16AD               	andwf	173,f,c	;volatile
  1489                           
  1490                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1491   001982  0E3F               	movlw	-193
  1492   001984  16AD               	andwf	173,f,c	;volatile
  1493   001986                     
  1494                           ; BSR set to: 15
  1495                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1496   001986  88AB               	bsf	171,4,c	;volatile
  1497                           
  1498                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1499   001988  50AB               	movf	171,w,c	;volatile
  1500   00198A  0BF0               	andlw	-16
  1501   00198C  090C               	iorlw	12
  1502   00198E  6EAB               	movwf	171,c	;volatile
  1503   001990                     
  1504                           ; BSR set to: 15
  1505                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1506   001990  8EAB               	bsf	171,7,c	;volatile
  1507   001992                     
  1508                           ; BSR set to: 15
  1509                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1510   001992  88A7               	bsf	167,4,c	;volatile
  1511                           
  1512                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1513   001994  50A7               	movf	167,w,c	;volatile
  1514   001996  0BF0               	andlw	-16
  1515   001998  090C               	iorlw	12
  1516   00199A  6EA7               	movwf	167,c	;volatile
  1517   00199C                     
  1518                           ; BSR set to: 15
  1519                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1520   00199C  8EA7               	bsf	167,7,c	;volatile
  1521   00199E                     
  1522                           ; BSR set to: 15
  1523                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1524   00199E  8926               	bsf	38,4,b	;volatile
  1525                           
  1526                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1527   0019A0  5126               	movf	38,w,b	;volatile
  1528   0019A2  0BF0               	andlw	-16
  1529   0019A4  090C               	iorlw	12
  1530   0019A6  6F26               	movwf	38,b	;volatile
  1531   0019A8                     
  1532                           ; BSR set to: 15
  1533                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1534   0019A8  8F26               	bsf	38,7,b	;volatile
  1535   0019AA                     
  1536                           ; BSR set to: 15
  1537                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1538   0019AA  8922               	bsf	34,4,b	;volatile
  1539                           
  1540                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1541   0019AC  5122               	movf	34,w,b	;volatile
  1542   0019AE  0BF0               	andlw	-16
  1543   0019B0  090C               	iorlw	12
  1544   0019B2  6F22               	movwf	34,b	;volatile
  1545   0019B4                     
  1546                           ; BSR set to: 15
  1547                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1548   0019B4  8F22               	bsf	34,7,b	;volatile
  1549   0019B6                     
  1550                           ; BSR set to: 15
  1551   0019B6  0012               	return		;funcret
  1552   0019B8                     __end_of_initDCmotorsPWM:
  1553                           	callstack 0
  1554                           
  1555 ;; *************** function _get_wall_presence *****************
  1556 ;; Defined at:
  1557 ;;		line 242 in file "color.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;		None
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;  clear2          2   17[COMRAM] unsigned int 
  1562 ;;  clear1          2   15[COMRAM] unsigned int 
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  2   11[COMRAM] unsigned int 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1576 ;;Total ram usage:        8 bytes
  1577 ;; Hardware stack levels used: 1
  1578 ;; Hardware stack levels required when called: 5
  1579 ;; This function calls:
  1580 ;;		___wmul
  1581 ;;		_color_read_Clear
  1582 ;;		_set_led_color
  1583 ;; This function is called by:
  1584 ;;		_main
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text3
  1589   0017F2                     __ptext3:
  1590                           	callstack 0
  1591   0017F2                     _get_wall_presence:
  1592                           	callstack 25
  1593   0017F2                     
  1594                           ;color.c: 243:     set_led_color(0b000);
  1595   0017F2  0E00               	movlw	0
  1596   0017F4  6E02               	movwf	(set_led_color@color+1)^0,c
  1597   0017F6  0E00               	movlw	0
  1598   0017F8  6E01               	movwf	set_led_color@color^0,c
  1599   0017FA  EC05  F00F         	call	_set_led_color	;wreg free
  1600   0017FE                     
  1601                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1602   0017FE  0E12               	movlw	18
  1603   001800  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1604   001802  0EDC               	movlw	220
  1605   001804  6E0E               	movwf	??_get_wall_presence^0,c
  1606   001806  0E60               	movlw	96
  1607   001808                     u2497:
  1608   001808  2EE8               	decfsz	wreg,f,c
  1609   00180A  D7FE               	bra	u2497
  1610   00180C  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1611   00180E  D7FC               	bra	u2497
  1612   001810  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1613   001812  D7FA               	bra	u2497
  1614   001814                     
  1615                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1616   001814  EC6C  F00E         	call	_color_read_Clear	;wreg free
  1617   001818  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1618   00181C  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1619   001820                     
  1620                           ;color.c: 246:     set_led_color(0b111);
  1621   001820  0E00               	movlw	0
  1622   001822  6E02               	movwf	(set_led_color@color+1)^0,c
  1623   001824  0E07               	movlw	7
  1624   001826  6E01               	movwf	set_led_color@color^0,c
  1625   001828  EC05  F00F         	call	_set_led_color	;wreg free
  1626   00182C                     
  1627                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1628   00182C  0E12               	movlw	18
  1629   00182E  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1630   001830  0EDC               	movlw	220
  1631   001832  6E0E               	movwf	??_get_wall_presence^0,c
  1632   001834  0E60               	movlw	96
  1633   001836                     u2507:
  1634   001836  2EE8               	decfsz	wreg,f,c
  1635   001838  D7FE               	bra	u2507
  1636   00183A  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1637   00183C  D7FC               	bra	u2507
  1638   00183E  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1639   001840  D7FA               	bra	u2507
  1640                           
  1641                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1642   001842  EC6C  F00E         	call	_color_read_Clear	;wreg free
  1643   001846  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1644   00184A  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1645   00184E                     
  1646                           ;color.c: 249:     set_led_color(0b000);
  1647   00184E  0E00               	movlw	0
  1648   001850  6E02               	movwf	(set_led_color@color+1)^0,c
  1649   001852  0E00               	movlw	0
  1650   001854  6E01               	movwf	set_led_color@color^0,c
  1651   001856  EC05  F00F         	call	_set_led_color	;wreg free
  1652   00185A                     
  1653                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1654   00185A  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1655   00185E  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1656   001862  C059  F003         	movff	_wall_coef,___wmul@multiplicand
  1657   001866  C05A  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1658   00186A  EC71  F00F         	call	___wmul	;wreg free
  1659   00186E  5001               	movf	?___wmul^0,w,c
  1660   001870  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1661   001872  5002               	movf	(?___wmul+1)^0,w,c
  1662   001874  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1663   001876  B0D8               	btfsc	status,0,c
  1664   001878  EF40  F00C         	goto	u1811
  1665   00187C  EF43  F00C         	goto	u1810
  1666   001880                     u1811:
  1667   001880  0E01               	movlw	1
  1668   001882  EF44  F00C         	goto	u1820
  1669   001886                     u1810:
  1670   001886  0E00               	movlw	0
  1671   001888                     u1820:
  1672   001888  6E0C               	movwf	?_get_wall_presence^0,c
  1673   00188A  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1674   00188C  0012               	return		;funcret
  1675   00188E                     __end_of_get_wall_presence:
  1676                           	callstack 0
  1677                           
  1678 ;; *************** function _get_state *****************
  1679 ;; Defined at:
  1680 ;;		line 430 in file "dc_motor.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;		None
  1683 ;; Auto vars:     Size  Location     Type
  1684 ;;		None
  1685 ;; Return value:  Size  Location     Type
  1686 ;;                  2    0[COMRAM] int 
  1687 ;; Registers used:
  1688 ;;		None
  1689 ;; Tracked objects:
  1690 ;;		On entry : 0/0
  1691 ;;		On exit  : 0/0
  1692 ;;		Unchanged: 0/0
  1693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;Total ram usage:        2 bytes
  1699 ;; Hardware stack levels used: 1
  1700 ;; Hardware stack levels required when called: 2
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_main
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text4
  1709   001F78                     __ptext4:
  1710                           	callstack 0
  1711   001F78                     _get_state:
  1712                           	callstack 28
  1713   001F78                     
  1714                           ;dc_motor.c: 432:     return state;
  1715   001F78  C051  F001         	movff	_state,?_get_state
  1716   001F7C  C052  F002         	movff	_state+1,?_get_state+1
  1717   001F80  0012               	return		;funcret
  1718   001F82                     __end_of_get_state:
  1719                           	callstack 0
  1720                           
  1721 ;; *************** function _get_color_code *****************
  1722 ;; Defined at:
  1723 ;;		line 176 in file "color.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  value           2   28[BANK0 ] unsigned int 
  1728 ;;  i               2   30[BANK0 ] unsigned int 
  1729 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1730 ;;  min_index       2   26[BANK0 ] unsigned int 
  1731 ;;  min_value       2   24[BANK0 ] unsigned int 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  2   52[COMRAM] unsigned int 
  1734 ;; Registers used:
  1735 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1741 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1742 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1744 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1745 ;;Total ram usage:       48 bytes
  1746 ;; Hardware stack levels used: 1
  1747 ;; Hardware stack levels required when called: 5
  1748 ;; This function calls:
  1749 ;;		___lldiv
  1750 ;;		___lmul
  1751 ;;		___wmul
  1752 ;;		_color_read_Blue
  1753 ;;		_color_read_Green
  1754 ;;		_color_read_Red
  1755 ;;		_get_color_distance
  1756 ;;		_set_led_color
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text5
  1763   000578                     __ptext5:
  1764                           	callstack 0
  1765   000578                     _get_color_code:
  1766                           	callstack 25
  1767   000578                     
  1768                           ;color.c: 179:     set_led_color(0b100);
  1769   000578  0E00               	movlw	0
  1770   00057A  6E02               	movwf	(set_led_color@color+1)^0,c
  1771   00057C  0E04               	movlw	4
  1772   00057E  6E01               	movwf	set_led_color@color^0,c
  1773   000580  EC05  F00F         	call	_set_led_color	;wreg free
  1774   000584                     
  1775                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1776   000584  0E12               	movlw	18
  1777   000586  6E38               	movwf	(??_get_color_code+1)^0,c
  1778   000588  0EDC               	movlw	220
  1779   00058A  6E37               	movwf	??_get_color_code^0,c
  1780   00058C  0E60               	movlw	96
  1781   00058E                     u2517:
  1782   00058E  2EE8               	decfsz	wreg,f,c
  1783   000590  D7FE               	bra	u2517
  1784   000592  2E37               	decfsz	??_get_color_code^0,f,c
  1785   000594  D7FC               	bra	u2517
  1786   000596  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1787   000598  D7FA               	bra	u2517
  1788   00059A                     
  1789                           ;color.c: 181:     RGB.R = color_read_Red();
  1790   00059A  EC1C  F00E         	call	_color_read_Red	;wreg free
  1791   00059E  C005  F0EC         	movff	?_color_read_Red,_RGB
  1792   0005A2  C006  F0ED         	movff	?_color_read_Red+1,_RGB+1
  1793   0005A6  0100               	movlb	0	; () banked
  1794   0005A8  6BEE               	clrf	(_RGB+2)& (0+255),b
  1795   0005AA  6BEF               	clrf	(_RGB+3)& (0+255),b
  1796   0005AC                     
  1797                           ; BSR set to: 0
  1798                           ;color.c: 182:     set_led_color(0b010);
  1799   0005AC  0E00               	movlw	0
  1800   0005AE  6E02               	movwf	(set_led_color@color+1)^0,c
  1801   0005B0  0E02               	movlw	2
  1802   0005B2  6E01               	movwf	set_led_color@color^0,c
  1803   0005B4  EC05  F00F         	call	_set_led_color	;wreg free
  1804   0005B8                     
  1805                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1806   0005B8  0E12               	movlw	18
  1807   0005BA  6E38               	movwf	(??_get_color_code+1)^0,c
  1808   0005BC  0EDC               	movlw	220
  1809   0005BE  6E37               	movwf	??_get_color_code^0,c
  1810   0005C0  0E60               	movlw	96
  1811   0005C2                     u2527:
  1812   0005C2  2EE8               	decfsz	wreg,f,c
  1813   0005C4  D7FE               	bra	u2527
  1814   0005C6  2E37               	decfsz	??_get_color_code^0,f,c
  1815   0005C8  D7FC               	bra	u2527
  1816   0005CA  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1817   0005CC  D7FA               	bra	u2527
  1818                           
  1819                           ;color.c: 184:     RGB.G = color_read_Green();
  1820   0005CE  EC44  F00E         	call	_color_read_Green	;wreg free
  1821   0005D2  C005  F0F0         	movff	?_color_read_Green,_RGB+4
  1822   0005D6  C006  F0F1         	movff	?_color_read_Green+1,_RGB+5
  1823   0005DA  0100               	movlb	0	; () banked
  1824   0005DC  6BF2               	clrf	(_RGB+6)& (0+255),b
  1825   0005DE  6BF3               	clrf	(_RGB+7)& (0+255),b
  1826   0005E0                     
  1827                           ; BSR set to: 0
  1828                           ;color.c: 185:     set_led_color(0b001);
  1829   0005E0  0E00               	movlw	0
  1830   0005E2  6E02               	movwf	(set_led_color@color+1)^0,c
  1831   0005E4  0E01               	movlw	1
  1832   0005E6  6E01               	movwf	set_led_color@color^0,c
  1833   0005E8  EC05  F00F         	call	_set_led_color	;wreg free
  1834   0005EC                     
  1835                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1836   0005EC  0E12               	movlw	18
  1837   0005EE  6E38               	movwf	(??_get_color_code+1)^0,c
  1838   0005F0  0EDC               	movlw	220
  1839   0005F2  6E37               	movwf	??_get_color_code^0,c
  1840   0005F4  0E60               	movlw	96
  1841   0005F6                     u2537:
  1842   0005F6  2EE8               	decfsz	wreg,f,c
  1843   0005F8  D7FE               	bra	u2537
  1844   0005FA  2E37               	decfsz	??_get_color_code^0,f,c
  1845   0005FC  D7FC               	bra	u2537
  1846   0005FE  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1847   000600  D7FA               	bra	u2537
  1848   000602                     
  1849                           ;color.c: 187:     RGB.B = color_read_Blue();
  1850   000602  EC94  F00E         	call	_color_read_Blue	;wreg free
  1851   000606  C005  F0F4         	movff	?_color_read_Blue,_RGB+8
  1852   00060A  C006  F0F5         	movff	?_color_read_Blue+1,_RGB+9
  1853   00060E  0100               	movlb	0	; () banked
  1854   000610  6BF6               	clrf	(_RGB+10)& (0+255),b
  1855   000612  6BF7               	clrf	(_RGB+11)& (0+255),b
  1856   000614                     
  1857                           ; BSR set to: 0
  1858                           ;color.c: 188:     set_led_color(0b000);
  1859   000614  0E00               	movlw	0
  1860   000616  6E02               	movwf	(set_led_color@color+1)^0,c
  1861   000618  0E00               	movlw	0
  1862   00061A  6E01               	movwf	set_led_color@color^0,c
  1863   00061C  EC05  F00F         	call	_set_led_color	;wreg free
  1864   000620                     
  1865                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1866   000620  0100               	movlb	0	; () banked
  1867   000622  5160               	movf	_Black_setup& (0+255),w,b
  1868   000624  5DEC               	subwf	_RGB& (0+255),w,b
  1869   000626  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1870   000628  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  1871   00062A  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1872   00062C  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  1873   00062E  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1874   000630  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  1875   000632  B0D8               	btfsc	status,0,c
  1876   000634  EF1E  F003         	goto	u1711
  1877   000638  EF20  F003         	goto	u1710
  1878   00063C                     u1711:
  1879   00063C  EF2A  F003         	goto	l2740
  1880   000640                     u1710:
  1881   000640                     
  1882                           ; BSR set to: 0
  1883   000640  0E00               	movlw	0
  1884   000642  6FCC               	movwf	_get_color_code$458& (0+255),b
  1885   000644  0E00               	movlw	0
  1886   000646  6FCD               	movwf	(_get_color_code$458+1)& (0+255),b
  1887   000648  0E00               	movlw	0
  1888   00064A  6FCE               	movwf	(_get_color_code$458+2)& (0+255),b
  1889   00064C  0E00               	movlw	0
  1890   00064E  6FCF               	movwf	(_get_color_code$458+3)& (0+255),b
  1891   000650  EF5F  F003         	goto	l2742
  1892   000654                     l2740:
  1893                           
  1894                           ; BSR set to: 0
  1895   000654  5160               	movf	_Black_setup& (0+255),w,b
  1896   000656  5DEC               	subwf	_RGB& (0+255),w,b
  1897   000658  6E01               	movwf	___lmul@multiplier^0,c
  1898   00065A  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1899   00065C  59ED               	subwfb	(_RGB+1)& (0+255),w,b
  1900   00065E  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1901   000660  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1902   000662  59EE               	subwfb	(_RGB+2)& (0+255),w,b
  1903   000664  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1904   000666  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1905   000668  59EF               	subwfb	(_RGB+3)& (0+255),w,b
  1906   00066A  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1907   00066C  0E64               	movlw	100
  1908   00066E  6E05               	movwf	___lmul@multiplicand^0,c
  1909   000670  0E00               	movlw	0
  1910   000672  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1911   000674  0E00               	movlw	0
  1912   000676  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1913   000678  0E00               	movlw	0
  1914   00067A  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1915   00067C  EC8A  F00D         	call	___lmul	;wreg free
  1916   000680  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1917   000684  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1918   000688  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1919   00068C  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1920   000690  0100               	movlb	0	; () banked
  1921   000692  5160               	movf	_Black_setup& (0+255),w,b
  1922   000694  5D6C               	subwf	_White_setup& (0+255),w,b
  1923   000696  6E11               	movwf	___lldiv@divisor^0,c
  1924   000698  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1925   00069A  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  1926   00069C  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1927   00069E  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1928   0006A0  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  1929   0006A2  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1930   0006A4  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1931   0006A6  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  1932   0006A8  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1933   0006AA  ECA7  F00B         	call	___lldiv	;wreg free
  1934   0006AE  C00D  F0CC         	movff	?___lldiv,_get_color_code$458
  1935   0006B2  C00E  F0CD         	movff	?___lldiv+1,_get_color_code$458+1
  1936   0006B6  C00F  F0CE         	movff	?___lldiv+2,_get_color_code$458+2
  1937   0006BA  C010  F0CF         	movff	?___lldiv+3,_get_color_code$458+3
  1938   0006BE                     l2742:
  1939   0006BE  C0CC  F0E0         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  1940   0006C2  C0CD  F0E1         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  1941   0006C6  C0CE  F0E2         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  1942   0006CA  C0CF  F0E3         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  1943   0006CE                     
  1944                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  1945   0006CE  0100               	movlb	0	; () banked
  1946   0006D0  5164               	movf	(_Black_setup+4)& (0+255),w,b
  1947   0006D2  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  1948   0006D4  5165               	movf	(_Black_setup+5)& (0+255),w,b
  1949   0006D6  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  1950   0006D8  5166               	movf	(_Black_setup+6)& (0+255),w,b
  1951   0006DA  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  1952   0006DC  5167               	movf	(_Black_setup+7)& (0+255),w,b
  1953   0006DE  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  1954   0006E0  B0D8               	btfsc	status,0,c
  1955   0006E2  EF75  F003         	goto	u1721
  1956   0006E6  EF77  F003         	goto	u1720
  1957   0006EA                     u1721:
  1958   0006EA  EF81  F003         	goto	l2748
  1959   0006EE                     u1720:
  1960   0006EE                     
  1961                           ; BSR set to: 0
  1962   0006EE  0E00               	movlw	0
  1963   0006F0  6FD0               	movwf	_get_color_code$459& (0+255),b
  1964   0006F2  0E00               	movlw	0
  1965   0006F4  6FD1               	movwf	(_get_color_code$459+1)& (0+255),b
  1966   0006F6  0E00               	movlw	0
  1967   0006F8  6FD2               	movwf	(_get_color_code$459+2)& (0+255),b
  1968   0006FA  0E00               	movlw	0
  1969   0006FC  6FD3               	movwf	(_get_color_code$459+3)& (0+255),b
  1970   0006FE  EFB6  F003         	goto	l2750
  1971   000702                     l2748:
  1972                           
  1973                           ; BSR set to: 0
  1974   000702  5164               	movf	(_Black_setup+4)& (0+255),w,b
  1975   000704  5DF0               	subwf	(_RGB+4)& (0+255),w,b
  1976   000706  6E01               	movwf	___lmul@multiplier^0,c
  1977   000708  5165               	movf	(_Black_setup+5)& (0+255),w,b
  1978   00070A  59F1               	subwfb	(_RGB+5)& (0+255),w,b
  1979   00070C  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1980   00070E  5166               	movf	(_Black_setup+6)& (0+255),w,b
  1981   000710  59F2               	subwfb	(_RGB+6)& (0+255),w,b
  1982   000712  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1983   000714  5167               	movf	(_Black_setup+7)& (0+255),w,b
  1984   000716  59F3               	subwfb	(_RGB+7)& (0+255),w,b
  1985   000718  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1986   00071A  0E64               	movlw	100
  1987   00071C  6E05               	movwf	___lmul@multiplicand^0,c
  1988   00071E  0E00               	movlw	0
  1989   000720  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1990   000722  0E00               	movlw	0
  1991   000724  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1992   000726  0E00               	movlw	0
  1993   000728  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1994   00072A  EC8A  F00D         	call	___lmul	;wreg free
  1995   00072E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1996   000732  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1997   000736  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1998   00073A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1999   00073E  0100               	movlb	0	; () banked
  2000   000740  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2001   000742  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2002   000744  6E11               	movwf	___lldiv@divisor^0,c
  2003   000746  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2004   000748  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2005   00074A  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2006   00074C  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2007   00074E  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2008   000750  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2009   000752  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2010   000754  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2011   000756  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2012   000758  ECA7  F00B         	call	___lldiv	;wreg free
  2013   00075C  C00D  F0D0         	movff	?___lldiv,_get_color_code$459
  2014   000760  C00E  F0D1         	movff	?___lldiv+1,_get_color_code$459+1
  2015   000764  C00F  F0D2         	movff	?___lldiv+2,_get_color_code$459+2
  2016   000768  C010  F0D3         	movff	?___lldiv+3,_get_color_code$459+3
  2017   00076C                     l2750:
  2018   00076C  C0D0  F0E4         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  2019   000770  C0D1  F0E5         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  2020   000774  C0D2  F0E6         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  2021   000778  C0D3  F0E7         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  2022   00077C                     
  2023                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2024   00077C  0100               	movlb	0	; () banked
  2025   00077E  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2026   000780  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2027   000782  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2028   000784  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2029   000786  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2030   000788  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2031   00078A  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2032   00078C  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2033   00078E  B0D8               	btfsc	status,0,c
  2034   000790  EFCC  F003         	goto	u1731
  2035   000794  EFCE  F003         	goto	u1730
  2036   000798                     u1731:
  2037   000798  EFD8  F003         	goto	l2756
  2038   00079C                     u1730:
  2039   00079C                     
  2040                           ; BSR set to: 0
  2041   00079C  0E00               	movlw	0
  2042   00079E  6FD4               	movwf	_get_color_code$460& (0+255),b
  2043   0007A0  0E00               	movlw	0
  2044   0007A2  6FD5               	movwf	(_get_color_code$460+1)& (0+255),b
  2045   0007A4  0E00               	movlw	0
  2046   0007A6  6FD6               	movwf	(_get_color_code$460+2)& (0+255),b
  2047   0007A8  0E00               	movlw	0
  2048   0007AA  6FD7               	movwf	(_get_color_code$460+3)& (0+255),b
  2049   0007AC  EF0D  F004         	goto	l2758
  2050   0007B0                     l2756:
  2051                           
  2052                           ; BSR set to: 0
  2053   0007B0  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2054   0007B2  5DF4               	subwf	(_RGB+8)& (0+255),w,b
  2055   0007B4  6E01               	movwf	___lmul@multiplier^0,c
  2056   0007B6  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2057   0007B8  59F5               	subwfb	(_RGB+9)& (0+255),w,b
  2058   0007BA  6E02               	movwf	(___lmul@multiplier+1)^0,c
  2059   0007BC  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2060   0007BE  59F6               	subwfb	(_RGB+10)& (0+255),w,b
  2061   0007C0  6E03               	movwf	(___lmul@multiplier+2)^0,c
  2062   0007C2  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2063   0007C4  59F7               	subwfb	(_RGB+11)& (0+255),w,b
  2064   0007C6  6E04               	movwf	(___lmul@multiplier+3)^0,c
  2065   0007C8  0E64               	movlw	100
  2066   0007CA  6E05               	movwf	___lmul@multiplicand^0,c
  2067   0007CC  0E00               	movlw	0
  2068   0007CE  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  2069   0007D0  0E00               	movlw	0
  2070   0007D2  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  2071   0007D4  0E00               	movlw	0
  2072   0007D6  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  2073   0007D8  EC8A  F00D         	call	___lmul	;wreg free
  2074   0007DC  C001  F00D         	movff	?___lmul,___lldiv@dividend
  2075   0007E0  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  2076   0007E4  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  2077   0007E8  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  2078   0007EC  0100               	movlb	0	; () banked
  2079   0007EE  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2080   0007F0  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2081   0007F2  6E11               	movwf	___lldiv@divisor^0,c
  2082   0007F4  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2083   0007F6  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2084   0007F8  6E12               	movwf	(___lldiv@divisor+1)^0,c
  2085   0007FA  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2086   0007FC  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2087   0007FE  6E13               	movwf	(___lldiv@divisor+2)^0,c
  2088   000800  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2089   000802  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2090   000804  6E14               	movwf	(___lldiv@divisor+3)^0,c
  2091   000806  ECA7  F00B         	call	___lldiv	;wreg free
  2092   00080A  C00D  F0D4         	movff	?___lldiv,_get_color_code$460
  2093   00080E  C00E  F0D5         	movff	?___lldiv+1,_get_color_code$460+1
  2094   000812  C00F  F0D6         	movff	?___lldiv+2,_get_color_code$460+2
  2095   000816  C010  F0D7         	movff	?___lldiv+3,_get_color_code$460+3
  2096   00081A                     l2758:
  2097   00081A  C0D4  F0E8         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  2098   00081E  C0D5  F0E9         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  2099   000822  C0D6  F0EA         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  2100   000826  C0D7  F0EB         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  2101   00082A                     
  2102                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2103   00082A  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2104   00082E  EE00  F007         	lfsr	0,get_color_distance@color1
  2105   000832  0E0B               	movlw	11
  2106   000834                     u1741:
  2107   000834  CFDB FFEB          	movff	plusw2,plusw0
  2108   000838  06E8               	decf	wreg,f,c
  2109   00083A  E2FC               	bc	u1741
  2110   00083C  EE21  F000         	lfsr	2,_Color_rules
  2111   000840  EE00  F013         	lfsr	0,get_color_distance@color2
  2112   000844  0E0B               	movlw	11
  2113   000846                     u1751:
  2114   000846  CFDB FFEB          	movff	plusw2,plusw0
  2115   00084A  06E8               	decf	wreg,f,c
  2116   00084C  E2FC               	bc	u1751
  2117   00084E  EC2E  F006         	call	_get_color_distance	;wreg free
  2118   000852  C007  F0D8         	movff	?_get_color_distance,get_color_code@min_value
  2119   000856  C008  F0D9         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2120   00085A                     
  2121                           ;color.c: 196:     unsigned int min_index = 0;
  2122   00085A  0E00               	movlw	0
  2123   00085C  0100               	movlb	0	; () banked
  2124   00085E  6FDB               	movwf	(get_color_code@min_index+1)& (0+255),b
  2125   000860  0E00               	movlw	0
  2126   000862  6FDA               	movwf	get_color_code@min_index& (0+255),b
  2127   000864                     
  2128                           ; BSR set to: 0
  2129                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  2130   000864  0E00               	movlw	0
  2131   000866  6FDF               	movwf	(get_color_code@i+1)& (0+255),b
  2132   000868  0E01               	movlw	1
  2133   00086A  6FDE               	movwf	get_color_code@i& (0+255),b
  2134   00086C                     l2770:
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2138   00086C  C0DE  F001         	movff	get_color_code@i,___wmul@multiplier
  2139   000870  C0DF  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  2140   000874  0E00               	movlw	0
  2141   000876  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2142   000878  0E0C               	movlw	12
  2143   00087A  6E03               	movwf	___wmul@multiplicand^0,c
  2144   00087C  EC71  F00F         	call	___wmul	;wreg free
  2145   000880  0E00               	movlw	low _Color_rules
  2146   000882  2401               	addwf	?___wmul^0,w,c
  2147   000884  6ED9               	movwf	fsr2l,c
  2148   000886  0E01               	movlw	high _Color_rules
  2149   000888  2002               	addwfc	(?___wmul+1)^0,w,c
  2150   00088A  6EDA               	movwf	fsr2h,c
  2151   00088C  EE10  F0C0         	lfsr	1,_get_color_code$2441
  2152   000890  0E0B               	movlw	11
  2153   000892                     u1761:
  2154   000892  CFDB FFE3          	movff	plusw2,plusw1
  2155   000896  06E8               	decf	wreg,f,c
  2156   000898  E2FC               	bc	u1761
  2157   00089A                     
  2158                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2159   00089A  EE20  F0E0         	lfsr	2,get_color_code@NormalizedRGB
  2160   00089E  EE00  F007         	lfsr	0,get_color_distance@color1
  2161   0008A2  0E0B               	movlw	11
  2162   0008A4                     u1771:
  2163   0008A4  CFDB FFEB          	movff	plusw2,plusw0
  2164   0008A8  06E8               	decf	wreg,f,c
  2165   0008AA  E2FC               	bc	u1771
  2166   0008AC  EE20  F0C0         	lfsr	2,_get_color_code$2441
  2167   0008B0  EE00  F013         	lfsr	0,get_color_distance@color2
  2168   0008B4  0E0B               	movlw	11
  2169   0008B6                     u1781:
  2170   0008B6  CFDB FFEB          	movff	plusw2,plusw0
  2171   0008BA  06E8               	decf	wreg,f,c
  2172   0008BC  E2FC               	bc	u1781
  2173   0008BE  EC2E  F006         	call	_get_color_distance	;wreg free
  2174   0008C2  C007  F0DC         	movff	?_get_color_distance,get_color_code@value
  2175   0008C6  C008  F0DD         	movff	?_get_color_distance+1,get_color_code@value+1
  2176   0008CA                     
  2177                           ;color.c: 199:         if(value < min_value){
  2178   0008CA  0100               	movlb	0	; () banked
  2179   0008CC  51D8               	movf	get_color_code@min_value& (0+255),w,b
  2180   0008CE  5DDC               	subwf	get_color_code@value& (0+255),w,b
  2181   0008D0  51D9               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2182   0008D2  59DD               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2183   0008D4  B0D8               	btfsc	status,0,c
  2184   0008D6  EF6F  F004         	goto	u1791
  2185   0008DA  EF71  F004         	goto	u1790
  2186   0008DE                     u1791:
  2187   0008DE  EF79  F004         	goto	l2778
  2188   0008E2                     u1790:
  2189   0008E2                     
  2190                           ; BSR set to: 0
  2191                           ;color.c: 200:             min_index = i;
  2192   0008E2  C0DE  F0DA         	movff	get_color_code@i,get_color_code@min_index
  2193   0008E6  C0DF  F0DB         	movff	get_color_code@i+1,get_color_code@min_index+1
  2194                           
  2195                           ;color.c: 201:             min_value = value;
  2196   0008EA  C0DC  F0D8         	movff	get_color_code@value,get_color_code@min_value
  2197   0008EE  C0DD  F0D9         	movff	get_color_code@value+1,get_color_code@min_value+1
  2198   0008F2                     l2778:
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;color.c: 203:     }
  2202   0008F2  4BDE               	infsnz	get_color_code@i& (0+255),f,b
  2203   0008F4  2BDF               	incf	(get_color_code@i+1)& (0+255),f,b
  2204   0008F6                     
  2205                           ; BSR set to: 0
  2206   0008F6  51DF               	movf	(get_color_code@i+1)& (0+255),w,b
  2207   0008F8  E109               	bnz	u1800
  2208   0008FA  0E09               	movlw	9
  2209   0008FC  5DDE               	subwf	get_color_code@i& (0+255),w,b
  2210   0008FE  A0D8               	btfss	status,0,c
  2211   000900  EF84  F004         	goto	u1801
  2212   000904  EF86  F004         	goto	u1800
  2213   000908                     u1801:
  2214   000908  EF36  F004         	goto	l2770
  2215   00090C                     u1800:
  2216   00090C                     
  2217                           ; BSR set to: 0
  2218                           ;color.c: 204:     return min_index;
  2219   00090C  C0DA  F035         	movff	get_color_code@min_index,?_get_color_code
  2220   000910  C0DB  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  2221   000914                     
  2222                           ; BSR set to: 0
  2223   000914  0012               	return		;funcret
  2224   000916                     __end_of_get_color_code:
  2225                           	callstack 0
  2226                           
  2227 ;; *************** function _get_color_distance *****************
  2228 ;; Defined at:
  2229 ;;		line 146 in file "color.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  color1         12    6[COMRAM] struct RGB_val
  2232 ;;  color2         12   18[COMRAM] struct RGB_val
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  B_offset        2   50[COMRAM] unsigned int 
  2235 ;;  G_offset        2   48[COMRAM] unsigned int 
  2236 ;;  R_offset        2   46[COMRAM] unsigned int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  2    6[COMRAM] unsigned int 
  2239 ;; Registers used:
  2240 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2246 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2247 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2248 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2249 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2250 ;;Total ram usage:       46 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; Hardware stack levels required when called: 3
  2253 ;; This function calls:
  2254 ;;		___wmul
  2255 ;; This function is called by:
  2256 ;;		_get_color_code
  2257 ;; This function uses a non-reentrant model
  2258 ;;
  2259                           
  2260                           	psect	text6
  2261   000C5C                     __ptext6:
  2262                           	callstack 0
  2263   000C5C                     _get_color_distance:
  2264                           	callstack 26
  2265   000C5C                     
  2266                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2267   000C5C  5013               	movf	get_color_distance@color2^0,w,c
  2268   000C5E  5C07               	subwf	get_color_distance@color1^0,w,c
  2269   000C60  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2270   000C62  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2271   000C64  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2272   000C66  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2273   000C68  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2274   000C6A  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2275   000C6C  B0D8               	btfsc	status,0,c
  2276   000C6E  EF3B  F006         	goto	u1371
  2277   000C72  EF3D  F006         	goto	u1370
  2278   000C76                     u1371:
  2279   000C76  EF4B  F006         	goto	l2384
  2280   000C7A                     u1370:
  2281   000C7A  5007               	movf	get_color_distance@color1^0,w,c
  2282   000C7C  5C13               	subwf	get_color_distance@color2^0,w,c
  2283   000C7E  6E23               	movwf	_get_color_distance$417^0,c
  2284   000C80  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2285   000C82  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2286   000C84  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2287   000C86  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2288   000C88  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2289   000C8A  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2290   000C8C  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2291   000C8E  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2292   000C90  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2293   000C92  EF57  F006         	goto	l2386
  2294   000C96                     l2384:
  2295   000C96  5013               	movf	get_color_distance@color2^0,w,c
  2296   000C98  5C07               	subwf	get_color_distance@color1^0,w,c
  2297   000C9A  6E23               	movwf	_get_color_distance$417^0,c
  2298   000C9C  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2299   000C9E  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2300   000CA0  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2301   000CA2  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2302   000CA4  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2303   000CA6  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2304   000CA8  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2305   000CAA  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2306   000CAC  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2307   000CAE                     l2386:
  2308   000CAE  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2309   000CB2  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2310                           
  2311                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2312   000CB6  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2313   000CB8  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2314   000CBA  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2315   000CBC  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2316   000CBE  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2317   000CC0  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2318   000CC2  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2319   000CC4  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2320   000CC6  B0D8               	btfsc	status,0,c
  2321   000CC8  EF68  F006         	goto	u1381
  2322   000CCC  EF6A  F006         	goto	u1380
  2323   000CD0                     u1381:
  2324   000CD0  EF78  F006         	goto	l2390
  2325   000CD4                     u1380:
  2326   000CD4  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2327   000CD6  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2328   000CD8  6E27               	movwf	_get_color_distance$419^0,c
  2329   000CDA  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2330   000CDC  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2331   000CDE  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2332   000CE0  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2333   000CE2  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2334   000CE4  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2335   000CE6  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2336   000CE8  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2337   000CEA  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2338   000CEC  EF84  F006         	goto	l2392
  2339   000CF0                     l2390:
  2340   000CF0  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2341   000CF2  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2342   000CF4  6E27               	movwf	_get_color_distance$419^0,c
  2343   000CF6  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2344   000CF8  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2345   000CFA  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2346   000CFC  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2347   000CFE  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2348   000D00  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2349   000D02  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2350   000D04  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2351   000D06  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2352   000D08                     l2392:
  2353   000D08  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2354   000D0C  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2355                           
  2356                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2357   000D10  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2358   000D12  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2359   000D14  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2360   000D16  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2361   000D18  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2362   000D1A  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2363   000D1C  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2364   000D1E  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2365   000D20  B0D8               	btfsc	status,0,c
  2366   000D22  EF95  F006         	goto	u1391
  2367   000D26  EF97  F006         	goto	u1390
  2368   000D2A                     u1391:
  2369   000D2A  EFA5  F006         	goto	l2396
  2370   000D2E                     u1390:
  2371   000D2E  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2372   000D30  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2373   000D32  6E2B               	movwf	_get_color_distance$421^0,c
  2374   000D34  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2375   000D36  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2376   000D38  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2377   000D3A  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2378   000D3C  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2379   000D3E  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2380   000D40  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2381   000D42  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2382   000D44  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2383   000D46  EFB1  F006         	goto	l2398
  2384   000D4A                     l2396:
  2385   000D4A  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2386   000D4C  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2387   000D4E  6E2B               	movwf	_get_color_distance$421^0,c
  2388   000D50  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2389   000D52  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2390   000D54  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2391   000D56  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2392   000D58  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2393   000D5A  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2394   000D5C  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2395   000D5E  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2396   000D60  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2397   000D62                     l2398:
  2398   000D62  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2399   000D66  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2400   000D6A                     
  2401                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2402   000D6A  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2403   000D6E  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2404   000D72  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2405   000D76  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2406   000D7A  EC71  F00F         	call	___wmul	;wreg free
  2407   000D7E  C001  F01F         	movff	?___wmul,??_get_color_distance
  2408   000D82  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2409   000D86  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2410   000D8A  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2411   000D8E  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2412   000D92  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2413   000D96  EC71  F00F         	call	___wmul	;wreg free
  2414   000D9A  5001               	movf	?___wmul^0,w,c
  2415   000D9C  241F               	addwf	??_get_color_distance^0,w,c
  2416   000D9E  6E21               	movwf	(??_get_color_distance+2)^0,c
  2417   000DA0  5002               	movf	(?___wmul+1)^0,w,c
  2418   000DA2  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2419   000DA4  6E22               	movwf	(??_get_color_distance+3)^0,c
  2420   000DA6  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2421   000DAA  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2422   000DAE  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2423   000DB2  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2424   000DB6  EC71  F00F         	call	___wmul	;wreg free
  2425   000DBA  5001               	movf	?___wmul^0,w,c
  2426   000DBC  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2427   000DBE  6E07               	movwf	?_get_color_distance^0,c
  2428   000DC0  5002               	movf	(?___wmul+1)^0,w,c
  2429   000DC2  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2430   000DC4  6E08               	movwf	(?_get_color_distance+1)^0,c
  2431   000DC6  0012               	return		;funcret
  2432   000DC8                     __end_of_get_color_distance:
  2433                           	callstack 0
  2434                           
  2435 ;; *************** function ___lmul *****************
  2436 ;; Defined at:
  2437 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  multiplier      4    0[COMRAM] unsigned long 
  2440 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;  product         4    8[COMRAM] unsigned long 
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  4    0[COMRAM] unsigned long 
  2445 ;; Registers used:
  2446 ;;		wreg, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2452 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2453 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2455 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2456 ;;Total ram usage:       12 bytes
  2457 ;; Hardware stack levels used: 1
  2458 ;; Hardware stack levels required when called: 2
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_get_color_code
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text7
  2467   001B14                     __ptext7:
  2468                           	callstack 0
  2469   001B14                     ___lmul:
  2470                           	callstack 27
  2471   001B14  0E00               	movlw	0
  2472   001B16  6E09               	movwf	___lmul@product^0,c
  2473   001B18  0E00               	movlw	0
  2474   001B1A  6E0A               	movwf	(___lmul@product+1)^0,c
  2475   001B1C  0E00               	movlw	0
  2476   001B1E  6E0B               	movwf	(___lmul@product+2)^0,c
  2477   001B20  0E00               	movlw	0
  2478   001B22  6E0C               	movwf	(___lmul@product+3)^0,c
  2479   001B24                     l2638:
  2480   001B24  A001               	btfss	___lmul@multiplier^0,0,c
  2481   001B26  EF97  F00D         	goto	u1521
  2482   001B2A  EF99  F00D         	goto	u1520
  2483   001B2E                     u1521:
  2484   001B2E  EFA1  F00D         	goto	l2642
  2485   001B32                     u1520:
  2486   001B32  5005               	movf	___lmul@multiplicand^0,w,c
  2487   001B34  2609               	addwf	___lmul@product^0,f,c
  2488   001B36  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2489   001B38  220A               	addwfc	(___lmul@product+1)^0,f,c
  2490   001B3A  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2491   001B3C  220B               	addwfc	(___lmul@product+2)^0,f,c
  2492   001B3E  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2493   001B40  220C               	addwfc	(___lmul@product+3)^0,f,c
  2494   001B42                     l2642:
  2495   001B42  90D8               	bcf	status,0,c
  2496   001B44  3605               	rlcf	___lmul@multiplicand^0,f,c
  2497   001B46  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2498   001B48  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2499   001B4A  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2500   001B4C  90D8               	bcf	status,0,c
  2501   001B4E  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2502   001B50  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2503   001B52  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2504   001B54  3201               	rrcf	___lmul@multiplier^0,f,c
  2505   001B56  5001               	movf	___lmul@multiplier^0,w,c
  2506   001B58  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2507   001B5A  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2508   001B5C  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2509   001B5E  A4D8               	btfss	status,2,c
  2510   001B60  EFB4  F00D         	goto	u1531
  2511   001B64  EFB6  F00D         	goto	u1530
  2512   001B68                     u1531:
  2513   001B68  EF92  F00D         	goto	l2638
  2514   001B6C                     u1530:
  2515   001B6C  C009  F001         	movff	___lmul@product,?___lmul
  2516   001B70  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2517   001B74  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2518   001B78  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2519   001B7C  0012               	return		;funcret
  2520   001B7E                     __end_of___lmul:
  2521                           	callstack 0
  2522                           
  2523 ;; *************** function ___lldiv *****************
  2524 ;; Defined at:
  2525 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  dividend        4   12[COMRAM] unsigned long 
  2528 ;;  divisor         4   16[COMRAM] unsigned long 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  quotient        4   20[COMRAM] unsigned long 
  2531 ;;  counter         1   24[COMRAM] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  4   12[COMRAM] unsigned long 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2541 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2542 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2544 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2545 ;;Total ram usage:       13 bytes
  2546 ;; Hardware stack levels used: 1
  2547 ;; Hardware stack levels required when called: 2
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_get_color_code
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text8
  2556   00174E                     __ptext8:
  2557                           	callstack 0
  2558   00174E                     ___lldiv:
  2559                           	callstack 27
  2560   00174E  0E00               	movlw	0
  2561   001750  6E15               	movwf	___lldiv@quotient^0,c
  2562   001752  0E00               	movlw	0
  2563   001754  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2564   001756  0E00               	movlw	0
  2565   001758  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2566   00175A  0E00               	movlw	0
  2567   00175C  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2568   00175E  5011               	movf	___lldiv@divisor^0,w,c
  2569   001760  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2570   001762  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2571   001764  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2572   001766  B4D8               	btfsc	status,2,c
  2573   001768  EFB8  F00B         	goto	u1541
  2574   00176C  EFBA  F00B         	goto	u1540
  2575   001770                     u1541:
  2576   001770  EFF0  F00B         	goto	l478
  2577   001774                     u1540:
  2578   001774  0E01               	movlw	1
  2579   001776  6E19               	movwf	___lldiv@counter^0,c
  2580   001778  EFC4  F00B         	goto	l2654
  2581   00177C                     l2652:
  2582   00177C  90D8               	bcf	status,0,c
  2583   00177E  3611               	rlcf	___lldiv@divisor^0,f,c
  2584   001780  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2585   001782  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2586   001784  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2587   001786  2A19               	incf	___lldiv@counter^0,f,c
  2588   001788                     l2654:
  2589   001788  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2590   00178A  EFC9  F00B         	goto	u1551
  2591   00178E  EFCB  F00B         	goto	u1550
  2592   001792                     u1551:
  2593   001792  EFBE  F00B         	goto	l2652
  2594   001796                     u1550:
  2595   001796                     l2656:
  2596   001796  90D8               	bcf	status,0,c
  2597   001798  3615               	rlcf	___lldiv@quotient^0,f,c
  2598   00179A  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2599   00179C  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2600   00179E  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2601   0017A0  5011               	movf	___lldiv@divisor^0,w,c
  2602   0017A2  5C0D               	subwf	___lldiv@dividend^0,w,c
  2603   0017A4  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2604   0017A6  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2605   0017A8  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2606   0017AA  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2607   0017AC  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2608   0017AE  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2609   0017B0  A0D8               	btfss	status,0,c
  2610   0017B2  EFDD  F00B         	goto	u1561
  2611   0017B6  EFDF  F00B         	goto	u1560
  2612   0017BA                     u1561:
  2613   0017BA  EFE8  F00B         	goto	l2664
  2614   0017BE                     u1560:
  2615   0017BE  5011               	movf	___lldiv@divisor^0,w,c
  2616   0017C0  5E0D               	subwf	___lldiv@dividend^0,f,c
  2617   0017C2  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2618   0017C4  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2619   0017C6  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2620   0017C8  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2621   0017CA  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2622   0017CC  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2623   0017CE  8015               	bsf	___lldiv@quotient^0,0,c
  2624   0017D0                     l2664:
  2625   0017D0  90D8               	bcf	status,0,c
  2626   0017D2  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2627   0017D4  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2628   0017D6  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2629   0017D8  3211               	rrcf	___lldiv@divisor^0,f,c
  2630   0017DA  2E19               	decfsz	___lldiv@counter^0,f,c
  2631   0017DC  EFCB  F00B         	goto	l2656
  2632   0017E0                     l478:
  2633   0017E0  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2634   0017E4  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2635   0017E8  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2636   0017EC  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2637   0017F0  0012               	return		;funcret
  2638   0017F2                     __end_of___lldiv:
  2639                           	callstack 0
  2640                           
  2641 ;; *************** function _fullSpeedAhead *****************
  2642 ;; Defined at:
  2643 ;;		line 256 in file "dc_motor.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2646 ;;		 -> main@motorL(9), 
  2647 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2648 ;;		 -> main@motorR(9), 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;		None
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      void 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2660 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2663 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;Total ram usage:        4 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 4
  2667 ;; This function calls:
  2668 ;;		_setMotorPWM
  2669 ;; This function is called by:
  2670 ;;		_main
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text9
  2675   001BDE                     __ptext9:
  2676                           	callstack 0
  2677   001BDE                     _fullSpeedAhead:
  2678                           	callstack 26
  2679   001BDE                     
  2680                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2681   001BDE  0E00               	movlw	0
  2682   001BE0  6E56               	movwf	(_seconds+1)^0,c
  2683   001BE2  0E00               	movlw	0
  2684   001BE4  6E55               	movwf	_seconds^0,c
  2685   001BE6                     
  2686                           ;dc_motor.c: 259:     (*mL).direction=0;
  2687   001BE6  EE20 F001          	lfsr	2,1
  2688   001BEA  5014               	movf	fullSpeedAhead@mL^0,w,c
  2689   001BEC  26D9               	addwf	fsr2l,f,c
  2690   001BEE  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2691   001BF0  22DA               	addwfc	fsr2h,f,c
  2692   001BF2  0E00               	movlw	0
  2693   001BF4  6EDF               	movwf	indf2,c
  2694   001BF6                     
  2695                           ;dc_motor.c: 260:     (*mR).direction=0;
  2696   001BF6  EE20 F001          	lfsr	2,1
  2697   001BFA  5016               	movf	fullSpeedAhead@mR^0,w,c
  2698   001BFC  26D9               	addwf	fsr2l,f,c
  2699   001BFE  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2700   001C00  22DA               	addwfc	fsr2h,f,c
  2701   001C02  0E00               	movlw	0
  2702   001C04  6EDF               	movwf	indf2,c
  2703   001C06                     
  2704                           ;dc_motor.c: 261:     (*mL).power=50;
  2705   001C06  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2706   001C0A  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2707   001C0E  0E32               	movlw	50
  2708   001C10  6EDF               	movwf	indf2,c
  2709   001C12                     
  2710                           ;dc_motor.c: 262:     (*mR).power=50;
  2711   001C12  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2712   001C16  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2713   001C1A  0E32               	movlw	50
  2714   001C1C  6EDF               	movwf	indf2,c
  2715   001C1E                     
  2716                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2717   001C1E  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2718   001C22  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2719   001C26  ECE4  F006         	call	_setMotorPWM	;wreg free
  2720   001C2A                     
  2721                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2722   001C2A  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2723   001C2E  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2724   001C32  ECE4  F006         	call	_setMotorPWM	;wreg free
  2725   001C36  0012               	return		;funcret
  2726   001C38                     __end_of_fullSpeedAhead:
  2727                           	callstack 0
  2728                           
  2729 ;; *************** function _color_click_init *****************
  2730 ;; Defined at:
  2731 ;;		line 30 in file "color.c"
  2732 ;; Parameters:    Size  Location     Type
  2733 ;;		None
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;		None
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2748 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2749 ;;Total ram usage:        1 bytes
  2750 ;; Hardware stack levels used: 1
  2751 ;; Hardware stack levels required when called: 6
  2752 ;; This function calls:
  2753 ;;		_I2C_2_Master_Init
  2754 ;;		_calibrate_black
  2755 ;;		_calibrate_white
  2756 ;;		_color_writetoaddr
  2757 ;; This function is called by:
  2758 ;;		_main
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text10
  2763   00131C                     __ptext10:
  2764                           	callstack 0
  2765   00131C                     _color_click_init:
  2766                           	callstack 24
  2767   00131C                     
  2768                           ;color.c: 33:     I2C_2_Master_Init();
  2769   00131C  EC48  F00F         	call	_I2C_2_Master_Init	;wreg free
  2770   001320                     
  2771                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2772   001320  0E01               	movlw	1
  2773   001322  6E03               	movwf	color_writetoaddr@value^0,c
  2774   001324  0E00               	movlw	0
  2775   001326  EC84  F00F         	call	_color_writetoaddr
  2776   00132A                     
  2777                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2778   00132A  0E3F               	movlw	63
  2779   00132C  6E16               	movwf	??_color_click_init^0,c
  2780   00132E  0E55               	movlw	85
  2781   001330                     u2547:
  2782   001330  2EE8               	decfsz	wreg,f,c
  2783   001332  D7FE               	bra	u2547
  2784   001334  2E16               	decfsz	??_color_click_init^0,f,c
  2785   001336  D7FC               	bra	u2547
  2786   001338  F000               	nop	
  2787   00133A                     
  2788                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2789   00133A  0E03               	movlw	3
  2790   00133C  6E03               	movwf	color_writetoaddr@value^0,c
  2791   00133E  0E00               	movlw	0
  2792   001340  EC84  F00F         	call	_color_writetoaddr
  2793   001344                     
  2794                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2795   001344  0ED5               	movlw	213
  2796   001346  6E03               	movwf	color_writetoaddr@value^0,c
  2797   001348  0E01               	movlw	1
  2798   00134A  EC84  F00F         	call	_color_writetoaddr
  2799   00134E                     
  2800                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2801   00134E  9E86               	bcf	134,7,c	;volatile
  2802   001350                     
  2803                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2804   001350  9287               	bcf	135,1,c	;volatile
  2805   001352                     
  2806                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2807   001352  9881               	bcf	129,4,c	;volatile
  2808   001354                     
  2809                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2810   001354  EE20  F0B4         	lfsr	2,_Red_rule
  2811   001358  EE11  F000         	lfsr	1,_Color_rules
  2812   00135C  0E0B               	movlw	11
  2813   00135E                     u1571:
  2814   00135E  CFDB FFE3          	movff	plusw2,plusw1
  2815   001362  06E8               	decf	wreg,f,c
  2816   001364  E2FC               	bc	u1571
  2817   001366                     
  2818                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2819   001366  EE20  F0A8         	lfsr	2,_Green_rule
  2820   00136A  EE11  F00C         	lfsr	1,_Color_rules+12
  2821   00136E  0E0B               	movlw	11
  2822   001370                     u1581:
  2823   001370  CFDB FFE3          	movff	plusw2,plusw1
  2824   001374  06E8               	decf	wreg,f,c
  2825   001376  E2FC               	bc	u1581
  2826   001378                     
  2827                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2828   001378  EE20  F09C         	lfsr	2,_Blue_rule
  2829   00137C  EE11  F018         	lfsr	1,_Color_rules+24
  2830   001380  0E0B               	movlw	11
  2831   001382                     u1591:
  2832   001382  CFDB FFE3          	movff	plusw2,plusw1
  2833   001386  06E8               	decf	wreg,f,c
  2834   001388  E2FC               	bc	u1591
  2835   00138A                     
  2836                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2837   00138A  EE20  F090         	lfsr	2,_Yellow_rule
  2838   00138E  EE11  F024         	lfsr	1,_Color_rules+36
  2839   001392  0E0B               	movlw	11
  2840   001394                     u1601:
  2841   001394  CFDB FFE3          	movff	plusw2,plusw1
  2842   001398  06E8               	decf	wreg,f,c
  2843   00139A  E2FC               	bc	u1601
  2844   00139C                     
  2845                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2846   00139C  EE20  F084         	lfsr	2,_Pink_rule
  2847   0013A0  EE11  F030         	lfsr	1,_Color_rules+48
  2848   0013A4  0E0B               	movlw	11
  2849   0013A6                     u1611:
  2850   0013A6  CFDB FFE3          	movff	plusw2,plusw1
  2851   0013AA  06E8               	decf	wreg,f,c
  2852   0013AC  E2FC               	bc	u1611
  2853   0013AE                     
  2854                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2855   0013AE  EE20  F078         	lfsr	2,_Orange_rule
  2856   0013B2  EE11  F03C         	lfsr	1,_Color_rules+60
  2857   0013B6  0E0B               	movlw	11
  2858   0013B8                     u1621:
  2859   0013B8  CFDB FFE3          	movff	plusw2,plusw1
  2860   0013BC  06E8               	decf	wreg,f,c
  2861   0013BE  E2FC               	bc	u1621
  2862   0013C0                     
  2863                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2864   0013C0  EE21  F084         	lfsr	2,_Lightblue_rule
  2865   0013C4  EE11  F048         	lfsr	1,_Color_rules+72
  2866   0013C8  0E0B               	movlw	11
  2867   0013CA                     u1631:
  2868   0013CA  CFDB FFE3          	movff	plusw2,plusw1
  2869   0013CE  06E8               	decf	wreg,f,c
  2870   0013D0  E2FC               	bc	u1631
  2871   0013D2                     
  2872                           ;color.c: 56:     Color_rules[7] = White_rule;
  2873   0013D2  EE21  F078         	lfsr	2,_White_rule
  2874   0013D6  EE11  F054         	lfsr	1,_Color_rules+84
  2875   0013DA  0E0B               	movlw	11
  2876   0013DC                     u1641:
  2877   0013DC  CFDB FFE3          	movff	plusw2,plusw1
  2878   0013E0  06E8               	decf	wreg,f,c
  2879   0013E2  E2FC               	bc	u1641
  2880   0013E4                     
  2881                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2882   0013E4  EE21  F06C         	lfsr	2,_Black_rule
  2883   0013E8  EE11  F060         	lfsr	1,_Color_rules+96
  2884   0013EC  0E0B               	movlw	11
  2885   0013EE                     u1651:
  2886   0013EE  CFDB FFE3          	movff	plusw2,plusw1
  2887   0013F2  06E8               	decf	wreg,f,c
  2888   0013F4  E2FC               	bc	u1651
  2889   0013F6                     
  2890                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2891   0013F6  8686               	bsf	134,3,c	;volatile
  2892   0013F8                     
  2893                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2894   0013F8  010E               	movlb	14	; () banked
  2895   0013FA  97B4               	bcf	180,3,b	;volatile
  2896   0013FC                     
  2897                           ; BSR set to: 14
  2898                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2899   0013FC  8486               	bsf	134,2,c	;volatile
  2900   0013FE                     
  2901                           ; BSR set to: 14
  2902                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2903   0013FE  95B4               	bcf	180,2,b	;volatile
  2904   001400                     l67:
  2905   001400  A68E               	btfss	142,3,c	;volatile
  2906   001402  EF05  F00A         	goto	u1661
  2907   001406  EF07  F00A         	goto	u1660
  2908   00140A                     u1661:
  2909   00140A  EF0E  F00A         	goto	l71
  2910   00140E                     u1660:
  2911   00140E  B48E               	btfsc	142,2,c	;volatile
  2912   001410  EF0C  F00A         	goto	u1671
  2913   001414  EF0E  F00A         	goto	u1670
  2914   001418                     u1671:
  2915   001418  EF00  F00A         	goto	l67
  2916   00141C                     u1670:
  2917   00141C                     l71:
  2918                           
  2919                           ;color.c: 72:     if(!PORTFbits.RF2){
  2920   00141C  B48E               	btfsc	142,2,c	;volatile
  2921   00141E  EF13  F00A         	goto	u1681
  2922   001422  EF15  F00A         	goto	u1680
  2923   001426                     u1681:
  2924   001426  EF17  F00A         	goto	l2714
  2925   00142A                     u1680:
  2926   00142A  EF29  F00A         	goto	l73
  2927   00142E                     l2714:
  2928                           
  2929                           ;color.c: 75:     calibrate_white();
  2930   00142E  EC52  F00B         	call	_calibrate_white	;wreg free
  2931   001432                     l74:
  2932   001432  B68E               	btfsc	142,3,c	;volatile
  2933   001434  EF1E  F00A         	goto	u1691
  2934   001438  EF20  F00A         	goto	u1690
  2935   00143C                     u1691:
  2936   00143C  EF19  F00A         	goto	l74
  2937   001440                     u1690:
  2938   001440                     
  2939                           ;color.c: 77:     calibrate_black();
  2940   001440  ECEF  F008         	call	_calibrate_black	;wreg free
  2941   001444                     l77:
  2942   001444  B68E               	btfsc	142,3,c	;volatile
  2943   001446  EF27  F00A         	goto	u1701
  2944   00144A  EF29  F00A         	goto	u1700
  2945   00144E                     u1701:
  2946   00144E  EF22  F00A         	goto	l77
  2947   001452                     u1700:
  2948   001452                     l73:
  2949   001452  0012               	return		;funcret
  2950   001454                     __end_of_color_click_init:
  2951                           	callstack 0
  2952                           
  2953 ;; *************** function _color_writetoaddr *****************
  2954 ;; Defined at:
  2955 ;;		line 82 in file "color.c"
  2956 ;; Parameters:    Size  Location     Type
  2957 ;;  address         1    wreg     unsigned char 
  2958 ;;  value           1    2[COMRAM] unsigned char 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;  address         1    3[COMRAM] unsigned char 
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, status,2, status,0, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2970 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2973 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2974 ;;Total ram usage:        2 bytes
  2975 ;; Hardware stack levels used: 1
  2976 ;; Hardware stack levels required when called: 4
  2977 ;; This function calls:
  2978 ;;		_I2C_2_Master_Start
  2979 ;;		_I2C_2_Master_Stop
  2980 ;;		_I2C_2_Master_Write
  2981 ;; This function is called by:
  2982 ;;		_color_click_init
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text11
  2987   001F08                     __ptext11:
  2988                           	callstack 0
  2989   001F08                     _color_writetoaddr:
  2990                           	callstack 25
  2991                           
  2992                           ;incstack = 0
  2993                           ;color_writetoaddr@address stored from wreg
  2994   001F08  6E04               	movwf	color_writetoaddr@address^0,c
  2995   001F0A                     
  2996                           ;color.c: 83:     I2C_2_Master_Start();
  2997   001F0A  ECC6  F00F         	call	_I2C_2_Master_Start	;wreg free
  2998                           
  2999                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  3000   001F0E  0E52               	movlw	82
  3001   001F10  ECB0  F00F         	call	_I2C_2_Master_Write
  3002                           
  3003                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  3004   001F14  5004               	movf	color_writetoaddr@address^0,w,c
  3005   001F16  0980               	iorlw	128
  3006   001F18  ECB0  F00F         	call	_I2C_2_Master_Write
  3007                           
  3008                           ;color.c: 86:     I2C_2_Master_Write(value);
  3009   001F1C  5003               	movf	color_writetoaddr@value^0,w,c
  3010   001F1E  ECB0  F00F         	call	_I2C_2_Master_Write
  3011                           
  3012                           ;color.c: 87:     I2C_2_Master_Stop();
  3013   001F22  ECC1  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3014   001F26  0012               	return		;funcret
  3015   001F28                     __end_of_color_writetoaddr:
  3016                           	callstack 0
  3017                           
  3018 ;; *************** function _calibrate_white *****************
  3019 ;; Defined at:
  3020 ;;		line 229 in file "color.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;		None
  3023 ;; Auto vars:     Size  Location     Type
  3024 ;;		None
  3025 ;; Return value:  Size  Location     Type
  3026 ;;                  1    wreg      void 
  3027 ;; Registers used:
  3028 ;;		wreg, status,2, status,0, cstack
  3029 ;; Tracked objects:
  3030 ;;		On entry : 0/0
  3031 ;;		On exit  : 0/0
  3032 ;;		Unchanged: 0/0
  3033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3038 ;;Total ram usage:        2 bytes
  3039 ;; Hardware stack levels used: 1
  3040 ;; Hardware stack levels required when called: 5
  3041 ;; This function calls:
  3042 ;;		_color_read_Blue
  3043 ;;		_color_read_Green
  3044 ;;		_color_read_Red
  3045 ;;		_set_led_color
  3046 ;; This function is called by:
  3047 ;;		_color_click_init
  3048 ;; This function uses a non-reentrant model
  3049 ;;
  3050                           
  3051                           	psect	text12
  3052   0016A4                     __ptext12:
  3053                           	callstack 0
  3054   0016A4                     _calibrate_white:
  3055                           	callstack 24
  3056   0016A4                     
  3057                           ;color.c: 230:     set_led_color(0b100);
  3058   0016A4  0E00               	movlw	0
  3059   0016A6  6E02               	movwf	(set_led_color@color+1)^0,c
  3060   0016A8  0E04               	movlw	4
  3061   0016AA  6E01               	movwf	set_led_color@color^0,c
  3062   0016AC  EC05  F00F         	call	_set_led_color	;wreg free
  3063   0016B0                     
  3064                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3065   0016B0  0E12               	movlw	18
  3066   0016B2  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3067   0016B4  0EDC               	movlw	220
  3068   0016B6  6E0C               	movwf	??_calibrate_white^0,c
  3069   0016B8  0E60               	movlw	96
  3070   0016BA                     u2557:
  3071   0016BA  2EE8               	decfsz	wreg,f,c
  3072   0016BC  D7FE               	bra	u2557
  3073   0016BE  2E0C               	decfsz	??_calibrate_white^0,f,c
  3074   0016C0  D7FC               	bra	u2557
  3075   0016C2  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3076   0016C4  D7FA               	bra	u2557
  3077   0016C6                     
  3078                           ;color.c: 232:     White_setup.R = color_read_Red();
  3079   0016C6  EC1C  F00E         	call	_color_read_Red	;wreg free
  3080   0016CA  C005  F06C         	movff	?_color_read_Red,_White_setup
  3081   0016CE  C006  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3082   0016D2  0100               	movlb	0	; () banked
  3083   0016D4  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3084   0016D6  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3085   0016D8                     
  3086                           ; BSR set to: 0
  3087                           ;color.c: 233:     set_led_color(0b010);
  3088   0016D8  0E00               	movlw	0
  3089   0016DA  6E02               	movwf	(set_led_color@color+1)^0,c
  3090   0016DC  0E02               	movlw	2
  3091   0016DE  6E01               	movwf	set_led_color@color^0,c
  3092   0016E0  EC05  F00F         	call	_set_led_color	;wreg free
  3093   0016E4                     
  3094                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3095   0016E4  0E12               	movlw	18
  3096   0016E6  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3097   0016E8  0EDC               	movlw	220
  3098   0016EA  6E0C               	movwf	??_calibrate_white^0,c
  3099   0016EC  0E60               	movlw	96
  3100   0016EE                     u2567:
  3101   0016EE  2EE8               	decfsz	wreg,f,c
  3102   0016F0  D7FE               	bra	u2567
  3103   0016F2  2E0C               	decfsz	??_calibrate_white^0,f,c
  3104   0016F4  D7FC               	bra	u2567
  3105   0016F6  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3106   0016F8  D7FA               	bra	u2567
  3107                           
  3108                           ;color.c: 235:     White_setup.G = color_read_Green();
  3109   0016FA  EC44  F00E         	call	_color_read_Green	;wreg free
  3110   0016FE  C005  F070         	movff	?_color_read_Green,_White_setup+4
  3111   001702  C006  F071         	movff	?_color_read_Green+1,_White_setup+5
  3112   001706  0100               	movlb	0	; () banked
  3113   001708  6B72               	clrf	(_White_setup+6)& (0+255),b
  3114   00170A  6B73               	clrf	(_White_setup+7)& (0+255),b
  3115   00170C                     
  3116                           ; BSR set to: 0
  3117                           ;color.c: 236:     set_led_color(0b001);
  3118   00170C  0E00               	movlw	0
  3119   00170E  6E02               	movwf	(set_led_color@color+1)^0,c
  3120   001710  0E01               	movlw	1
  3121   001712  6E01               	movwf	set_led_color@color^0,c
  3122   001714  EC05  F00F         	call	_set_led_color	;wreg free
  3123   001718                     
  3124                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3125   001718  0E12               	movlw	18
  3126   00171A  6E0D               	movwf	(??_calibrate_white+1)^0,c
  3127   00171C  0EDC               	movlw	220
  3128   00171E  6E0C               	movwf	??_calibrate_white^0,c
  3129   001720  0E60               	movlw	96
  3130   001722                     u2577:
  3131   001722  2EE8               	decfsz	wreg,f,c
  3132   001724  D7FE               	bra	u2577
  3133   001726  2E0C               	decfsz	??_calibrate_white^0,f,c
  3134   001728  D7FC               	bra	u2577
  3135   00172A  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  3136   00172C  D7FA               	bra	u2577
  3137   00172E                     
  3138                           ;color.c: 238:     White_setup.B = color_read_Blue();
  3139   00172E  EC94  F00E         	call	_color_read_Blue	;wreg free
  3140   001732  C005  F074         	movff	?_color_read_Blue,_White_setup+8
  3141   001736  C006  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3142   00173A  0100               	movlb	0	; () banked
  3143   00173C  6B76               	clrf	(_White_setup+10)& (0+255),b
  3144   00173E  6B77               	clrf	(_White_setup+11)& (0+255),b
  3145   001740                     
  3146                           ; BSR set to: 0
  3147                           ;color.c: 239:     set_led_color(0b000);
  3148   001740  0E00               	movlw	0
  3149   001742  6E02               	movwf	(set_led_color@color+1)^0,c
  3150   001744  0E00               	movlw	0
  3151   001746  6E01               	movwf	set_led_color@color^0,c
  3152   001748  EC05  F00F         	call	_set_led_color	;wreg free
  3153   00174C  0012               	return		;funcret
  3154   00174E                     __end_of_calibrate_white:
  3155                           	callstack 0
  3156                           
  3157 ;; *************** function _calibrate_black *****************
  3158 ;; Defined at:
  3159 ;;		line 209 in file "color.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  clear2          2   17[COMRAM] unsigned int 
  3164 ;;  clear1          2   15[COMRAM] unsigned int 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  1    wreg      void 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0, cstack
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3175 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3176 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3177 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3178 ;;Total ram usage:        8 bytes
  3179 ;; Hardware stack levels used: 1
  3180 ;; Hardware stack levels required when called: 5
  3181 ;; This function calls:
  3182 ;;		___lwdiv
  3183 ;;		_color_read_Blue
  3184 ;;		_color_read_Clear
  3185 ;;		_color_read_Green
  3186 ;;		_color_read_Red
  3187 ;;		_set_led_color
  3188 ;; This function is called by:
  3189 ;;		_color_click_init
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193                           	psect	text13
  3194   0011DE                     __ptext13:
  3195                           	callstack 0
  3196   0011DE                     _calibrate_black:
  3197                           	callstack 24
  3198   0011DE                     
  3199                           ;color.c: 210:     set_led_color(0b100);
  3200   0011DE  0E00               	movlw	0
  3201   0011E0  6E02               	movwf	(set_led_color@color+1)^0,c
  3202   0011E2  0E04               	movlw	4
  3203   0011E4  6E01               	movwf	set_led_color@color^0,c
  3204   0011E6  EC05  F00F         	call	_set_led_color	;wreg free
  3205   0011EA                     
  3206                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3207   0011EA  0E12               	movlw	18
  3208   0011EC  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3209   0011EE  0EDC               	movlw	220
  3210   0011F0  6E0E               	movwf	??_calibrate_black^0,c
  3211   0011F2  0E60               	movlw	96
  3212   0011F4                     u2587:
  3213   0011F4  2EE8               	decfsz	wreg,f,c
  3214   0011F6  D7FE               	bra	u2587
  3215   0011F8  2E0E               	decfsz	??_calibrate_black^0,f,c
  3216   0011FA  D7FC               	bra	u2587
  3217   0011FC  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3218   0011FE  D7FA               	bra	u2587
  3219   001200                     
  3220                           ;color.c: 212:     Black_setup.R = color_read_Red();
  3221   001200  EC1C  F00E         	call	_color_read_Red	;wreg free
  3222   001204  C005  F060         	movff	?_color_read_Red,_Black_setup
  3223   001208  C006  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3224   00120C  0100               	movlb	0	; () banked
  3225   00120E  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3226   001210  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3227   001212                     
  3228                           ; BSR set to: 0
  3229                           ;color.c: 213:     set_led_color(0b010);
  3230   001212  0E00               	movlw	0
  3231   001214  6E02               	movwf	(set_led_color@color+1)^0,c
  3232   001216  0E02               	movlw	2
  3233   001218  6E01               	movwf	set_led_color@color^0,c
  3234   00121A  EC05  F00F         	call	_set_led_color	;wreg free
  3235   00121E                     
  3236                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3237   00121E  0E12               	movlw	18
  3238   001220  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3239   001222  0EDC               	movlw	220
  3240   001224  6E0E               	movwf	??_calibrate_black^0,c
  3241   001226  0E60               	movlw	96
  3242   001228                     u2597:
  3243   001228  2EE8               	decfsz	wreg,f,c
  3244   00122A  D7FE               	bra	u2597
  3245   00122C  2E0E               	decfsz	??_calibrate_black^0,f,c
  3246   00122E  D7FC               	bra	u2597
  3247   001230  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3248   001232  D7FA               	bra	u2597
  3249                           
  3250                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3251   001234  EC44  F00E         	call	_color_read_Green	;wreg free
  3252   001238  C005  F064         	movff	?_color_read_Green,_Black_setup+4
  3253   00123C  C006  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3254   001240  0100               	movlb	0	; () banked
  3255   001242  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3256   001244  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3257   001246                     
  3258                           ; BSR set to: 0
  3259                           ;color.c: 216:     set_led_color(0b001);
  3260   001246  0E00               	movlw	0
  3261   001248  6E02               	movwf	(set_led_color@color+1)^0,c
  3262   00124A  0E01               	movlw	1
  3263   00124C  6E01               	movwf	set_led_color@color^0,c
  3264   00124E  EC05  F00F         	call	_set_led_color	;wreg free
  3265   001252                     
  3266                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3267   001252  0E12               	movlw	18
  3268   001254  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3269   001256  0EDC               	movlw	220
  3270   001258  6E0E               	movwf	??_calibrate_black^0,c
  3271   00125A  0E60               	movlw	96
  3272   00125C                     u2607:
  3273   00125C  2EE8               	decfsz	wreg,f,c
  3274   00125E  D7FE               	bra	u2607
  3275   001260  2E0E               	decfsz	??_calibrate_black^0,f,c
  3276   001262  D7FC               	bra	u2607
  3277   001264  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3278   001266  D7FA               	bra	u2607
  3279   001268                     
  3280                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3281   001268  EC94  F00E         	call	_color_read_Blue	;wreg free
  3282   00126C  C005  F068         	movff	?_color_read_Blue,_Black_setup+8
  3283   001270  C006  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3284   001274  0100               	movlb	0	; () banked
  3285   001276  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3286   001278  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3287   00127A                     
  3288                           ; BSR set to: 0
  3289                           ;color.c: 219:     set_led_color(0b000);
  3290   00127A  0E00               	movlw	0
  3291   00127C  6E02               	movwf	(set_led_color@color+1)^0,c
  3292   00127E  0E00               	movlw	0
  3293   001280  6E01               	movwf	set_led_color@color^0,c
  3294   001282  EC05  F00F         	call	_set_led_color	;wreg free
  3295                           
  3296                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3297   001286  0E12               	movlw	18
  3298   001288  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3299   00128A  0EDC               	movlw	220
  3300   00128C  6E0E               	movwf	??_calibrate_black^0,c
  3301   00128E  0E60               	movlw	96
  3302   001290                     u2617:
  3303   001290  2EE8               	decfsz	wreg,f,c
  3304   001292  D7FE               	bra	u2617
  3305   001294  2E0E               	decfsz	??_calibrate_black^0,f,c
  3306   001296  D7FC               	bra	u2617
  3307   001298  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3308   00129A  D7FA               	bra	u2617
  3309   00129C                     
  3310                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3311   00129C  EC6C  F00E         	call	_color_read_Clear	;wreg free
  3312   0012A0  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3313   0012A4  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3314   0012A8                     
  3315                           ;color.c: 222:     set_led_color(0b111);
  3316   0012A8  0E00               	movlw	0
  3317   0012AA  6E02               	movwf	(set_led_color@color+1)^0,c
  3318   0012AC  0E07               	movlw	7
  3319   0012AE  6E01               	movwf	set_led_color@color^0,c
  3320   0012B0  EC05  F00F         	call	_set_led_color	;wreg free
  3321   0012B4                     
  3322                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3323   0012B4  0E12               	movlw	18
  3324   0012B6  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3325   0012B8  0EDC               	movlw	220
  3326   0012BA  6E0E               	movwf	??_calibrate_black^0,c
  3327   0012BC  0E60               	movlw	96
  3328   0012BE                     u2627:
  3329   0012BE  2EE8               	decfsz	wreg,f,c
  3330   0012C0  D7FE               	bra	u2627
  3331   0012C2  2E0E               	decfsz	??_calibrate_black^0,f,c
  3332   0012C4  D7FC               	bra	u2627
  3333   0012C6  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3334   0012C8  D7FA               	bra	u2627
  3335   0012CA                     
  3336                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3337   0012CA  EC6C  F00E         	call	_color_read_Clear	;wreg free
  3338   0012CE  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3339   0012D2  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3340                           
  3341                           ;color.c: 225:     set_led_color(0b000);
  3342   0012D6  0E00               	movlw	0
  3343   0012D8  6E02               	movwf	(set_led_color@color+1)^0,c
  3344   0012DA  0E00               	movlw	0
  3345   0012DC  6E01               	movwf	set_led_color@color^0,c
  3346   0012DE  EC05  F00F         	call	_set_led_color	;wreg free
  3347   0012E2                     
  3348                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3349   0012E2  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3350   0012E6  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3351   0012EA  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3352   0012EE  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3353   0012F2  EC50  F00D         	call	___lwdiv	;wreg free
  3354   0012F6  C007  F014         	movff	?___lwdiv,_calibrate_black$2442
  3355   0012FA  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2442+1
  3356   0012FE                     
  3357                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3358   0012FE  C014  F007         	movff	_calibrate_black$2442,___lwdiv@dividend
  3359   001302  C015  F008         	movff	_calibrate_black$2442+1,___lwdiv@dividend+1
  3360   001306  0E00               	movlw	0
  3361   001308  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3362   00130A  0E05               	movlw	5
  3363   00130C  6E09               	movwf	___lwdiv@divisor^0,c
  3364   00130E  EC50  F00D         	call	___lwdiv	;wreg free
  3365   001312  C007  F059         	movff	?___lwdiv,_wall_coef
  3366   001316  C008  F05A         	movff	?___lwdiv+1,_wall_coef+1
  3367   00131A  0012               	return		;funcret
  3368   00131C                     __end_of_calibrate_black:
  3369                           	callstack 0
  3370                           
  3371 ;; *************** function _set_led_color *****************
  3372 ;; Defined at:
  3373 ;;		line 154 in file "color.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  color           2    0[COMRAM] unsigned int 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		None
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3390 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3391 ;;Total ram usage:        2 bytes
  3392 ;; Hardware stack levels used: 1
  3393 ;; Hardware stack levels required when called: 2
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_get_color_code
  3398 ;;		_calibrate_black
  3399 ;;		_calibrate_white
  3400 ;;		_get_wall_presence
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text14
  3405   001E0A                     __ptext14:
  3406                           	callstack 0
  3407   001E0A                     _set_led_color:
  3408                           	callstack 27
  3409   001E0A                     
  3410                           ;color.c: 158:     if(color & 0b100){
  3411   001E0A  A401               	btfss	set_led_color@color^0,2,c
  3412   001E0C  EF0A  F00F         	goto	u1321
  3413   001E10  EF0C  F00F         	goto	u1320
  3414   001E14                     u1321:
  3415   001E14  EF0F  F00F         	goto	l112
  3416   001E18                     u1320:
  3417   001E18                     
  3418                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3419   001E18  827F               	bsf	127,1,c	;volatile
  3420                           
  3421                           ;color.c: 160:     }else{
  3422   001E1A  EF10  F00F         	goto	l113
  3423   001E1E                     l112:
  3424                           
  3425                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3426   001E1E  927F               	bcf	127,1,c	;volatile
  3427   001E20                     l113:
  3428                           
  3429                           ;color.c: 163:     if(color & 0b010){
  3430   001E20  A201               	btfss	set_led_color@color^0,1,c
  3431   001E22  EF15  F00F         	goto	u1331
  3432   001E26  EF17  F00F         	goto	u1330
  3433   001E2A                     u1331:
  3434   001E2A  EF1A  F00F         	goto	l114
  3435   001E2E                     u1330:
  3436   001E2E                     
  3437                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3438   001E2E  8879               	bsf	121,4,c	;volatile
  3439                           
  3440                           ;color.c: 165:     }else{
  3441   001E30  EF1B  F00F         	goto	l115
  3442   001E34                     l114:
  3443                           
  3444                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3445   001E34  9879               	bcf	121,4,c	;volatile
  3446   001E36                     l115:
  3447                           
  3448                           ;color.c: 168:     if(color & 0b001){
  3449   001E36  A001               	btfss	set_led_color@color^0,0,c
  3450   001E38  EF20  F00F         	goto	u1341
  3451   001E3C  EF22  F00F         	goto	u1340
  3452   001E40                     u1341:
  3453   001E40  EF25  F00F         	goto	l116
  3454   001E44                     u1340:
  3455   001E44                     
  3456                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3457   001E44  8E7E               	bsf	126,7,c	;volatile
  3458                           
  3459                           ;color.c: 170:     }else{
  3460   001E46  EF26  F00F         	goto	l118
  3461   001E4A                     l116:
  3462                           
  3463                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3464   001E4A  9E7E               	bcf	126,7,c	;volatile
  3465   001E4C                     l118:
  3466   001E4C  0012               	return		;funcret
  3467   001E4E                     __end_of_set_led_color:
  3468                           	callstack 0
  3469                           
  3470 ;; *************** function _color_read_Red *****************
  3471 ;; Defined at:
  3472 ;;		line 90 in file "color.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  tmp             2    9[COMRAM] unsigned int 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  2    4[COMRAM] unsigned int 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2, status,0, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3487 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3488 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3489 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3490 ;;Total ram usage:        7 bytes
  3491 ;; Hardware stack levels used: 1
  3492 ;; Hardware stack levels required when called: 4
  3493 ;; This function calls:
  3494 ;;		_I2C_2_Master_Read
  3495 ;;		_I2C_2_Master_RepStart
  3496 ;;		_I2C_2_Master_Start
  3497 ;;		_I2C_2_Master_Stop
  3498 ;;		_I2C_2_Master_Write
  3499 ;; This function is called by:
  3500 ;;		_get_color_code
  3501 ;;		_calibrate_black
  3502 ;;		_calibrate_white
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text15
  3507   001C38                     __ptext15:
  3508                           	callstack 0
  3509   001C38                     _color_read_Red:
  3510                           	callstack 25
  3511   001C38                     
  3512                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3513   001C38  ECC6  F00F         	call	_I2C_2_Master_Start	;wreg free
  3514                           
  3515                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3516   001C3C  0E52               	movlw	82
  3517   001C3E  ECB0  F00F         	call	_I2C_2_Master_Write
  3518                           
  3519                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3520   001C42  0EB6               	movlw	182
  3521   001C44  ECB0  F00F         	call	_I2C_2_Master_Write
  3522                           
  3523                           ;color.c: 96:  I2C_2_Master_RepStart();
  3524   001C48  ECCB  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3525                           
  3526                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3527   001C4C  0E53               	movlw	83
  3528   001C4E  ECB0  F00F         	call	_I2C_2_Master_Write
  3529                           
  3530                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3531   001C52  0E01               	movlw	1
  3532   001C54  EC27  F00F         	call	_I2C_2_Master_Read
  3533   001C58  6E07               	movwf	??_color_read_Red^0,c
  3534   001C5A  5007               	movf	??_color_read_Red^0,w,c
  3535   001C5C  6E0A               	movwf	color_read_Red@tmp^0,c
  3536   001C5E  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3537                           
  3538                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3539   001C60  0E00               	movlw	0
  3540   001C62  EC27  F00F         	call	_I2C_2_Master_Read
  3541   001C66  6E07               	movwf	??_color_read_Red^0,c
  3542   001C68  5007               	movf	??_color_read_Red^0,w,c
  3543   001C6A  6E09               	movwf	(??_color_read_Red+2)^0,c
  3544   001C6C  6A08               	clrf	(??_color_read_Red+1)^0,c
  3545   001C6E  500A               	movf	color_read_Red@tmp^0,w,c
  3546   001C70  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3547   001C72  6E0A               	movwf	color_read_Red@tmp^0,c
  3548   001C74  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3549   001C76  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3550   001C78  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3551                           
  3552                           ;color.c: 100:  I2C_2_Master_Stop();
  3553   001C7A  ECC1  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3554   001C7E                     
  3555                           ;color.c: 101:  return tmp;
  3556   001C7E  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3557   001C82  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3558   001C86  0012               	return		;funcret
  3559   001C88                     __end_of_color_read_Red:
  3560                           	callstack 0
  3561                           
  3562 ;; *************** function _color_read_Green *****************
  3563 ;; Defined at:
  3564 ;;		line 118 in file "color.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;  tmp             2    9[COMRAM] unsigned int 
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  2    4[COMRAM] unsigned int 
  3571 ;; Registers used:
  3572 ;;		wreg, status,2, status,0, cstack
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3580 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3581 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3582 ;;Total ram usage:        7 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; Hardware stack levels required when called: 4
  3585 ;; This function calls:
  3586 ;;		_I2C_2_Master_Read
  3587 ;;		_I2C_2_Master_RepStart
  3588 ;;		_I2C_2_Master_Start
  3589 ;;		_I2C_2_Master_Stop
  3590 ;;		_I2C_2_Master_Write
  3591 ;; This function is called by:
  3592 ;;		_get_color_code
  3593 ;;		_calibrate_black
  3594 ;;		_calibrate_white
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text16
  3599   001C88                     __ptext16:
  3600                           	callstack 0
  3601   001C88                     _color_read_Green:
  3602                           	callstack 25
  3603   001C88                     
  3604                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3605   001C88  ECC6  F00F         	call	_I2C_2_Master_Start	;wreg free
  3606                           
  3607                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3608   001C8C  0E52               	movlw	82
  3609   001C8E  ECB0  F00F         	call	_I2C_2_Master_Write
  3610                           
  3611                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3612   001C92  0EB8               	movlw	184
  3613   001C94  ECB0  F00F         	call	_I2C_2_Master_Write
  3614                           
  3615                           ;color.c: 124:  I2C_2_Master_RepStart();
  3616   001C98  ECCB  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3617                           
  3618                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3619   001C9C  0E53               	movlw	83
  3620   001C9E  ECB0  F00F         	call	_I2C_2_Master_Write
  3621                           
  3622                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3623   001CA2  0E01               	movlw	1
  3624   001CA4  EC27  F00F         	call	_I2C_2_Master_Read
  3625   001CA8  6E07               	movwf	??_color_read_Green^0,c
  3626   001CAA  5007               	movf	??_color_read_Green^0,w,c
  3627   001CAC  6E0A               	movwf	color_read_Green@tmp^0,c
  3628   001CAE  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3629                           
  3630                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3631   001CB0  0E00               	movlw	0
  3632   001CB2  EC27  F00F         	call	_I2C_2_Master_Read
  3633   001CB6  6E07               	movwf	??_color_read_Green^0,c
  3634   001CB8  5007               	movf	??_color_read_Green^0,w,c
  3635   001CBA  6E09               	movwf	(??_color_read_Green+2)^0,c
  3636   001CBC  6A08               	clrf	(??_color_read_Green+1)^0,c
  3637   001CBE  500A               	movf	color_read_Green@tmp^0,w,c
  3638   001CC0  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3639   001CC2  6E0A               	movwf	color_read_Green@tmp^0,c
  3640   001CC4  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3641   001CC6  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3642   001CC8  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3643                           
  3644                           ;color.c: 128:  I2C_2_Master_Stop();
  3645   001CCA  ECC1  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3646   001CCE                     
  3647                           ;color.c: 129:  return tmp;
  3648   001CCE  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3649   001CD2  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3650   001CD6  0012               	return		;funcret
  3651   001CD8                     __end_of_color_read_Green:
  3652                           	callstack 0
  3653                           
  3654 ;; *************** function _color_read_Clear *****************
  3655 ;; Defined at:
  3656 ;;		line 132 in file "color.c"
  3657 ;; Parameters:    Size  Location     Type
  3658 ;;		None
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  tmp             2    9[COMRAM] unsigned int 
  3661 ;; Return value:  Size  Location     Type
  3662 ;;                  2    4[COMRAM] unsigned int 
  3663 ;; Registers used:
  3664 ;;		wreg, status,2, status,0, cstack
  3665 ;; Tracked objects:
  3666 ;;		On entry : 0/0
  3667 ;;		On exit  : 0/0
  3668 ;;		Unchanged: 0/0
  3669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3672 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3673 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3674 ;;Total ram usage:        7 bytes
  3675 ;; Hardware stack levels used: 1
  3676 ;; Hardware stack levels required when called: 4
  3677 ;; This function calls:
  3678 ;;		_I2C_2_Master_Read
  3679 ;;		_I2C_2_Master_RepStart
  3680 ;;		_I2C_2_Master_Start
  3681 ;;		_I2C_2_Master_Stop
  3682 ;;		_I2C_2_Master_Write
  3683 ;; This function is called by:
  3684 ;;		_calibrate_black
  3685 ;;		_get_wall_presence
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text17
  3690   001CD8                     __ptext17:
  3691                           	callstack 0
  3692   001CD8                     _color_read_Clear:
  3693                           	callstack 25
  3694   001CD8                     
  3695                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3696   001CD8  ECC6  F00F         	call	_I2C_2_Master_Start	;wreg free
  3697                           
  3698                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3699   001CDC  0E52               	movlw	82
  3700   001CDE  ECB0  F00F         	call	_I2C_2_Master_Write
  3701                           
  3702                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3703   001CE2  0EB4               	movlw	180
  3704   001CE4  ECB0  F00F         	call	_I2C_2_Master_Write
  3705                           
  3706                           ;color.c: 138:  I2C_2_Master_RepStart();
  3707   001CE8  ECCB  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3708                           
  3709                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3710   001CEC  0E53               	movlw	83
  3711   001CEE  ECB0  F00F         	call	_I2C_2_Master_Write
  3712                           
  3713                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3714   001CF2  0E01               	movlw	1
  3715   001CF4  EC27  F00F         	call	_I2C_2_Master_Read
  3716   001CF8  6E07               	movwf	??_color_read_Clear^0,c
  3717   001CFA  5007               	movf	??_color_read_Clear^0,w,c
  3718   001CFC  6E0A               	movwf	color_read_Clear@tmp^0,c
  3719   001CFE  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3720                           
  3721                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3722   001D00  0E00               	movlw	0
  3723   001D02  EC27  F00F         	call	_I2C_2_Master_Read
  3724   001D06  6E07               	movwf	??_color_read_Clear^0,c
  3725   001D08  5007               	movf	??_color_read_Clear^0,w,c
  3726   001D0A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3727   001D0C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3728   001D0E  500A               	movf	color_read_Clear@tmp^0,w,c
  3729   001D10  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3730   001D12  6E0A               	movwf	color_read_Clear@tmp^0,c
  3731   001D14  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3732   001D16  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3733   001D18  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3734                           
  3735                           ;color.c: 142:  I2C_2_Master_Stop();
  3736   001D1A  ECC1  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3737   001D1E                     
  3738                           ;color.c: 143:  return tmp;
  3739   001D1E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3740   001D22  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3741   001D26  0012               	return		;funcret
  3742   001D28                     __end_of_color_read_Clear:
  3743                           	callstack 0
  3744                           
  3745 ;; *************** function _color_read_Blue *****************
  3746 ;; Defined at:
  3747 ;;		line 104 in file "color.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;		None
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  tmp             2    9[COMRAM] unsigned int 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;                  2    4[COMRAM] unsigned int 
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0, cstack
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3761 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3764 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3765 ;;Total ram usage:        7 bytes
  3766 ;; Hardware stack levels used: 1
  3767 ;; Hardware stack levels required when called: 4
  3768 ;; This function calls:
  3769 ;;		_I2C_2_Master_Read
  3770 ;;		_I2C_2_Master_RepStart
  3771 ;;		_I2C_2_Master_Start
  3772 ;;		_I2C_2_Master_Stop
  3773 ;;		_I2C_2_Master_Write
  3774 ;; This function is called by:
  3775 ;;		_get_color_code
  3776 ;;		_calibrate_black
  3777 ;;		_calibrate_white
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text18
  3782   001D28                     __ptext18:
  3783                           	callstack 0
  3784   001D28                     _color_read_Blue:
  3785                           	callstack 25
  3786   001D28                     
  3787                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3788   001D28  ECC6  F00F         	call	_I2C_2_Master_Start	;wreg free
  3789                           
  3790                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3791   001D2C  0E52               	movlw	82
  3792   001D2E  ECB0  F00F         	call	_I2C_2_Master_Write
  3793                           
  3794                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3795   001D32  0EBA               	movlw	186
  3796   001D34  ECB0  F00F         	call	_I2C_2_Master_Write
  3797                           
  3798                           ;color.c: 110:  I2C_2_Master_RepStart();
  3799   001D38  ECCB  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3800                           
  3801                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3802   001D3C  0E53               	movlw	83
  3803   001D3E  ECB0  F00F         	call	_I2C_2_Master_Write
  3804                           
  3805                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3806   001D42  0E01               	movlw	1
  3807   001D44  EC27  F00F         	call	_I2C_2_Master_Read
  3808   001D48  6E07               	movwf	??_color_read_Blue^0,c
  3809   001D4A  5007               	movf	??_color_read_Blue^0,w,c
  3810   001D4C  6E0A               	movwf	color_read_Blue@tmp^0,c
  3811   001D4E  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3812                           
  3813                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3814   001D50  0E00               	movlw	0
  3815   001D52  EC27  F00F         	call	_I2C_2_Master_Read
  3816   001D56  6E07               	movwf	??_color_read_Blue^0,c
  3817   001D58  5007               	movf	??_color_read_Blue^0,w,c
  3818   001D5A  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3819   001D5C  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3820   001D5E  500A               	movf	color_read_Blue@tmp^0,w,c
  3821   001D60  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3822   001D62  6E0A               	movwf	color_read_Blue@tmp^0,c
  3823   001D64  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3824   001D66  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3825   001D68  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3826                           
  3827                           ;color.c: 114:  I2C_2_Master_Stop();
  3828   001D6A  ECC1  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3829   001D6E                     
  3830                           ;color.c: 115:  return tmp;
  3831   001D6E  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3832   001D72  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3833   001D76  0012               	return		;funcret
  3834   001D78                     __end_of_color_read_Blue:
  3835                           	callstack 0
  3836                           
  3837 ;; *************** function _I2C_2_Master_Write *****************
  3838 ;; Defined at:
  3839 ;;		line 45 in file "i2c.c"
  3840 ;; Parameters:    Size  Location     Type
  3841 ;;  data_byte       1    wreg     unsigned char 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  data_byte       1    1[COMRAM] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  1    wreg      void 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0, cstack
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3854 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3857 ;;Total ram usage:        1 bytes
  3858 ;; Hardware stack levels used: 1
  3859 ;; Hardware stack levels required when called: 3
  3860 ;; This function calls:
  3861 ;;		_I2C_2_Master_Idle
  3862 ;; This function is called by:
  3863 ;;		_color_writetoaddr
  3864 ;;		_color_read_Red
  3865 ;;		_color_read_Blue
  3866 ;;		_color_read_Green
  3867 ;;		_color_read_Clear
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           	psect	text19
  3872   001F60                     __ptext19:
  3873                           	callstack 0
  3874   001F60                     _I2C_2_Master_Write:
  3875                           	callstack 25
  3876                           
  3877                           ;incstack = 0
  3878                           ;I2C_2_Master_Write@data_byte stored from wreg
  3879   001F60  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3880   001F62                     
  3881                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3882   001F62  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3883   001F66                     
  3884                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3885   001F66  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3886   001F6A  0012               	return		;funcret
  3887   001F6C                     __end_of_I2C_2_Master_Write:
  3888                           	callstack 0
  3889                           
  3890 ;; *************** function _I2C_2_Master_Stop *****************
  3891 ;; Defined at:
  3892 ;;		line 39 in file "i2c.c"
  3893 ;; Parameters:    Size  Location     Type
  3894 ;;		None
  3895 ;; Auto vars:     Size  Location     Type
  3896 ;;		None
  3897 ;; Return value:  Size  Location     Type
  3898 ;;                  1    wreg      void 
  3899 ;; Registers used:
  3900 ;;		wreg, status,2, status,0, cstack
  3901 ;; Tracked objects:
  3902 ;;		On entry : 0/0
  3903 ;;		On exit  : 0/0
  3904 ;;		Unchanged: 0/0
  3905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3910 ;;Total ram usage:        0 bytes
  3911 ;; Hardware stack levels used: 1
  3912 ;; Hardware stack levels required when called: 3
  3913 ;; This function calls:
  3914 ;;		_I2C_2_Master_Idle
  3915 ;; This function is called by:
  3916 ;;		_color_writetoaddr
  3917 ;;		_color_read_Red
  3918 ;;		_color_read_Blue
  3919 ;;		_color_read_Green
  3920 ;;		_color_read_Clear
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text20
  3925   001F82                     __ptext20:
  3926                           	callstack 0
  3927   001F82                     _I2C_2_Master_Stop:
  3928                           	callstack 25
  3929   001F82                     
  3930                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3931   001F82  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3932   001F86                     
  3933                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3934   001F86  010E               	movlb	14	; () banked
  3935   001F88  85DA               	bsf	218,2,b	;volatile
  3936   001F8A                     
  3937                           ; BSR set to: 14
  3938   001F8A  0012               	return		;funcret
  3939   001F8C                     __end_of_I2C_2_Master_Stop:
  3940                           	callstack 0
  3941                           
  3942 ;; *************** function _I2C_2_Master_Start *****************
  3943 ;; Defined at:
  3944 ;;		line 27 in file "i2c.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;		None
  3949 ;; Return value:  Size  Location     Type
  3950 ;;                  1    wreg      void 
  3951 ;; Registers used:
  3952 ;;		wreg, status,2, status,0, cstack
  3953 ;; Tracked objects:
  3954 ;;		On entry : 0/0
  3955 ;;		On exit  : 0/0
  3956 ;;		Unchanged: 0/0
  3957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3962 ;;Total ram usage:        0 bytes
  3963 ;; Hardware stack levels used: 1
  3964 ;; Hardware stack levels required when called: 3
  3965 ;; This function calls:
  3966 ;;		_I2C_2_Master_Idle
  3967 ;; This function is called by:
  3968 ;;		_color_writetoaddr
  3969 ;;		_color_read_Red
  3970 ;;		_color_read_Blue
  3971 ;;		_color_read_Green
  3972 ;;		_color_read_Clear
  3973 ;; This function uses a non-reentrant model
  3974 ;;
  3975                           
  3976                           	psect	text21
  3977   001F8C                     __ptext21:
  3978                           	callstack 0
  3979   001F8C                     _I2C_2_Master_Start:
  3980                           	callstack 25
  3981   001F8C                     
  3982                           ;i2c.c: 29:   I2C_2_Master_Idle();
  3983   001F8C  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  3984   001F90                     
  3985                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3986   001F90  010E               	movlb	14	; () banked
  3987   001F92  81DA               	bsf	218,0,b	;volatile
  3988   001F94                     
  3989                           ; BSR set to: 14
  3990   001F94  0012               	return		;funcret
  3991   001F96                     __end_of_I2C_2_Master_Start:
  3992                           	callstack 0
  3993                           
  3994 ;; *************** function _I2C_2_Master_RepStart *****************
  3995 ;; Defined at:
  3996 ;;		line 33 in file "i2c.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      void 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4014 ;;Total ram usage:        0 bytes
  4015 ;; Hardware stack levels used: 1
  4016 ;; Hardware stack levels required when called: 3
  4017 ;; This function calls:
  4018 ;;		_I2C_2_Master_Idle
  4019 ;; This function is called by:
  4020 ;;		_color_read_Red
  4021 ;;		_color_read_Blue
  4022 ;;		_color_read_Green
  4023 ;;		_color_read_Clear
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text22
  4028   001F96                     __ptext22:
  4029                           	callstack 0
  4030   001F96                     _I2C_2_Master_RepStart:
  4031                           	callstack 25
  4032   001F96                     
  4033                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4034   001F96  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4035   001F9A                     
  4036                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4037   001F9A  010E               	movlb	14	; () banked
  4038   001F9C  83DA               	bsf	218,1,b	;volatile
  4039   001F9E                     
  4040                           ; BSR set to: 14
  4041   001F9E  0012               	return		;funcret
  4042   001FA0                     __end_of_I2C_2_Master_RepStart:
  4043                           	callstack 0
  4044                           
  4045 ;; *************** function _I2C_2_Master_Read *****************
  4046 ;; Defined at:
  4047 ;;		line 51 in file "i2c.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  ack             1    wreg     unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  ack             1    2[COMRAM] unsigned char 
  4052 ;;  tmp             1    3[COMRAM] unsigned char 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  1    wreg      unsigned char 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0, cstack
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4065 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4066 ;;Total ram usage:        3 bytes
  4067 ;; Hardware stack levels used: 1
  4068 ;; Hardware stack levels required when called: 3
  4069 ;; This function calls:
  4070 ;;		_I2C_2_Master_Idle
  4071 ;; This function is called by:
  4072 ;;		_color_read_Red
  4073 ;;		_color_read_Blue
  4074 ;;		_color_read_Green
  4075 ;;		_color_read_Clear
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text23
  4080   001E4E                     __ptext23:
  4081                           	callstack 0
  4082   001E4E                     _I2C_2_Master_Read:
  4083                           	callstack 25
  4084                           
  4085                           ; BSR set to: 14
  4086                           ;incstack = 0
  4087                           ;I2C_2_Master_Read@ack stored from wreg
  4088   001E4E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  4089   001E50                     
  4090                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4091   001E50  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4092   001E54                     
  4093                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4094   001E54  010E               	movlb	14	; () banked
  4095   001E56  87DA               	bsf	218,3,b	;volatile
  4096                           
  4097                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4098   001E58  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4099   001E5C                     
  4100                           ;i2c.c: 57:   tmp = SSP2BUF;
  4101   001E5C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4102                           
  4103                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4104   001E60  EC5D  F00F         	call	_I2C_2_Master_Idle	;wreg free
  4105   001E64                     
  4106                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4107   001E64  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  4108   001E66  B4D8               	btfsc	status,2,c
  4109   001E68  EF38  F00F         	goto	u1271
  4110   001E6C  EF3C  F00F         	goto	u1270
  4111   001E70                     u1271:
  4112   001E70  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4113   001E72  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  4114   001E74  EF3D  F00F         	goto	u1288
  4115   001E78                     u1270:
  4116   001E78  6A02               	clrf	??_I2C_2_Master_Read^0,c
  4117   001E7A                     u1288:
  4118   001E7A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  4119   001E7C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  4120   001E7E  010E               	movlb	14	; () banked
  4121   001E80  51DA               	movf	218,w,b	;volatile
  4122   001E82  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4123   001E84  0BDF               	andlw	-33
  4124   001E86  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  4125   001E88  6FDA               	movwf	218,b	;volatile
  4126   001E8A                     
  4127                           ; BSR set to: 14
  4128                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4129   001E8A  89DA               	bsf	218,4,b	;volatile
  4130   001E8C                     
  4131                           ; BSR set to: 14
  4132                           ;i2c.c: 61:   return tmp;
  4133   001E8C  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  4134   001E8E                     
  4135                           ; BSR set to: 14
  4136   001E8E  0012               	return		;funcret
  4137   001E90                     __end_of_I2C_2_Master_Read:
  4138                           	callstack 0
  4139                           
  4140 ;; *************** function _I2C_2_Master_Idle *****************
  4141 ;; Defined at:
  4142 ;;		line 22 in file "i2c.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;                  1    wreg      void 
  4149 ;; Registers used:
  4150 ;;		wreg, status,2, status,0
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4158 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4159 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4160 ;;Total ram usage:        1 bytes
  4161 ;; Hardware stack levels used: 1
  4162 ;; Hardware stack levels required when called: 2
  4163 ;; This function calls:
  4164 ;;		Nothing
  4165 ;; This function is called by:
  4166 ;;		_I2C_2_Master_Start
  4167 ;;		_I2C_2_Master_RepStart
  4168 ;;		_I2C_2_Master_Stop
  4169 ;;		_I2C_2_Master_Write
  4170 ;;		_I2C_2_Master_Read
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	text24
  4175   001EBA                     __ptext24:
  4176                           	callstack 0
  4177   001EBA                     _I2C_2_Master_Idle:
  4178                           	callstack 25
  4179   001EBA                     l343:
  4180   001EBA  010E               	movlb	14	; () banked
  4181   001EBC  B5D8               	btfsc	216,2,b	;volatile
  4182   001EBE  EF63  F00F         	goto	u1251
  4183   001EC2  EF65  F00F         	goto	u1250
  4184   001EC6                     u1251:
  4185   001EC6  EF5D  F00F         	goto	l343
  4186   001ECA                     u1250:
  4187   001ECA                     
  4188                           ; BSR set to: 14
  4189   001ECA  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4190   001ECE  0E1F               	movlw	31
  4191   001ED0  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  4192   001ED2  A4D8               	btfss	status,2,c
  4193   001ED4  EF6E  F00F         	goto	u1261
  4194   001ED8  EF70  F00F         	goto	u1260
  4195   001EDC                     u1261:
  4196   001EDC  EF5D  F00F         	goto	l343
  4197   001EE0                     u1260:
  4198   001EE0                     
  4199                           ; BSR set to: 14
  4200   001EE0  0012               	return		;funcret
  4201   001EE2                     __end_of_I2C_2_Master_Idle:
  4202                           	callstack 0
  4203                           
  4204 ;; *************** function _I2C_2_Master_Init *****************
  4205 ;; Defined at:
  4206 ;;		line 4 in file "i2c.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;		None
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;		None
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  1    wreg      void 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4224 ;;Total ram usage:        0 bytes
  4225 ;; Hardware stack levels used: 1
  4226 ;; Hardware stack levels required when called: 2
  4227 ;; This function calls:
  4228 ;;		Nothing
  4229 ;; This function is called by:
  4230 ;;		_color_click_init
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text25
  4235   001E90                     __ptext25:
  4236                           	callstack 0
  4237   001E90                     _I2C_2_Master_Init:
  4238                           	callstack 27
  4239   001E90                     
  4240                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4241   001E90  010E               	movlb	14	; () banked
  4242   001E92  51D9               	movf	217,w,b	;volatile
  4243   001E94  0BF0               	andlw	-16
  4244   001E96  0908               	iorlw	8
  4245   001E98  6FD9               	movwf	217,b	;volatile
  4246   001E9A                     
  4247                           ; BSR set to: 14
  4248                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4249   001E9A  8BD9               	bsf	217,5,b	;volatile
  4250                           
  4251                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4252   001E9C  0E9F               	movlw	159
  4253   001E9E  6FD6               	movwf	214,b	;volatile
  4254   001EA0                     
  4255                           ; BSR set to: 14
  4256                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4257   001EA0  8A84               	bsf	132,5,c	;volatile
  4258   001EA2                     
  4259                           ; BSR set to: 14
  4260                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4261   001EA2  8C84               	bsf	132,6,c	;volatile
  4262   001EA4                     
  4263                           ; BSR set to: 14
  4264                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4265   001EA4  9BA7               	bcf	167,5,b	;volatile
  4266   001EA6                     
  4267                           ; BSR set to: 14
  4268                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4269   001EA6  9DA7               	bcf	167,6,b	;volatile
  4270                           
  4271                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4272   001EA8  0E1D               	movlw	29
  4273   001EAA  6F1D               	movwf	29,b	;volatile
  4274                           
  4275                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4276   001EAC  0E1E               	movlw	30
  4277   001EAE  6F1C               	movwf	28,b	;volatile
  4278                           
  4279                           ;i2c.c: 18:   RD5PPS=0x1C;
  4280   001EB0  0E1C               	movlw	28
  4281   001EB2  6F6F               	movwf	111,b	;volatile
  4282                           
  4283                           ;i2c.c: 19:   RD6PPS=0x1B;
  4284   001EB4  0E1B               	movlw	27
  4285   001EB6  6F70               	movwf	112,b	;volatile
  4286   001EB8                     
  4287                           ; BSR set to: 14
  4288   001EB8  0012               	return		;funcret
  4289   001EBA                     __end_of_I2C_2_Master_Init:
  4290                           	callstack 0
  4291                           
  4292 ;; *************** function _add_seconds_to_list *****************
  4293 ;; Defined at:
  4294 ;;		line 436 in file "dc_motor.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;		None
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;		None
  4299 ;; Return value:  Size  Location     Type
  4300 ;;                  1    wreg      void 
  4301 ;; Registers used:
  4302 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4312 ;;Total ram usage:        2 bytes
  4313 ;; Hardware stack levels used: 1
  4314 ;; Hardware stack levels required when called: 2
  4315 ;; This function calls:
  4316 ;;		Nothing
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322                           	psect	text26
  4323   001DC2                     __ptext26:
  4324                           	callstack 0
  4325   001DC2                     _add_seconds_to_list:
  4326                           	callstack 28
  4327   001DC2                     
  4328                           ;dc_motor.c: 438:     if (seconds > 22)
  4329   001DC2  BE56               	btfsc	(_seconds+1)^0,7,c
  4330   001DC4  EFED  F00E         	goto	u2001
  4331   001DC8  5056               	movf	(_seconds+1)^0,w,c
  4332   001DCA  E109               	bnz	u2000
  4333   001DCC  0E17               	movlw	23
  4334   001DCE  5C55               	subwf	_seconds^0,w,c
  4335   001DD0  A0D8               	btfss	status,0,c
  4336   001DD2  EFED  F00E         	goto	u2001
  4337   001DD6  EFEF  F00E         	goto	u2000
  4338   001DDA                     u2001:
  4339   001DDA  EF04  F00F         	goto	l297
  4340   001DDE                     u2000:
  4341   001DDE                     
  4342                           ;dc_motor.c: 439:     {;dc_motor.c: 440:         movement_list[index] = seconds - 11;
  4343   001DDE  0EF5               	movlw	245
  4344   001DE0  2455               	addwf	_seconds^0,w,c
  4345   001DE2  6E01               	movwf	??_add_seconds_to_list^0,c
  4346   001DE4  0EFF               	movlw	255
  4347   001DE6  2056               	addwfc	(_seconds+1)^0,w,c
  4348   001DE8  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4349   001DEA  90D8               	bcf	status,0,c
  4350   001DEC  3453               	rlcf	_index^0,w,c
  4351   001DEE  6ED9               	movwf	fsr2l,c
  4352   001DF0  3454               	rlcf	(_index+1)^0,w,c
  4353   001DF2  6EDA               	movwf	fsr2h,c
  4354   001DF4  0E00               	movlw	low _movement_list
  4355   001DF6  26D9               	addwf	fsr2l,f,c
  4356   001DF8  0E02               	movlw	high _movement_list
  4357   001DFA  22DA               	addwfc	fsr2h,f,c
  4358   001DFC  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4359   001E00  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4360   001E04                     
  4361                           ;dc_motor.c: 441:         index++;
  4362   001E04  4A53               	infsnz	_index^0,f,c
  4363   001E06  2A54               	incf	(_index+1)^0,f,c
  4364   001E08                     l297:
  4365   001E08  0012               	return		;funcret
  4366   001E0A                     __end_of_add_seconds_to_list:
  4367                           	callstack 0
  4368                           
  4369 ;; *************** function _Timer0_init *****************
  4370 ;; Defined at:
  4371 ;;		line 7 in file "timers.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;                  1    wreg      void 
  4378 ;; Registers used:
  4379 ;;		wreg, status,2
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used: 1
  4391 ;; Hardware stack levels required when called: 2
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_main
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text27
  4400   001F28                     __ptext27:
  4401                           	callstack 0
  4402   001F28                     _Timer0_init:
  4403                           	callstack 28
  4404   001F28                     
  4405                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4406   001F28  50D6               	movf	214,w,c	;volatile
  4407   001F2A  0B1F               	andlw	-225
  4408   001F2C  0940               	iorlw	64
  4409   001F2E  6ED6               	movwf	214,c	;volatile
  4410   001F30                     
  4411                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4412   001F30  88D6               	bsf	214,4,c	;volatile
  4413                           
  4414                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4415   001F32  50D6               	movf	214,w,c	;volatile
  4416   001F34  0BF0               	andlw	-16
  4417   001F36  0908               	iorlw	8
  4418   001F38  6ED6               	movwf	214,c	;volatile
  4419                           
  4420                           ;timers.c: 13:     TMR0H=0b11100111;
  4421   001F3A  0EE7               	movlw	231
  4422   001F3C  6ED4               	movwf	212,c	;volatile
  4423                           
  4424                           ;timers.c: 14:     TMR0L=0b10010101;
  4425   001F3E  0E95               	movlw	149
  4426   001F40  6ED3               	movwf	211,c	;volatile
  4427   001F42                     
  4428                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4429   001F42  88D5               	bsf	213,4,c	;volatile
  4430   001F44                     
  4431                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4432   001F44  8ED5               	bsf	213,7,c	;volatile
  4433   001F46  0012               	return		;funcret
  4434   001F48                     __end_of_Timer0_init:
  4435                           	callstack 0
  4436                           
  4437 ;; *************** function _RobotMovement *****************
  4438 ;; Defined at:
  4439 ;;		line 303 in file "dc_motor.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  color           2   29[COMRAM] unsigned int 
  4442 ;;  motorL          2   31[COMRAM] PTR struct DC_motor
  4443 ;;		 -> main@motorL(9), 
  4444 ;;  motorR          2   33[COMRAM] PTR struct DC_motor
  4445 ;;		 -> main@motorR(9), 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  i               2   39[COMRAM] int 
  4448 ;;  i               2   37[COMRAM] int 
  4449 ;; Return value:  Size  Location     Type
  4450 ;;                  1    wreg      void 
  4451 ;; Registers used:
  4452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4458 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4459 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4461 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4462 ;;Total ram usage:       12 bytes
  4463 ;; Hardware stack levels used: 1
  4464 ;; Hardware stack levels required when called: 5
  4465 ;; This function calls:
  4466 ;;		_TimedfullSpeedAhead
  4467 ;;		_moveBack
  4468 ;;		_stop
  4469 ;;		_turnLeft
  4470 ;;		_turnLeftLong
  4471 ;;		_turnRight
  4472 ;;		_turnRightLong
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text28
  4479   000032                     __ptext28:
  4480                           	callstack 0
  4481   000032                     _RobotMovement:
  4482                           	callstack 25
  4483   000032                     
  4484                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 305:     moveBack(motorL, motorR, 11);
  4485   000032  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4486   000036  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4487   00003A  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4488   00003E  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4489   000042  0E00               	movlw	0
  4490   000044  6E19               	movwf	(moveBack@time+1)^0,c
  4491   000046  0E0B               	movlw	11
  4492   000048  6E18               	movwf	moveBack@time^0,c
  4493   00004A  ECDC  F00C         	call	_moveBack	;wreg free
  4494                           
  4495                           ;dc_motor.c: 306:     stop(motorL,motorR);
  4496   00004E  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4497   000052  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4498   000056  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4499   00005A  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4500   00005E  ECBC  F00E         	call	_stop	;wreg free
  4501   000062                     
  4502                           ;dc_motor.c: 309:     if(color == 0){
  4503   000062  501E               	movf	RobotMovement@color^0,w,c
  4504   000064  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4505   000066  A4D8               	btfss	status,2,c
  4506   000068  EF38  F000         	goto	u1831
  4507   00006C  EF3A  F000         	goto	u1830
  4508   000070                     u1831:
  4509   000070  EF53  F000         	goto	l2844
  4510   000074                     u1830:
  4511   000074                     
  4512                           ;dc_motor.c: 310:         turnRight(motorL, motorR);
  4513   000074  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4514   000078  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4515   00007C  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4516   000080  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4517   000084  EC47  F008         	call	_turnRight	;wreg free
  4518   000088                     
  4519                           ;dc_motor.c: 311:         movement_list[index] = -1;
  4520   000088  90D8               	bcf	status,0,c
  4521   00008A  3453               	rlcf	_index^0,w,c
  4522   00008C  6ED9               	movwf	fsr2l,c
  4523   00008E  3454               	rlcf	(_index+1)^0,w,c
  4524   000090  6EDA               	movwf	fsr2h,c
  4525   000092  0E00               	movlw	low _movement_list
  4526   000094  26D9               	addwf	fsr2l,f,c
  4527   000096  0E02               	movlw	high _movement_list
  4528   000098  22DA               	addwfc	fsr2h,f,c
  4529   00009A  0EFF               	movlw	255
  4530   00009C  6EDE               	movwf	postinc2,c
  4531   00009E  0EFF               	movlw	255
  4532   0000A0  6EDD               	movwf	postdec2,c
  4533   0000A2                     
  4534                           ;dc_motor.c: 312:         index++;
  4535   0000A2  4A53               	infsnz	_index^0,f,c
  4536   0000A4  2A54               	incf	(_index+1)^0,f,c
  4537   0000A6                     l2844:
  4538                           
  4539                           ;dc_motor.c: 315:     if(color == 1){
  4540   0000A6  041E               	decf	RobotMovement@color^0,w,c
  4541   0000A8  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4542   0000AA  A4D8               	btfss	status,2,c
  4543   0000AC  EF5A  F000         	goto	u1841
  4544   0000B0  EF5C  F000         	goto	u1840
  4545   0000B4                     u1841:
  4546   0000B4  EF75  F000         	goto	l2852
  4547   0000B8                     u1840:
  4548   0000B8                     
  4549                           ;dc_motor.c: 316:         turnLeft(motorL, motorR);
  4550   0000B8  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4551   0000BC  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4552   0000C0  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4553   0000C4  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4554   0000C8  EC9A  F007         	call	_turnLeft	;wreg free
  4555   0000CC                     
  4556                           ;dc_motor.c: 317:         movement_list[index] = -2;
  4557   0000CC  90D8               	bcf	status,0,c
  4558   0000CE  3453               	rlcf	_index^0,w,c
  4559   0000D0  6ED9               	movwf	fsr2l,c
  4560   0000D2  3454               	rlcf	(_index+1)^0,w,c
  4561   0000D4  6EDA               	movwf	fsr2h,c
  4562   0000D6  0E00               	movlw	low _movement_list
  4563   0000D8  26D9               	addwf	fsr2l,f,c
  4564   0000DA  0E02               	movlw	high _movement_list
  4565   0000DC  22DA               	addwfc	fsr2h,f,c
  4566   0000DE  0EFE               	movlw	254
  4567   0000E0  6EDE               	movwf	postinc2,c
  4568   0000E2  0EFF               	movlw	255
  4569   0000E4  6EDD               	movwf	postdec2,c
  4570   0000E6                     
  4571                           ;dc_motor.c: 318:         index++;
  4572   0000E6  4A53               	infsnz	_index^0,f,c
  4573   0000E8  2A54               	incf	(_index+1)^0,f,c
  4574   0000EA                     l2852:
  4575                           
  4576                           ;dc_motor.c: 321:     if(color == 2){
  4577   0000EA  0E02               	movlw	2
  4578   0000EC  181E               	xorwf	RobotMovement@color^0,w,c
  4579   0000EE  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4580   0000F0  A4D8               	btfss	status,2,c
  4581   0000F2  EF7D  F000         	goto	u1851
  4582   0000F6  EF7F  F000         	goto	u1850
  4583   0000FA                     u1851:
  4584   0000FA  EFAC  F000         	goto	l2870
  4585   0000FE                     u1850:
  4586   0000FE                     
  4587                           ;dc_motor.c: 322:         int i;;dc_motor.c: 323:         for (i=0;i<2;i++){
  4588   0000FE  0E00               	movlw	0
  4589   000100  6E27               	movwf	(RobotMovement@i+1)^0,c
  4590   000102  0E00               	movlw	0
  4591   000104  6E26               	movwf	RobotMovement@i^0,c
  4592   000106                     l2860:
  4593                           
  4594                           ;dc_motor.c: 324:             turnRight(motorL, motorR);
  4595   000106  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4596   00010A  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4597   00010E  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4598   000112  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4599   000116  EC47  F008         	call	_turnRight	;wreg free
  4600   00011A                     
  4601                           ;dc_motor.c: 325:             movement_list[index] = -1;
  4602   00011A  90D8               	bcf	status,0,c
  4603   00011C  3453               	rlcf	_index^0,w,c
  4604   00011E  6ED9               	movwf	fsr2l,c
  4605   000120  3454               	rlcf	(_index+1)^0,w,c
  4606   000122  6EDA               	movwf	fsr2h,c
  4607   000124  0E00               	movlw	low _movement_list
  4608   000126  26D9               	addwf	fsr2l,f,c
  4609   000128  0E02               	movlw	high _movement_list
  4610   00012A  22DA               	addwfc	fsr2h,f,c
  4611   00012C  0EFF               	movlw	255
  4612   00012E  6EDE               	movwf	postinc2,c
  4613   000130  0EFF               	movlw	255
  4614   000132  6EDD               	movwf	postdec2,c
  4615   000134                     
  4616                           ;dc_motor.c: 326:             index++;
  4617   000134  4A53               	infsnz	_index^0,f,c
  4618   000136  2A54               	incf	(_index+1)^0,f,c
  4619   000138                     
  4620                           ;dc_motor.c: 327:         }
  4621   000138  4A26               	infsnz	RobotMovement@i^0,f,c
  4622   00013A  2A27               	incf	(RobotMovement@i+1)^0,f,c
  4623   00013C  BE27               	btfsc	(RobotMovement@i+1)^0,7,c
  4624   00013E  EFAA  F000         	goto	u1861
  4625   000142  5027               	movf	(RobotMovement@i+1)^0,w,c
  4626   000144  E109               	bnz	u1860
  4627   000146  0E02               	movlw	2
  4628   000148  5C26               	subwf	RobotMovement@i^0,w,c
  4629   00014A  A0D8               	btfss	status,0,c
  4630   00014C  EFAA  F000         	goto	u1861
  4631   000150  EFAC  F000         	goto	u1860
  4632   000154                     u1861:
  4633   000154  EF83  F000         	goto	l2860
  4634   000158                     u1860:
  4635   000158                     l2870:
  4636                           
  4637                           ;dc_motor.c: 330:     if(color == 3){
  4638   000158  0E03               	movlw	3
  4639   00015A  181E               	xorwf	RobotMovement@color^0,w,c
  4640   00015C  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4641   00015E  A4D8               	btfss	status,2,c
  4642   000160  EFB4  F000         	goto	u1871
  4643   000164  EFB6  F000         	goto	u1870
  4644   000168                     u1871:
  4645   000168  EF6E  F001         	goto	l2890
  4646   00016C                     u1870:
  4647   00016C                     
  4648                           ;dc_motor.c: 332:         moveBack(motorL, motorR, 33);
  4649   00016C  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4650   000170  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4651   000174  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4652   000178  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4653   00017C  0E00               	movlw	0
  4654   00017E  6E19               	movwf	(moveBack@time+1)^0,c
  4655   000180  0E21               	movlw	33
  4656   000182  6E18               	movwf	moveBack@time^0,c
  4657   000184  ECDC  F00C         	call	_moveBack	;wreg free
  4658                           
  4659                           ;dc_motor.c: 333:         stop(motorL, motorR);
  4660   000188  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4661   00018C  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4662   000190  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4663   000194  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4664   000198  ECBC  F00E         	call	_stop	;wreg free
  4665                           
  4666                           ;dc_motor.c: 334:         turnRight(motorL, motorR);
  4667   00019C  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  4668   0001A0  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4669   0001A4  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  4670   0001A8  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4671   0001AC  EC47  F008         	call	_turnRight	;wreg free
  4672   0001B0                     
  4673                           ;dc_motor.c: 336:         if (movement_list[index-1] > 11)
  4674   0001B0  90D8               	bcf	status,0,c
  4675   0001B2  3453               	rlcf	_index^0,w,c
  4676   0001B4  6ED9               	movwf	fsr2l,c
  4677   0001B6  3454               	rlcf	(_index+1)^0,w,c
  4678   0001B8  6EDA               	movwf	fsr2h,c
  4679   0001BA  0EFE               	movlw	low (_movement_list+65534)
  4680   0001BC  26D9               	addwf	fsr2l,f,c
  4681   0001BE  0E01               	movlw	high (_movement_list+65534)
  4682   0001C0  22DA               	addwfc	fsr2h,f,c
  4683   0001C2  0E01               	movlw	1
  4684   0001C4  BEDB               	btfsc	plusw2,7,c
  4685   0001C6  EFEF  F000         	goto	u1881
  4686   0001CA  0E01               	movlw	1
  4687   0001CC  50DB               	movf	plusw2,w,c
  4688   0001CE  E109               	bnz	u1880
  4689   0001D0  0E0C               	movlw	12
  4690   0001D2  5CDE               	subwf	postinc2,w,c
  4691   0001D4  A0D8               	btfss	status,0,c
  4692   0001D6  EFEF  F000         	goto	u1881
  4693   0001DA  EFF1  F000         	goto	u1880
  4694   0001DE                     u1881:
  4695   0001DE  EF0F  F001         	goto	l2880
  4696   0001E2                     u1880:
  4697   0001E2                     
  4698                           ;dc_motor.c: 337:         {;dc_motor.c: 339:             movement_list[index-1] -= 22;
  4699   0001E2  90D8               	bcf	status,0,c
  4700   0001E4  3453               	rlcf	_index^0,w,c
  4701   0001E6  6ED9               	movwf	fsr2l,c
  4702   0001E8  3454               	rlcf	(_index+1)^0,w,c
  4703   0001EA  6EDA               	movwf	fsr2h,c
  4704   0001EC  0EFE               	movlw	low (_movement_list+65534)
  4705   0001EE  26D9               	addwf	fsr2l,f,c
  4706   0001F0  0E01               	movlw	high (_movement_list+65534)
  4707   0001F2  22DA               	addwfc	fsr2h,f,c
  4708   0001F4  0EEA               	movlw	234
  4709   0001F6  26DE               	addwf	postinc2,f,c
  4710   0001F8  0EFF               	movlw	255
  4711   0001FA  22DD               	addwfc	postdec2,f,c
  4712                           
  4713                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4714   0001FC  90D8               	bcf	status,0,c
  4715   0001FE  3453               	rlcf	_index^0,w,c
  4716   000200  6ED9               	movwf	fsr2l,c
  4717   000202  3454               	rlcf	(_index+1)^0,w,c
  4718   000204  6EDA               	movwf	fsr2h,c
  4719   000206  0E00               	movlw	low _movement_list
  4720   000208  26D9               	addwf	fsr2l,f,c
  4721   00020A  0E02               	movlw	high _movement_list
  4722   00020C  22DA               	addwfc	fsr2h,f,c
  4723   00020E  0EFF               	movlw	255
  4724   000210  6EDE               	movwf	postinc2,c
  4725   000212  0EFF               	movlw	255
  4726   000214  6EDD               	movwf	postdec2,c
  4727   000216                     
  4728                           ;dc_motor.c: 342:             index += 1;
  4729   000216  4A53               	infsnz	_index^0,f,c
  4730   000218  2A54               	incf	(_index+1)^0,f,c
  4731                           
  4732                           ;dc_motor.c: 343:         }else{
  4733   00021A  EF6E  F001         	goto	l2890
  4734   00021E                     l2880:
  4735                           
  4736                           ;dc_motor.c: 345:             if (movement_list[index-1] == -1)
  4737   00021E  90D8               	bcf	status,0,c
  4738   000220  3453               	rlcf	_index^0,w,c
  4739   000222  6ED9               	movwf	fsr2l,c
  4740   000224  3454               	rlcf	(_index+1)^0,w,c
  4741   000226  6EDA               	movwf	fsr2h,c
  4742   000228  0EFE               	movlw	low (_movement_list+65534)
  4743   00022A  26D9               	addwf	fsr2l,f,c
  4744   00022C  0E01               	movlw	high (_movement_list+65534)
  4745   00022E  22DA               	addwfc	fsr2h,f,c
  4746   000230  28DE               	incf	postinc2,w,c
  4747   000232  E106               	bnz	u1891
  4748   000234  28DE               	incf	postinc2,w,c
  4749   000236  A4D8               	btfss	status,2,c
  4750   000238  EF20  F001         	goto	u1891
  4751   00023C  EF22  F001         	goto	u1890
  4752   000240                     u1891:
  4753   000240  EF2F  F001         	goto	l277
  4754   000244                     u1890:
  4755   000244                     
  4756                           ;dc_motor.c: 346:             {;dc_motor.c: 348:                 movement_list[index-1] 
      +                          = -2;
  4757   000244  90D8               	bcf	status,0,c
  4758   000246  3453               	rlcf	_index^0,w,c
  4759   000248  6ED9               	movwf	fsr2l,c
  4760   00024A  3454               	rlcf	(_index+1)^0,w,c
  4761   00024C  6EDA               	movwf	fsr2h,c
  4762   00024E  0EFE               	movlw	low (_movement_list+65534)
  4763   000250  26D9               	addwf	fsr2l,f,c
  4764   000252  0E01               	movlw	high (_movement_list+65534)
  4765   000254  22DA               	addwfc	fsr2h,f,c
  4766   000256  0EFE               	movlw	254
  4767   000258  6EDE               	movwf	postinc2,c
  4768   00025A  0EFF               	movlw	255
  4769   00025C  6EDD               	movwf	postdec2,c
  4770   00025E                     l277:
  4771                           
  4772                           ;dc_motor.c: 351:             if (movement_list[index-1] == -2)
  4773   00025E  90D8               	bcf	status,0,c
  4774   000260  3453               	rlcf	_index^0,w,c
  4775   000262  6ED9               	movwf	fsr2l,c
  4776   000264  3454               	rlcf	(_index+1)^0,w,c
  4777   000266  6EDA               	movwf	fsr2h,c
  4778   000268  0EFE               	movlw	low (_movement_list+65534)
  4779   00026A  26D9               	addwf	fsr2l,f,c
  4780   00026C  0E01               	movlw	high (_movement_list+65534)
  4781   00026E  22DA               	addwfc	fsr2h,f,c
  4782   000270  0EFE               	movlw	254
  4783   000272  18DE               	xorwf	postinc2,w,c
  4784   000274  E106               	bnz	u1901
  4785   000276  28DE               	incf	postinc2,w,c
  4786   000278  A4D8               	btfss	status,2,c
  4787   00027A  EF41  F001         	goto	u1901
  4788   00027E  EF43  F001         	goto	u1900
  4789   000282                     u1901:
  4790   000282  EF50  F001         	goto	l278
  4791   000286                     u1900:
  4792   000286                     
  4793                           ;dc_motor.c: 352:             {;dc_motor.c: 354:                 movement_list[index-1] 
      +                          = -1;
  4794   000286  90D8               	bcf	status,0,c
  4795   000288  3453               	rlcf	_index^0,w,c
  4796   00028A  6ED9               	movwf	fsr2l,c
  4797   00028C  3454               	rlcf	(_index+1)^0,w,c
  4798   00028E  6EDA               	movwf	fsr2h,c
  4799   000290  0EFE               	movlw	low (_movement_list+65534)
  4800   000292  26D9               	addwf	fsr2l,f,c
  4801   000294  0E01               	movlw	high (_movement_list+65534)
  4802   000296  22DA               	addwfc	fsr2h,f,c
  4803   000298  0EFF               	movlw	255
  4804   00029A  6EDE               	movwf	postinc2,c
  4805   00029C  0EFF               	movlw	255
  4806   00029E  6EDD               	movwf	postdec2,c
  4807   0002A0                     l278:
  4808                           
  4809                           ;dc_motor.c: 357:         movement_list[index] = 22;
  4810   0002A0  90D8               	bcf	status,0,c
  4811   0002A2  3453               	rlcf	_index^0,w,c
  4812   0002A4  6ED9               	movwf	fsr2l,c
  4813   0002A6  3454               	rlcf	(_index+1)^0,w,c
  4814   0002A8  6EDA               	movwf	fsr2h,c
  4815   0002AA  0E00               	movlw	low _movement_list
  4816   0002AC  26D9               	addwf	fsr2l,f,c
  4817   0002AE  0E02               	movlw	high _movement_list
  4818   0002B0  22DA               	addwfc	fsr2h,f,c
  4819   0002B2  0E16               	movlw	22
  4820   0002B4  6EDE               	movwf	postinc2,c
  4821   0002B6  0E00               	movlw	0
  4822   0002B8  6EDD               	movwf	postdec2,c
  4823   0002BA                     
  4824                           ;dc_motor.c: 358:         index += 1;
  4825   0002BA  4A53               	infsnz	_index^0,f,c
  4826   0002BC  2A54               	incf	(_index+1)^0,f,c
  4827   0002BE                     
  4828                           ;dc_motor.c: 360:         movement_list[index] = -2;
  4829   0002BE  90D8               	bcf	status,0,c
  4830   0002C0  3453               	rlcf	_index^0,w,c
  4831   0002C2  6ED9               	movwf	fsr2l,c
  4832   0002C4  3454               	rlcf	(_index+1)^0,w,c
  4833   0002C6  6EDA               	movwf	fsr2h,c
  4834   0002C8  0E00               	movlw	low _movement_list
  4835   0002CA  26D9               	addwf	fsr2l,f,c
  4836   0002CC  0E02               	movlw	high _movement_list
  4837   0002CE  22DA               	addwfc	fsr2h,f,c
  4838   0002D0  0EFE               	movlw	254
  4839   0002D2  6EDE               	movwf	postinc2,c
  4840   0002D4  0EFF               	movlw	255
  4841   0002D6  6EDD               	movwf	postdec2,c
  4842                           
  4843                           ;dc_motor.c: 361:         index += 1;
  4844   0002D8  4A53               	infsnz	_index^0,f,c
  4845   0002DA  2A54               	incf	(_index+1)^0,f,c
  4846   0002DC                     l2890:
  4847                           
  4848                           ;dc_motor.c: 366:     if(color == 4){
  4849   0002DC  0E04               	movlw	4
  4850   0002DE  181E               	xorwf	RobotMovement@color^0,w,c
  4851   0002E0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  4852   0002E2  A4D8               	btfss	status,2,c
  4853   0002E4  EF76  F001         	goto	u1911
  4854   0002E8  EF78  F001         	goto	u1910
  4855   0002EC                     u1911:
  4856   0002EC  EF30  F002         	goto	l2910
  4857   0002F0                     u1910:
  4858   0002F0                     
  4859                           ;dc_motor.c: 368:         moveBack(motorL, motorR, 33);
  4860   0002F0  C020  F014         	movff	RobotMovement@motorL,moveBack@mL
  4861   0002F4  C021  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4862   0002F8  C022  F016         	movff	RobotMovement@motorR,moveBack@mR
  4863   0002FC  C023  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4864   000300  0E00               	movlw	0
  4865   000302  6E19               	movwf	(moveBack@time+1)^0,c
  4866   000304  0E21               	movlw	33
  4867   000306  6E18               	movwf	moveBack@time^0,c
  4868   000308  ECDC  F00C         	call	_moveBack	;wreg free
  4869                           
  4870                           ;dc_motor.c: 369:         stop(motorL, motorR);
  4871   00030C  C020  F014         	movff	RobotMovement@motorL,stop@mL
  4872   000310  C021  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4873   000314  C022  F016         	movff	RobotMovement@motorR,stop@mR
  4874   000318  C023  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4875   00031C  ECBC  F00E         	call	_stop	;wreg free
  4876                           
  4877                           ;dc_motor.c: 370:         turnLeft(motorL, motorR);
  4878   000320  C020  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4879   000324  C021  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4880   000328  C022  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4881   00032C  C023  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4882   000330  EC9A  F007         	call	_turnLeft	;wreg free
  4883   000334                     
  4884                           ;dc_motor.c: 372:         if (movement_list[index-1] > 11)
  4885   000334  90D8               	bcf	status,0,c
  4886   000336  3453               	rlcf	_index^0,w,c
  4887   000338  6ED9               	movwf	fsr2l,c
  4888   00033A  3454               	rlcf	(_index+1)^0,w,c
  4889   00033C  6EDA               	movwf	fsr2h,c
  4890   00033E  0EFE               	movlw	low (_movement_list+65534)
  4891   000340  26D9               	addwf	fsr2l,f,c
  4892   000342  0E01               	movlw	high (_movement_list+65534)
  4893   000344  22DA               	addwfc	fsr2h,f,c
  4894   000346  0E01               	movlw	1
  4895   000348  BEDB               	btfsc	plusw2,7,c
  4896   00034A  EFB1  F001         	goto	u1921
  4897   00034E  0E01               	movlw	1
  4898   000350  50DB               	movf	plusw2,w,c
  4899   000352  E109               	bnz	u1920
  4900   000354  0E0C               	movlw	12
  4901   000356  5CDE               	subwf	postinc2,w,c
  4902   000358  A0D8               	btfss	status,0,c
  4903   00035A  EFB1  F001         	goto	u1921
  4904   00035E  EFB3  F001         	goto	u1920
  4905   000362                     u1921:
  4906   000362  EFD1  F001         	goto	l2900
  4907   000366                     u1920:
  4908   000366                     
  4909                           ;dc_motor.c: 373:         {;dc_motor.c: 375:             movement_list[index-1] -= 22;
  4910   000366  90D8               	bcf	status,0,c
  4911   000368  3453               	rlcf	_index^0,w,c
  4912   00036A  6ED9               	movwf	fsr2l,c
  4913   00036C  3454               	rlcf	(_index+1)^0,w,c
  4914   00036E  6EDA               	movwf	fsr2h,c
  4915   000370  0EFE               	movlw	low (_movement_list+65534)
  4916   000372  26D9               	addwf	fsr2l,f,c
  4917   000374  0E01               	movlw	high (_movement_list+65534)
  4918   000376  22DA               	addwfc	fsr2h,f,c
  4919   000378  0EEA               	movlw	234
  4920   00037A  26DE               	addwf	postinc2,f,c
  4921   00037C  0EFF               	movlw	255
  4922   00037E  22DD               	addwfc	postdec2,f,c
  4923                           
  4924                           ;dc_motor.c: 377:             movement_list[index] = -2;
  4925   000380  90D8               	bcf	status,0,c
  4926   000382  3453               	rlcf	_index^0,w,c
  4927   000384  6ED9               	movwf	fsr2l,c
  4928   000386  3454               	rlcf	(_index+1)^0,w,c
  4929   000388  6EDA               	movwf	fsr2h,c
  4930   00038A  0E00               	movlw	low _movement_list
  4931   00038C  26D9               	addwf	fsr2l,f,c
  4932   00038E  0E02               	movlw	high _movement_list
  4933   000390  22DA               	addwfc	fsr2h,f,c
  4934   000392  0EFE               	movlw	254
  4935   000394  6EDE               	movwf	postinc2,c
  4936   000396  0EFF               	movlw	255
  4937   000398  6EDD               	movwf	postdec2,c
  4938   00039A                     
  4939                           ;dc_motor.c: 378:             index += 1;
  4940   00039A  4A53               	infsnz	_index^0,f,c
  4941   00039C  2A54               	incf	(_index+1)^0,f,c
  4942                           
  4943                           ;dc_motor.c: 379:         }else{
  4944   00039E  EF30  F002         	goto	l2910
  4945   0003A2                     l2900:
  4946                           
  4947                           ;dc_motor.c: 381:             if (movement_list[index-1] == -1)
  4948   0003A2  90D8               	bcf	status,0,c
  4949   0003A4  3453               	rlcf	_index^0,w,c
  4950   0003A6  6ED9               	movwf	fsr2l,c
  4951   0003A8  3454               	rlcf	(_index+1)^0,w,c
  4952   0003AA  6EDA               	movwf	fsr2h,c
  4953   0003AC  0EFE               	movlw	low (_movement_list+65534)
  4954   0003AE  26D9               	addwf	fsr2l,f,c
  4955   0003B0  0E01               	movlw	high (_movement_list+65534)
  4956   0003B2  22DA               	addwfc	fsr2h,f,c
  4957   0003B4  28DE               	incf	postinc2,w,c
  4958   0003B6  E106               	bnz	u1931
  4959   0003B8  28DE               	incf	postinc2,w,c
  4960   0003BA  A4D8               	btfss	status,2,c
  4961   0003BC  EFE2  F001         	goto	u1931
  4962   0003C0  EFE4  F001         	goto	u1930
  4963   0003C4                     u1931:
  4964   0003C4  EFF1  F001         	goto	l282
  4965   0003C8                     u1930:
  4966   0003C8                     
  4967                           ;dc_motor.c: 382:             {;dc_motor.c: 384:                 movement_list[index-1] 
      +                          = -2;
  4968   0003C8  90D8               	bcf	status,0,c
  4969   0003CA  3453               	rlcf	_index^0,w,c
  4970   0003CC  6ED9               	movwf	fsr2l,c
  4971   0003CE  3454               	rlcf	(_index+1)^0,w,c
  4972   0003D0  6EDA               	movwf	fsr2h,c
  4973   0003D2  0EFE               	movlw	low (_movement_list+65534)
  4974   0003D4  26D9               	addwf	fsr2l,f,c
  4975   0003D6  0E01               	movlw	high (_movement_list+65534)
  4976   0003D8  22DA               	addwfc	fsr2h,f,c
  4977   0003DA  0EFE               	movlw	254
  4978   0003DC  6EDE               	movwf	postinc2,c
  4979   0003DE  0EFF               	movlw	255
  4980   0003E0  6EDD               	movwf	postdec2,c
  4981   0003E2                     l282:
  4982                           
  4983                           ;dc_motor.c: 387:             if (movement_list[index-1] == -2)
  4984   0003E2  90D8               	bcf	status,0,c
  4985   0003E4  3453               	rlcf	_index^0,w,c
  4986   0003E6  6ED9               	movwf	fsr2l,c
  4987   0003E8  3454               	rlcf	(_index+1)^0,w,c
  4988   0003EA  6EDA               	movwf	fsr2h,c
  4989   0003EC  0EFE               	movlw	low (_movement_list+65534)
  4990   0003EE  26D9               	addwf	fsr2l,f,c
  4991   0003F0  0E01               	movlw	high (_movement_list+65534)
  4992   0003F2  22DA               	addwfc	fsr2h,f,c
  4993   0003F4  0EFE               	movlw	254
  4994   0003F6  18DE               	xorwf	postinc2,w,c
  4995   0003F8  E106               	bnz	u1941
  4996   0003FA  28DE               	incf	postinc2,w,c
  4997   0003FC  A4D8               	btfss	status,2,c
  4998   0003FE  EF03  F002         	goto	u1941
  4999   000402  EF05  F002         	goto	u1940
  5000   000406                     u1941:
  5001   000406  EF12  F002         	goto	l283
  5002   00040A                     u1940:
  5003   00040A                     
  5004                           ;dc_motor.c: 388:             {;dc_motor.c: 390:                 movement_list[index-1] 
      +                          = -1;
  5005   00040A  90D8               	bcf	status,0,c
  5006   00040C  3453               	rlcf	_index^0,w,c
  5007   00040E  6ED9               	movwf	fsr2l,c
  5008   000410  3454               	rlcf	(_index+1)^0,w,c
  5009   000412  6EDA               	movwf	fsr2h,c
  5010   000414  0EFE               	movlw	low (_movement_list+65534)
  5011   000416  26D9               	addwf	fsr2l,f,c
  5012   000418  0E01               	movlw	high (_movement_list+65534)
  5013   00041A  22DA               	addwfc	fsr2h,f,c
  5014   00041C  0EFF               	movlw	255
  5015   00041E  6EDE               	movwf	postinc2,c
  5016   000420  0EFF               	movlw	255
  5017   000422  6EDD               	movwf	postdec2,c
  5018   000424                     l283:
  5019                           
  5020                           ;dc_motor.c: 393:         movement_list[index] = 22;
  5021   000424  90D8               	bcf	status,0,c
  5022   000426  3453               	rlcf	_index^0,w,c
  5023   000428  6ED9               	movwf	fsr2l,c
  5024   00042A  3454               	rlcf	(_index+1)^0,w,c
  5025   00042C  6EDA               	movwf	fsr2h,c
  5026   00042E  0E00               	movlw	low _movement_list
  5027   000430  26D9               	addwf	fsr2l,f,c
  5028   000432  0E02               	movlw	high _movement_list
  5029   000434  22DA               	addwfc	fsr2h,f,c
  5030   000436  0E16               	movlw	22
  5031   000438  6EDE               	movwf	postinc2,c
  5032   00043A  0E00               	movlw	0
  5033   00043C  6EDD               	movwf	postdec2,c
  5034   00043E                     
  5035                           ;dc_motor.c: 394:         index += 1;
  5036   00043E  4A53               	infsnz	_index^0,f,c
  5037   000440  2A54               	incf	(_index+1)^0,f,c
  5038   000442                     
  5039                           ;dc_motor.c: 396:         movement_list[index] = -1;
  5040   000442  90D8               	bcf	status,0,c
  5041   000444  3453               	rlcf	_index^0,w,c
  5042   000446  6ED9               	movwf	fsr2l,c
  5043   000448  3454               	rlcf	(_index+1)^0,w,c
  5044   00044A  6EDA               	movwf	fsr2h,c
  5045   00044C  0E00               	movlw	low _movement_list
  5046   00044E  26D9               	addwf	fsr2l,f,c
  5047   000450  0E02               	movlw	high _movement_list
  5048   000452  22DA               	addwfc	fsr2h,f,c
  5049   000454  0EFF               	movlw	255
  5050   000456  6EDE               	movwf	postinc2,c
  5051   000458  0EFF               	movlw	255
  5052   00045A  6EDD               	movwf	postdec2,c
  5053                           
  5054                           ;dc_motor.c: 397:         index += 1;
  5055   00045C  4A53               	infsnz	_index^0,f,c
  5056   00045E  2A54               	incf	(_index+1)^0,f,c
  5057   000460                     l2910:
  5058                           
  5059                           ;dc_motor.c: 401:     if(color == 5){
  5060   000460  0E05               	movlw	5
  5061   000462  181E               	xorwf	RobotMovement@color^0,w,c
  5062   000464  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5063   000466  A4D8               	btfss	status,2,c
  5064   000468  EF38  F002         	goto	u1951
  5065   00046C  EF3A  F002         	goto	u1950
  5066   000470                     u1951:
  5067   000470  EF53  F002         	goto	l2918
  5068   000474                     u1950:
  5069   000474                     
  5070                           ;dc_motor.c: 402:         turnRightLong(motorL, motorR);
  5071   000474  C020  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  5072   000478  C021  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5073   00047C  C022  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  5074   000480  C023  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5075   000484  EC2A  F00A         	call	_turnRightLong	;wreg free
  5076   000488                     
  5077                           ;dc_motor.c: 403:         movement_list[index] = -3;
  5078   000488  90D8               	bcf	status,0,c
  5079   00048A  3453               	rlcf	_index^0,w,c
  5080   00048C  6ED9               	movwf	fsr2l,c
  5081   00048E  3454               	rlcf	(_index+1)^0,w,c
  5082   000490  6EDA               	movwf	fsr2h,c
  5083   000492  0E00               	movlw	low _movement_list
  5084   000494  26D9               	addwf	fsr2l,f,c
  5085   000496  0E02               	movlw	high _movement_list
  5086   000498  22DA               	addwfc	fsr2h,f,c
  5087   00049A  0EFD               	movlw	253
  5088   00049C  6EDE               	movwf	postinc2,c
  5089   00049E  0EFF               	movlw	255
  5090   0004A0  6EDD               	movwf	postdec2,c
  5091   0004A2                     
  5092                           ;dc_motor.c: 404:         index += 1;
  5093   0004A2  4A53               	infsnz	_index^0,f,c
  5094   0004A4  2A54               	incf	(_index+1)^0,f,c
  5095   0004A6                     l2918:
  5096                           
  5097                           ;dc_motor.c: 407:     if(color == 6){
  5098   0004A6  0E06               	movlw	6
  5099   0004A8  181E               	xorwf	RobotMovement@color^0,w,c
  5100   0004AA  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5101   0004AC  A4D8               	btfss	status,2,c
  5102   0004AE  EF5B  F002         	goto	u1961
  5103   0004B2  EF5D  F002         	goto	u1960
  5104   0004B6                     u1961:
  5105   0004B6  EF76  F002         	goto	l2926
  5106   0004BA                     u1960:
  5107   0004BA                     
  5108                           ;dc_motor.c: 408:         turnLeftLong(motorL, motorR);
  5109   0004BA  C020  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  5110   0004BE  C021  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5111   0004C2  C022  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  5112   0004C6  C023  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5113   0004CA  ECBE  F00A         	call	_turnLeftLong	;wreg free
  5114   0004CE                     
  5115                           ;dc_motor.c: 409:         movement_list[index] = -4;
  5116   0004CE  90D8               	bcf	status,0,c
  5117   0004D0  3453               	rlcf	_index^0,w,c
  5118   0004D2  6ED9               	movwf	fsr2l,c
  5119   0004D4  3454               	rlcf	(_index+1)^0,w,c
  5120   0004D6  6EDA               	movwf	fsr2h,c
  5121   0004D8  0E00               	movlw	low _movement_list
  5122   0004DA  26D9               	addwf	fsr2l,f,c
  5123   0004DC  0E02               	movlw	high _movement_list
  5124   0004DE  22DA               	addwfc	fsr2h,f,c
  5125   0004E0  0EFC               	movlw	252
  5126   0004E2  6EDE               	movwf	postinc2,c
  5127   0004E4  0EFF               	movlw	255
  5128   0004E6  6EDD               	movwf	postdec2,c
  5129   0004E8                     
  5130                           ;dc_motor.c: 410:         index += 1;
  5131   0004E8  4A53               	infsnz	_index^0,f,c
  5132   0004EA  2A54               	incf	(_index+1)^0,f,c
  5133   0004EC                     l2926:
  5134                           
  5135                           ;dc_motor.c: 413:     if(color == 7){
  5136   0004EC  0E07               	movlw	7
  5137   0004EE  181E               	xorwf	RobotMovement@color^0,w,c
  5138   0004F0  101F               	iorwf	(RobotMovement@color+1)^0,w,c
  5139   0004F2  A4D8               	btfss	status,2,c
  5140   0004F4  EF7E  F002         	goto	u1971
  5141   0004F8  EF80  F002         	goto	u1970
  5142   0004FC                     u1971:
  5143   0004FC  EFA2  F002         	goto	l2942
  5144   000500                     u1970:
  5145   000500                     
  5146                           ;dc_motor.c: 414:         int i;;dc_motor.c: 415:         for (i=0;i<2;i++)
  5147   000500  0E00               	movlw	0
  5148   000502  6E29               	movwf	(RobotMovement@i_1265+1)^0,c
  5149   000504  0E00               	movlw	0
  5150   000506  6E28               	movwf	RobotMovement@i_1265^0,c
  5151   000508                     l2934:
  5152                           
  5153                           ;dc_motor.c: 416:         {;dc_motor.c: 417:             turnRight(motorL, motorR);
  5154   000508  C020  F014         	movff	RobotMovement@motorL,turnRight@mL
  5155   00050C  C021  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5156   000510  C022  F016         	movff	RobotMovement@motorR,turnRight@mR
  5157   000514  C023  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5158   000518  EC47  F008         	call	_turnRight	;wreg free
  5159   00051C                     
  5160                           ;dc_motor.c: 418:         }
  5161   00051C  4A28               	infsnz	RobotMovement@i_1265^0,f,c
  5162   00051E  2A29               	incf	(RobotMovement@i_1265+1)^0,f,c
  5163   000520  BE29               	btfsc	(RobotMovement@i_1265+1)^0,7,c
  5164   000522  EF9C  F002         	goto	u1981
  5165   000526  5029               	movf	(RobotMovement@i_1265+1)^0,w,c
  5166   000528  E109               	bnz	u1980
  5167   00052A  0E02               	movlw	2
  5168   00052C  5C28               	subwf	RobotMovement@i_1265^0,w,c
  5169   00052E  A0D8               	btfss	status,0,c
  5170   000530  EF9C  F002         	goto	u1981
  5171   000534  EF9E  F002         	goto	u1980
  5172   000538                     u1981:
  5173   000538  EF84  F002         	goto	l2934
  5174   00053C                     u1980:
  5175   00053C                     
  5176                           ;dc_motor.c: 420:         state = 1;
  5177   00053C  0E00               	movlw	0
  5178   00053E  6E52               	movwf	(_state+1)^0,c
  5179   000540  0E01               	movlw	1
  5180   000542  6E51               	movwf	_state^0,c
  5181   000544                     l2942:
  5182                           
  5183                           ;dc_motor.c: 423:     if (color > 7)
  5184   000544  501F               	movf	(RobotMovement@color+1)^0,w,c
  5185   000546  E109               	bnz	u1990
  5186   000548  0E08               	movlw	8
  5187   00054A  5C1E               	subwf	RobotMovement@color^0,w,c
  5188   00054C  A0D8               	btfss	status,0,c
  5189   00054E  EFAB  F002         	goto	u1991
  5190   000552  EFAD  F002         	goto	u1990
  5191   000556                     u1991:
  5192   000556  EFBB  F002         	goto	l290
  5193   00055A                     u1990:
  5194   00055A                     
  5195                           ;dc_motor.c: 424:     {;dc_motor.c: 425:         TimedfullSpeedAhead(motorL, motorR, 11)
      +                          ;
  5196   00055A  C020  F014         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5197   00055E  C021  F015         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5198   000562  C022  F016         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5199   000566  C023  F017         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5200   00056A  0E00               	movlw	0
  5201   00056C  6E19               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5202   00056E  0E0B               	movlw	11
  5203   000570  6E18               	movwf	TimedfullSpeedAhead@time^0,c
  5204   000572  EC16  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5205   000576                     l290:
  5206   000576  0012               	return		;funcret
  5207   000578                     __end_of_RobotMovement:
  5208                           	callstack 0
  5209                           
  5210 ;; *************** function _turnRightLong *****************
  5211 ;; Defined at:
  5212 ;;		line 231 in file "dc_motor.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5215 ;;		 -> main@motorL(9), 
  5216 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5217 ;;		 -> main@motorR(9), 
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;  i               2   25[COMRAM] int 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      void 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 0/0
  5226 ;;		On exit  : 0/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5229 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5231 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5232 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5233 ;;Total ram usage:        8 bytes
  5234 ;; Hardware stack levels used: 1
  5235 ;; Hardware stack levels required when called: 4
  5236 ;; This function calls:
  5237 ;;		_setMotorPWM
  5238 ;; This function is called by:
  5239 ;;		_RobotMovement
  5240 ;;		_return_back
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           	psect	text29
  5245   001454                     __ptext29:
  5246                           	callstack 0
  5247   001454                     _turnRightLong:
  5248                           	callstack 25
  5249   001454                     
  5250                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5251   001454  0E00               	movlw	0
  5252   001456  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5253   001458  0E19               	movlw	25
  5254   00145A  6E1A               	movwf	turnRightLong@i^0,c
  5255   00145C                     l2570:
  5256                           
  5257                           ;dc_motor.c: 236:     (*mL).direction=0;
  5258   00145C  EE20 F001          	lfsr	2,1
  5259   001460  5014               	movf	turnRightLong@mL^0,w,c
  5260   001462  26D9               	addwf	fsr2l,f,c
  5261   001464  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5262   001466  22DA               	addwfc	fsr2h,f,c
  5263   001468  0E00               	movlw	0
  5264   00146A  6EDF               	movwf	indf2,c
  5265                           
  5266                           ;dc_motor.c: 237:     (*mR).direction=1;
  5267   00146C  EE20 F001          	lfsr	2,1
  5268   001470  5016               	movf	turnRightLong@mR^0,w,c
  5269   001472  26D9               	addwf	fsr2l,f,c
  5270   001474  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5271   001476  22DA               	addwfc	fsr2h,f,c
  5272   001478  0E01               	movlw	1
  5273   00147A  6EDF               	movwf	indf2,c
  5274   00147C                     
  5275                           ;dc_motor.c: 238:     (*mL).power=i;
  5276   00147C  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5277   001480  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5278   001484  C01A  FFDF         	movff	turnRightLong@i,indf2
  5279   001488                     
  5280                           ;dc_motor.c: 239:     (*mR).power=i;
  5281   001488  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5282   00148C  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5283   001490  C01A  FFDF         	movff	turnRightLong@i,indf2
  5284   001494                     
  5285                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5286   001494  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5287   001498  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5288   00149C  ECE4  F006         	call	_setMotorPWM	;wreg free
  5289   0014A0                     
  5290                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5291   0014A0  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5292   0014A4  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5293   0014A8  ECE4  F006         	call	_setMotorPWM	;wreg free
  5294   0014AC                     
  5295                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5296   0014AC  0E0E               	movlw	14
  5297   0014AE  6E19               	movwf	(??_turnRightLong+1)^0,c
  5298   0014B0  0E12               	movlw	18
  5299   0014B2  6E18               	movwf	??_turnRightLong^0,c
  5300   0014B4  0E69               	movlw	105
  5301   0014B6                     u2637:
  5302   0014B6  2EE8               	decfsz	wreg,f,c
  5303   0014B8  D7FE               	bra	u2637
  5304   0014BA  2E18               	decfsz	??_turnRightLong^0,f,c
  5305   0014BC  D7FC               	bra	u2637
  5306   0014BE  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5307   0014C0  D7FA               	bra	u2637
  5308   0014C2  F000               	nop	
  5309   0014C4                     
  5310                           ;dc_motor.c: 243:     }
  5311   0014C4  0E05               	movlw	5
  5312   0014C6  261A               	addwf	turnRightLong@i^0,f,c
  5313   0014C8  0E00               	movlw	0
  5314   0014CA  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5315   0014CC  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5316   0014CE  EF72  F00A         	goto	u1481
  5317   0014D2  501B               	movf	(turnRightLong@i+1)^0,w,c
  5318   0014D4  E109               	bnz	u1480
  5319   0014D6  0E28               	movlw	40
  5320   0014D8  5C1A               	subwf	turnRightLong@i^0,w,c
  5321   0014DA  A0D8               	btfss	status,0,c
  5322   0014DC  EF72  F00A         	goto	u1481
  5323   0014E0  EF74  F00A         	goto	u1480
  5324   0014E4                     u1481:
  5325   0014E4  EF2E  F00A         	goto	l2570
  5326   0014E8                     u1480:
  5327   0014E8                     
  5328                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5329   0014E8  0E00               	movlw	0
  5330   0014EA  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5331   0014EC  0E1E               	movlw	30
  5332   0014EE  6E1A               	movwf	turnRightLong@i^0,c
  5333   0014F0                     l2592:
  5334                           
  5335                           ;dc_motor.c: 245:     (*mL).direction=0;
  5336   0014F0  EE20 F001          	lfsr	2,1
  5337   0014F4  5014               	movf	turnRightLong@mL^0,w,c
  5338   0014F6  26D9               	addwf	fsr2l,f,c
  5339   0014F8  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5340   0014FA  22DA               	addwfc	fsr2h,f,c
  5341   0014FC  0E00               	movlw	0
  5342   0014FE  6EDF               	movwf	indf2,c
  5343                           
  5344                           ;dc_motor.c: 246:     (*mR).direction=1;
  5345   001500  EE20 F001          	lfsr	2,1
  5346   001504  5016               	movf	turnRightLong@mR^0,w,c
  5347   001506  26D9               	addwf	fsr2l,f,c
  5348   001508  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5349   00150A  22DA               	addwfc	fsr2h,f,c
  5350   00150C  0E01               	movlw	1
  5351   00150E  6EDF               	movwf	indf2,c
  5352   001510                     
  5353                           ;dc_motor.c: 247:     (*mL).power=i;
  5354   001510  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5355   001514  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5356   001518  C01A  FFDF         	movff	turnRightLong@i,indf2
  5357   00151C                     
  5358                           ;dc_motor.c: 248:     (*mR).power=i;
  5359   00151C  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5360   001520  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5361   001524  C01A  FFDF         	movff	turnRightLong@i,indf2
  5362   001528                     
  5363                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5364   001528  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5365   00152C  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5366   001530  ECE4  F006         	call	_setMotorPWM	;wreg free
  5367   001534                     
  5368                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5369   001534  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5370   001538  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5371   00153C  ECE4  F006         	call	_setMotorPWM	;wreg free
  5372   001540                     
  5373                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5374   001540  0E0D               	movlw	13
  5375   001542  6E19               	movwf	(??_turnRightLong+1)^0,c
  5376   001544  0EBF               	movlw	191
  5377   001546  6E18               	movwf	??_turnRightLong^0,c
  5378   001548  0E4C               	movlw	76
  5379   00154A                     u2647:
  5380   00154A  2EE8               	decfsz	wreg,f,c
  5381   00154C  D7FE               	bra	u2647
  5382   00154E  2E18               	decfsz	??_turnRightLong^0,f,c
  5383   001550  D7FC               	bra	u2647
  5384   001552  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5385   001554  D7FA               	bra	u2647
  5386   001556                     
  5387                           ;dc_motor.c: 253:     }
  5388   001556  0EFB               	movlw	251
  5389   001558  261A               	addwf	turnRightLong@i^0,f,c
  5390   00155A  0EFF               	movlw	255
  5391   00155C  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5392   00155E  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5393   001560  EFBD  F00A         	goto	u1490
  5394   001564  501B               	movf	(turnRightLong@i+1)^0,w,c
  5395   001566  E107               	bnz	u1491
  5396   001568  0E10               	movlw	16
  5397   00156A  5C1A               	subwf	turnRightLong@i^0,w,c
  5398   00156C  B0D8               	btfsc	status,0,c
  5399   00156E  EFBB  F00A         	goto	u1491
  5400   001572  EFBD  F00A         	goto	u1490
  5401   001576                     u1491:
  5402   001576  EF78  F00A         	goto	l2592
  5403   00157A                     u1490:
  5404   00157A  0012               	return		;funcret
  5405   00157C                     __end_of_turnRightLong:
  5406                           	callstack 0
  5407                           
  5408 ;; *************** function _turnRight *****************
  5409 ;; Defined at:
  5410 ;;		line 154 in file "dc_motor.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5413 ;;		 -> main@motorL(9), 
  5414 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5415 ;;		 -> main@motorR(9), 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  i               2   27[COMRAM] int 
  5418 ;;  k               2   25[COMRAM] int 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5428 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5429 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5430 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5431 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5432 ;;Total ram usage:       10 bytes
  5433 ;; Hardware stack levels used: 1
  5434 ;; Hardware stack levels required when called: 4
  5435 ;; This function calls:
  5436 ;;		_setMotorPWM
  5437 ;; This function is called by:
  5438 ;;		_RobotMovement
  5439 ;;		_return_back
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text30
  5444   00108E                     __ptext30:
  5445                           	callstack 0
  5446   00108E                     _turnRight:
  5447                           	callstack 25
  5448   00108E                     
  5449                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5450   00108E  0E00               	movlw	0
  5451   001090  6E1B               	movwf	(turnRight@k+1)^0,c
  5452   001092  0E00               	movlw	0
  5453   001094  6E1A               	movwf	turnRight@k^0,c
  5454   001096                     l2472:
  5455                           
  5456                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5457   001096  0E00               	movlw	0
  5458   001098  6E1D               	movwf	(turnRight@i+1)^0,c
  5459   00109A  0E1B               	movlw	27
  5460   00109C  6E1C               	movwf	turnRight@i^0,c
  5461   00109E                     l2478:
  5462                           
  5463                           ;dc_motor.c: 185:         (*mL).direction=0;
  5464   00109E  EE20 F001          	lfsr	2,1
  5465   0010A2  5014               	movf	turnRight@mL^0,w,c
  5466   0010A4  26D9               	addwf	fsr2l,f,c
  5467   0010A6  5015               	movf	(turnRight@mL+1)^0,w,c
  5468   0010A8  22DA               	addwfc	fsr2h,f,c
  5469   0010AA  0E00               	movlw	0
  5470   0010AC  6EDF               	movwf	indf2,c
  5471                           
  5472                           ;dc_motor.c: 186:         (*mR).direction=1;
  5473   0010AE  EE20 F001          	lfsr	2,1
  5474   0010B2  5016               	movf	turnRight@mR^0,w,c
  5475   0010B4  26D9               	addwf	fsr2l,f,c
  5476   0010B6  5017               	movf	(turnRight@mR+1)^0,w,c
  5477   0010B8  22DA               	addwfc	fsr2h,f,c
  5478   0010BA  0E01               	movlw	1
  5479   0010BC  6EDF               	movwf	indf2,c
  5480   0010BE                     
  5481                           ;dc_motor.c: 187:         (*mL).power=i;
  5482   0010BE  C014  FFD9         	movff	turnRight@mL,fsr2l
  5483   0010C2  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5484   0010C6  C01C  FFDF         	movff	turnRight@i,indf2
  5485   0010CA                     
  5486                           ;dc_motor.c: 188:         (*mR).power=i;
  5487   0010CA  C016  FFD9         	movff	turnRight@mR,fsr2l
  5488   0010CE  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5489   0010D2  C01C  FFDF         	movff	turnRight@i,indf2
  5490   0010D6                     
  5491                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5492   0010D6  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5493   0010DA  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5494   0010DE  ECE4  F006         	call	_setMotorPWM	;wreg free
  5495   0010E2                     
  5496                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5497   0010E2  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5498   0010E6  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5499   0010EA  ECE4  F006         	call	_setMotorPWM	;wreg free
  5500   0010EE                     
  5501                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5502   0010EE  0E09               	movlw	9
  5503   0010F0  6E19               	movwf	(??_turnRight+1)^0,c
  5504   0010F2  0EB0               	movlw	176
  5505   0010F4  6E18               	movwf	??_turnRight^0,c
  5506   0010F6  0E58               	movlw	88
  5507   0010F8                     u2657:
  5508   0010F8  2EE8               	decfsz	wreg,f,c
  5509   0010FA  D7FE               	bra	u2657
  5510   0010FC  2E18               	decfsz	??_turnRight^0,f,c
  5511   0010FE  D7FC               	bra	u2657
  5512   001100  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5513   001102  D7FA               	bra	u2657
  5514   001104  D000               	nop2	
  5515   001106                     
  5516                           ;dc_motor.c: 192:         }
  5517   001106  0E05               	movlw	5
  5518   001108  261C               	addwf	turnRight@i^0,f,c
  5519   00110A  0E00               	movlw	0
  5520   00110C  221D               	addwfc	(turnRight@i+1)^0,f,c
  5521   00110E  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5522   001110  EF93  F008         	goto	u1431
  5523   001114  501D               	movf	(turnRight@i+1)^0,w,c
  5524   001116  E109               	bnz	u1430
  5525   001118  0E2A               	movlw	42
  5526   00111A  5C1C               	subwf	turnRight@i^0,w,c
  5527   00111C  A0D8               	btfss	status,0,c
  5528   00111E  EF93  F008         	goto	u1431
  5529   001122  EF95  F008         	goto	u1430
  5530   001126                     u1431:
  5531   001126  EF4F  F008         	goto	l2478
  5532   00112A                     u1430:
  5533   00112A                     
  5534                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5535   00112A  0E00               	movlw	0
  5536   00112C  6E1D               	movwf	(turnRight@i+1)^0,c
  5537   00112E  0E20               	movlw	32
  5538   001130  6E1C               	movwf	turnRight@i^0,c
  5539   001132                     l2500:
  5540                           
  5541                           ;dc_motor.c: 194:         (*mL).direction=0;
  5542   001132  EE20 F001          	lfsr	2,1
  5543   001136  5014               	movf	turnRight@mL^0,w,c
  5544   001138  26D9               	addwf	fsr2l,f,c
  5545   00113A  5015               	movf	(turnRight@mL+1)^0,w,c
  5546   00113C  22DA               	addwfc	fsr2h,f,c
  5547   00113E  0E00               	movlw	0
  5548   001140  6EDF               	movwf	indf2,c
  5549                           
  5550                           ;dc_motor.c: 195:         (*mR).direction=1;
  5551   001142  EE20 F001          	lfsr	2,1
  5552   001146  5016               	movf	turnRight@mR^0,w,c
  5553   001148  26D9               	addwf	fsr2l,f,c
  5554   00114A  5017               	movf	(turnRight@mR+1)^0,w,c
  5555   00114C  22DA               	addwfc	fsr2h,f,c
  5556   00114E  0E01               	movlw	1
  5557   001150  6EDF               	movwf	indf2,c
  5558   001152                     
  5559                           ;dc_motor.c: 196:         (*mL).power=i;
  5560   001152  C014  FFD9         	movff	turnRight@mL,fsr2l
  5561   001156  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5562   00115A  C01C  FFDF         	movff	turnRight@i,indf2
  5563   00115E                     
  5564                           ;dc_motor.c: 197:         (*mR).power=i;
  5565   00115E  C016  FFD9         	movff	turnRight@mR,fsr2l
  5566   001162  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5567   001166  C01C  FFDF         	movff	turnRight@i,indf2
  5568   00116A                     
  5569                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5570   00116A  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5571   00116E  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5572   001172  ECE4  F006         	call	_setMotorPWM	;wreg free
  5573   001176                     
  5574                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5575   001176  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5576   00117A  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5577   00117E  ECE4  F006         	call	_setMotorPWM	;wreg free
  5578   001182                     
  5579                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5580   001182  0E09               	movlw	9
  5581   001184  6E19               	movwf	(??_turnRight+1)^0,c
  5582   001186  0E86               	movlw	134
  5583   001188  6E18               	movwf	??_turnRight^0,c
  5584   00118A  0ECA               	movlw	202
  5585   00118C                     u2667:
  5586   00118C  2EE8               	decfsz	wreg,f,c
  5587   00118E  D7FE               	bra	u2667
  5588   001190  2E18               	decfsz	??_turnRight^0,f,c
  5589   001192  D7FC               	bra	u2667
  5590   001194  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5591   001196  D7FA               	bra	u2667
  5592   001198                     
  5593                           ;dc_motor.c: 202:         }
  5594   001198  0EFB               	movlw	251
  5595   00119A  261C               	addwf	turnRight@i^0,f,c
  5596   00119C  0EFF               	movlw	255
  5597   00119E  221D               	addwfc	(turnRight@i+1)^0,f,c
  5598   0011A0  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5599   0011A2  EFDE  F008         	goto	u1440
  5600   0011A6  501D               	movf	(turnRight@i+1)^0,w,c
  5601   0011A8  E107               	bnz	u1441
  5602   0011AA  0E12               	movlw	18
  5603   0011AC  5C1C               	subwf	turnRight@i^0,w,c
  5604   0011AE  B0D8               	btfsc	status,0,c
  5605   0011B0  EFDC  F008         	goto	u1441
  5606   0011B4  EFDE  F008         	goto	u1440
  5607   0011B8                     u1441:
  5608   0011B8  EF99  F008         	goto	l2500
  5609   0011BC                     u1440:
  5610   0011BC                     
  5611                           ;dc_motor.c: 203:     }
  5612   0011BC  4A1A               	infsnz	turnRight@k^0,f,c
  5613   0011BE  2A1B               	incf	(turnRight@k+1)^0,f,c
  5614   0011C0  BE1B               	btfsc	(turnRight@k+1)^0,7,c
  5615   0011C2  EFEC  F008         	goto	u1451
  5616   0011C6  501B               	movf	(turnRight@k+1)^0,w,c
  5617   0011C8  E109               	bnz	u1450
  5618   0011CA  0E02               	movlw	2
  5619   0011CC  5C1A               	subwf	turnRight@k^0,w,c
  5620   0011CE  A0D8               	btfss	status,0,c
  5621   0011D0  EFEC  F008         	goto	u1451
  5622   0011D4  EFEE  F008         	goto	u1450
  5623   0011D8                     u1451:
  5624   0011D8  EF4B  F008         	goto	l2472
  5625   0011DC                     u1450:
  5626   0011DC  0012               	return		;funcret
  5627   0011DE                     __end_of_turnRight:
  5628                           	callstack 0
  5629                           
  5630 ;; *************** function _turnLeftLong *****************
  5631 ;; Defined at:
  5632 ;;		line 206 in file "dc_motor.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5635 ;;		 -> main@motorL(9), 
  5636 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5637 ;;		 -> main@motorR(9), 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  i               2   25[COMRAM] int 
  5640 ;; Return value:  Size  Location     Type
  5641 ;;                  1    wreg      void 
  5642 ;; Registers used:
  5643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5644 ;; Tracked objects:
  5645 ;;		On entry : 0/0
  5646 ;;		On exit  : 0/0
  5647 ;;		Unchanged: 0/0
  5648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5649 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5650 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5651 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5652 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5653 ;;Total ram usage:        8 bytes
  5654 ;; Hardware stack levels used: 1
  5655 ;; Hardware stack levels required when called: 4
  5656 ;; This function calls:
  5657 ;;		_setMotorPWM
  5658 ;; This function is called by:
  5659 ;;		_RobotMovement
  5660 ;;		_return_back
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           	psect	text31
  5665   00157C                     __ptext31:
  5666                           	callstack 0
  5667   00157C                     _turnLeftLong:
  5668                           	callstack 25
  5669   00157C                     
  5670                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5671   00157C  0E00               	movlw	0
  5672   00157E  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5673   001580  0E17               	movlw	23
  5674   001582  6E1A               	movwf	turnLeftLong@i^0,c
  5675   001584                     l2526:
  5676                           
  5677                           ;dc_motor.c: 211:     (*mL).direction=1;
  5678   001584  EE20 F001          	lfsr	2,1
  5679   001588  5014               	movf	turnLeftLong@mL^0,w,c
  5680   00158A  26D9               	addwf	fsr2l,f,c
  5681   00158C  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5682   00158E  22DA               	addwfc	fsr2h,f,c
  5683   001590  0E01               	movlw	1
  5684   001592  6EDF               	movwf	indf2,c
  5685                           
  5686                           ;dc_motor.c: 212:     (*mR).direction=0;
  5687   001594  EE20 F001          	lfsr	2,1
  5688   001598  5016               	movf	turnLeftLong@mR^0,w,c
  5689   00159A  26D9               	addwf	fsr2l,f,c
  5690   00159C  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5691   00159E  22DA               	addwfc	fsr2h,f,c
  5692   0015A0  0E00               	movlw	0
  5693   0015A2  6EDF               	movwf	indf2,c
  5694   0015A4                     
  5695                           ;dc_motor.c: 213:     (*mL).power=i;
  5696   0015A4  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5697   0015A8  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5698   0015AC  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5699   0015B0                     
  5700                           ;dc_motor.c: 214:     (*mR).power=i;
  5701   0015B0  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5702   0015B4  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5703   0015B8  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5704   0015BC                     
  5705                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5706   0015BC  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5707   0015C0  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5708   0015C4  ECE4  F006         	call	_setMotorPWM	;wreg free
  5709   0015C8                     
  5710                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5711   0015C8  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5712   0015CC  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5713   0015D0  ECE4  F006         	call	_setMotorPWM	;wreg free
  5714   0015D4                     
  5715                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5716   0015D4  0E0D               	movlw	13
  5717   0015D6  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5718   0015D8  0EAA               	movlw	170
  5719   0015DA  6E18               	movwf	??_turnLeftLong^0,c
  5720   0015DC  0E84               	movlw	132
  5721   0015DE                     u2677:
  5722   0015DE  2EE8               	decfsz	wreg,f,c
  5723   0015E0  D7FE               	bra	u2677
  5724   0015E2  2E18               	decfsz	??_turnLeftLong^0,f,c
  5725   0015E4  D7FC               	bra	u2677
  5726   0015E6  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5727   0015E8  D7FA               	bra	u2677
  5728   0015EA  D000               	nop2	
  5729   0015EC                     
  5730                           ;dc_motor.c: 218:     }
  5731   0015EC  0E05               	movlw	5
  5732   0015EE  261A               	addwf	turnLeftLong@i^0,f,c
  5733   0015F0  0E00               	movlw	0
  5734   0015F2  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5735   0015F4  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5736   0015F6  EF06  F00B         	goto	u1461
  5737   0015FA  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5738   0015FC  E109               	bnz	u1460
  5739   0015FE  0E26               	movlw	38
  5740   001600  5C1A               	subwf	turnLeftLong@i^0,w,c
  5741   001602  A0D8               	btfss	status,0,c
  5742   001604  EF06  F00B         	goto	u1461
  5743   001608  EF08  F00B         	goto	u1460
  5744   00160C                     u1461:
  5745   00160C  EFC2  F00A         	goto	l2526
  5746   001610                     u1460:
  5747   001610                     
  5748                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5749   001610  0E00               	movlw	0
  5750   001612  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5751   001614  0E1C               	movlw	28
  5752   001616  6E1A               	movwf	turnLeftLong@i^0,c
  5753   001618                     l2548:
  5754                           
  5755                           ;dc_motor.c: 220:     (*mL).direction=1;
  5756   001618  EE20 F001          	lfsr	2,1
  5757   00161C  5014               	movf	turnLeftLong@mL^0,w,c
  5758   00161E  26D9               	addwf	fsr2l,f,c
  5759   001620  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5760   001622  22DA               	addwfc	fsr2h,f,c
  5761   001624  0E01               	movlw	1
  5762   001626  6EDF               	movwf	indf2,c
  5763                           
  5764                           ;dc_motor.c: 221:     (*mR).direction=0;
  5765   001628  EE20 F001          	lfsr	2,1
  5766   00162C  5016               	movf	turnLeftLong@mR^0,w,c
  5767   00162E  26D9               	addwf	fsr2l,f,c
  5768   001630  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5769   001632  22DA               	addwfc	fsr2h,f,c
  5770   001634  0E00               	movlw	0
  5771   001636  6EDF               	movwf	indf2,c
  5772   001638                     
  5773                           ;dc_motor.c: 222:     (*mL).power=i;
  5774   001638  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5775   00163C  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5776   001640  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5777   001644                     
  5778                           ;dc_motor.c: 223:     (*mR).power=i;
  5779   001644  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5780   001648  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5781   00164C  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5782   001650                     
  5783                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5784   001650  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5785   001654  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5786   001658  ECE4  F006         	call	_setMotorPWM	;wreg free
  5787   00165C                     
  5788                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5789   00165C  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5790   001660  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5791   001664  ECE4  F006         	call	_setMotorPWM	;wreg free
  5792   001668                     
  5793                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5794   001668  0E0D               	movlw	13
  5795   00166A  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5796   00166C  0E2D               	movlw	45
  5797   00166E  6E18               	movwf	??_turnLeftLong^0,c
  5798   001670  0ED8               	movlw	216
  5799   001672                     u2687:
  5800   001672  2EE8               	decfsz	wreg,f,c
  5801   001674  D7FE               	bra	u2687
  5802   001676  2E18               	decfsz	??_turnLeftLong^0,f,c
  5803   001678  D7FC               	bra	u2687
  5804   00167A  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5805   00167C  D7FA               	bra	u2687
  5806   00167E                     
  5807                           ;dc_motor.c: 228:     }
  5808   00167E  0EFB               	movlw	251
  5809   001680  261A               	addwf	turnLeftLong@i^0,f,c
  5810   001682  0EFF               	movlw	255
  5811   001684  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5812   001686  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5813   001688  EF51  F00B         	goto	u1470
  5814   00168C  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5815   00168E  E107               	bnz	u1471
  5816   001690  0E0E               	movlw	14
  5817   001692  5C1A               	subwf	turnLeftLong@i^0,w,c
  5818   001694  B0D8               	btfsc	status,0,c
  5819   001696  EF4F  F00B         	goto	u1471
  5820   00169A  EF51  F00B         	goto	u1470
  5821   00169E                     u1471:
  5822   00169E  EF0C  F00B         	goto	l2548
  5823   0016A2                     u1470:
  5824   0016A2  0012               	return		;funcret
  5825   0016A4                     __end_of_turnLeftLong:
  5826                           	callstack 0
  5827                           
  5828 ;; *************** function _turnLeft *****************
  5829 ;; Defined at:
  5830 ;;		line 102 in file "dc_motor.c"
  5831 ;; Parameters:    Size  Location     Type
  5832 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5833 ;;		 -> main@motorL(9), 
  5834 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5835 ;;		 -> main@motorR(9), 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  i               2   27[COMRAM] int 
  5838 ;;  k               2   25[COMRAM] int 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5848 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5849 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5850 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5851 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5852 ;;Total ram usage:       10 bytes
  5853 ;; Hardware stack levels used: 1
  5854 ;; Hardware stack levels required when called: 4
  5855 ;; This function calls:
  5856 ;;		_setMotorPWM
  5857 ;; This function is called by:
  5858 ;;		_RobotMovement
  5859 ;;		_return_back
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text32
  5864   000F34                     __ptext32:
  5865                           	callstack 0
  5866   000F34                     _turnLeft:
  5867                           	callstack 25
  5868   000F34                     
  5869                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5870   000F34  0E00               	movlw	0
  5871   000F36  6E1B               	movwf	(turnLeft@k+1)^0,c
  5872   000F38  0E00               	movlw	0
  5873   000F3A  6E1A               	movwf	turnLeft@k^0,c
  5874                           
  5875                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5876   000F3C  0E00               	movlw	0
  5877   000F3E  6E1B               	movwf	(turnLeft@k+1)^0,c
  5878   000F40  0E00               	movlw	0
  5879   000F42  6E1A               	movwf	turnLeft@k^0,c
  5880   000F44                     l2418:
  5881                           
  5882                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  5883   000F44  0E00               	movlw	0
  5884   000F46  6E1D               	movwf	(turnLeft@i+1)^0,c
  5885   000F48  0E2F               	movlw	47
  5886   000F4A  6E1C               	movwf	turnLeft@i^0,c
  5887   000F4C                     l2424:
  5888                           
  5889                           ;dc_motor.c: 133:         (*mL).direction=1;
  5890   000F4C  EE20 F001          	lfsr	2,1
  5891   000F50  5014               	movf	turnLeft@mL^0,w,c
  5892   000F52  26D9               	addwf	fsr2l,f,c
  5893   000F54  5015               	movf	(turnLeft@mL+1)^0,w,c
  5894   000F56  22DA               	addwfc	fsr2h,f,c
  5895   000F58  0E01               	movlw	1
  5896   000F5A  6EDF               	movwf	indf2,c
  5897                           
  5898                           ;dc_motor.c: 134:         (*mR).direction=0;
  5899   000F5C  EE20 F001          	lfsr	2,1
  5900   000F60  5016               	movf	turnLeft@mR^0,w,c
  5901   000F62  26D9               	addwf	fsr2l,f,c
  5902   000F64  5017               	movf	(turnLeft@mR+1)^0,w,c
  5903   000F66  22DA               	addwfc	fsr2h,f,c
  5904   000F68  0E00               	movlw	0
  5905   000F6A  6EDF               	movwf	indf2,c
  5906   000F6C                     
  5907                           ;dc_motor.c: 135:         (*mL).power=i;
  5908   000F6C  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5909   000F70  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5910   000F74  C01C  FFDF         	movff	turnLeft@i,indf2
  5911   000F78                     
  5912                           ;dc_motor.c: 136:         (*mR).power=i;
  5913   000F78  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5914   000F7C  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5915   000F80  C01C  FFDF         	movff	turnLeft@i,indf2
  5916   000F84                     
  5917                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5918   000F84  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5919   000F88  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5920   000F8C  ECE4  F006         	call	_setMotorPWM	;wreg free
  5921   000F90                     
  5922                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5923   000F90  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5924   000F94  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5925   000F98  ECE4  F006         	call	_setMotorPWM	;wreg free
  5926   000F9C                     
  5927                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  5928   000F9C  0E05               	movlw	5
  5929   000F9E  6E19               	movwf	(??_turnLeft+1)^0,c
  5930   000FA0  0EB6               	movlw	182
  5931   000FA2  6E18               	movwf	??_turnLeft^0,c
  5932   000FA4  0E2C               	movlw	44
  5933   000FA6                     u2697:
  5934   000FA6  2EE8               	decfsz	wreg,f,c
  5935   000FA8  D7FE               	bra	u2697
  5936   000FAA  2E18               	decfsz	??_turnLeft^0,f,c
  5937   000FAC  D7FC               	bra	u2697
  5938   000FAE  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5939   000FB0  D7FA               	bra	u2697
  5940   000FB2  D000               	nop2	
  5941   000FB4                     
  5942                           ;dc_motor.c: 140:         }
  5943   000FB4  0E05               	movlw	5
  5944   000FB6  261C               	addwf	turnLeft@i^0,f,c
  5945   000FB8  0E00               	movlw	0
  5946   000FBA  221D               	addwfc	(turnLeft@i+1)^0,f,c
  5947   000FBC  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  5948   000FBE  EFEA  F007         	goto	u1401
  5949   000FC2  501D               	movf	(turnLeft@i+1)^0,w,c
  5950   000FC4  E109               	bnz	u1400
  5951   000FC6  0E3E               	movlw	62
  5952   000FC8  5C1C               	subwf	turnLeft@i^0,w,c
  5953   000FCA  A0D8               	btfss	status,0,c
  5954   000FCC  EFEA  F007         	goto	u1401
  5955   000FD0  EFEC  F007         	goto	u1400
  5956   000FD4                     u1401:
  5957   000FD4  EFA6  F007         	goto	l2424
  5958   000FD8                     u1400:
  5959   000FD8                     
  5960                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  5961   000FD8  0E00               	movlw	0
  5962   000FDA  6E1D               	movwf	(turnLeft@i+1)^0,c
  5963   000FDC  0E34               	movlw	52
  5964   000FDE  6E1C               	movwf	turnLeft@i^0,c
  5965   000FE0                     l2446:
  5966                           
  5967                           ;dc_motor.c: 142:         (*mL).direction=1;
  5968   000FE0  EE20 F001          	lfsr	2,1
  5969   000FE4  5014               	movf	turnLeft@mL^0,w,c
  5970   000FE6  26D9               	addwf	fsr2l,f,c
  5971   000FE8  5015               	movf	(turnLeft@mL+1)^0,w,c
  5972   000FEA  22DA               	addwfc	fsr2h,f,c
  5973   000FEC  0E01               	movlw	1
  5974   000FEE  6EDF               	movwf	indf2,c
  5975                           
  5976                           ;dc_motor.c: 143:         (*mR).direction=0;
  5977   000FF0  EE20 F001          	lfsr	2,1
  5978   000FF4  5016               	movf	turnLeft@mR^0,w,c
  5979   000FF6  26D9               	addwf	fsr2l,f,c
  5980   000FF8  5017               	movf	(turnLeft@mR+1)^0,w,c
  5981   000FFA  22DA               	addwfc	fsr2h,f,c
  5982   000FFC  0E00               	movlw	0
  5983   000FFE  6EDF               	movwf	indf2,c
  5984   001000                     
  5985                           ;dc_motor.c: 144:         (*mL).power=i;
  5986   001000  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5987   001004  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5988   001008  C01C  FFDF         	movff	turnLeft@i,indf2
  5989   00100C                     
  5990                           ;dc_motor.c: 145:         (*mR).power=i;
  5991   00100C  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5992   001010  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5993   001014  C01C  FFDF         	movff	turnLeft@i,indf2
  5994   001018                     
  5995                           ;dc_motor.c: 146:         setMotorPWM(mL);
  5996   001018  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5997   00101C  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5998   001020  ECE4  F006         	call	_setMotorPWM	;wreg free
  5999   001024                     
  6000                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6001   001024  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  6002   001028  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6003   00102C  ECE4  F006         	call	_setMotorPWM	;wreg free
  6004   001030                     
  6005                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6006   001030  0E05               	movlw	5
  6007   001032  6E19               	movwf	(??_turnLeft+1)^0,c
  6008   001034  0EA1               	movlw	161
  6009   001036  6E18               	movwf	??_turnLeft^0,c
  6010   001038  0E65               	movlw	101
  6011   00103A                     u2707:
  6012   00103A  2EE8               	decfsz	wreg,f,c
  6013   00103C  D7FE               	bra	u2707
  6014   00103E  2E18               	decfsz	??_turnLeft^0,f,c
  6015   001040  D7FC               	bra	u2707
  6016   001042  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  6017   001044  D7FA               	bra	u2707
  6018   001046  F000               	nop	
  6019   001048                     
  6020                           ;dc_motor.c: 150:         }
  6021   001048  0EFB               	movlw	251
  6022   00104A  261C               	addwf	turnLeft@i^0,f,c
  6023   00104C  0EFF               	movlw	255
  6024   00104E  221D               	addwfc	(turnLeft@i+1)^0,f,c
  6025   001050  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  6026   001052  EF36  F008         	goto	u1410
  6027   001056  501D               	movf	(turnLeft@i+1)^0,w,c
  6028   001058  E107               	bnz	u1411
  6029   00105A  0E26               	movlw	38
  6030   00105C  5C1C               	subwf	turnLeft@i^0,w,c
  6031   00105E  B0D8               	btfsc	status,0,c
  6032   001060  EF34  F008         	goto	u1411
  6033   001064  EF36  F008         	goto	u1410
  6034   001068                     u1411:
  6035   001068  EFF0  F007         	goto	l2446
  6036   00106C                     u1410:
  6037   00106C                     
  6038                           ;dc_motor.c: 151:     }
  6039   00106C  4A1A               	infsnz	turnLeft@k^0,f,c
  6040   00106E  2A1B               	incf	(turnLeft@k+1)^0,f,c
  6041   001070  BE1B               	btfsc	(turnLeft@k+1)^0,7,c
  6042   001072  EF44  F008         	goto	u1421
  6043   001076  501B               	movf	(turnLeft@k+1)^0,w,c
  6044   001078  E109               	bnz	u1420
  6045   00107A  0E02               	movlw	2
  6046   00107C  5C1A               	subwf	turnLeft@k^0,w,c
  6047   00107E  A0D8               	btfss	status,0,c
  6048   001080  EF44  F008         	goto	u1421
  6049   001084  EF46  F008         	goto	u1420
  6050   001088                     u1421:
  6051   001088  EFA2  F007         	goto	l2418
  6052   00108C                     u1420:
  6053   00108C  0012               	return		;funcret
  6054   00108E                     __end_of_turnLeft:
  6055                           	callstack 0
  6056                           
  6057 ;; *************** function _stop *****************
  6058 ;; Defined at:
  6059 ;;		line 92 in file "dc_motor.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6062 ;;		 -> main@motorL(9), 
  6063 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6064 ;;		 -> main@motorR(9), 
  6065 ;; Auto vars:     Size  Location     Type
  6066 ;;		None
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      void 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 0/0
  6073 ;;		On exit  : 0/0
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6076 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6078 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6079 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6080 ;;Total ram usage:        6 bytes
  6081 ;; Hardware stack levels used: 1
  6082 ;; Hardware stack levels required when called: 4
  6083 ;; This function calls:
  6084 ;;		_setMotorPWM
  6085 ;; This function is called by:
  6086 ;;		_RobotMovement
  6087 ;;		_return_back
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text33
  6093   001D78                     __ptext33:
  6094                           	callstack 0
  6095   001D78                     _stop:
  6096                           	callstack 26
  6097   001D78                     
  6098                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6099   001D78  C014  FFD9         	movff	stop@mL,fsr2l
  6100   001D7C  C015  FFDA         	movff	stop@mL+1,fsr2h
  6101   001D80  0E00               	movlw	0
  6102   001D82  6EDF               	movwf	indf2,c
  6103                           
  6104                           ;dc_motor.c: 95:     (*mR).power=0;
  6105   001D84  C016  FFD9         	movff	stop@mR,fsr2l
  6106   001D88  C017  FFDA         	movff	stop@mR+1,fsr2h
  6107   001D8C  0E00               	movlw	0
  6108   001D8E  6EDF               	movwf	indf2,c
  6109   001D90                     
  6110                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6111   001D90  C014  F00E         	movff	stop@mL,setMotorPWM@m
  6112   001D94  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  6113   001D98  ECE4  F006         	call	_setMotorPWM	;wreg free
  6114   001D9C                     
  6115                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6116   001D9C  C016  F00E         	movff	stop@mR,setMotorPWM@m
  6117   001DA0  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  6118   001DA4  ECE4  F006         	call	_setMotorPWM	;wreg free
  6119   001DA8                     
  6120                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6121   001DA8  0E52               	movlw	82
  6122   001DAA  6E19               	movwf	(??_stop+1)^0,c
  6123   001DAC  0E2B               	movlw	43
  6124   001DAE  6E18               	movwf	??_stop^0,c
  6125   001DB0  0E00               	movlw	0
  6126   001DB2                     u2717:
  6127   001DB2  2EE8               	decfsz	wreg,f,c
  6128   001DB4  D7FE               	bra	u2717
  6129   001DB6  2E18               	decfsz	??_stop^0,f,c
  6130   001DB8  D7FC               	bra	u2717
  6131   001DBA  2E19               	decfsz	(??_stop+1)^0,f,c
  6132   001DBC  D7FA               	bra	u2717
  6133   001DBE  D000               	nop2	
  6134   001DC0  0012               	return		;funcret
  6135   001DC2                     __end_of_stop:
  6136                           	callstack 0
  6137                           
  6138 ;; *************** function _moveBack *****************
  6139 ;; Defined at:
  6140 ;;		line 282 in file "dc_motor.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6143 ;;		 -> main@motorL(9), 
  6144 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6145 ;;		 -> main@motorR(9), 
  6146 ;;  time            2   23[COMRAM] unsigned int 
  6147 ;; Auto vars:     Size  Location     Type
  6148 ;;		None
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  1    wreg      void 
  6151 ;; Registers used:
  6152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 0/0
  6155 ;;		On exit  : 0/0
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6158 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6161 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6162 ;;Total ram usage:        6 bytes
  6163 ;; Hardware stack levels used: 1
  6164 ;; Hardware stack levels required when called: 4
  6165 ;; This function calls:
  6166 ;;		_setMotorPWM
  6167 ;; This function is called by:
  6168 ;;		_RobotMovement
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           	psect	text34
  6173   0019B8                     __ptext34:
  6174                           	callstack 0
  6175   0019B8                     _moveBack:
  6176                           	callstack 25
  6177   0019B8                     
  6178                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6179   0019B8  0E00               	movlw	0
  6180   0019BA  6E56               	movwf	(_seconds+1)^0,c
  6181   0019BC  0E00               	movlw	0
  6182   0019BE  6E55               	movwf	_seconds^0,c
  6183                           
  6184                           ;dc_motor.c: 285:     while (seconds<time)
  6185   0019C0  EF0A  F00D         	goto	l2634
  6186   0019C4                     l2624:
  6187                           
  6188                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6189   0019C4  EE20 F001          	lfsr	2,1
  6190   0019C8  5014               	movf	moveBack@mL^0,w,c
  6191   0019CA  26D9               	addwf	fsr2l,f,c
  6192   0019CC  5015               	movf	(moveBack@mL+1)^0,w,c
  6193   0019CE  22DA               	addwfc	fsr2h,f,c
  6194   0019D0  0E01               	movlw	1
  6195   0019D2  6EDF               	movwf	indf2,c
  6196                           
  6197                           ;dc_motor.c: 288:         (*mR).direction=1;
  6198   0019D4  EE20 F001          	lfsr	2,1
  6199   0019D8  5016               	movf	moveBack@mR^0,w,c
  6200   0019DA  26D9               	addwf	fsr2l,f,c
  6201   0019DC  5017               	movf	(moveBack@mR+1)^0,w,c
  6202   0019DE  22DA               	addwfc	fsr2h,f,c
  6203   0019E0  0E01               	movlw	1
  6204   0019E2  6EDF               	movwf	indf2,c
  6205   0019E4                     
  6206                           ;dc_motor.c: 289:         (*mL).power=40;
  6207   0019E4  C014  FFD9         	movff	moveBack@mL,fsr2l
  6208   0019E8  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  6209   0019EC  0E28               	movlw	40
  6210   0019EE  6EDF               	movwf	indf2,c
  6211   0019F0                     
  6212                           ;dc_motor.c: 290:         (*mR).power=39;
  6213   0019F0  C016  FFD9         	movff	moveBack@mR,fsr2l
  6214   0019F4  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  6215   0019F8  0E27               	movlw	39
  6216   0019FA  6EDF               	movwf	indf2,c
  6217   0019FC                     
  6218                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6219   0019FC  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  6220   001A00  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6221   001A04  ECE4  F006         	call	_setMotorPWM	;wreg free
  6222   001A08                     
  6223                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6224   001A08  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  6225   001A0C  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6226   001A10  ECE4  F006         	call	_setMotorPWM	;wreg free
  6227   001A14                     l2634:
  6228                           
  6229                           ;dc_motor.c: 285:     while (seconds<time)
  6230   001A14  5018               	movf	moveBack@time^0,w,c
  6231   001A16  5C55               	subwf	_seconds^0,w,c
  6232   001A18  5019               	movf	(moveBack@time+1)^0,w,c
  6233   001A1A  5856               	subwfb	(_seconds+1)^0,w,c
  6234   001A1C  A0D8               	btfss	status,0,c
  6235   001A1E  EF13  F00D         	goto	u1511
  6236   001A22  EF15  F00D         	goto	u1510
  6237   001A26                     u1511:
  6238   001A26  EFE2  F00C         	goto	l2624
  6239   001A2A                     u1510:
  6240   001A2A  0012               	return		;funcret
  6241   001A2C                     __end_of_moveBack:
  6242                           	callstack 0
  6243                           
  6244 ;; *************** function _TimedfullSpeedAhead *****************
  6245 ;; Defined at:
  6246 ;;		line 267 in file "dc_motor.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6249 ;;		 -> main@motorL(9), 
  6250 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6251 ;;		 -> main@motorR(9), 
  6252 ;;  time            2   23[COMRAM] unsigned int 
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6264 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6267 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6268 ;;Total ram usage:        6 bytes
  6269 ;; Hardware stack levels used: 1
  6270 ;; Hardware stack levels required when called: 4
  6271 ;; This function calls:
  6272 ;;		_setMotorPWM
  6273 ;; This function is called by:
  6274 ;;		_RobotMovement
  6275 ;;		_return_back
  6276 ;;		_main
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           	psect	text35
  6281   001A2C                     __ptext35:
  6282                           	callstack 0
  6283   001A2C                     _TimedfullSpeedAhead:
  6284                           	callstack 25
  6285   001A2C                     
  6286                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6287   001A2C  0E00               	movlw	0
  6288   001A2E  6E56               	movwf	(_seconds+1)^0,c
  6289   001A30  0E00               	movlw	0
  6290   001A32  6E55               	movwf	_seconds^0,c
  6291                           
  6292                           ;dc_motor.c: 270:     while (seconds<time)
  6293   001A34  EF44  F00D         	goto	l2620
  6294   001A38                     l2610:
  6295                           
  6296                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6297   001A38  EE20 F001          	lfsr	2,1
  6298   001A3C  5014               	movf	TimedfullSpeedAhead@mL^0,w,c
  6299   001A3E  26D9               	addwf	fsr2l,f,c
  6300   001A40  5015               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6301   001A42  22DA               	addwfc	fsr2h,f,c
  6302   001A44  0E00               	movlw	0
  6303   001A46  6EDF               	movwf	indf2,c
  6304                           
  6305                           ;dc_motor.c: 274:         (*mR).direction=0;
  6306   001A48  EE20 F001          	lfsr	2,1
  6307   001A4C  5016               	movf	TimedfullSpeedAhead@mR^0,w,c
  6308   001A4E  26D9               	addwf	fsr2l,f,c
  6309   001A50  5017               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6310   001A52  22DA               	addwfc	fsr2h,f,c
  6311   001A54  0E00               	movlw	0
  6312   001A56  6EDF               	movwf	indf2,c
  6313   001A58                     
  6314                           ;dc_motor.c: 275:         (*mL).power=50;
  6315   001A58  C014  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6316   001A5C  C015  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6317   001A60  0E32               	movlw	50
  6318   001A62  6EDF               	movwf	indf2,c
  6319   001A64                     
  6320                           ;dc_motor.c: 276:         (*mR).power=50;
  6321   001A64  C016  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6322   001A68  C017  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6323   001A6C  0E32               	movlw	50
  6324   001A6E  6EDF               	movwf	indf2,c
  6325   001A70                     
  6326                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6327   001A70  C014  F00E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6328   001A74  C015  F00F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6329   001A78  ECE4  F006         	call	_setMotorPWM	;wreg free
  6330   001A7C                     
  6331                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6332   001A7C  C016  F00E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6333   001A80  C017  F00F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6334   001A84  ECE4  F006         	call	_setMotorPWM	;wreg free
  6335   001A88                     l2620:
  6336                           
  6337                           ;dc_motor.c: 270:     while (seconds<time)
  6338   001A88  5018               	movf	TimedfullSpeedAhead@time^0,w,c
  6339   001A8A  5C55               	subwf	_seconds^0,w,c
  6340   001A8C  5019               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6341   001A8E  5856               	subwfb	(_seconds+1)^0,w,c
  6342   001A90  A0D8               	btfss	status,0,c
  6343   001A92  EF4D  F00D         	goto	u1501
  6344   001A96  EF4F  F00D         	goto	u1500
  6345   001A9A                     u1501:
  6346   001A9A  EF1C  F00D         	goto	l2610
  6347   001A9E                     u1500:
  6348   001A9E  0012               	return		;funcret
  6349   001AA0                     __end_of_TimedfullSpeedAhead:
  6350                           	callstack 0
  6351                           
  6352 ;; *************** function _setMotorPWM *****************
  6353 ;; Defined at:
  6354 ;;		line 69 in file "dc_motor.c"
  6355 ;; Parameters:    Size  Location     Type
  6356 ;;  m               2   13[COMRAM] PTR struct DC_motor
  6357 ;;		 -> main@motorR(9), main@motorL(9), 
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;  negDuty         1   18[COMRAM] unsigned char 
  6360 ;;  posDuty         1   17[COMRAM] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;                  1    wreg      void 
  6363 ;; Registers used:
  6364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6372 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6373 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6374 ;;Total ram usage:        6 bytes
  6375 ;; Hardware stack levels used: 1
  6376 ;; Hardware stack levels required when called: 3
  6377 ;; This function calls:
  6378 ;;		___lwdiv
  6379 ;;		___wmul
  6380 ;; This function is called by:
  6381 ;;		_stop
  6382 ;;		_turnLeft
  6383 ;;		_turnRight
  6384 ;;		_turnLeftLong
  6385 ;;		_turnRightLong
  6386 ;;		_fullSpeedAhead
  6387 ;;		_TimedfullSpeedAhead
  6388 ;;		_moveBack
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text36
  6393   000DC8                     __ptext36:
  6394                           	callstack 0
  6395   000DC8                     _setMotorPWM:
  6396                           	callstack 26
  6397   000DC8                     
  6398                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6399   000DC8  EE20 F002          	lfsr	2,2
  6400   000DCC  500E               	movf	setMotorPWM@m^0,w,c
  6401   000DCE  26D9               	addwf	fsr2l,f,c
  6402   000DD0  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6403   000DD2  22DA               	addwfc	fsr2h,f,c
  6404   000DD4  50DF               	movf	indf2,w,c
  6405   000DD6  B4D8               	btfsc	status,2,c
  6406   000DD8  EFF0  F006         	goto	u1351
  6407   000DDC  EFF2  F006         	goto	u1350
  6408   000DE0                     u1351:
  6409   000DE0  EF26  F007         	goto	l2308
  6410   000DE4                     u1350:
  6411   000DE4                     
  6412                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6413   000DE4  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6414   000DE8  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6415   000DEC  50DF               	movf	indf2,w,c
  6416   000DEE  6E10               	movwf	??_setMotorPWM^0,c
  6417   000DF0  5010               	movf	??_setMotorPWM^0,w,c
  6418   000DF2  6E01               	movwf	___wmul@multiplier^0,c
  6419   000DF4  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6420   000DF6  EE20 F003          	lfsr	2,3
  6421   000DFA  500E               	movf	setMotorPWM@m^0,w,c
  6422   000DFC  26D9               	addwf	fsr2l,f,c
  6423   000DFE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6424   000E00  22DA               	addwfc	fsr2h,f,c
  6425   000E02  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6426   000E06  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6427   000E0A  EC71  F00F         	call	___wmul	;wreg free
  6428   000E0E  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6429   000E12  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6430   000E16  0E00               	movlw	0
  6431   000E18  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6432   000E1A  0E64               	movlw	100
  6433   000E1C  6E09               	movwf	___lwdiv@divisor^0,c
  6434   000E1E  EC50  F00D         	call	___lwdiv	;wreg free
  6435   000E22  EE20 F003          	lfsr	2,3
  6436   000E26  500E               	movf	setMotorPWM@m^0,w,c
  6437   000E28  26D9               	addwf	fsr2l,f,c
  6438   000E2A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6439   000E2C  22DA               	addwfc	fsr2h,f,c
  6440   000E2E  50DF               	movf	indf2,w,c
  6441   000E30  6E11               	movwf	(??_setMotorPWM+1)^0,c
  6442   000E32  5007               	movf	?___lwdiv^0,w,c
  6443   000E34  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  6444   000E36  6E12               	movwf	setMotorPWM@posDuty^0,c
  6445   000E38                     
  6446                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6447   000E38  EE20 F003          	lfsr	2,3
  6448   000E3C  500E               	movf	setMotorPWM@m^0,w,c
  6449   000E3E  26D9               	addwf	fsr2l,f,c
  6450   000E40  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6451   000E42  22DA               	addwfc	fsr2h,f,c
  6452   000E44  50DF               	movf	indf2,w,c
  6453   000E46  6E13               	movwf	setMotorPWM@negDuty^0,c
  6454                           
  6455                           ;dc_motor.c: 76:     }
  6456   000E48  EF49  F007         	goto	l2312
  6457   000E4C                     l2308:
  6458                           
  6459                           ;dc_motor.c: 78:         posDuty=0;
  6460   000E4C  0E00               	movlw	0
  6461   000E4E  6E12               	movwf	setMotorPWM@posDuty^0,c
  6462   000E50                     
  6463                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6464   000E50  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6465   000E54  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6466   000E58  50DF               	movf	indf2,w,c
  6467   000E5A  6E10               	movwf	??_setMotorPWM^0,c
  6468   000E5C  5010               	movf	??_setMotorPWM^0,w,c
  6469   000E5E  6E01               	movwf	___wmul@multiplier^0,c
  6470   000E60  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6471   000E62  EE20 F003          	lfsr	2,3
  6472   000E66  500E               	movf	setMotorPWM@m^0,w,c
  6473   000E68  26D9               	addwf	fsr2l,f,c
  6474   000E6A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6475   000E6C  22DA               	addwfc	fsr2h,f,c
  6476   000E6E  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6477   000E72  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6478   000E76  EC71  F00F         	call	___wmul	;wreg free
  6479   000E7A  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6480   000E7E  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6481   000E82  0E00               	movlw	0
  6482   000E84  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6483   000E86  0E64               	movlw	100
  6484   000E88  6E09               	movwf	___lwdiv@divisor^0,c
  6485   000E8A  EC50  F00D         	call	___lwdiv	;wreg free
  6486   000E8E  5007               	movf	?___lwdiv^0,w,c
  6487   000E90  6E13               	movwf	setMotorPWM@negDuty^0,c
  6488   000E92                     l2312:
  6489                           
  6490                           ;dc_motor.c: 82:     if (m->direction) {
  6491   000E92  EE20 F001          	lfsr	2,1
  6492   000E96  500E               	movf	setMotorPWM@m^0,w,c
  6493   000E98  26D9               	addwf	fsr2l,f,c
  6494   000E9A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6495   000E9C  22DA               	addwfc	fsr2h,f,c
  6496   000E9E  50DF               	movf	indf2,w,c
  6497   000EA0  B4D8               	btfsc	status,2,c
  6498   000EA2  EF55  F007         	goto	u1361
  6499   000EA6  EF57  F007         	goto	u1360
  6500   000EAA                     u1361:
  6501   000EAA  EF79  F007         	goto	l2316
  6502   000EAE                     u1360:
  6503   000EAE                     
  6504                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6505   000EAE  EE20 F005          	lfsr	2,5
  6506   000EB2  500E               	movf	setMotorPWM@m^0,w,c
  6507   000EB4  26D9               	addwf	fsr2l,f,c
  6508   000EB6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6509   000EB8  22DA               	addwfc	fsr2h,f,c
  6510   000EBA  CFDE F010          	movff	postinc2,??_setMotorPWM
  6511   000EBE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6512   000EC2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6513   000EC6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6514   000ECA  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6515                           
  6516                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6517   000ECE  EE20 F007          	lfsr	2,7
  6518   000ED2  500E               	movf	setMotorPWM@m^0,w,c
  6519   000ED4  26D9               	addwf	fsr2l,f,c
  6520   000ED6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6521   000ED8  22DA               	addwfc	fsr2h,f,c
  6522   000EDA  CFDE F010          	movff	postinc2,??_setMotorPWM
  6523   000EDE  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6524   000EE2  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6525   000EE6  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6526   000EEA  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6527                           
  6528                           ;dc_motor.c: 85:     } else {
  6529   000EEE  EF99  F007         	goto	l213
  6530   000EF2                     l2316:
  6531                           
  6532                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6533   000EF2  EE20 F005          	lfsr	2,5
  6534   000EF6  500E               	movf	setMotorPWM@m^0,w,c
  6535   000EF8  26D9               	addwf	fsr2l,f,c
  6536   000EFA  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6537   000EFC  22DA               	addwfc	fsr2h,f,c
  6538   000EFE  CFDE F010          	movff	postinc2,??_setMotorPWM
  6539   000F02  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6540   000F06  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6541   000F0A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6542   000F0E  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6543                           
  6544                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6545   000F12  EE20 F007          	lfsr	2,7
  6546   000F16  500E               	movf	setMotorPWM@m^0,w,c
  6547   000F18  26D9               	addwf	fsr2l,f,c
  6548   000F1A  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6549   000F1C  22DA               	addwfc	fsr2h,f,c
  6550   000F1E  CFDE F010          	movff	postinc2,??_setMotorPWM
  6551   000F22  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6552   000F26  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6553   000F2A  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6554   000F2E  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6555   000F32                     l213:
  6556   000F32  0012               	return		;funcret
  6557   000F34                     __end_of_setMotorPWM:
  6558                           	callstack 0
  6559                           
  6560 ;; *************** function ___wmul *****************
  6561 ;; Defined at:
  6562 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;  multiplier      2    0[COMRAM] unsigned int 
  6565 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  product         2    4[COMRAM] unsigned int 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;                  2    0[COMRAM] unsigned int 
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, prodl, prodh
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6577 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6578 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6580 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6581 ;;Total ram usage:        6 bytes
  6582 ;; Hardware stack levels used: 1
  6583 ;; Hardware stack levels required when called: 2
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_get_color_distance
  6588 ;;		_get_color_code
  6589 ;;		_get_wall_presence
  6590 ;;		_setMotorPWM
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           	psect	text37
  6595   001EE2                     __ptext37:
  6596                           	callstack 0
  6597   001EE2                     ___wmul:
  6598                           	callstack 26
  6599   001EE2  5001               	movf	___wmul@multiplier^0,w,c
  6600   001EE4  0203               	mulwf	___wmul@multiplicand^0,c
  6601   001EE6  CFF3 F005          	movff	prodl,___wmul@product
  6602   001EEA  CFF4 F006          	movff	prodh,___wmul@product+1
  6603   001EEE  5001               	movf	___wmul@multiplier^0,w,c
  6604   001EF0  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6605   001EF2  50F3               	movf	243,w,c
  6606   001EF4  2606               	addwf	(___wmul@product+1)^0,f,c
  6607   001EF6  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6608   001EF8  0203               	mulwf	___wmul@multiplicand^0,c
  6609   001EFA  50F3               	movf	243,w,c
  6610   001EFC  2606               	addwf	(___wmul@product+1)^0,f,c
  6611   001EFE  C005  F001         	movff	___wmul@product,?___wmul
  6612   001F02  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6613   001F06  0012               	return		;funcret
  6614   001F08                     __end_of___wmul:
  6615                           	callstack 0
  6616                           
  6617 ;; *************** function ___lwdiv *****************
  6618 ;; Defined at:
  6619 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  dividend        2    6[COMRAM] unsigned int 
  6622 ;;  divisor         2    8[COMRAM] unsigned int 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  quotient        2   10[COMRAM] unsigned int 
  6625 ;;  counter         1   12[COMRAM] unsigned char 
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  2    6[COMRAM] unsigned int 
  6628 ;; Registers used:
  6629 ;;		wreg, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6636 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6639 ;;Total ram usage:        7 bytes
  6640 ;; Hardware stack levels used: 1
  6641 ;; Hardware stack levels required when called: 2
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_calibrate_black
  6646 ;;		_setMotorPWM
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	text38
  6651   001AA0                     __ptext38:
  6652                           	callstack 0
  6653   001AA0                     ___lwdiv:
  6654                           	callstack 26
  6655   001AA0  0E00               	movlw	0
  6656   001AA2  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6657   001AA4  0E00               	movlw	0
  6658   001AA6  6E0B               	movwf	___lwdiv@quotient^0,c
  6659   001AA8  5009               	movf	___lwdiv@divisor^0,w,c
  6660   001AAA  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6661   001AAC  B4D8               	btfsc	status,2,c
  6662   001AAE  EF5B  F00D         	goto	u1291
  6663   001AB2  EF5D  F00D         	goto	u1290
  6664   001AB6                     u1291:
  6665   001AB6  EF85  F00D         	goto	l942
  6666   001ABA                     u1290:
  6667   001ABA  0E01               	movlw	1
  6668   001ABC  6E0D               	movwf	___lwdiv@counter^0,c
  6669   001ABE  EF65  F00D         	goto	l2256
  6670   001AC2                     l2254:
  6671   001AC2  90D8               	bcf	status,0,c
  6672   001AC4  3609               	rlcf	___lwdiv@divisor^0,f,c
  6673   001AC6  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6674   001AC8  2A0D               	incf	___lwdiv@counter^0,f,c
  6675   001ACA                     l2256:
  6676   001ACA  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6677   001ACC  EF6A  F00D         	goto	u1301
  6678   001AD0  EF6C  F00D         	goto	u1300
  6679   001AD4                     u1301:
  6680   001AD4  EF61  F00D         	goto	l2254
  6681   001AD8                     u1300:
  6682   001AD8                     l2258:
  6683   001AD8  90D8               	bcf	status,0,c
  6684   001ADA  360B               	rlcf	___lwdiv@quotient^0,f,c
  6685   001ADC  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6686   001ADE  5009               	movf	___lwdiv@divisor^0,w,c
  6687   001AE0  5C07               	subwf	___lwdiv@dividend^0,w,c
  6688   001AE2  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6689   001AE4  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6690   001AE6  A0D8               	btfss	status,0,c
  6691   001AE8  EF78  F00D         	goto	u1311
  6692   001AEC  EF7A  F00D         	goto	u1310
  6693   001AF0                     u1311:
  6694   001AF0  EF7F  F00D         	goto	l2266
  6695   001AF4                     u1310:
  6696   001AF4  5009               	movf	___lwdiv@divisor^0,w,c
  6697   001AF6  5E07               	subwf	___lwdiv@dividend^0,f,c
  6698   001AF8  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6699   001AFA  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6700   001AFC  800B               	bsf	___lwdiv@quotient^0,0,c
  6701   001AFE                     l2266:
  6702   001AFE  90D8               	bcf	status,0,c
  6703   001B00  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6704   001B02  3209               	rrcf	___lwdiv@divisor^0,f,c
  6705   001B04  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6706   001B06  EF6C  F00D         	goto	l2258
  6707   001B0A                     l942:
  6708   001B0A  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6709   001B0E  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6710   001B12  0012               	return		;funcret
  6711   001B14                     __end_of___lwdiv:
  6712                           	callstack 0
  6713                           
  6714 ;; *************** function _Interrupts_init *****************
  6715 ;; Defined at:
  6716 ;;		line 10 in file "interrupts.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		None
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used: 1
  6736 ;; Hardware stack levels required when called: 2
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_main
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           	psect	text39
  6745   001F6C                     __ptext39:
  6746                           	callstack 0
  6747   001F6C                     _Interrupts_init:
  6748                           	callstack 28
  6749   001F6C                     
  6750                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6751   001F6C  8CF2               	bsf	242,6,c	;volatile
  6752                           
  6753                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6754   001F6E  010E               	movlb	14	; () banked
  6755   001F70  8B29               	bsf	41,5,b	;volatile
  6756                           
  6757                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6758   001F72  812B               	bsf	43,0,b	;volatile
  6759                           
  6760                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6761   001F74  8EF2               	bsf	242,7,c	;volatile
  6762   001F76                     
  6763                           ; BSR set to: 14
  6764   001F76  0012               	return		;funcret
  6765   001F78                     __end_of_Interrupts_init:
  6766                           	callstack 0
  6767                           
  6768 ;; *************** function _HighISR *****************
  6769 ;; Defined at:
  6770 ;;		line 22 in file "interrupts.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		wreg, status,2, status,0, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;Total ram usage:        0 bytes
  6789 ;; Hardware stack levels used: 1
  6790 ;; Hardware stack levels required when called: 1
  6791 ;; This function calls:
  6792 ;;		_increment_seconds
  6793 ;; This function is called by:
  6794 ;;		Interrupt level 2
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	intcode
  6799   000008                     __pintcode:
  6800                           	callstack 0
  6801   000008                     _HighISR:
  6802                           	callstack 24
  6803                           
  6804                           ; BSR set to: 14
  6805                           ;incstack = 0
  6806   000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6807   00000A                     
  6808                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6809   00000A  010E               	movlb	14	; () banked
  6810   00000C  AB33               	btfss	51,5,b	;volatile
  6811   00000E  EF0B  F000         	goto	i2u84_41
  6812   000012  EF0D  F000         	goto	i2u84_40
  6813   000016                     i2u84_41:
  6814   000016  EF15  F000         	goto	i2l384
  6815   00001A                     i2u84_40:
  6816   00001A                     
  6817                           ; BSR set to: 14
  6818                           ;interrupts.c: 25:     increment_seconds();
  6819   00001A  ECD0  F00F         	call	_increment_seconds	;wreg free
  6820   00001E                     
  6821                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6822   00001E  0EE7               	movlw	231
  6823   000020  6ED4               	movwf	212,c	;volatile
  6824   000022                     
  6825                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6826   000022  0E95               	movlw	149
  6827   000024  6ED3               	movwf	211,c	;volatile
  6828   000026                     
  6829                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6830   000026  010E               	movlb	14	; () banked
  6831   000028  9B33               	bcf	51,5,b	;volatile
  6832   00002A                     i2l384:
  6833                           
  6834                           ; BSR set to: 14
  6835   00002A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6836   00002C  0011               	retfie		f
  6837   00002E                     __end_of_HighISR:
  6838                           	callstack 0
  6839                           
  6840 ;; *************** function _increment_seconds *****************
  6841 ;; Defined at:
  6842 ;;		line 297 in file "dc_motor.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		status,2, status,0
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6860 ;;Total ram usage:        0 bytes
  6861 ;; Hardware stack levels used: 1
  6862 ;; This function calls:
  6863 ;;		Nothing
  6864 ;; This function is called by:
  6865 ;;		_HighISR
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           	psect	text41
  6870   001FA0                     __ptext41:
  6871                           	callstack 0
  6872   001FA0                     _increment_seconds:
  6873                           	callstack 24
  6874   001FA0                     
  6875                           ;dc_motor.c: 299:     seconds += 1;
  6876   001FA0  4A55               	infsnz	_seconds^0,f,c
  6877   001FA2  2A56               	incf	(_seconds+1)^0,f,c
  6878   001FA4  0012               	return		;funcret
  6879   001FA6                     __end_of_increment_seconds:
  6880                           	callstack 0
  6881   000000                     
  6882                           	psect	rparam
  6883   000000                     
  6884                           	psect	temp
  6885   00005B                     btemp:
  6886                           	callstack 0
  6887   00005B                     	ds	1
  6888   000000                     int$flags	set	btemp
  6889   000000                     wtemp8	set	btemp+1
  6890   000000                     ttemp5	set	btemp+1
  6891   000000                     ttemp6	set	btemp+4
  6892   000000                     ttemp7	set	btemp+8
  6893                           
  6894                           	psect	idloc
  6895                           
  6896                           ;Config register IDLOC0 @ 0x200000
  6897                           ;	unspecified, using default values
  6898   200000                     	org	2097152
  6899   200000  0FFF               	dw	4095
  6900                           
  6901                           ;Config register IDLOC1 @ 0x200002
  6902                           ;	unspecified, using default values
  6903   200002                     	org	2097154
  6904   200002  0FFF               	dw	4095
  6905                           
  6906                           ;Config register IDLOC2 @ 0x200004
  6907                           ;	unspecified, using default values
  6908   200004                     	org	2097156
  6909   200004  0FFF               	dw	4095
  6910                           
  6911                           ;Config register IDLOC3 @ 0x200006
  6912                           ;	unspecified, using default values
  6913   200006                     	org	2097158
  6914   200006  0FFF               	dw	4095
  6915                           
  6916                           ;Config register IDLOC4 @ 0x200008
  6917                           ;	unspecified, using default values
  6918   200008                     	org	2097160
  6919   200008  0FFF               	dw	4095
  6920                           
  6921                           ;Config register IDLOC5 @ 0x20000A
  6922                           ;	unspecified, using default values
  6923   20000A                     	org	2097162
  6924   20000A  0FFF               	dw	4095
  6925                           
  6926                           ;Config register IDLOC6 @ 0x20000C
  6927                           ;	unspecified, using default values
  6928   20000C                     	org	2097164
  6929   20000C  0FFF               	dw	4095
  6930                           
  6931                           ;Config register IDLOC7 @ 0x20000E
  6932                           ;	unspecified, using default values
  6933   20000E                     	org	2097166
  6934   20000E  0FFF               	dw	4095
  6935                           
  6936                           	psect	config
  6937                           
  6938                           ;Config register CONFIG1L @ 0x300000
  6939                           ;	External Oscillator mode Selection bits
  6940                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6941                           ;	Power-up default value for COSC bits
  6942                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6943   300000                     	org	3145728
  6944   300000  AA                 	db	170
  6945                           
  6946                           ;Config register CONFIG1H @ 0x300001
  6947                           ;	unspecified, using default values
  6948                           ;	Clock Out Enable bit
  6949                           ;	CLKOUTEN = 0x1, unprogrammed default
  6950                           ;	Clock Switch Enable bit
  6951                           ;	CSWEN = 0x1, unprogrammed default
  6952                           ;	Fail-Safe Clock Monitor Enable bit
  6953                           ;	FCMEN = 0x1, unprogrammed default
  6954   300001                     	org	3145729
  6955   300001  FF                 	db	255
  6956                           
  6957                           ;Config register CONFIG2L @ 0x300002
  6958                           ;	unspecified, using default values
  6959                           ;	Master Clear Enable bit
  6960                           ;	MCLRE = 0x1, unprogrammed default
  6961                           ;	Power-up Timer Enable bit
  6962                           ;	PWRTE = 0x1, unprogrammed default
  6963                           ;	Low-power BOR enable bit
  6964                           ;	LPBOREN = 0x1, unprogrammed default
  6965                           ;	Brown-out Reset Enable bits
  6966                           ;	BOREN = 0x3, unprogrammed default
  6967   300002                     	org	3145730
  6968   300002  FF                 	db	255
  6969                           
  6970                           ;Config register CONFIG2H @ 0x300003
  6971                           ;	unspecified, using default values
  6972                           ;	Brown Out Reset Voltage selection bits
  6973                           ;	BORV = 0x3, unprogrammed default
  6974                           ;	ZCD Disable bit
  6975                           ;	ZCD = 0x1, unprogrammed default
  6976                           ;	PPSLOCK bit One-Way Set Enable bit
  6977                           ;	PPS1WAY = 0x1, unprogrammed default
  6978                           ;	Stack Full/Underflow Reset Enable bit
  6979                           ;	STVREN = 0x1, unprogrammed default
  6980                           ;	Debugger Enable bit
  6981                           ;	DEBUG = 0x1, unprogrammed default
  6982                           ;	Extended Instruction Set Enable bit
  6983                           ;	XINST = 0x1, unprogrammed default
  6984   300003                     	org	3145731
  6985   300003  FF                 	db	255
  6986                           
  6987                           ;Config register CONFIG3L @ 0x300004
  6988                           ;	WDT Period Select bits
  6989                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6990                           ;	WDT operating mode
  6991                           ;	WDTE = OFF, WDT Disabled
  6992   300004                     	org	3145732
  6993   300004  9F                 	db	159
  6994                           
  6995                           ;Config register CONFIG3H @ 0x300005
  6996                           ;	unspecified, using default values
  6997                           ;	WDT Window Select bits
  6998                           ;	WDTCWS = 0x7, unprogrammed default
  6999                           ;	WDT input clock selector
  7000                           ;	WDTCCS = 0x7, unprogrammed default
  7001   300005                     	org	3145733
  7002   300005  FF                 	db	255
  7003                           
  7004                           ;Config register CONFIG4L @ 0x300006
  7005                           ;	unspecified, using default values
  7006                           ;	Write Protection Block 0
  7007                           ;	WRT0 = 0x1, unprogrammed default
  7008                           ;	Write Protection Block 1
  7009                           ;	WRT1 = 0x1, unprogrammed default
  7010                           ;	Write Protection Block 2
  7011                           ;	WRT2 = 0x1, unprogrammed default
  7012                           ;	Write Protection Block 3
  7013                           ;	WRT3 = 0x1, unprogrammed default
  7014                           ;	Write Protection Block 3
  7015                           ;	WRT4 = 0x1, unprogrammed default
  7016                           ;	Write Protection Block 3
  7017                           ;	WRT5 = 0x1, unprogrammed default
  7018                           ;	Write Protection Block 3
  7019                           ;	WRT6 = 0x1, unprogrammed default
  7020                           ;	Write Protection Block 3
  7021                           ;	WRT7 = 0x1, unprogrammed default
  7022   300006                     	org	3145734
  7023   300006  FF                 	db	255
  7024                           
  7025                           ;Config register CONFIG4H @ 0x300007
  7026                           ;	unspecified, using default values
  7027                           ;	Configuration Register Write Protection bit
  7028                           ;	WRTC = 0x1, unprogrammed default
  7029                           ;	Boot Block Write Protection bit
  7030                           ;	WRTB = 0x1, unprogrammed default
  7031                           ;	Data EEPROM Write Protection bit
  7032                           ;	WRTD = 0x1, unprogrammed default
  7033                           ;	Scanner Enable bit
  7034                           ;	SCANE = 0x1, unprogrammed default
  7035                           ;	Low Voltage Programming Enable bit
  7036                           ;	LVP = 0x1, unprogrammed default
  7037   300007                     	org	3145735
  7038   300007  FF                 	db	255
  7039                           
  7040                           ;Config register CONFIG5L @ 0x300008
  7041                           ;	unspecified, using default values
  7042                           ;	UserNVM Program Memory Code Protection bit
  7043                           ;	CP = 0x1, unprogrammed default
  7044                           ;	DataNVM Memory Code Protection bit
  7045                           ;	CPD = 0x1, unprogrammed default
  7046   300008                     	org	3145736
  7047   300008  FF                 	db	255
  7048                           
  7049                           ;Config register CONFIG5H @ 0x300009
  7050                           ;	unspecified, using default values
  7051   300009                     	org	3145737
  7052   300009  FF                 	db	255
  7053                           
  7054                           ;Config register CONFIG6L @ 0x30000A
  7055                           ;	unspecified, using default values
  7056                           ;	Table Read Protection Block 0
  7057                           ;	EBTR0 = 0x1, unprogrammed default
  7058                           ;	Table Read Protection Block 1
  7059                           ;	EBTR1 = 0x1, unprogrammed default
  7060                           ;	Table Read Protection Block 2
  7061                           ;	EBTR2 = 0x1, unprogrammed default
  7062                           ;	Table Read Protection Block 3
  7063                           ;	EBTR3 = 0x1, unprogrammed default
  7064                           ;	Table Read Protection Block 4
  7065                           ;	EBTR4 = 0x1, unprogrammed default
  7066                           ;	Table Read Protection Block 5
  7067                           ;	EBTR5 = 0x1, unprogrammed default
  7068                           ;	Table Read Protection Block 6
  7069                           ;	EBTR6 = 0x1, unprogrammed default
  7070                           ;	Table Read Protection Block 7
  7071                           ;	EBTR7 = 0x1, unprogrammed default
  7072   30000A                     	org	3145738
  7073   30000A  FF                 	db	255
  7074                           
  7075                           ;Config register CONFIG6H @ 0x30000B
  7076                           ;	unspecified, using default values
  7077                           ;	Boot Block Table Read Protection bit
  7078                           ;	EBTRB = 0x1, unprogrammed default
  7079   30000B                     	org	3145739
  7080   30000B  FF                 	db	255
  7081                           tosu	equ	0xFFF
  7082                           tosh	equ	0xFFE
  7083                           tosl	equ	0xFFD
  7084                           stkptr	equ	0xFFC
  7085                           pclatu	equ	0xFFB
  7086                           pclath	equ	0xFFA
  7087                           pcl	equ	0xFF9
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           prodh	equ	0xFF4
  7093                           prodl	equ	0xFF3
  7094                           indf0	equ	0xFEF
  7095                           postinc0	equ	0xFEE
  7096                           postdec0	equ	0xFED
  7097                           preinc0	equ	0xFEC
  7098                           plusw0	equ	0xFEB
  7099                           fsr0h	equ	0xFEA
  7100                           fsr0l	equ	0xFE9
  7101                           wreg	equ	0xFE8
  7102                           indf1	equ	0xFE7
  7103                           postinc1	equ	0xFE6
  7104                           postdec1	equ	0xFE5
  7105                           preinc1	equ	0xFE4
  7106                           plusw1	equ	0xFE3
  7107                           fsr1h	equ	0xFE2
  7108                           fsr1l	equ	0xFE1
  7109                           bsr	equ	0xFE0
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           preinc2	equ	0xFDC
  7114                           plusw2	equ	0xFDB
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         338
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     80      90
    BANK0           160     44     152
    BANK1           256      0     144
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _return_back->_turnLeft
    _return_back->_turnRight
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0   93630
                                             56 COMRAM    24    24      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                  _get_wall_presence
                    _initDCmotorsPWM
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   29689
                                             29 COMRAM     6     2      4
                _TimedfullSpeedAhead
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4393
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   35246
                                             29 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    5207
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    4904
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    4957
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    4795
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    4795
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    3957
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      90       7       56.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      98       5       95.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     50      5A       1       95.7%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24A      60        0.0%
DATA                 0      0     24A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 18:20:34 2022

               _color_read_Red 1C38             RobotMovement@color 001E                _color_read_Blue 1D28  
                           l71 141C                             l73 1452                             l82 1F26  
                           l74 1432                             l91 1CD6                             l67 1400  
                           l85 1C86                             l77 1444                             l94 1D26  
                           l88 1D76            ___wmul@multiplicand 0003               _color_read_Clear 1CD8  
             ?_calibrate_black 0001               _color_read_Green 1C88            RobotMovement@motorL 0020  
          RobotMovement@motorR 0022              ??_Interrupts_init 0001                            l112 1E1E  
                          l113 1E20                            l114 1E34                            l115 1E36  
                          l116 1E4A                            l213 0F32                            l141 131A  
                          l109 0DC6                            l118 1E4C                            l206 19B6  
                          l303 0A7A                            l216 1DC0                            l144 174C  
                          l136 090C                            l225 108C                            l241 16A2  
                          l313 0AC8                            l234 11DC                            l138 0914  
                          l251 1C36                            l147 188C                            l307 0A7A  
                          l340 1EB8                            l263 1A2A                            l343 1EBA  
                          l248 157A                            l352 1F9E                            l432 0C54  
                          l257 1A9E                            l361 1E8E                            l290 0576  
                          l282 03E2                            l346 1EE0                            l451 1F06  
                          l283 0424                            l355 1F8A                            l277 025E  
                          l349 1F94                            l293 1F80                            l278 02A0  
                          l358 1F6A                            l462 1B6C                            l463 1B7C  
                          l448 1F46                            l297 1E08                            l378 1F76  
                          l485 17F0                            l478 17E0                            l942 1B0A  
                          l949 1B12                            _RGB 00EC               ?_calibrate_white 0001  
                          wreg 000FE8                           l3000 0ADE                           l2210 1ECA  
                         l3010 0AEC                           l3002 0ADE                           l2212 1F8C  
                         l2220 1F82                           l2300 1E44                           l3020 0B0C  
                         l3012 0AF0                           l3004 0AE2                           l2310 0E50  
                         l2302 0DC8                           l2230 1E54                           l2214 1F90  
                         l2222 1F86                           l3030 0B28                           l3022 0B10  
                         l3014 0AF4                           l3006 0AE6                           l2312 0E92  
                         l2304 0DE4                           l2320 1E9A                           l2208 1EBA  
                         l2232 1E5C                           l2224 1F96                           l2216 1F62  
                         l2400 0D6A                           l3040 0B7E                           l3032 0B30  
                         l3024 0B14                           l3016 0AFC                           l3008 0AE8  
                         l2250 1AA8                           l2242 1EE2                           l2314 0EAE  
                         l2306 0E38                           l2410 1DA8                           l2322 1EA0  
                         l2234 1E64                           l2226 1F9A                           l2218 1F66  
                         l2330 1F0A                           l3050 0BD0                           l3042 0B90  
                         l3034 0B48                           l3026 0B18                           l3018 0B04  
                         l2260 1ADE                           l2252 1ABA                           l2244 1EFE  
                         l2316 0EF2                           l2308 0E4C                           l2404 1D78  
                         l2412 0F34                           l2500 1132                           l2324 1EA2  
                         l2236 1E8A                           l2228 1E50                           l2340 16E4  
                         l2332 16A4                           l3052 0BEC                           l3044 0B94  
                         l3036 0B5C                           l3028 0B20                           l2262 1AF4  
                         l2254 1AC2                           l2406 1D90                           l2430 0F84  
                         l2510 1182                           l2502 1152                           l2326 1EA4  
                         l2318 1E90                           l2238 1E8C                           l2270 1C38  
                         l2350 11DE                           l2342 170C                           l2334 16B0  
                         l3054 0BFE                           l3046 0BA8                           l3038 0B68  
                         l2264 1AFC                           l2256 1ACA                           l2248 1AA0  
                         l2408 1D9C                           l2440 0FD8                           l2432 0F90  
                         l2424 0F4C                           l2520 157C                           l2512 1198  
                         l2504 115E                           l2600 1534                           l2328 1EA6  
                         l2272 1C7E                           l2360 1246                           l2352 11EA  
                         l2344 1718                           l2336 16C6                           l3048 0BB4  
                         l3056 0C2A                           l2266 1AFE                           l2258 1AD8  
                         l2610 1A38                           l2450 100C                           l2434 0F9C  
                         l2426 0F6C                           l2418 0F44                           l2530 15B0  
                         l2514 11A0                           l2506 116A                           l2602 1540  
                         l2290 1D1E                           l2282 1C88                           l2370 12A8  
                         l2362 1252                           l2354 1200                           l2346 172E  
                         l2338 16D8                           l3058 0C3C                           l2268 1B04  
                         l2612 1A58                           l2620 1A88                           l2460 1050  
                         l2452 1018                           l2436 0FB4                           l2428 0F78  
                         l2540 15F4                           l2532 15BC                           l2516 11BC  
                         l2508 1176                           l2604 1556                           l2276 1D28  
                         l2284 1CCE                           l2372 12B4                           l2364 1268  
                         l2356 1212                           l2348 1740                           l2700 13E4  
                         l2380 0C5C                           l2614 1A64                           l2630 19FC  
                         l2622 19B8                           l2462 106C                           l2454 1024  
                         l2446 0FE0                           l2438 0FBC                           l2550 1638  
                         l2542 1610                           l2534 15C8                           l2526 1584  
                         l2518 11C0                           l2606 155E                           l2278 1D6E  
                         l2294 1E0A                           l2374 12CA                           l2366 127A  
                         l2358 121E                           l2710 140E                           l2702 13F6  
                         l2390 0CF0                           l2382 0C7A                           l2616 1A70  
                         l2608 1A2C                           l2632 1A08                           l2624 19C4  
                         l2464 1070                           l2456 1030                           l2448 1000  
                         l2560 167E                           l2552 1644                           l2536 15D4  
                         l2528 15A4                           l2480 10BE                           l2472 1096  
                         l2288 1CD8                           l2296 1E18                           l2376 12E2  
                         l2368 129C                           l2704 13F8                           l2640 1B32  
                         l2392 0D08                           l2384 0C96                           l2720 0584  
                         l2800 1938                           l2618 1A7C                           l2626 19E4  
                         l2634 1A14                           l2458 1048                           l2562 1686  
                         l2554 1650                           l2538 15EC                           l2490 1106  
                         l2482 10CA                           l2466 108E                           l2570 145C  
                         l2298 1E2E                           l2378 12FE                           l2714 142E  
                         l2706 13FC                           l2650 1774                           l2642 1B42  
                         l2394 0D2E                           l2386 0CAE                           l2730 05EC  
                         l2722 059A                           l2810 199C                           l2802 1962  
                         l2628 19F0                           l2556 165C                           l2548 1618  
                         l2492 110E                           l2484 10D6                           l2580 14AC  
                         l2572 147C                           l2564 1454                           l2900 03A2  
                         l2716 1440                           l2708 13FE                           l2820 1BDE  
                         l2660 17BE                           l2652 177C                           l2644 1B4C  
                         l2636 1B14                           l2396 0D4A                           l2388 0CD4  
                         l2740 0654                           l2732 0602                           l2724 05AC  
                         l2812 199E                           l2804 1986                           l2558 1668  
                         l2494 112A                           l2486 10E2                           l2478 109E  
                         l2582 14C4                           l2574 1488                           l2902 03C8  
                         l2910 0460                           l2670 1320                           l2830 1C1E  
                         l2822 1BE6                           l2662 17CE                           l2654 1788  
                         l2646 174E                           l2638 1B24                           l2398 0D62  
                         l2750 076C                           l2742 06BE                           l2734 0614  
                         l2726 05B8                           l2718 0578                           l2814 19A8  
                         l2806 1990                           l2488 10EE                           l2592 14F0  
                         l2584 14CC                           l2576 1494                           l2920 04BA  
                         l2912 0474                           l2904 040A                           l2840 0088  
                         l2680 1350                           l2672 132A                           l2832 1C2A  
                         l2824 1BF6                           l2664 17D0                           l2656 1796  
                         l2648 175E                           l2760 082A                           l2752 077C  
                         l2744 06CE                           l2736 0620                           l2728 05E0  
                         l2816 19AA                           l2808 1992                           l2594 1510  
                         l2586 14E8                           l2578 14A0                           l2922 04CE  
                         l2914 0488                           l2906 043E                           l2850 00E6  
                         l2842 00A2                           l2834 0032                           l2690 138A  
                         l2682 1352                           l2674 133A                           l2826 1C06  
                         l2666 17DA                           l2658 17A0                           l2770 086C  
                         l2762 085A                           l2754 079C                           l2746 06EE  
                         l2738 0640                           l2818 19B4                           l2596 151C  
                         l2940 053C                           l2924 04E8                           l2916 04A2  
                         l2908 0442                           l2860 0106                           l2852 00EA  
                         l2844 00A6                           l2836 0062                           l2692 139C  
                         l2684 1354                           l2676 1344                           l2668 131C  
                         l2828 1C12                           l2780 08F6                           l2772 089A  
                         l2764 0864                           l2756 07B0                           l2748 0702  
                         l2598 1528                           l2934 0508                           l2942 0544  
                         l2926 04EC                           l2918 04A6                           l2862 011A  
                         l2854 00FE                           l2870 0158                           l2846 00B8  
                         l2838 0074                           l2950 1DDE                           l2694 13AE  
                         l2686 1366                           l2678 134E                           l2774 08CA  
                         l2758 081A                           l2790 182C                           l2782 17F2  
                         l2944 055A                           l2936 051C                           l2928 0500  
                         l2880 021E                           l2872 016C                           l2864 0134  
                         l2848 00CC                           l2952 1E04                           l2696 13C0  
                         l2688 1378                           l2776 08E2                           l2792 184E  
                         l2784 17FE                           l2960 0958                           l2938 0520  
                         l2882 0244                           l2874 01B0                           l2890 02DC  
                         l2866 0138                           l2698 13D2                           l2778 08F2  
                         l2946 1F78                           l2794 185A                           l2786 1814  
                         l2970 0A00                           l2962 0980                           l2954 0916  
                         l2892 02F0                           l2884 0286                           l2876 01E2  
                         l2868 013C                           l2948 1DC2                           l2788 1820  
                         l2980 0AAE                           l2972 0A18                           l2964 0998  
                         l2956 091A                           l2894 0334                           l2886 02BA  
                         l2878 0216                           l2990 1F42                           l2798 1928  
                         l2982 0AC0                           l2974 0A48                           l2966 09C0  
                         l2958 0940                           l2984 1F6C                           l2896 0366  
                         l2888 02BE                           l2992 1F44                           l2976 0A8E  
                         l2968 09D8                           l2898 039A                           l2986 1F28  
                         l2978 0A94                           l2994 0ACA                           l2988 1F30  
                         l2996 0ACE                           l2998 0AD2                           u2000 1DDE  
                         u2001 1DDA                           u2010 0940                           u2011 093C  
                         u1300 1AD8                           u2020 0980                           u2100 0BFE  
                         u1301 1AD4                           u2021 097C                           u2101 0BFA  
                         u1310 1AF4                           u2030 09C0                           u2110 0C3C  
                         u1311 1AF0                           u2031 09BC                           u2111 0C38  
                         u1400 0FD8                           u1320 1E18                           u2040 0A00  
                         u1401 0FD4                           u1321 1E14                           u2041 09FC  
                         u1410 106C                           u1250 1ECA                           u1330 1E2E  
                         u2050 0A48                           u1411 1068                           u1251 1EC6  
                         u1331 1E2A                           u2051 0A44                           u1500 1A9E  
                         u1420 108C                           u1260 1EE0                           u1340 1E44  
                         u2060 0AAE                           u1501 1A9A                           u1421 1088  
                         u1261 1EDC                           u1341 1E40                           u2061 0AAA  
                         u1350 0DE4                           u1510 1A2A                           u1430 112A  
                         u1270 1E78                           u2070 0AC0                           u1351 0DE0  
                         u1511 1A26                           u1431 1126                           u1271 1E70  
                         u2071 0ABC                           u1360 0EAE                           u1440 11BC  
                         u1520 1B32                           u2080 0B7E                           u1361 0EAA  
                         u1441 11B8                           u1601 1394                           u1521 1B2E  
                         u2081 0B7A                           u1290 1ABA                           u1450 11DC  
                         u1530 1B6C                           u1370 0C7A                           u2090 0B90  
                         u1291 1AB6                           u1451 11D8                           u1611 13A6  
                         u1531 1B68                           u1371 0C76                           u2091 0B8C  
                         u1460 1610                           u1700 1452                           u1540 1774  
                         u1380 0CD4                           u1461 160C                           u1701 144E  
                         u1621 13B8                           u1541 1770                           u1381 0CD0  
                         u1470 16A2                           u1550 1796                           u1390 0D2E  
                         u1710 0640                           u1471 169E                           u1631 13CA  
                         u1551 1792                           u1391 0D2A                           u1711 063C  
                         u1480 14E8                           u1288 1E7A                           u1560 17BE  
                         u1800 090C                           u1720 06EE                           u1481 14E4  
                         u1641 13DC                           u1561 17BA                           u1801 0908  
                         u1721 06EA                           u1490 157A                           u1730 079C  
                         u1810 1886                           _T2PR 000FBC                     _Black_rule 016C  
                         u1491 1576                           u1651 13EE                           u1571 135E  
                         u1731 0798                           u1811 1880                           u2507 1836  
                         u1900 0286                           u1660 140E                           u1820 1888  
                         u1901 0282                           u1661 140A                           u1581 1370  
                         u1741 0834                           u2517 058E                           u1910 02F0  
                         u1830 0074                           u1670 141C                           u1911 02EC  
                         u1831 0070                           u2607 125C                           u1671 1418  
                         u1591 1382                           u1751 0846                           u2527 05C2  
                         u1920 0366                           u1840 00B8                           u1680 142A  
                         u1921 0362                           u1841 00B4                           u2617 1290  
                         u1681 1426                           u1761 0892                           u2537 05F6  
                         u1930 03C8                           u1850 00FE                           u1690 1440  
                         u2707 103A                           u1931 03C4                           u1851 00FA  
                         u2627 12BE                           u1691 143C                           u2547 1330  
                         u1771 08A4                           u1940 040A                           u1860 0158  
                         u2717 1DB2                           u2637 14B6                           u1941 0406  
                         u1861 0154                           u2557 16BA                           u1781 08B6  
                         u1950 0474                           u1870 016C                           u1790 08E2  
                         u2647 154A                           u1951 0470                           u1871 0168  
                         u2567 16EE                           u1791 08DE                           u2487 0B3A  
                         u1960 04BA                           u1880 01E2                           u2657 10F8  
                         u1961 04B6                           u1881 01DE                           u2577 1722  
                         u2497 1808                           u1970 0500                           u1890 0244  
                         u2667 118C                           u1971 04FC                           u1891 0240  
                         u2587 11F4                           u1980 053C                           u2677 15DE  
                         u1981 0538                           u2597 1228                           u1990 055A  
                         u2687 1672                           u1991 0556                           u2697 0FA6  
                         _main 0ACA                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 005B  
                         _stop 1D78                           prodh 000FF4                           prodl 000FF3  
                         start 002E         __end_of_color_read_Red 1C88                __end_of_HighISR 002E  
                 ___param_bank 000000             _get_color_code$460 00D4             _get_color_code$458 00CC  
           _get_color_code$459 00D0                          ?_main 0001                __end_of___lldiv 17F2  
                        ?_stop 0014            _add_seconds_to_list 1DC2                    _Black_setup 0060  
              __end_of___lwdiv 1B14                          i2l266 1FA4                          i2l384 002A  
                        _TMR0H 000FD4                          _TMR0L 000FD3            ___lmul@multiplicand 0005  
   __end_of_I2C_2_Master_Start 1F96     __end_of_I2C_2_Master_Write 1F6C             _get_color_distance 0C5C  
                        _index 0053                          _state 0051                          tablat 000FF5  
                        plusw0 000FEB                          plusw1 000FE3                          plusw2 000FDB  
          ?_get_color_distance 0007                          ttemp5 005C                          ttemp6 005F  
                        ttemp7 0063                          status 000FD8                          wtemp8 005C  
         ?_add_seconds_to_list 0001                     _Green_rule 00A8        __end_of_color_read_Blue 1D78  
        _I2C_2_Master_RepStart 1F96                ?_color_read_Red 0005                __initialization 188E  
                 __end_of_main 0C5C                   __end_of_stop 1DC2                   _turnLeftLong 157C  
         ??_get_color_distance 001F                         ??_main 0039                         ??_stop 0018  
                __activetblptr 000000            _get_color_code$2441 00C0                   ?_setMotorPWM 000E  
                       _CCPR1H 000FAA                         _CCPR2H 000FA6                         _CCPR3H 000F25  
                       _CCPR4H 000F21                         _RE2PPS 000E74                         _RD5PPS 000E6F  
                       _RC7PPS 000E69                         _RD6PPS 000E70                         _RE4PPS 000E76  
                       i2l1750 1FA0                         i2l1920 0026                         i2l1912 000A  
                       i2l1914 001A                         i2l1916 001E                         i2l1918 0022  
                       _RG6PPS 000E88                      ??_HighISR 0001       __end_of_color_click_init 1454  
        ??_add_seconds_to_list 0001                 RobotMovement@i 0026          __end_of_RobotMovement 0578  
             ??_get_color_code 0037                  ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD  
                       ___lmul 1B14       get_color_distance@color1 0007       get_color_distance@color2 0013  
                       ___wmul 1EE2                      ??___lldiv 0015                      ??___lwdiv 000B  
                  _Color_rules 0100                         clear_0 18F4                         clear_1 1900  
                       clear_2 190C                         isa$std 000001               __end_of_moveBack 1A2C  
        calibrate_black@clear1 0010          calibrate_black@clear2 0012                   __pdataCOMRAM 0057  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                 ?_return_back 001E                 _Lightblue_rule 0184                     _White_rule 0178  
                       stop@mL 0014                         stop@mR 0016              ??_initDCmotorsPWM 0003  
             __end_of_turnLeft 108E          __end_of_set_led_color 1E4E                     __accesstop 0060  
      __end_of__initialization 191E       __end_of_color_read_Clear 1D28        get_wall_presence@clear1 0010  
      get_wall_presence@clear2 0012       __end_of_color_read_Green 1CD8         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 1F6C  
               __pcstackCOMRAM 0001                   __pidataBANK0 1B7E                   __pidataBANK1 1F48  
          __end_of_Timer0_init 1F48                     __pbssBANK0 00EC                     __pbssBANK1 0100  
                   __pbssBANK2 0200                  _turnRightLong 1454              _color_writetoaddr 1F08  
                 _T2CLKCONbits 000FBF             ?_color_writetoaddr 0003                        ?___lmul 0001  
                      ?___wmul 0001                 main@color_code 003B                 ___lmul@product 0009  
              get_color_code@i 00DE            ??_color_writetoaddr 0004              return_back@motorL 001E  
            return_back@motorR 0020        get_color_code@min_index 00DA                        i2u84_40 001A  
                      i2u84_41 0016                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      get_color_code@min_value 00D8              _get_wall_presence 17F2                    _Orange_rule 0078  
           ?_get_wall_presence 000C        __end_of_Interrupts_init 1F78         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        _HighISR 0008      __end_of_color_writetoaddr 1F28  
               ?_turnRightLong 0014             _I2C_2_Master_Start 1F8C             _I2C_2_Master_Write 1F60  
                    ?_moveBack 0014                        __Hparam 0000            ??_get_wall_presence 000E  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 1F28  
            __end_of_get_state 1F82                        ___lldiv 174E            ?_I2C_2_Master_Start 0001  
                      ___lwdiv 1AA0            ?_I2C_2_Master_Write 0001                        __pcinit 188E  
                      __ramtop 0E00                      ?_turnLeft 0014                        __ptext0 0ACA  
                      __ptext1 0916                        __ptext2 1928                        __ptext3 17F2  
                      __ptext4 1F78                        __ptext5 0578                        __ptext6 0C5C  
                      __ptext7 1B14                        __ptext8 174E                        __ptext9 1BDE  
                    _T2CONbits 000FBD                        _seconds 0055                      _T2HLTbits 000FBE  
    __end_of_get_wall_presence 188E           ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002  
         end_of_initialization 191E              ?_color_click_init 0001                     ??_moveBack 001A  
              ___lldiv@divisor 0011             ??_color_click_init 0016                ___lldiv@counter 0019  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc2 000FDE                    _White_setup 006C                _initDCmotorsPWM 1928  
                   ??_turnLeft 0018                      _PORTFbits 000F8E             setMotorPWM@negDuty 0013  
            __end_of_turnRight 11DE                    _Yellow_rule 0090                      _TRISAbits 000F81  
           setMotorPWM@posDuty 0012                      _TRISCbits 000F83                      _TRISDbits 000F84  
                    _TRISEbits 000F85                      _TRISFbits 000F86                      _TRISGbits 000F87  
         _calibrate_black$2442 0014    __end_of_add_seconds_to_list 1E0A               fullSpeedAhead@mL 0014  
             fullSpeedAhead@mR 0016       color_writetoaddr@address 0004     get_color_distance@B_offset 0033  
      ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001                ??_turnRightLong 0018  
                  _CCP1CONbits 000FAB     get_color_distance@G_offset 0031              _increment_seconds 1FA0  
            ?_color_read_Clear 0005                    _CCP2CONbits 000FA7              ??_calibrate_black 000E  
            ?_color_read_Green 0005                    _CCP3CONbits 000F26                    _CCP4CONbits 000F22  
                   main@motorL 003F                     main@motorR 0048              ??_calibrate_white 000C  
           ?_increment_seconds 0001             ??_color_read_Clear 0007             ??_color_read_Green 0007  
               _fullSpeedAhead 1BDE     get_color_distance@R_offset 002F                      _Blue_rule 009C  
          ??_increment_seconds 0001                 __end_of___lmul 1B7E                 __end_of___wmul 1F08  
                __pidataCOMRAM 1FA6            color_read_Clear@tmp 000A            start_initialization 188E  
          _TimedfullSpeedAhead 1A2C      __end_of_increment_seconds 1FA6                      _Pink_rule 0084  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 19B8           ?_TimedfullSpeedAhead 0014  
       __end_of_fullSpeedAhead 1C38                       ??___lmul 0009                       ??___wmul 0005  
                  __pdataBANK0 0060                    __pdataBANK1 0178         _get_color_distance$421 002B  
       _get_color_distance$417 0023         _get_color_distance$419 0027                    __pbssCOMRAM 0051  
                __pcstackBANK0 00C0            get_color_code@value 00DC                       ?_HighISR 0001  
                _RobotMovement 0032               ___lwdiv@dividend 0007          ??_TimedfullSpeedAhead 001A  
                 ?_Timer0_init 0001                ?_fullSpeedAhead 0014                     moveBack@mL 0014  
                   moveBack@mR 0016                      __pintcode 0008                       ?___lldiv 000D  
                     ?___lwdiv 0007                  ?_turnLeftLong 0014                   moveBack@time 0018  
                    _get_state 1F78           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
        TimedfullSpeedAhead@mL 0014          TimedfullSpeedAhead@mR 0016    get_color_code@NormalizedRGB 00E0  
            _I2C_2_Master_Idle 1EBA              _I2C_2_Master_Init 1E90              _I2C_2_Master_Read 1E4E  
            _I2C_2_Master_Stop 1F82             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001                turnRightLong@mL 0014  
              turnRightLong@mR 0016                 turnLeftLong@mL 0014                 turnLeftLong@mR 0016  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 000F79                  _set_led_color 1E0A  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B                       _LATEbits 000F7D  
                     _LATFbits 000F7E                       _LATGbits 000F7F                       _PIE0bits 000E29  
               ?_RobotMovement 001E                       _PIE2bits 000E2B                    turnRight@mL 0014  
                  turnRight@mR 0016                       _PIR0bits 000E33               ?_initDCmotorsPWM 0001  
                    _wall_coef 0059                      _wait_time 0057                       _SSP2CON2 000EDA  
               ??_turnLeftLong 0018                       _SSP2STAT 000ED8             set_led_color@color 0001  
                   ?_get_state 0001      __end_of_I2C_2_Master_Idle 1EE2      __end_of_I2C_2_Master_Init 1EBA  
    __end_of_I2C_2_Master_Read 1E90              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1F8C  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                  _movement_list 0200  
                    main@state 003D              ??_color_read_Blue 0007                  ??_return_back 0022  
              _calibrate_black 11DE        TimedfullSpeedAhead@time 0018                      _turnRight 108E  
              _calibrate_white 16A4              ___lmul@multiplier 0001                      copy_data0 18A2  
                    copy_data1 18C2                      copy_data2 18E2                 ?_set_led_color 0001  
__end_of_I2C_2_Master_RepStart 1FA0             color_read_Blue@tmp 000A            __end_of_setMotorPWM 0F34  
                     _Red_rule 00B4                       __Hrparam 0000                       __Lrparam 0000  
   __end_of_get_color_distance 0DC8                 _get_color_code 0578                     _ANSELDbits 000EA7  
                   _ANSELFbits 000EB4                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 0009                ___lwdiv@counter 000D                     ?_turnRight 0014  
                     __ptext10 131C                       __ptext11 1F08                       __ptext20 1F82  
                     __ptext12 16A4                       __ptext21 1F8C                       __ptext13 11DE  
                     __ptext30 108E                       __ptext22 1F96                       __ptext14 1E0A  
                     __ptext31 157C                       __ptext23 1E4E                       __ptext15 1C38  
                     __ptext32 0F34                       __ptext24 1EBA                       __ptext16 1C88  
                     __ptext41 1FA0                       __ptext33 1D78                       __ptext25 1E90  
                     __ptext17 1CD8                       __ptext34 19B8                       __ptext26 1DC2  
                     __ptext18 1D28                       __ptext35 1A2C                       __ptext27 1F28  
                     __ptext19 1F60                       __ptext36 0DC8                       __ptext28 0032  
                     __ptext37 1EE2                       __ptext29 1454                       __ptext38 1AA0  
                     __ptext39 1F6C                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
              ??_RobotMovement 0024            __end_of_return_back 0ACA                     turnLeft@mL 0014  
                   turnLeft@mR 0016                 turnRightLong@i 001A                  turnLeftLong@i 001A  
        __end_of_turnRightLong 157C                       _moveBack 19B8                     turnRight@i 001C  
                   turnRight@k 001A                       isa$xinst 000000                       int$flags 005B  
       __end_of_get_color_code 0916        __end_of_calibrate_black 131C                       _turnLeft 0F34  
                  ??_get_state 0003        __end_of_calibrate_white 174E                     _INTCONbits 000FF2  
                  _setMotorPWM 0DC8                ??_set_led_color 0003           __end_of_turnLeftLong 16A4  
                     intlevel2 0000               ___lldiv@dividend 000D               ??_fullSpeedAhead 0018  
                    turnLeft@i 001C                      turnLeft@k 001A                ?_get_color_code 0035  
             _color_click_init 131C                     _SSP2DATPPS 000E1D               ___lldiv@quotient 0015  
                   _SSP2CLKPPS 000E1C                    _return_back 0916                    ??_turnRight 0018  
  __end_of_TimedfullSpeedAhead 1AA0            RobotMovement@i_1265 0028  
