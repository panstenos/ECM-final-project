

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 09 15:44:04 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    62                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    63   000000                     
    64                           ; Generated 06/04/2022 GMT
    65                           ; 
    66                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution. Publication is not required when
    80                           ;        this file is used in an embedded application.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC18F67K40 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98   000000                     
    99                           	psect	idataCOMRAM
   100   001E68                     __pidataCOMRAM:
   101                           	callstack 0
   102                           
   103                           ;initializer for _Black_setup
   104   001E68  0404               	dw	1028
   105   001E6A  0000               	dw	0
   106   001E6C  024B               	dw	587
   107   001E6E  0000               	dw	0
   108   001E70  00A1               	dw	161
   109   001E72  0000               	dw	0
   110                           
   111                           	psect	idataBANK0
   112   001A9A                     __pidataBANK0:
   113                           	callstack 0
   114                           
   115                           ;initializer for _White_setup
   116   001A9A  28FC               	dw	10492
   117   001A9C  0000               	dw	0
   118   001A9E  1B55               	dw	6997
   119   001AA0  0000               	dw	0
   120   001AA2  0770               	dw	1904
   121   001AA4  0000               	dw	0
   122                           
   123                           ;initializer for _Lightblue_rule
   124   001AA6  0026               	dw	38
   125   001AA8  0000               	dw	0
   126   001AAA  0048               	dw	72
   127   001AAC  0000               	dw	0
   128   001AAE  0054               	dw	84
   129   001AB0  0000               	dw	0
   130                           
   131                           ;initializer for _Orange_rule
   132   001AB2  005C               	dw	92
   133   001AB4  0000               	dw	0
   134   001AB6  0027               	dw	39
   135   001AB8  0000               	dw	0
   136   001ABA  001C               	dw	28
   137   001ABC  0000               	dw	0
   138                           
   139                           ;initializer for _Pink_rule
   140   001ABE  004D               	dw	77
   141   001AC0  0000               	dw	0
   142   001AC2  003C               	dw	60
   143   001AC4  0000               	dw	0
   144   001AC6  0040               	dw	64
   145   001AC8  0000               	dw	0
   146                           
   147                           ;initializer for _Yellow_rule
   148   001ACA  005D               	dw	93
   149   001ACC  0000               	dw	0
   150   001ACE  004C               	dw	76
   151   001AD0  0000               	dw	0
   152   001AD2  0014               	dw	20
   153   001AD4  0000               	dw	0
   154                           
   155                           ;initializer for _Blue_rule
   156   001AD6  0003               	dw	3
   157   001AD8  0000               	dw	0
   158   001ADA  0009               	dw	9
   159   001ADC  0000               	dw	0
   160   001ADE  0024               	dw	36
   161   001AE0  0000               	dw	0
   162                           
   163                           ;initializer for _Green_rule
   164   001AE2  0019               	dw	25
   165   001AE4  0000               	dw	0
   166   001AE6  0036               	dw	54
   167   001AE8  0000               	dw	0
   168   001AEA  0008               	dw	8
   169   001AEC  0000               	dw	0
   170                           
   171                           ;initializer for _Red_rule
   172   001AEE  0048               	dw	72
   173   001AF0  0000               	dw	0
   174   001AF2  0002               	dw	2
   175   001AF4  0000               	dw	0
   176   001AF6  0002               	dw	2
   177   001AF8  0000               	dw	0
   178                           
   179                           ;initializer for _wait_time
   180   001AFA  00DC               	dw	220
   181                           
   182                           ;initializer for _wall_coef
   183   001AFC  000F               	dw	15
   184                           
   185                           	psect	idataBANK1
   186   001E74                     __pidataBANK1:
   187                           	callstack 0
   188                           
   189                           ;initializer for _White_rule
   190   001E74  0064               	dw	100
   191   001E76  0000               	dw	0
   192   001E78  0064               	dw	100
   193   001E7A  0000               	dw	0
   194   001E7C  0064               	dw	100
   195   001E7E  0000               	dw	0
   196   000000                     _T0CON0bits	set	4053
   197   000000                     _T0CON1bits	set	4054
   198   000000                     _TRISDbits	set	3972
   199   000000                     _SSP2CON2bits	set	3802
   200   000000                     _SSP2CLKPPS	set	3612
   201   000000                     _SSP2DATPPS	set	3613
   202   000000                     _RC7PPS	set	3689
   203   000000                     _RE2PPS	set	3700
   204   000000                     _ANSELFbits	set	3764
   205   000000                     _TRISAbits	set	3969
   206   000000                     _TRISFbits	set	3974
   207   000000                     _PORTFbits	set	3982
   208   000000                     _TRISGbits	set	3975
   209   000000                     _TRISCbits	set	3971
   210   000000                     _TRISEbits	set	3973
   211   000000                     _SSP2BUF	set	3797
   212   000000                     _SSP2ADD	set	3798
   213   000000                     _SSP2CON1bits	set	3801
   214   000000                     _LATAbits	set	3961
   215   000000                     _LATGbits	set	3967
   216   000000                     _CCPR4H	set	3873
   217   000000                     _CCPR3H	set	3877
   218   000000                     _T2PR	set	4028
   219   000000                     _T2CONbits	set	4029
   220   000000                     _CCPR2H	set	4006
   221   000000                     _CCPR1H	set	4010
   222   000000                     _LATCbits	set	3963
   223   000000                     _LATEbits	set	3965
   224   000000                     _LATFbits	set	3966
   225   000000                     _RE4PPS	set	3702
   226   000000                     _RG6PPS	set	3720
   227   000000                     _RD5PPS	set	3695
   228   000000                     _ANSELDbits	set	3751
   229   000000                     _TMR0L	set	4051
   230   000000                     _TMR0H	set	4052
   231   000000                     _INTCONbits	set	4082
   232   000000                     _T2CLKCONbits	set	4031
   233   000000                     _T2HLTbits	set	4030
   234   000000                     _CCP1CONbits	set	4011
   235   000000                     _CCPTMRS0bits	set	4013
   236   000000                     _CCP2CONbits	set	4007
   237   000000                     _CCP3CONbits	set	3878
   238   000000                     _CCP4CONbits	set	3874
   239   000000                     _SSP2CON2	set	3802
   240   000000                     _SSP2STAT	set	3800
   241   000000                     _PIE0bits	set	3625
   242   000000                     _RD6PPS	set	3696
   243   000000                     _PIE2bits	set	3627
   244   000000                     _PIR0bits	set	3635
   245                           
   246                           ; #config settings
   247                           
   248                           	psect	cinit
   249   00184A                     __pcinit:
   250                           	callstack 0
   251   00184A                     start_initialization:
   252                           	callstack 0
   253   00184A                     __initialization:
   254                           	callstack 0
   255                           
   256                           ; Initialize objects allocated to BANK1 (12 bytes)
   257                           ; load TBLPTR registers with __pidataBANK1
   258   00184A  0E74               	movlw	low __pidataBANK1
   259   00184C  6EF6               	movwf	tblptrl,c
   260   00184E  0E1E               	movlw	high __pidataBANK1
   261   001850  6EF7               	movwf	tblptrh,c
   262   001852  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   263   001854  6EF8               	movwf	tblptru,c
   264   001856  EE01  F0DC         	lfsr	0,__pdataBANK1
   265   00185A  EE10 F00C          	lfsr	1,12
   266   00185E                     copy_data0:
   267   00185E  0009               	tblrd		*+
   268   001860  CFF5 FFEE          	movff	tablat,postinc0
   269   001864  50E5               	movf	postdec1,w,c
   270   001866  50E1               	movf	fsr1l,w,c
   271   001868  E1FA               	bnz	copy_data0
   272                           
   273                           ; Initialize objects allocated to BANK0 (100 bytes)
   274                           ; load TBLPTR registers with __pidataBANK0
   275   00186A  0E9A               	movlw	low __pidataBANK0
   276   00186C  6EF6               	movwf	tblptrl,c
   277   00186E  0E1A               	movlw	high __pidataBANK0
   278   001870  6EF7               	movwf	tblptrh,c
   279   001872  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   280   001874  6EF8               	movwf	tblptru,c
   281   001876  EE00  F060         	lfsr	0,__pdataBANK0
   282   00187A  EE10 F064          	lfsr	1,100
   283   00187E                     copy_data1:
   284   00187E  0009               	tblrd		*+
   285   001880  CFF5 FFEE          	movff	tablat,postinc0
   286   001884  50E5               	movf	postdec1,w,c
   287   001886  50E1               	movf	fsr1l,w,c
   288   001888  E1FA               	bnz	copy_data1
   289                           
   290                           ; Initialize objects allocated to COMRAM (12 bytes)
   291                           ; load TBLPTR registers with __pidataCOMRAM
   292   00188A  0E68               	movlw	low __pidataCOMRAM
   293   00188C  6EF6               	movwf	tblptrl,c
   294   00188E  0E1E               	movlw	high __pidataCOMRAM
   295   001890  6EF7               	movwf	tblptrh,c
   296   001892  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   297   001894  6EF8               	movwf	tblptru,c
   298   001896  EE00  F04F         	lfsr	0,__pdataCOMRAM
   299   00189A  EE10 F00C          	lfsr	1,12
   300   00189E                     copy_data2:
   301   00189E  0009               	tblrd		*+
   302   0018A0  CFF5 FFEE          	movff	tablat,postinc0
   303   0018A4  50E5               	movf	postdec1,w,c
   304   0018A6  50E1               	movf	fsr1l,w,c
   305   0018A8  E1FA               	bnz	copy_data2
   306                           
   307                           ; Clear objects allocated to BANK1 (220 bytes)
   308   0018AA  EE01  F000         	lfsr	0,__pbssBANK1
   309   0018AE  0EDC               	movlw	220
   310   0018B0                     clear_0:
   311   0018B0  6AEE               	clrf	postinc0,c
   312   0018B2  06E8               	decf	wreg,f,c
   313   0018B4  E1FD               	bnz	clear_0
   314                           
   315                           ; Clear objects allocated to BANK0 (12 bytes)
   316   0018B6  EE00  F0F0         	lfsr	0,__pbssBANK0
   317   0018BA  0E0C               	movlw	12
   318   0018BC                     clear_1:
   319   0018BC  6AEE               	clrf	postinc0,c
   320   0018BE  06E8               	decf	wreg,f,c
   321   0018C0  E1FD               	bnz	clear_1
   322                           
   323                           ; Clear objects allocated to COMRAM (4 bytes)
   324   0018C2  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   325   0018C4  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   326   0018C6  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   327   0018C8  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   328   0018CA                     end_of_initialization:
   329                           	callstack 0
   330   0018CA                     __end_of__initialization:
   331                           	callstack 0
   332   0018CA  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   333   0018CC  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   334   0018CE  0100               	movlb	0
   335   0018D0  EF26  F009         	goto	_main	;jump to C main() function
   336                           
   337                           	psect	bssCOMRAM
   338   00005B                     __pbssCOMRAM:
   339                           	callstack 0
   340   00005B                     _index:
   341                           	callstack 0
   342   00005B                     	ds	2
   343   00005D                     _seconds:
   344                           	callstack 0
   345   00005D                     	ds	2
   346                           
   347                           	psect	dataCOMRAM
   348   00004F                     __pdataCOMRAM:
   349                           	callstack 0
   350   00004F                     _Black_setup:
   351                           	callstack 0
   352   00004F                     	ds	12
   353                           
   354                           	psect	bssBANK0
   355   0000F0                     __pbssBANK0:
   356                           	callstack 0
   357   0000F0                     _RGB:
   358                           	callstack 0
   359   0000F0                     	ds	12
   360                           
   361                           	psect	dataBANK0
   362   000060                     __pdataBANK0:
   363                           	callstack 0
   364   000060                     _White_setup:
   365                           	callstack 0
   366   000060                     	ds	12
   367   00006C                     _Lightblue_rule:
   368                           	callstack 0
   369   00006C                     	ds	12
   370   000078                     _Orange_rule:
   371                           	callstack 0
   372   000078                     	ds	12
   373   000084                     _Pink_rule:
   374                           	callstack 0
   375   000084                     	ds	12
   376   000090                     _Yellow_rule:
   377                           	callstack 0
   378   000090                     	ds	12
   379   00009C                     _Blue_rule:
   380                           	callstack 0
   381   00009C                     	ds	12
   382   0000A8                     _Green_rule:
   383                           	callstack 0
   384   0000A8                     	ds	12
   385   0000B4                     _Red_rule:
   386                           	callstack 0
   387   0000B4                     	ds	12
   388   0000C0                     _wait_time:
   389                           	callstack 0
   390   0000C0                     	ds	2
   391   0000C2                     _wall_coef:
   392                           	callstack 0
   393   0000C2                     	ds	2
   394                           
   395                           	psect	bssBANK1
   396   000100                     __pbssBANK1:
   397                           	callstack 0
   398   000100                     _Color_rules:
   399                           	callstack 0
   400   000100                     	ds	108
   401   00016C                     _movement_list:
   402                           	callstack 0
   403   00016C                     	ds	100
   404   0001D0                     _Black_rule:
   405                           	callstack 0
   406   0001D0                     	ds	12
   407                           
   408                           	psect	dataBANK1
   409   0001DC                     __pdataBANK1:
   410                           	callstack 0
   411   0001DC                     _White_rule:
   412                           	callstack 0
   413   0001DC                     	ds	12
   414                           
   415                           	psect	cstackBANK0
   416   0000C4                     __pcstackBANK0:
   417                           	callstack 0
   418   0000C4                     _get_color_code$2454:
   419                           	callstack 0
   420                           
   421                           ; 12 bytes @ 0x0
   422   0000C4                     	ds	12
   423   0000D0                     _get_color_code$458:
   424                           	callstack 0
   425                           
   426                           ; 4 bytes @ 0xC
   427   0000D0                     	ds	4
   428   0000D4                     _get_color_code$459:
   429                           	callstack 0
   430                           
   431                           ; 4 bytes @ 0x10
   432   0000D4                     	ds	4
   433   0000D8                     _get_color_code$460:
   434                           	callstack 0
   435                           
   436                           ; 4 bytes @ 0x14
   437   0000D8                     	ds	4
   438   0000DC                     get_color_code@min_value:
   439                           	callstack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442   0000DC                     	ds	2
   443   0000DE                     get_color_code@min_index:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x1A
   447   0000DE                     	ds	2
   448   0000E0                     get_color_code@value:
   449                           	callstack 0
   450                           
   451                           ; 2 bytes @ 0x1C
   452   0000E0                     	ds	2
   453   0000E2                     get_color_code@i:
   454                           	callstack 0
   455                           
   456                           ; 2 bytes @ 0x1E
   457   0000E2                     	ds	2
   458   0000E4                     get_color_code@NormalizedRGB:
   459                           	callstack 0
   460                           
   461                           ; 12 bytes @ 0x20
   462   0000E4                     	ds	12
   463                           
   464                           	psect	cstackCOMRAM
   465   000001                     __pcstackCOMRAM:
   466                           	callstack 0
   467   000001                     ??_add_seconds_to_list:
   468   000001                     ??_I2C_2_Master_Idle:
   469   000001                     ?___wmul:
   470                           	callstack 0
   471   000001                     ?___lmul:
   472                           	callstack 0
   473   000001                     set_led_color@color:
   474                           	callstack 0
   475   000001                     initDCmotorsPWM@PWMperiod:
   476                           	callstack 0
   477   000001                     ___wmul@multiplier:
   478                           	callstack 0
   479   000001                     ___lmul@multiplier:
   480                           	callstack 0
   481                           
   482                           ; 4 bytes @ 0x0
   483   000001                     	ds	1
   484   000002                     ??_I2C_2_Master_Read:
   485   000002                     I2C_2_Master_Write@data_byte:
   486                           	callstack 0
   487                           
   488                           ; 1 bytes @ 0x1
   489   000002                     	ds	1
   490   000003                     color_writetoaddr@value:
   491                           	callstack 0
   492   000003                     I2C_2_Master_Read@ack:
   493                           	callstack 0
   494   000003                     ___wmul@multiplicand:
   495                           	callstack 0
   496                           
   497                           ; 2 bytes @ 0x2
   498   000003                     	ds	1
   499   000004                     color_writetoaddr@address:
   500                           	callstack 0
   501   000004                     I2C_2_Master_Read@tmp:
   502                           	callstack 0
   503                           
   504                           ; 1 bytes @ 0x3
   505   000004                     	ds	1
   506   000005                     ?_color_read_Red:
   507                           	callstack 0
   508   000005                     ?_color_read_Blue:
   509                           	callstack 0
   510   000005                     ?_color_read_Green:
   511                           	callstack 0
   512   000005                     ?_color_read_Clear:
   513                           	callstack 0
   514   000005                     ___wmul@product:
   515                           	callstack 0
   516   000005                     ___lmul@multiplicand:
   517                           	callstack 0
   518                           
   519                           ; 4 bytes @ 0x4
   520   000005                     	ds	2
   521   000007                     ??_color_read_Red:
   522   000007                     ??_color_read_Blue:
   523   000007                     ??_color_read_Green:
   524   000007                     ??_color_read_Clear:
   525   000007                     ?_get_color_distance:
   526                           	callstack 0
   527   000007                     ?___lwdiv:
   528                           	callstack 0
   529   000007                     ___lwdiv@dividend:
   530                           	callstack 0
   531   000007                     get_color_distance@color1:
   532                           	callstack 0
   533                           
   534                           ; 12 bytes @ 0x6
   535   000007                     	ds	2
   536   000009                     ___lwdiv@divisor:
   537                           	callstack 0
   538   000009                     ___lmul@product:
   539                           	callstack 0
   540                           
   541                           ; 4 bytes @ 0x8
   542   000009                     	ds	1
   543   00000A                     color_read_Red@tmp:
   544                           	callstack 0
   545   00000A                     color_read_Blue@tmp:
   546                           	callstack 0
   547   00000A                     color_read_Green@tmp:
   548                           	callstack 0
   549   00000A                     color_read_Clear@tmp:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0x9
   553   00000A                     	ds	1
   554   00000B                     ___lwdiv@quotient:
   555                           	callstack 0
   556                           
   557                           ; 2 bytes @ 0xA
   558   00000B                     	ds	1
   559   00000C                     ??_calibrate_white:
   560   00000C                     ?_get_wall_presence:
   561                           	callstack 0
   562                           
   563                           ; 2 bytes @ 0xB
   564   00000C                     	ds	1
   565   00000D                     ?___lldiv:
   566                           	callstack 0
   567   00000D                     ___lwdiv@counter:
   568                           	callstack 0
   569   00000D                     ___lldiv@dividend:
   570                           	callstack 0
   571                           
   572                           ; 4 bytes @ 0xC
   573   00000D                     	ds	1
   574   00000E                     ??_calibrate_black:
   575   00000E                     ??_get_wall_presence:
   576   00000E                     setMotorPWM@m:
   577                           	callstack 0
   578                           
   579                           ; 2 bytes @ 0xD
   580   00000E                     	ds	2
   581   000010                     ??_setMotorPWM:
   582   000010                     calibrate_black@clear1:
   583                           	callstack 0
   584   000010                     get_wall_presence@clear1:
   585                           	callstack 0
   586                           
   587                           ; 2 bytes @ 0xF
   588   000010                     	ds	1
   589   000011                     ___lldiv@divisor:
   590                           	callstack 0
   591                           
   592                           ; 4 bytes @ 0x10
   593   000011                     	ds	1
   594   000012                     setMotorPWM@posDuty:
   595                           	callstack 0
   596   000012                     calibrate_black@clear2:
   597                           	callstack 0
   598   000012                     get_wall_presence@clear2:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x11
   602   000012                     	ds	1
   603   000013                     setMotorPWM@negDuty:
   604                           	callstack 0
   605   000013                     get_color_distance@color2:
   606                           	callstack 0
   607                           
   608                           ; 12 bytes @ 0x12
   609   000013                     	ds	1
   610   000014                     stop@mL:
   611                           	callstack 0
   612   000014                     turnLeft@mL:
   613                           	callstack 0
   614   000014                     turnRight@mL:
   615                           	callstack 0
   616   000014                     turnLeftLong@mL:
   617                           	callstack 0
   618   000014                     turnRightLong@mL:
   619                           	callstack 0
   620   000014                     fullSpeedAhead@mL:
   621                           	callstack 0
   622   000014                     TimedfullSpeedAhead@mL:
   623                           	callstack 0
   624   000014                     moveBack@mL:
   625                           	callstack 0
   626   000014                     _calibrate_black$2455:
   627                           	callstack 0
   628                           
   629                           ; 2 bytes @ 0x13
   630   000014                     	ds	1
   631   000015                     ___lldiv@quotient:
   632                           	callstack 0
   633                           
   634                           ; 4 bytes @ 0x14
   635   000015                     	ds	1
   636   000016                     ??_color_click_init:
   637   000016                     stop@mR:
   638                           	callstack 0
   639   000016                     turnLeft@mR:
   640                           	callstack 0
   641   000016                     turnRight@mR:
   642                           	callstack 0
   643   000016                     turnLeftLong@mR:
   644                           	callstack 0
   645   000016                     turnRightLong@mR:
   646                           	callstack 0
   647   000016                     fullSpeedAhead@mR:
   648                           	callstack 0
   649   000016                     TimedfullSpeedAhead@mR:
   650                           	callstack 0
   651   000016                     moveBack@mR:
   652                           	callstack 0
   653                           
   654                           ; 2 bytes @ 0x15
   655   000016                     	ds	2
   656   000018                     ??_stop:
   657   000018                     ??_turnLeft:
   658   000018                     ??_turnRight:
   659   000018                     ??_turnLeftLong:
   660   000018                     ??_turnRightLong:
   661   000018                     TimedfullSpeedAhead@time:
   662                           	callstack 0
   663   000018                     moveBack@time:
   664                           	callstack 0
   665                           
   666                           ; 2 bytes @ 0x17
   667   000018                     	ds	1
   668   000019                     ___lldiv@counter:
   669                           	callstack 0
   670                           
   671                           ; 1 bytes @ 0x18
   672   000019                     	ds	1
   673   00001A                     turnLeft@k:
   674                           	callstack 0
   675   00001A                     turnRight@k:
   676                           	callstack 0
   677   00001A                     turnLeftLong@i:
   678                           	callstack 0
   679   00001A                     turnRightLong@i:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x19
   683   00001A                     	ds	2
   684   00001C                     turnLeft@i:
   685                           	callstack 0
   686   00001C                     turnRight@i:
   687                           	callstack 0
   688                           
   689                           ; 2 bytes @ 0x1B
   690   00001C                     	ds	2
   691   00001E                     return_back@motorL:
   692                           	callstack 0
   693                           
   694                           ; 2 bytes @ 0x1D
   695   00001E                     	ds	1
   696   00001F                     ??_get_color_distance:
   697                           
   698                           ; 1 bytes @ 0x1E
   699   00001F                     	ds	1
   700   000020                     return_back@motorR:
   701                           	callstack 0
   702                           
   703                           ; 2 bytes @ 0x1F
   704   000020                     	ds	2
   705   000022                     
   706                           ; 1 bytes @ 0x21
   707   000022                     	ds	1
   708   000023                     _get_color_distance$417:
   709                           	callstack 0
   710                           
   711                           ; 4 bytes @ 0x22
   712   000023                     	ds	1
   713   000024                     RobotMovement@color:
   714                           	callstack 0
   715                           
   716                           ; 2 bytes @ 0x23
   717   000024                     	ds	2
   718   000026                     RobotMovement@motorL:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x25
   722   000026                     	ds	1
   723   000027                     _get_color_distance$419:
   724                           	callstack 0
   725                           
   726                           ; 4 bytes @ 0x26
   727   000027                     	ds	1
   728   000028                     RobotMovement@motorR:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x27
   732   000028                     	ds	2
   733   00002A                     
   734                           ; 1 bytes @ 0x29
   735   00002A                     	ds	1
   736   00002B                     _get_color_distance$421:
   737                           	callstack 0
   738                           
   739                           ; 4 bytes @ 0x2A
   740   00002B                     	ds	1
   741   00002C                     RobotMovement@i:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x2B
   745   00002C                     	ds	2
   746   00002E                     RobotMovement@i_1285:
   747                           	callstack 0
   748                           
   749                           ; 2 bytes @ 0x2D
   750   00002E                     	ds	1
   751   00002F                     get_color_distance@R_offset:
   752                           	callstack 0
   753                           
   754                           ; 2 bytes @ 0x2E
   755   00002F                     	ds	2
   756   000031                     get_color_distance@G_offset:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x30
   760   000031                     	ds	2
   761   000033                     get_color_distance@B_offset:
   762                           	callstack 0
   763                           
   764                           ; 2 bytes @ 0x32
   765   000033                     	ds	2
   766   000035                     ?_get_color_code:
   767                           	callstack 0
   768                           
   769                           ; 2 bytes @ 0x34
   770   000035                     	ds	2
   771   000037                     ??_get_color_code:
   772                           
   773                           ; 1 bytes @ 0x36
   774   000037                     	ds	2
   775   000039                     ??_main:
   776                           
   777                           ; 1 bytes @ 0x38
   778   000039                     	ds	2
   779   00003B                     main@color_code:
   780                           	callstack 0
   781                           
   782                           ; 2 bytes @ 0x3A
   783   00003B                     	ds	2
   784   00003D                     main@motorL:
   785                           	callstack 0
   786                           
   787                           ; 9 bytes @ 0x3C
   788   00003D                     	ds	9
   789   000046                     main@motorR:
   790                           	callstack 0
   791                           
   792                           ; 9 bytes @ 0x45
   793   000046                     	ds	9
   794                           
   795 ;;
   796 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   797 ;;
   798 ;; *************** function _main *****************
   799 ;; Defined at:
   800 ;;		line 17 in file "main.c"
   801 ;; Parameters:    Size  Location     Type
   802 ;;		None
   803 ;; Auto vars:     Size  Location     Type
   804 ;;  color_code      2   58[COMRAM] unsigned int 
   805 ;;  motorR          9   69[COMRAM] struct DC_motor
   806 ;;  motorL          9   60[COMRAM] struct DC_motor
   807 ;;  PWMcycle        2    0        unsigned int 
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   818 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   820 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   821 ;;Total ram usage:       22 bytes
   822 ;; Hardware stack levels required when called: 7
   823 ;; This function calls:
   824 ;;		_Interrupts_init
   825 ;;		_RobotMovement
   826 ;;		_Timer0_init
   827 ;;		_add_seconds_to_list
   828 ;;		_color_click_init
   829 ;;		_fullSpeedAhead
   830 ;;		_get_color_code
   831 ;;		_get_wall_presence
   832 ;;		_initDCmotorsPWM
   833 ;;		_moveBack
   834 ;;		_stop
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841   00124C                     __ptext0:
   842                           	callstack 0
   843   00124C                     _main:
   844                           	callstack 24
   845   00124C                     
   846                           ;main.c: 18:     Timer0_init();
   847   00124C  EC24  F00F         	call	_Timer0_init	;wreg free
   848   001250                     
   849                           ;main.c: 19:     Interrupts_init();
   850   001250  EC46  F00F         	call	_Interrupts_init	;wreg free
   851   001254                     
   852                           ;main.c: 20:     initDCmotorsPWM(99);
   853   001254  0E00               	movlw	0
   854   001256  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   855   001258  0E63               	movlw	99
   856   00125A  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   857   00125C  ECDD  F00B         	call	_initDCmotorsPWM	;wreg free
   858   001260                     
   859                           ;main.c: 22:     color_click_init();
   860   001260  ECEE  F007         	call	_color_click_init	;wreg free
   861   001264                     
   862                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   863   001264  010E               	movlb	14	; () banked
   864   001266  95B4               	bcf	180,2,b	;volatile
   865   001268                     
   866                           ; BSR set to: 14
   867                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   868   001268  8486               	bsf	134,2,c	;volatile
   869   00126A                     
   870                           ; BSR set to: 14
   871                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   872   00126A  0E00               	movlw	0
   873   00126C  6E3D               	movwf	main@motorL^0,c
   874   00126E                     
   875                           ; BSR set to: 14
   876                           ;main.c: 29:     motorL.direction=1;
   877   00126E  0E01               	movlw	1
   878   001270  6E3E               	movwf	(main@motorL+1)^0,c
   879   001272                     
   880                           ; BSR set to: 14
   881                           ;main.c: 30:     motorL.brakemode=1;
   882   001272  0E01               	movlw	1
   883   001274  6E3F               	movwf	(main@motorL+2)^0,c
   884   001276                     
   885                           ; BSR set to: 14
   886                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   887   001276  0EAA               	movlw	170
   888   001278  6E42               	movwf	(main@motorL+5)^0,c
   889   00127A  0E0F               	movlw	15
   890   00127C  6E43               	movwf	(main@motorL+6)^0,c
   891   00127E                     
   892                           ; BSR set to: 14
   893                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   894   00127E  0EA6               	movlw	166
   895   001280  6E44               	movwf	(main@motorL+7)^0,c
   896   001282  0E0F               	movlw	15
   897   001284  6E45               	movwf	(main@motorL+8)^0,c
   898   001286                     
   899                           ; BSR set to: 14
   900                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   901   001286  0E00               	movlw	0
   902   001288  6E41               	movwf	(main@motorL+4)^0,c
   903   00128A  0E63               	movlw	99
   904   00128C  6E40               	movwf	(main@motorL+3)^0,c
   905   00128E                     
   906                           ; BSR set to: 14
   907                           ;main.c: 35:     motorR.power=0;
   908   00128E  0E00               	movlw	0
   909   001290  6E46               	movwf	main@motorR^0,c
   910   001292                     
   911                           ; BSR set to: 14
   912                           ;main.c: 36:     motorR.direction=1;
   913   001292  0E01               	movlw	1
   914   001294  6E47               	movwf	(main@motorR+1)^0,c
   915   001296                     
   916                           ; BSR set to: 14
   917                           ;main.c: 37:     motorR.brakemode=1;
   918   001296  0E01               	movlw	1
   919   001298  6E48               	movwf	(main@motorR+2)^0,c
   920   00129A                     
   921                           ; BSR set to: 14
   922                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   923   00129A  0E25               	movlw	37
   924   00129C  6E4B               	movwf	(main@motorR+5)^0,c
   925   00129E  0E0F               	movlw	15
   926   0012A0  6E4C               	movwf	(main@motorR+6)^0,c
   927   0012A2                     
   928                           ; BSR set to: 14
   929                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   930   0012A2  0E21               	movlw	33
   931   0012A4  6E4D               	movwf	(main@motorR+7)^0,c
   932   0012A6  0E0F               	movlw	15
   933   0012A8  6E4E               	movwf	(main@motorR+8)^0,c
   934   0012AA                     
   935                           ; BSR set to: 14
   936                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
   937   0012AA  0E00               	movlw	0
   938   0012AC  6E4A               	movwf	(main@motorR+4)^0,c
   939   0012AE  0E63               	movlw	99
   940   0012B0  6E49               	movwf	(main@motorR+3)^0,c
   941   0012B2                     
   942                           ; BSR set to: 14
   943                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
   944   0012B2  0E52               	movlw	82
   945   0012B4  6E3A               	movwf	(??_main+1)^0,c
   946   0012B6  0E2B               	movlw	43
   947   0012B8  6E39               	movwf	??_main^0,c
   948   0012BA  0E00               	movlw	0
   949   0012BC                     u2427:
   950   0012BC  2EE8               	decfsz	wreg,f,c
   951   0012BE  D7FE               	bra	u2427
   952   0012C0  2E39               	decfsz	??_main^0,f,c
   953   0012C2  D7FC               	bra	u2427
   954   0012C4  2E3A               	decfsz	(??_main+1)^0,f,c
   955   0012C6  D7FA               	bra	u2427
   956   0012C8  D000               	nop2	
   957   0012CA                     l3024:
   958                           
   959                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
   960   0012CA  0E3D               	movlw	low main@motorL
   961   0012CC  6E14               	movwf	fullSpeedAhead@mL^0,c
   962   0012CE  0E00               	movlw	high main@motorL
   963   0012D0  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   964   0012D2  0E46               	movlw	low main@motorR
   965   0012D4  6E16               	movwf	fullSpeedAhead@mR^0,c
   966   0012D6  0E00               	movlw	high main@motorR
   967   0012D8  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   968   0012DA  EC7F  F00D         	call	_fullSpeedAhead	;wreg free
   969   0012DE                     l3026:
   970                           
   971                           ;main.c: 45:         if(get_wall_presence() == 1){
   972   0012DE  EC8F  F00B         	call	_get_wall_presence	;wreg free
   973   0012E2  040C               	decf	?_get_wall_presence^0,w,c
   974   0012E4  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
   975   0012E6  A4D8               	btfss	status,2,c
   976   0012E8  EF78  F009         	goto	u2051
   977   0012EC  EF7A  F009         	goto	u2050
   978   0012F0                     u2051:
   979   0012F0  EF6F  F009         	goto	l3026
   980   0012F4                     u2050:
   981   0012F4                     
   982                           ;main.c: 46:             add_seconds_to_list();
   983   0012F4  EC71  F00E         	call	_add_seconds_to_list	;wreg free
   984   0012F8                     
   985                           ;main.c: 47:             stop(&motorL,&motorR);
   986   0012F8  0E3D               	movlw	low main@motorL
   987   0012FA  6E14               	movwf	stop@mL^0,c
   988   0012FC  0E00               	movlw	high main@motorL
   989   0012FE  6E15               	movwf	(stop@mL+1)^0,c
   990   001300  0E46               	movlw	low main@motorR
   991   001302  6E16               	movwf	stop@mR^0,c
   992   001304  0E00               	movlw	high main@motorR
   993   001306  6E17               	movwf	(stop@mR+1)^0,c
   994   001308  EC4C  F00E         	call	_stop	;wreg free
   995   00130C                     
   996                           ;main.c: 48:             unsigned int color_code = get_color_code();
   997   00130C  EC91  F002         	call	_get_color_code	;wreg free
   998   001310  C035  F03B         	movff	?_get_color_code,main@color_code
   999   001314  C036  F03C         	movff	?_get_color_code+1,main@color_code+1
  1000   001318                     
  1001                           ;main.c: 49:             moveBack(&motorL, &motorR, 11);
  1002   001318  0E3D               	movlw	low main@motorL
  1003   00131A  6E14               	movwf	moveBack@mL^0,c
  1004   00131C  0E00               	movlw	high main@motorL
  1005   00131E  6E15               	movwf	(moveBack@mL+1)^0,c
  1006   001320  0E46               	movlw	low main@motorR
  1007   001322  6E16               	movwf	moveBack@mR^0,c
  1008   001324  0E00               	movlw	high main@motorR
  1009   001326  6E17               	movwf	(moveBack@mR+1)^0,c
  1010   001328  0E00               	movlw	0
  1011   00132A  6E19               	movwf	(moveBack@time+1)^0,c
  1012   00132C  0E0B               	movlw	11
  1013   00132E  6E18               	movwf	moveBack@time^0,c
  1014   001330  ECA4  F00C         	call	_moveBack	;wreg free
  1015   001334                     
  1016                           ;main.c: 50:             stop(&motorL,&motorR);
  1017   001334  0E3D               	movlw	low main@motorL
  1018   001336  6E14               	movwf	stop@mL^0,c
  1019   001338  0E00               	movlw	high main@motorL
  1020   00133A  6E15               	movwf	(stop@mL+1)^0,c
  1021   00133C  0E46               	movlw	low main@motorR
  1022   00133E  6E16               	movwf	stop@mR^0,c
  1023   001340  0E00               	movlw	high main@motorR
  1024   001342  6E17               	movwf	(stop@mR+1)^0,c
  1025   001344  EC4C  F00E         	call	_stop	;wreg free
  1026   001348                     
  1027                           ;main.c: 51:             RobotMovement(color_code, &motorL, &motorR);
  1028   001348  C03B  F024         	movff	main@color_code,RobotMovement@color
  1029   00134C  C03C  F025         	movff	main@color_code+1,RobotMovement@color+1
  1030   001350  0E3D               	movlw	low main@motorL
  1031   001352  6E26               	movwf	RobotMovement@motorL^0,c
  1032   001354  0E00               	movlw	high main@motorL
  1033   001356  6E27               	movwf	(RobotMovement@motorL+1)^0,c
  1034   001358  0E46               	movlw	low main@motorR
  1035   00135A  6E28               	movwf	RobotMovement@motorR^0,c
  1036   00135C  0E00               	movlw	high main@motorR
  1037   00135E  6E29               	movwf	(RobotMovement@motorR+1)^0,c
  1038   001360  EC19  F000         	call	_RobotMovement	;wreg free
  1039   001364                     
  1040                           ;main.c: 52:             stop(&motorL,&motorR);
  1041   001364  0E3D               	movlw	low main@motorL
  1042   001366  6E14               	movwf	stop@mL^0,c
  1043   001368  0E00               	movlw	high main@motorL
  1044   00136A  6E15               	movwf	(stop@mL+1)^0,c
  1045   00136C  0E46               	movlw	low main@motorR
  1046   00136E  6E16               	movwf	stop@mR^0,c
  1047   001370  0E00               	movlw	high main@motorR
  1048   001372  6E17               	movwf	(stop@mR+1)^0,c
  1049   001374  EC4C  F00E         	call	_stop	;wreg free
  1050   001378  EF65  F009         	goto	l3024
  1051   00137C  EF17  F000         	goto	start
  1052   001380                     __end_of_main:
  1053                           	callstack 0
  1054                           
  1055 ;; *************** function _initDCmotorsPWM *****************
  1056 ;; Defined at:
  1057 ;;		line 9 in file "dc_motor.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;  PWMperiod       2    0[COMRAM] int 
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;		None
  1062 ;; Return value:  Size  Location     Type
  1063 ;;                  1    wreg      void 
  1064 ;; Registers used:
  1065 ;;		wreg, status,2
  1066 ;; Tracked objects:
  1067 ;;		On entry : 0/0
  1068 ;;		On exit  : 0/0
  1069 ;;		Unchanged: 0/0
  1070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1071 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1074 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1075 ;;Total ram usage:        2 bytes
  1076 ;; Hardware stack levels used: 1
  1077 ;; Hardware stack levels required when called: 2
  1078 ;; This function calls:
  1079 ;;		Nothing
  1080 ;; This function is called by:
  1081 ;;		_main
  1082 ;; This function uses a non-reentrant model
  1083 ;;
  1084                           
  1085                           	psect	text1
  1086   0017BA                     __ptext1:
  1087                           	callstack 0
  1088   0017BA                     _initDCmotorsPWM:
  1089                           	callstack 28
  1090   0017BA                     
  1091                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1092   0017BA  9485               	bcf	133,2,c	;volatile
  1093                           
  1094                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1095   0017BC  9E83               	bcf	131,7,c	;volatile
  1096                           
  1097                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1098   0017BE  9C87               	bcf	135,6,c	;volatile
  1099                           
  1100                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1101   0017C0  9885               	bcf	133,4,c	;volatile
  1102                           
  1103                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1104   0017C2  947D               	bcf	125,2,c	;volatile
  1105                           
  1106                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1107   0017C4  9E7B               	bcf	123,7,c	;volatile
  1108                           
  1109                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1110   0017C6  9C7F               	bcf	127,6,c	;volatile
  1111                           
  1112                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1113   0017C8  987D               	bcf	125,4,c	;volatile
  1114   0017CA                     
  1115                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1116   0017CA  0E05               	movlw	5
  1117   0017CC  010E               	movlb	14	; () banked
  1118   0017CE  6F74               	movwf	116,b	;volatile
  1119                           
  1120                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1121   0017D0  0E06               	movlw	6
  1122   0017D2  6F76               	movwf	118,b	;volatile
  1123                           
  1124                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1125   0017D4  0E07               	movlw	7
  1126   0017D6  6F69               	movwf	105,b	;volatile
  1127                           
  1128                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1129   0017D8  0E08               	movlw	8
  1130   0017DA  6F88               	movwf	136,b	;volatile
  1131                           
  1132                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1133   0017DC  50BD               	movf	189,w,c	;volatile
  1134   0017DE  0B8F               	andlw	-113
  1135   0017E0  0940               	iorlw	64
  1136   0017E2  6EBD               	movwf	189,c	;volatile
  1137                           
  1138                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1139   0017E4  0EE0               	movlw	-32
  1140   0017E6  16BE               	andwf	190,f,c	;volatile
  1141                           
  1142                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1143   0017E8  50BF               	movf	191,w,c	;volatile
  1144   0017EA  0BF0               	andlw	-16
  1145   0017EC  0901               	iorlw	1
  1146   0017EE  6EBF               	movwf	191,c	;volatile
  1147                           
  1148                           ;dc_motor.c: 34:     T2PR=99;
  1149   0017F0  0E63               	movlw	99
  1150   0017F2  6EBC               	movwf	188,c	;volatile
  1151   0017F4                     
  1152                           ; BSR set to: 14
  1153                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1154   0017F4  8EBD               	bsf	189,7,c	;volatile
  1155                           
  1156                           ;dc_motor.c: 39:     CCPR1H=0;
  1157   0017F6  0E00               	movlw	0
  1158   0017F8  6EAA               	movwf	170,c	;volatile
  1159                           
  1160                           ;dc_motor.c: 40:     CCPR2H=0;
  1161   0017FA  0E00               	movlw	0
  1162   0017FC  6EA6               	movwf	166,c	;volatile
  1163                           
  1164                           ;dc_motor.c: 41:     CCPR3H=0;
  1165   0017FE  0E00               	movlw	0
  1166   001800  010F               	movlb	15	; () banked
  1167   001802  6F25               	movwf	37,b	;volatile
  1168                           
  1169                           ;dc_motor.c: 42:     CCPR4H=0;
  1170   001804  0E00               	movlw	0
  1171   001806  6F21               	movwf	33,b	;volatile
  1172                           
  1173                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1174   001808  0EFC               	movlw	-4
  1175   00180A  16AD               	andwf	173,f,c	;volatile
  1176                           
  1177                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1178   00180C  0EF3               	movlw	-13
  1179   00180E  16AD               	andwf	173,f,c	;volatile
  1180                           
  1181                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1182   001810  0ECF               	movlw	-49
  1183   001812  16AD               	andwf	173,f,c	;volatile
  1184                           
  1185                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1186   001814  0E3F               	movlw	-193
  1187   001816  16AD               	andwf	173,f,c	;volatile
  1188   001818                     
  1189                           ; BSR set to: 15
  1190                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1191   001818  88AB               	bsf	171,4,c	;volatile
  1192                           
  1193                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1194   00181A  50AB               	movf	171,w,c	;volatile
  1195   00181C  0BF0               	andlw	-16
  1196   00181E  090C               	iorlw	12
  1197   001820  6EAB               	movwf	171,c	;volatile
  1198   001822                     
  1199                           ; BSR set to: 15
  1200                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1201   001822  8EAB               	bsf	171,7,c	;volatile
  1202   001824                     
  1203                           ; BSR set to: 15
  1204                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1205   001824  88A7               	bsf	167,4,c	;volatile
  1206                           
  1207                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1208   001826  50A7               	movf	167,w,c	;volatile
  1209   001828  0BF0               	andlw	-16
  1210   00182A  090C               	iorlw	12
  1211   00182C  6EA7               	movwf	167,c	;volatile
  1212   00182E                     
  1213                           ; BSR set to: 15
  1214                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1215   00182E  8EA7               	bsf	167,7,c	;volatile
  1216   001830                     
  1217                           ; BSR set to: 15
  1218                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1219   001830  8926               	bsf	38,4,b	;volatile
  1220                           
  1221                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1222   001832  5126               	movf	38,w,b	;volatile
  1223   001834  0BF0               	andlw	-16
  1224   001836  090C               	iorlw	12
  1225   001838  6F26               	movwf	38,b	;volatile
  1226   00183A                     
  1227                           ; BSR set to: 15
  1228                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1229   00183A  8F26               	bsf	38,7,b	;volatile
  1230   00183C                     
  1231                           ; BSR set to: 15
  1232                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1233   00183C  8922               	bsf	34,4,b	;volatile
  1234                           
  1235                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1236   00183E  5122               	movf	34,w,b	;volatile
  1237   001840  0BF0               	andlw	-16
  1238   001842  090C               	iorlw	12
  1239   001844  6F22               	movwf	34,b	;volatile
  1240   001846                     
  1241                           ; BSR set to: 15
  1242                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1243   001846  8F22               	bsf	34,7,b	;volatile
  1244   001848                     
  1245                           ; BSR set to: 15
  1246   001848  0012               	return		;funcret
  1247   00184A                     __end_of_initDCmotorsPWM:
  1248                           	callstack 0
  1249                           
  1250 ;; *************** function _get_wall_presence *****************
  1251 ;; Defined at:
  1252 ;;		line 242 in file "color.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;		None
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;  clear2          2   17[COMRAM] unsigned int 
  1257 ;;  clear1          2   15[COMRAM] unsigned int 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2   11[COMRAM] unsigned int 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1267 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1268 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1269 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1270 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1271 ;;Total ram usage:        8 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 5
  1274 ;; This function calls:
  1275 ;;		___wmul
  1276 ;;		_color_read_Clear
  1277 ;;		_set_led_color
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text2
  1284   00171E                     __ptext2:
  1285                           	callstack 0
  1286   00171E                     _get_wall_presence:
  1287                           	callstack 25
  1288   00171E                     
  1289                           ;color.c: 243:     set_led_color(0b000);
  1290   00171E  0E00               	movlw	0
  1291   001720  6E02               	movwf	(set_led_color@color+1)^0,c
  1292   001722  0E00               	movlw	0
  1293   001724  6E01               	movwf	set_led_color@color^0,c
  1294   001726  EC95  F00E         	call	_set_led_color	;wreg free
  1295   00172A                     
  1296                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1297   00172A  0E12               	movlw	18
  1298   00172C  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1299   00172E  0EDC               	movlw	220
  1300   001730  6E0E               	movwf	??_get_wall_presence^0,c
  1301   001732  0E60               	movlw	96
  1302   001734                     u2437:
  1303   001734  2EE8               	decfsz	wreg,f,c
  1304   001736  D7FE               	bra	u2437
  1305   001738  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1306   00173A  D7FC               	bra	u2437
  1307   00173C  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1308   00173E  D7FA               	bra	u2437
  1309   001740                     
  1310                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1311   001740  ECFC  F00D         	call	_color_read_Clear	;wreg free
  1312   001744  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1313   001748  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1314   00174C                     
  1315                           ;color.c: 246:     set_led_color(0b111);
  1316   00174C  0E00               	movlw	0
  1317   00174E  6E02               	movwf	(set_led_color@color+1)^0,c
  1318   001750  0E07               	movlw	7
  1319   001752  6E01               	movwf	set_led_color@color^0,c
  1320   001754  EC95  F00E         	call	_set_led_color	;wreg free
  1321   001758                     
  1322                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1323   001758  0E12               	movlw	18
  1324   00175A  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1325   00175C  0EDC               	movlw	220
  1326   00175E  6E0E               	movwf	??_get_wall_presence^0,c
  1327   001760  0E60               	movlw	96
  1328   001762                     u2447:
  1329   001762  2EE8               	decfsz	wreg,f,c
  1330   001764  D7FE               	bra	u2447
  1331   001766  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1332   001768  D7FC               	bra	u2447
  1333   00176A  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1334   00176C  D7FA               	bra	u2447
  1335                           
  1336                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1337   00176E  ECFC  F00D         	call	_color_read_Clear	;wreg free
  1338   001772  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1339   001776  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1340   00177A                     
  1341                           ;color.c: 249:     set_led_color(0b000);
  1342   00177A  0E00               	movlw	0
  1343   00177C  6E02               	movwf	(set_led_color@color+1)^0,c
  1344   00177E  0E00               	movlw	0
  1345   001780  6E01               	movwf	set_led_color@color^0,c
  1346   001782  EC95  F00E         	call	_set_led_color	;wreg free
  1347   001786                     
  1348                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1349   001786  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1350   00178A  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1351   00178E  C0C2  F003         	movff	_wall_coef,___wmul@multiplicand
  1352   001792  C0C3  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1353   001796  EC01  F00F         	call	___wmul	;wreg free
  1354   00179A  5001               	movf	?___wmul^0,w,c
  1355   00179C  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1356   00179E  5002               	movf	(?___wmul+1)^0,w,c
  1357   0017A0  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1358   0017A2  B0D8               	btfsc	status,0,c
  1359   0017A4  EFD6  F00B         	goto	u1841
  1360   0017A8  EFD9  F00B         	goto	u1840
  1361   0017AC                     u1841:
  1362   0017AC  0E01               	movlw	1
  1363   0017AE  EFDA  F00B         	goto	u1850
  1364   0017B2                     u1840:
  1365   0017B2  0E00               	movlw	0
  1366   0017B4                     u1850:
  1367   0017B4  6E0C               	movwf	?_get_wall_presence^0,c
  1368   0017B6  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1369   0017B8  0012               	return		;funcret
  1370   0017BA                     __end_of_get_wall_presence:
  1371                           	callstack 0
  1372                           
  1373 ;; *************** function _get_color_code *****************
  1374 ;; Defined at:
  1375 ;;		line 176 in file "color.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  value           2   28[BANK0 ] unsigned int 
  1380 ;;  i               2   30[BANK0 ] unsigned int 
  1381 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1382 ;;  min_index       2   26[BANK0 ] unsigned int 
  1383 ;;  min_value       2   24[BANK0 ] unsigned int 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  2   52[COMRAM] unsigned int 
  1386 ;; Registers used:
  1387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1393 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1394 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1395 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1396 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1397 ;;Total ram usage:       48 bytes
  1398 ;; Hardware stack levels used: 1
  1399 ;; Hardware stack levels required when called: 5
  1400 ;; This function calls:
  1401 ;;		___lldiv
  1402 ;;		___lmul
  1403 ;;		___wmul
  1404 ;;		_color_read_Blue
  1405 ;;		_color_read_Green
  1406 ;;		_color_read_Red
  1407 ;;		_get_color_distance
  1408 ;;		_set_led_color
  1409 ;; This function is called by:
  1410 ;;		_main
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           	psect	text3
  1415   000522                     __ptext3:
  1416                           	callstack 0
  1417   000522                     _get_color_code:
  1418                           	callstack 25
  1419   000522                     
  1420                           ;color.c: 179:     set_led_color(0b100);
  1421   000522  0E00               	movlw	0
  1422   000524  6E02               	movwf	(set_led_color@color+1)^0,c
  1423   000526  0E04               	movlw	4
  1424   000528  6E01               	movwf	set_led_color@color^0,c
  1425   00052A  EC95  F00E         	call	_set_led_color	;wreg free
  1426   00052E                     
  1427                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1428   00052E  0E12               	movlw	18
  1429   000530  6E38               	movwf	(??_get_color_code+1)^0,c
  1430   000532  0EDC               	movlw	220
  1431   000534  6E37               	movwf	??_get_color_code^0,c
  1432   000536  0E60               	movlw	96
  1433   000538                     u2457:
  1434   000538  2EE8               	decfsz	wreg,f,c
  1435   00053A  D7FE               	bra	u2457
  1436   00053C  2E37               	decfsz	??_get_color_code^0,f,c
  1437   00053E  D7FC               	bra	u2457
  1438   000540  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1439   000542  D7FA               	bra	u2457
  1440   000544                     
  1441                           ;color.c: 181:     RGB.R = color_read_Red();
  1442   000544  ECAC  F00D         	call	_color_read_Red	;wreg free
  1443   000548  C005  F0F0         	movff	?_color_read_Red,_RGB
  1444   00054C  C006  F0F1         	movff	?_color_read_Red+1,_RGB+1
  1445   000550  0100               	movlb	0	; () banked
  1446   000552  6BF2               	clrf	(_RGB+2)& (0+255),b
  1447   000554  6BF3               	clrf	(_RGB+3)& (0+255),b
  1448   000556                     
  1449                           ; BSR set to: 0
  1450                           ;color.c: 182:     set_led_color(0b010);
  1451   000556  0E00               	movlw	0
  1452   000558  6E02               	movwf	(set_led_color@color+1)^0,c
  1453   00055A  0E02               	movlw	2
  1454   00055C  6E01               	movwf	set_led_color@color^0,c
  1455   00055E  EC95  F00E         	call	_set_led_color	;wreg free
  1456   000562                     
  1457                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1458   000562  0E12               	movlw	18
  1459   000564  6E38               	movwf	(??_get_color_code+1)^0,c
  1460   000566  0EDC               	movlw	220
  1461   000568  6E37               	movwf	??_get_color_code^0,c
  1462   00056A  0E60               	movlw	96
  1463   00056C                     u2467:
  1464   00056C  2EE8               	decfsz	wreg,f,c
  1465   00056E  D7FE               	bra	u2467
  1466   000570  2E37               	decfsz	??_get_color_code^0,f,c
  1467   000572  D7FC               	bra	u2467
  1468   000574  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1469   000576  D7FA               	bra	u2467
  1470                           
  1471                           ;color.c: 184:     RGB.G = color_read_Green();
  1472   000578  ECD4  F00D         	call	_color_read_Green	;wreg free
  1473   00057C  C005  F0F4         	movff	?_color_read_Green,_RGB+4
  1474   000580  C006  F0F5         	movff	?_color_read_Green+1,_RGB+5
  1475   000584  0100               	movlb	0	; () banked
  1476   000586  6BF6               	clrf	(_RGB+6)& (0+255),b
  1477   000588  6BF7               	clrf	(_RGB+7)& (0+255),b
  1478   00058A                     
  1479                           ; BSR set to: 0
  1480                           ;color.c: 185:     set_led_color(0b001);
  1481   00058A  0E00               	movlw	0
  1482   00058C  6E02               	movwf	(set_led_color@color+1)^0,c
  1483   00058E  0E01               	movlw	1
  1484   000590  6E01               	movwf	set_led_color@color^0,c
  1485   000592  EC95  F00E         	call	_set_led_color	;wreg free
  1486   000596                     
  1487                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1488   000596  0E12               	movlw	18
  1489   000598  6E38               	movwf	(??_get_color_code+1)^0,c
  1490   00059A  0EDC               	movlw	220
  1491   00059C  6E37               	movwf	??_get_color_code^0,c
  1492   00059E  0E60               	movlw	96
  1493   0005A0                     u2477:
  1494   0005A0  2EE8               	decfsz	wreg,f,c
  1495   0005A2  D7FE               	bra	u2477
  1496   0005A4  2E37               	decfsz	??_get_color_code^0,f,c
  1497   0005A6  D7FC               	bra	u2477
  1498   0005A8  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1499   0005AA  D7FA               	bra	u2477
  1500   0005AC                     
  1501                           ;color.c: 187:     RGB.B = color_read_Blue();
  1502   0005AC  EC24  F00E         	call	_color_read_Blue	;wreg free
  1503   0005B0  C005  F0F8         	movff	?_color_read_Blue,_RGB+8
  1504   0005B4  C006  F0F9         	movff	?_color_read_Blue+1,_RGB+9
  1505   0005B8  0100               	movlb	0	; () banked
  1506   0005BA  6BFA               	clrf	(_RGB+10)& (0+255),b
  1507   0005BC  6BFB               	clrf	(_RGB+11)& (0+255),b
  1508   0005BE                     
  1509                           ; BSR set to: 0
  1510                           ;color.c: 188:     set_led_color(0b000);
  1511   0005BE  0E00               	movlw	0
  1512   0005C0  6E02               	movwf	(set_led_color@color+1)^0,c
  1513   0005C2  0E00               	movlw	0
  1514   0005C4  6E01               	movwf	set_led_color@color^0,c
  1515   0005C6  EC95  F00E         	call	_set_led_color	;wreg free
  1516   0005CA                     
  1517                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1518   0005CA  504F               	movf	_Black_setup^0,w,c
  1519   0005CC  0100               	movlb	0	; () banked
  1520   0005CE  5DF0               	subwf	_RGB& (0+255),w,b
  1521   0005D0  5050               	movf	(_Black_setup+1)^0,w,c
  1522   0005D2  59F1               	subwfb	(_RGB+1)& (0+255),w,b
  1523   0005D4  5051               	movf	(_Black_setup+2)^0,w,c
  1524   0005D6  59F2               	subwfb	(_RGB+2)& (0+255),w,b
  1525   0005D8  5052               	movf	(_Black_setup+3)^0,w,c
  1526   0005DA  59F3               	subwfb	(_RGB+3)& (0+255),w,b
  1527   0005DC  B0D8               	btfsc	status,0,c
  1528   0005DE  EFF3  F002         	goto	u1741
  1529   0005E2  EFF5  F002         	goto	u1740
  1530   0005E6                     u1741:
  1531   0005E6  EFFF  F002         	goto	l2756
  1532   0005EA                     u1740:
  1533   0005EA                     
  1534                           ; BSR set to: 0
  1535   0005EA  0E00               	movlw	0
  1536   0005EC  6FD0               	movwf	_get_color_code$458& (0+255),b
  1537   0005EE  0E00               	movlw	0
  1538   0005F0  6FD1               	movwf	(_get_color_code$458+1)& (0+255),b
  1539   0005F2  0E00               	movlw	0
  1540   0005F4  6FD2               	movwf	(_get_color_code$458+2)& (0+255),b
  1541   0005F6  0E00               	movlw	0
  1542   0005F8  6FD3               	movwf	(_get_color_code$458+3)& (0+255),b
  1543   0005FA  EF34  F003         	goto	l2758
  1544   0005FE                     l2756:
  1545                           
  1546                           ; BSR set to: 0
  1547   0005FE  504F               	movf	_Black_setup^0,w,c
  1548   000600  5DF0               	subwf	_RGB& (0+255),w,b
  1549   000602  6E01               	movwf	___lmul@multiplier^0,c
  1550   000604  5050               	movf	(_Black_setup+1)^0,w,c
  1551   000606  59F1               	subwfb	(_RGB+1)& (0+255),w,b
  1552   000608  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1553   00060A  5051               	movf	(_Black_setup+2)^0,w,c
  1554   00060C  59F2               	subwfb	(_RGB+2)& (0+255),w,b
  1555   00060E  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1556   000610  5052               	movf	(_Black_setup+3)^0,w,c
  1557   000612  59F3               	subwfb	(_RGB+3)& (0+255),w,b
  1558   000614  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1559   000616  0E64               	movlw	100
  1560   000618  6E05               	movwf	___lmul@multiplicand^0,c
  1561   00061A  0E00               	movlw	0
  1562   00061C  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1563   00061E  0E00               	movlw	0
  1564   000620  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1565   000622  0E00               	movlw	0
  1566   000624  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1567   000626  EC18  F00D         	call	___lmul	;wreg free
  1568   00062A  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1569   00062E  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1570   000632  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1571   000636  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1572   00063A  504F               	movf	_Black_setup^0,w,c
  1573   00063C  0100               	movlb	0	; () banked
  1574   00063E  5D60               	subwf	_White_setup& (0+255),w,b
  1575   000640  6E11               	movwf	___lldiv@divisor^0,c
  1576   000642  5050               	movf	(_Black_setup+1)^0,w,c
  1577   000644  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  1578   000646  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1579   000648  5051               	movf	(_Black_setup+2)^0,w,c
  1580   00064A  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  1581   00064C  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1582   00064E  5052               	movf	(_Black_setup+3)^0,w,c
  1583   000650  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  1584   000652  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1585   000654  EC3D  F00B         	call	___lldiv	;wreg free
  1586   000658  C00D  F0D0         	movff	?___lldiv,_get_color_code$458
  1587   00065C  C00E  F0D1         	movff	?___lldiv+1,_get_color_code$458+1
  1588   000660  C00F  F0D2         	movff	?___lldiv+2,_get_color_code$458+2
  1589   000664  C010  F0D3         	movff	?___lldiv+3,_get_color_code$458+3
  1590   000668                     l2758:
  1591   000668  C0D0  F0E4         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  1592   00066C  C0D1  F0E5         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  1593   000670  C0D2  F0E6         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  1594   000674  C0D3  F0E7         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  1595   000678                     
  1596                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  1597   000678  5053               	movf	(_Black_setup+4)^0,w,c
  1598   00067A  0100               	movlb	0	; () banked
  1599   00067C  5DF4               	subwf	(_RGB+4)& (0+255),w,b
  1600   00067E  5054               	movf	(_Black_setup+5)^0,w,c
  1601   000680  59F5               	subwfb	(_RGB+5)& (0+255),w,b
  1602   000682  5055               	movf	(_Black_setup+6)^0,w,c
  1603   000684  59F6               	subwfb	(_RGB+6)& (0+255),w,b
  1604   000686  5056               	movf	(_Black_setup+7)^0,w,c
  1605   000688  59F7               	subwfb	(_RGB+7)& (0+255),w,b
  1606   00068A  B0D8               	btfsc	status,0,c
  1607   00068C  EF4A  F003         	goto	u1751
  1608   000690  EF4C  F003         	goto	u1750
  1609   000694                     u1751:
  1610   000694  EF56  F003         	goto	l2764
  1611   000698                     u1750:
  1612   000698                     
  1613                           ; BSR set to: 0
  1614   000698  0E00               	movlw	0
  1615   00069A  6FD4               	movwf	_get_color_code$459& (0+255),b
  1616   00069C  0E00               	movlw	0
  1617   00069E  6FD5               	movwf	(_get_color_code$459+1)& (0+255),b
  1618   0006A0  0E00               	movlw	0
  1619   0006A2  6FD6               	movwf	(_get_color_code$459+2)& (0+255),b
  1620   0006A4  0E00               	movlw	0
  1621   0006A6  6FD7               	movwf	(_get_color_code$459+3)& (0+255),b
  1622   0006A8  EF8B  F003         	goto	l2766
  1623   0006AC                     l2764:
  1624                           
  1625                           ; BSR set to: 0
  1626   0006AC  5053               	movf	(_Black_setup+4)^0,w,c
  1627   0006AE  5DF4               	subwf	(_RGB+4)& (0+255),w,b
  1628   0006B0  6E01               	movwf	___lmul@multiplier^0,c
  1629   0006B2  5054               	movf	(_Black_setup+5)^0,w,c
  1630   0006B4  59F5               	subwfb	(_RGB+5)& (0+255),w,b
  1631   0006B6  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1632   0006B8  5055               	movf	(_Black_setup+6)^0,w,c
  1633   0006BA  59F6               	subwfb	(_RGB+6)& (0+255),w,b
  1634   0006BC  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1635   0006BE  5056               	movf	(_Black_setup+7)^0,w,c
  1636   0006C0  59F7               	subwfb	(_RGB+7)& (0+255),w,b
  1637   0006C2  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1638   0006C4  0E64               	movlw	100
  1639   0006C6  6E05               	movwf	___lmul@multiplicand^0,c
  1640   0006C8  0E00               	movlw	0
  1641   0006CA  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1642   0006CC  0E00               	movlw	0
  1643   0006CE  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1644   0006D0  0E00               	movlw	0
  1645   0006D2  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1646   0006D4  EC18  F00D         	call	___lmul	;wreg free
  1647   0006D8  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1648   0006DC  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1649   0006E0  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1650   0006E4  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1651   0006E8  5053               	movf	(_Black_setup+4)^0,w,c
  1652   0006EA  0100               	movlb	0	; () banked
  1653   0006EC  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  1654   0006EE  6E11               	movwf	___lldiv@divisor^0,c
  1655   0006F0  5054               	movf	(_Black_setup+5)^0,w,c
  1656   0006F2  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  1657   0006F4  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1658   0006F6  5055               	movf	(_Black_setup+6)^0,w,c
  1659   0006F8  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  1660   0006FA  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1661   0006FC  5056               	movf	(_Black_setup+7)^0,w,c
  1662   0006FE  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  1663   000700  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1664   000702  EC3D  F00B         	call	___lldiv	;wreg free
  1665   000706  C00D  F0D4         	movff	?___lldiv,_get_color_code$459
  1666   00070A  C00E  F0D5         	movff	?___lldiv+1,_get_color_code$459+1
  1667   00070E  C00F  F0D6         	movff	?___lldiv+2,_get_color_code$459+2
  1668   000712  C010  F0D7         	movff	?___lldiv+3,_get_color_code$459+3
  1669   000716                     l2766:
  1670   000716  C0D4  F0E8         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  1671   00071A  C0D5  F0E9         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  1672   00071E  C0D6  F0EA         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  1673   000722  C0D7  F0EB         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  1674   000726                     
  1675                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  1676   000726  5057               	movf	(_Black_setup+8)^0,w,c
  1677   000728  0100               	movlb	0	; () banked
  1678   00072A  5DF8               	subwf	(_RGB+8)& (0+255),w,b
  1679   00072C  5058               	movf	(_Black_setup+9)^0,w,c
  1680   00072E  59F9               	subwfb	(_RGB+9)& (0+255),w,b
  1681   000730  5059               	movf	(_Black_setup+10)^0,w,c
  1682   000732  59FA               	subwfb	(_RGB+10)& (0+255),w,b
  1683   000734  505A               	movf	(_Black_setup+11)^0,w,c
  1684   000736  59FB               	subwfb	(_RGB+11)& (0+255),w,b
  1685   000738  B0D8               	btfsc	status,0,c
  1686   00073A  EFA1  F003         	goto	u1761
  1687   00073E  EFA3  F003         	goto	u1760
  1688   000742                     u1761:
  1689   000742  EFAD  F003         	goto	l2772
  1690   000746                     u1760:
  1691   000746                     
  1692                           ; BSR set to: 0
  1693   000746  0E00               	movlw	0
  1694   000748  6FD8               	movwf	_get_color_code$460& (0+255),b
  1695   00074A  0E00               	movlw	0
  1696   00074C  6FD9               	movwf	(_get_color_code$460+1)& (0+255),b
  1697   00074E  0E00               	movlw	0
  1698   000750  6FDA               	movwf	(_get_color_code$460+2)& (0+255),b
  1699   000752  0E00               	movlw	0
  1700   000754  6FDB               	movwf	(_get_color_code$460+3)& (0+255),b
  1701   000756  EFE2  F003         	goto	l2774
  1702   00075A                     l2772:
  1703                           
  1704                           ; BSR set to: 0
  1705   00075A  5057               	movf	(_Black_setup+8)^0,w,c
  1706   00075C  5DF8               	subwf	(_RGB+8)& (0+255),w,b
  1707   00075E  6E01               	movwf	___lmul@multiplier^0,c
  1708   000760  5058               	movf	(_Black_setup+9)^0,w,c
  1709   000762  59F9               	subwfb	(_RGB+9)& (0+255),w,b
  1710   000764  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1711   000766  5059               	movf	(_Black_setup+10)^0,w,c
  1712   000768  59FA               	subwfb	(_RGB+10)& (0+255),w,b
  1713   00076A  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1714   00076C  505A               	movf	(_Black_setup+11)^0,w,c
  1715   00076E  59FB               	subwfb	(_RGB+11)& (0+255),w,b
  1716   000770  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1717   000772  0E64               	movlw	100
  1718   000774  6E05               	movwf	___lmul@multiplicand^0,c
  1719   000776  0E00               	movlw	0
  1720   000778  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1721   00077A  0E00               	movlw	0
  1722   00077C  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1723   00077E  0E00               	movlw	0
  1724   000780  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1725   000782  EC18  F00D         	call	___lmul	;wreg free
  1726   000786  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1727   00078A  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1728   00078E  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1729   000792  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1730   000796  5057               	movf	(_Black_setup+8)^0,w,c
  1731   000798  0100               	movlb	0	; () banked
  1732   00079A  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  1733   00079C  6E11               	movwf	___lldiv@divisor^0,c
  1734   00079E  5058               	movf	(_Black_setup+9)^0,w,c
  1735   0007A0  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  1736   0007A2  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1737   0007A4  5059               	movf	(_Black_setup+10)^0,w,c
  1738   0007A6  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  1739   0007A8  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1740   0007AA  505A               	movf	(_Black_setup+11)^0,w,c
  1741   0007AC  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  1742   0007AE  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1743   0007B0  EC3D  F00B         	call	___lldiv	;wreg free
  1744   0007B4  C00D  F0D8         	movff	?___lldiv,_get_color_code$460
  1745   0007B8  C00E  F0D9         	movff	?___lldiv+1,_get_color_code$460+1
  1746   0007BC  C00F  F0DA         	movff	?___lldiv+2,_get_color_code$460+2
  1747   0007C0  C010  F0DB         	movff	?___lldiv+3,_get_color_code$460+3
  1748   0007C4                     l2774:
  1749   0007C4  C0D8  F0EC         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  1750   0007C8  C0D9  F0ED         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  1751   0007CC  C0DA  F0EE         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  1752   0007D0  C0DB  F0EF         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  1753   0007D4                     
  1754                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  1755   0007D4  EE20  F0E4         	lfsr	2,get_color_code@NormalizedRGB
  1756   0007D8  EE00  F007         	lfsr	0,get_color_distance@color1
  1757   0007DC  0E0B               	movlw	11
  1758   0007DE                     u1771:
  1759   0007DE  CFDB FFEB          	movff	plusw2,plusw0
  1760   0007E2  06E8               	decf	wreg,f,c
  1761   0007E4  E2FC               	bc	u1771
  1762   0007E6  EE21  F000         	lfsr	2,_Color_rules
  1763   0007EA  EE00  F013         	lfsr	0,get_color_distance@color2
  1764   0007EE  0E0B               	movlw	11
  1765   0007F0                     u1781:
  1766   0007F0  CFDB FFEB          	movff	plusw2,plusw0
  1767   0007F4  06E8               	decf	wreg,f,c
  1768   0007F6  E2FC               	bc	u1781
  1769   0007F8  EC2D  F005         	call	_get_color_distance	;wreg free
  1770   0007FC  C007  F0DC         	movff	?_get_color_distance,get_color_code@min_value
  1771   000800  C008  F0DD         	movff	?_get_color_distance+1,get_color_code@min_value+1
  1772   000804                     
  1773                           ;color.c: 196:     unsigned int min_index = 0;
  1774   000804  0E00               	movlw	0
  1775   000806  0100               	movlb	0	; () banked
  1776   000808  6FDF               	movwf	(get_color_code@min_index+1)& (0+255),b
  1777   00080A  0E00               	movlw	0
  1778   00080C  6FDE               	movwf	get_color_code@min_index& (0+255),b
  1779   00080E                     
  1780                           ; BSR set to: 0
  1781                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  1782   00080E  0E00               	movlw	0
  1783   000810  6FE3               	movwf	(get_color_code@i+1)& (0+255),b
  1784   000812  0E01               	movlw	1
  1785   000814  6FE2               	movwf	get_color_code@i& (0+255),b
  1786   000816                     l2786:
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1790   000816  C0E2  F001         	movff	get_color_code@i,___wmul@multiplier
  1791   00081A  C0E3  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  1792   00081E  0E00               	movlw	0
  1793   000820  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1794   000822  0E0C               	movlw	12
  1795   000824  6E03               	movwf	___wmul@multiplicand^0,c
  1796   000826  EC01  F00F         	call	___wmul	;wreg free
  1797   00082A  0E00               	movlw	low _Color_rules
  1798   00082C  2401               	addwf	?___wmul^0,w,c
  1799   00082E  6ED9               	movwf	fsr2l,c
  1800   000830  0E01               	movlw	high _Color_rules
  1801   000832  2002               	addwfc	(?___wmul+1)^0,w,c
  1802   000834  6EDA               	movwf	fsr2h,c
  1803   000836  EE10  F0C4         	lfsr	1,_get_color_code$2454
  1804   00083A  0E0B               	movlw	11
  1805   00083C                     u1791:
  1806   00083C  CFDB FFE3          	movff	plusw2,plusw1
  1807   000840  06E8               	decf	wreg,f,c
  1808   000842  E2FC               	bc	u1791
  1809   000844                     
  1810                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1811   000844  EE20  F0E4         	lfsr	2,get_color_code@NormalizedRGB
  1812   000848  EE00  F007         	lfsr	0,get_color_distance@color1
  1813   00084C  0E0B               	movlw	11
  1814   00084E                     u1801:
  1815   00084E  CFDB FFEB          	movff	plusw2,plusw0
  1816   000852  06E8               	decf	wreg,f,c
  1817   000854  E2FC               	bc	u1801
  1818   000856  EE20  F0C4         	lfsr	2,_get_color_code$2454
  1819   00085A  EE00  F013         	lfsr	0,get_color_distance@color2
  1820   00085E  0E0B               	movlw	11
  1821   000860                     u1811:
  1822   000860  CFDB FFEB          	movff	plusw2,plusw0
  1823   000864  06E8               	decf	wreg,f,c
  1824   000866  E2FC               	bc	u1811
  1825   000868  EC2D  F005         	call	_get_color_distance	;wreg free
  1826   00086C  C007  F0E0         	movff	?_get_color_distance,get_color_code@value
  1827   000870  C008  F0E1         	movff	?_get_color_distance+1,get_color_code@value+1
  1828   000874                     
  1829                           ;color.c: 199:         if(value < min_value){
  1830   000874  0100               	movlb	0	; () banked
  1831   000876  51DC               	movf	get_color_code@min_value& (0+255),w,b
  1832   000878  5DE0               	subwf	get_color_code@value& (0+255),w,b
  1833   00087A  51DD               	movf	(get_color_code@min_value+1)& (0+255),w,b
  1834   00087C  59E1               	subwfb	(get_color_code@value+1)& (0+255),w,b
  1835   00087E  B0D8               	btfsc	status,0,c
  1836   000880  EF44  F004         	goto	u1821
  1837   000884  EF46  F004         	goto	u1820
  1838   000888                     u1821:
  1839   000888  EF4E  F004         	goto	l2794
  1840   00088C                     u1820:
  1841   00088C                     
  1842                           ; BSR set to: 0
  1843                           ;color.c: 200:             min_index = i;
  1844   00088C  C0E2  F0DE         	movff	get_color_code@i,get_color_code@min_index
  1845   000890  C0E3  F0DF         	movff	get_color_code@i+1,get_color_code@min_index+1
  1846                           
  1847                           ;color.c: 201:             min_value = value;
  1848   000894  C0E0  F0DC         	movff	get_color_code@value,get_color_code@min_value
  1849   000898  C0E1  F0DD         	movff	get_color_code@value+1,get_color_code@min_value+1
  1850   00089C                     l2794:
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;color.c: 203:     }
  1854   00089C  4BE2               	infsnz	get_color_code@i& (0+255),f,b
  1855   00089E  2BE3               	incf	(get_color_code@i+1)& (0+255),f,b
  1856   0008A0                     
  1857                           ; BSR set to: 0
  1858   0008A0  51E3               	movf	(get_color_code@i+1)& (0+255),w,b
  1859   0008A2  E109               	bnz	u1830
  1860   0008A4  0E09               	movlw	9
  1861   0008A6  5DE2               	subwf	get_color_code@i& (0+255),w,b
  1862   0008A8  A0D8               	btfss	status,0,c
  1863   0008AA  EF59  F004         	goto	u1831
  1864   0008AE  EF5B  F004         	goto	u1830
  1865   0008B2                     u1831:
  1866   0008B2  EF0B  F004         	goto	l2786
  1867   0008B6                     u1830:
  1868   0008B6                     
  1869                           ; BSR set to: 0
  1870                           ;color.c: 204:     return min_index;
  1871   0008B6  C0DE  F035         	movff	get_color_code@min_index,?_get_color_code
  1872   0008BA  C0DF  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  1873   0008BE                     
  1874                           ; BSR set to: 0
  1875   0008BE  0012               	return		;funcret
  1876   0008C0                     __end_of_get_color_code:
  1877                           	callstack 0
  1878                           
  1879 ;; *************** function _get_color_distance *****************
  1880 ;; Defined at:
  1881 ;;		line 146 in file "color.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  color1         12    6[COMRAM] struct RGB_val
  1884 ;;  color2         12   18[COMRAM] struct RGB_val
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  B_offset        2   50[COMRAM] unsigned int 
  1887 ;;  G_offset        2   48[COMRAM] unsigned int 
  1888 ;;  R_offset        2   46[COMRAM] unsigned int 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  2    6[COMRAM] unsigned int 
  1891 ;; Registers used:
  1892 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1898 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1899 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1900 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;Total ram usage:       46 bytes
  1903 ;; Hardware stack levels used: 1
  1904 ;; Hardware stack levels required when called: 3
  1905 ;; This function calls:
  1906 ;;		___wmul
  1907 ;; This function is called by:
  1908 ;;		_get_color_code
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text4
  1913   000A5A                     __ptext4:
  1914                           	callstack 0
  1915   000A5A                     _get_color_distance:
  1916                           	callstack 26
  1917   000A5A                     
  1918                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  1919   000A5A  5013               	movf	get_color_distance@color2^0,w,c
  1920   000A5C  5C07               	subwf	get_color_distance@color1^0,w,c
  1921   000A5E  5014               	movf	(get_color_distance@color2+1)^0,w,c
  1922   000A60  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  1923   000A62  5015               	movf	(get_color_distance@color2+2)^0,w,c
  1924   000A64  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  1925   000A66  5016               	movf	(get_color_distance@color2+3)^0,w,c
  1926   000A68  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  1927   000A6A  B0D8               	btfsc	status,0,c
  1928   000A6C  EF3A  F005         	goto	u1451
  1929   000A70  EF3C  F005         	goto	u1450
  1930   000A74                     u1451:
  1931   000A74  EF4A  F005         	goto	l2592
  1932   000A78                     u1450:
  1933   000A78  5007               	movf	get_color_distance@color1^0,w,c
  1934   000A7A  5C13               	subwf	get_color_distance@color2^0,w,c
  1935   000A7C  6E23               	movwf	_get_color_distance$417^0,c
  1936   000A7E  5008               	movf	(get_color_distance@color1+1)^0,w,c
  1937   000A80  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  1938   000A82  6E24               	movwf	(_get_color_distance$417+1)^0,c
  1939   000A84  5009               	movf	(get_color_distance@color1+2)^0,w,c
  1940   000A86  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  1941   000A88  6E25               	movwf	(_get_color_distance$417+2)^0,c
  1942   000A8A  500A               	movf	(get_color_distance@color1+3)^0,w,c
  1943   000A8C  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  1944   000A8E  6E26               	movwf	(_get_color_distance$417+3)^0,c
  1945   000A90  EF56  F005         	goto	l2594
  1946   000A94                     l2592:
  1947   000A94  5013               	movf	get_color_distance@color2^0,w,c
  1948   000A96  5C07               	subwf	get_color_distance@color1^0,w,c
  1949   000A98  6E23               	movwf	_get_color_distance$417^0,c
  1950   000A9A  5014               	movf	(get_color_distance@color2+1)^0,w,c
  1951   000A9C  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  1952   000A9E  6E24               	movwf	(_get_color_distance$417+1)^0,c
  1953   000AA0  5015               	movf	(get_color_distance@color2+2)^0,w,c
  1954   000AA2  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  1955   000AA4  6E25               	movwf	(_get_color_distance$417+2)^0,c
  1956   000AA6  5016               	movf	(get_color_distance@color2+3)^0,w,c
  1957   000AA8  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  1958   000AAA  6E26               	movwf	(_get_color_distance$417+3)^0,c
  1959   000AAC                     l2594:
  1960   000AAC  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  1961   000AB0  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  1962                           
  1963                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  1964   000AB4  5017               	movf	(get_color_distance@color2+4)^0,w,c
  1965   000AB6  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  1966   000AB8  5018               	movf	(get_color_distance@color2+5)^0,w,c
  1967   000ABA  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  1968   000ABC  5019               	movf	(get_color_distance@color2+6)^0,w,c
  1969   000ABE  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  1970   000AC0  501A               	movf	(get_color_distance@color2+7)^0,w,c
  1971   000AC2  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  1972   000AC4  B0D8               	btfsc	status,0,c
  1973   000AC6  EF67  F005         	goto	u1461
  1974   000ACA  EF69  F005         	goto	u1460
  1975   000ACE                     u1461:
  1976   000ACE  EF77  F005         	goto	l2598
  1977   000AD2                     u1460:
  1978   000AD2  500B               	movf	(get_color_distance@color1+4)^0,w,c
  1979   000AD4  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  1980   000AD6  6E27               	movwf	_get_color_distance$419^0,c
  1981   000AD8  500C               	movf	(get_color_distance@color1+5)^0,w,c
  1982   000ADA  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  1983   000ADC  6E28               	movwf	(_get_color_distance$419+1)^0,c
  1984   000ADE  500D               	movf	(get_color_distance@color1+6)^0,w,c
  1985   000AE0  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  1986   000AE2  6E29               	movwf	(_get_color_distance$419+2)^0,c
  1987   000AE4  500E               	movf	(get_color_distance@color1+7)^0,w,c
  1988   000AE6  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  1989   000AE8  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  1990   000AEA  EF83  F005         	goto	l2600
  1991   000AEE                     l2598:
  1992   000AEE  5017               	movf	(get_color_distance@color2+4)^0,w,c
  1993   000AF0  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  1994   000AF2  6E27               	movwf	_get_color_distance$419^0,c
  1995   000AF4  5018               	movf	(get_color_distance@color2+5)^0,w,c
  1996   000AF6  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  1997   000AF8  6E28               	movwf	(_get_color_distance$419+1)^0,c
  1998   000AFA  5019               	movf	(get_color_distance@color2+6)^0,w,c
  1999   000AFC  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2000   000AFE  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2001   000B00  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2002   000B02  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2003   000B04  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2004   000B06                     l2600:
  2005   000B06  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2006   000B0A  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2007                           
  2008                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2009   000B0E  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2010   000B10  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2011   000B12  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2012   000B14  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2013   000B16  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2014   000B18  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2015   000B1A  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2016   000B1C  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2017   000B1E  B0D8               	btfsc	status,0,c
  2018   000B20  EF94  F005         	goto	u1471
  2019   000B24  EF96  F005         	goto	u1470
  2020   000B28                     u1471:
  2021   000B28  EFA4  F005         	goto	l2604
  2022   000B2C                     u1470:
  2023   000B2C  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2024   000B2E  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2025   000B30  6E2B               	movwf	_get_color_distance$421^0,c
  2026   000B32  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2027   000B34  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2028   000B36  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2029   000B38  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2030   000B3A  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2031   000B3C  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2032   000B3E  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2033   000B40  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2034   000B42  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2035   000B44  EFB0  F005         	goto	l2606
  2036   000B48                     l2604:
  2037   000B48  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2038   000B4A  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2039   000B4C  6E2B               	movwf	_get_color_distance$421^0,c
  2040   000B4E  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2041   000B50  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2042   000B52  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2043   000B54  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2044   000B56  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2045   000B58  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2046   000B5A  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2047   000B5C  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2048   000B5E  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2049   000B60                     l2606:
  2050   000B60  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2051   000B64  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2052   000B68                     
  2053                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2054   000B68  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2055   000B6C  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2056   000B70  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2057   000B74  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2058   000B78  EC01  F00F         	call	___wmul	;wreg free
  2059   000B7C  C001  F01F         	movff	?___wmul,??_get_color_distance
  2060   000B80  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2061   000B84  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2062   000B88  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2063   000B8C  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2064   000B90  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2065   000B94  EC01  F00F         	call	___wmul	;wreg free
  2066   000B98  5001               	movf	?___wmul^0,w,c
  2067   000B9A  241F               	addwf	??_get_color_distance^0,w,c
  2068   000B9C  6E21               	movwf	(??_get_color_distance+2)^0,c
  2069   000B9E  5002               	movf	(?___wmul+1)^0,w,c
  2070   000BA0  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2071   000BA2  6E22               	movwf	(??_get_color_distance+3)^0,c
  2072   000BA4  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2073   000BA8  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2074   000BAC  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2075   000BB0  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2076   000BB4  EC01  F00F         	call	___wmul	;wreg free
  2077   000BB8  5001               	movf	?___wmul^0,w,c
  2078   000BBA  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2079   000BBC  6E07               	movwf	?_get_color_distance^0,c
  2080   000BBE  5002               	movf	(?___wmul+1)^0,w,c
  2081   000BC0  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2082   000BC2  6E08               	movwf	(?_get_color_distance+1)^0,c
  2083   000BC4  0012               	return		;funcret
  2084   000BC6                     __end_of_get_color_distance:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function ___lmul *****************
  2088 ;; Defined at:
  2089 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  multiplier      4    0[COMRAM] unsigned long 
  2092 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  product         4    8[COMRAM] unsigned long 
  2095 ;; Return value:  Size  Location     Type
  2096 ;;                  4    0[COMRAM] unsigned long 
  2097 ;; Registers used:
  2098 ;;		wreg, status,2, status,0
  2099 ;; Tracked objects:
  2100 ;;		On entry : 0/0
  2101 ;;		On exit  : 0/0
  2102 ;;		Unchanged: 0/0
  2103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2104 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2107 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2108 ;;Total ram usage:       12 bytes
  2109 ;; Hardware stack levels used: 1
  2110 ;; Hardware stack levels required when called: 2
  2111 ;; This function calls:
  2112 ;;		Nothing
  2113 ;; This function is called by:
  2114 ;;		_get_color_code
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text5
  2119   001A30                     __ptext5:
  2120                           	callstack 0
  2121   001A30                     ___lmul:
  2122                           	callstack 27
  2123   001A30  0E00               	movlw	0
  2124   001A32  6E09               	movwf	___lmul@product^0,c
  2125   001A34  0E00               	movlw	0
  2126   001A36  6E0A               	movwf	(___lmul@product+1)^0,c
  2127   001A38  0E00               	movlw	0
  2128   001A3A  6E0B               	movwf	(___lmul@product+2)^0,c
  2129   001A3C  0E00               	movlw	0
  2130   001A3E  6E0C               	movwf	(___lmul@product+3)^0,c
  2131   001A40                     l2654:
  2132   001A40  A001               	btfss	___lmul@multiplier^0,0,c
  2133   001A42  EF25  F00D         	goto	u1551
  2134   001A46  EF27  F00D         	goto	u1550
  2135   001A4A                     u1551:
  2136   001A4A  EF2F  F00D         	goto	l2658
  2137   001A4E                     u1550:
  2138   001A4E  5005               	movf	___lmul@multiplicand^0,w,c
  2139   001A50  2609               	addwf	___lmul@product^0,f,c
  2140   001A52  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2141   001A54  220A               	addwfc	(___lmul@product+1)^0,f,c
  2142   001A56  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2143   001A58  220B               	addwfc	(___lmul@product+2)^0,f,c
  2144   001A5A  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2145   001A5C  220C               	addwfc	(___lmul@product+3)^0,f,c
  2146   001A5E                     l2658:
  2147   001A5E  90D8               	bcf	status,0,c
  2148   001A60  3605               	rlcf	___lmul@multiplicand^0,f,c
  2149   001A62  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2150   001A64  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2151   001A66  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2152   001A68  90D8               	bcf	status,0,c
  2153   001A6A  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2154   001A6C  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2155   001A6E  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2156   001A70  3201               	rrcf	___lmul@multiplier^0,f,c
  2157   001A72  5001               	movf	___lmul@multiplier^0,w,c
  2158   001A74  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2159   001A76  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2160   001A78  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2161   001A7A  A4D8               	btfss	status,2,c
  2162   001A7C  EF42  F00D         	goto	u1561
  2163   001A80  EF44  F00D         	goto	u1560
  2164   001A84                     u1561:
  2165   001A84  EF20  F00D         	goto	l2654
  2166   001A88                     u1560:
  2167   001A88  C009  F001         	movff	___lmul@product,?___lmul
  2168   001A8C  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2169   001A90  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2170   001A94  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2171   001A98  0012               	return		;funcret
  2172   001A9A                     __end_of___lmul:
  2173                           	callstack 0
  2174                           
  2175 ;; *************** function ___lldiv *****************
  2176 ;; Defined at:
  2177 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  dividend        4   12[COMRAM] unsigned long 
  2180 ;;  divisor         4   16[COMRAM] unsigned long 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  quotient        4   20[COMRAM] unsigned long 
  2183 ;;  counter         1   24[COMRAM] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  4   12[COMRAM] unsigned long 
  2186 ;; Registers used:
  2187 ;;		wreg, status,2, status,0
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2193 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2194 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2196 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2197 ;;Total ram usage:       13 bytes
  2198 ;; Hardware stack levels used: 1
  2199 ;; Hardware stack levels required when called: 2
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_get_color_code
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text6
  2208   00167A                     __ptext6:
  2209                           	callstack 0
  2210   00167A                     ___lldiv:
  2211                           	callstack 27
  2212   00167A  0E00               	movlw	0
  2213   00167C  6E15               	movwf	___lldiv@quotient^0,c
  2214   00167E  0E00               	movlw	0
  2215   001680  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2216   001682  0E00               	movlw	0
  2217   001684  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2218   001686  0E00               	movlw	0
  2219   001688  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2220   00168A  5011               	movf	___lldiv@divisor^0,w,c
  2221   00168C  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2222   00168E  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2223   001690  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2224   001692  B4D8               	btfsc	status,2,c
  2225   001694  EF4E  F00B         	goto	u1571
  2226   001698  EF50  F00B         	goto	u1570
  2227   00169C                     u1571:
  2228   00169C  EF86  F00B         	goto	l474
  2229   0016A0                     u1570:
  2230   0016A0  0E01               	movlw	1
  2231   0016A2  6E19               	movwf	___lldiv@counter^0,c
  2232   0016A4  EF5A  F00B         	goto	l2670
  2233   0016A8                     l2668:
  2234   0016A8  90D8               	bcf	status,0,c
  2235   0016AA  3611               	rlcf	___lldiv@divisor^0,f,c
  2236   0016AC  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2237   0016AE  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2238   0016B0  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2239   0016B2  2A19               	incf	___lldiv@counter^0,f,c
  2240   0016B4                     l2670:
  2241   0016B4  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2242   0016B6  EF5F  F00B         	goto	u1581
  2243   0016BA  EF61  F00B         	goto	u1580
  2244   0016BE                     u1581:
  2245   0016BE  EF54  F00B         	goto	l2668
  2246   0016C2                     u1580:
  2247   0016C2                     l2672:
  2248   0016C2  90D8               	bcf	status,0,c
  2249   0016C4  3615               	rlcf	___lldiv@quotient^0,f,c
  2250   0016C6  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2251   0016C8  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2252   0016CA  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2253   0016CC  5011               	movf	___lldiv@divisor^0,w,c
  2254   0016CE  5C0D               	subwf	___lldiv@dividend^0,w,c
  2255   0016D0  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2256   0016D2  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2257   0016D4  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2258   0016D6  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2259   0016D8  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2260   0016DA  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2261   0016DC  A0D8               	btfss	status,0,c
  2262   0016DE  EF73  F00B         	goto	u1591
  2263   0016E2  EF75  F00B         	goto	u1590
  2264   0016E6                     u1591:
  2265   0016E6  EF7E  F00B         	goto	l2680
  2266   0016EA                     u1590:
  2267   0016EA  5011               	movf	___lldiv@divisor^0,w,c
  2268   0016EC  5E0D               	subwf	___lldiv@dividend^0,f,c
  2269   0016EE  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2270   0016F0  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2271   0016F2  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2272   0016F4  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2273   0016F6  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2274   0016F8  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2275   0016FA  8015               	bsf	___lldiv@quotient^0,0,c
  2276   0016FC                     l2680:
  2277   0016FC  90D8               	bcf	status,0,c
  2278   0016FE  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2279   001700  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2280   001702  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2281   001704  3211               	rrcf	___lldiv@divisor^0,f,c
  2282   001706  2E19               	decfsz	___lldiv@counter^0,f,c
  2283   001708  EF61  F00B         	goto	l2672
  2284   00170C                     l474:
  2285   00170C  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2286   001710  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2287   001714  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2288   001718  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2289   00171C  0012               	return		;funcret
  2290   00171E                     __end_of___lldiv:
  2291                           	callstack 0
  2292                           
  2293 ;; *************** function _fullSpeedAhead *****************
  2294 ;; Defined at:
  2295 ;;		line 256 in file "dc_motor.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2298 ;;		 -> main@motorL(9), 
  2299 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2300 ;;		 -> main@motorR(9), 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;		None
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      void 
  2305 ;; Registers used:
  2306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2312 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2315 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;Total ram usage:        4 bytes
  2317 ;; Hardware stack levels used: 1
  2318 ;; Hardware stack levels required when called: 4
  2319 ;; This function calls:
  2320 ;;		_setMotorPWM
  2321 ;; This function is called by:
  2322 ;;		_main
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text7
  2327   001AFE                     __ptext7:
  2328                           	callstack 0
  2329   001AFE                     _fullSpeedAhead:
  2330                           	callstack 26
  2331   001AFE                     
  2332                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2333   001AFE  0E00               	movlw	0
  2334   001B00  6E5E               	movwf	(_seconds+1)^0,c
  2335   001B02  0E00               	movlw	0
  2336   001B04  6E5D               	movwf	_seconds^0,c
  2337   001B06                     
  2338                           ;dc_motor.c: 259:     (*mL).direction=0;
  2339   001B06  EE20 F001          	lfsr	2,1
  2340   001B0A  5014               	movf	fullSpeedAhead@mL^0,w,c
  2341   001B0C  26D9               	addwf	fsr2l,f,c
  2342   001B0E  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2343   001B10  22DA               	addwfc	fsr2h,f,c
  2344   001B12  0E00               	movlw	0
  2345   001B14  6EDF               	movwf	indf2,c
  2346   001B16                     
  2347                           ;dc_motor.c: 260:     (*mR).direction=0;
  2348   001B16  EE20 F001          	lfsr	2,1
  2349   001B1A  5016               	movf	fullSpeedAhead@mR^0,w,c
  2350   001B1C  26D9               	addwf	fsr2l,f,c
  2351   001B1E  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2352   001B20  22DA               	addwfc	fsr2h,f,c
  2353   001B22  0E00               	movlw	0
  2354   001B24  6EDF               	movwf	indf2,c
  2355   001B26                     
  2356                           ;dc_motor.c: 261:     (*mL).power=50;
  2357   001B26  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2358   001B2A  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2359   001B2E  0E32               	movlw	50
  2360   001B30  6EDF               	movwf	indf2,c
  2361   001B32                     
  2362                           ;dc_motor.c: 262:     (*mR).power=50;
  2363   001B32  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2364   001B36  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2365   001B3A  0E32               	movlw	50
  2366   001B3C  6EDF               	movwf	indf2,c
  2367   001B3E                     
  2368                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2369   001B3E  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2370   001B42  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2371   001B46  ECE3  F005         	call	_setMotorPWM	;wreg free
  2372   001B4A                     
  2373                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2374   001B4A  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2375   001B4E  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2376   001B52  ECE3  F005         	call	_setMotorPWM	;wreg free
  2377   001B56  0012               	return		;funcret
  2378   001B58                     __end_of_fullSpeedAhead:
  2379                           	callstack 0
  2380                           
  2381 ;; *************** function _color_click_init *****************
  2382 ;; Defined at:
  2383 ;;		line 30 in file "color.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;		None
  2386 ;; Auto vars:     Size  Location     Type
  2387 ;;		None
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  1    wreg      void 
  2390 ;; Registers used:
  2391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2399 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2401 ;;Total ram usage:        1 bytes
  2402 ;; Hardware stack levels used: 1
  2403 ;; Hardware stack levels required when called: 6
  2404 ;; This function calls:
  2405 ;;		_I2C_2_Master_Init
  2406 ;;		_calibrate_black
  2407 ;;		_calibrate_white
  2408 ;;		_color_writetoaddr
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;; This function uses a non-reentrant model
  2412 ;;
  2413                           
  2414                           	psect	text8
  2415   000FDC                     __ptext8:
  2416                           	callstack 0
  2417   000FDC                     _color_click_init:
  2418                           	callstack 24
  2419   000FDC                     
  2420                           ;color.c: 33:     I2C_2_Master_Init();
  2421   000FDC  ECD8  F00E         	call	_I2C_2_Master_Init	;wreg free
  2422   000FE0                     
  2423                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2424   000FE0  0E01               	movlw	1
  2425   000FE2  6E03               	movwf	color_writetoaddr@value^0,c
  2426   000FE4  0E00               	movlw	0
  2427   000FE6  EC14  F00F         	call	_color_writetoaddr
  2428   000FEA                     
  2429                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2430   000FEA  0E3F               	movlw	63
  2431   000FEC  6E16               	movwf	??_color_click_init^0,c
  2432   000FEE  0E55               	movlw	85
  2433   000FF0                     u2487:
  2434   000FF0  2EE8               	decfsz	wreg,f,c
  2435   000FF2  D7FE               	bra	u2487
  2436   000FF4  2E16               	decfsz	??_color_click_init^0,f,c
  2437   000FF6  D7FC               	bra	u2487
  2438   000FF8  F000               	nop	
  2439   000FFA                     
  2440                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2441   000FFA  0E03               	movlw	3
  2442   000FFC  6E03               	movwf	color_writetoaddr@value^0,c
  2443   000FFE  0E00               	movlw	0
  2444   001000  EC14  F00F         	call	_color_writetoaddr
  2445   001004                     
  2446                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2447   001004  0ED5               	movlw	213
  2448   001006  6E03               	movwf	color_writetoaddr@value^0,c
  2449   001008  0E01               	movlw	1
  2450   00100A  EC14  F00F         	call	_color_writetoaddr
  2451   00100E                     
  2452                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2453   00100E  9E86               	bcf	134,7,c	;volatile
  2454   001010                     
  2455                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2456   001010  9287               	bcf	135,1,c	;volatile
  2457   001012                     
  2458                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2459   001012  9881               	bcf	129,4,c	;volatile
  2460   001014                     
  2461                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2462   001014  EE20  F0B4         	lfsr	2,_Red_rule
  2463   001018  EE11  F000         	lfsr	1,_Color_rules
  2464   00101C  0E0B               	movlw	11
  2465   00101E                     u1601:
  2466   00101E  CFDB FFE3          	movff	plusw2,plusw1
  2467   001022  06E8               	decf	wreg,f,c
  2468   001024  E2FC               	bc	u1601
  2469   001026                     
  2470                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2471   001026  EE20  F0A8         	lfsr	2,_Green_rule
  2472   00102A  EE11  F00C         	lfsr	1,_Color_rules+12
  2473   00102E  0E0B               	movlw	11
  2474   001030                     u1611:
  2475   001030  CFDB FFE3          	movff	plusw2,plusw1
  2476   001034  06E8               	decf	wreg,f,c
  2477   001036  E2FC               	bc	u1611
  2478   001038                     
  2479                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2480   001038  EE20  F09C         	lfsr	2,_Blue_rule
  2481   00103C  EE11  F018         	lfsr	1,_Color_rules+24
  2482   001040  0E0B               	movlw	11
  2483   001042                     u1621:
  2484   001042  CFDB FFE3          	movff	plusw2,plusw1
  2485   001046  06E8               	decf	wreg,f,c
  2486   001048  E2FC               	bc	u1621
  2487   00104A                     
  2488                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2489   00104A  EE20  F090         	lfsr	2,_Yellow_rule
  2490   00104E  EE11  F024         	lfsr	1,_Color_rules+36
  2491   001052  0E0B               	movlw	11
  2492   001054                     u1631:
  2493   001054  CFDB FFE3          	movff	plusw2,plusw1
  2494   001058  06E8               	decf	wreg,f,c
  2495   00105A  E2FC               	bc	u1631
  2496   00105C                     
  2497                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2498   00105C  EE20  F084         	lfsr	2,_Pink_rule
  2499   001060  EE11  F030         	lfsr	1,_Color_rules+48
  2500   001064  0E0B               	movlw	11
  2501   001066                     u1641:
  2502   001066  CFDB FFE3          	movff	plusw2,plusw1
  2503   00106A  06E8               	decf	wreg,f,c
  2504   00106C  E2FC               	bc	u1641
  2505   00106E                     
  2506                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2507   00106E  EE20  F078         	lfsr	2,_Orange_rule
  2508   001072  EE11  F03C         	lfsr	1,_Color_rules+60
  2509   001076  0E0B               	movlw	11
  2510   001078                     u1651:
  2511   001078  CFDB FFE3          	movff	plusw2,plusw1
  2512   00107C  06E8               	decf	wreg,f,c
  2513   00107E  E2FC               	bc	u1651
  2514   001080                     
  2515                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2516   001080  EE20  F06C         	lfsr	2,_Lightblue_rule
  2517   001084  EE11  F048         	lfsr	1,_Color_rules+72
  2518   001088  0E0B               	movlw	11
  2519   00108A                     u1661:
  2520   00108A  CFDB FFE3          	movff	plusw2,plusw1
  2521   00108E  06E8               	decf	wreg,f,c
  2522   001090  E2FC               	bc	u1661
  2523   001092                     
  2524                           ;color.c: 56:     Color_rules[7] = White_rule;
  2525   001092  EE21  F0DC         	lfsr	2,_White_rule
  2526   001096  EE11  F054         	lfsr	1,_Color_rules+84
  2527   00109A  0E0B               	movlw	11
  2528   00109C                     u1671:
  2529   00109C  CFDB FFE3          	movff	plusw2,plusw1
  2530   0010A0  06E8               	decf	wreg,f,c
  2531   0010A2  E2FC               	bc	u1671
  2532   0010A4                     
  2533                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2534   0010A4  EE21  F0D0         	lfsr	2,_Black_rule
  2535   0010A8  EE11  F060         	lfsr	1,_Color_rules+96
  2536   0010AC  0E0B               	movlw	11
  2537   0010AE                     u1681:
  2538   0010AE  CFDB FFE3          	movff	plusw2,plusw1
  2539   0010B2  06E8               	decf	wreg,f,c
  2540   0010B4  E2FC               	bc	u1681
  2541   0010B6                     
  2542                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2543   0010B6  8686               	bsf	134,3,c	;volatile
  2544   0010B8                     
  2545                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2546   0010B8  010E               	movlb	14	; () banked
  2547   0010BA  97B4               	bcf	180,3,b	;volatile
  2548   0010BC                     
  2549                           ; BSR set to: 14
  2550                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2551   0010BC  8486               	bsf	134,2,c	;volatile
  2552   0010BE                     
  2553                           ; BSR set to: 14
  2554                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2555   0010BE  95B4               	bcf	180,2,b	;volatile
  2556   0010C0                     l67:
  2557   0010C0  A68E               	btfss	142,3,c	;volatile
  2558   0010C2  EF65  F008         	goto	u1691
  2559   0010C6  EF67  F008         	goto	u1690
  2560   0010CA                     u1691:
  2561   0010CA  EF6E  F008         	goto	l71
  2562   0010CE                     u1690:
  2563   0010CE  B48E               	btfsc	142,2,c	;volatile
  2564   0010D0  EF6C  F008         	goto	u1701
  2565   0010D4  EF6E  F008         	goto	u1700
  2566   0010D8                     u1701:
  2567   0010D8  EF60  F008         	goto	l67
  2568   0010DC                     u1700:
  2569   0010DC                     l71:
  2570                           
  2571                           ;color.c: 72:     if(!PORTFbits.RF2){
  2572   0010DC  B48E               	btfsc	142,2,c	;volatile
  2573   0010DE  EF73  F008         	goto	u1711
  2574   0010E2  EF75  F008         	goto	u1710
  2575   0010E6                     u1711:
  2576   0010E6  EF77  F008         	goto	l2730
  2577   0010EA                     u1710:
  2578   0010EA  EF89  F008         	goto	l73
  2579   0010EE                     l2730:
  2580                           
  2581                           ;color.c: 75:     calibrate_white();
  2582   0010EE  ECE8  F00A         	call	_calibrate_white	;wreg free
  2583   0010F2                     l74:
  2584   0010F2  B68E               	btfsc	142,3,c	;volatile
  2585   0010F4  EF7E  F008         	goto	u1721
  2586   0010F8  EF80  F008         	goto	u1720
  2587   0010FC                     u1721:
  2588   0010FC  EF79  F008         	goto	l74
  2589   001100                     u1720:
  2590   001100                     
  2591                           ;color.c: 77:     calibrate_black();
  2592   001100  EC8A  F008         	call	_calibrate_black	;wreg free
  2593   001104                     l77:
  2594   001104  B68E               	btfsc	142,3,c	;volatile
  2595   001106  EF87  F008         	goto	u1731
  2596   00110A  EF89  F008         	goto	u1730
  2597   00110E                     u1731:
  2598   00110E  EF82  F008         	goto	l77
  2599   001112                     u1730:
  2600   001112                     l73:
  2601   001112  0012               	return		;funcret
  2602   001114                     __end_of_color_click_init:
  2603                           	callstack 0
  2604                           
  2605 ;; *************** function _color_writetoaddr *****************
  2606 ;; Defined at:
  2607 ;;		line 82 in file "color.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  address         1    wreg     unsigned char 
  2610 ;;  value           1    2[COMRAM] unsigned char 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  address         1    3[COMRAM] unsigned char 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2622 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2625 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2626 ;;Total ram usage:        2 bytes
  2627 ;; Hardware stack levels used: 1
  2628 ;; Hardware stack levels required when called: 4
  2629 ;; This function calls:
  2630 ;;		_I2C_2_Master_Start
  2631 ;;		_I2C_2_Master_Stop
  2632 ;;		_I2C_2_Master_Write
  2633 ;; This function is called by:
  2634 ;;		_color_click_init
  2635 ;; This function uses a non-reentrant model
  2636 ;;
  2637                           
  2638                           	psect	text9
  2639   001E28                     __ptext9:
  2640                           	callstack 0
  2641   001E28                     _color_writetoaddr:
  2642                           	callstack 25
  2643                           
  2644                           ;incstack = 0
  2645                           ;color_writetoaddr@address stored from wreg
  2646   001E28  6E04               	movwf	color_writetoaddr@address^0,c
  2647   001E2A                     
  2648                           ;color.c: 83:     I2C_2_Master_Start();
  2649   001E2A  EC51  F00F         	call	_I2C_2_Master_Start	;wreg free
  2650                           
  2651                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  2652   001E2E  0E52               	movlw	82
  2653   001E30  EC40  F00F         	call	_I2C_2_Master_Write
  2654                           
  2655                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  2656   001E34  5004               	movf	color_writetoaddr@address^0,w,c
  2657   001E36  0980               	iorlw	128
  2658   001E38  EC40  F00F         	call	_I2C_2_Master_Write
  2659                           
  2660                           ;color.c: 86:     I2C_2_Master_Write(value);
  2661   001E3C  5003               	movf	color_writetoaddr@value^0,w,c
  2662   001E3E  EC40  F00F         	call	_I2C_2_Master_Write
  2663                           
  2664                           ;color.c: 87:     I2C_2_Master_Stop();
  2665   001E42  EC4C  F00F         	call	_I2C_2_Master_Stop	;wreg free
  2666   001E46  0012               	return		;funcret
  2667   001E48                     __end_of_color_writetoaddr:
  2668                           	callstack 0
  2669                           
  2670 ;; *************** function _calibrate_white *****************
  2671 ;; Defined at:
  2672 ;;		line 229 in file "color.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2690 ;;Total ram usage:        2 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; Hardware stack levels required when called: 5
  2693 ;; This function calls:
  2694 ;;		_color_read_Blue
  2695 ;;		_color_read_Green
  2696 ;;		_color_read_Red
  2697 ;;		_set_led_color
  2698 ;; This function is called by:
  2699 ;;		_color_click_init
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text10
  2704   0015D0                     __ptext10:
  2705                           	callstack 0
  2706   0015D0                     _calibrate_white:
  2707                           	callstack 24
  2708   0015D0                     
  2709                           ;color.c: 230:     set_led_color(0b100);
  2710   0015D0  0E00               	movlw	0
  2711   0015D2  6E02               	movwf	(set_led_color@color+1)^0,c
  2712   0015D4  0E04               	movlw	4
  2713   0015D6  6E01               	movwf	set_led_color@color^0,c
  2714   0015D8  EC95  F00E         	call	_set_led_color	;wreg free
  2715   0015DC                     
  2716                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2717   0015DC  0E12               	movlw	18
  2718   0015DE  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2719   0015E0  0EDC               	movlw	220
  2720   0015E2  6E0C               	movwf	??_calibrate_white^0,c
  2721   0015E4  0E60               	movlw	96
  2722   0015E6                     u2497:
  2723   0015E6  2EE8               	decfsz	wreg,f,c
  2724   0015E8  D7FE               	bra	u2497
  2725   0015EA  2E0C               	decfsz	??_calibrate_white^0,f,c
  2726   0015EC  D7FC               	bra	u2497
  2727   0015EE  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2728   0015F0  D7FA               	bra	u2497
  2729   0015F2                     
  2730                           ;color.c: 232:     White_setup.R = color_read_Red();
  2731   0015F2  ECAC  F00D         	call	_color_read_Red	;wreg free
  2732   0015F6  C005  F060         	movff	?_color_read_Red,_White_setup
  2733   0015FA  C006  F061         	movff	?_color_read_Red+1,_White_setup+1
  2734   0015FE  0100               	movlb	0	; () banked
  2735   001600  6B62               	clrf	(_White_setup+2)& (0+255),b
  2736   001602  6B63               	clrf	(_White_setup+3)& (0+255),b
  2737   001604                     
  2738                           ; BSR set to: 0
  2739                           ;color.c: 233:     set_led_color(0b010);
  2740   001604  0E00               	movlw	0
  2741   001606  6E02               	movwf	(set_led_color@color+1)^0,c
  2742   001608  0E02               	movlw	2
  2743   00160A  6E01               	movwf	set_led_color@color^0,c
  2744   00160C  EC95  F00E         	call	_set_led_color	;wreg free
  2745   001610                     
  2746                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2747   001610  0E12               	movlw	18
  2748   001612  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2749   001614  0EDC               	movlw	220
  2750   001616  6E0C               	movwf	??_calibrate_white^0,c
  2751   001618  0E60               	movlw	96
  2752   00161A                     u2507:
  2753   00161A  2EE8               	decfsz	wreg,f,c
  2754   00161C  D7FE               	bra	u2507
  2755   00161E  2E0C               	decfsz	??_calibrate_white^0,f,c
  2756   001620  D7FC               	bra	u2507
  2757   001622  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2758   001624  D7FA               	bra	u2507
  2759                           
  2760                           ;color.c: 235:     White_setup.G = color_read_Green();
  2761   001626  ECD4  F00D         	call	_color_read_Green	;wreg free
  2762   00162A  C005  F064         	movff	?_color_read_Green,_White_setup+4
  2763   00162E  C006  F065         	movff	?_color_read_Green+1,_White_setup+5
  2764   001632  0100               	movlb	0	; () banked
  2765   001634  6B66               	clrf	(_White_setup+6)& (0+255),b
  2766   001636  6B67               	clrf	(_White_setup+7)& (0+255),b
  2767   001638                     
  2768                           ; BSR set to: 0
  2769                           ;color.c: 236:     set_led_color(0b001);
  2770   001638  0E00               	movlw	0
  2771   00163A  6E02               	movwf	(set_led_color@color+1)^0,c
  2772   00163C  0E01               	movlw	1
  2773   00163E  6E01               	movwf	set_led_color@color^0,c
  2774   001640  EC95  F00E         	call	_set_led_color	;wreg free
  2775   001644                     
  2776                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2777   001644  0E12               	movlw	18
  2778   001646  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2779   001648  0EDC               	movlw	220
  2780   00164A  6E0C               	movwf	??_calibrate_white^0,c
  2781   00164C  0E60               	movlw	96
  2782   00164E                     u2517:
  2783   00164E  2EE8               	decfsz	wreg,f,c
  2784   001650  D7FE               	bra	u2517
  2785   001652  2E0C               	decfsz	??_calibrate_white^0,f,c
  2786   001654  D7FC               	bra	u2517
  2787   001656  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2788   001658  D7FA               	bra	u2517
  2789   00165A                     
  2790                           ;color.c: 238:     White_setup.B = color_read_Blue();
  2791   00165A  EC24  F00E         	call	_color_read_Blue	;wreg free
  2792   00165E  C005  F068         	movff	?_color_read_Blue,_White_setup+8
  2793   001662  C006  F069         	movff	?_color_read_Blue+1,_White_setup+9
  2794   001666  0100               	movlb	0	; () banked
  2795   001668  6B6A               	clrf	(_White_setup+10)& (0+255),b
  2796   00166A  6B6B               	clrf	(_White_setup+11)& (0+255),b
  2797   00166C                     
  2798                           ; BSR set to: 0
  2799                           ;color.c: 239:     set_led_color(0b000);
  2800   00166C  0E00               	movlw	0
  2801   00166E  6E02               	movwf	(set_led_color@color+1)^0,c
  2802   001670  0E00               	movlw	0
  2803   001672  6E01               	movwf	set_led_color@color^0,c
  2804   001674  EC95  F00E         	call	_set_led_color	;wreg free
  2805   001678  0012               	return		;funcret
  2806   00167A                     __end_of_calibrate_white:
  2807                           	callstack 0
  2808                           
  2809 ;; *************** function _calibrate_black *****************
  2810 ;; Defined at:
  2811 ;;		line 209 in file "color.c"
  2812 ;; Parameters:    Size  Location     Type
  2813 ;;		None
  2814 ;; Auto vars:     Size  Location     Type
  2815 ;;  clear2          2   17[COMRAM] unsigned int 
  2816 ;;  clear1          2   15[COMRAM] unsigned int 
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0, cstack
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2827 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2829 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2830 ;;Total ram usage:        8 bytes
  2831 ;; Hardware stack levels used: 1
  2832 ;; Hardware stack levels required when called: 5
  2833 ;; This function calls:
  2834 ;;		___lwdiv
  2835 ;;		_color_read_Blue
  2836 ;;		_color_read_Clear
  2837 ;;		_color_read_Green
  2838 ;;		_color_read_Red
  2839 ;;		_set_led_color
  2840 ;; This function is called by:
  2841 ;;		_color_click_init
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text11
  2846   001114                     __ptext11:
  2847                           	callstack 0
  2848   001114                     _calibrate_black:
  2849                           	callstack 24
  2850   001114                     
  2851                           ;color.c: 210:     set_led_color(0b100);
  2852   001114  0E00               	movlw	0
  2853   001116  6E02               	movwf	(set_led_color@color+1)^0,c
  2854   001118  0E04               	movlw	4
  2855   00111A  6E01               	movwf	set_led_color@color^0,c
  2856   00111C  EC95  F00E         	call	_set_led_color	;wreg free
  2857   001120                     
  2858                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2859   001120  0E12               	movlw	18
  2860   001122  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2861   001124  0EDC               	movlw	220
  2862   001126  6E0E               	movwf	??_calibrate_black^0,c
  2863   001128  0E60               	movlw	96
  2864   00112A                     u2527:
  2865   00112A  2EE8               	decfsz	wreg,f,c
  2866   00112C  D7FE               	bra	u2527
  2867   00112E  2E0E               	decfsz	??_calibrate_black^0,f,c
  2868   001130  D7FC               	bra	u2527
  2869   001132  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2870   001134  D7FA               	bra	u2527
  2871   001136                     
  2872                           ;color.c: 212:     Black_setup.R = color_read_Red();
  2873   001136  ECAC  F00D         	call	_color_read_Red	;wreg free
  2874   00113A  C005  F04F         	movff	?_color_read_Red,_Black_setup
  2875   00113E  C006  F050         	movff	?_color_read_Red+1,_Black_setup+1
  2876   001142  6A51               	clrf	(_Black_setup+2)^0,c
  2877   001144  6A52               	clrf	(_Black_setup+3)^0,c
  2878   001146                     
  2879                           ;color.c: 213:     set_led_color(0b010);
  2880   001146  0E00               	movlw	0
  2881   001148  6E02               	movwf	(set_led_color@color+1)^0,c
  2882   00114A  0E02               	movlw	2
  2883   00114C  6E01               	movwf	set_led_color@color^0,c
  2884   00114E  EC95  F00E         	call	_set_led_color	;wreg free
  2885   001152                     
  2886                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2887   001152  0E12               	movlw	18
  2888   001154  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2889   001156  0EDC               	movlw	220
  2890   001158  6E0E               	movwf	??_calibrate_black^0,c
  2891   00115A  0E60               	movlw	96
  2892   00115C                     u2537:
  2893   00115C  2EE8               	decfsz	wreg,f,c
  2894   00115E  D7FE               	bra	u2537
  2895   001160  2E0E               	decfsz	??_calibrate_black^0,f,c
  2896   001162  D7FC               	bra	u2537
  2897   001164  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2898   001166  D7FA               	bra	u2537
  2899                           
  2900                           ;color.c: 215:     Black_setup.G = color_read_Green();
  2901   001168  ECD4  F00D         	call	_color_read_Green	;wreg free
  2902   00116C  C005  F053         	movff	?_color_read_Green,_Black_setup+4
  2903   001170  C006  F054         	movff	?_color_read_Green+1,_Black_setup+5
  2904   001174  6A55               	clrf	(_Black_setup+6)^0,c
  2905   001176  6A56               	clrf	(_Black_setup+7)^0,c
  2906   001178                     
  2907                           ;color.c: 216:     set_led_color(0b001);
  2908   001178  0E00               	movlw	0
  2909   00117A  6E02               	movwf	(set_led_color@color+1)^0,c
  2910   00117C  0E01               	movlw	1
  2911   00117E  6E01               	movwf	set_led_color@color^0,c
  2912   001180  EC95  F00E         	call	_set_led_color	;wreg free
  2913   001184                     
  2914                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2915   001184  0E12               	movlw	18
  2916   001186  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2917   001188  0EDC               	movlw	220
  2918   00118A  6E0E               	movwf	??_calibrate_black^0,c
  2919   00118C  0E60               	movlw	96
  2920   00118E                     u2547:
  2921   00118E  2EE8               	decfsz	wreg,f,c
  2922   001190  D7FE               	bra	u2547
  2923   001192  2E0E               	decfsz	??_calibrate_black^0,f,c
  2924   001194  D7FC               	bra	u2547
  2925   001196  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2926   001198  D7FA               	bra	u2547
  2927   00119A                     
  2928                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  2929   00119A  EC24  F00E         	call	_color_read_Blue	;wreg free
  2930   00119E  C005  F057         	movff	?_color_read_Blue,_Black_setup+8
  2931   0011A2  C006  F058         	movff	?_color_read_Blue+1,_Black_setup+9
  2932   0011A6  6A59               	clrf	(_Black_setup+10)^0,c
  2933   0011A8  6A5A               	clrf	(_Black_setup+11)^0,c
  2934   0011AA                     
  2935                           ;color.c: 219:     set_led_color(0b000);
  2936   0011AA  0E00               	movlw	0
  2937   0011AC  6E02               	movwf	(set_led_color@color+1)^0,c
  2938   0011AE  0E00               	movlw	0
  2939   0011B0  6E01               	movwf	set_led_color@color^0,c
  2940   0011B2  EC95  F00E         	call	_set_led_color	;wreg free
  2941                           
  2942                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2943   0011B6  0E12               	movlw	18
  2944   0011B8  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2945   0011BA  0EDC               	movlw	220
  2946   0011BC  6E0E               	movwf	??_calibrate_black^0,c
  2947   0011BE  0E60               	movlw	96
  2948   0011C0                     u2557:
  2949   0011C0  2EE8               	decfsz	wreg,f,c
  2950   0011C2  D7FE               	bra	u2557
  2951   0011C4  2E0E               	decfsz	??_calibrate_black^0,f,c
  2952   0011C6  D7FC               	bra	u2557
  2953   0011C8  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2954   0011CA  D7FA               	bra	u2557
  2955   0011CC                     
  2956                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  2957   0011CC  ECFC  F00D         	call	_color_read_Clear	;wreg free
  2958   0011D0  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  2959   0011D4  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  2960   0011D8                     
  2961                           ;color.c: 222:     set_led_color(0b111);
  2962   0011D8  0E00               	movlw	0
  2963   0011DA  6E02               	movwf	(set_led_color@color+1)^0,c
  2964   0011DC  0E07               	movlw	7
  2965   0011DE  6E01               	movwf	set_led_color@color^0,c
  2966   0011E0  EC95  F00E         	call	_set_led_color	;wreg free
  2967   0011E4                     
  2968                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2969   0011E4  0E12               	movlw	18
  2970   0011E6  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2971   0011E8  0EDC               	movlw	220
  2972   0011EA  6E0E               	movwf	??_calibrate_black^0,c
  2973   0011EC  0E60               	movlw	96
  2974   0011EE                     u2567:
  2975   0011EE  2EE8               	decfsz	wreg,f,c
  2976   0011F0  D7FE               	bra	u2567
  2977   0011F2  2E0E               	decfsz	??_calibrate_black^0,f,c
  2978   0011F4  D7FC               	bra	u2567
  2979   0011F6  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2980   0011F8  D7FA               	bra	u2567
  2981   0011FA                     
  2982                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  2983   0011FA  ECFC  F00D         	call	_color_read_Clear	;wreg free
  2984   0011FE  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  2985   001202  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  2986                           
  2987                           ;color.c: 225:     set_led_color(0b000);
  2988   001206  0E00               	movlw	0
  2989   001208  6E02               	movwf	(set_led_color@color+1)^0,c
  2990   00120A  0E00               	movlw	0
  2991   00120C  6E01               	movwf	set_led_color@color^0,c
  2992   00120E  EC95  F00E         	call	_set_led_color	;wreg free
  2993   001212                     
  2994                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  2995   001212  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  2996   001216  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  2997   00121A  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  2998   00121E  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  2999   001222  ECDE  F00C         	call	___lwdiv	;wreg free
  3000   001226  C007  F014         	movff	?___lwdiv,_calibrate_black$2455
  3001   00122A  C008  F015         	movff	?___lwdiv+1,_calibrate_black$2455+1
  3002   00122E                     
  3003                           ;color.c: 226:     wall_coef = clear2/clear1/5;
  3004   00122E  C014  F007         	movff	_calibrate_black$2455,___lwdiv@dividend
  3005   001232  C015  F008         	movff	_calibrate_black$2455+1,___lwdiv@dividend+1
  3006   001236  0E00               	movlw	0
  3007   001238  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  3008   00123A  0E05               	movlw	5
  3009   00123C  6E09               	movwf	___lwdiv@divisor^0,c
  3010   00123E  ECDE  F00C         	call	___lwdiv	;wreg free
  3011   001242  C007  F0C2         	movff	?___lwdiv,_wall_coef
  3012   001246  C008  F0C3         	movff	?___lwdiv+1,_wall_coef+1
  3013   00124A  0012               	return		;funcret
  3014   00124C                     __end_of_calibrate_black:
  3015                           	callstack 0
  3016                           
  3017 ;; *************** function _set_led_color *****************
  3018 ;; Defined at:
  3019 ;;		line 154 in file "color.c"
  3020 ;; Parameters:    Size  Location     Type
  3021 ;;  color           2    0[COMRAM] unsigned int 
  3022 ;; Auto vars:     Size  Location     Type
  3023 ;;		None
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  1    wreg      void 
  3026 ;; Registers used:
  3027 ;;		None
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3033 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3036 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3037 ;;Total ram usage:        2 bytes
  3038 ;; Hardware stack levels used: 1
  3039 ;; Hardware stack levels required when called: 2
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_get_color_code
  3044 ;;		_calibrate_black
  3045 ;;		_calibrate_white
  3046 ;;		_get_wall_presence
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text12
  3051   001D2A                     __ptext12:
  3052                           	callstack 0
  3053   001D2A                     _set_led_color:
  3054                           	callstack 27
  3055   001D2A                     
  3056                           ;color.c: 158:     if(color & 0b100){
  3057   001D2A  A401               	btfss	set_led_color@color^0,2,c
  3058   001D2C  EF9A  F00E         	goto	u1311
  3059   001D30  EF9C  F00E         	goto	u1310
  3060   001D34                     u1311:
  3061   001D34  EF9F  F00E         	goto	l112
  3062   001D38                     u1310:
  3063   001D38                     
  3064                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3065   001D38  827F               	bsf	127,1,c	;volatile
  3066                           
  3067                           ;color.c: 160:     }else{
  3068   001D3A  EFA0  F00E         	goto	l113
  3069   001D3E                     l112:
  3070                           
  3071                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3072   001D3E  927F               	bcf	127,1,c	;volatile
  3073   001D40                     l113:
  3074                           
  3075                           ;color.c: 163:     if(color & 0b010){
  3076   001D40  A201               	btfss	set_led_color@color^0,1,c
  3077   001D42  EFA5  F00E         	goto	u1321
  3078   001D46  EFA7  F00E         	goto	u1320
  3079   001D4A                     u1321:
  3080   001D4A  EFAA  F00E         	goto	l114
  3081   001D4E                     u1320:
  3082   001D4E                     
  3083                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3084   001D4E  8879               	bsf	121,4,c	;volatile
  3085                           
  3086                           ;color.c: 165:     }else{
  3087   001D50  EFAB  F00E         	goto	l115
  3088   001D54                     l114:
  3089                           
  3090                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3091   001D54  9879               	bcf	121,4,c	;volatile
  3092   001D56                     l115:
  3093                           
  3094                           ;color.c: 168:     if(color & 0b001){
  3095   001D56  A001               	btfss	set_led_color@color^0,0,c
  3096   001D58  EFB0  F00E         	goto	u1331
  3097   001D5C  EFB2  F00E         	goto	u1330
  3098   001D60                     u1331:
  3099   001D60  EFB5  F00E         	goto	l116
  3100   001D64                     u1330:
  3101   001D64                     
  3102                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3103   001D64  8E7E               	bsf	126,7,c	;volatile
  3104                           
  3105                           ;color.c: 170:     }else{
  3106   001D66  EFB6  F00E         	goto	l118
  3107   001D6A                     l116:
  3108                           
  3109                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3110   001D6A  9E7E               	bcf	126,7,c	;volatile
  3111   001D6C                     l118:
  3112   001D6C  0012               	return		;funcret
  3113   001D6E                     __end_of_set_led_color:
  3114                           	callstack 0
  3115                           
  3116 ;; *************** function _color_read_Red *****************
  3117 ;; Defined at:
  3118 ;;		line 90 in file "color.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  tmp             2    9[COMRAM] unsigned int 
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  2    4[COMRAM] unsigned int 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3134 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3135 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3136 ;;Total ram usage:        7 bytes
  3137 ;; Hardware stack levels used: 1
  3138 ;; Hardware stack levels required when called: 4
  3139 ;; This function calls:
  3140 ;;		_I2C_2_Master_Read
  3141 ;;		_I2C_2_Master_RepStart
  3142 ;;		_I2C_2_Master_Start
  3143 ;;		_I2C_2_Master_Stop
  3144 ;;		_I2C_2_Master_Write
  3145 ;; This function is called by:
  3146 ;;		_get_color_code
  3147 ;;		_calibrate_black
  3148 ;;		_calibrate_white
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text13
  3153   001B58                     __ptext13:
  3154                           	callstack 0
  3155   001B58                     _color_read_Red:
  3156                           	callstack 25
  3157   001B58                     
  3158                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3159   001B58  EC51  F00F         	call	_I2C_2_Master_Start	;wreg free
  3160                           
  3161                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3162   001B5C  0E52               	movlw	82
  3163   001B5E  EC40  F00F         	call	_I2C_2_Master_Write
  3164                           
  3165                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3166   001B62  0EB6               	movlw	182
  3167   001B64  EC40  F00F         	call	_I2C_2_Master_Write
  3168                           
  3169                           ;color.c: 96:  I2C_2_Master_RepStart();
  3170   001B68  EC56  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3171                           
  3172                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3173   001B6C  0E53               	movlw	83
  3174   001B6E  EC40  F00F         	call	_I2C_2_Master_Write
  3175                           
  3176                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3177   001B72  0E01               	movlw	1
  3178   001B74  ECB7  F00E         	call	_I2C_2_Master_Read
  3179   001B78  6E07               	movwf	??_color_read_Red^0,c
  3180   001B7A  5007               	movf	??_color_read_Red^0,w,c
  3181   001B7C  6E0A               	movwf	color_read_Red@tmp^0,c
  3182   001B7E  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3183                           
  3184                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3185   001B80  0E00               	movlw	0
  3186   001B82  ECB7  F00E         	call	_I2C_2_Master_Read
  3187   001B86  6E07               	movwf	??_color_read_Red^0,c
  3188   001B88  5007               	movf	??_color_read_Red^0,w,c
  3189   001B8A  6E09               	movwf	(??_color_read_Red+2)^0,c
  3190   001B8C  6A08               	clrf	(??_color_read_Red+1)^0,c
  3191   001B8E  500A               	movf	color_read_Red@tmp^0,w,c
  3192   001B90  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3193   001B92  6E0A               	movwf	color_read_Red@tmp^0,c
  3194   001B94  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3195   001B96  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3196   001B98  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3197                           
  3198                           ;color.c: 100:  I2C_2_Master_Stop();
  3199   001B9A  EC4C  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3200   001B9E                     
  3201                           ;color.c: 101:  return tmp;
  3202   001B9E  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3203   001BA2  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3204   001BA6  0012               	return		;funcret
  3205   001BA8                     __end_of_color_read_Red:
  3206                           	callstack 0
  3207                           
  3208 ;; *************** function _color_read_Green *****************
  3209 ;; Defined at:
  3210 ;;		line 118 in file "color.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;		None
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  tmp             2    9[COMRAM] unsigned int 
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  2    4[COMRAM] unsigned int 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2, status,0, cstack
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3224 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3227 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3228 ;;Total ram usage:        7 bytes
  3229 ;; Hardware stack levels used: 1
  3230 ;; Hardware stack levels required when called: 4
  3231 ;; This function calls:
  3232 ;;		_I2C_2_Master_Read
  3233 ;;		_I2C_2_Master_RepStart
  3234 ;;		_I2C_2_Master_Start
  3235 ;;		_I2C_2_Master_Stop
  3236 ;;		_I2C_2_Master_Write
  3237 ;; This function is called by:
  3238 ;;		_get_color_code
  3239 ;;		_calibrate_black
  3240 ;;		_calibrate_white
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text14
  3245   001BA8                     __ptext14:
  3246                           	callstack 0
  3247   001BA8                     _color_read_Green:
  3248                           	callstack 25
  3249   001BA8                     
  3250                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3251   001BA8  EC51  F00F         	call	_I2C_2_Master_Start	;wreg free
  3252                           
  3253                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3254   001BAC  0E52               	movlw	82
  3255   001BAE  EC40  F00F         	call	_I2C_2_Master_Write
  3256                           
  3257                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3258   001BB2  0EB8               	movlw	184
  3259   001BB4  EC40  F00F         	call	_I2C_2_Master_Write
  3260                           
  3261                           ;color.c: 124:  I2C_2_Master_RepStart();
  3262   001BB8  EC56  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3263                           
  3264                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3265   001BBC  0E53               	movlw	83
  3266   001BBE  EC40  F00F         	call	_I2C_2_Master_Write
  3267                           
  3268                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3269   001BC2  0E01               	movlw	1
  3270   001BC4  ECB7  F00E         	call	_I2C_2_Master_Read
  3271   001BC8  6E07               	movwf	??_color_read_Green^0,c
  3272   001BCA  5007               	movf	??_color_read_Green^0,w,c
  3273   001BCC  6E0A               	movwf	color_read_Green@tmp^0,c
  3274   001BCE  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3275                           
  3276                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3277   001BD0  0E00               	movlw	0
  3278   001BD2  ECB7  F00E         	call	_I2C_2_Master_Read
  3279   001BD6  6E07               	movwf	??_color_read_Green^0,c
  3280   001BD8  5007               	movf	??_color_read_Green^0,w,c
  3281   001BDA  6E09               	movwf	(??_color_read_Green+2)^0,c
  3282   001BDC  6A08               	clrf	(??_color_read_Green+1)^0,c
  3283   001BDE  500A               	movf	color_read_Green@tmp^0,w,c
  3284   001BE0  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3285   001BE2  6E0A               	movwf	color_read_Green@tmp^0,c
  3286   001BE4  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3287   001BE6  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3288   001BE8  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3289                           
  3290                           ;color.c: 128:  I2C_2_Master_Stop();
  3291   001BEA  EC4C  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3292   001BEE                     
  3293                           ;color.c: 129:  return tmp;
  3294   001BEE  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3295   001BF2  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3296   001BF6  0012               	return		;funcret
  3297   001BF8                     __end_of_color_read_Green:
  3298                           	callstack 0
  3299                           
  3300 ;; *************** function _color_read_Clear *****************
  3301 ;; Defined at:
  3302 ;;		line 132 in file "color.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;  tmp             2    9[COMRAM] unsigned int 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  2    4[COMRAM] unsigned int 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3317 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3318 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3319 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3320 ;;Total ram usage:        7 bytes
  3321 ;; Hardware stack levels used: 1
  3322 ;; Hardware stack levels required when called: 4
  3323 ;; This function calls:
  3324 ;;		_I2C_2_Master_Read
  3325 ;;		_I2C_2_Master_RepStart
  3326 ;;		_I2C_2_Master_Start
  3327 ;;		_I2C_2_Master_Stop
  3328 ;;		_I2C_2_Master_Write
  3329 ;; This function is called by:
  3330 ;;		_calibrate_black
  3331 ;;		_get_wall_presence
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           	psect	text15
  3336   001BF8                     __ptext15:
  3337                           	callstack 0
  3338   001BF8                     _color_read_Clear:
  3339                           	callstack 25
  3340   001BF8                     
  3341                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3342   001BF8  EC51  F00F         	call	_I2C_2_Master_Start	;wreg free
  3343                           
  3344                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3345   001BFC  0E52               	movlw	82
  3346   001BFE  EC40  F00F         	call	_I2C_2_Master_Write
  3347                           
  3348                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3349   001C02  0EB4               	movlw	180
  3350   001C04  EC40  F00F         	call	_I2C_2_Master_Write
  3351                           
  3352                           ;color.c: 138:  I2C_2_Master_RepStart();
  3353   001C08  EC56  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3354                           
  3355                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3356   001C0C  0E53               	movlw	83
  3357   001C0E  EC40  F00F         	call	_I2C_2_Master_Write
  3358                           
  3359                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3360   001C12  0E01               	movlw	1
  3361   001C14  ECB7  F00E         	call	_I2C_2_Master_Read
  3362   001C18  6E07               	movwf	??_color_read_Clear^0,c
  3363   001C1A  5007               	movf	??_color_read_Clear^0,w,c
  3364   001C1C  6E0A               	movwf	color_read_Clear@tmp^0,c
  3365   001C1E  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3366                           
  3367                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3368   001C20  0E00               	movlw	0
  3369   001C22  ECB7  F00E         	call	_I2C_2_Master_Read
  3370   001C26  6E07               	movwf	??_color_read_Clear^0,c
  3371   001C28  5007               	movf	??_color_read_Clear^0,w,c
  3372   001C2A  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3373   001C2C  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3374   001C2E  500A               	movf	color_read_Clear@tmp^0,w,c
  3375   001C30  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3376   001C32  6E0A               	movwf	color_read_Clear@tmp^0,c
  3377   001C34  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3378   001C36  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3379   001C38  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3380                           
  3381                           ;color.c: 142:  I2C_2_Master_Stop();
  3382   001C3A  EC4C  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3383   001C3E                     
  3384                           ;color.c: 143:  return tmp;
  3385   001C3E  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3386   001C42  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3387   001C46  0012               	return		;funcret
  3388   001C48                     __end_of_color_read_Clear:
  3389                           	callstack 0
  3390                           
  3391 ;; *************** function _color_read_Blue *****************
  3392 ;; Defined at:
  3393 ;;		line 104 in file "color.c"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;		None
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;  tmp             2    9[COMRAM] unsigned int 
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  2    4[COMRAM] unsigned int 
  3400 ;; Registers used:
  3401 ;;		wreg, status,2, status,0, cstack
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3409 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3410 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3411 ;;Total ram usage:        7 bytes
  3412 ;; Hardware stack levels used: 1
  3413 ;; Hardware stack levels required when called: 4
  3414 ;; This function calls:
  3415 ;;		_I2C_2_Master_Read
  3416 ;;		_I2C_2_Master_RepStart
  3417 ;;		_I2C_2_Master_Start
  3418 ;;		_I2C_2_Master_Stop
  3419 ;;		_I2C_2_Master_Write
  3420 ;; This function is called by:
  3421 ;;		_get_color_code
  3422 ;;		_calibrate_black
  3423 ;;		_calibrate_white
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427                           	psect	text16
  3428   001C48                     __ptext16:
  3429                           	callstack 0
  3430   001C48                     _color_read_Blue:
  3431                           	callstack 25
  3432   001C48                     
  3433                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3434   001C48  EC51  F00F         	call	_I2C_2_Master_Start	;wreg free
  3435                           
  3436                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3437   001C4C  0E52               	movlw	82
  3438   001C4E  EC40  F00F         	call	_I2C_2_Master_Write
  3439                           
  3440                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3441   001C52  0EBA               	movlw	186
  3442   001C54  EC40  F00F         	call	_I2C_2_Master_Write
  3443                           
  3444                           ;color.c: 110:  I2C_2_Master_RepStart();
  3445   001C58  EC56  F00F         	call	_I2C_2_Master_RepStart	;wreg free
  3446                           
  3447                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3448   001C5C  0E53               	movlw	83
  3449   001C5E  EC40  F00F         	call	_I2C_2_Master_Write
  3450                           
  3451                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3452   001C62  0E01               	movlw	1
  3453   001C64  ECB7  F00E         	call	_I2C_2_Master_Read
  3454   001C68  6E07               	movwf	??_color_read_Blue^0,c
  3455   001C6A  5007               	movf	??_color_read_Blue^0,w,c
  3456   001C6C  6E0A               	movwf	color_read_Blue@tmp^0,c
  3457   001C6E  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3458                           
  3459                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3460   001C70  0E00               	movlw	0
  3461   001C72  ECB7  F00E         	call	_I2C_2_Master_Read
  3462   001C76  6E07               	movwf	??_color_read_Blue^0,c
  3463   001C78  5007               	movf	??_color_read_Blue^0,w,c
  3464   001C7A  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3465   001C7C  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3466   001C7E  500A               	movf	color_read_Blue@tmp^0,w,c
  3467   001C80  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3468   001C82  6E0A               	movwf	color_read_Blue@tmp^0,c
  3469   001C84  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3470   001C86  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3471   001C88  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3472                           
  3473                           ;color.c: 114:  I2C_2_Master_Stop();
  3474   001C8A  EC4C  F00F         	call	_I2C_2_Master_Stop	;wreg free
  3475   001C8E                     
  3476                           ;color.c: 115:  return tmp;
  3477   001C8E  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3478   001C92  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3479   001C96  0012               	return		;funcret
  3480   001C98                     __end_of_color_read_Blue:
  3481                           	callstack 0
  3482                           
  3483 ;; *************** function _I2C_2_Master_Write *****************
  3484 ;; Defined at:
  3485 ;;		line 45 in file "i2c.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  data_byte       1    wreg     unsigned char 
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  data_byte       1    1[COMRAM] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, status,2, status,0, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3503 ;;Total ram usage:        1 bytes
  3504 ;; Hardware stack levels used: 1
  3505 ;; Hardware stack levels required when called: 3
  3506 ;; This function calls:
  3507 ;;		_I2C_2_Master_Idle
  3508 ;; This function is called by:
  3509 ;;		_color_writetoaddr
  3510 ;;		_color_read_Red
  3511 ;;		_color_read_Blue
  3512 ;;		_color_read_Green
  3513 ;;		_color_read_Clear
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text17
  3518   001E80                     __ptext17:
  3519                           	callstack 0
  3520   001E80                     _I2C_2_Master_Write:
  3521                           	callstack 25
  3522                           
  3523                           ;incstack = 0
  3524                           ;I2C_2_Master_Write@data_byte stored from wreg
  3525   001E80  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3526   001E82                     
  3527                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3528   001E82  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3529   001E86                     
  3530                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3531   001E86  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3532   001E8A  0012               	return		;funcret
  3533   001E8C                     __end_of_I2C_2_Master_Write:
  3534                           	callstack 0
  3535                           
  3536 ;; *************** function _I2C_2_Master_Stop *****************
  3537 ;; Defined at:
  3538 ;;		line 39 in file "i2c.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;		None
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, status,2, status,0, cstack
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3556 ;;Total ram usage:        0 bytes
  3557 ;; Hardware stack levels used: 1
  3558 ;; Hardware stack levels required when called: 3
  3559 ;; This function calls:
  3560 ;;		_I2C_2_Master_Idle
  3561 ;; This function is called by:
  3562 ;;		_color_writetoaddr
  3563 ;;		_color_read_Red
  3564 ;;		_color_read_Blue
  3565 ;;		_color_read_Green
  3566 ;;		_color_read_Clear
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text18
  3571   001E98                     __ptext18:
  3572                           	callstack 0
  3573   001E98                     _I2C_2_Master_Stop:
  3574                           	callstack 25
  3575   001E98                     
  3576                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3577   001E98  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3578   001E9C                     
  3579                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3580   001E9C  010E               	movlb	14	; () banked
  3581   001E9E  85DA               	bsf	218,2,b	;volatile
  3582   001EA0                     
  3583                           ; BSR set to: 14
  3584   001EA0  0012               	return		;funcret
  3585   001EA2                     __end_of_I2C_2_Master_Stop:
  3586                           	callstack 0
  3587                           
  3588 ;; *************** function _I2C_2_Master_Start *****************
  3589 ;; Defined at:
  3590 ;;		line 27 in file "i2c.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0, cstack
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3608 ;;Total ram usage:        0 bytes
  3609 ;; Hardware stack levels used: 1
  3610 ;; Hardware stack levels required when called: 3
  3611 ;; This function calls:
  3612 ;;		_I2C_2_Master_Idle
  3613 ;; This function is called by:
  3614 ;;		_color_writetoaddr
  3615 ;;		_color_read_Red
  3616 ;;		_color_read_Blue
  3617 ;;		_color_read_Green
  3618 ;;		_color_read_Clear
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text19
  3623   001EA2                     __ptext19:
  3624                           	callstack 0
  3625   001EA2                     _I2C_2_Master_Start:
  3626                           	callstack 25
  3627   001EA2                     
  3628                           ;i2c.c: 29:   I2C_2_Master_Idle();
  3629   001EA2  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3630   001EA6                     
  3631                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3632   001EA6  010E               	movlb	14	; () banked
  3633   001EA8  81DA               	bsf	218,0,b	;volatile
  3634   001EAA                     
  3635                           ; BSR set to: 14
  3636   001EAA  0012               	return		;funcret
  3637   001EAC                     __end_of_I2C_2_Master_Start:
  3638                           	callstack 0
  3639                           
  3640 ;; *************** function _I2C_2_Master_RepStart *****************
  3641 ;; Defined at:
  3642 ;;		line 33 in file "i2c.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;Total ram usage:        0 bytes
  3661 ;; Hardware stack levels used: 1
  3662 ;; Hardware stack levels required when called: 3
  3663 ;; This function calls:
  3664 ;;		_I2C_2_Master_Idle
  3665 ;; This function is called by:
  3666 ;;		_color_read_Red
  3667 ;;		_color_read_Blue
  3668 ;;		_color_read_Green
  3669 ;;		_color_read_Clear
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text20
  3674   001EAC                     __ptext20:
  3675                           	callstack 0
  3676   001EAC                     _I2C_2_Master_RepStart:
  3677                           	callstack 25
  3678   001EAC                     
  3679                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3680   001EAC  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3681   001EB0                     
  3682                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3683   001EB0  010E               	movlb	14	; () banked
  3684   001EB2  83DA               	bsf	218,1,b	;volatile
  3685   001EB4                     
  3686                           ; BSR set to: 14
  3687   001EB4  0012               	return		;funcret
  3688   001EB6                     __end_of_I2C_2_Master_RepStart:
  3689                           	callstack 0
  3690                           
  3691 ;; *************** function _I2C_2_Master_Read *****************
  3692 ;; Defined at:
  3693 ;;		line 51 in file "i2c.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  ack             1    wreg     unsigned char 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  ack             1    2[COMRAM] unsigned char 
  3698 ;;  tmp             1    3[COMRAM] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      unsigned char 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3709 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3711 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3712 ;;Total ram usage:        3 bytes
  3713 ;; Hardware stack levels used: 1
  3714 ;; Hardware stack levels required when called: 3
  3715 ;; This function calls:
  3716 ;;		_I2C_2_Master_Idle
  3717 ;; This function is called by:
  3718 ;;		_color_read_Red
  3719 ;;		_color_read_Blue
  3720 ;;		_color_read_Green
  3721 ;;		_color_read_Clear
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text21
  3726   001D6E                     __ptext21:
  3727                           	callstack 0
  3728   001D6E                     _I2C_2_Master_Read:
  3729                           	callstack 25
  3730                           
  3731                           ; BSR set to: 14
  3732                           ;incstack = 0
  3733                           ;I2C_2_Master_Read@ack stored from wreg
  3734   001D6E  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3735   001D70                     
  3736                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3737   001D70  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3738   001D74                     
  3739                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3740   001D74  010E               	movlb	14	; () banked
  3741   001D76  87DA               	bsf	218,3,b	;volatile
  3742                           
  3743                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3744   001D78  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3745   001D7C                     
  3746                           ;i2c.c: 57:   tmp = SSP2BUF;
  3747   001D7C  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3748                           
  3749                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3750   001D80  ECED  F00E         	call	_I2C_2_Master_Idle	;wreg free
  3751   001D84                     
  3752                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3753   001D84  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3754   001D86  B4D8               	btfsc	status,2,c
  3755   001D88  EFC8  F00E         	goto	u1271
  3756   001D8C  EFCC  F00E         	goto	u1270
  3757   001D90                     u1271:
  3758   001D90  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3759   001D92  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3760   001D94  EFCD  F00E         	goto	u1288
  3761   001D98                     u1270:
  3762   001D98  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3763   001D9A                     u1288:
  3764   001D9A  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3765   001D9C  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3766   001D9E  010E               	movlb	14	; () banked
  3767   001DA0  51DA               	movf	218,w,b	;volatile
  3768   001DA2  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3769   001DA4  0BDF               	andlw	-33
  3770   001DA6  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3771   001DA8  6FDA               	movwf	218,b	;volatile
  3772   001DAA                     
  3773                           ; BSR set to: 14
  3774                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3775   001DAA  89DA               	bsf	218,4,b	;volatile
  3776   001DAC                     
  3777                           ; BSR set to: 14
  3778                           ;i2c.c: 61:   return tmp;
  3779   001DAC  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3780   001DAE                     
  3781                           ; BSR set to: 14
  3782   001DAE  0012               	return		;funcret
  3783   001DB0                     __end_of_I2C_2_Master_Read:
  3784                           	callstack 0
  3785                           
  3786 ;; *************** function _I2C_2_Master_Idle *****************
  3787 ;; Defined at:
  3788 ;;		line 22 in file "i2c.c"
  3789 ;; Parameters:    Size  Location     Type
  3790 ;;		None
  3791 ;; Auto vars:     Size  Location     Type
  3792 ;;		None
  3793 ;; Return value:  Size  Location     Type
  3794 ;;                  1    wreg      void 
  3795 ;; Registers used:
  3796 ;;		wreg, status,2, status,0
  3797 ;; Tracked objects:
  3798 ;;		On entry : 0/0
  3799 ;;		On exit  : 0/0
  3800 ;;		Unchanged: 0/0
  3801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3806 ;;Total ram usage:        1 bytes
  3807 ;; Hardware stack levels used: 1
  3808 ;; Hardware stack levels required when called: 2
  3809 ;; This function calls:
  3810 ;;		Nothing
  3811 ;; This function is called by:
  3812 ;;		_I2C_2_Master_Start
  3813 ;;		_I2C_2_Master_RepStart
  3814 ;;		_I2C_2_Master_Stop
  3815 ;;		_I2C_2_Master_Write
  3816 ;;		_I2C_2_Master_Read
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           	psect	text22
  3821   001DDA                     __ptext22:
  3822                           	callstack 0
  3823   001DDA                     _I2C_2_Master_Idle:
  3824                           	callstack 25
  3825   001DDA                     l347:
  3826   001DDA  010E               	movlb	14	; () banked
  3827   001DDC  B5D8               	btfsc	216,2,b	;volatile
  3828   001DDE  EFF3  F00E         	goto	u1221
  3829   001DE2  EFF5  F00E         	goto	u1220
  3830   001DE6                     u1221:
  3831   001DE6  EFED  F00E         	goto	l347
  3832   001DEA                     u1220:
  3833   001DEA                     
  3834                           ; BSR set to: 14
  3835   001DEA  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  3836   001DEE  0E1F               	movlw	31
  3837   001DF0  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  3838   001DF2  A4D8               	btfss	status,2,c
  3839   001DF4  EFFE  F00E         	goto	u1231
  3840   001DF8  EF00  F00F         	goto	u1230
  3841   001DFC                     u1231:
  3842   001DFC  EFED  F00E         	goto	l347
  3843   001E00                     u1230:
  3844   001E00                     
  3845                           ; BSR set to: 14
  3846   001E00  0012               	return		;funcret
  3847   001E02                     __end_of_I2C_2_Master_Idle:
  3848                           	callstack 0
  3849                           
  3850 ;; *************** function _I2C_2_Master_Init *****************
  3851 ;; Defined at:
  3852 ;;		line 4 in file "i2c.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3870 ;;Total ram usage:        0 bytes
  3871 ;; Hardware stack levels used: 1
  3872 ;; Hardware stack levels required when called: 2
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		_color_click_init
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text23
  3881   001DB0                     __ptext23:
  3882                           	callstack 0
  3883   001DB0                     _I2C_2_Master_Init:
  3884                           	callstack 27
  3885   001DB0                     
  3886                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3887   001DB0  010E               	movlb	14	; () banked
  3888   001DB2  51D9               	movf	217,w,b	;volatile
  3889   001DB4  0BF0               	andlw	-16
  3890   001DB6  0908               	iorlw	8
  3891   001DB8  6FD9               	movwf	217,b	;volatile
  3892   001DBA                     
  3893                           ; BSR set to: 14
  3894                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  3895   001DBA  8BD9               	bsf	217,5,b	;volatile
  3896                           
  3897                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  3898   001DBC  0E9F               	movlw	159
  3899   001DBE  6FD6               	movwf	214,b	;volatile
  3900   001DC0                     
  3901                           ; BSR set to: 14
  3902                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  3903   001DC0  8A84               	bsf	132,5,c	;volatile
  3904   001DC2                     
  3905                           ; BSR set to: 14
  3906                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  3907   001DC2  8C84               	bsf	132,6,c	;volatile
  3908   001DC4                     
  3909                           ; BSR set to: 14
  3910                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  3911   001DC4  9BA7               	bcf	167,5,b	;volatile
  3912   001DC6                     
  3913                           ; BSR set to: 14
  3914                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  3915   001DC6  9DA7               	bcf	167,6,b	;volatile
  3916                           
  3917                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  3918   001DC8  0E1D               	movlw	29
  3919   001DCA  6F1D               	movwf	29,b	;volatile
  3920                           
  3921                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  3922   001DCC  0E1E               	movlw	30
  3923   001DCE  6F1C               	movwf	28,b	;volatile
  3924                           
  3925                           ;i2c.c: 18:   RD5PPS=0x1C;
  3926   001DD0  0E1C               	movlw	28
  3927   001DD2  6F6F               	movwf	111,b	;volatile
  3928                           
  3929                           ;i2c.c: 19:   RD6PPS=0x1B;
  3930   001DD4  0E1B               	movlw	27
  3931   001DD6  6F70               	movwf	112,b	;volatile
  3932   001DD8                     
  3933                           ; BSR set to: 14
  3934   001DD8  0012               	return		;funcret
  3935   001DDA                     __end_of_I2C_2_Master_Init:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _add_seconds_to_list *****************
  3939 ;; Defined at:
  3940 ;;		line 446 in file "dc_motor.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3956 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3957 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;Total ram usage:        2 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 2
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_main
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text24
  3969   001CE2                     __ptext24:
  3970                           	callstack 0
  3971   001CE2                     _add_seconds_to_list:
  3972                           	callstack 28
  3973   001CE2                     
  3974                           ;dc_motor.c: 448:     if (seconds > 22)
  3975   001CE2  BE5E               	btfsc	(_seconds+1)^0,7,c
  3976   001CE4  EF7D  F00E         	goto	u2021
  3977   001CE8  505E               	movf	(_seconds+1)^0,w,c
  3978   001CEA  E109               	bnz	u2020
  3979   001CEC  0E17               	movlw	23
  3980   001CEE  5C5D               	subwf	_seconds^0,w,c
  3981   001CF0  A0D8               	btfss	status,0,c
  3982   001CF2  EF7D  F00E         	goto	u2021
  3983   001CF6  EF7F  F00E         	goto	u2020
  3984   001CFA                     u2021:
  3985   001CFA  EF94  F00E         	goto	l302
  3986   001CFE                     u2020:
  3987   001CFE                     
  3988                           ;dc_motor.c: 449:     {;dc_motor.c: 450:         movement_list[index] = seconds - 11;
  3989   001CFE  0EF5               	movlw	245
  3990   001D00  245D               	addwf	_seconds^0,w,c
  3991   001D02  6E01               	movwf	??_add_seconds_to_list^0,c
  3992   001D04  0EFF               	movlw	255
  3993   001D06  205E               	addwfc	(_seconds+1)^0,w,c
  3994   001D08  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  3995   001D0A  90D8               	bcf	status,0,c
  3996   001D0C  345B               	rlcf	_index^0,w,c
  3997   001D0E  6ED9               	movwf	fsr2l,c
  3998   001D10  345C               	rlcf	(_index+1)^0,w,c
  3999   001D12  6EDA               	movwf	fsr2h,c
  4000   001D14  0E6C               	movlw	low _movement_list
  4001   001D16  26D9               	addwf	fsr2l,f,c
  4002   001D18  0E01               	movlw	high _movement_list
  4003   001D1A  22DA               	addwfc	fsr2h,f,c
  4004   001D1C  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4005   001D20  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4006   001D24                     
  4007                           ;dc_motor.c: 451:         index++;
  4008   001D24  4A5B               	infsnz	_index^0,f,c
  4009   001D26  2A5C               	incf	(_index+1)^0,f,c
  4010   001D28                     l302:
  4011   001D28  0012               	return		;funcret
  4012   001D2A                     __end_of_add_seconds_to_list:
  4013                           	callstack 0
  4014                           
  4015 ;; *************** function _Timer0_init *****************
  4016 ;; Defined at:
  4017 ;;		line 7 in file "timers.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;		None
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4035 ;;Total ram usage:        0 bytes
  4036 ;; Hardware stack levels used: 1
  4037 ;; Hardware stack levels required when called: 2
  4038 ;; This function calls:
  4039 ;;		Nothing
  4040 ;; This function is called by:
  4041 ;;		_main
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text25
  4046   001E48                     __ptext25:
  4047                           	callstack 0
  4048   001E48                     _Timer0_init:
  4049                           	callstack 28
  4050   001E48                     
  4051                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4052   001E48  50D6               	movf	214,w,c	;volatile
  4053   001E4A  0B1F               	andlw	-225
  4054   001E4C  0940               	iorlw	64
  4055   001E4E  6ED6               	movwf	214,c	;volatile
  4056   001E50                     
  4057                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4058   001E50  88D6               	bsf	214,4,c	;volatile
  4059                           
  4060                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4061   001E52  50D6               	movf	214,w,c	;volatile
  4062   001E54  0BF0               	andlw	-16
  4063   001E56  0908               	iorlw	8
  4064   001E58  6ED6               	movwf	214,c	;volatile
  4065                           
  4066                           ;timers.c: 13:     TMR0H=0b11100111;
  4067   001E5A  0EE7               	movlw	231
  4068   001E5C  6ED4               	movwf	212,c	;volatile
  4069                           
  4070                           ;timers.c: 14:     TMR0L=0b10010101;
  4071   001E5E  0E95               	movlw	149
  4072   001E60  6ED3               	movwf	211,c	;volatile
  4073   001E62                     
  4074                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4075   001E62  88D5               	bsf	213,4,c	;volatile
  4076   001E64                     
  4077                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4078   001E64  8ED5               	bsf	213,7,c	;volatile
  4079   001E66  0012               	return		;funcret
  4080   001E68                     __end_of_Timer0_init:
  4081                           	callstack 0
  4082                           
  4083 ;; *************** function _RobotMovement *****************
  4084 ;; Defined at:
  4085 ;;		line 327 in file "dc_motor.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  color           2   35[COMRAM] unsigned int 
  4088 ;;  motorL          2   37[COMRAM] PTR struct DC_motor
  4089 ;;		 -> main@motorL(9), 
  4090 ;;  motorR          2   39[COMRAM] PTR struct DC_motor
  4091 ;;		 -> main@motorR(9), 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  i               2   45[COMRAM] int 
  4094 ;;  i               2   43[COMRAM] int 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4104 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4106 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4107 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4108 ;;Total ram usage:       12 bytes
  4109 ;; Hardware stack levels used: 1
  4110 ;; Hardware stack levels required when called: 6
  4111 ;; This function calls:
  4112 ;;		_moveBack
  4113 ;;		_return_back
  4114 ;;		_stop
  4115 ;;		_turnLeft
  4116 ;;		_turnLeftLong
  4117 ;;		_turnRight
  4118 ;;		_turnRightLong
  4119 ;; This function is called by:
  4120 ;;		_main
  4121 ;; This function uses a non-reentrant model
  4122 ;;
  4123                           
  4124                           	psect	text26
  4125   000032                     __ptext26:
  4126                           	callstack 0
  4127   000032                     _RobotMovement:
  4128                           	callstack 24
  4129   000032                     
  4130                           ;dc_motor.c: 327: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 328: {;dc_motor.c: 330:     if(color == 0){
  4131   000032  5024               	movf	RobotMovement@color^0,w,c
  4132   000034  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4133   000036  A4D8               	btfss	status,2,c
  4134   000038  EF20  F000         	goto	u1861
  4135   00003C  EF22  F000         	goto	u1860
  4136   000040                     u1861:
  4137   000040  EF3B  F000         	goto	l2858
  4138   000044                     u1860:
  4139   000044                     
  4140                           ;dc_motor.c: 331:         turnRight(motorL, motorR);
  4141   000044  C026  F014         	movff	RobotMovement@motorL,turnRight@mL
  4142   000048  C027  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4143   00004C  C028  F016         	movff	RobotMovement@motorR,turnRight@mR
  4144   000050  C029  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4145   000054  EC46  F007         	call	_turnRight	;wreg free
  4146   000058                     
  4147                           ;dc_motor.c: 332:         movement_list[index] = -1;
  4148   000058  90D8               	bcf	status,0,c
  4149   00005A  345B               	rlcf	_index^0,w,c
  4150   00005C  6ED9               	movwf	fsr2l,c
  4151   00005E  345C               	rlcf	(_index+1)^0,w,c
  4152   000060  6EDA               	movwf	fsr2h,c
  4153   000062  0E6C               	movlw	low _movement_list
  4154   000064  26D9               	addwf	fsr2l,f,c
  4155   000066  0E01               	movlw	high _movement_list
  4156   000068  22DA               	addwfc	fsr2h,f,c
  4157   00006A  0EFF               	movlw	255
  4158   00006C  6EDE               	movwf	postinc2,c
  4159   00006E  0EFF               	movlw	255
  4160   000070  6EDD               	movwf	postdec2,c
  4161   000072                     
  4162                           ;dc_motor.c: 333:         index++;
  4163   000072  4A5B               	infsnz	_index^0,f,c
  4164   000074  2A5C               	incf	(_index+1)^0,f,c
  4165   000076                     l2858:
  4166                           
  4167                           ;dc_motor.c: 336:     if(color == 1){
  4168   000076  0424               	decf	RobotMovement@color^0,w,c
  4169   000078  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4170   00007A  A4D8               	btfss	status,2,c
  4171   00007C  EF42  F000         	goto	u1871
  4172   000080  EF44  F000         	goto	u1870
  4173   000084                     u1871:
  4174   000084  EF5D  F000         	goto	l2866
  4175   000088                     u1870:
  4176   000088                     
  4177                           ;dc_motor.c: 337:         turnLeft(motorL, motorR);
  4178   000088  C026  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4179   00008C  C027  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4180   000090  C028  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4181   000094  C029  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4182   000098  EC99  F006         	call	_turnLeft	;wreg free
  4183   00009C                     
  4184                           ;dc_motor.c: 338:         movement_list[index] = -2;
  4185   00009C  90D8               	bcf	status,0,c
  4186   00009E  345B               	rlcf	_index^0,w,c
  4187   0000A0  6ED9               	movwf	fsr2l,c
  4188   0000A2  345C               	rlcf	(_index+1)^0,w,c
  4189   0000A4  6EDA               	movwf	fsr2h,c
  4190   0000A6  0E6C               	movlw	low _movement_list
  4191   0000A8  26D9               	addwf	fsr2l,f,c
  4192   0000AA  0E01               	movlw	high _movement_list
  4193   0000AC  22DA               	addwfc	fsr2h,f,c
  4194   0000AE  0EFE               	movlw	254
  4195   0000B0  6EDE               	movwf	postinc2,c
  4196   0000B2  0EFF               	movlw	255
  4197   0000B4  6EDD               	movwf	postdec2,c
  4198   0000B6                     
  4199                           ;dc_motor.c: 339:         index++;
  4200   0000B6  4A5B               	infsnz	_index^0,f,c
  4201   0000B8  2A5C               	incf	(_index+1)^0,f,c
  4202   0000BA                     l2866:
  4203                           
  4204                           ;dc_motor.c: 342:     if(color == 2){
  4205   0000BA  0E02               	movlw	2
  4206   0000BC  1824               	xorwf	RobotMovement@color^0,w,c
  4207   0000BE  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4208   0000C0  A4D8               	btfss	status,2,c
  4209   0000C2  EF65  F000         	goto	u1881
  4210   0000C6  EF67  F000         	goto	u1880
  4211   0000CA                     u1881:
  4212   0000CA  EF94  F000         	goto	l2884
  4213   0000CE                     u1880:
  4214   0000CE                     
  4215                           ;dc_motor.c: 343:         int i;;dc_motor.c: 344:         for (i=0;i<2;i++){
  4216   0000CE  0E00               	movlw	0
  4217   0000D0  6E2D               	movwf	(RobotMovement@i+1)^0,c
  4218   0000D2  0E00               	movlw	0
  4219   0000D4  6E2C               	movwf	RobotMovement@i^0,c
  4220   0000D6                     l2874:
  4221                           
  4222                           ;dc_motor.c: 345:             turnRight(motorL, motorR);
  4223   0000D6  C026  F014         	movff	RobotMovement@motorL,turnRight@mL
  4224   0000DA  C027  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4225   0000DE  C028  F016         	movff	RobotMovement@motorR,turnRight@mR
  4226   0000E2  C029  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4227   0000E6  EC46  F007         	call	_turnRight	;wreg free
  4228   0000EA                     
  4229                           ;dc_motor.c: 346:             movement_list[index] = -1;
  4230   0000EA  90D8               	bcf	status,0,c
  4231   0000EC  345B               	rlcf	_index^0,w,c
  4232   0000EE  6ED9               	movwf	fsr2l,c
  4233   0000F0  345C               	rlcf	(_index+1)^0,w,c
  4234   0000F2  6EDA               	movwf	fsr2h,c
  4235   0000F4  0E6C               	movlw	low _movement_list
  4236   0000F6  26D9               	addwf	fsr2l,f,c
  4237   0000F8  0E01               	movlw	high _movement_list
  4238   0000FA  22DA               	addwfc	fsr2h,f,c
  4239   0000FC  0EFF               	movlw	255
  4240   0000FE  6EDE               	movwf	postinc2,c
  4241   000100  0EFF               	movlw	255
  4242   000102  6EDD               	movwf	postdec2,c
  4243   000104                     
  4244                           ;dc_motor.c: 347:             index++;
  4245   000104  4A5B               	infsnz	_index^0,f,c
  4246   000106  2A5C               	incf	(_index+1)^0,f,c
  4247   000108                     
  4248                           ;dc_motor.c: 348:         }
  4249   000108  4A2C               	infsnz	RobotMovement@i^0,f,c
  4250   00010A  2A2D               	incf	(RobotMovement@i+1)^0,f,c
  4251   00010C  BE2D               	btfsc	(RobotMovement@i+1)^0,7,c
  4252   00010E  EF92  F000         	goto	u1891
  4253   000112  502D               	movf	(RobotMovement@i+1)^0,w,c
  4254   000114  E109               	bnz	u1890
  4255   000116  0E02               	movlw	2
  4256   000118  5C2C               	subwf	RobotMovement@i^0,w,c
  4257   00011A  A0D8               	btfss	status,0,c
  4258   00011C  EF92  F000         	goto	u1891
  4259   000120  EF94  F000         	goto	u1890
  4260   000124                     u1891:
  4261   000124  EF6B  F000         	goto	l2874
  4262   000128                     u1890:
  4263   000128                     l2884:
  4264                           
  4265                           ;dc_motor.c: 351:     if(color == 3){
  4266   000128  0E03               	movlw	3
  4267   00012A  1824               	xorwf	RobotMovement@color^0,w,c
  4268   00012C  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4269   00012E  A4D8               	btfss	status,2,c
  4270   000130  EF9C  F000         	goto	u1901
  4271   000134  EF9E  F000         	goto	u1900
  4272   000138                     u1901:
  4273   000138  EF56  F001         	goto	l2904
  4274   00013C                     u1900:
  4275   00013C                     
  4276                           ;dc_motor.c: 353:         moveBack(motorL, motorR, 33);
  4277   00013C  C026  F014         	movff	RobotMovement@motorL,moveBack@mL
  4278   000140  C027  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4279   000144  C028  F016         	movff	RobotMovement@motorR,moveBack@mR
  4280   000148  C029  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4281   00014C  0E00               	movlw	0
  4282   00014E  6E19               	movwf	(moveBack@time+1)^0,c
  4283   000150  0E21               	movlw	33
  4284   000152  6E18               	movwf	moveBack@time^0,c
  4285   000154  ECA4  F00C         	call	_moveBack	;wreg free
  4286                           
  4287                           ;dc_motor.c: 354:         stop(motorL, motorR);
  4288   000158  C026  F014         	movff	RobotMovement@motorL,stop@mL
  4289   00015C  C027  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4290   000160  C028  F016         	movff	RobotMovement@motorR,stop@mR
  4291   000164  C029  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4292   000168  EC4C  F00E         	call	_stop	;wreg free
  4293                           
  4294                           ;dc_motor.c: 355:         turnRight(motorL, motorR);
  4295   00016C  C026  F014         	movff	RobotMovement@motorL,turnRight@mL
  4296   000170  C027  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4297   000174  C028  F016         	movff	RobotMovement@motorR,turnRight@mR
  4298   000178  C029  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4299   00017C  EC46  F007         	call	_turnRight	;wreg free
  4300   000180                     
  4301                           ;dc_motor.c: 357:         if (movement_list[index-1] > 10)
  4302   000180  90D8               	bcf	status,0,c
  4303   000182  345B               	rlcf	_index^0,w,c
  4304   000184  6ED9               	movwf	fsr2l,c
  4305   000186  345C               	rlcf	(_index+1)^0,w,c
  4306   000188  6EDA               	movwf	fsr2h,c
  4307   00018A  0E6A               	movlw	low (_movement_list+65534)
  4308   00018C  26D9               	addwf	fsr2l,f,c
  4309   00018E  0E01               	movlw	high (_movement_list+65534)
  4310   000190  22DA               	addwfc	fsr2h,f,c
  4311   000192  0E01               	movlw	1
  4312   000194  BEDB               	btfsc	plusw2,7,c
  4313   000196  EFD7  F000         	goto	u1911
  4314   00019A  0E01               	movlw	1
  4315   00019C  50DB               	movf	plusw2,w,c
  4316   00019E  E109               	bnz	u1910
  4317   0001A0  0E0B               	movlw	11
  4318   0001A2  5CDE               	subwf	postinc2,w,c
  4319   0001A4  A0D8               	btfss	status,0,c
  4320   0001A6  EFD7  F000         	goto	u1911
  4321   0001AA  EFD9  F000         	goto	u1910
  4322   0001AE                     u1911:
  4323   0001AE  EFF7  F000         	goto	l2894
  4324   0001B2                     u1910:
  4325   0001B2                     
  4326                           ;dc_motor.c: 358:         {;dc_motor.c: 360:             movement_list[index-1] -= 20;
  4327   0001B2  90D8               	bcf	status,0,c
  4328   0001B4  345B               	rlcf	_index^0,w,c
  4329   0001B6  6ED9               	movwf	fsr2l,c
  4330   0001B8  345C               	rlcf	(_index+1)^0,w,c
  4331   0001BA  6EDA               	movwf	fsr2h,c
  4332   0001BC  0E6A               	movlw	low (_movement_list+65534)
  4333   0001BE  26D9               	addwf	fsr2l,f,c
  4334   0001C0  0E01               	movlw	high (_movement_list+65534)
  4335   0001C2  22DA               	addwfc	fsr2h,f,c
  4336   0001C4  0EEC               	movlw	236
  4337   0001C6  26DE               	addwf	postinc2,f,c
  4338   0001C8  0EFF               	movlw	255
  4339   0001CA  22DD               	addwfc	postdec2,f,c
  4340                           
  4341                           ;dc_motor.c: 362:             movement_list[index] = -1;
  4342   0001CC  90D8               	bcf	status,0,c
  4343   0001CE  345B               	rlcf	_index^0,w,c
  4344   0001D0  6ED9               	movwf	fsr2l,c
  4345   0001D2  345C               	rlcf	(_index+1)^0,w,c
  4346   0001D4  6EDA               	movwf	fsr2h,c
  4347   0001D6  0E6C               	movlw	low _movement_list
  4348   0001D8  26D9               	addwf	fsr2l,f,c
  4349   0001DA  0E01               	movlw	high _movement_list
  4350   0001DC  22DA               	addwfc	fsr2h,f,c
  4351   0001DE  0EFF               	movlw	255
  4352   0001E0  6EDE               	movwf	postinc2,c
  4353   0001E2  0EFF               	movlw	255
  4354   0001E4  6EDD               	movwf	postdec2,c
  4355   0001E6                     
  4356                           ;dc_motor.c: 363:             index += 1;
  4357   0001E6  4A5B               	infsnz	_index^0,f,c
  4358   0001E8  2A5C               	incf	(_index+1)^0,f,c
  4359                           
  4360                           ;dc_motor.c: 364:         }else{
  4361   0001EA  EF56  F001         	goto	l2904
  4362   0001EE                     l2894:
  4363                           
  4364                           ;dc_motor.c: 366:             if (movement_list[index-1] == -1)
  4365   0001EE  90D8               	bcf	status,0,c
  4366   0001F0  345B               	rlcf	_index^0,w,c
  4367   0001F2  6ED9               	movwf	fsr2l,c
  4368   0001F4  345C               	rlcf	(_index+1)^0,w,c
  4369   0001F6  6EDA               	movwf	fsr2h,c
  4370   0001F8  0E6A               	movlw	low (_movement_list+65534)
  4371   0001FA  26D9               	addwf	fsr2l,f,c
  4372   0001FC  0E01               	movlw	high (_movement_list+65534)
  4373   0001FE  22DA               	addwfc	fsr2h,f,c
  4374   000200  28DE               	incf	postinc2,w,c
  4375   000202  E106               	bnz	u1921
  4376   000204  28DE               	incf	postinc2,w,c
  4377   000206  A4D8               	btfss	status,2,c
  4378   000208  EF08  F001         	goto	u1921
  4379   00020C  EF0A  F001         	goto	u1920
  4380   000210                     u1921:
  4381   000210  EF17  F001         	goto	l286
  4382   000214                     u1920:
  4383   000214                     
  4384                           ;dc_motor.c: 367:             {;dc_motor.c: 369:                 movement_list[index-1] 
      +                          = -2;
  4385   000214  90D8               	bcf	status,0,c
  4386   000216  345B               	rlcf	_index^0,w,c
  4387   000218  6ED9               	movwf	fsr2l,c
  4388   00021A  345C               	rlcf	(_index+1)^0,w,c
  4389   00021C  6EDA               	movwf	fsr2h,c
  4390   00021E  0E6A               	movlw	low (_movement_list+65534)
  4391   000220  26D9               	addwf	fsr2l,f,c
  4392   000222  0E01               	movlw	high (_movement_list+65534)
  4393   000224  22DA               	addwfc	fsr2h,f,c
  4394   000226  0EFE               	movlw	254
  4395   000228  6EDE               	movwf	postinc2,c
  4396   00022A  0EFF               	movlw	255
  4397   00022C  6EDD               	movwf	postdec2,c
  4398   00022E                     l286:
  4399                           
  4400                           ;dc_motor.c: 372:             if (movement_list[index-1] == -2)
  4401   00022E  90D8               	bcf	status,0,c
  4402   000230  345B               	rlcf	_index^0,w,c
  4403   000232  6ED9               	movwf	fsr2l,c
  4404   000234  345C               	rlcf	(_index+1)^0,w,c
  4405   000236  6EDA               	movwf	fsr2h,c
  4406   000238  0E6A               	movlw	low (_movement_list+65534)
  4407   00023A  26D9               	addwf	fsr2l,f,c
  4408   00023C  0E01               	movlw	high (_movement_list+65534)
  4409   00023E  22DA               	addwfc	fsr2h,f,c
  4410   000240  0EFE               	movlw	254
  4411   000242  18DE               	xorwf	postinc2,w,c
  4412   000244  E106               	bnz	u1931
  4413   000246  28DE               	incf	postinc2,w,c
  4414   000248  A4D8               	btfss	status,2,c
  4415   00024A  EF29  F001         	goto	u1931
  4416   00024E  EF2B  F001         	goto	u1930
  4417   000252                     u1931:
  4418   000252  EF38  F001         	goto	l287
  4419   000256                     u1930:
  4420   000256                     
  4421                           ;dc_motor.c: 373:             {;dc_motor.c: 375:                 movement_list[index-1] 
      +                          = -1;
  4422   000256  90D8               	bcf	status,0,c
  4423   000258  345B               	rlcf	_index^0,w,c
  4424   00025A  6ED9               	movwf	fsr2l,c
  4425   00025C  345C               	rlcf	(_index+1)^0,w,c
  4426   00025E  6EDA               	movwf	fsr2h,c
  4427   000260  0E6A               	movlw	low (_movement_list+65534)
  4428   000262  26D9               	addwf	fsr2l,f,c
  4429   000264  0E01               	movlw	high (_movement_list+65534)
  4430   000266  22DA               	addwfc	fsr2h,f,c
  4431   000268  0EFF               	movlw	255
  4432   00026A  6EDE               	movwf	postinc2,c
  4433   00026C  0EFF               	movlw	255
  4434   00026E  6EDD               	movwf	postdec2,c
  4435   000270                     l287:
  4436                           
  4437                           ;dc_motor.c: 378:         movement_list[index] = 20;
  4438   000270  90D8               	bcf	status,0,c
  4439   000272  345B               	rlcf	_index^0,w,c
  4440   000274  6ED9               	movwf	fsr2l,c
  4441   000276  345C               	rlcf	(_index+1)^0,w,c
  4442   000278  6EDA               	movwf	fsr2h,c
  4443   00027A  0E6C               	movlw	low _movement_list
  4444   00027C  26D9               	addwf	fsr2l,f,c
  4445   00027E  0E01               	movlw	high _movement_list
  4446   000280  22DA               	addwfc	fsr2h,f,c
  4447   000282  0E14               	movlw	20
  4448   000284  6EDE               	movwf	postinc2,c
  4449   000286  0E00               	movlw	0
  4450   000288  6EDD               	movwf	postdec2,c
  4451   00028A                     
  4452                           ;dc_motor.c: 379:         index += 1;
  4453   00028A  4A5B               	infsnz	_index^0,f,c
  4454   00028C  2A5C               	incf	(_index+1)^0,f,c
  4455   00028E                     
  4456                           ;dc_motor.c: 381:         movement_list[index] = -2;
  4457   00028E  90D8               	bcf	status,0,c
  4458   000290  345B               	rlcf	_index^0,w,c
  4459   000292  6ED9               	movwf	fsr2l,c
  4460   000294  345C               	rlcf	(_index+1)^0,w,c
  4461   000296  6EDA               	movwf	fsr2h,c
  4462   000298  0E6C               	movlw	low _movement_list
  4463   00029A  26D9               	addwf	fsr2l,f,c
  4464   00029C  0E01               	movlw	high _movement_list
  4465   00029E  22DA               	addwfc	fsr2h,f,c
  4466   0002A0  0EFE               	movlw	254
  4467   0002A2  6EDE               	movwf	postinc2,c
  4468   0002A4  0EFF               	movlw	255
  4469   0002A6  6EDD               	movwf	postdec2,c
  4470                           
  4471                           ;dc_motor.c: 382:         index += 1;
  4472   0002A8  4A5B               	infsnz	_index^0,f,c
  4473   0002AA  2A5C               	incf	(_index+1)^0,f,c
  4474   0002AC                     l2904:
  4475                           
  4476                           ;dc_motor.c: 387:     if(color == 4){
  4477   0002AC  0E04               	movlw	4
  4478   0002AE  1824               	xorwf	RobotMovement@color^0,w,c
  4479   0002B0  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4480   0002B2  A4D8               	btfss	status,2,c
  4481   0002B4  EF5E  F001         	goto	u1941
  4482   0002B8  EF60  F001         	goto	u1940
  4483   0002BC                     u1941:
  4484   0002BC  EF18  F002         	goto	l2924
  4485   0002C0                     u1940:
  4486   0002C0                     
  4487                           ;dc_motor.c: 389:         moveBack(motorL, motorR, 33);
  4488   0002C0  C026  F014         	movff	RobotMovement@motorL,moveBack@mL
  4489   0002C4  C027  F015         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4490   0002C8  C028  F016         	movff	RobotMovement@motorR,moveBack@mR
  4491   0002CC  C029  F017         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4492   0002D0  0E00               	movlw	0
  4493   0002D2  6E19               	movwf	(moveBack@time+1)^0,c
  4494   0002D4  0E21               	movlw	33
  4495   0002D6  6E18               	movwf	moveBack@time^0,c
  4496   0002D8  ECA4  F00C         	call	_moveBack	;wreg free
  4497                           
  4498                           ;dc_motor.c: 390:         stop(motorL, motorR);
  4499   0002DC  C026  F014         	movff	RobotMovement@motorL,stop@mL
  4500   0002E0  C027  F015         	movff	RobotMovement@motorL+1,stop@mL+1
  4501   0002E4  C028  F016         	movff	RobotMovement@motorR,stop@mR
  4502   0002E8  C029  F017         	movff	RobotMovement@motorR+1,stop@mR+1
  4503   0002EC  EC4C  F00E         	call	_stop	;wreg free
  4504                           
  4505                           ;dc_motor.c: 391:         turnLeft(motorL, motorR);
  4506   0002F0  C026  F014         	movff	RobotMovement@motorL,turnLeft@mL
  4507   0002F4  C027  F015         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4508   0002F8  C028  F016         	movff	RobotMovement@motorR,turnLeft@mR
  4509   0002FC  C029  F017         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4510   000300  EC99  F006         	call	_turnLeft	;wreg free
  4511   000304                     
  4512                           ;dc_motor.c: 393:         if (movement_list[index-1] > 10)
  4513   000304  90D8               	bcf	status,0,c
  4514   000306  345B               	rlcf	_index^0,w,c
  4515   000308  6ED9               	movwf	fsr2l,c
  4516   00030A  345C               	rlcf	(_index+1)^0,w,c
  4517   00030C  6EDA               	movwf	fsr2h,c
  4518   00030E  0E6A               	movlw	low (_movement_list+65534)
  4519   000310  26D9               	addwf	fsr2l,f,c
  4520   000312  0E01               	movlw	high (_movement_list+65534)
  4521   000314  22DA               	addwfc	fsr2h,f,c
  4522   000316  0E01               	movlw	1
  4523   000318  BEDB               	btfsc	plusw2,7,c
  4524   00031A  EF99  F001         	goto	u1951
  4525   00031E  0E01               	movlw	1
  4526   000320  50DB               	movf	plusw2,w,c
  4527   000322  E109               	bnz	u1950
  4528   000324  0E0B               	movlw	11
  4529   000326  5CDE               	subwf	postinc2,w,c
  4530   000328  A0D8               	btfss	status,0,c
  4531   00032A  EF99  F001         	goto	u1951
  4532   00032E  EF9B  F001         	goto	u1950
  4533   000332                     u1951:
  4534   000332  EFB9  F001         	goto	l2914
  4535   000336                     u1950:
  4536   000336                     
  4537                           ;dc_motor.c: 394:         {;dc_motor.c: 396:             movement_list[index-1] -= 20;
  4538   000336  90D8               	bcf	status,0,c
  4539   000338  345B               	rlcf	_index^0,w,c
  4540   00033A  6ED9               	movwf	fsr2l,c
  4541   00033C  345C               	rlcf	(_index+1)^0,w,c
  4542   00033E  6EDA               	movwf	fsr2h,c
  4543   000340  0E6A               	movlw	low (_movement_list+65534)
  4544   000342  26D9               	addwf	fsr2l,f,c
  4545   000344  0E01               	movlw	high (_movement_list+65534)
  4546   000346  22DA               	addwfc	fsr2h,f,c
  4547   000348  0EEC               	movlw	236
  4548   00034A  26DE               	addwf	postinc2,f,c
  4549   00034C  0EFF               	movlw	255
  4550   00034E  22DD               	addwfc	postdec2,f,c
  4551                           
  4552                           ;dc_motor.c: 398:             movement_list[index] = -2;
  4553   000350  90D8               	bcf	status,0,c
  4554   000352  345B               	rlcf	_index^0,w,c
  4555   000354  6ED9               	movwf	fsr2l,c
  4556   000356  345C               	rlcf	(_index+1)^0,w,c
  4557   000358  6EDA               	movwf	fsr2h,c
  4558   00035A  0E6C               	movlw	low _movement_list
  4559   00035C  26D9               	addwf	fsr2l,f,c
  4560   00035E  0E01               	movlw	high _movement_list
  4561   000360  22DA               	addwfc	fsr2h,f,c
  4562   000362  0EFE               	movlw	254
  4563   000364  6EDE               	movwf	postinc2,c
  4564   000366  0EFF               	movlw	255
  4565   000368  6EDD               	movwf	postdec2,c
  4566   00036A                     
  4567                           ;dc_motor.c: 399:             index += 1;
  4568   00036A  4A5B               	infsnz	_index^0,f,c
  4569   00036C  2A5C               	incf	(_index+1)^0,f,c
  4570                           
  4571                           ;dc_motor.c: 400:         }else{
  4572   00036E  EF18  F002         	goto	l2924
  4573   000372                     l2914:
  4574                           
  4575                           ;dc_motor.c: 402:             if (movement_list[index-1] == -1)
  4576   000372  90D8               	bcf	status,0,c
  4577   000374  345B               	rlcf	_index^0,w,c
  4578   000376  6ED9               	movwf	fsr2l,c
  4579   000378  345C               	rlcf	(_index+1)^0,w,c
  4580   00037A  6EDA               	movwf	fsr2h,c
  4581   00037C  0E6A               	movlw	low (_movement_list+65534)
  4582   00037E  26D9               	addwf	fsr2l,f,c
  4583   000380  0E01               	movlw	high (_movement_list+65534)
  4584   000382  22DA               	addwfc	fsr2h,f,c
  4585   000384  28DE               	incf	postinc2,w,c
  4586   000386  E106               	bnz	u1961
  4587   000388  28DE               	incf	postinc2,w,c
  4588   00038A  A4D8               	btfss	status,2,c
  4589   00038C  EFCA  F001         	goto	u1961
  4590   000390  EFCC  F001         	goto	u1960
  4591   000394                     u1961:
  4592   000394  EFD9  F001         	goto	l291
  4593   000398                     u1960:
  4594   000398                     
  4595                           ;dc_motor.c: 403:             {;dc_motor.c: 405:                 movement_list[index-1] 
      +                          = -2;
  4596   000398  90D8               	bcf	status,0,c
  4597   00039A  345B               	rlcf	_index^0,w,c
  4598   00039C  6ED9               	movwf	fsr2l,c
  4599   00039E  345C               	rlcf	(_index+1)^0,w,c
  4600   0003A0  6EDA               	movwf	fsr2h,c
  4601   0003A2  0E6A               	movlw	low (_movement_list+65534)
  4602   0003A4  26D9               	addwf	fsr2l,f,c
  4603   0003A6  0E01               	movlw	high (_movement_list+65534)
  4604   0003A8  22DA               	addwfc	fsr2h,f,c
  4605   0003AA  0EFE               	movlw	254
  4606   0003AC  6EDE               	movwf	postinc2,c
  4607   0003AE  0EFF               	movlw	255
  4608   0003B0  6EDD               	movwf	postdec2,c
  4609   0003B2                     l291:
  4610                           
  4611                           ;dc_motor.c: 408:             if (movement_list[index-1] == -2)
  4612   0003B2  90D8               	bcf	status,0,c
  4613   0003B4  345B               	rlcf	_index^0,w,c
  4614   0003B6  6ED9               	movwf	fsr2l,c
  4615   0003B8  345C               	rlcf	(_index+1)^0,w,c
  4616   0003BA  6EDA               	movwf	fsr2h,c
  4617   0003BC  0E6A               	movlw	low (_movement_list+65534)
  4618   0003BE  26D9               	addwf	fsr2l,f,c
  4619   0003C0  0E01               	movlw	high (_movement_list+65534)
  4620   0003C2  22DA               	addwfc	fsr2h,f,c
  4621   0003C4  0EFE               	movlw	254
  4622   0003C6  18DE               	xorwf	postinc2,w,c
  4623   0003C8  E106               	bnz	u1971
  4624   0003CA  28DE               	incf	postinc2,w,c
  4625   0003CC  A4D8               	btfss	status,2,c
  4626   0003CE  EFEB  F001         	goto	u1971
  4627   0003D2  EFED  F001         	goto	u1970
  4628   0003D6                     u1971:
  4629   0003D6  EFFA  F001         	goto	l292
  4630   0003DA                     u1970:
  4631   0003DA                     
  4632                           ;dc_motor.c: 409:             {;dc_motor.c: 411:                 movement_list[index-1] 
      +                          = -1;
  4633   0003DA  90D8               	bcf	status,0,c
  4634   0003DC  345B               	rlcf	_index^0,w,c
  4635   0003DE  6ED9               	movwf	fsr2l,c
  4636   0003E0  345C               	rlcf	(_index+1)^0,w,c
  4637   0003E2  6EDA               	movwf	fsr2h,c
  4638   0003E4  0E6A               	movlw	low (_movement_list+65534)
  4639   0003E6  26D9               	addwf	fsr2l,f,c
  4640   0003E8  0E01               	movlw	high (_movement_list+65534)
  4641   0003EA  22DA               	addwfc	fsr2h,f,c
  4642   0003EC  0EFF               	movlw	255
  4643   0003EE  6EDE               	movwf	postinc2,c
  4644   0003F0  0EFF               	movlw	255
  4645   0003F2  6EDD               	movwf	postdec2,c
  4646   0003F4                     l292:
  4647                           
  4648                           ;dc_motor.c: 414:         movement_list[index] = 20;
  4649   0003F4  90D8               	bcf	status,0,c
  4650   0003F6  345B               	rlcf	_index^0,w,c
  4651   0003F8  6ED9               	movwf	fsr2l,c
  4652   0003FA  345C               	rlcf	(_index+1)^0,w,c
  4653   0003FC  6EDA               	movwf	fsr2h,c
  4654   0003FE  0E6C               	movlw	low _movement_list
  4655   000400  26D9               	addwf	fsr2l,f,c
  4656   000402  0E01               	movlw	high _movement_list
  4657   000404  22DA               	addwfc	fsr2h,f,c
  4658   000406  0E14               	movlw	20
  4659   000408  6EDE               	movwf	postinc2,c
  4660   00040A  0E00               	movlw	0
  4661   00040C  6EDD               	movwf	postdec2,c
  4662   00040E                     
  4663                           ;dc_motor.c: 415:         index += 1;
  4664   00040E  4A5B               	infsnz	_index^0,f,c
  4665   000410  2A5C               	incf	(_index+1)^0,f,c
  4666   000412                     
  4667                           ;dc_motor.c: 417:         movement_list[index] = -1;
  4668   000412  90D8               	bcf	status,0,c
  4669   000414  345B               	rlcf	_index^0,w,c
  4670   000416  6ED9               	movwf	fsr2l,c
  4671   000418  345C               	rlcf	(_index+1)^0,w,c
  4672   00041A  6EDA               	movwf	fsr2h,c
  4673   00041C  0E6C               	movlw	low _movement_list
  4674   00041E  26D9               	addwf	fsr2l,f,c
  4675   000420  0E01               	movlw	high _movement_list
  4676   000422  22DA               	addwfc	fsr2h,f,c
  4677   000424  0EFF               	movlw	255
  4678   000426  6EDE               	movwf	postinc2,c
  4679   000428  0EFF               	movlw	255
  4680   00042A  6EDD               	movwf	postdec2,c
  4681                           
  4682                           ;dc_motor.c: 418:         index += 1;
  4683   00042C  4A5B               	infsnz	_index^0,f,c
  4684   00042E  2A5C               	incf	(_index+1)^0,f,c
  4685   000430                     l2924:
  4686                           
  4687                           ;dc_motor.c: 422:     if(color == 5){
  4688   000430  0E05               	movlw	5
  4689   000432  1824               	xorwf	RobotMovement@color^0,w,c
  4690   000434  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4691   000436  A4D8               	btfss	status,2,c
  4692   000438  EF20  F002         	goto	u1981
  4693   00043C  EF22  F002         	goto	u1980
  4694   000440                     u1981:
  4695   000440  EF3B  F002         	goto	l2932
  4696   000444                     u1980:
  4697   000444                     
  4698                           ;dc_motor.c: 423:         turnRightLong(motorL, motorR);
  4699   000444  C026  F014         	movff	RobotMovement@motorL,turnRightLong@mL
  4700   000448  C027  F015         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  4701   00044C  C028  F016         	movff	RobotMovement@motorR,turnRightLong@mR
  4702   000450  C029  F017         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  4703   000454  ECC0  F009         	call	_turnRightLong	;wreg free
  4704   000458                     
  4705                           ;dc_motor.c: 424:         movement_list[index] = -3;
  4706   000458  90D8               	bcf	status,0,c
  4707   00045A  345B               	rlcf	_index^0,w,c
  4708   00045C  6ED9               	movwf	fsr2l,c
  4709   00045E  345C               	rlcf	(_index+1)^0,w,c
  4710   000460  6EDA               	movwf	fsr2h,c
  4711   000462  0E6C               	movlw	low _movement_list
  4712   000464  26D9               	addwf	fsr2l,f,c
  4713   000466  0E01               	movlw	high _movement_list
  4714   000468  22DA               	addwfc	fsr2h,f,c
  4715   00046A  0EFD               	movlw	253
  4716   00046C  6EDE               	movwf	postinc2,c
  4717   00046E  0EFF               	movlw	255
  4718   000470  6EDD               	movwf	postdec2,c
  4719   000472                     
  4720                           ;dc_motor.c: 425:         index += 1;
  4721   000472  4A5B               	infsnz	_index^0,f,c
  4722   000474  2A5C               	incf	(_index+1)^0,f,c
  4723   000476                     l2932:
  4724                           
  4725                           ;dc_motor.c: 428:     if(color == 6){
  4726   000476  0E06               	movlw	6
  4727   000478  1824               	xorwf	RobotMovement@color^0,w,c
  4728   00047A  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4729   00047C  A4D8               	btfss	status,2,c
  4730   00047E  EF43  F002         	goto	u1991
  4731   000482  EF45  F002         	goto	u1990
  4732   000486                     u1991:
  4733   000486  EF5E  F002         	goto	l2940
  4734   00048A                     u1990:
  4735   00048A                     
  4736                           ;dc_motor.c: 429:         turnLeftLong(motorL, motorR);
  4737   00048A  C026  F014         	movff	RobotMovement@motorL,turnLeftLong@mL
  4738   00048E  C027  F015         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  4739   000492  C028  F016         	movff	RobotMovement@motorR,turnLeftLong@mR
  4740   000496  C029  F017         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  4741   00049A  EC54  F00A         	call	_turnLeftLong	;wreg free
  4742   00049E                     
  4743                           ;dc_motor.c: 430:         movement_list[index] = -4;
  4744   00049E  90D8               	bcf	status,0,c
  4745   0004A0  345B               	rlcf	_index^0,w,c
  4746   0004A2  6ED9               	movwf	fsr2l,c
  4747   0004A4  345C               	rlcf	(_index+1)^0,w,c
  4748   0004A6  6EDA               	movwf	fsr2h,c
  4749   0004A8  0E6C               	movlw	low _movement_list
  4750   0004AA  26D9               	addwf	fsr2l,f,c
  4751   0004AC  0E01               	movlw	high _movement_list
  4752   0004AE  22DA               	addwfc	fsr2h,f,c
  4753   0004B0  0EFC               	movlw	252
  4754   0004B2  6EDE               	movwf	postinc2,c
  4755   0004B4  0EFF               	movlw	255
  4756   0004B6  6EDD               	movwf	postdec2,c
  4757   0004B8                     
  4758                           ;dc_motor.c: 431:         index += 1;
  4759   0004B8  4A5B               	infsnz	_index^0,f,c
  4760   0004BA  2A5C               	incf	(_index+1)^0,f,c
  4761   0004BC                     l2940:
  4762                           
  4763                           ;dc_motor.c: 434:     if(color == 7){
  4764   0004BC  0E07               	movlw	7
  4765   0004BE  1824               	xorwf	RobotMovement@color^0,w,c
  4766   0004C0  1025               	iorwf	(RobotMovement@color+1)^0,w,c
  4767   0004C2  A4D8               	btfss	status,2,c
  4768   0004C4  EF66  F002         	goto	u2001
  4769   0004C8  EF68  F002         	goto	u2000
  4770   0004CC                     u2001:
  4771   0004CC  EF90  F002         	goto	l298
  4772   0004D0                     u2000:
  4773   0004D0                     
  4774                           ;dc_motor.c: 435:         int i;;dc_motor.c: 436:         for (i=0;i<2;i++){
  4775   0004D0  0E00               	movlw	0
  4776   0004D2  6E2F               	movwf	(RobotMovement@i_1285+1)^0,c
  4777   0004D4  0E00               	movlw	0
  4778   0004D6  6E2E               	movwf	RobotMovement@i_1285^0,c
  4779   0004D8                     l2948:
  4780                           
  4781                           ;dc_motor.c: 437:         turnRight(motorL, motorR);
  4782   0004D8  C026  F014         	movff	RobotMovement@motorL,turnRight@mL
  4783   0004DC  C027  F015         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4784   0004E0  C028  F016         	movff	RobotMovement@motorR,turnRight@mR
  4785   0004E4  C029  F017         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4786   0004E8  EC46  F007         	call	_turnRight	;wreg free
  4787   0004EC                     
  4788                           ;dc_motor.c: 438:         }
  4789   0004EC  4A2E               	infsnz	RobotMovement@i_1285^0,f,c
  4790   0004EE  2A2F               	incf	(RobotMovement@i_1285+1)^0,f,c
  4791   0004F0  BE2F               	btfsc	(RobotMovement@i_1285+1)^0,7,c
  4792   0004F2  EF84  F002         	goto	u2011
  4793   0004F6  502F               	movf	(RobotMovement@i_1285+1)^0,w,c
  4794   0004F8  E109               	bnz	u2010
  4795   0004FA  0E02               	movlw	2
  4796   0004FC  5C2E               	subwf	RobotMovement@i_1285^0,w,c
  4797   0004FE  A0D8               	btfss	status,0,c
  4798   000500  EF84  F002         	goto	u2011
  4799   000504  EF86  F002         	goto	u2010
  4800   000508                     u2011:
  4801   000508  EF6C  F002         	goto	l2948
  4802   00050C                     u2010:
  4803   00050C                     
  4804                           ;dc_motor.c: 440:         return_back(motorL, motorR);
  4805   00050C  C026  F01E         	movff	RobotMovement@motorL,return_back@motorL
  4806   000510  C027  F01F         	movff	RobotMovement@motorL+1,return_back@motorL+1
  4807   000514  C028  F020         	movff	RobotMovement@motorR,return_back@motorR
  4808   000518  C029  F021         	movff	RobotMovement@motorR+1,return_back@motorR+1
  4809   00051C  EC60  F004         	call	_return_back	;wreg free
  4810   000520                     l298:
  4811   000520  0012               	return		;funcret
  4812   000522                     __end_of_RobotMovement:
  4813                           	callstack 0
  4814                           
  4815 ;; *************** function _return_back *****************
  4816 ;; Defined at:
  4817 ;;		line 455 in file "dc_motor.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  4820 ;;		 -> main@motorR(9), main@motorL(9), 
  4821 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  4822 ;;		 -> main@motorR(9), main@motorL(9), 
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      void 
  4827 ;; Registers used:
  4828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4834 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4836 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4837 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4838 ;;Total ram usage:        6 bytes
  4839 ;; Hardware stack levels used: 1
  4840 ;; Hardware stack levels required when called: 5
  4841 ;; This function calls:
  4842 ;;		_TimedfullSpeedAhead
  4843 ;;		_stop
  4844 ;;		_turnLeft
  4845 ;;		_turnLeftLong
  4846 ;;		_turnRight
  4847 ;;		_turnRightLong
  4848 ;; This function is called by:
  4849 ;;		_RobotMovement
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text27
  4854   0008C0                     __ptext27:
  4855                           	callstack 0
  4856   0008C0                     _return_back:
  4857                           	callstack 24
  4858   0008C0                     
  4859                           ;dc_motor.c: 455: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 456: {;dc_motor.c: 457:     while (index > 0){
  4860   0008C0  EF1F  F005         	goto	l2650
  4861   0008C4                     l2628:
  4862                           
  4863                           ;dc_motor.c: 458:         if (movement_list[index-1] == -1){turnLeft(&motorL, &motorR);}
  4864   0008C4  90D8               	bcf	status,0,c
  4865   0008C6  345B               	rlcf	_index^0,w,c
  4866   0008C8  6ED9               	movwf	fsr2l,c
  4867   0008CA  345C               	rlcf	(_index+1)^0,w,c
  4868   0008CC  6EDA               	movwf	fsr2h,c
  4869   0008CE  0E6A               	movlw	low (_movement_list+65534)
  4870   0008D0  26D9               	addwf	fsr2l,f,c
  4871   0008D2  0E01               	movlw	high (_movement_list+65534)
  4872   0008D4  22DA               	addwfc	fsr2h,f,c
  4873   0008D6  28DE               	incf	postinc2,w,c
  4874   0008D8  E106               	bnz	u1491
  4875   0008DA  28DE               	incf	postinc2,w,c
  4876   0008DC  A4D8               	btfss	status,2,c
  4877   0008DE  EF73  F004         	goto	u1491
  4878   0008E2  EF75  F004         	goto	u1490
  4879   0008E6                     u1491:
  4880   0008E6  EF81  F004         	goto	l2632
  4881   0008EA                     u1490:
  4882   0008EA  0E1E               	movlw	low return_back@motorL
  4883   0008EC  6E14               	movwf	turnLeft@mL^0,c
  4884   0008EE  0E00               	movlw	high return_back@motorL
  4885   0008F0  6E15               	movwf	(turnLeft@mL+1)^0,c
  4886   0008F2  0E20               	movlw	low return_back@motorR
  4887   0008F4  6E16               	movwf	turnLeft@mR^0,c
  4888   0008F6  0E00               	movlw	high return_back@motorR
  4889   0008F8  6E17               	movwf	(turnLeft@mR+1)^0,c
  4890   0008FA  EC99  F006         	call	_turnLeft	;wreg free
  4891   0008FE  EF12  F005         	goto	l308
  4892   000902                     l2632:
  4893   000902  90D8               	bcf	status,0,c
  4894   000904  345B               	rlcf	_index^0,w,c
  4895   000906  6ED9               	movwf	fsr2l,c
  4896   000908  345C               	rlcf	(_index+1)^0,w,c
  4897   00090A  6EDA               	movwf	fsr2h,c
  4898   00090C  0E6A               	movlw	low (_movement_list+65534)
  4899   00090E  26D9               	addwf	fsr2l,f,c
  4900   000910  0E01               	movlw	high (_movement_list+65534)
  4901   000912  22DA               	addwfc	fsr2h,f,c
  4902   000914  0EFE               	movlw	254
  4903   000916  18DE               	xorwf	postinc2,w,c
  4904   000918  E106               	bnz	u1501
  4905   00091A  28DE               	incf	postinc2,w,c
  4906   00091C  A4D8               	btfss	status,2,c
  4907   00091E  EF93  F004         	goto	u1501
  4908   000922  EF95  F004         	goto	u1500
  4909   000926                     u1501:
  4910   000926  EFA1  F004         	goto	l2636
  4911   00092A                     u1500:
  4912   00092A  0E1E               	movlw	low return_back@motorL
  4913   00092C  6E14               	movwf	turnRight@mL^0,c
  4914   00092E  0E00               	movlw	high return_back@motorL
  4915   000930  6E15               	movwf	(turnRight@mL+1)^0,c
  4916   000932  0E20               	movlw	low return_back@motorR
  4917   000934  6E16               	movwf	turnRight@mR^0,c
  4918   000936  0E00               	movlw	high return_back@motorR
  4919   000938  6E17               	movwf	(turnRight@mR+1)^0,c
  4920   00093A  EC46  F007         	call	_turnRight	;wreg free
  4921   00093E  EF12  F005         	goto	l308
  4922   000942                     l2636:
  4923   000942  90D8               	bcf	status,0,c
  4924   000944  345B               	rlcf	_index^0,w,c
  4925   000946  6ED9               	movwf	fsr2l,c
  4926   000948  345C               	rlcf	(_index+1)^0,w,c
  4927   00094A  6EDA               	movwf	fsr2h,c
  4928   00094C  0E6A               	movlw	low (_movement_list+65534)
  4929   00094E  26D9               	addwf	fsr2l,f,c
  4930   000950  0E01               	movlw	high (_movement_list+65534)
  4931   000952  22DA               	addwfc	fsr2h,f,c
  4932   000954  0EFD               	movlw	253
  4933   000956  18DE               	xorwf	postinc2,w,c
  4934   000958  E106               	bnz	u1511
  4935   00095A  28DE               	incf	postinc2,w,c
  4936   00095C  A4D8               	btfss	status,2,c
  4937   00095E  EFB3  F004         	goto	u1511
  4938   000962  EFB5  F004         	goto	u1510
  4939   000966                     u1511:
  4940   000966  EFC1  F004         	goto	l2640
  4941   00096A                     u1510:
  4942   00096A  0E1E               	movlw	low return_back@motorL
  4943   00096C  6E14               	movwf	turnLeftLong@mL^0,c
  4944   00096E  0E00               	movlw	high return_back@motorL
  4945   000970  6E15               	movwf	(turnLeftLong@mL+1)^0,c
  4946   000972  0E20               	movlw	low return_back@motorR
  4947   000974  6E16               	movwf	turnLeftLong@mR^0,c
  4948   000976  0E00               	movlw	high return_back@motorR
  4949   000978  6E17               	movwf	(turnLeftLong@mR+1)^0,c
  4950   00097A  EC54  F00A         	call	_turnLeftLong	;wreg free
  4951   00097E  EF12  F005         	goto	l308
  4952   000982                     l2640:
  4953   000982  90D8               	bcf	status,0,c
  4954   000984  345B               	rlcf	_index^0,w,c
  4955   000986  6ED9               	movwf	fsr2l,c
  4956   000988  345C               	rlcf	(_index+1)^0,w,c
  4957   00098A  6EDA               	movwf	fsr2h,c
  4958   00098C  0E6A               	movlw	low (_movement_list+65534)
  4959   00098E  26D9               	addwf	fsr2l,f,c
  4960   000990  0E01               	movlw	high (_movement_list+65534)
  4961   000992  22DA               	addwfc	fsr2h,f,c
  4962   000994  0EFC               	movlw	252
  4963   000996  18DE               	xorwf	postinc2,w,c
  4964   000998  E106               	bnz	u1521
  4965   00099A  28DE               	incf	postinc2,w,c
  4966   00099C  A4D8               	btfss	status,2,c
  4967   00099E  EFD3  F004         	goto	u1521
  4968   0009A2  EFD5  F004         	goto	u1520
  4969   0009A6                     u1521:
  4970   0009A6  EFE1  F004         	goto	l2644
  4971   0009AA                     u1520:
  4972   0009AA  0E1E               	movlw	low return_back@motorL
  4973   0009AC  6E14               	movwf	turnRightLong@mL^0,c
  4974   0009AE  0E00               	movlw	high return_back@motorL
  4975   0009B0  6E15               	movwf	(turnRightLong@mL+1)^0,c
  4976   0009B2  0E20               	movlw	low return_back@motorR
  4977   0009B4  6E16               	movwf	turnRightLong@mR^0,c
  4978   0009B6  0E00               	movlw	high return_back@motorR
  4979   0009B8  6E17               	movwf	(turnRightLong@mR+1)^0,c
  4980   0009BA  ECC0  F009         	call	_turnRightLong	;wreg free
  4981   0009BE  EF12  F005         	goto	l308
  4982   0009C2                     l2644:
  4983   0009C2  90D8               	bcf	status,0,c
  4984   0009C4  345B               	rlcf	_index^0,w,c
  4985   0009C6  6ED9               	movwf	fsr2l,c
  4986   0009C8  345C               	rlcf	(_index+1)^0,w,c
  4987   0009CA  6EDA               	movwf	fsr2h,c
  4988   0009CC  0E6A               	movlw	low (_movement_list+65534)
  4989   0009CE  26D9               	addwf	fsr2l,f,c
  4990   0009D0  0E01               	movlw	high (_movement_list+65534)
  4991   0009D2  22DA               	addwfc	fsr2h,f,c
  4992   0009D4  0E01               	movlw	1
  4993   0009D6  BEDB               	btfsc	plusw2,7,c
  4994   0009D8  EFF7  F004         	goto	u1531
  4995   0009DC  0E01               	movlw	1
  4996   0009DE  50DB               	movf	plusw2,w,c
  4997   0009E0  E108               	bnz	u1530
  4998   0009E2  04DE               	decf	postinc2,w,c
  4999   0009E4  A0D8               	btfss	status,0,c
  5000   0009E6  EFF7  F004         	goto	u1531
  5001   0009EA  EFF9  F004         	goto	u1530
  5002   0009EE                     u1531:
  5003   0009EE  EF12  F005         	goto	l312
  5004   0009F2                     u1530:
  5005   0009F2  0E1E               	movlw	low return_back@motorL
  5006   0009F4  6E14               	movwf	TimedfullSpeedAhead@mL^0,c
  5007   0009F6  0E00               	movlw	high return_back@motorL
  5008   0009F8  6E15               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  5009   0009FA  0E20               	movlw	low return_back@motorR
  5010   0009FC  6E16               	movwf	TimedfullSpeedAhead@mR^0,c
  5011   0009FE  0E00               	movlw	high return_back@motorR
  5012   000A00  6E17               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  5013   000A02  90D8               	bcf	status,0,c
  5014   000A04  345B               	rlcf	_index^0,w,c
  5015   000A06  6ED9               	movwf	fsr2l,c
  5016   000A08  345C               	rlcf	(_index+1)^0,w,c
  5017   000A0A  6EDA               	movwf	fsr2h,c
  5018   000A0C  0E6A               	movlw	low (_movement_list+65534)
  5019   000A0E  26D9               	addwf	fsr2l,f,c
  5020   000A10  0E01               	movlw	high (_movement_list+65534)
  5021   000A12  22DA               	addwfc	fsr2h,f,c
  5022   000A14  CFDE F018          	movff	postinc2,TimedfullSpeedAhead@time
  5023   000A18  CFDD F019          	movff	postdec2,TimedfullSpeedAhead@time+1
  5024   000A1C  EC6A  F00C         	call	_TimedfullSpeedAhead	;wreg free
  5025   000A20  EF12  F005         	goto	l308
  5026   000A24                     l312:
  5027   000A24                     l308:
  5028                           
  5029                           ;dc_motor.c: 463:         stop(&motorL,&motorR);
  5030   000A24  0E1E               	movlw	low return_back@motorL
  5031   000A26  6E14               	movwf	stop@mL^0,c
  5032   000A28  0E00               	movlw	high return_back@motorL
  5033   000A2A  6E15               	movwf	(stop@mL+1)^0,c
  5034   000A2C  0E20               	movlw	low return_back@motorR
  5035   000A2E  6E16               	movwf	stop@mR^0,c
  5036   000A30  0E00               	movlw	high return_back@motorR
  5037   000A32  6E17               	movwf	(stop@mR+1)^0,c
  5038   000A34  EC4C  F00E         	call	_stop	;wreg free
  5039   000A38                     
  5040                           ;dc_motor.c: 464:         index -= 1;
  5041   000A38  065B               	decf	_index^0,f,c
  5042   000A3A  A0D8               	btfss	status,0,c
  5043   000A3C  065C               	decf	(_index+1)^0,f,c
  5044   000A3E                     l2650:
  5045                           
  5046                           ;dc_motor.c: 457:     while (index > 0){
  5047   000A3E  BE5C               	btfsc	(_index+1)^0,7,c
  5048   000A40  EF2C  F005         	goto	u1540
  5049   000A44  505C               	movf	(_index+1)^0,w,c
  5050   000A46  E106               	bnz	u1541
  5051   000A48  045B               	decf	_index^0,w,c
  5052   000A4A  B0D8               	btfsc	status,0,c
  5053   000A4C  EF2A  F005         	goto	u1541
  5054   000A50  EF2C  F005         	goto	u1540
  5055   000A54                     u1541:
  5056   000A54  EF62  F004         	goto	l2628
  5057   000A58                     u1540:
  5058   000A58  0012               	return		;funcret
  5059   000A5A                     __end_of_return_back:
  5060                           	callstack 0
  5061                           
  5062 ;; *************** function _turnRightLong *****************
  5063 ;; Defined at:
  5064 ;;		line 231 in file "dc_motor.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5067 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5068 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5069 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  i               2   25[COMRAM] int 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      void 
  5074 ;; Registers used:
  5075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5081 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5083 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5084 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5085 ;;Total ram usage:        8 bytes
  5086 ;; Hardware stack levels used: 1
  5087 ;; Hardware stack levels required when called: 4
  5088 ;; This function calls:
  5089 ;;		_setMotorPWM
  5090 ;; This function is called by:
  5091 ;;		_RobotMovement
  5092 ;;		_return_back
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text28
  5097   001380                     __ptext28:
  5098                           	callstack 0
  5099   001380                     _turnRightLong:
  5100                           	callstack 25
  5101   001380                     
  5102                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5103   001380  0E00               	movlw	0
  5104   001382  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5105   001384  0E19               	movlw	25
  5106   001386  6E1A               	movwf	turnRightLong@i^0,c
  5107   001388                     l2474:
  5108                           
  5109                           ;dc_motor.c: 236:     (*mL).direction=0;
  5110   001388  EE20 F001          	lfsr	2,1
  5111   00138C  5014               	movf	turnRightLong@mL^0,w,c
  5112   00138E  26D9               	addwf	fsr2l,f,c
  5113   001390  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5114   001392  22DA               	addwfc	fsr2h,f,c
  5115   001394  0E00               	movlw	0
  5116   001396  6EDF               	movwf	indf2,c
  5117                           
  5118                           ;dc_motor.c: 237:     (*mR).direction=1;
  5119   001398  EE20 F001          	lfsr	2,1
  5120   00139C  5016               	movf	turnRightLong@mR^0,w,c
  5121   00139E  26D9               	addwf	fsr2l,f,c
  5122   0013A0  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5123   0013A2  22DA               	addwfc	fsr2h,f,c
  5124   0013A4  0E01               	movlw	1
  5125   0013A6  6EDF               	movwf	indf2,c
  5126   0013A8                     
  5127                           ;dc_motor.c: 238:     (*mL).power=i;
  5128   0013A8  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5129   0013AC  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5130   0013B0  C01A  FFDF         	movff	turnRightLong@i,indf2
  5131   0013B4                     
  5132                           ;dc_motor.c: 239:     (*mR).power=i;
  5133   0013B4  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5134   0013B8  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5135   0013BC  C01A  FFDF         	movff	turnRightLong@i,indf2
  5136   0013C0                     
  5137                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5138   0013C0  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5139   0013C4  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5140   0013C8  ECE3  F005         	call	_setMotorPWM	;wreg free
  5141   0013CC                     
  5142                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5143   0013CC  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5144   0013D0  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5145   0013D4  ECE3  F005         	call	_setMotorPWM	;wreg free
  5146   0013D8                     
  5147                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5148   0013D8  0E0E               	movlw	14
  5149   0013DA  6E19               	movwf	(??_turnRightLong+1)^0,c
  5150   0013DC  0E12               	movlw	18
  5151   0013DE  6E18               	movwf	??_turnRightLong^0,c
  5152   0013E0  0E69               	movlw	105
  5153   0013E2                     u2577:
  5154   0013E2  2EE8               	decfsz	wreg,f,c
  5155   0013E4  D7FE               	bra	u2577
  5156   0013E6  2E18               	decfsz	??_turnRightLong^0,f,c
  5157   0013E8  D7FC               	bra	u2577
  5158   0013EA  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5159   0013EC  D7FA               	bra	u2577
  5160   0013EE  F000               	nop	
  5161   0013F0                     
  5162                           ;dc_motor.c: 243:     }
  5163   0013F0  0E05               	movlw	5
  5164   0013F2  261A               	addwf	turnRightLong@i^0,f,c
  5165   0013F4  0E00               	movlw	0
  5166   0013F6  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5167   0013F8  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5168   0013FA  EF08  F00A         	goto	u1421
  5169   0013FE  501B               	movf	(turnRightLong@i+1)^0,w,c
  5170   001400  E109               	bnz	u1420
  5171   001402  0E28               	movlw	40
  5172   001404  5C1A               	subwf	turnRightLong@i^0,w,c
  5173   001406  A0D8               	btfss	status,0,c
  5174   001408  EF08  F00A         	goto	u1421
  5175   00140C  EF0A  F00A         	goto	u1420
  5176   001410                     u1421:
  5177   001410  EFC4  F009         	goto	l2474
  5178   001414                     u1420:
  5179   001414                     
  5180                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5181   001414  0E00               	movlw	0
  5182   001416  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5183   001418  0E1E               	movlw	30
  5184   00141A  6E1A               	movwf	turnRightLong@i^0,c
  5185   00141C                     l2496:
  5186                           
  5187                           ;dc_motor.c: 245:     (*mL).direction=0;
  5188   00141C  EE20 F001          	lfsr	2,1
  5189   001420  5014               	movf	turnRightLong@mL^0,w,c
  5190   001422  26D9               	addwf	fsr2l,f,c
  5191   001424  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5192   001426  22DA               	addwfc	fsr2h,f,c
  5193   001428  0E00               	movlw	0
  5194   00142A  6EDF               	movwf	indf2,c
  5195                           
  5196                           ;dc_motor.c: 246:     (*mR).direction=1;
  5197   00142C  EE20 F001          	lfsr	2,1
  5198   001430  5016               	movf	turnRightLong@mR^0,w,c
  5199   001432  26D9               	addwf	fsr2l,f,c
  5200   001434  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5201   001436  22DA               	addwfc	fsr2h,f,c
  5202   001438  0E01               	movlw	1
  5203   00143A  6EDF               	movwf	indf2,c
  5204   00143C                     
  5205                           ;dc_motor.c: 247:     (*mL).power=i;
  5206   00143C  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5207   001440  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5208   001444  C01A  FFDF         	movff	turnRightLong@i,indf2
  5209   001448                     
  5210                           ;dc_motor.c: 248:     (*mR).power=i;
  5211   001448  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5212   00144C  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5213   001450  C01A  FFDF         	movff	turnRightLong@i,indf2
  5214   001454                     
  5215                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5216   001454  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5217   001458  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5218   00145C  ECE3  F005         	call	_setMotorPWM	;wreg free
  5219   001460                     
  5220                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5221   001460  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5222   001464  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5223   001468  ECE3  F005         	call	_setMotorPWM	;wreg free
  5224   00146C                     
  5225                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5226   00146C  0E0D               	movlw	13
  5227   00146E  6E19               	movwf	(??_turnRightLong+1)^0,c
  5228   001470  0EBF               	movlw	191
  5229   001472  6E18               	movwf	??_turnRightLong^0,c
  5230   001474  0E4C               	movlw	76
  5231   001476                     u2587:
  5232   001476  2EE8               	decfsz	wreg,f,c
  5233   001478  D7FE               	bra	u2587
  5234   00147A  2E18               	decfsz	??_turnRightLong^0,f,c
  5235   00147C  D7FC               	bra	u2587
  5236   00147E  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5237   001480  D7FA               	bra	u2587
  5238   001482                     
  5239                           ;dc_motor.c: 253:     }
  5240   001482  0EFB               	movlw	251
  5241   001484  261A               	addwf	turnRightLong@i^0,f,c
  5242   001486  0EFF               	movlw	255
  5243   001488  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5244   00148A  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5245   00148C  EF53  F00A         	goto	u1430
  5246   001490  501B               	movf	(turnRightLong@i+1)^0,w,c
  5247   001492  E107               	bnz	u1431
  5248   001494  0E10               	movlw	16
  5249   001496  5C1A               	subwf	turnRightLong@i^0,w,c
  5250   001498  B0D8               	btfsc	status,0,c
  5251   00149A  EF51  F00A         	goto	u1431
  5252   00149E  EF53  F00A         	goto	u1430
  5253   0014A2                     u1431:
  5254   0014A2  EF0E  F00A         	goto	l2496
  5255   0014A6                     u1430:
  5256   0014A6  0012               	return		;funcret
  5257   0014A8                     __end_of_turnRightLong:
  5258                           	callstack 0
  5259                           
  5260 ;; *************** function _turnRight *****************
  5261 ;; Defined at:
  5262 ;;		line 154 in file "dc_motor.c"
  5263 ;; Parameters:    Size  Location     Type
  5264 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5265 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5266 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5267 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;  i               2   27[COMRAM] int 
  5270 ;;  k               2   25[COMRAM] int 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  1    wreg      void 
  5273 ;; Registers used:
  5274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5280 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5281 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5282 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5283 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5284 ;;Total ram usage:       10 bytes
  5285 ;; Hardware stack levels used: 1
  5286 ;; Hardware stack levels required when called: 4
  5287 ;; This function calls:
  5288 ;;		_setMotorPWM
  5289 ;; This function is called by:
  5290 ;;		_RobotMovement
  5291 ;;		_return_back
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text29
  5296   000E8C                     __ptext29:
  5297                           	callstack 0
  5298   000E8C                     _turnRight:
  5299                           	callstack 25
  5300   000E8C                     
  5301                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5302   000E8C  0E00               	movlw	0
  5303   000E8E  6E1B               	movwf	(turnRight@k+1)^0,c
  5304   000E90  0E00               	movlw	0
  5305   000E92  6E1A               	movwf	turnRight@k^0,c
  5306   000E94                     l2376:
  5307                           
  5308                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5309   000E94  0E00               	movlw	0
  5310   000E96  6E1D               	movwf	(turnRight@i+1)^0,c
  5311   000E98  0E1B               	movlw	27
  5312   000E9A  6E1C               	movwf	turnRight@i^0,c
  5313   000E9C                     l2382:
  5314                           
  5315                           ;dc_motor.c: 185:         (*mL).direction=0;
  5316   000E9C  EE20 F001          	lfsr	2,1
  5317   000EA0  5014               	movf	turnRight@mL^0,w,c
  5318   000EA2  26D9               	addwf	fsr2l,f,c
  5319   000EA4  5015               	movf	(turnRight@mL+1)^0,w,c
  5320   000EA6  22DA               	addwfc	fsr2h,f,c
  5321   000EA8  0E00               	movlw	0
  5322   000EAA  6EDF               	movwf	indf2,c
  5323                           
  5324                           ;dc_motor.c: 186:         (*mR).direction=1;
  5325   000EAC  EE20 F001          	lfsr	2,1
  5326   000EB0  5016               	movf	turnRight@mR^0,w,c
  5327   000EB2  26D9               	addwf	fsr2l,f,c
  5328   000EB4  5017               	movf	(turnRight@mR+1)^0,w,c
  5329   000EB6  22DA               	addwfc	fsr2h,f,c
  5330   000EB8  0E01               	movlw	1
  5331   000EBA  6EDF               	movwf	indf2,c
  5332   000EBC                     
  5333                           ;dc_motor.c: 187:         (*mL).power=i;
  5334   000EBC  C014  FFD9         	movff	turnRight@mL,fsr2l
  5335   000EC0  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5336   000EC4  C01C  FFDF         	movff	turnRight@i,indf2
  5337   000EC8                     
  5338                           ;dc_motor.c: 188:         (*mR).power=i;
  5339   000EC8  C016  FFD9         	movff	turnRight@mR,fsr2l
  5340   000ECC  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5341   000ED0  C01C  FFDF         	movff	turnRight@i,indf2
  5342   000ED4                     
  5343                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5344   000ED4  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5345   000ED8  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5346   000EDC  ECE3  F005         	call	_setMotorPWM	;wreg free
  5347   000EE0                     
  5348                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5349   000EE0  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5350   000EE4  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5351   000EE8  ECE3  F005         	call	_setMotorPWM	;wreg free
  5352   000EEC                     
  5353                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5354   000EEC  0E09               	movlw	9
  5355   000EEE  6E19               	movwf	(??_turnRight+1)^0,c
  5356   000EF0  0EB0               	movlw	176
  5357   000EF2  6E18               	movwf	??_turnRight^0,c
  5358   000EF4  0E58               	movlw	88
  5359   000EF6                     u2597:
  5360   000EF6  2EE8               	decfsz	wreg,f,c
  5361   000EF8  D7FE               	bra	u2597
  5362   000EFA  2E18               	decfsz	??_turnRight^0,f,c
  5363   000EFC  D7FC               	bra	u2597
  5364   000EFE  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5365   000F00  D7FA               	bra	u2597
  5366   000F02  D000               	nop2	
  5367   000F04                     
  5368                           ;dc_motor.c: 192:         }
  5369   000F04  0E05               	movlw	5
  5370   000F06  261C               	addwf	turnRight@i^0,f,c
  5371   000F08  0E00               	movlw	0
  5372   000F0A  221D               	addwfc	(turnRight@i+1)^0,f,c
  5373   000F0C  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5374   000F0E  EF92  F007         	goto	u1371
  5375   000F12  501D               	movf	(turnRight@i+1)^0,w,c
  5376   000F14  E109               	bnz	u1370
  5377   000F16  0E2A               	movlw	42
  5378   000F18  5C1C               	subwf	turnRight@i^0,w,c
  5379   000F1A  A0D8               	btfss	status,0,c
  5380   000F1C  EF92  F007         	goto	u1371
  5381   000F20  EF94  F007         	goto	u1370
  5382   000F24                     u1371:
  5383   000F24  EF4E  F007         	goto	l2382
  5384   000F28                     u1370:
  5385   000F28                     
  5386                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5387   000F28  0E00               	movlw	0
  5388   000F2A  6E1D               	movwf	(turnRight@i+1)^0,c
  5389   000F2C  0E20               	movlw	32
  5390   000F2E  6E1C               	movwf	turnRight@i^0,c
  5391   000F30                     l2404:
  5392                           
  5393                           ;dc_motor.c: 194:         (*mL).direction=0;
  5394   000F30  EE20 F001          	lfsr	2,1
  5395   000F34  5014               	movf	turnRight@mL^0,w,c
  5396   000F36  26D9               	addwf	fsr2l,f,c
  5397   000F38  5015               	movf	(turnRight@mL+1)^0,w,c
  5398   000F3A  22DA               	addwfc	fsr2h,f,c
  5399   000F3C  0E00               	movlw	0
  5400   000F3E  6EDF               	movwf	indf2,c
  5401                           
  5402                           ;dc_motor.c: 195:         (*mR).direction=1;
  5403   000F40  EE20 F001          	lfsr	2,1
  5404   000F44  5016               	movf	turnRight@mR^0,w,c
  5405   000F46  26D9               	addwf	fsr2l,f,c
  5406   000F48  5017               	movf	(turnRight@mR+1)^0,w,c
  5407   000F4A  22DA               	addwfc	fsr2h,f,c
  5408   000F4C  0E01               	movlw	1
  5409   000F4E  6EDF               	movwf	indf2,c
  5410   000F50                     
  5411                           ;dc_motor.c: 196:         (*mL).power=i;
  5412   000F50  C014  FFD9         	movff	turnRight@mL,fsr2l
  5413   000F54  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5414   000F58  C01C  FFDF         	movff	turnRight@i,indf2
  5415   000F5C                     
  5416                           ;dc_motor.c: 197:         (*mR).power=i;
  5417   000F5C  C016  FFD9         	movff	turnRight@mR,fsr2l
  5418   000F60  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5419   000F64  C01C  FFDF         	movff	turnRight@i,indf2
  5420   000F68                     
  5421                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5422   000F68  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5423   000F6C  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5424   000F70  ECE3  F005         	call	_setMotorPWM	;wreg free
  5425   000F74                     
  5426                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5427   000F74  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5428   000F78  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5429   000F7C  ECE3  F005         	call	_setMotorPWM	;wreg free
  5430   000F80                     
  5431                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5432   000F80  0E09               	movlw	9
  5433   000F82  6E19               	movwf	(??_turnRight+1)^0,c
  5434   000F84  0E86               	movlw	134
  5435   000F86  6E18               	movwf	??_turnRight^0,c
  5436   000F88  0ECA               	movlw	202
  5437   000F8A                     u2607:
  5438   000F8A  2EE8               	decfsz	wreg,f,c
  5439   000F8C  D7FE               	bra	u2607
  5440   000F8E  2E18               	decfsz	??_turnRight^0,f,c
  5441   000F90  D7FC               	bra	u2607
  5442   000F92  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5443   000F94  D7FA               	bra	u2607
  5444   000F96                     
  5445                           ;dc_motor.c: 202:         }
  5446   000F96  0EFB               	movlw	251
  5447   000F98  261C               	addwf	turnRight@i^0,f,c
  5448   000F9A  0EFF               	movlw	255
  5449   000F9C  221D               	addwfc	(turnRight@i+1)^0,f,c
  5450   000F9E  BE1D               	btfsc	(turnRight@i+1)^0,7,c
  5451   000FA0  EFDD  F007         	goto	u1380
  5452   000FA4  501D               	movf	(turnRight@i+1)^0,w,c
  5453   000FA6  E107               	bnz	u1381
  5454   000FA8  0E12               	movlw	18
  5455   000FAA  5C1C               	subwf	turnRight@i^0,w,c
  5456   000FAC  B0D8               	btfsc	status,0,c
  5457   000FAE  EFDB  F007         	goto	u1381
  5458   000FB2  EFDD  F007         	goto	u1380
  5459   000FB6                     u1381:
  5460   000FB6  EF98  F007         	goto	l2404
  5461   000FBA                     u1380:
  5462   000FBA                     
  5463                           ;dc_motor.c: 203:     }
  5464   000FBA  4A1A               	infsnz	turnRight@k^0,f,c
  5465   000FBC  2A1B               	incf	(turnRight@k+1)^0,f,c
  5466   000FBE  BE1B               	btfsc	(turnRight@k+1)^0,7,c
  5467   000FC0  EFEB  F007         	goto	u1391
  5468   000FC4  501B               	movf	(turnRight@k+1)^0,w,c
  5469   000FC6  E109               	bnz	u1390
  5470   000FC8  0E02               	movlw	2
  5471   000FCA  5C1A               	subwf	turnRight@k^0,w,c
  5472   000FCC  A0D8               	btfss	status,0,c
  5473   000FCE  EFEB  F007         	goto	u1391
  5474   000FD2  EFED  F007         	goto	u1390
  5475   000FD6                     u1391:
  5476   000FD6  EF4A  F007         	goto	l2376
  5477   000FDA                     u1390:
  5478   000FDA  0012               	return		;funcret
  5479   000FDC                     __end_of_turnRight:
  5480                           	callstack 0
  5481                           
  5482 ;; *************** function _turnLeftLong *****************
  5483 ;; Defined at:
  5484 ;;		line 206 in file "dc_motor.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5487 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5488 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5489 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  i               2   25[COMRAM] int 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 0/0
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5501 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5502 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5503 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5504 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5505 ;;Total ram usage:        8 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; Hardware stack levels required when called: 4
  5508 ;; This function calls:
  5509 ;;		_setMotorPWM
  5510 ;; This function is called by:
  5511 ;;		_RobotMovement
  5512 ;;		_return_back
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text30
  5517   0014A8                     __ptext30:
  5518                           	callstack 0
  5519   0014A8                     _turnLeftLong:
  5520                           	callstack 25
  5521   0014A8                     
  5522                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5523   0014A8  0E00               	movlw	0
  5524   0014AA  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5525   0014AC  0E17               	movlw	23
  5526   0014AE  6E1A               	movwf	turnLeftLong@i^0,c
  5527   0014B0                     l2430:
  5528                           
  5529                           ;dc_motor.c: 211:     (*mL).direction=1;
  5530   0014B0  EE20 F001          	lfsr	2,1
  5531   0014B4  5014               	movf	turnLeftLong@mL^0,w,c
  5532   0014B6  26D9               	addwf	fsr2l,f,c
  5533   0014B8  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5534   0014BA  22DA               	addwfc	fsr2h,f,c
  5535   0014BC  0E01               	movlw	1
  5536   0014BE  6EDF               	movwf	indf2,c
  5537                           
  5538                           ;dc_motor.c: 212:     (*mR).direction=0;
  5539   0014C0  EE20 F001          	lfsr	2,1
  5540   0014C4  5016               	movf	turnLeftLong@mR^0,w,c
  5541   0014C6  26D9               	addwf	fsr2l,f,c
  5542   0014C8  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5543   0014CA  22DA               	addwfc	fsr2h,f,c
  5544   0014CC  0E00               	movlw	0
  5545   0014CE  6EDF               	movwf	indf2,c
  5546   0014D0                     
  5547                           ;dc_motor.c: 213:     (*mL).power=i;
  5548   0014D0  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5549   0014D4  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5550   0014D8  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5551   0014DC                     
  5552                           ;dc_motor.c: 214:     (*mR).power=i;
  5553   0014DC  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5554   0014E0  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5555   0014E4  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5556   0014E8                     
  5557                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5558   0014E8  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5559   0014EC  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5560   0014F0  ECE3  F005         	call	_setMotorPWM	;wreg free
  5561   0014F4                     
  5562                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5563   0014F4  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5564   0014F8  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5565   0014FC  ECE3  F005         	call	_setMotorPWM	;wreg free
  5566   001500                     
  5567                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5568   001500  0E0D               	movlw	13
  5569   001502  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5570   001504  0EAA               	movlw	170
  5571   001506  6E18               	movwf	??_turnLeftLong^0,c
  5572   001508  0E84               	movlw	132
  5573   00150A                     u2617:
  5574   00150A  2EE8               	decfsz	wreg,f,c
  5575   00150C  D7FE               	bra	u2617
  5576   00150E  2E18               	decfsz	??_turnLeftLong^0,f,c
  5577   001510  D7FC               	bra	u2617
  5578   001512  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5579   001514  D7FA               	bra	u2617
  5580   001516  D000               	nop2	
  5581   001518                     
  5582                           ;dc_motor.c: 218:     }
  5583   001518  0E05               	movlw	5
  5584   00151A  261A               	addwf	turnLeftLong@i^0,f,c
  5585   00151C  0E00               	movlw	0
  5586   00151E  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5587   001520  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5588   001522  EF9C  F00A         	goto	u1401
  5589   001526  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5590   001528  E109               	bnz	u1400
  5591   00152A  0E26               	movlw	38
  5592   00152C  5C1A               	subwf	turnLeftLong@i^0,w,c
  5593   00152E  A0D8               	btfss	status,0,c
  5594   001530  EF9C  F00A         	goto	u1401
  5595   001534  EF9E  F00A         	goto	u1400
  5596   001538                     u1401:
  5597   001538  EF58  F00A         	goto	l2430
  5598   00153C                     u1400:
  5599   00153C                     
  5600                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5601   00153C  0E00               	movlw	0
  5602   00153E  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5603   001540  0E1C               	movlw	28
  5604   001542  6E1A               	movwf	turnLeftLong@i^0,c
  5605   001544                     l2452:
  5606                           
  5607                           ;dc_motor.c: 220:     (*mL).direction=1;
  5608   001544  EE20 F001          	lfsr	2,1
  5609   001548  5014               	movf	turnLeftLong@mL^0,w,c
  5610   00154A  26D9               	addwf	fsr2l,f,c
  5611   00154C  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5612   00154E  22DA               	addwfc	fsr2h,f,c
  5613   001550  0E01               	movlw	1
  5614   001552  6EDF               	movwf	indf2,c
  5615                           
  5616                           ;dc_motor.c: 221:     (*mR).direction=0;
  5617   001554  EE20 F001          	lfsr	2,1
  5618   001558  5016               	movf	turnLeftLong@mR^0,w,c
  5619   00155A  26D9               	addwf	fsr2l,f,c
  5620   00155C  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5621   00155E  22DA               	addwfc	fsr2h,f,c
  5622   001560  0E00               	movlw	0
  5623   001562  6EDF               	movwf	indf2,c
  5624   001564                     
  5625                           ;dc_motor.c: 222:     (*mL).power=i;
  5626   001564  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5627   001568  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5628   00156C  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5629   001570                     
  5630                           ;dc_motor.c: 223:     (*mR).power=i;
  5631   001570  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5632   001574  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5633   001578  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5634   00157C                     
  5635                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5636   00157C  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5637   001580  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5638   001584  ECE3  F005         	call	_setMotorPWM	;wreg free
  5639   001588                     
  5640                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5641   001588  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5642   00158C  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5643   001590  ECE3  F005         	call	_setMotorPWM	;wreg free
  5644   001594                     
  5645                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5646   001594  0E0D               	movlw	13
  5647   001596  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5648   001598  0E2D               	movlw	45
  5649   00159A  6E18               	movwf	??_turnLeftLong^0,c
  5650   00159C  0ED8               	movlw	216
  5651   00159E                     u2627:
  5652   00159E  2EE8               	decfsz	wreg,f,c
  5653   0015A0  D7FE               	bra	u2627
  5654   0015A2  2E18               	decfsz	??_turnLeftLong^0,f,c
  5655   0015A4  D7FC               	bra	u2627
  5656   0015A6  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5657   0015A8  D7FA               	bra	u2627
  5658   0015AA                     
  5659                           ;dc_motor.c: 228:     }
  5660   0015AA  0EFB               	movlw	251
  5661   0015AC  261A               	addwf	turnLeftLong@i^0,f,c
  5662   0015AE  0EFF               	movlw	255
  5663   0015B0  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5664   0015B2  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5665   0015B4  EFE7  F00A         	goto	u1410
  5666   0015B8  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5667   0015BA  E107               	bnz	u1411
  5668   0015BC  0E0E               	movlw	14
  5669   0015BE  5C1A               	subwf	turnLeftLong@i^0,w,c
  5670   0015C0  B0D8               	btfsc	status,0,c
  5671   0015C2  EFE5  F00A         	goto	u1411
  5672   0015C6  EFE7  F00A         	goto	u1410
  5673   0015CA                     u1411:
  5674   0015CA  EFA2  F00A         	goto	l2452
  5675   0015CE                     u1410:
  5676   0015CE  0012               	return		;funcret
  5677   0015D0                     __end_of_turnLeftLong:
  5678                           	callstack 0
  5679                           
  5680 ;; *************** function _turnLeft *****************
  5681 ;; Defined at:
  5682 ;;		line 102 in file "dc_motor.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5685 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5686 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5687 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  i               2   27[COMRAM] int 
  5690 ;;  k               2   25[COMRAM] int 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  1    wreg      void 
  5693 ;; Registers used:
  5694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5701 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5702 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5703 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5704 ;;Total ram usage:       10 bytes
  5705 ;; Hardware stack levels used: 1
  5706 ;; Hardware stack levels required when called: 4
  5707 ;; This function calls:
  5708 ;;		_setMotorPWM
  5709 ;; This function is called by:
  5710 ;;		_RobotMovement
  5711 ;;		_return_back
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text31
  5716   000D32                     __ptext31:
  5717                           	callstack 0
  5718   000D32                     _turnLeft:
  5719                           	callstack 25
  5720   000D32                     
  5721                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5722   000D32  0E00               	movlw	0
  5723   000D34  6E1B               	movwf	(turnLeft@k+1)^0,c
  5724   000D36  0E00               	movlw	0
  5725   000D38  6E1A               	movwf	turnLeft@k^0,c
  5726                           
  5727                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5728   000D3A  0E00               	movlw	0
  5729   000D3C  6E1B               	movwf	(turnLeft@k+1)^0,c
  5730   000D3E  0E00               	movlw	0
  5731   000D40  6E1A               	movwf	turnLeft@k^0,c
  5732   000D42                     l2322:
  5733                           
  5734                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  5735   000D42  0E00               	movlw	0
  5736   000D44  6E1D               	movwf	(turnLeft@i+1)^0,c
  5737   000D46  0E2F               	movlw	47
  5738   000D48  6E1C               	movwf	turnLeft@i^0,c
  5739   000D4A                     l2328:
  5740                           
  5741                           ;dc_motor.c: 133:         (*mL).direction=1;
  5742   000D4A  EE20 F001          	lfsr	2,1
  5743   000D4E  5014               	movf	turnLeft@mL^0,w,c
  5744   000D50  26D9               	addwf	fsr2l,f,c
  5745   000D52  5015               	movf	(turnLeft@mL+1)^0,w,c
  5746   000D54  22DA               	addwfc	fsr2h,f,c
  5747   000D56  0E01               	movlw	1
  5748   000D58  6EDF               	movwf	indf2,c
  5749                           
  5750                           ;dc_motor.c: 134:         (*mR).direction=0;
  5751   000D5A  EE20 F001          	lfsr	2,1
  5752   000D5E  5016               	movf	turnLeft@mR^0,w,c
  5753   000D60  26D9               	addwf	fsr2l,f,c
  5754   000D62  5017               	movf	(turnLeft@mR+1)^0,w,c
  5755   000D64  22DA               	addwfc	fsr2h,f,c
  5756   000D66  0E00               	movlw	0
  5757   000D68  6EDF               	movwf	indf2,c
  5758   000D6A                     
  5759                           ;dc_motor.c: 135:         (*mL).power=i;
  5760   000D6A  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5761   000D6E  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5762   000D72  C01C  FFDF         	movff	turnLeft@i,indf2
  5763   000D76                     
  5764                           ;dc_motor.c: 136:         (*mR).power=i;
  5765   000D76  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5766   000D7A  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5767   000D7E  C01C  FFDF         	movff	turnLeft@i,indf2
  5768   000D82                     
  5769                           ;dc_motor.c: 137:         setMotorPWM(mL);
  5770   000D82  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5771   000D86  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5772   000D8A  ECE3  F005         	call	_setMotorPWM	;wreg free
  5773   000D8E                     
  5774                           ;dc_motor.c: 138:         setMotorPWM(mR);
  5775   000D8E  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5776   000D92  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5777   000D96  ECE3  F005         	call	_setMotorPWM	;wreg free
  5778   000D9A                     
  5779                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  5780   000D9A  0E05               	movlw	5
  5781   000D9C  6E19               	movwf	(??_turnLeft+1)^0,c
  5782   000D9E  0EB6               	movlw	182
  5783   000DA0  6E18               	movwf	??_turnLeft^0,c
  5784   000DA2  0E2C               	movlw	44
  5785   000DA4                     u2637:
  5786   000DA4  2EE8               	decfsz	wreg,f,c
  5787   000DA6  D7FE               	bra	u2637
  5788   000DA8  2E18               	decfsz	??_turnLeft^0,f,c
  5789   000DAA  D7FC               	bra	u2637
  5790   000DAC  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5791   000DAE  D7FA               	bra	u2637
  5792   000DB0  D000               	nop2	
  5793   000DB2                     
  5794                           ;dc_motor.c: 140:         }
  5795   000DB2  0E05               	movlw	5
  5796   000DB4  261C               	addwf	turnLeft@i^0,f,c
  5797   000DB6  0E00               	movlw	0
  5798   000DB8  221D               	addwfc	(turnLeft@i+1)^0,f,c
  5799   000DBA  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  5800   000DBC  EFE9  F006         	goto	u1341
  5801   000DC0  501D               	movf	(turnLeft@i+1)^0,w,c
  5802   000DC2  E109               	bnz	u1340
  5803   000DC4  0E3E               	movlw	62
  5804   000DC6  5C1C               	subwf	turnLeft@i^0,w,c
  5805   000DC8  A0D8               	btfss	status,0,c
  5806   000DCA  EFE9  F006         	goto	u1341
  5807   000DCE  EFEB  F006         	goto	u1340
  5808   000DD2                     u1341:
  5809   000DD2  EFA5  F006         	goto	l2328
  5810   000DD6                     u1340:
  5811   000DD6                     
  5812                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  5813   000DD6  0E00               	movlw	0
  5814   000DD8  6E1D               	movwf	(turnLeft@i+1)^0,c
  5815   000DDA  0E34               	movlw	52
  5816   000DDC  6E1C               	movwf	turnLeft@i^0,c
  5817   000DDE                     l2350:
  5818                           
  5819                           ;dc_motor.c: 142:         (*mL).direction=1;
  5820   000DDE  EE20 F001          	lfsr	2,1
  5821   000DE2  5014               	movf	turnLeft@mL^0,w,c
  5822   000DE4  26D9               	addwf	fsr2l,f,c
  5823   000DE6  5015               	movf	(turnLeft@mL+1)^0,w,c
  5824   000DE8  22DA               	addwfc	fsr2h,f,c
  5825   000DEA  0E01               	movlw	1
  5826   000DEC  6EDF               	movwf	indf2,c
  5827                           
  5828                           ;dc_motor.c: 143:         (*mR).direction=0;
  5829   000DEE  EE20 F001          	lfsr	2,1
  5830   000DF2  5016               	movf	turnLeft@mR^0,w,c
  5831   000DF4  26D9               	addwf	fsr2l,f,c
  5832   000DF6  5017               	movf	(turnLeft@mR+1)^0,w,c
  5833   000DF8  22DA               	addwfc	fsr2h,f,c
  5834   000DFA  0E00               	movlw	0
  5835   000DFC  6EDF               	movwf	indf2,c
  5836   000DFE                     
  5837                           ;dc_motor.c: 144:         (*mL).power=i;
  5838   000DFE  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5839   000E02  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5840   000E06  C01C  FFDF         	movff	turnLeft@i,indf2
  5841   000E0A                     
  5842                           ;dc_motor.c: 145:         (*mR).power=i;
  5843   000E0A  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5844   000E0E  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5845   000E12  C01C  FFDF         	movff	turnLeft@i,indf2
  5846   000E16                     
  5847                           ;dc_motor.c: 146:         setMotorPWM(mL);
  5848   000E16  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5849   000E1A  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5850   000E1E  ECE3  F005         	call	_setMotorPWM	;wreg free
  5851   000E22                     
  5852                           ;dc_motor.c: 147:         setMotorPWM(mR);
  5853   000E22  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5854   000E26  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5855   000E2A  ECE3  F005         	call	_setMotorPWM	;wreg free
  5856   000E2E                     
  5857                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  5858   000E2E  0E05               	movlw	5
  5859   000E30  6E19               	movwf	(??_turnLeft+1)^0,c
  5860   000E32  0EA1               	movlw	161
  5861   000E34  6E18               	movwf	??_turnLeft^0,c
  5862   000E36  0E65               	movlw	101
  5863   000E38                     u2647:
  5864   000E38  2EE8               	decfsz	wreg,f,c
  5865   000E3A  D7FE               	bra	u2647
  5866   000E3C  2E18               	decfsz	??_turnLeft^0,f,c
  5867   000E3E  D7FC               	bra	u2647
  5868   000E40  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5869   000E42  D7FA               	bra	u2647
  5870   000E44  F000               	nop	
  5871   000E46                     
  5872                           ;dc_motor.c: 150:         }
  5873   000E46  0EFB               	movlw	251
  5874   000E48  261C               	addwf	turnLeft@i^0,f,c
  5875   000E4A  0EFF               	movlw	255
  5876   000E4C  221D               	addwfc	(turnLeft@i+1)^0,f,c
  5877   000E4E  BE1D               	btfsc	(turnLeft@i+1)^0,7,c
  5878   000E50  EF35  F007         	goto	u1350
  5879   000E54  501D               	movf	(turnLeft@i+1)^0,w,c
  5880   000E56  E107               	bnz	u1351
  5881   000E58  0E26               	movlw	38
  5882   000E5A  5C1C               	subwf	turnLeft@i^0,w,c
  5883   000E5C  B0D8               	btfsc	status,0,c
  5884   000E5E  EF33  F007         	goto	u1351
  5885   000E62  EF35  F007         	goto	u1350
  5886   000E66                     u1351:
  5887   000E66  EFEF  F006         	goto	l2350
  5888   000E6A                     u1350:
  5889   000E6A                     
  5890                           ;dc_motor.c: 151:     }
  5891   000E6A  4A1A               	infsnz	turnLeft@k^0,f,c
  5892   000E6C  2A1B               	incf	(turnLeft@k+1)^0,f,c
  5893   000E6E  BE1B               	btfsc	(turnLeft@k+1)^0,7,c
  5894   000E70  EF43  F007         	goto	u1361
  5895   000E74  501B               	movf	(turnLeft@k+1)^0,w,c
  5896   000E76  E109               	bnz	u1360
  5897   000E78  0E02               	movlw	2
  5898   000E7A  5C1A               	subwf	turnLeft@k^0,w,c
  5899   000E7C  A0D8               	btfss	status,0,c
  5900   000E7E  EF43  F007         	goto	u1361
  5901   000E82  EF45  F007         	goto	u1360
  5902   000E86                     u1361:
  5903   000E86  EFA1  F006         	goto	l2322
  5904   000E8A                     u1360:
  5905   000E8A  0012               	return		;funcret
  5906   000E8C                     __end_of_turnLeft:
  5907                           	callstack 0
  5908                           
  5909 ;; *************** function _stop *****************
  5910 ;; Defined at:
  5911 ;;		line 92 in file "dc_motor.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5914 ;;		 -> main@motorL(9), return_back@motorL(2), 
  5915 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5916 ;;		 -> main@motorR(9), return_back@motorR(2), 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;		None
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5932 ;;Total ram usage:        6 bytes
  5933 ;; Hardware stack levels used: 1
  5934 ;; Hardware stack levels required when called: 4
  5935 ;; This function calls:
  5936 ;;		_setMotorPWM
  5937 ;; This function is called by:
  5938 ;;		_RobotMovement
  5939 ;;		_return_back
  5940 ;;		_main
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text32
  5945   001C98                     __ptext32:
  5946                           	callstack 0
  5947   001C98                     _stop:
  5948                           	callstack 26
  5949   001C98                     
  5950                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  5951   001C98  C014  FFD9         	movff	stop@mL,fsr2l
  5952   001C9C  C015  FFDA         	movff	stop@mL+1,fsr2h
  5953   001CA0  0E00               	movlw	0
  5954   001CA2  6EDF               	movwf	indf2,c
  5955                           
  5956                           ;dc_motor.c: 95:     (*mR).power=0;
  5957   001CA4  C016  FFD9         	movff	stop@mR,fsr2l
  5958   001CA8  C017  FFDA         	movff	stop@mR+1,fsr2h
  5959   001CAC  0E00               	movlw	0
  5960   001CAE  6EDF               	movwf	indf2,c
  5961   001CB0                     
  5962                           ;dc_motor.c: 96:     setMotorPWM(mL);
  5963   001CB0  C014  F00E         	movff	stop@mL,setMotorPWM@m
  5964   001CB4  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  5965   001CB8  ECE3  F005         	call	_setMotorPWM	;wreg free
  5966   001CBC                     
  5967                           ;dc_motor.c: 97:     setMotorPWM(mR);
  5968   001CBC  C016  F00E         	movff	stop@mR,setMotorPWM@m
  5969   001CC0  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  5970   001CC4  ECE3  F005         	call	_setMotorPWM	;wreg free
  5971   001CC8                     
  5972                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  5973   001CC8  0E52               	movlw	82
  5974   001CCA  6E19               	movwf	(??_stop+1)^0,c
  5975   001CCC  0E2B               	movlw	43
  5976   001CCE  6E18               	movwf	??_stop^0,c
  5977   001CD0  0E00               	movlw	0
  5978   001CD2                     u2657:
  5979   001CD2  2EE8               	decfsz	wreg,f,c
  5980   001CD4  D7FE               	bra	u2657
  5981   001CD6  2E18               	decfsz	??_stop^0,f,c
  5982   001CD8  D7FC               	bra	u2657
  5983   001CDA  2E19               	decfsz	(??_stop+1)^0,f,c
  5984   001CDC  D7FA               	bra	u2657
  5985   001CDE  D000               	nop2	
  5986   001CE0  0012               	return		;funcret
  5987   001CE2                     __end_of_stop:
  5988                           	callstack 0
  5989                           
  5990 ;; *************** function _TimedfullSpeedAhead *****************
  5991 ;; Defined at:
  5992 ;;		line 267 in file "dc_motor.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5995 ;;		 -> return_back@motorL(2), 
  5996 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5997 ;;		 -> return_back@motorR(2), 
  5998 ;;  time            2   23[COMRAM] unsigned int 
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;		None
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6013 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6014 ;;Total ram usage:        6 bytes
  6015 ;; Hardware stack levels used: 1
  6016 ;; Hardware stack levels required when called: 4
  6017 ;; This function calls:
  6018 ;;		_setMotorPWM
  6019 ;; This function is called by:
  6020 ;;		_return_back
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text33
  6025   0018D4                     __ptext33:
  6026                           	callstack 0
  6027   0018D4                     _TimedfullSpeedAhead:
  6028                           	callstack 24
  6029   0018D4                     
  6030                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6031   0018D4  0E00               	movlw	0
  6032   0018D6  6E5E               	movwf	(_seconds+1)^0,c
  6033   0018D8  0E00               	movlw	0
  6034   0018DA  6E5D               	movwf	_seconds^0,c
  6035                           
  6036                           ;dc_motor.c: 270:     while (seconds<time)
  6037   0018DC  EF98  F00C         	goto	l2524
  6038   0018E0                     l2514:
  6039                           
  6040                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6041   0018E0  EE20 F001          	lfsr	2,1
  6042   0018E4  5014               	movf	TimedfullSpeedAhead@mL^0,w,c
  6043   0018E6  26D9               	addwf	fsr2l,f,c
  6044   0018E8  5015               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6045   0018EA  22DA               	addwfc	fsr2h,f,c
  6046   0018EC  0E00               	movlw	0
  6047   0018EE  6EDF               	movwf	indf2,c
  6048                           
  6049                           ;dc_motor.c: 274:         (*mR).direction=0;
  6050   0018F0  EE20 F001          	lfsr	2,1
  6051   0018F4  5016               	movf	TimedfullSpeedAhead@mR^0,w,c
  6052   0018F6  26D9               	addwf	fsr2l,f,c
  6053   0018F8  5017               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6054   0018FA  22DA               	addwfc	fsr2h,f,c
  6055   0018FC  0E00               	movlw	0
  6056   0018FE  6EDF               	movwf	indf2,c
  6057   001900                     
  6058                           ;dc_motor.c: 275:         (*mL).power=40;
  6059   001900  C014  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6060   001904  C015  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6061   001908  0E28               	movlw	40
  6062   00190A  6EDF               	movwf	indf2,c
  6063   00190C                     
  6064                           ;dc_motor.c: 276:         (*mR).power=40;
  6065   00190C  C016  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6066   001910  C017  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6067   001914  0E28               	movlw	40
  6068   001916  6EDF               	movwf	indf2,c
  6069   001918                     
  6070                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6071   001918  C014  F00E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6072   00191C  C015  F00F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6073   001920  ECE3  F005         	call	_setMotorPWM	;wreg free
  6074   001924                     
  6075                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6076   001924  C016  F00E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6077   001928  C017  F00F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6078   00192C  ECE3  F005         	call	_setMotorPWM	;wreg free
  6079   001930                     l2524:
  6080                           
  6081                           ;dc_motor.c: 270:     while (seconds<time)
  6082   001930  5018               	movf	TimedfullSpeedAhead@time^0,w,c
  6083   001932  5C5D               	subwf	_seconds^0,w,c
  6084   001934  5019               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6085   001936  585E               	subwfb	(_seconds+1)^0,w,c
  6086   001938  A0D8               	btfss	status,0,c
  6087   00193A  EFA1  F00C         	goto	u1441
  6088   00193E  EFA3  F00C         	goto	u1440
  6089   001942                     u1441:
  6090   001942  EF70  F00C         	goto	l2514
  6091   001946                     u1440:
  6092   001946  0012               	return		;funcret
  6093   001948                     __end_of_TimedfullSpeedAhead:
  6094                           	callstack 0
  6095                           
  6096 ;; *************** function _moveBack *****************
  6097 ;; Defined at:
  6098 ;;		line 282 in file "dc_motor.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  6101 ;;		 -> main@motorL(9), 
  6102 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  6103 ;;		 -> main@motorR(9), 
  6104 ;;  time            2   23[COMRAM] unsigned int 
  6105 ;; Auto vars:     Size  Location     Type
  6106 ;;		None
  6107 ;; Return value:  Size  Location     Type
  6108 ;;                  1    wreg      void 
  6109 ;; Registers used:
  6110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6111 ;; Tracked objects:
  6112 ;;		On entry : 0/0
  6113 ;;		On exit  : 0/0
  6114 ;;		Unchanged: 0/0
  6115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6116 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6119 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6120 ;;Total ram usage:        6 bytes
  6121 ;; Hardware stack levels used: 1
  6122 ;; Hardware stack levels required when called: 4
  6123 ;; This function calls:
  6124 ;;		_setMotorPWM
  6125 ;; This function is called by:
  6126 ;;		_RobotMovement
  6127 ;;		_main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           	psect	text34
  6132   001948                     __ptext34:
  6133                           	callstack 0
  6134   001948                     _moveBack:
  6135                           	callstack 26
  6136   001948                     
  6137                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6138   001948  0E00               	movlw	0
  6139   00194A  6E5E               	movwf	(_seconds+1)^0,c
  6140   00194C  0E00               	movlw	0
  6141   00194E  6E5D               	movwf	_seconds^0,c
  6142                           
  6143                           ;dc_motor.c: 285:     while (seconds<time)
  6144   001950  EFD2  F00C         	goto	l2624
  6145   001954                     l2614:
  6146                           
  6147                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6148   001954  EE20 F001          	lfsr	2,1
  6149   001958  5014               	movf	moveBack@mL^0,w,c
  6150   00195A  26D9               	addwf	fsr2l,f,c
  6151   00195C  5015               	movf	(moveBack@mL+1)^0,w,c
  6152   00195E  22DA               	addwfc	fsr2h,f,c
  6153   001960  0E01               	movlw	1
  6154   001962  6EDF               	movwf	indf2,c
  6155                           
  6156                           ;dc_motor.c: 288:         (*mR).direction=1;
  6157   001964  EE20 F001          	lfsr	2,1
  6158   001968  5016               	movf	moveBack@mR^0,w,c
  6159   00196A  26D9               	addwf	fsr2l,f,c
  6160   00196C  5017               	movf	(moveBack@mR+1)^0,w,c
  6161   00196E  22DA               	addwfc	fsr2h,f,c
  6162   001970  0E01               	movlw	1
  6163   001972  6EDF               	movwf	indf2,c
  6164   001974                     
  6165                           ;dc_motor.c: 289:         (*mL).power=40;
  6166   001974  C014  FFD9         	movff	moveBack@mL,fsr2l
  6167   001978  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  6168   00197C  0E28               	movlw	40
  6169   00197E  6EDF               	movwf	indf2,c
  6170   001980                     
  6171                           ;dc_motor.c: 290:         (*mR).power=39;
  6172   001980  C016  FFD9         	movff	moveBack@mR,fsr2l
  6173   001984  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  6174   001988  0E27               	movlw	39
  6175   00198A  6EDF               	movwf	indf2,c
  6176   00198C                     
  6177                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6178   00198C  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  6179   001990  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6180   001994  ECE3  F005         	call	_setMotorPWM	;wreg free
  6181   001998                     
  6182                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6183   001998  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  6184   00199C  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6185   0019A0  ECE3  F005         	call	_setMotorPWM	;wreg free
  6186   0019A4                     l2624:
  6187                           
  6188                           ;dc_motor.c: 285:     while (seconds<time)
  6189   0019A4  5018               	movf	moveBack@time^0,w,c
  6190   0019A6  5C5D               	subwf	_seconds^0,w,c
  6191   0019A8  5019               	movf	(moveBack@time+1)^0,w,c
  6192   0019AA  585E               	subwfb	(_seconds+1)^0,w,c
  6193   0019AC  A0D8               	btfss	status,0,c
  6194   0019AE  EFDB  F00C         	goto	u1481
  6195   0019B2  EFDD  F00C         	goto	u1480
  6196   0019B6                     u1481:
  6197   0019B6  EFAA  F00C         	goto	l2614
  6198   0019BA                     u1480:
  6199   0019BA  0012               	return		;funcret
  6200   0019BC                     __end_of_moveBack:
  6201                           	callstack 0
  6202                           
  6203 ;; *************** function _setMotorPWM *****************
  6204 ;; Defined at:
  6205 ;;		line 69 in file "dc_motor.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;  m               2   13[COMRAM] PTR struct DC_motor
  6208 ;;		 -> main@motorR(9), main@motorL(9), return_back@motorR(2), return_back@motorL(2), 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;  negDuty         1   18[COMRAM] unsigned char 
  6211 ;;  posDuty         1   17[COMRAM] unsigned char 
  6212 ;; Return value:  Size  Location     Type
  6213 ;;                  1    wreg      void 
  6214 ;; Registers used:
  6215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6216 ;; Tracked objects:
  6217 ;;		On entry : 0/0
  6218 ;;		On exit  : 0/0
  6219 ;;		Unchanged: 0/0
  6220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6223 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6224 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6225 ;;Total ram usage:        6 bytes
  6226 ;; Hardware stack levels used: 1
  6227 ;; Hardware stack levels required when called: 3
  6228 ;; This function calls:
  6229 ;;		___lwdiv
  6230 ;;		___wmul
  6231 ;; This function is called by:
  6232 ;;		_stop
  6233 ;;		_turnLeft
  6234 ;;		_turnRight
  6235 ;;		_turnLeftLong
  6236 ;;		_turnRightLong
  6237 ;;		_fullSpeedAhead
  6238 ;;		_TimedfullSpeedAhead
  6239 ;;		_moveBack
  6240 ;;		_Calibrate
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text35
  6245   000BC6                     __ptext35:
  6246                           	callstack 0
  6247   000BC6                     _setMotorPWM:
  6248                           	callstack 26
  6249   000BC6                     
  6250                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6251   000BC6  EE20 F002          	lfsr	2,2
  6252   000BCA  500E               	movf	setMotorPWM@m^0,w,c
  6253   000BCC  26D9               	addwf	fsr2l,f,c
  6254   000BCE  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6255   000BD0  22DA               	addwfc	fsr2h,f,c
  6256   000BD2  50DF               	movf	indf2,w,c
  6257   000BD4  B4D8               	btfsc	status,2,c
  6258   000BD6  EFEF  F005         	goto	u1291
  6259   000BDA  EFF1  F005         	goto	u1290
  6260   000BDE                     u1291:
  6261   000BDE  EF25  F006         	goto	l2266
  6262   000BE2                     u1290:
  6263   000BE2                     
  6264                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6265   000BE2  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6266   000BE6  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6267   000BEA  50DF               	movf	indf2,w,c
  6268   000BEC  6E10               	movwf	??_setMotorPWM^0,c
  6269   000BEE  5010               	movf	??_setMotorPWM^0,w,c
  6270   000BF0  6E01               	movwf	___wmul@multiplier^0,c
  6271   000BF2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6272   000BF4  EE20 F003          	lfsr	2,3
  6273   000BF8  500E               	movf	setMotorPWM@m^0,w,c
  6274   000BFA  26D9               	addwf	fsr2l,f,c
  6275   000BFC  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6276   000BFE  22DA               	addwfc	fsr2h,f,c
  6277   000C00  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6278   000C04  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6279   000C08  EC01  F00F         	call	___wmul	;wreg free
  6280   000C0C  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6281   000C10  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6282   000C14  0E00               	movlw	0
  6283   000C16  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6284   000C18  0E64               	movlw	100
  6285   000C1A  6E09               	movwf	___lwdiv@divisor^0,c
  6286   000C1C  ECDE  F00C         	call	___lwdiv	;wreg free
  6287   000C20  EE20 F003          	lfsr	2,3
  6288   000C24  500E               	movf	setMotorPWM@m^0,w,c
  6289   000C26  26D9               	addwf	fsr2l,f,c
  6290   000C28  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6291   000C2A  22DA               	addwfc	fsr2h,f,c
  6292   000C2C  50DF               	movf	indf2,w,c
  6293   000C2E  6E11               	movwf	(??_setMotorPWM+1)^0,c
  6294   000C30  5007               	movf	?___lwdiv^0,w,c
  6295   000C32  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  6296   000C34  6E12               	movwf	setMotorPWM@posDuty^0,c
  6297   000C36                     
  6298                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6299   000C36  EE20 F003          	lfsr	2,3
  6300   000C3A  500E               	movf	setMotorPWM@m^0,w,c
  6301   000C3C  26D9               	addwf	fsr2l,f,c
  6302   000C3E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6303   000C40  22DA               	addwfc	fsr2h,f,c
  6304   000C42  50DF               	movf	indf2,w,c
  6305   000C44  6E13               	movwf	setMotorPWM@negDuty^0,c
  6306                           
  6307                           ;dc_motor.c: 76:     }
  6308   000C46  EF48  F006         	goto	l2270
  6309   000C4A                     l2266:
  6310                           
  6311                           ;dc_motor.c: 78:         posDuty=0;
  6312   000C4A  0E00               	movlw	0
  6313   000C4C  6E12               	movwf	setMotorPWM@posDuty^0,c
  6314   000C4E                     
  6315                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6316   000C4E  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  6317   000C52  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6318   000C56  50DF               	movf	indf2,w,c
  6319   000C58  6E10               	movwf	??_setMotorPWM^0,c
  6320   000C5A  5010               	movf	??_setMotorPWM^0,w,c
  6321   000C5C  6E01               	movwf	___wmul@multiplier^0,c
  6322   000C5E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  6323   000C60  EE20 F003          	lfsr	2,3
  6324   000C64  500E               	movf	setMotorPWM@m^0,w,c
  6325   000C66  26D9               	addwf	fsr2l,f,c
  6326   000C68  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6327   000C6A  22DA               	addwfc	fsr2h,f,c
  6328   000C6C  CFDE F003          	movff	postinc2,___wmul@multiplicand
  6329   000C70  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  6330   000C74  EC01  F00F         	call	___wmul	;wreg free
  6331   000C78  C001  F007         	movff	?___wmul,___lwdiv@dividend
  6332   000C7C  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  6333   000C80  0E00               	movlw	0
  6334   000C82  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  6335   000C84  0E64               	movlw	100
  6336   000C86  6E09               	movwf	___lwdiv@divisor^0,c
  6337   000C88  ECDE  F00C         	call	___lwdiv	;wreg free
  6338   000C8C  5007               	movf	?___lwdiv^0,w,c
  6339   000C8E  6E13               	movwf	setMotorPWM@negDuty^0,c
  6340   000C90                     l2270:
  6341                           
  6342                           ;dc_motor.c: 82:     if (m->direction) {
  6343   000C90  EE20 F001          	lfsr	2,1
  6344   000C94  500E               	movf	setMotorPWM@m^0,w,c
  6345   000C96  26D9               	addwf	fsr2l,f,c
  6346   000C98  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6347   000C9A  22DA               	addwfc	fsr2h,f,c
  6348   000C9C  50DF               	movf	indf2,w,c
  6349   000C9E  B4D8               	btfsc	status,2,c
  6350   000CA0  EF54  F006         	goto	u1301
  6351   000CA4  EF56  F006         	goto	u1300
  6352   000CA8                     u1301:
  6353   000CA8  EF78  F006         	goto	l2274
  6354   000CAC                     u1300:
  6355   000CAC                     
  6356                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6357   000CAC  EE20 F005          	lfsr	2,5
  6358   000CB0  500E               	movf	setMotorPWM@m^0,w,c
  6359   000CB2  26D9               	addwf	fsr2l,f,c
  6360   000CB4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6361   000CB6  22DA               	addwfc	fsr2h,f,c
  6362   000CB8  CFDE F010          	movff	postinc2,??_setMotorPWM
  6363   000CBC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6364   000CC0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6365   000CC4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6366   000CC8  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6367                           
  6368                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6369   000CCC  EE20 F007          	lfsr	2,7
  6370   000CD0  500E               	movf	setMotorPWM@m^0,w,c
  6371   000CD2  26D9               	addwf	fsr2l,f,c
  6372   000CD4  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6373   000CD6  22DA               	addwfc	fsr2h,f,c
  6374   000CD8  CFDE F010          	movff	postinc2,??_setMotorPWM
  6375   000CDC  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6376   000CE0  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6377   000CE4  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6378   000CE8  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6379                           
  6380                           ;dc_motor.c: 85:     } else {
  6381   000CEC  EF98  F006         	goto	l213
  6382   000CF0                     l2274:
  6383                           
  6384                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6385   000CF0  EE20 F005          	lfsr	2,5
  6386   000CF4  500E               	movf	setMotorPWM@m^0,w,c
  6387   000CF6  26D9               	addwf	fsr2l,f,c
  6388   000CF8  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6389   000CFA  22DA               	addwfc	fsr2h,f,c
  6390   000CFC  CFDE F010          	movff	postinc2,??_setMotorPWM
  6391   000D00  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6392   000D04  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6393   000D08  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6394   000D0C  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  6395                           
  6396                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6397   000D10  EE20 F007          	lfsr	2,7
  6398   000D14  500E               	movf	setMotorPWM@m^0,w,c
  6399   000D16  26D9               	addwf	fsr2l,f,c
  6400   000D18  500F               	movf	(setMotorPWM@m+1)^0,w,c
  6401   000D1A  22DA               	addwfc	fsr2h,f,c
  6402   000D1C  CFDE F010          	movff	postinc2,??_setMotorPWM
  6403   000D20  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  6404   000D24  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  6405   000D28  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6406   000D2C  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  6407   000D30                     l213:
  6408   000D30  0012               	return		;funcret
  6409   000D32                     __end_of_setMotorPWM:
  6410                           	callstack 0
  6411                           
  6412 ;; *************** function ___wmul *****************
  6413 ;; Defined at:
  6414 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  multiplier      2    0[COMRAM] unsigned int 
  6417 ;;  multiplicand    2    2[COMRAM] unsigned int 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;  product         2    4[COMRAM] unsigned int 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  2    0[COMRAM] unsigned int 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0, prodl, prodh
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6429 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6433 ;;Total ram usage:        6 bytes
  6434 ;; Hardware stack levels used: 1
  6435 ;; Hardware stack levels required when called: 2
  6436 ;; This function calls:
  6437 ;;		Nothing
  6438 ;; This function is called by:
  6439 ;;		_get_color_distance
  6440 ;;		_get_color_code
  6441 ;;		_get_wall_presence
  6442 ;;		_setMotorPWM
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text36
  6447   001E02                     __ptext36:
  6448                           	callstack 0
  6449   001E02                     ___wmul:
  6450                           	callstack 26
  6451   001E02  5001               	movf	___wmul@multiplier^0,w,c
  6452   001E04  0203               	mulwf	___wmul@multiplicand^0,c
  6453   001E06  CFF3 F005          	movff	prodl,___wmul@product
  6454   001E0A  CFF4 F006          	movff	prodh,___wmul@product+1
  6455   001E0E  5001               	movf	___wmul@multiplier^0,w,c
  6456   001E10  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  6457   001E12  50F3               	movf	243,w,c
  6458   001E14  2606               	addwf	(___wmul@product+1)^0,f,c
  6459   001E16  5002               	movf	(___wmul@multiplier+1)^0,w,c
  6460   001E18  0203               	mulwf	___wmul@multiplicand^0,c
  6461   001E1A  50F3               	movf	243,w,c
  6462   001E1C  2606               	addwf	(___wmul@product+1)^0,f,c
  6463   001E1E  C005  F001         	movff	___wmul@product,?___wmul
  6464   001E22  C006  F002         	movff	___wmul@product+1,?___wmul+1
  6465   001E26  0012               	return		;funcret
  6466   001E28                     __end_of___wmul:
  6467                           	callstack 0
  6468                           
  6469 ;; *************** function ___lwdiv *****************
  6470 ;; Defined at:
  6471 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;  dividend        2    6[COMRAM] unsigned int 
  6474 ;;  divisor         2    8[COMRAM] unsigned int 
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  quotient        2   10[COMRAM] unsigned int 
  6477 ;;  counter         1   12[COMRAM] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  2    6[COMRAM] unsigned int 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/0
  6484 ;;		On exit  : 0/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6487 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6488 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6490 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6491 ;;Total ram usage:        7 bytes
  6492 ;; Hardware stack levels used: 1
  6493 ;; Hardware stack levels required when called: 2
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_calibrate_black
  6498 ;;		_setMotorPWM
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	text37
  6503   0019BC                     __ptext37:
  6504                           	callstack 0
  6505   0019BC                     ___lwdiv:
  6506                           	callstack 26
  6507   0019BC  0E00               	movlw	0
  6508   0019BE  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  6509   0019C0  0E00               	movlw	0
  6510   0019C2  6E0B               	movwf	___lwdiv@quotient^0,c
  6511   0019C4  5009               	movf	___lwdiv@divisor^0,w,c
  6512   0019C6  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6513   0019C8  B4D8               	btfsc	status,2,c
  6514   0019CA  EFE9  F00C         	goto	u1241
  6515   0019CE  EFEB  F00C         	goto	u1240
  6516   0019D2                     u1241:
  6517   0019D2  EF13  F00D         	goto	l938
  6518   0019D6                     u1240:
  6519   0019D6  0E01               	movlw	1
  6520   0019D8  6E0D               	movwf	___lwdiv@counter^0,c
  6521   0019DA  EFF3  F00C         	goto	l2216
  6522   0019DE                     l2214:
  6523   0019DE  90D8               	bcf	status,0,c
  6524   0019E0  3609               	rlcf	___lwdiv@divisor^0,f,c
  6525   0019E2  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6526   0019E4  2A0D               	incf	___lwdiv@counter^0,f,c
  6527   0019E6                     l2216:
  6528   0019E6  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6529   0019E8  EFF8  F00C         	goto	u1251
  6530   0019EC  EFFA  F00C         	goto	u1250
  6531   0019F0                     u1251:
  6532   0019F0  EFEF  F00C         	goto	l2214
  6533   0019F4                     u1250:
  6534   0019F4                     l2218:
  6535   0019F4  90D8               	bcf	status,0,c
  6536   0019F6  360B               	rlcf	___lwdiv@quotient^0,f,c
  6537   0019F8  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6538   0019FA  5009               	movf	___lwdiv@divisor^0,w,c
  6539   0019FC  5C07               	subwf	___lwdiv@dividend^0,w,c
  6540   0019FE  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6541   001A00  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6542   001A02  A0D8               	btfss	status,0,c
  6543   001A04  EF06  F00D         	goto	u1261
  6544   001A08  EF08  F00D         	goto	u1260
  6545   001A0C                     u1261:
  6546   001A0C  EF0D  F00D         	goto	l2226
  6547   001A10                     u1260:
  6548   001A10  5009               	movf	___lwdiv@divisor^0,w,c
  6549   001A12  5E07               	subwf	___lwdiv@dividend^0,f,c
  6550   001A14  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6551   001A16  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6552   001A18  800B               	bsf	___lwdiv@quotient^0,0,c
  6553   001A1A                     l2226:
  6554   001A1A  90D8               	bcf	status,0,c
  6555   001A1C  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6556   001A1E  3209               	rrcf	___lwdiv@divisor^0,f,c
  6557   001A20  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6558   001A22  EFFA  F00C         	goto	l2218
  6559   001A26                     l938:
  6560   001A26  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6561   001A2A  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6562   001A2E  0012               	return		;funcret
  6563   001A30                     __end_of___lwdiv:
  6564                           	callstack 0
  6565                           
  6566 ;; *************** function _Interrupts_init *****************
  6567 ;; Defined at:
  6568 ;;		line 10 in file "interrupts.c"
  6569 ;; Parameters:    Size  Location     Type
  6570 ;;		None
  6571 ;; Auto vars:     Size  Location     Type
  6572 ;;		None
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  1    wreg      void 
  6575 ;; Registers used:
  6576 ;;		None
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6586 ;;Total ram usage:        0 bytes
  6587 ;; Hardware stack levels used: 1
  6588 ;; Hardware stack levels required when called: 2
  6589 ;; This function calls:
  6590 ;;		Nothing
  6591 ;; This function is called by:
  6592 ;;		_main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text38
  6597   001E8C                     __ptext38:
  6598                           	callstack 0
  6599   001E8C                     _Interrupts_init:
  6600                           	callstack 28
  6601   001E8C                     
  6602                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6603   001E8C  8CF2               	bsf	242,6,c	;volatile
  6604                           
  6605                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6606   001E8E  010E               	movlb	14	; () banked
  6607   001E90  8B29               	bsf	41,5,b	;volatile
  6608                           
  6609                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6610   001E92  812B               	bsf	43,0,b	;volatile
  6611                           
  6612                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6613   001E94  8EF2               	bsf	242,7,c	;volatile
  6614   001E96                     
  6615                           ; BSR set to: 14
  6616   001E96  0012               	return		;funcret
  6617   001E98                     __end_of_Interrupts_init:
  6618                           	callstack 0
  6619                           
  6620 ;; *************** function _HighISR *****************
  6621 ;; Defined at:
  6622 ;;		line 22 in file "interrupts.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;		None
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      void 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2, status,0, cstack
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6640 ;;Total ram usage:        0 bytes
  6641 ;; Hardware stack levels used: 1
  6642 ;; Hardware stack levels required when called: 1
  6643 ;; This function calls:
  6644 ;;		_increment_seconds
  6645 ;; This function is called by:
  6646 ;;		Interrupt level 2
  6647 ;; This function uses a non-reentrant model
  6648 ;;
  6649                           
  6650                           	psect	intcode
  6651   000008                     __pintcode:
  6652                           	callstack 0
  6653   000008                     _HighISR:
  6654                           	callstack 24
  6655                           
  6656                           ; BSR set to: 14
  6657                           ;incstack = 0
  6658   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6659   00000A                     
  6660                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6661   00000A  010E               	movlb	14	; () banked
  6662   00000C  AB33               	btfss	51,5,b	;volatile
  6663   00000E  EF0B  F000         	goto	i2u84_41
  6664   000012  EF0D  F000         	goto	i2u84_40
  6665   000016                     i2u84_41:
  6666   000016  EF15  F000         	goto	i2l388
  6667   00001A                     i2u84_40:
  6668   00001A                     
  6669                           ; BSR set to: 14
  6670                           ;interrupts.c: 25:     increment_seconds();
  6671   00001A  EC5B  F00F         	call	_increment_seconds	;wreg free
  6672   00001E                     
  6673                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6674   00001E  0EE7               	movlw	231
  6675   000020  6ED4               	movwf	212,c	;volatile
  6676   000022                     
  6677                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6678   000022  0E95               	movlw	149
  6679   000024  6ED3               	movwf	211,c	;volatile
  6680   000026                     
  6681                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6682   000026  010E               	movlb	14	; () banked
  6683   000028  9B33               	bcf	51,5,b	;volatile
  6684   00002A                     i2l388:
  6685                           
  6686                           ; BSR set to: 14
  6687   00002A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6688   00002C  0011               	retfie		f
  6689   00002E                     __end_of_HighISR:
  6690                           	callstack 0
  6691                           
  6692 ;; *************** function _increment_seconds *****************
  6693 ;; Defined at:
  6694 ;;		line 321 in file "dc_motor.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;		None
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		status,2, status,0
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6712 ;;Total ram usage:        0 bytes
  6713 ;; Hardware stack levels used: 1
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_HighISR
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text40
  6722   001EB6                     __ptext40:
  6723                           	callstack 0
  6724   001EB6                     _increment_seconds:
  6725                           	callstack 24
  6726   001EB6                     
  6727                           ;dc_motor.c: 323:     seconds += 1;
  6728   001EB6  4A5D               	infsnz	_seconds^0,f,c
  6729   001EB8  2A5E               	incf	(_seconds+1)^0,f,c
  6730   001EBA  0012               	return		;funcret
  6731   001EBC                     __end_of_increment_seconds:
  6732                           	callstack 0
  6733   000000                     
  6734                           	psect	rparam
  6735   000000                     
  6736                           	psect	temp
  6737   00005F                     btemp:
  6738                           	callstack 0
  6739   00005F                     	ds	1
  6740   000000                     int$flags	set	btemp
  6741   000000                     wtemp8	set	btemp+1
  6742   000000                     ttemp5	set	btemp+1
  6743   000000                     ttemp6	set	btemp+4
  6744   000000                     ttemp7	set	btemp+8
  6745                           
  6746                           	psect	idloc
  6747                           
  6748                           ;Config register IDLOC0 @ 0x200000
  6749                           ;	unspecified, using default values
  6750   200000                     	org	2097152
  6751   200000  0FFF               	dw	4095
  6752                           
  6753                           ;Config register IDLOC1 @ 0x200002
  6754                           ;	unspecified, using default values
  6755   200002                     	org	2097154
  6756   200002  0FFF               	dw	4095
  6757                           
  6758                           ;Config register IDLOC2 @ 0x200004
  6759                           ;	unspecified, using default values
  6760   200004                     	org	2097156
  6761   200004  0FFF               	dw	4095
  6762                           
  6763                           ;Config register IDLOC3 @ 0x200006
  6764                           ;	unspecified, using default values
  6765   200006                     	org	2097158
  6766   200006  0FFF               	dw	4095
  6767                           
  6768                           ;Config register IDLOC4 @ 0x200008
  6769                           ;	unspecified, using default values
  6770   200008                     	org	2097160
  6771   200008  0FFF               	dw	4095
  6772                           
  6773                           ;Config register IDLOC5 @ 0x20000A
  6774                           ;	unspecified, using default values
  6775   20000A                     	org	2097162
  6776   20000A  0FFF               	dw	4095
  6777                           
  6778                           ;Config register IDLOC6 @ 0x20000C
  6779                           ;	unspecified, using default values
  6780   20000C                     	org	2097164
  6781   20000C  0FFF               	dw	4095
  6782                           
  6783                           ;Config register IDLOC7 @ 0x20000E
  6784                           ;	unspecified, using default values
  6785   20000E                     	org	2097166
  6786   20000E  0FFF               	dw	4095
  6787                           
  6788                           	psect	config
  6789                           
  6790                           ;Config register CONFIG1L @ 0x300000
  6791                           ;	External Oscillator mode Selection bits
  6792                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6793                           ;	Power-up default value for COSC bits
  6794                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6795   300000                     	org	3145728
  6796   300000  AA                 	db	170
  6797                           
  6798                           ;Config register CONFIG1H @ 0x300001
  6799                           ;	unspecified, using default values
  6800                           ;	Clock Out Enable bit
  6801                           ;	CLKOUTEN = 0x1, unprogrammed default
  6802                           ;	Clock Switch Enable bit
  6803                           ;	CSWEN = 0x1, unprogrammed default
  6804                           ;	Fail-Safe Clock Monitor Enable bit
  6805                           ;	FCMEN = 0x1, unprogrammed default
  6806   300001                     	org	3145729
  6807   300001  FF                 	db	255
  6808                           
  6809                           ;Config register CONFIG2L @ 0x300002
  6810                           ;	unspecified, using default values
  6811                           ;	Master Clear Enable bit
  6812                           ;	MCLRE = 0x1, unprogrammed default
  6813                           ;	Power-up Timer Enable bit
  6814                           ;	PWRTE = 0x1, unprogrammed default
  6815                           ;	Low-power BOR enable bit
  6816                           ;	LPBOREN = 0x1, unprogrammed default
  6817                           ;	Brown-out Reset Enable bits
  6818                           ;	BOREN = 0x3, unprogrammed default
  6819   300002                     	org	3145730
  6820   300002  FF                 	db	255
  6821                           
  6822                           ;Config register CONFIG2H @ 0x300003
  6823                           ;	unspecified, using default values
  6824                           ;	Brown Out Reset Voltage selection bits
  6825                           ;	BORV = 0x3, unprogrammed default
  6826                           ;	ZCD Disable bit
  6827                           ;	ZCD = 0x1, unprogrammed default
  6828                           ;	PPSLOCK bit One-Way Set Enable bit
  6829                           ;	PPS1WAY = 0x1, unprogrammed default
  6830                           ;	Stack Full/Underflow Reset Enable bit
  6831                           ;	STVREN = 0x1, unprogrammed default
  6832                           ;	Debugger Enable bit
  6833                           ;	DEBUG = 0x1, unprogrammed default
  6834                           ;	Extended Instruction Set Enable bit
  6835                           ;	XINST = 0x1, unprogrammed default
  6836   300003                     	org	3145731
  6837   300003  FF                 	db	255
  6838                           
  6839                           ;Config register CONFIG3L @ 0x300004
  6840                           ;	WDT Period Select bits
  6841                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6842                           ;	WDT operating mode
  6843                           ;	WDTE = OFF, WDT Disabled
  6844   300004                     	org	3145732
  6845   300004  9F                 	db	159
  6846                           
  6847                           ;Config register CONFIG3H @ 0x300005
  6848                           ;	unspecified, using default values
  6849                           ;	WDT Window Select bits
  6850                           ;	WDTCWS = 0x7, unprogrammed default
  6851                           ;	WDT input clock selector
  6852                           ;	WDTCCS = 0x7, unprogrammed default
  6853   300005                     	org	3145733
  6854   300005  FF                 	db	255
  6855                           
  6856                           ;Config register CONFIG4L @ 0x300006
  6857                           ;	unspecified, using default values
  6858                           ;	Write Protection Block 0
  6859                           ;	WRT0 = 0x1, unprogrammed default
  6860                           ;	Write Protection Block 1
  6861                           ;	WRT1 = 0x1, unprogrammed default
  6862                           ;	Write Protection Block 2
  6863                           ;	WRT2 = 0x1, unprogrammed default
  6864                           ;	Write Protection Block 3
  6865                           ;	WRT3 = 0x1, unprogrammed default
  6866                           ;	Write Protection Block 3
  6867                           ;	WRT4 = 0x1, unprogrammed default
  6868                           ;	Write Protection Block 3
  6869                           ;	WRT5 = 0x1, unprogrammed default
  6870                           ;	Write Protection Block 3
  6871                           ;	WRT6 = 0x1, unprogrammed default
  6872                           ;	Write Protection Block 3
  6873                           ;	WRT7 = 0x1, unprogrammed default
  6874   300006                     	org	3145734
  6875   300006  FF                 	db	255
  6876                           
  6877                           ;Config register CONFIG4H @ 0x300007
  6878                           ;	unspecified, using default values
  6879                           ;	Configuration Register Write Protection bit
  6880                           ;	WRTC = 0x1, unprogrammed default
  6881                           ;	Boot Block Write Protection bit
  6882                           ;	WRTB = 0x1, unprogrammed default
  6883                           ;	Data EEPROM Write Protection bit
  6884                           ;	WRTD = 0x1, unprogrammed default
  6885                           ;	Scanner Enable bit
  6886                           ;	SCANE = 0x1, unprogrammed default
  6887                           ;	Low Voltage Programming Enable bit
  6888                           ;	LVP = 0x1, unprogrammed default
  6889   300007                     	org	3145735
  6890   300007  FF                 	db	255
  6891                           
  6892                           ;Config register CONFIG5L @ 0x300008
  6893                           ;	unspecified, using default values
  6894                           ;	UserNVM Program Memory Code Protection bit
  6895                           ;	CP = 0x1, unprogrammed default
  6896                           ;	DataNVM Memory Code Protection bit
  6897                           ;	CPD = 0x1, unprogrammed default
  6898   300008                     	org	3145736
  6899   300008  FF                 	db	255
  6900                           
  6901                           ;Config register CONFIG5H @ 0x300009
  6902                           ;	unspecified, using default values
  6903   300009                     	org	3145737
  6904   300009  FF                 	db	255
  6905                           
  6906                           ;Config register CONFIG6L @ 0x30000A
  6907                           ;	unspecified, using default values
  6908                           ;	Table Read Protection Block 0
  6909                           ;	EBTR0 = 0x1, unprogrammed default
  6910                           ;	Table Read Protection Block 1
  6911                           ;	EBTR1 = 0x1, unprogrammed default
  6912                           ;	Table Read Protection Block 2
  6913                           ;	EBTR2 = 0x1, unprogrammed default
  6914                           ;	Table Read Protection Block 3
  6915                           ;	EBTR3 = 0x1, unprogrammed default
  6916                           ;	Table Read Protection Block 4
  6917                           ;	EBTR4 = 0x1, unprogrammed default
  6918                           ;	Table Read Protection Block 5
  6919                           ;	EBTR5 = 0x1, unprogrammed default
  6920                           ;	Table Read Protection Block 6
  6921                           ;	EBTR6 = 0x1, unprogrammed default
  6922                           ;	Table Read Protection Block 7
  6923                           ;	EBTR7 = 0x1, unprogrammed default
  6924   30000A                     	org	3145738
  6925   30000A  FF                 	db	255
  6926                           
  6927                           ;Config register CONFIG6H @ 0x30000B
  6928                           ;	unspecified, using default values
  6929                           ;	Boot Block Table Read Protection bit
  6930                           ;	EBTRB = 0x1, unprogrammed default
  6931   30000B                     	org	3145739
  6932   30000B  FF                 	db	255
  6933                           tosu	equ	0xFFF
  6934                           tosh	equ	0xFFE
  6935                           tosl	equ	0xFFD
  6936                           stkptr	equ	0xFFC
  6937                           pclatu	equ	0xFFB
  6938                           pclath	equ	0xFFA
  6939                           pcl	equ	0xFF9
  6940                           tblptru	equ	0xFF8
  6941                           tblptrh	equ	0xFF7
  6942                           tblptrl	equ	0xFF6
  6943                           tablat	equ	0xFF5
  6944                           prodh	equ	0xFF4
  6945                           prodl	equ	0xFF3
  6946                           indf0	equ	0xFEF
  6947                           postinc0	equ	0xFEE
  6948                           postdec0	equ	0xFED
  6949                           preinc0	equ	0xFEC
  6950                           plusw0	equ	0xFEB
  6951                           fsr0h	equ	0xFEA
  6952                           fsr0l	equ	0xFE9
  6953                           wreg	equ	0xFE8
  6954                           indf1	equ	0xFE7
  6955                           postinc1	equ	0xFE6
  6956                           postdec1	equ	0xFE5
  6957                           preinc1	equ	0xFE4
  6958                           plusw1	equ	0xFE3
  6959                           fsr1h	equ	0xFE2
  6960                           fsr1l	equ	0xFE1
  6961                           bsr	equ	0xFE0
  6962                           indf2	equ	0xFDF
  6963                           postinc2	equ	0xFDE
  6964                           postdec2	equ	0xFDD
  6965                           preinc2	equ	0xFDC
  6966                           plusw2	equ	0xFDB
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     78      94
    BANK0           160     44     156
    BANK1           256      0     232
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    return_back@motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    return_back@motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    Calibrate@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> return_back@motorR(COMRAM[2]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> return_back@motorL(COMRAM[2]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), return_back@motorR(COMRAM[2]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), return_back@motorL(COMRAM[2]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), return_back@motorR(COMRAM[2]), return_back@motorL(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_return_back
    _return_back->_turnLeft
    _return_back->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _moveBack->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   92854
                                             56 COMRAM    22    22      0
                    _Interrupts_init
                      _RobotMovement
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                  _get_wall_presence
                    _initDCmotorsPWM
                           _moveBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4697
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4532
                                             21 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    2541
                                             13 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   63322
                                             35 COMRAM    12     6      6
                           _moveBack
                        _return_back
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _return_back                                          6     2      4   31157
                                             29 COMRAM     6     2      4
                _TimedfullSpeedAhead
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    5511
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    5208
                                             19 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    5261
                                             19 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (3) _TimedfullSpeedAhead                                  6     0      6    4643
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBack                                             6     0      6    5099
                                             19 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4261
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     662
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _moveBack
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _return_back
       _TimedfullSpeedAhead
         _setMotorPWM
       _stop
         _setMotorPWM
       _turnLeft
         _setMotorPWM
       _turnLeftLong
         _setMotorPWM
       _turnRight
         _setMotorPWM
       _turnRightLong
         _setMotorPWM
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _moveBack
   _stop

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E8       7       90.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4E      5E       1      100.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E2      60        0.0%
DATA                 0      0     1E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 09 15:44:04 2022

               _color_read_Red 1B58             RobotMovement@color 0024                _color_read_Blue 1C48  
                           l71 10DC                             l73 1112                             l82 1E46  
                           l74 10F2                             l91 1BF6                             l67 10C0  
                           l85 1BA6                             l77 1104                             l94 1C46  
                           l88 1C96            ___wmul@multiplicand 0003               _color_read_Clear 1BF8  
             ?_calibrate_black 0001               _color_read_Green 1BA8            RobotMovement@motorL 0026  
          RobotMovement@motorR 0028              ??_Interrupts_init 0001                            l112 1D3E  
                          l113 1D40                            l114 1D54                            l115 1D56  
                          l116 1D6A                            l213 0D30                            l141 124A  
                          l109 0BC4                            l302 1D28                            l118 1D6C  
                          l206 1848                            l216 1CE0                            l312 0A24  
                          l144 1678                            l136 08B6                            l225 0E8A  
                          l241 15CE                            l234 0FDA                            l138 08BE  
                          l251 1B56                            l147 17B8                            l308 0A24  
                          l317 0A58                            l350 1E00                            l263 19BA  
                          l248 14A6                            l344 1DD8                            l257 1946  
                          l353 1EAA                            l362 1E8A                            l291 03B2  
                          l347 1DDA                            l292 03F4                            l444 1E66  
                          l356 1EB4                            l365 1DAE                            l382 1E96  
                          l286 022E                            l447 1E26                            l287 0270  
                          l359 1EA0                            l481 171C                            l298 0520  
                          l474 170C                            l458 1A88                            l459 1A98  
                          l945 1A2E                            l938 1A26                            _RGB 00F0  
             ?_calibrate_white 0001                            wreg 000FE8                           l2200 1DEA  
                         l3000 126E                           l2210 19C4                           l2202 1E02  
                         l3010 128E                           l3002 1272                           l2220 19FA  
                         l2212 19D6                           l2204 1E1E                           l2300 1D2A  
                         l3020 12AA                           l3012 1292                           l3004 1276  
                         l2222 1A10                           l2214 19DE                           l2310 1CB0  
                         l2230 1EA2                           l2302 1D38                           l3030 12F8  
                         l3022 12B2                           l3014 1296                           l3006 127E  
                         l2224 1A18                           l2216 19E6                           l2208 19BC  
                         l2312 1CBC                           l2232 1EA6                           l2240 1E9C  
                         l2304 1D4E                           l3040 1364                           l3032 130C  
                         l3024 12CA                           l3016 129A                           l3008 1286  
                         l2226 1A1A                           l2218 19F4                           l2314 1CC8  
                         l2330 0D6A                           l2322 0D42                           l2410 0F68  
                         l2250 1D7C                           l2242 1EAC                           l2234 1E82  
                         l2306 1D64                           l3034 1318                           l3026 12DE  
                         l3018 12A2                           l2228 1A20                           l2260 0BC6  
                         l2308 1C98                           l2340 0DB2                           l2332 0D76  
                         l2316 0D32                           l2420 0FBA                           l2412 0F74  
                         l2404 0F30                           l2500 1448                           l2252 1D84  
                         l2244 1EB0                           l2236 1E86                           l3036 1334  
                         l3028 12F4                           l2270 0C90                           l2262 0BE2  
                         l2350 0DDE                           l2342 0DBA                           l2334 0D82  
                         l2430 14B0                           l2422 0FBE                           l2414 0F80  
                         l2406 0F50                           l2510 148A                           l2502 1454  
                         l2254 1DAA                           l2246 1D70                           l2238 1E98  
                         l3038 1348                           l2272 0CAC                           l2264 0C36  
                         l2520 1918                           l2512 18D4                           l2360 0E2E  
                         l2352 0DFE                           l2344 0DD6                           l2336 0D8E  
                         l2328 0D4A                           l2440 1500                           l2432 14D0  
                         l2424 14A8                           l2416 0F96                           l2408 0F5C  
                         l2504 1460                           l2256 1DAC                           l2248 1D74  
                         l2600 0B06                           l2274 0CF0                           l2266 0C4A  
                         l2522 1924                           l2514 18E0                           l2362 0E46  
                         l2354 0E0A                           l2338 0D9A                           l2442 1518  
                         l2434 14DC                           l2418 0F9E                           l2370 0E8C  
                         l2506 146C                           l2530 1DC0                           l2282 1C48  
                         l2290 1BEE                           l2602 0B2C                           l2268 0C4E  
                         l2620 198C                           l2612 1948                           l2516 1900  
                         l2524 1930                           l2364 0E4E                           l2356 0E16  
                         l2460 1588                           l2452 1544                           l2444 1520  
                         l2436 14E8                           l2508 1482                           l2532 1DC2  
                         l2284 1C8E                           l2276 1B58                           l2540 15D0  
                         l2700 1014                           l2604 0B48                           l2622 1998  
                         l2614 1954                           l2518 190C                           l2366 0E6A  
                         l2358 0E22                           l2462 1594                           l2454 1564  
                         l2446 153C                           l2438 14F4                           l2390 0EE0  
                         l2382 0E9C                           l2630 08EA                           l2534 1DC4  
                         l2526 1DB0                           l2198 1DDA                           l2294 1BF8  
                         l2278 1B9E                           l2550 1638                           l2542 15DC  
                         l2710 106E                           l2702 1026                           l2606 0B60  
                         l2616 1974                           l2624 19A4                           l2368 0E6E  
                         l2464 15AA                           l2456 1570                           l2392 0EEC  
                         l2384 0EBC                           l2376 0E94                           l2480 13C0  
                         l2640 0982                           l2632 0902                           l2536 1DC6  
                         l2528 1DBA                           l2296 1C3E                           l2288 1BA8  
                         l2560 1120                           l2552 1644                           l2544 15F2  
                         l2720 10B8                           l2712 1080                           l2704 1038  
                         l2608 0B68                           l2800 172A                           l2618 1980  
                         l2466 15B2                           l2458 157C                           l2394 0F04  
                         l2386 0EC8                           l2490 1414                           l2482 13CC  
                         l2474 1388                           l2642 09AA                           l2634 092A  
                         l2650 0A3E                           l2626 08C0                           l2570 1184  
                         l2562 1136                           l2554 165A                           l2546 1604  
                         l2538 1E2A                           l2730 10EE                           l2722 10BC  
                         l2714 1092                           l2706 104A                           l2810 1786  
                         l2802 1740                           l2396 0F0C                           l2388 0ED4  
                         l2484 13D8                           l2476 13A8                           l2468 1380  
                         l2644 09C2                           l2636 0942                           l2628 08C4  
                         l2900 028A                           l2580 11E4                           l2572 119A  
                         l2564 1146                           l2556 166C                           l2548 1610  
                         l2732 1100                           l2724 10BE                           l2716 10A4  
                         l2708 105C                           l2660 1A68                           l2652 1A30  
                         l2740 0556                           l2804 174C                           l2820 1818  
                         l2398 0F28                           l2486 13F0                           l2478 13B4  
                         l2646 09F2                           l2638 096A                           l2910 0336  
                         l2902 028E                           l2582 11FA                           l2574 11AA  
                         l2566 1152                           l2558 1114                           l2726 10CE  
                         l2718 10B6                           l2670 16B4                           l2662 167A  
                         l2654 1A40                           l2590 0A78                           l2750 05BE  
                         l2742 0562                           l2734 0522                           l2806 1758  
                         l2830 183A                           l2822 1822                           l2814 17BA  
                         l2496 141C                           l2488 13F8                           l2648 0A38  
                         l2920 040E                           l2912 036A                           l2904 02AC  
                         l2584 1212                           l2576 11CC                           l2568 1178  
                         l2840 1B16                           l2680 16FC                           l2672 16C2  
                         l2664 168A                           l2656 1A4E                           l2592 0A94  
                         l2760 0678                           l2752 05CA                           l2744 058A  
                         l2736 052E                           l2808 177A                           l2832 183C  
                         l2824 1824                           l2816 17CA                           l2498 143C  
                         l2930 0472                           l2922 0412                           l2914 0372  
                         l2906 02C0                           l2850 0032                           l2586 122E  
                         l2578 11D8                           l2690 0FFA                           l2842 1B26  
                         l2682 1706                           l2674 16CC                           l2666 16A0  
                         l2658 1A5E                           l2594 0AAC                           l2770 0746  
                         l2762 0698                           l2754 05EA                           l2746 0596  
                         l2738 0544                           l2834 1846                           l2826 182E  
                         l2818 17F4                           l2940 04BC                           l2932 0476  
                         l2916 0398                           l2908 0304                           l2924 0430  
                         l2860 0088                           l2852 0044                           l2692 1004  
                         l2684 0FDC                           l2844 1B32                           l2836 1AFE  
                         l2676 16EA                           l2668 16A8                           l2596 0AD2  
                         l2588 0A5A                           l2780 080E                           l2772 075A  
                         l2764 06AC                           l2756 05FE                           l2748 05AC  
                         l2828 1830                           l2950 04EC                           l2942 04D0  
                         l2934 048A                           l2926 0444                           l2918 03DA  
                         l2862 009C                           l2854 0058                           l2694 100E  
                         l2686 0FE0                           l2846 1B3E                           l2838 1B06  
                         l2678 16FA                           l2598 0AEE                           l2790 0874  
                         l2774 07C4                           l2766 0716                           l2758 0668  
                         l2952 04F0                           l2936 049E                           l2928 0458  
                         l2880 0108                           l2864 00B6                           l2856 0072  
                         l2960 1D24                           l2696 1010                           l2688 0FEA  
                         l2848 1B4A                           l2792 088C                           l2776 07D4  
                         l2768 0726                           l2962 1E8C                           l2954 050C  
                         l2938 04B8                           l2890 01B2                           l2882 010C  
                         l2874 00D6                           l2866 00BA                           l2858 0076  
                         l2970 1E64                           l2698 1012                           l2794 089C  
                         l2786 0816                           l2778 0804                           l2948 04D8  
                         l2892 01E6                           l2876 00EA                           l2868 00CE  
                         l2884 0128                           l2964 1E48                           l2956 1CE2  
                         l2796 08A0                           l2788 0844                           l2894 01EE  
                         l2886 013C                           l2878 0104                           l2966 1E50  
                         l2958 1CFE                           l2798 171E                           l2990 1260  
                         l2896 0214                           l2888 0180                           l2968 1E62  
                         l2992 1260                           l2984 124C                           l2898 0256  
                         l2994 1264                           l2986 1250                           l2996 1268  
                         l2988 1254                           l2998 126A                           u2000 04D0  
                         u2001 04CC                           u2010 050C                           u2011 0508  
                         u1300 0CAC                           u2020 1CFE                           u1220 1DEA  
                         u1301 0CA8                           u2021 1CFA                           u1221 1DE6  
                         u1230 1E00                           u1310 1D38                           u1231 1DFC  
                         u1311 1D34                           u1240 19D6                           u1400 153C  
                         u1320 1D4E                           u1241 19D2                           u1401 1538  
                         u1321 1D4A                           u1250 19F4                           u1410 15CE  
                         u1330 1D64                           u2050 12F4                           u1251 19F0  
                         u1411 15CA                           u1331 1D60                           u2051 12F0  
                         u1260 1A10                           u1340 0DD6                           u1420 1414  
                         u1500 092A                           u1261 1A0C                           u1341 0DD2  
                         u1421 1410                           u1501 0926                           u1350 0E6A  
                         u1430 14A6                           u1510 096A                           u1270 1D98  
                         u1351 0E66                           u1431 14A2                           u1511 0966  
                         u1271 1D90                           u1440 1946                           u1360 0E8A  
                         u1520 09AA                           u1441 1942                           u1361 0E86  
                         u1521 09A6                           u1601 101E                           u1290 0BE2  
                         u1370 0F28                           u1530 09F2                           u1450 0A78  
                         u1291 0BDE                           u1371 0F24                           u1531 09EE  
                         u1611 1030                           u1451 0A74                           u1380 0FBA  
                         u1540 0A58                           u1700 10DC                           u1460 0AD2  
                         u1381 0FB6                           u1541 0A54                           u1701 10D8  
                         u1621 1042                           u1461 0ACE                           u1390 0FDA  
                         u1710 10EA                           u1550 1A4E                           u1470 0B2C  
                         u1391 0FD6                           u1711 10E6                           u1631 1054  
                         u1551 1A4A                           u1471 0B28                           u1480 19BA  
                         u1288 1D9A                           u1720 1100                           u1560 1A88  
                         u1481 19B6                           u1721 10FC                           u1641 1066  
                         u1561 1A84                           u1801 084E                           u1490 08EA  
                         u1730 1112                           u1570 16A0                           _T2PR 000FBC  
                   _Black_rule 01D0                           u1491 08E6                           u2507 161A  
                         u1731 110E                           u1651 1078                           u1571 169C  
                         u1811 0860                           u2427 12BC                           u1900 013C  
                         u1580 16C2                           u1820 088C                           u1740 05EA  
                         u1901 0138                           u2517 164E                           u1661 108A  
                         u1581 16BE                           u1821 0888                           u1741 05E6  
                         u2437 1734                           u1910 01B2                           u1590 16EA  
                         u1830 08B6                           u1750 0698                           u2607 0F8A  
                         u1911 01AE                           u2527 112A                           u1671 109C  
                         u1591 16E6                           u1831 08B2                           u1751 0694  
                         u2447 1762                           u1920 0214                           u1760 0746  
                         u1840 17B2                           u2617 150A                           u1921 0210  
                         u2537 115C                           u1681 10AE                           u1761 0742  
                         u2457 0538                           u1841 17AC                           u1930 0256  
                         u1690 10CE                           u1850 17B4                           u2627 159E  
                         u1931 0252                           u2547 118E                           u1691 10CA  
                         u1771 07DE                           u2467 056C                           u1940 02C0  
                         u1860 0044                           u2637 0DA4                           u1941 02BC  
                         u1861 0040                           u2557 11C0                           u1781 07F0  
                         u2477 05A0                           u1950 0336                           u1870 0088  
                         u2647 0E38                           u1951 0332                           u1871 0084  
                         u2567 11EE                           u2487 0FF0                           u1791 083C  
                         u1960 0398                           u1880 00CE                           u2657 1CD2  
                         u2577 13E2                           u1961 0394                           u1881 00CA  
                         u2497 15E6                           u1970 03DA                           u1890 0128  
                         u2587 1476                           u1971 03D6                           u1891 0124  
                         u1980 0444                           u2597 0EF6                           u1981 0440  
                         u1990 048A                           u1991 0486                           _main 124C  
                         fsr2h 000FDA                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 005F                           _stop 1C98  
                         prodh 000FF4                           prodl 000FF3                           start 002E  
       __end_of_color_read_Red 1BA8                __end_of_HighISR 002E                   ___param_bank 000000  
           _get_color_code$460 00D8             _get_color_code$458 00D0             _get_color_code$459 00D4  
                        ?_main 0001                __end_of___lldiv 171E                          ?_stop 0014  
          _add_seconds_to_list 1CE2                    _Black_setup 004F                __end_of___lwdiv 1A30  
                        i2l275 1EBA                          i2l388 002A                          _TMR0H 000FD4  
                        _TMR0L 000FD3            ___lmul@multiplicand 0005     __end_of_I2C_2_Master_Start 1EAC  
   __end_of_I2C_2_Master_Write 1E8C             _get_color_distance 0A5A                          _index 005B  
                        tablat 000FF5                          plusw0 000FEB                          plusw1 000FE3  
                        plusw2 000FDB            ?_get_color_distance 0007                          ttemp5 0060  
                        ttemp6 0063                          ttemp7 0067                          status 000FD8  
                        wtemp8 0060           ?_add_seconds_to_list 0001                     _Green_rule 00A8  
      __end_of_color_read_Blue 1C98          _I2C_2_Master_RepStart 1EAC                ?_color_read_Red 0005  
              __initialization 184A                   __end_of_main 1380                   __end_of_stop 1CE2  
                 _turnLeftLong 14A8           ??_get_color_distance 001F                         ??_main 0039  
                       ??_stop 0018                  __activetblptr 000000            _get_color_code$2454 00C4  
                 ?_setMotorPWM 000E                         _CCPR1H 000FAA                         _CCPR2H 000FA6  
                       _CCPR3H 000F25                         _CCPR4H 000F21                         _RE2PPS 000E74  
                       _RD5PPS 000E6F                         _RC7PPS 000E69                         _RD6PPS 000E70  
                       _RE4PPS 000E76                         i2l1910 001A                         i2l1912 001E  
                       i2l1914 0022                         i2l1772 1EB6                         i2l1916 0026  
                       i2l1908 000A                         _RG6PPS 000E88                      ??_HighISR 0001  
     __end_of_color_click_init 1114          ??_add_seconds_to_list 0001                 RobotMovement@i 002C  
        __end_of_RobotMovement 0522               ??_get_color_code 0037                  ??_Timer0_init 0001  
                 _CCPTMRS0bits 000FAD                         ___lmul 1A30       get_color_distance@color1 0007  
     get_color_distance@color2 0013                         ___wmul 1E02                      ??___lldiv 0015  
                    ??___lwdiv 000B                    _Color_rules 0100                         clear_0 18B0  
                       clear_1 18BC                         isa$std 000001               __end_of_moveBack 19BC  
        calibrate_black@clear1 0010          calibrate_black@clear2 0012                   __pdataCOMRAM 004F  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                 ?_return_back 001E                 _Lightblue_rule 006C                     _White_rule 01DC  
                       stop@mL 0014                         stop@mR 0016              ??_initDCmotorsPWM 0003  
             __end_of_turnLeft 0E8C          __end_of_set_led_color 1D6E                     __accesstop 0060  
      __end_of__initialization 18CA       __end_of_color_read_Clear 1C48        get_wall_presence@clear1 0010  
      get_wall_presence@clear2 0012       __end_of_color_read_Green 1BF8         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 1E8C  
               __pcstackCOMRAM 0001                   __pidataBANK0 1A9A                   __pidataBANK1 1E74  
          __end_of_Timer0_init 1E68                     __pbssBANK0 00F0                     __pbssBANK1 0100  
                _turnRightLong 1380              _color_writetoaddr 1E28                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?___wmul 0001  
               main@color_code 003B                 ___lmul@product 0009                get_color_code@i 00E2  
          ??_color_writetoaddr 0004              return_back@motorL 001E              return_back@motorR 0020  
      get_color_code@min_index 00DE                        i2u84_40 001A                        i2u84_41 0016  
                      _SSP2ADD 000ED6                        _SSP2BUF 000ED5        get_color_code@min_value 00DC  
            _get_wall_presence 171E                    _Orange_rule 0078             ?_get_wall_presence 000C  
      __end_of_Interrupts_init 1E98         color_writetoaddr@value 0003               ??_color_read_Red 0007  
                      _HighISR 0008      __end_of_color_writetoaddr 1E48                 ?_turnRightLong 0014  
           _I2C_2_Master_Start 1EA2             _I2C_2_Master_Write 1E80                      ?_moveBack 0014  
                      __Hparam 0000            ??_get_wall_presence 000E                        __Lparam 0000  
            color_read_Red@tmp 000A                    _Timer0_init 1E48                        ___lldiv 167A  
          ?_I2C_2_Master_Start 0001                        ___lwdiv 19BC            ?_I2C_2_Master_Write 0001  
                      __pcinit 184A                        __ramtop 0E00                      ?_turnLeft 0014  
                      __ptext0 124C                        __ptext1 17BA                        __ptext2 171E  
                      __ptext3 0522                        __ptext4 0A5A                        __ptext5 1A30  
                      __ptext6 167A                        __ptext7 1AFE                        __ptext8 0FDC  
                      __ptext9 1E28                      _T2CONbits 000FBD                        _seconds 005D  
                    _T2HLTbits 000FBE      __end_of_get_wall_presence 17BA           ??_I2C_2_Master_Start 0002  
         ??_I2C_2_Master_Write 0002           end_of_initialization 18CA              ?_color_click_init 0001  
                   ??_moveBack 001A                ___lldiv@divisor 0011             ??_color_click_init 0016  
              ___lldiv@counter 0019                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc2 000FDE                    _White_setup 0060  
              _initDCmotorsPWM 17BA                     ??_turnLeft 0018                      _PORTFbits 000F8E  
           setMotorPWM@negDuty 0013              __end_of_turnRight 0FDC                    _Yellow_rule 0090  
                    _TRISAbits 000F81             setMotorPWM@posDuty 0012                      _TRISCbits 000F83  
                    _TRISDbits 000F84                      _TRISEbits 000F85                      _TRISFbits 000F86  
                    _TRISGbits 000F87           _calibrate_black$2455 0014    __end_of_add_seconds_to_list 1D2A  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0016       color_writetoaddr@address 0004  
   get_color_distance@B_offset 0033        ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001  
              ??_turnRightLong 0018                    _CCP1CONbits 000FAB     get_color_distance@G_offset 0031  
            _increment_seconds 1EB6              ?_color_read_Clear 0005                    _CCP2CONbits 000FA7  
            ??_calibrate_black 000E              ?_color_read_Green 0005                    _CCP3CONbits 000F26  
                  _CCP4CONbits 000F22                     main@motorL 003D                     main@motorR 0046  
            ??_calibrate_white 000C             ?_increment_seconds 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 _fullSpeedAhead 1AFE     get_color_distance@R_offset 002F  
                    _Blue_rule 009C            ??_increment_seconds 0001                 __end_of___lmul 1A9A  
               __end_of___wmul 1E28                  __pidataCOMRAM 1E68            color_read_Clear@tmp 000A  
          start_initialization 184A            _TimedfullSpeedAhead 18D4      __end_of_increment_seconds 1EBC  
                    _Pink_rule 0084            color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 184A  
         ?_TimedfullSpeedAhead 0014         __end_of_fullSpeedAhead 1B58                       ??___lmul 0009  
                     ??___wmul 0005                    __pdataBANK0 0060                    __pdataBANK1 01DC  
       _get_color_distance$421 002B         _get_color_distance$417 0023         _get_color_distance$419 0027  
                  __pbssCOMRAM 005B                  __pcstackBANK0 00C4            get_color_code@value 00E0  
                     ?_HighISR 0001                  _RobotMovement 0032               ___lwdiv@dividend 0007  
        ??_TimedfullSpeedAhead 001A                   ?_Timer0_init 0001                ?_fullSpeedAhead 0014  
                   moveBack@mL 0014                     moveBack@mR 0016                      __pintcode 0008  
                     ?___lldiv 000D                       ?___lwdiv 0007                  ?_turnLeftLong 0014  
                 moveBack@time 0018           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
        TimedfullSpeedAhead@mL 0014          TimedfullSpeedAhead@mR 0016    get_color_code@NormalizedRGB 00E4  
            _I2C_2_Master_Idle 1DDA              _I2C_2_Master_Init 1DB0              _I2C_2_Master_Read 1D6E  
            _I2C_2_Master_Stop 1E98             ?_I2C_2_Master_Idle 0001             ?_I2C_2_Master_Init 0001  
           ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010             ?_I2C_2_Master_Stop 0001  
             ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001                turnRightLong@mL 0014  
              turnRightLong@mR 0016                 turnLeftLong@mL 0014                 turnLeftLong@mR 0016  
          ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001            ??_I2C_2_Master_Read 0002  
               ___wmul@product 0005                       _LATAbits 000F79                  _set_led_color 1D2A  
          ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B                       _LATEbits 000F7D  
                     _LATFbits 000F7E                       _LATGbits 000F7F                       _PIE0bits 000E29  
               ?_RobotMovement 0024                       _PIE2bits 000E2B                    turnRight@mL 0014  
                  turnRight@mR 0016                       _PIR0bits 000E33               ?_initDCmotorsPWM 0001  
                    _wall_coef 00C2                      _wait_time 00C0                       _SSP2CON2 000EDA  
               ??_turnLeftLong 0018                       _SSP2STAT 000ED8             set_led_color@color 0001  
    __end_of_I2C_2_Master_Idle 1E02      __end_of_I2C_2_Master_Init 1DDA      __end_of_I2C_2_Master_Read 1DB0  
            ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1EA2                   setMotorPWM@m 000E  
  I2C_2_Master_Write@data_byte 0002                  _movement_list 016C              ??_color_read_Blue 0007  
                ??_return_back 0022                _calibrate_black 1114        TimedfullSpeedAhead@time 0018  
                    _turnRight 0E8C                _calibrate_white 15D0              ___lmul@multiplier 0001  
                    copy_data0 185E                      copy_data1 187E                      copy_data2 189E  
               ?_set_led_color 0001  __end_of_I2C_2_Master_RepStart 1EB6             color_read_Blue@tmp 000A  
          __end_of_setMotorPWM 0D32                       _Red_rule 00B4                       __Hrparam 0000  
                     __Lrparam 0000     __end_of_get_color_distance 0BC6                 _get_color_code 0522  
                   _ANSELDbits 000EA7                     _ANSELFbits 000EB4                     _T0CON0bits 000FD5  
                   _T0CON1bits 000FD6                ___lwdiv@divisor 0009                ___lwdiv@counter 000D  
                   ?_turnRight 0014                       __ptext10 15D0                       __ptext11 1114  
                     __ptext20 1EAC                       __ptext12 1D2A                       __ptext21 1D6E  
                     __ptext13 1B58                       __ptext30 14A8                       __ptext22 1DDA  
                     __ptext14 1BA8                       __ptext31 0D32                       __ptext23 1DB0  
                     __ptext15 1BF8                       __ptext40 1EB6                       __ptext32 1C98  
                     __ptext24 1CE2                       __ptext16 1C48                       __ptext33 18D4  
                     __ptext25 1E48                       __ptext17 1E80                       __ptext34 1948  
                     __ptext26 0032                       __ptext18 1E98                       __ptext35 0BC6  
                     __ptext27 08C0                       __ptext19 1EA2                       __ptext36 1E02  
                     __ptext28 1380                       __ptext37 19BC                       __ptext29 0E8C  
                     __ptext38 1E8C                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
              ??_RobotMovement 002A            __end_of_return_back 0A5A                     turnLeft@mL 0014  
                   turnLeft@mR 0016                 turnRightLong@i 001A                  turnLeftLong@i 001A  
        __end_of_turnRightLong 14A8                       _moveBack 1948                     turnRight@i 001C  
                   turnRight@k 001A                       isa$xinst 000000                       int$flags 005F  
       __end_of_get_color_code 08C0        __end_of_calibrate_black 124C                       _turnLeft 0D32  
      __end_of_calibrate_white 167A                     _INTCONbits 000FF2                    _setMotorPWM 0BC6  
              ??_set_led_color 0003           __end_of_turnLeftLong 15D0                       intlevel2 0000  
             ___lldiv@dividend 000D               ??_fullSpeedAhead 0018                      turnLeft@i 001C  
                    turnLeft@k 001A                ?_get_color_code 0035               _color_click_init 0FDC  
                   _SSP2DATPPS 000E1D               ___lldiv@quotient 0015                     _SSP2CLKPPS 000E1C  
                  _return_back 08C0                    ??_turnRight 0018    __end_of_TimedfullSpeedAhead 1948  
          RobotMovement@i_1285 002E  
