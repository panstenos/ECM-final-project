

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Dec 08 10:01:19 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 06/04/2022 GMT
    63                           ; 
    64                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F67K40 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000000                     
    97                           	psect	idataCOMRAM
    98   001B0C                     __pidataCOMRAM:
    99                           	callstack 0
   100                           
   101                           ;initializer for _Black_setup
   102   001B0C  0404               	dw	1028
   103   001B0E  0000               	dw	0
   104   001B10  024B               	dw	587
   105   001B12  0000               	dw	0
   106   001B14  00A1               	dw	161
   107   001B16  0000               	dw	0
   108                           
   109                           ;initializer for _wall_coef
   110   001B18  000F               	dw	15
   111                           
   112                           	psect	idataBANK0
   113   001758                     __pidataBANK0:
   114                           	callstack 0
   115                           
   116                           ;initializer for _White_setup
   117   001758  28FC               	dw	10492
   118   00175A  0000               	dw	0
   119   00175C  1B55               	dw	6997
   120   00175E  0000               	dw	0
   121   001760  0770               	dw	1904
   122   001762  0000               	dw	0
   123                           
   124                           ;initializer for _Lightblue_rule
   125   001764  0026               	dw	38
   126   001766  0000               	dw	0
   127   001768  0048               	dw	72
   128   00176A  0000               	dw	0
   129   00176C  0054               	dw	84
   130   00176E  0000               	dw	0
   131                           
   132                           ;initializer for _Orange_rule
   133   001770  005C               	dw	92
   134   001772  0000               	dw	0
   135   001774  0027               	dw	39
   136   001776  0000               	dw	0
   137   001778  001C               	dw	28
   138   00177A  0000               	dw	0
   139                           
   140                           ;initializer for _Pink_rule
   141   00177C  004D               	dw	77
   142   00177E  0000               	dw	0
   143   001780  003C               	dw	60
   144   001782  0000               	dw	0
   145   001784  0040               	dw	64
   146   001786  0000               	dw	0
   147                           
   148                           ;initializer for _Yellow_rule
   149   001788  005D               	dw	93
   150   00178A  0000               	dw	0
   151   00178C  004C               	dw	76
   152   00178E  0000               	dw	0
   153   001790  0014               	dw	20
   154   001792  0000               	dw	0
   155                           
   156                           ;initializer for _Blue_rule
   157   001794  0003               	dw	3
   158   001796  0000               	dw	0
   159   001798  0009               	dw	9
   160   00179A  0000               	dw	0
   161   00179C  0024               	dw	36
   162   00179E  0000               	dw	0
   163                           
   164                           ;initializer for _Green_rule
   165   0017A0  0019               	dw	25
   166   0017A2  0000               	dw	0
   167   0017A4  0036               	dw	54
   168   0017A6  0000               	dw	0
   169   0017A8  0008               	dw	8
   170   0017AA  0000               	dw	0
   171                           
   172                           ;initializer for _Red_rule
   173   0017AC  0048               	dw	72
   174   0017AE  0000               	dw	0
   175   0017B0  0002               	dw	2
   176   0017B2  0000               	dw	0
   177   0017B4  0002               	dw	2
   178   0017B6  0000               	dw	0
   179                           
   180                           ;initializer for _wait_time
   181   0017B8  00DC               	dw	220
   182                           
   183                           	psect	idataBANK1
   184   001B1A                     __pidataBANK1:
   185                           	callstack 0
   186                           
   187                           ;initializer for _White_rule
   188   001B1A  0064               	dw	100
   189   001B1C  0000               	dw	0
   190   001B1E  0064               	dw	100
   191   001B20  0000               	dw	0
   192   001B22  0064               	dw	100
   193   001B24  0000               	dw	0
   194   000000                     _T0CON0bits	set	4053
   195   000000                     _T0CON1bits	set	4054
   196   000000                     _TRISDbits	set	3972
   197   000000                     _SSP2CON2bits	set	3802
   198   000000                     _SSP2CLKPPS	set	3612
   199   000000                     _SSP2DATPPS	set	3613
   200   000000                     _RC7PPS	set	3689
   201   000000                     _RE2PPS	set	3700
   202   000000                     _ANSELFbits	set	3764
   203   000000                     _TRISAbits	set	3969
   204   000000                     _TRISFbits	set	3974
   205   000000                     _PORTFbits	set	3982
   206   000000                     _TRISGbits	set	3975
   207   000000                     _TRISCbits	set	3971
   208   000000                     _TRISEbits	set	3973
   209   000000                     _SSP2BUF	set	3797
   210   000000                     _SSP2ADD	set	3798
   211   000000                     _SSP2CON1bits	set	3801
   212   000000                     _LATAbits	set	3961
   213   000000                     _LATGbits	set	3967
   214   000000                     _CCPR4H	set	3873
   215   000000                     _CCPR3H	set	3877
   216   000000                     _T2PR	set	4028
   217   000000                     _T2CONbits	set	4029
   218   000000                     _CCPR2H	set	4006
   219   000000                     _CCPR1H	set	4010
   220   000000                     _LATCbits	set	3963
   221   000000                     _LATEbits	set	3965
   222   000000                     _LATFbits	set	3966
   223   000000                     _RE4PPS	set	3702
   224   000000                     _RG6PPS	set	3720
   225   000000                     _RD5PPS	set	3695
   226   000000                     _ANSELDbits	set	3751
   227   000000                     _TMR0L	set	4051
   228   000000                     _TMR0H	set	4052
   229   000000                     _INTCONbits	set	4082
   230   000000                     _T2CLKCONbits	set	4031
   231   000000                     _T2HLTbits	set	4030
   232   000000                     _CCP1CONbits	set	4011
   233   000000                     _CCPTMRS0bits	set	4013
   234   000000                     _CCP2CONbits	set	4007
   235   000000                     _CCP3CONbits	set	3878
   236   000000                     _CCP4CONbits	set	3874
   237   000000                     _SSP2CON2	set	3802
   238   000000                     _SSP2STAT	set	3800
   239   000000                     _PIE0bits	set	3625
   240   000000                     _RD6PPS	set	3696
   241   000000                     _PIE2bits	set	3627
   242   000000                     _PIR0bits	set	3635
   243                           
   244                           ; #config settings
   245                           
   246                           	psect	cinit
   247   0015F0                     __pcinit:
   248                           	callstack 0
   249   0015F0                     start_initialization:
   250                           	callstack 0
   251   0015F0                     __initialization:
   252                           	callstack 0
   253                           
   254                           ; Initialize objects allocated to BANK1 (12 bytes)
   255                           ; load TBLPTR registers with __pidataBANK1
   256   0015F0  0E1A               	movlw	low __pidataBANK1
   257   0015F2  6EF6               	movwf	tblptrl,c
   258   0015F4  0E1B               	movlw	high __pidataBANK1
   259   0015F6  6EF7               	movwf	tblptrh,c
   260   0015F8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   261   0015FA  6EF8               	movwf	tblptru,c
   262   0015FC  EE01  F0DC         	lfsr	0,__pdataBANK1
   263   001600  EE10 F00C          	lfsr	1,12
   264   001604                     copy_data0:
   265   001604  0009               	tblrd		*+
   266   001606  CFF5 FFEE          	movff	tablat,postinc0
   267   00160A  50E5               	movf	postdec1,w,c
   268   00160C  50E1               	movf	fsr1l,w,c
   269   00160E  E1FA               	bnz	copy_data0
   270                           
   271                           ; Initialize objects allocated to BANK0 (98 bytes)
   272                           ; load TBLPTR registers with __pidataBANK0
   273   001610  0E58               	movlw	low __pidataBANK0
   274   001612  6EF6               	movwf	tblptrl,c
   275   001614  0E17               	movlw	high __pidataBANK0
   276   001616  6EF7               	movwf	tblptrh,c
   277   001618  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   278   00161A  6EF8               	movwf	tblptru,c
   279   00161C  EE00  F060         	lfsr	0,__pdataBANK0
   280   001620  EE10 F062          	lfsr	1,98
   281   001624                     copy_data1:
   282   001624  0009               	tblrd		*+
   283   001626  CFF5 FFEE          	movff	tablat,postinc0
   284   00162A  50E5               	movf	postdec1,w,c
   285   00162C  50E1               	movf	fsr1l,w,c
   286   00162E  E1FA               	bnz	copy_data1
   287                           
   288                           ; Initialize objects allocated to COMRAM (14 bytes)
   289                           ; load TBLPTR registers with __pidataCOMRAM
   290   001630  0E0C               	movlw	low __pidataCOMRAM
   291   001632  6EF6               	movwf	tblptrl,c
   292   001634  0E1B               	movlw	high __pidataCOMRAM
   293   001636  6EF7               	movwf	tblptrh,c
   294   001638  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   295   00163A  6EF8               	movwf	tblptru,c
   296   00163C  EE00  F04D         	lfsr	0,__pdataCOMRAM
   297   001640  EE10 F00E          	lfsr	1,14
   298   001644                     copy_data2:
   299   001644  0009               	tblrd		*+
   300   001646  CFF5 FFEE          	movff	tablat,postinc0
   301   00164A  50E5               	movf	postdec1,w,c
   302   00164C  50E1               	movf	fsr1l,w,c
   303   00164E  E1FA               	bnz	copy_data2
   304                           
   305                           ; Clear objects allocated to BANK1 (220 bytes)
   306   001650  EE01  F000         	lfsr	0,__pbssBANK1
   307   001654  0EDC               	movlw	220
   308   001656                     clear_0:
   309   001656  6AEE               	clrf	postinc0,c
   310   001658  06E8               	decf	wreg,f,c
   311   00165A  E1FD               	bnz	clear_0
   312                           
   313                           ; Clear objects allocated to BANK0 (12 bytes)
   314   00165C  EE00  F0EE         	lfsr	0,__pbssBANK0
   315   001660  0E0C               	movlw	12
   316   001662                     clear_1:
   317   001662  6AEE               	clrf	postinc0,c
   318   001664  06E8               	decf	wreg,f,c
   319   001666  E1FD               	bnz	clear_1
   320                           
   321                           ; Clear objects allocated to COMRAM (4 bytes)
   322   001668  6A5E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   323   00166A  6A5D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   324   00166C  6A5C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   325   00166E  6A5B               	clrf	__pbssCOMRAM& (0+255),c
   326   001670                     end_of_initialization:
   327                           	callstack 0
   328   001670                     __end_of__initialization:
   329                           	callstack 0
   330   001670  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   331   001672  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   332   001674  0100               	movlb	0
   333   001676  EFFB  F008         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMRAM
   336   00005B                     __pbssCOMRAM:
   337                           	callstack 0
   338   00005B                     _index:
   339                           	callstack 0
   340   00005B                     	ds	2
   341   00005D                     _seconds:
   342                           	callstack 0
   343   00005D                     	ds	2
   344                           
   345                           	psect	dataCOMRAM
   346   00004D                     __pdataCOMRAM:
   347                           	callstack 0
   348   00004D                     _Black_setup:
   349                           	callstack 0
   350   00004D                     	ds	12
   351   000059                     _wall_coef:
   352                           	callstack 0
   353   000059                     	ds	2
   354                           
   355                           	psect	bssBANK0
   356   0000EE                     __pbssBANK0:
   357                           	callstack 0
   358   0000EE                     _RGB:
   359                           	callstack 0
   360   0000EE                     	ds	12
   361                           
   362                           	psect	dataBANK0
   363   000060                     __pdataBANK0:
   364                           	callstack 0
   365   000060                     _White_setup:
   366                           	callstack 0
   367   000060                     	ds	12
   368   00006C                     _Lightblue_rule:
   369                           	callstack 0
   370   00006C                     	ds	12
   371   000078                     _Orange_rule:
   372                           	callstack 0
   373   000078                     	ds	12
   374   000084                     _Pink_rule:
   375                           	callstack 0
   376   000084                     	ds	12
   377   000090                     _Yellow_rule:
   378                           	callstack 0
   379   000090                     	ds	12
   380   00009C                     _Blue_rule:
   381                           	callstack 0
   382   00009C                     	ds	12
   383   0000A8                     _Green_rule:
   384                           	callstack 0
   385   0000A8                     	ds	12
   386   0000B4                     _Red_rule:
   387                           	callstack 0
   388   0000B4                     	ds	12
   389   0000C0                     _wait_time:
   390                           	callstack 0
   391   0000C0                     	ds	2
   392                           
   393                           	psect	bssBANK1
   394   000100                     __pbssBANK1:
   395                           	callstack 0
   396   000100                     _Color_rules:
   397                           	callstack 0
   398   000100                     	ds	108
   399   00016C                     _movement_list:
   400                           	callstack 0
   401   00016C                     	ds	100
   402   0001D0                     _Black_rule:
   403                           	callstack 0
   404   0001D0                     	ds	12
   405                           
   406                           	psect	dataBANK1
   407   0001DC                     __pdataBANK1:
   408                           	callstack 0
   409   0001DC                     _White_rule:
   410                           	callstack 0
   411   0001DC                     	ds	12
   412                           
   413                           	psect	cstackBANK0
   414   0000C2                     __pcstackBANK0:
   415                           	callstack 0
   416   0000C2                     _get_color_code$2441:
   417                           	callstack 0
   418                           
   419                           ; 12 bytes @ 0x0
   420   0000C2                     	ds	12
   421   0000CE                     _get_color_code$458:
   422                           	callstack 0
   423                           
   424                           ; 4 bytes @ 0xC
   425   0000CE                     	ds	4
   426   0000D2                     _get_color_code$459:
   427                           	callstack 0
   428                           
   429                           ; 4 bytes @ 0x10
   430   0000D2                     	ds	4
   431   0000D6                     _get_color_code$460:
   432                           	callstack 0
   433                           
   434                           ; 4 bytes @ 0x14
   435   0000D6                     	ds	4
   436   0000DA                     get_color_code@min_value:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x18
   440   0000DA                     	ds	2
   441   0000DC                     get_color_code@min_index:
   442                           	callstack 0
   443                           
   444                           ; 2 bytes @ 0x1A
   445   0000DC                     	ds	2
   446   0000DE                     get_color_code@value:
   447                           	callstack 0
   448                           
   449                           ; 2 bytes @ 0x1C
   450   0000DE                     	ds	2
   451   0000E0                     get_color_code@i:
   452                           	callstack 0
   453                           
   454                           ; 2 bytes @ 0x1E
   455   0000E0                     	ds	2
   456   0000E2                     get_color_code@NormalizedRGB:
   457                           	callstack 0
   458                           
   459                           ; 12 bytes @ 0x20
   460   0000E2                     	ds	12
   461                           
   462                           	psect	cstackCOMRAM
   463   000001                     __pcstackCOMRAM:
   464                           	callstack 0
   465   000001                     ??_add_seconds_to_list:
   466   000001                     ??_I2C_2_Master_Idle:
   467   000001                     ?___wmul:
   468                           	callstack 0
   469   000001                     ?___lmul:
   470                           	callstack 0
   471   000001                     set_led_color@color:
   472                           	callstack 0
   473   000001                     initDCmotorsPWM@PWMperiod:
   474                           	callstack 0
   475   000001                     ___wmul@multiplier:
   476                           	callstack 0
   477   000001                     ___lmul@multiplier:
   478                           	callstack 0
   479                           
   480                           ; 4 bytes @ 0x0
   481   000001                     	ds	1
   482   000002                     ??_I2C_2_Master_Read:
   483   000002                     I2C_2_Master_Write@data_byte:
   484                           	callstack 0
   485                           
   486                           ; 1 bytes @ 0x1
   487   000002                     	ds	1
   488   000003                     color_writetoaddr@value:
   489                           	callstack 0
   490   000003                     I2C_2_Master_Read@ack:
   491                           	callstack 0
   492   000003                     ___wmul@multiplicand:
   493                           	callstack 0
   494                           
   495                           ; 2 bytes @ 0x2
   496   000003                     	ds	1
   497   000004                     color_writetoaddr@address:
   498                           	callstack 0
   499   000004                     I2C_2_Master_Read@tmp:
   500                           	callstack 0
   501                           
   502                           ; 1 bytes @ 0x3
   503   000004                     	ds	1
   504   000005                     ?_color_read_Red:
   505                           	callstack 0
   506   000005                     ?_color_read_Blue:
   507                           	callstack 0
   508   000005                     ?_color_read_Green:
   509                           	callstack 0
   510   000005                     ?_color_read_Clear:
   511                           	callstack 0
   512   000005                     ___wmul@product:
   513                           	callstack 0
   514   000005                     ___lmul@multiplicand:
   515                           	callstack 0
   516                           
   517                           ; 4 bytes @ 0x4
   518   000005                     	ds	2
   519   000007                     ??_color_read_Red:
   520   000007                     ??_color_read_Blue:
   521   000007                     ??_color_read_Green:
   522   000007                     ??_color_read_Clear:
   523   000007                     ?_get_color_distance:
   524                           	callstack 0
   525   000007                     ?___lwdiv:
   526                           	callstack 0
   527   000007                     ___lwdiv@dividend:
   528                           	callstack 0
   529   000007                     get_color_distance@color1:
   530                           	callstack 0
   531                           
   532                           ; 12 bytes @ 0x6
   533   000007                     	ds	2
   534   000009                     ___lwdiv@divisor:
   535                           	callstack 0
   536   000009                     ___lmul@product:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x8
   540   000009                     	ds	1
   541   00000A                     color_read_Red@tmp:
   542                           	callstack 0
   543   00000A                     color_read_Blue@tmp:
   544                           	callstack 0
   545   00000A                     color_read_Green@tmp:
   546                           	callstack 0
   547   00000A                     color_read_Clear@tmp:
   548                           	callstack 0
   549                           
   550                           ; 2 bytes @ 0x9
   551   00000A                     	ds	1
   552   00000B                     ___lwdiv@quotient:
   553                           	callstack 0
   554                           
   555                           ; 2 bytes @ 0xA
   556   00000B                     	ds	1
   557   00000C                     ??_calibrate_white:
   558   00000C                     ?_get_wall_presence:
   559                           	callstack 0
   560                           
   561                           ; 2 bytes @ 0xB
   562   00000C                     	ds	1
   563   00000D                     ?___lldiv:
   564                           	callstack 0
   565   00000D                     ___lwdiv@counter:
   566                           	callstack 0
   567   00000D                     ___lldiv@dividend:
   568                           	callstack 0
   569                           
   570                           ; 4 bytes @ 0xC
   571   00000D                     	ds	1
   572   00000E                     ??_calibrate_black:
   573   00000E                     ??_get_wall_presence:
   574   00000E                     setMotorPWM@m:
   575                           	callstack 0
   576                           
   577                           ; 2 bytes @ 0xD
   578   00000E                     	ds	2
   579   000010                     ??_setMotorPWM:
   580   000010                     calibrate_black@clear1:
   581                           	callstack 0
   582   000010                     get_wall_presence@clear1:
   583                           	callstack 0
   584                           
   585                           ; 2 bytes @ 0xF
   586   000010                     	ds	1
   587   000011                     ___lldiv@divisor:
   588                           	callstack 0
   589                           
   590                           ; 4 bytes @ 0x10
   591   000011                     	ds	1
   592   000012                     setMotorPWM@posDuty:
   593                           	callstack 0
   594   000012                     calibrate_black@clear2:
   595                           	callstack 0
   596   000012                     get_wall_presence@clear2:
   597                           	callstack 0
   598                           
   599                           ; 2 bytes @ 0x11
   600   000012                     	ds	1
   601   000013                     setMotorPWM@negDuty:
   602                           	callstack 0
   603   000013                     get_color_distance@color2:
   604                           	callstack 0
   605                           
   606                           ; 12 bytes @ 0x12
   607   000013                     	ds	1
   608   000014                     ??_color_click_init:
   609   000014                     stop@mL:
   610                           	callstack 0
   611   000014                     turnLeft@mL:
   612                           	callstack 0
   613   000014                     turnRight@mL:
   614                           	callstack 0
   615   000014                     turnLeftLong@mL:
   616                           	callstack 0
   617   000014                     turnRightLong@mL:
   618                           	callstack 0
   619   000014                     fullSpeedAhead@mL:
   620                           	callstack 0
   621   000014                     moveBack@mL:
   622                           	callstack 0
   623                           
   624                           ; 2 bytes @ 0x13
   625   000014                     	ds	1
   626   000015                     ___lldiv@quotient:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x14
   630   000015                     	ds	1
   631   000016                     stop@mR:
   632                           	callstack 0
   633   000016                     turnLeft@mR:
   634                           	callstack 0
   635   000016                     turnRight@mR:
   636                           	callstack 0
   637   000016                     turnLeftLong@mR:
   638                           	callstack 0
   639   000016                     turnRightLong@mR:
   640                           	callstack 0
   641   000016                     fullSpeedAhead@mR:
   642                           	callstack 0
   643   000016                     moveBack@mR:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x15
   647   000016                     	ds	2
   648   000018                     ??_turnLeft:
   649   000018                     ??_turnRight:
   650   000018                     ??_turnLeftLong:
   651   000018                     ??_turnRightLong:
   652   000018                     moveBack@time:
   653                           	callstack 0
   654                           
   655                           ; 2 bytes @ 0x17
   656   000018                     	ds	1
   657   000019                     ___lldiv@counter:
   658                           	callstack 0
   659                           
   660                           ; 1 bytes @ 0x18
   661   000019                     	ds	1
   662   00001A                     ??_moveBack:
   663   00001A                     turnLeft@i:
   664                           	callstack 0
   665   00001A                     turnRight@i:
   666                           	callstack 0
   667   00001A                     turnLeftLong@i:
   668                           	callstack 0
   669   00001A                     turnRightLong@i:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x19
   673   00001A                     	ds	2
   674   00001C                     RobotMovement@color:
   675                           	callstack 0
   676                           
   677                           ; 2 bytes @ 0x1B
   678   00001C                     	ds	2
   679   00001E                     RobotMovement@motorL:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x1D
   683   00001E                     	ds	1
   684   00001F                     ??_get_color_distance:
   685                           
   686                           ; 1 bytes @ 0x1E
   687   00001F                     	ds	1
   688   000020                     RobotMovement@motorR:
   689                           	callstack 0
   690                           
   691                           ; 2 bytes @ 0x1F
   692   000020                     	ds	2
   693   000022                     
   694                           ; 1 bytes @ 0x21
   695   000022                     	ds	1
   696   000023                     _get_color_distance$417:
   697                           	callstack 0
   698                           
   699                           ; 4 bytes @ 0x22
   700   000023                     	ds	1
   701   000024                     RobotMovement@i:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x23
   705   000024                     	ds	2
   706   000026                     RobotMovement@i_1275:
   707                           	callstack 0
   708                           
   709                           ; 2 bytes @ 0x25
   710   000026                     	ds	1
   711   000027                     _get_color_distance$419:
   712                           	callstack 0
   713                           
   714                           ; 4 bytes @ 0x26
   715   000027                     	ds	4
   716   00002B                     _get_color_distance$421:
   717                           	callstack 0
   718                           
   719                           ; 4 bytes @ 0x2A
   720   00002B                     	ds	4
   721   00002F                     get_color_distance@R_offset:
   722                           	callstack 0
   723                           
   724                           ; 2 bytes @ 0x2E
   725   00002F                     	ds	2
   726   000031                     get_color_distance@G_offset:
   727                           	callstack 0
   728                           
   729                           ; 2 bytes @ 0x30
   730   000031                     	ds	2
   731   000033                     get_color_distance@B_offset:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x32
   735   000033                     	ds	2
   736   000035                     ?_get_color_code:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x34
   740   000035                     	ds	2
   741   000037                     ??_get_color_code:
   742                           
   743                           ; 1 bytes @ 0x36
   744   000037                     	ds	2
   745   000039                     main@color_code:
   746                           	callstack 0
   747                           
   748                           ; 2 bytes @ 0x38
   749   000039                     	ds	2
   750   00003B                     main@motorL:
   751                           	callstack 0
   752                           
   753                           ; 9 bytes @ 0x3A
   754   00003B                     	ds	9
   755   000044                     main@motorR:
   756                           	callstack 0
   757                           
   758                           ; 9 bytes @ 0x43
   759   000044                     	ds	9
   760                           
   761 ;;
   762 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   763 ;;
   764 ;; *************** function _main *****************
   765 ;; Defined at:
   766 ;;		line 17 in file "main.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  color_code      2   56[COMRAM] unsigned int 
   771 ;;  motorR          9   67[COMRAM] struct DC_motor
   772 ;;  motorL          9   58[COMRAM] struct DC_motor
   773 ;;  PWMcycle        2    0        unsigned int 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   784 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   786 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   787 ;;Total ram usage:       20 bytes
   788 ;; Hardware stack levels required when called: 7
   789 ;; This function calls:
   790 ;;		_Interrupts_init
   791 ;;		_RobotMovement
   792 ;;		_Timer0_init
   793 ;;		_add_seconds_to_list
   794 ;;		_color_click_init
   795 ;;		_fullSpeedAhead
   796 ;;		_get_color_code
   797 ;;		_get_wall_presence
   798 ;;		_initDCmotorsPWM
   799 ;;		_moveBack
   800 ;;		_stop
   801 ;; This function is called by:
   802 ;;		Startup code after reset
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           	psect	text0
   807   0011F6                     __ptext0:
   808                           	callstack 0
   809   0011F6                     _main:
   810                           	callstack 24
   811   0011F6                     
   812                           ;main.c: 18:     Timer0_init();
   813   0011F6  EC76  F00D         	call	_Timer0_init	;wreg free
   814   0011FA                     
   815                           ;main.c: 19:     Interrupts_init();
   816   0011FA  EC99  F00D         	call	_Interrupts_init	;wreg free
   817   0011FE                     
   818                           ;main.c: 20:     initDCmotorsPWM(99);
   819   0011FE  0E00               	movlw	0
   820   001200  6E02               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   821   001202  0E63               	movlw	99
   822   001204  6E01               	movwf	initDCmotorsPWM@PWMperiod^0,c
   823   001206  EC6A  F00A         	call	_initDCmotorsPWM	;wreg free
   824   00120A                     
   825                           ;main.c: 22:     color_click_init();
   826   00120A  EC7E  F005         	call	_color_click_init	;wreg free
   827   00120E                     
   828                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   829   00120E  010E               	movlb	14	; () banked
   830   001210  95B4               	bcf	180,2,b	;volatile
   831   001212                     
   832                           ; BSR set to: 14
   833                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   834   001212  8486               	bsf	134,2,c	;volatile
   835   001214                     
   836                           ; BSR set to: 14
   837                           ;main.c: 26:     struct DC_motor motorL, motorR;;main.c: 27:     motorL.power=0;
   838   001214  0E00               	movlw	0
   839   001216  6E3B               	movwf	main@motorL^0,c
   840   001218                     
   841                           ; BSR set to: 14
   842                           ;main.c: 28:     motorL.direction=1;
   843   001218  0E01               	movlw	1
   844   00121A  6E3C               	movwf	(main@motorL+1)^0,c
   845   00121C                     
   846                           ; BSR set to: 14
   847                           ;main.c: 29:     motorL.brakemode=1;
   848   00121C  0E01               	movlw	1
   849   00121E  6E3D               	movwf	(main@motorL+2)^0,c
   850   001220                     
   851                           ; BSR set to: 14
   852                           ;main.c: 30:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   853   001220  0EAA               	movlw	170
   854   001222  6E40               	movwf	(main@motorL+5)^0,c
   855   001224  0E0F               	movlw	15
   856   001226  6E41               	movwf	(main@motorL+6)^0,c
   857   001228                     
   858                           ; BSR set to: 14
   859                           ;main.c: 31:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   860   001228  0EA6               	movlw	166
   861   00122A  6E42               	movwf	(main@motorL+7)^0,c
   862   00122C  0E0F               	movlw	15
   863   00122E  6E43               	movwf	(main@motorL+8)^0,c
   864   001230                     
   865                           ; BSR set to: 14
   866                           ;main.c: 32:     motorL.PWMperiod=PWMcycle;
   867   001230  0E00               	movlw	0
   868   001232  6E3F               	movwf	(main@motorL+4)^0,c
   869   001234  0E63               	movlw	99
   870   001236  6E3E               	movwf	(main@motorL+3)^0,c
   871   001238                     
   872                           ; BSR set to: 14
   873                           ;main.c: 34:     motorR.power=0;
   874   001238  0E00               	movlw	0
   875   00123A  6E44               	movwf	main@motorR^0,c
   876   00123C                     
   877                           ; BSR set to: 14
   878                           ;main.c: 35:     motorR.direction=1;
   879   00123C  0E01               	movlw	1
   880   00123E  6E45               	movwf	(main@motorR+1)^0,c
   881   001240                     
   882                           ; BSR set to: 14
   883                           ;main.c: 36:     motorR.brakemode=1;
   884   001240  0E01               	movlw	1
   885   001242  6E46               	movwf	(main@motorR+2)^0,c
   886   001244                     
   887                           ; BSR set to: 14
   888                           ;main.c: 37:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
   889   001244  0E25               	movlw	37
   890   001246  6E49               	movwf	(main@motorR+5)^0,c
   891   001248  0E0F               	movlw	15
   892   00124A  6E4A               	movwf	(main@motorR+6)^0,c
   893   00124C                     
   894                           ; BSR set to: 14
   895                           ;main.c: 38:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
   896   00124C  0E21               	movlw	33
   897   00124E  6E4B               	movwf	(main@motorR+7)^0,c
   898   001250  0E0F               	movlw	15
   899   001252  6E4C               	movwf	(main@motorR+8)^0,c
   900   001254                     
   901                           ; BSR set to: 14
   902                           ;main.c: 39:     motorR.PWMperiod=PWMcycle;
   903   001254  0E00               	movlw	0
   904   001256  6E48               	movwf	(main@motorR+4)^0,c
   905   001258  0E63               	movlw	99
   906   00125A  6E47               	movwf	(main@motorR+3)^0,c
   907   00125C                     l2862:
   908                           
   909                           ;main.c: 41:     fullSpeedAhead(&motorL,&motorR);
   910   00125C  0E3B               	movlw	low main@motorL
   911   00125E  6E14               	movwf	fullSpeedAhead@mL^0,c
   912   001260  0E00               	movlw	high main@motorL
   913   001262  6E15               	movwf	(fullSpeedAhead@mL+1)^0,c
   914   001264  0E44               	movlw	low main@motorR
   915   001266  6E16               	movwf	fullSpeedAhead@mR^0,c
   916   001268  0E00               	movlw	high main@motorR
   917   00126A  6E17               	movwf	(fullSpeedAhead@mR+1)^0,c
   918   00126C  ECDD  F00B         	call	_fullSpeedAhead	;wreg free
   919   001270                     l2864:
   920                           
   921                           ;main.c: 43:         if(get_wall_presence() == 1){
   922   001270  EC1C  F00A         	call	_get_wall_presence	;wreg free
   923   001274  040C               	decf	?_get_wall_presence^0,w,c
   924   001276  100D               	iorwf	(?_get_wall_presence+1)^0,w,c
   925   001278  A4D8               	btfss	status,2,c
   926   00127A  EF41  F009         	goto	u1871
   927   00127E  EF43  F009         	goto	u1870
   928   001282                     u1871:
   929   001282  EF38  F009         	goto	l2864
   930   001286                     u1870:
   931   001286                     
   932                           ;main.c: 44:             add_seconds_to_list();
   933   001286  ECAA  F00C         	call	_add_seconds_to_list	;wreg free
   934   00128A                     
   935                           ;main.c: 45:             stop(&motorL,&motorR);
   936   00128A  0E3B               	movlw	low main@motorL
   937   00128C  6E14               	movwf	stop@mL^0,c
   938   00128E  0E00               	movlw	high main@motorL
   939   001290  6E15               	movwf	(stop@mL+1)^0,c
   940   001292  0E44               	movlw	low main@motorR
   941   001294  6E16               	movwf	stop@mR^0,c
   942   001296  0E00               	movlw	high main@motorR
   943   001298  6E17               	movwf	(stop@mR+1)^0,c
   944   00129A  EC11  F00D         	call	_stop	;wreg free
   945   00129E                     
   946                           ;main.c: 46:             unsigned int color_code = get_color_code();
   947   00129E  EC43  F002         	call	_get_color_code	;wreg free
   948   0012A2  C035  F039         	movff	?_get_color_code,main@color_code
   949   0012A6  C036  F03A         	movff	?_get_color_code+1,main@color_code+1
   950   0012AA                     
   951                           ;main.c: 47:             moveBack(&motorL, &motorR, 10);
   952   0012AA  0E3B               	movlw	low main@motorL
   953   0012AC  6E14               	movwf	moveBack@mL^0,c
   954   0012AE  0E00               	movlw	high main@motorL
   955   0012B0  6E15               	movwf	(moveBack@mL+1)^0,c
   956   0012B2  0E44               	movlw	low main@motorR
   957   0012B4  6E16               	movwf	moveBack@mR^0,c
   958   0012B6  0E00               	movlw	high main@motorR
   959   0012B8  6E17               	movwf	(moveBack@mR+1)^0,c
   960   0012BA  0E00               	movlw	0
   961   0012BC  6E19               	movwf	(moveBack@time+1)^0,c
   962   0012BE  0E0A               	movlw	10
   963   0012C0  6E18               	movwf	moveBack@time^0,c
   964   0012C2  ECB2  F00A         	call	_moveBack	;wreg free
   965   0012C6                     
   966                           ;main.c: 48:             RobotMovement(color_code, &motorL, &motorR);
   967   0012C6  C039  F01C         	movff	main@color_code,RobotMovement@color
   968   0012CA  C03A  F01D         	movff	main@color_code+1,RobotMovement@color+1
   969   0012CE  0E3B               	movlw	low main@motorL
   970   0012D0  6E1E               	movwf	RobotMovement@motorL^0,c
   971   0012D2  0E00               	movlw	high main@motorL
   972   0012D4  6E1F               	movwf	(RobotMovement@motorL+1)^0,c
   973   0012D6  0E44               	movlw	low main@motorR
   974   0012D8  6E20               	movwf	RobotMovement@motorR^0,c
   975   0012DA  0E00               	movlw	high main@motorR
   976   0012DC  6E21               	movwf	(RobotMovement@motorR+1)^0,c
   977   0012DE  EC19  F000         	call	_RobotMovement	;wreg free
   978   0012E2  EF2E  F009         	goto	l2862
   979   0012E6  EF17  F000         	goto	start
   980   0012EA                     __end_of_main:
   981                           	callstack 0
   982                           
   983 ;; *************** function _stop *****************
   984 ;; Defined at:
   985 ;;		line 92 in file "dc_motor.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  mL              2   19[COMRAM] PTR struct DC_motor
   988 ;;		 -> main@motorL(9), 
   989 ;;  mR              2   21[COMRAM] PTR struct DC_motor
   990 ;;		 -> main@motorR(9), 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1002 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1005 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1006 ;;Total ram usage:        4 bytes
  1007 ;; Hardware stack levels used: 1
  1008 ;; Hardware stack levels required when called: 4
  1009 ;; This function calls:
  1010 ;;		_setMotorPWM
  1011 ;; This function is called by:
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text1
  1017   001A22                     __ptext1:
  1018                           	callstack 0
  1019   001A22                     _stop:
  1020                           	callstack 26
  1021   001A22                     
  1022                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  1023   001A22  C014  FFD9         	movff	stop@mL,fsr2l
  1024   001A26  C015  FFDA         	movff	stop@mL+1,fsr2h
  1025   001A2A  0E00               	movlw	0
  1026   001A2C  6EDF               	movwf	indf2,c
  1027                           
  1028                           ;dc_motor.c: 95:     (*mR).power=0;
  1029   001A2E  C016  FFD9         	movff	stop@mR,fsr2l
  1030   001A32  C017  FFDA         	movff	stop@mR+1,fsr2h
  1031   001A36  0E00               	movlw	0
  1032   001A38  6EDF               	movwf	indf2,c
  1033   001A3A                     
  1034                           ;dc_motor.c: 96:     setMotorPWM(mL);
  1035   001A3A  C014  F00E         	movff	stop@mL,setMotorPWM@m
  1036   001A3E  C015  F00F         	movff	stop@mL+1,setMotorPWM@m+1
  1037   001A42  ECC8  F004         	call	_setMotorPWM	;wreg free
  1038   001A46                     
  1039                           ;dc_motor.c: 97:     setMotorPWM(mR);
  1040   001A46  C016  F00E         	movff	stop@mR,setMotorPWM@m
  1041   001A4A  C017  F00F         	movff	stop@mR+1,setMotorPWM@m+1
  1042   001A4E  ECC8  F004         	call	_setMotorPWM	;wreg free
  1043   001A52  0012               	return		;funcret
  1044   001A54                     __end_of_stop:
  1045                           	callstack 0
  1046                           
  1047 ;; *************** function _moveBack *****************
  1048 ;; Defined at:
  1049 ;;		line 270 in file "dc_motor.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  1052 ;;		 -> main@motorL(9), 
  1053 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  1054 ;;		 -> main@motorR(9), 
  1055 ;;  time            2   23[COMRAM] unsigned int 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;		None
  1058 ;; Return value:  Size  Location     Type
  1059 ;;                  1    wreg      void 
  1060 ;; Registers used:
  1061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1062 ;; Tracked objects:
  1063 ;;		On entry : 0/0
  1064 ;;		On exit  : 0/0
  1065 ;;		Unchanged: 0/0
  1066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1067 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1069 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1070 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1071 ;;Total ram usage:        8 bytes
  1072 ;; Hardware stack levels used: 1
  1073 ;; Hardware stack levels required when called: 4
  1074 ;; This function calls:
  1075 ;;		_setMotorPWM
  1076 ;; This function is called by:
  1077 ;;		_main
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text2
  1082   001564                     __ptext2:
  1083                           	callstack 0
  1084   001564                     _moveBack:
  1085                           	callstack 26
  1086   001564                     
  1087                           ;dc_motor.c: 270: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 271: {;dc_motor.c: 272:     seconds = 0;
  1088   001564  0E00               	movlw	0
  1089   001566  6E5E               	movwf	(_seconds+1)^0,c
  1090   001568  0E00               	movlw	0
  1091   00156A  6E5D               	movwf	_seconds^0,c
  1092                           
  1093                           ;dc_motor.c: 273:     while (seconds<time)
  1094   00156C  EFEC  F00A         	goto	l2690
  1095   001570                     l2678:
  1096                           
  1097                           ;dc_motor.c: 274:     {;dc_motor.c: 275:         (*mL).direction=0;
  1098   001570  EE20 F001          	lfsr	2,1
  1099   001574  5014               	movf	moveBack@mL^0,w,c
  1100   001576  26D9               	addwf	fsr2l,f,c
  1101   001578  5015               	movf	(moveBack@mL+1)^0,w,c
  1102   00157A  22DA               	addwfc	fsr2h,f,c
  1103   00157C  0E00               	movlw	0
  1104   00157E  6EDF               	movwf	indf2,c
  1105                           
  1106                           ;dc_motor.c: 276:         (*mR).direction=0;
  1107   001580  EE20 F001          	lfsr	2,1
  1108   001584  5016               	movf	moveBack@mR^0,w,c
  1109   001586  26D9               	addwf	fsr2l,f,c
  1110   001588  5017               	movf	(moveBack@mR+1)^0,w,c
  1111   00158A  22DA               	addwfc	fsr2h,f,c
  1112   00158C  0E00               	movlw	0
  1113   00158E  6EDF               	movwf	indf2,c
  1114   001590                     
  1115                           ;dc_motor.c: 277:         (*mL).power=50;
  1116   001590  C014  FFD9         	movff	moveBack@mL,fsr2l
  1117   001594  C015  FFDA         	movff	moveBack@mL+1,fsr2h
  1118   001598  0E32               	movlw	50
  1119   00159A  6EDF               	movwf	indf2,c
  1120   00159C                     
  1121                           ;dc_motor.c: 278:         (*mR).power=50;
  1122   00159C  C016  FFD9         	movff	moveBack@mR,fsr2l
  1123   0015A0  C017  FFDA         	movff	moveBack@mR+1,fsr2h
  1124   0015A4  0E32               	movlw	50
  1125   0015A6  6EDF               	movwf	indf2,c
  1126   0015A8                     
  1127                           ;dc_motor.c: 279:         setMotorPWM(mL);
  1128   0015A8  C014  F00E         	movff	moveBack@mL,setMotorPWM@m
  1129   0015AC  C015  F00F         	movff	moveBack@mL+1,setMotorPWM@m+1
  1130   0015B0  ECC8  F004         	call	_setMotorPWM	;wreg free
  1131   0015B4                     
  1132                           ;dc_motor.c: 280:         setMotorPWM(mR);
  1133   0015B4  C016  F00E         	movff	moveBack@mR,setMotorPWM@m
  1134   0015B8  C017  F00F         	movff	moveBack@mR+1,setMotorPWM@m+1
  1135   0015BC  ECC8  F004         	call	_setMotorPWM	;wreg free
  1136   0015C0                     
  1137                           ;dc_motor.c: 281:         _delay((unsigned long)((500)*(64000000/4000.0)));
  1138   0015C0  0E29               	movlw	41
  1139   0015C2  6E1B               	movwf	(??_moveBack+1)^0,c
  1140   0015C4  0E96               	movlw	150
  1141   0015C6  6E1A               	movwf	??_moveBack^0,c
  1142   0015C8  0E7F               	movlw	127
  1143   0015CA                     u2247:
  1144   0015CA  2EE8               	decfsz	wreg,f,c
  1145   0015CC  D7FE               	bra	u2247
  1146   0015CE  2E1A               	decfsz	??_moveBack^0,f,c
  1147   0015D0  D7FC               	bra	u2247
  1148   0015D2  2E1B               	decfsz	(??_moveBack+1)^0,f,c
  1149   0015D4  D7FA               	bra	u2247
  1150   0015D6  F000               	nop	
  1151   0015D8                     l2690:
  1152                           
  1153                           ;dc_motor.c: 273:     while (seconds<time)
  1154   0015D8  5018               	movf	moveBack@time^0,w,c
  1155   0015DA  5C5D               	subwf	_seconds^0,w,c
  1156   0015DC  5019               	movf	(moveBack@time+1)^0,w,c
  1157   0015DE  585E               	subwfb	(_seconds+1)^0,w,c
  1158   0015E0  A0D8               	btfss	status,0,c
  1159   0015E2  EFF5  F00A         	goto	u1671
  1160   0015E6  EFF7  F00A         	goto	u1670
  1161   0015EA                     u1671:
  1162   0015EA  EFB8  F00A         	goto	l2678
  1163   0015EE                     u1670:
  1164   0015EE  0012               	return		;funcret
  1165   0015F0                     __end_of_moveBack:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function _initDCmotorsPWM *****************
  1169 ;; Defined at:
  1170 ;;		line 9 in file "dc_motor.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  PWMperiod       2    0[COMRAM] int 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, status,2
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1188 ;;Total ram usage:        2 bytes
  1189 ;; Hardware stack levels used: 1
  1190 ;; Hardware stack levels required when called: 2
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_main
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text3
  1199   0014D4                     __ptext3:
  1200                           	callstack 0
  1201   0014D4                     _initDCmotorsPWM:
  1202                           	callstack 28
  1203   0014D4                     
  1204                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1205   0014D4  9485               	bcf	133,2,c	;volatile
  1206                           
  1207                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1208   0014D6  9E83               	bcf	131,7,c	;volatile
  1209                           
  1210                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1211   0014D8  9C87               	bcf	135,6,c	;volatile
  1212                           
  1213                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1214   0014DA  9885               	bcf	133,4,c	;volatile
  1215                           
  1216                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1217   0014DC  947D               	bcf	125,2,c	;volatile
  1218                           
  1219                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1220   0014DE  9E7B               	bcf	123,7,c	;volatile
  1221                           
  1222                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1223   0014E0  9C7F               	bcf	127,6,c	;volatile
  1224                           
  1225                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1226   0014E2  987D               	bcf	125,4,c	;volatile
  1227   0014E4                     
  1228                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1229   0014E4  0E05               	movlw	5
  1230   0014E6  010E               	movlb	14	; () banked
  1231   0014E8  6F74               	movwf	116,b	;volatile
  1232                           
  1233                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1234   0014EA  0E06               	movlw	6
  1235   0014EC  6F76               	movwf	118,b	;volatile
  1236                           
  1237                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1238   0014EE  0E07               	movlw	7
  1239   0014F0  6F69               	movwf	105,b	;volatile
  1240                           
  1241                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1242   0014F2  0E08               	movlw	8
  1243   0014F4  6F88               	movwf	136,b	;volatile
  1244                           
  1245                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1246   0014F6  50BD               	movf	189,w,c	;volatile
  1247   0014F8  0B8F               	andlw	-113
  1248   0014FA  0940               	iorlw	64
  1249   0014FC  6EBD               	movwf	189,c	;volatile
  1250                           
  1251                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1252   0014FE  0EE0               	movlw	-32
  1253   001500  16BE               	andwf	190,f,c	;volatile
  1254                           
  1255                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1256   001502  50BF               	movf	191,w,c	;volatile
  1257   001504  0BF0               	andlw	-16
  1258   001506  0901               	iorlw	1
  1259   001508  6EBF               	movwf	191,c	;volatile
  1260                           
  1261                           ;dc_motor.c: 34:     T2PR=99;
  1262   00150A  0E63               	movlw	99
  1263   00150C  6EBC               	movwf	188,c	;volatile
  1264   00150E                     
  1265                           ; BSR set to: 14
  1266                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1267   00150E  8EBD               	bsf	189,7,c	;volatile
  1268                           
  1269                           ;dc_motor.c: 39:     CCPR1H=0;
  1270   001510  0E00               	movlw	0
  1271   001512  6EAA               	movwf	170,c	;volatile
  1272                           
  1273                           ;dc_motor.c: 40:     CCPR2H=0;
  1274   001514  0E00               	movlw	0
  1275   001516  6EA6               	movwf	166,c	;volatile
  1276                           
  1277                           ;dc_motor.c: 41:     CCPR3H=0;
  1278   001518  0E00               	movlw	0
  1279   00151A  010F               	movlb	15	; () banked
  1280   00151C  6F25               	movwf	37,b	;volatile
  1281                           
  1282                           ;dc_motor.c: 42:     CCPR4H=0;
  1283   00151E  0E00               	movlw	0
  1284   001520  6F21               	movwf	33,b	;volatile
  1285                           
  1286                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1287   001522  0EFC               	movlw	-4
  1288   001524  16AD               	andwf	173,f,c	;volatile
  1289                           
  1290                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1291   001526  0EF3               	movlw	-13
  1292   001528  16AD               	andwf	173,f,c	;volatile
  1293                           
  1294                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1295   00152A  0ECF               	movlw	-49
  1296   00152C  16AD               	andwf	173,f,c	;volatile
  1297                           
  1298                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1299   00152E  0E3F               	movlw	-193
  1300   001530  16AD               	andwf	173,f,c	;volatile
  1301   001532                     
  1302                           ; BSR set to: 15
  1303                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1304   001532  88AB               	bsf	171,4,c	;volatile
  1305                           
  1306                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1307   001534  50AB               	movf	171,w,c	;volatile
  1308   001536  0BF0               	andlw	-16
  1309   001538  090C               	iorlw	12
  1310   00153A  6EAB               	movwf	171,c	;volatile
  1311   00153C                     
  1312                           ; BSR set to: 15
  1313                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1314   00153C  8EAB               	bsf	171,7,c	;volatile
  1315   00153E                     
  1316                           ; BSR set to: 15
  1317                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1318   00153E  88A7               	bsf	167,4,c	;volatile
  1319                           
  1320                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1321   001540  50A7               	movf	167,w,c	;volatile
  1322   001542  0BF0               	andlw	-16
  1323   001544  090C               	iorlw	12
  1324   001546  6EA7               	movwf	167,c	;volatile
  1325   001548                     
  1326                           ; BSR set to: 15
  1327                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1328   001548  8EA7               	bsf	167,7,c	;volatile
  1329   00154A                     
  1330                           ; BSR set to: 15
  1331                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1332   00154A  8926               	bsf	38,4,b	;volatile
  1333                           
  1334                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1335   00154C  5126               	movf	38,w,b	;volatile
  1336   00154E  0BF0               	andlw	-16
  1337   001550  090C               	iorlw	12
  1338   001552  6F26               	movwf	38,b	;volatile
  1339   001554                     
  1340                           ; BSR set to: 15
  1341                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1342   001554  8F26               	bsf	38,7,b	;volatile
  1343   001556                     
  1344                           ; BSR set to: 15
  1345                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1346   001556  8922               	bsf	34,4,b	;volatile
  1347                           
  1348                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1349   001558  5122               	movf	34,w,b	;volatile
  1350   00155A  0BF0               	andlw	-16
  1351   00155C  090C               	iorlw	12
  1352   00155E  6F22               	movwf	34,b	;volatile
  1353   001560                     
  1354                           ; BSR set to: 15
  1355                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1356   001560  8F22               	bsf	34,7,b	;volatile
  1357   001562                     
  1358                           ; BSR set to: 15
  1359   001562  0012               	return		;funcret
  1360   001564                     __end_of_initDCmotorsPWM:
  1361                           	callstack 0
  1362                           
  1363 ;; *************** function _get_wall_presence *****************
  1364 ;; Defined at:
  1365 ;;		line 242 in file "color.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  clear2          2   17[COMRAM] unsigned int 
  1370 ;;  clear1          2   15[COMRAM] unsigned int 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  2   11[COMRAM] unsigned int 
  1373 ;; Registers used:
  1374 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1381 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1382 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1383 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1384 ;;Total ram usage:        8 bytes
  1385 ;; Hardware stack levels used: 1
  1386 ;; Hardware stack levels required when called: 5
  1387 ;; This function calls:
  1388 ;;		___wmul
  1389 ;;		_color_read_Clear
  1390 ;;		_set_led_color
  1391 ;; This function is called by:
  1392 ;;		_main
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text4
  1397   001438                     __ptext4:
  1398                           	callstack 0
  1399   001438                     _get_wall_presence:
  1400                           	callstack 25
  1401   001438                     
  1402                           ;color.c: 243:     set_led_color(0b000);
  1403   001438  0E00               	movlw	0
  1404   00143A  6E02               	movwf	(set_led_color@color+1)^0,c
  1405   00143C  0E00               	movlw	0
  1406   00143E  6E01               	movwf	set_led_color@color^0,c
  1407   001440  ECCE  F00C         	call	_set_led_color	;wreg free
  1408   001444                     
  1409                           ;color.c: 244:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1410   001444  0E12               	movlw	18
  1411   001446  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1412   001448  0EDC               	movlw	220
  1413   00144A  6E0E               	movwf	??_get_wall_presence^0,c
  1414   00144C  0E60               	movlw	96
  1415   00144E                     u2257:
  1416   00144E  2EE8               	decfsz	wreg,f,c
  1417   001450  D7FE               	bra	u2257
  1418   001452  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1419   001454  D7FC               	bra	u2257
  1420   001456  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1421   001458  D7FA               	bra	u2257
  1422   00145A                     
  1423                           ;color.c: 245:     unsigned int clear1 = color_read_Clear();
  1424   00145A  EC5A  F00C         	call	_color_read_Clear	;wreg free
  1425   00145E  C005  F010         	movff	?_color_read_Clear,get_wall_presence@clear1
  1426   001462  C006  F011         	movff	?_color_read_Clear+1,get_wall_presence@clear1+1
  1427   001466                     
  1428                           ;color.c: 246:     set_led_color(0b111);
  1429   001466  0E00               	movlw	0
  1430   001468  6E02               	movwf	(set_led_color@color+1)^0,c
  1431   00146A  0E07               	movlw	7
  1432   00146C  6E01               	movwf	set_led_color@color^0,c
  1433   00146E  ECCE  F00C         	call	_set_led_color	;wreg free
  1434   001472                     
  1435                           ;color.c: 247:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1436   001472  0E12               	movlw	18
  1437   001474  6E0F               	movwf	(??_get_wall_presence+1)^0,c
  1438   001476  0EDC               	movlw	220
  1439   001478  6E0E               	movwf	??_get_wall_presence^0,c
  1440   00147A  0E60               	movlw	96
  1441   00147C                     u2267:
  1442   00147C  2EE8               	decfsz	wreg,f,c
  1443   00147E  D7FE               	bra	u2267
  1444   001480  2E0E               	decfsz	??_get_wall_presence^0,f,c
  1445   001482  D7FC               	bra	u2267
  1446   001484  2E0F               	decfsz	(??_get_wall_presence+1)^0,f,c
  1447   001486  D7FA               	bra	u2267
  1448                           
  1449                           ;color.c: 248:     unsigned int clear2 = color_read_Clear();
  1450   001488  EC5A  F00C         	call	_color_read_Clear	;wreg free
  1451   00148C  C005  F012         	movff	?_color_read_Clear,get_wall_presence@clear2
  1452   001490  C006  F013         	movff	?_color_read_Clear+1,get_wall_presence@clear2+1
  1453   001494                     
  1454                           ;color.c: 249:     set_led_color(0b000);
  1455   001494  0E00               	movlw	0
  1456   001496  6E02               	movwf	(set_led_color@color+1)^0,c
  1457   001498  0E00               	movlw	0
  1458   00149A  6E01               	movwf	set_led_color@color^0,c
  1459   00149C  ECCE  F00C         	call	_set_led_color	;wreg free
  1460   0014A0                     
  1461                           ;color.c: 250:     return clear2 >= clear1*wall_coef;
  1462   0014A0  C010  F001         	movff	get_wall_presence@clear1,___wmul@multiplier
  1463   0014A4  C011  F002         	movff	get_wall_presence@clear1+1,___wmul@multiplier+1
  1464   0014A8  C059  F003         	movff	_wall_coef,___wmul@multiplicand
  1465   0014AC  C05A  F004         	movff	_wall_coef+1,___wmul@multiplicand+1
  1466   0014B0  EC53  F00D         	call	___wmul	;wreg free
  1467   0014B4  5001               	movf	?___wmul^0,w,c
  1468   0014B6  5C12               	subwf	get_wall_presence@clear2^0,w,c
  1469   0014B8  5002               	movf	(?___wmul+1)^0,w,c
  1470   0014BA  5813               	subwfb	(get_wall_presence@clear2+1)^0,w,c
  1471   0014BC  B0D8               	btfsc	status,0,c
  1472   0014BE  EF63  F00A         	goto	u1651
  1473   0014C2  EF66  F00A         	goto	u1650
  1474   0014C6                     u1651:
  1475   0014C6  0E01               	movlw	1
  1476   0014C8  EF67  F00A         	goto	u1660
  1477   0014CC                     u1650:
  1478   0014CC  0E00               	movlw	0
  1479   0014CE                     u1660:
  1480   0014CE  6E0C               	movwf	?_get_wall_presence^0,c
  1481   0014D0  6A0D               	clrf	(?_get_wall_presence+1)^0,c
  1482   0014D2  0012               	return		;funcret
  1483   0014D4                     __end_of_get_wall_presence:
  1484                           	callstack 0
  1485                           
  1486 ;; *************** function _get_color_code *****************
  1487 ;; Defined at:
  1488 ;;		line 176 in file "color.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  value           2   28[BANK0 ] unsigned int 
  1493 ;;  i               2   30[BANK0 ] unsigned int 
  1494 ;;  NormalizedRG   12   32[BANK0 ] struct RGB_val
  1495 ;;  min_index       2   26[BANK0 ] unsigned int 
  1496 ;;  min_value       2   24[BANK0 ] unsigned int 
  1497 ;; Return value:  Size  Location     Type
  1498 ;;                  2   52[COMRAM] unsigned int 
  1499 ;; Registers used:
  1500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1501 ;; Tracked objects:
  1502 ;;		On entry : 0/0
  1503 ;;		On exit  : 0/0
  1504 ;;		Unchanged: 0/0
  1505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1507 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1508 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1509 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1510 ;;Total ram usage:       48 bytes
  1511 ;; Hardware stack levels used: 1
  1512 ;; Hardware stack levels required when called: 5
  1513 ;; This function calls:
  1514 ;;		___lldiv
  1515 ;;		___lmul
  1516 ;;		___wmul
  1517 ;;		_color_read_Blue
  1518 ;;		_color_read_Green
  1519 ;;		_color_read_Red
  1520 ;;		_get_color_distance
  1521 ;;		_set_led_color
  1522 ;; This function is called by:
  1523 ;;		_main
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text5
  1528   000486                     __ptext5:
  1529                           	callstack 0
  1530   000486                     _get_color_code:
  1531                           	callstack 25
  1532   000486                     
  1533                           ;color.c: 179:     set_led_color(0b100);
  1534   000486  0E00               	movlw	0
  1535   000488  6E02               	movwf	(set_led_color@color+1)^0,c
  1536   00048A  0E04               	movlw	4
  1537   00048C  6E01               	movwf	set_led_color@color^0,c
  1538   00048E  ECCE  F00C         	call	_set_led_color	;wreg free
  1539   000492                     
  1540                           ;color.c: 180:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1541   000492  0E12               	movlw	18
  1542   000494  6E38               	movwf	(??_get_color_code+1)^0,c
  1543   000496  0EDC               	movlw	220
  1544   000498  6E37               	movwf	??_get_color_code^0,c
  1545   00049A  0E60               	movlw	96
  1546   00049C                     u2277:
  1547   00049C  2EE8               	decfsz	wreg,f,c
  1548   00049E  D7FE               	bra	u2277
  1549   0004A0  2E37               	decfsz	??_get_color_code^0,f,c
  1550   0004A2  D7FC               	bra	u2277
  1551   0004A4  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1552   0004A6  D7FA               	bra	u2277
  1553   0004A8                     
  1554                           ;color.c: 181:     RGB.R = color_read_Red();
  1555   0004A8  EC0A  F00C         	call	_color_read_Red	;wreg free
  1556   0004AC  C005  F0EE         	movff	?_color_read_Red,_RGB
  1557   0004B0  C006  F0EF         	movff	?_color_read_Red+1,_RGB+1
  1558   0004B4  0100               	movlb	0	; () banked
  1559   0004B6  6BF0               	clrf	(_RGB+2)& (0+255),b
  1560   0004B8  6BF1               	clrf	(_RGB+3)& (0+255),b
  1561   0004BA                     
  1562                           ; BSR set to: 0
  1563                           ;color.c: 182:     set_led_color(0b010);
  1564   0004BA  0E00               	movlw	0
  1565   0004BC  6E02               	movwf	(set_led_color@color+1)^0,c
  1566   0004BE  0E02               	movlw	2
  1567   0004C0  6E01               	movwf	set_led_color@color^0,c
  1568   0004C2  ECCE  F00C         	call	_set_led_color	;wreg free
  1569   0004C6                     
  1570                           ;color.c: 183:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1571   0004C6  0E12               	movlw	18
  1572   0004C8  6E38               	movwf	(??_get_color_code+1)^0,c
  1573   0004CA  0EDC               	movlw	220
  1574   0004CC  6E37               	movwf	??_get_color_code^0,c
  1575   0004CE  0E60               	movlw	96
  1576   0004D0                     u2287:
  1577   0004D0  2EE8               	decfsz	wreg,f,c
  1578   0004D2  D7FE               	bra	u2287
  1579   0004D4  2E37               	decfsz	??_get_color_code^0,f,c
  1580   0004D6  D7FC               	bra	u2287
  1581   0004D8  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1582   0004DA  D7FA               	bra	u2287
  1583                           
  1584                           ;color.c: 184:     RGB.G = color_read_Green();
  1585   0004DC  EC32  F00C         	call	_color_read_Green	;wreg free
  1586   0004E0  C005  F0F2         	movff	?_color_read_Green,_RGB+4
  1587   0004E4  C006  F0F3         	movff	?_color_read_Green+1,_RGB+5
  1588   0004E8  0100               	movlb	0	; () banked
  1589   0004EA  6BF4               	clrf	(_RGB+6)& (0+255),b
  1590   0004EC  6BF5               	clrf	(_RGB+7)& (0+255),b
  1591   0004EE                     
  1592                           ; BSR set to: 0
  1593                           ;color.c: 185:     set_led_color(0b001);
  1594   0004EE  0E00               	movlw	0
  1595   0004F0  6E02               	movwf	(set_led_color@color+1)^0,c
  1596   0004F2  0E01               	movlw	1
  1597   0004F4  6E01               	movwf	set_led_color@color^0,c
  1598   0004F6  ECCE  F00C         	call	_set_led_color	;wreg free
  1599   0004FA                     
  1600                           ;color.c: 186:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1601   0004FA  0E12               	movlw	18
  1602   0004FC  6E38               	movwf	(??_get_color_code+1)^0,c
  1603   0004FE  0EDC               	movlw	220
  1604   000500  6E37               	movwf	??_get_color_code^0,c
  1605   000502  0E60               	movlw	96
  1606   000504                     u2297:
  1607   000504  2EE8               	decfsz	wreg,f,c
  1608   000506  D7FE               	bra	u2297
  1609   000508  2E37               	decfsz	??_get_color_code^0,f,c
  1610   00050A  D7FC               	bra	u2297
  1611   00050C  2E38               	decfsz	(??_get_color_code+1)^0,f,c
  1612   00050E  D7FA               	bra	u2297
  1613   000510                     
  1614                           ;color.c: 187:     RGB.B = color_read_Blue();
  1615   000510  EC82  F00C         	call	_color_read_Blue	;wreg free
  1616   000514  C005  F0F6         	movff	?_color_read_Blue,_RGB+8
  1617   000518  C006  F0F7         	movff	?_color_read_Blue+1,_RGB+9
  1618   00051C  0100               	movlb	0	; () banked
  1619   00051E  6BF8               	clrf	(_RGB+10)& (0+255),b
  1620   000520  6BF9               	clrf	(_RGB+11)& (0+255),b
  1621   000522                     
  1622                           ; BSR set to: 0
  1623                           ;color.c: 188:     set_led_color(0b000);
  1624   000522  0E00               	movlw	0
  1625   000524  6E02               	movwf	(set_led_color@color+1)^0,c
  1626   000526  0E00               	movlw	0
  1627   000528  6E01               	movwf	set_led_color@color^0,c
  1628   00052A  ECCE  F00C         	call	_set_led_color	;wreg free
  1629   00052E                     
  1630                           ;color.c: 190:     struct RGB_val NormalizedRGB;;color.c: 191:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1631   00052E  504D               	movf	_Black_setup^0,w,c
  1632   000530  0100               	movlb	0	; () banked
  1633   000532  5DEE               	subwf	_RGB& (0+255),w,b
  1634   000534  504E               	movf	(_Black_setup+1)^0,w,c
  1635   000536  59EF               	subwfb	(_RGB+1)& (0+255),w,b
  1636   000538  504F               	movf	(_Black_setup+2)^0,w,c
  1637   00053A  59F0               	subwfb	(_RGB+2)& (0+255),w,b
  1638   00053C  5050               	movf	(_Black_setup+3)^0,w,c
  1639   00053E  59F1               	subwfb	(_RGB+3)& (0+255),w,b
  1640   000540  B0D8               	btfsc	status,0,c
  1641   000542  EFA5  F002         	goto	u1551
  1642   000546  EFA7  F002         	goto	u1550
  1643   00054A                     u1551:
  1644   00054A  EFB1  F002         	goto	l2576
  1645   00054E                     u1550:
  1646   00054E                     
  1647                           ; BSR set to: 0
  1648   00054E  0E00               	movlw	0
  1649   000550  6FCE               	movwf	_get_color_code$458& (0+255),b
  1650   000552  0E00               	movlw	0
  1651   000554  6FCF               	movwf	(_get_color_code$458+1)& (0+255),b
  1652   000556  0E00               	movlw	0
  1653   000558  6FD0               	movwf	(_get_color_code$458+2)& (0+255),b
  1654   00055A  0E00               	movlw	0
  1655   00055C  6FD1               	movwf	(_get_color_code$458+3)& (0+255),b
  1656   00055E  EFE6  F002         	goto	l2578
  1657   000562                     l2576:
  1658                           
  1659                           ; BSR set to: 0
  1660   000562  504D               	movf	_Black_setup^0,w,c
  1661   000564  5DEE               	subwf	_RGB& (0+255),w,b
  1662   000566  6E01               	movwf	___lmul@multiplier^0,c
  1663   000568  504E               	movf	(_Black_setup+1)^0,w,c
  1664   00056A  59EF               	subwfb	(_RGB+1)& (0+255),w,b
  1665   00056C  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1666   00056E  504F               	movf	(_Black_setup+2)^0,w,c
  1667   000570  59F0               	subwfb	(_RGB+2)& (0+255),w,b
  1668   000572  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1669   000574  5050               	movf	(_Black_setup+3)^0,w,c
  1670   000576  59F1               	subwfb	(_RGB+3)& (0+255),w,b
  1671   000578  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1672   00057A  0E64               	movlw	100
  1673   00057C  6E05               	movwf	___lmul@multiplicand^0,c
  1674   00057E  0E00               	movlw	0
  1675   000580  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1676   000582  0E00               	movlw	0
  1677   000584  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1678   000586  0E00               	movlw	0
  1679   000588  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1680   00058A  EC77  F00B         	call	___lmul	;wreg free
  1681   00058E  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1682   000592  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1683   000596  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1684   00059A  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1685   00059E  504D               	movf	_Black_setup^0,w,c
  1686   0005A0  0100               	movlb	0	; () banked
  1687   0005A2  5D60               	subwf	_White_setup& (0+255),w,b
  1688   0005A4  6E11               	movwf	___lldiv@divisor^0,c
  1689   0005A6  504E               	movf	(_Black_setup+1)^0,w,c
  1690   0005A8  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  1691   0005AA  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1692   0005AC  504F               	movf	(_Black_setup+2)^0,w,c
  1693   0005AE  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  1694   0005B0  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1695   0005B2  5050               	movf	(_Black_setup+3)^0,w,c
  1696   0005B4  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  1697   0005B6  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1698   0005B8  ECCA  F009         	call	___lldiv	;wreg free
  1699   0005BC  C00D  F0CE         	movff	?___lldiv,_get_color_code$458
  1700   0005C0  C00E  F0CF         	movff	?___lldiv+1,_get_color_code$458+1
  1701   0005C4  C00F  F0D0         	movff	?___lldiv+2,_get_color_code$458+2
  1702   0005C8  C010  F0D1         	movff	?___lldiv+3,_get_color_code$458+3
  1703   0005CC                     l2578:
  1704   0005CC  C0CE  F0E2         	movff	_get_color_code$458,get_color_code@NormalizedRGB
  1705   0005D0  C0CF  F0E3         	movff	_get_color_code$458+1,get_color_code@NormalizedRGB+1
  1706   0005D4  C0D0  F0E4         	movff	_get_color_code$458+2,get_color_code@NormalizedRGB+2
  1707   0005D8  C0D1  F0E5         	movff	_get_color_code$458+3,get_color_code@NormalizedRGB+3
  1708   0005DC                     
  1709                           ;color.c: 192:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  1710   0005DC  5051               	movf	(_Black_setup+4)^0,w,c
  1711   0005DE  0100               	movlb	0	; () banked
  1712   0005E0  5DF2               	subwf	(_RGB+4)& (0+255),w,b
  1713   0005E2  5052               	movf	(_Black_setup+5)^0,w,c
  1714   0005E4  59F3               	subwfb	(_RGB+5)& (0+255),w,b
  1715   0005E6  5053               	movf	(_Black_setup+6)^0,w,c
  1716   0005E8  59F4               	subwfb	(_RGB+6)& (0+255),w,b
  1717   0005EA  5054               	movf	(_Black_setup+7)^0,w,c
  1718   0005EC  59F5               	subwfb	(_RGB+7)& (0+255),w,b
  1719   0005EE  B0D8               	btfsc	status,0,c
  1720   0005F0  EFFC  F002         	goto	u1561
  1721   0005F4  EFFE  F002         	goto	u1560
  1722   0005F8                     u1561:
  1723   0005F8  EF08  F003         	goto	l2584
  1724   0005FC                     u1560:
  1725   0005FC                     
  1726                           ; BSR set to: 0
  1727   0005FC  0E00               	movlw	0
  1728   0005FE  6FD2               	movwf	_get_color_code$459& (0+255),b
  1729   000600  0E00               	movlw	0
  1730   000602  6FD3               	movwf	(_get_color_code$459+1)& (0+255),b
  1731   000604  0E00               	movlw	0
  1732   000606  6FD4               	movwf	(_get_color_code$459+2)& (0+255),b
  1733   000608  0E00               	movlw	0
  1734   00060A  6FD5               	movwf	(_get_color_code$459+3)& (0+255),b
  1735   00060C  EF3D  F003         	goto	l2586
  1736   000610                     l2584:
  1737                           
  1738                           ; BSR set to: 0
  1739   000610  5051               	movf	(_Black_setup+4)^0,w,c
  1740   000612  5DF2               	subwf	(_RGB+4)& (0+255),w,b
  1741   000614  6E01               	movwf	___lmul@multiplier^0,c
  1742   000616  5052               	movf	(_Black_setup+5)^0,w,c
  1743   000618  59F3               	subwfb	(_RGB+5)& (0+255),w,b
  1744   00061A  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1745   00061C  5053               	movf	(_Black_setup+6)^0,w,c
  1746   00061E  59F4               	subwfb	(_RGB+6)& (0+255),w,b
  1747   000620  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1748   000622  5054               	movf	(_Black_setup+7)^0,w,c
  1749   000624  59F5               	subwfb	(_RGB+7)& (0+255),w,b
  1750   000626  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1751   000628  0E64               	movlw	100
  1752   00062A  6E05               	movwf	___lmul@multiplicand^0,c
  1753   00062C  0E00               	movlw	0
  1754   00062E  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1755   000630  0E00               	movlw	0
  1756   000632  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1757   000634  0E00               	movlw	0
  1758   000636  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1759   000638  EC77  F00B         	call	___lmul	;wreg free
  1760   00063C  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1761   000640  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1762   000644  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1763   000648  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1764   00064C  5051               	movf	(_Black_setup+4)^0,w,c
  1765   00064E  0100               	movlb	0	; () banked
  1766   000650  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  1767   000652  6E11               	movwf	___lldiv@divisor^0,c
  1768   000654  5052               	movf	(_Black_setup+5)^0,w,c
  1769   000656  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  1770   000658  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1771   00065A  5053               	movf	(_Black_setup+6)^0,w,c
  1772   00065C  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  1773   00065E  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1774   000660  5054               	movf	(_Black_setup+7)^0,w,c
  1775   000662  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  1776   000664  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1777   000666  ECCA  F009         	call	___lldiv	;wreg free
  1778   00066A  C00D  F0D2         	movff	?___lldiv,_get_color_code$459
  1779   00066E  C00E  F0D3         	movff	?___lldiv+1,_get_color_code$459+1
  1780   000672  C00F  F0D4         	movff	?___lldiv+2,_get_color_code$459+2
  1781   000676  C010  F0D5         	movff	?___lldiv+3,_get_color_code$459+3
  1782   00067A                     l2586:
  1783   00067A  C0D2  F0E6         	movff	_get_color_code$459,get_color_code@NormalizedRGB+4
  1784   00067E  C0D3  F0E7         	movff	_get_color_code$459+1,get_color_code@NormalizedRGB+5
  1785   000682  C0D4  F0E8         	movff	_get_color_code$459+2,get_color_code@NormalizedRGB+6
  1786   000686  C0D5  F0E9         	movff	_get_color_code$459+3,get_color_code@NormalizedRGB+7
  1787   00068A                     
  1788                           ;color.c: 193:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  1789   00068A  5055               	movf	(_Black_setup+8)^0,w,c
  1790   00068C  0100               	movlb	0	; () banked
  1791   00068E  5DF6               	subwf	(_RGB+8)& (0+255),w,b
  1792   000690  5056               	movf	(_Black_setup+9)^0,w,c
  1793   000692  59F7               	subwfb	(_RGB+9)& (0+255),w,b
  1794   000694  5057               	movf	(_Black_setup+10)^0,w,c
  1795   000696  59F8               	subwfb	(_RGB+10)& (0+255),w,b
  1796   000698  5058               	movf	(_Black_setup+11)^0,w,c
  1797   00069A  59F9               	subwfb	(_RGB+11)& (0+255),w,b
  1798   00069C  B0D8               	btfsc	status,0,c
  1799   00069E  EF53  F003         	goto	u1571
  1800   0006A2  EF55  F003         	goto	u1570
  1801   0006A6                     u1571:
  1802   0006A6  EF5F  F003         	goto	l2592
  1803   0006AA                     u1570:
  1804   0006AA                     
  1805                           ; BSR set to: 0
  1806   0006AA  0E00               	movlw	0
  1807   0006AC  6FD6               	movwf	_get_color_code$460& (0+255),b
  1808   0006AE  0E00               	movlw	0
  1809   0006B0  6FD7               	movwf	(_get_color_code$460+1)& (0+255),b
  1810   0006B2  0E00               	movlw	0
  1811   0006B4  6FD8               	movwf	(_get_color_code$460+2)& (0+255),b
  1812   0006B6  0E00               	movlw	0
  1813   0006B8  6FD9               	movwf	(_get_color_code$460+3)& (0+255),b
  1814   0006BA  EF94  F003         	goto	l2594
  1815   0006BE                     l2592:
  1816                           
  1817                           ; BSR set to: 0
  1818   0006BE  5055               	movf	(_Black_setup+8)^0,w,c
  1819   0006C0  5DF6               	subwf	(_RGB+8)& (0+255),w,b
  1820   0006C2  6E01               	movwf	___lmul@multiplier^0,c
  1821   0006C4  5056               	movf	(_Black_setup+9)^0,w,c
  1822   0006C6  59F7               	subwfb	(_RGB+9)& (0+255),w,b
  1823   0006C8  6E02               	movwf	(___lmul@multiplier+1)^0,c
  1824   0006CA  5057               	movf	(_Black_setup+10)^0,w,c
  1825   0006CC  59F8               	subwfb	(_RGB+10)& (0+255),w,b
  1826   0006CE  6E03               	movwf	(___lmul@multiplier+2)^0,c
  1827   0006D0  5058               	movf	(_Black_setup+11)^0,w,c
  1828   0006D2  59F9               	subwfb	(_RGB+11)& (0+255),w,b
  1829   0006D4  6E04               	movwf	(___lmul@multiplier+3)^0,c
  1830   0006D6  0E64               	movlw	100
  1831   0006D8  6E05               	movwf	___lmul@multiplicand^0,c
  1832   0006DA  0E00               	movlw	0
  1833   0006DC  6E06               	movwf	(___lmul@multiplicand+1)^0,c
  1834   0006DE  0E00               	movlw	0
  1835   0006E0  6E07               	movwf	(___lmul@multiplicand+2)^0,c
  1836   0006E2  0E00               	movlw	0
  1837   0006E4  6E08               	movwf	(___lmul@multiplicand+3)^0,c
  1838   0006E6  EC77  F00B         	call	___lmul	;wreg free
  1839   0006EA  C001  F00D         	movff	?___lmul,___lldiv@dividend
  1840   0006EE  C002  F00E         	movff	?___lmul+1,___lldiv@dividend+1
  1841   0006F2  C003  F00F         	movff	?___lmul+2,___lldiv@dividend+2
  1842   0006F6  C004  F010         	movff	?___lmul+3,___lldiv@dividend+3
  1843   0006FA  5055               	movf	(_Black_setup+8)^0,w,c
  1844   0006FC  0100               	movlb	0	; () banked
  1845   0006FE  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  1846   000700  6E11               	movwf	___lldiv@divisor^0,c
  1847   000702  5056               	movf	(_Black_setup+9)^0,w,c
  1848   000704  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  1849   000706  6E12               	movwf	(___lldiv@divisor+1)^0,c
  1850   000708  5057               	movf	(_Black_setup+10)^0,w,c
  1851   00070A  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  1852   00070C  6E13               	movwf	(___lldiv@divisor+2)^0,c
  1853   00070E  5058               	movf	(_Black_setup+11)^0,w,c
  1854   000710  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  1855   000712  6E14               	movwf	(___lldiv@divisor+3)^0,c
  1856   000714  ECCA  F009         	call	___lldiv	;wreg free
  1857   000718  C00D  F0D6         	movff	?___lldiv,_get_color_code$460
  1858   00071C  C00E  F0D7         	movff	?___lldiv+1,_get_color_code$460+1
  1859   000720  C00F  F0D8         	movff	?___lldiv+2,_get_color_code$460+2
  1860   000724  C010  F0D9         	movff	?___lldiv+3,_get_color_code$460+3
  1861   000728                     l2594:
  1862   000728  C0D6  F0EA         	movff	_get_color_code$460,get_color_code@NormalizedRGB+8
  1863   00072C  C0D7  F0EB         	movff	_get_color_code$460+1,get_color_code@NormalizedRGB+9
  1864   000730  C0D8  F0EC         	movff	_get_color_code$460+2,get_color_code@NormalizedRGB+10
  1865   000734  C0D9  F0ED         	movff	_get_color_code$460+3,get_color_code@NormalizedRGB+11
  1866   000738                     
  1867                           ;color.c: 195:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  1868   000738  EE20  F0E2         	lfsr	2,get_color_code@NormalizedRGB
  1869   00073C  EE00  F007         	lfsr	0,get_color_distance@color1
  1870   000740  0E0B               	movlw	11
  1871   000742                     u1581:
  1872   000742  CFDB FFEB          	movff	plusw2,plusw0
  1873   000746  06E8               	decf	wreg,f,c
  1874   000748  E2FC               	bc	u1581
  1875   00074A  EE21  F000         	lfsr	2,_Color_rules
  1876   00074E  EE00  F013         	lfsr	0,get_color_distance@color2
  1877   000752  0E0B               	movlw	11
  1878   000754                     u1591:
  1879   000754  CFDB FFEB          	movff	plusw2,plusw0
  1880   000758  06E8               	decf	wreg,f,c
  1881   00075A  E2FC               	bc	u1591
  1882   00075C  EC12  F004         	call	_get_color_distance	;wreg free
  1883   000760  C007  F0DA         	movff	?_get_color_distance,get_color_code@min_value
  1884   000764  C008  F0DB         	movff	?_get_color_distance+1,get_color_code@min_value+1
  1885   000768                     
  1886                           ;color.c: 196:     unsigned int min_index = 0;
  1887   000768  0E00               	movlw	0
  1888   00076A  0100               	movlb	0	; () banked
  1889   00076C  6FDD               	movwf	(get_color_code@min_index+1)& (0+255),b
  1890   00076E  0E00               	movlw	0
  1891   000770  6FDC               	movwf	get_color_code@min_index& (0+255),b
  1892   000772                     
  1893                           ; BSR set to: 0
  1894                           ;color.c: 197:     for(unsigned int i = 1;i < 9; i++){
  1895   000772  0E00               	movlw	0
  1896   000774  6FE1               	movwf	(get_color_code@i+1)& (0+255),b
  1897   000776  0E01               	movlw	1
  1898   000778  6FE0               	movwf	get_color_code@i& (0+255),b
  1899   00077A                     l2606:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1903   00077A  C0E0  F001         	movff	get_color_code@i,___wmul@multiplier
  1904   00077E  C0E1  F002         	movff	get_color_code@i+1,___wmul@multiplier+1
  1905   000782  0E00               	movlw	0
  1906   000784  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1907   000786  0E0C               	movlw	12
  1908   000788  6E03               	movwf	___wmul@multiplicand^0,c
  1909   00078A  EC53  F00D         	call	___wmul	;wreg free
  1910   00078E  0E00               	movlw	low _Color_rules
  1911   000790  2401               	addwf	?___wmul^0,w,c
  1912   000792  6ED9               	movwf	fsr2l,c
  1913   000794  0E01               	movlw	high _Color_rules
  1914   000796  2002               	addwfc	(?___wmul+1)^0,w,c
  1915   000798  6EDA               	movwf	fsr2h,c
  1916   00079A  EE10  F0C2         	lfsr	1,_get_color_code$2441
  1917   00079E  0E0B               	movlw	11
  1918   0007A0                     u1601:
  1919   0007A0  CFDB FFE3          	movff	plusw2,plusw1
  1920   0007A4  06E8               	decf	wreg,f,c
  1921   0007A6  E2FC               	bc	u1601
  1922   0007A8                     
  1923                           ;color.c: 198:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  1924   0007A8  EE20  F0E2         	lfsr	2,get_color_code@NormalizedRGB
  1925   0007AC  EE00  F007         	lfsr	0,get_color_distance@color1
  1926   0007B0  0E0B               	movlw	11
  1927   0007B2                     u1611:
  1928   0007B2  CFDB FFEB          	movff	plusw2,plusw0
  1929   0007B6  06E8               	decf	wreg,f,c
  1930   0007B8  E2FC               	bc	u1611
  1931   0007BA  EE20  F0C2         	lfsr	2,_get_color_code$2441
  1932   0007BE  EE00  F013         	lfsr	0,get_color_distance@color2
  1933   0007C2  0E0B               	movlw	11
  1934   0007C4                     u1621:
  1935   0007C4  CFDB FFEB          	movff	plusw2,plusw0
  1936   0007C8  06E8               	decf	wreg,f,c
  1937   0007CA  E2FC               	bc	u1621
  1938   0007CC  EC12  F004         	call	_get_color_distance	;wreg free
  1939   0007D0  C007  F0DE         	movff	?_get_color_distance,get_color_code@value
  1940   0007D4  C008  F0DF         	movff	?_get_color_distance+1,get_color_code@value+1
  1941   0007D8                     
  1942                           ;color.c: 199:         if(value < min_value){
  1943   0007D8  0100               	movlb	0	; () banked
  1944   0007DA  51DA               	movf	get_color_code@min_value& (0+255),w,b
  1945   0007DC  5DDE               	subwf	get_color_code@value& (0+255),w,b
  1946   0007DE  51DB               	movf	(get_color_code@min_value+1)& (0+255),w,b
  1947   0007E0  59DF               	subwfb	(get_color_code@value+1)& (0+255),w,b
  1948   0007E2  B0D8               	btfsc	status,0,c
  1949   0007E4  EFF6  F003         	goto	u1631
  1950   0007E8  EFF8  F003         	goto	u1630
  1951   0007EC                     u1631:
  1952   0007EC  EF00  F004         	goto	l2614
  1953   0007F0                     u1630:
  1954   0007F0                     
  1955                           ; BSR set to: 0
  1956                           ;color.c: 200:             min_index = i;
  1957   0007F0  C0E0  F0DC         	movff	get_color_code@i,get_color_code@min_index
  1958   0007F4  C0E1  F0DD         	movff	get_color_code@i+1,get_color_code@min_index+1
  1959                           
  1960                           ;color.c: 201:             min_value = value;
  1961   0007F8  C0DE  F0DA         	movff	get_color_code@value,get_color_code@min_value
  1962   0007FC  C0DF  F0DB         	movff	get_color_code@value+1,get_color_code@min_value+1
  1963   000800                     l2614:
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;color.c: 203:     }
  1967   000800  4BE0               	infsnz	get_color_code@i& (0+255),f,b
  1968   000802  2BE1               	incf	(get_color_code@i+1)& (0+255),f,b
  1969   000804                     
  1970                           ; BSR set to: 0
  1971   000804  51E1               	movf	(get_color_code@i+1)& (0+255),w,b
  1972   000806  E109               	bnz	u1640
  1973   000808  0E09               	movlw	9
  1974   00080A  5DE0               	subwf	get_color_code@i& (0+255),w,b
  1975   00080C  A0D8               	btfss	status,0,c
  1976   00080E  EF0B  F004         	goto	u1641
  1977   000812  EF0D  F004         	goto	u1640
  1978   000816                     u1641:
  1979   000816  EFBD  F003         	goto	l2606
  1980   00081A                     u1640:
  1981   00081A                     
  1982                           ; BSR set to: 0
  1983                           ;color.c: 204:     return min_index;
  1984   00081A  C0DC  F035         	movff	get_color_code@min_index,?_get_color_code
  1985   00081E  C0DD  F036         	movff	get_color_code@min_index+1,?_get_color_code+1
  1986   000822                     
  1987                           ; BSR set to: 0
  1988   000822  0012               	return		;funcret
  1989   000824                     __end_of_get_color_code:
  1990                           	callstack 0
  1991                           
  1992 ;; *************** function _get_color_distance *****************
  1993 ;; Defined at:
  1994 ;;		line 146 in file "color.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  color1         12    6[COMRAM] struct RGB_val
  1997 ;;  color2         12   18[COMRAM] struct RGB_val
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  B_offset        2   50[COMRAM] unsigned int 
  2000 ;;  G_offset        2   48[COMRAM] unsigned int 
  2001 ;;  R_offset        2   46[COMRAM] unsigned int 
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  2    6[COMRAM] unsigned int 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2011 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2012 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2013 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2014 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2015 ;;Total ram usage:       46 bytes
  2016 ;; Hardware stack levels used: 1
  2017 ;; Hardware stack levels required when called: 3
  2018 ;; This function calls:
  2019 ;;		___wmul
  2020 ;; This function is called by:
  2021 ;;		_get_color_code
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text6
  2026   000824                     __ptext6:
  2027                           	callstack 0
  2028   000824                     _get_color_distance:
  2029                           	callstack 26
  2030   000824                     
  2031                           ;color.c: 147:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2032   000824  5013               	movf	get_color_distance@color2^0,w,c
  2033   000826  5C07               	subwf	get_color_distance@color1^0,w,c
  2034   000828  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2035   00082A  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2036   00082C  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2037   00082E  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2038   000830  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2039   000832  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2040   000834  B0D8               	btfsc	status,0,c
  2041   000836  EF1F  F004         	goto	u1251
  2042   00083A  EF21  F004         	goto	u1250
  2043   00083E                     u1251:
  2044   00083E  EF2F  F004         	goto	l2276
  2045   000842                     u1250:
  2046   000842  5007               	movf	get_color_distance@color1^0,w,c
  2047   000844  5C13               	subwf	get_color_distance@color2^0,w,c
  2048   000846  6E23               	movwf	_get_color_distance$417^0,c
  2049   000848  5008               	movf	(get_color_distance@color1+1)^0,w,c
  2050   00084A  5814               	subwfb	(get_color_distance@color2+1)^0,w,c
  2051   00084C  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2052   00084E  5009               	movf	(get_color_distance@color1+2)^0,w,c
  2053   000850  5815               	subwfb	(get_color_distance@color2+2)^0,w,c
  2054   000852  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2055   000854  500A               	movf	(get_color_distance@color1+3)^0,w,c
  2056   000856  5816               	subwfb	(get_color_distance@color2+3)^0,w,c
  2057   000858  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2058   00085A  EF3B  F004         	goto	l2278
  2059   00085E                     l2276:
  2060   00085E  5013               	movf	get_color_distance@color2^0,w,c
  2061   000860  5C07               	subwf	get_color_distance@color1^0,w,c
  2062   000862  6E23               	movwf	_get_color_distance$417^0,c
  2063   000864  5014               	movf	(get_color_distance@color2+1)^0,w,c
  2064   000866  5808               	subwfb	(get_color_distance@color1+1)^0,w,c
  2065   000868  6E24               	movwf	(_get_color_distance$417+1)^0,c
  2066   00086A  5015               	movf	(get_color_distance@color2+2)^0,w,c
  2067   00086C  5809               	subwfb	(get_color_distance@color1+2)^0,w,c
  2068   00086E  6E25               	movwf	(_get_color_distance$417+2)^0,c
  2069   000870  5016               	movf	(get_color_distance@color2+3)^0,w,c
  2070   000872  580A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2071   000874  6E26               	movwf	(_get_color_distance$417+3)^0,c
  2072   000876                     l2278:
  2073   000876  C023  F02F         	movff	_get_color_distance$417,get_color_distance@R_offset
  2074   00087A  C024  F030         	movff	_get_color_distance$417+1,get_color_distance@R_offset+1
  2075                           
  2076                           ;color.c: 148:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2077   00087E  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2078   000880  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2079   000882  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2080   000884  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2081   000886  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2082   000888  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2083   00088A  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2084   00088C  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2085   00088E  B0D8               	btfsc	status,0,c
  2086   000890  EF4C  F004         	goto	u1261
  2087   000894  EF4E  F004         	goto	u1260
  2088   000898                     u1261:
  2089   000898  EF5C  F004         	goto	l2282
  2090   00089C                     u1260:
  2091   00089C  500B               	movf	(get_color_distance@color1+4)^0,w,c
  2092   00089E  5C17               	subwf	(get_color_distance@color2+4)^0,w,c
  2093   0008A0  6E27               	movwf	_get_color_distance$419^0,c
  2094   0008A2  500C               	movf	(get_color_distance@color1+5)^0,w,c
  2095   0008A4  5818               	subwfb	(get_color_distance@color2+5)^0,w,c
  2096   0008A6  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2097   0008A8  500D               	movf	(get_color_distance@color1+6)^0,w,c
  2098   0008AA  5819               	subwfb	(get_color_distance@color2+6)^0,w,c
  2099   0008AC  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2100   0008AE  500E               	movf	(get_color_distance@color1+7)^0,w,c
  2101   0008B0  581A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2102   0008B2  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2103   0008B4  EF68  F004         	goto	l2284
  2104   0008B8                     l2282:
  2105   0008B8  5017               	movf	(get_color_distance@color2+4)^0,w,c
  2106   0008BA  5C0B               	subwf	(get_color_distance@color1+4)^0,w,c
  2107   0008BC  6E27               	movwf	_get_color_distance$419^0,c
  2108   0008BE  5018               	movf	(get_color_distance@color2+5)^0,w,c
  2109   0008C0  580C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2110   0008C2  6E28               	movwf	(_get_color_distance$419+1)^0,c
  2111   0008C4  5019               	movf	(get_color_distance@color2+6)^0,w,c
  2112   0008C6  580D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2113   0008C8  6E29               	movwf	(_get_color_distance$419+2)^0,c
  2114   0008CA  501A               	movf	(get_color_distance@color2+7)^0,w,c
  2115   0008CC  580E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2116   0008CE  6E2A               	movwf	(_get_color_distance$419+3)^0,c
  2117   0008D0                     l2284:
  2118   0008D0  C027  F031         	movff	_get_color_distance$419,get_color_distance@G_offset
  2119   0008D4  C028  F032         	movff	_get_color_distance$419+1,get_color_distance@G_offset+1
  2120                           
  2121                           ;color.c: 149:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2122   0008D8  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2123   0008DA  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2124   0008DC  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2125   0008DE  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2126   0008E0  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2127   0008E2  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2128   0008E4  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2129   0008E6  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2130   0008E8  B0D8               	btfsc	status,0,c
  2131   0008EA  EF79  F004         	goto	u1271
  2132   0008EE  EF7B  F004         	goto	u1270
  2133   0008F2                     u1271:
  2134   0008F2  EF89  F004         	goto	l2288
  2135   0008F6                     u1270:
  2136   0008F6  500F               	movf	(get_color_distance@color1+8)^0,w,c
  2137   0008F8  5C1B               	subwf	(get_color_distance@color2+8)^0,w,c
  2138   0008FA  6E2B               	movwf	_get_color_distance$421^0,c
  2139   0008FC  5010               	movf	(get_color_distance@color1+9)^0,w,c
  2140   0008FE  581C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2141   000900  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2142   000902  5011               	movf	(get_color_distance@color1+10)^0,w,c
  2143   000904  581D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2144   000906  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2145   000908  5012               	movf	(get_color_distance@color1+11)^0,w,c
  2146   00090A  581E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2147   00090C  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2148   00090E  EF95  F004         	goto	l2290
  2149   000912                     l2288:
  2150   000912  501B               	movf	(get_color_distance@color2+8)^0,w,c
  2151   000914  5C0F               	subwf	(get_color_distance@color1+8)^0,w,c
  2152   000916  6E2B               	movwf	_get_color_distance$421^0,c
  2153   000918  501C               	movf	(get_color_distance@color2+9)^0,w,c
  2154   00091A  5810               	subwfb	(get_color_distance@color1+9)^0,w,c
  2155   00091C  6E2C               	movwf	(_get_color_distance$421+1)^0,c
  2156   00091E  501D               	movf	(get_color_distance@color2+10)^0,w,c
  2157   000920  5811               	subwfb	(get_color_distance@color1+10)^0,w,c
  2158   000922  6E2D               	movwf	(_get_color_distance$421+2)^0,c
  2159   000924  501E               	movf	(get_color_distance@color2+11)^0,w,c
  2160   000926  5812               	subwfb	(get_color_distance@color1+11)^0,w,c
  2161   000928  6E2E               	movwf	(_get_color_distance$421+3)^0,c
  2162   00092A                     l2290:
  2163   00092A  C02B  F033         	movff	_get_color_distance$421,get_color_distance@B_offset
  2164   00092E  C02C  F034         	movff	_get_color_distance$421+1,get_color_distance@B_offset+1
  2165   000932                     
  2166                           ;color.c: 151:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2167   000932  C02F  F001         	movff	get_color_distance@R_offset,___wmul@multiplier
  2168   000936  C030  F002         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2169   00093A  C02F  F003         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2170   00093E  C030  F004         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2171   000942  EC53  F00D         	call	___wmul	;wreg free
  2172   000946  C001  F01F         	movff	?___wmul,??_get_color_distance
  2173   00094A  C002  F020         	movff	?___wmul+1,??_get_color_distance+1
  2174   00094E  C031  F001         	movff	get_color_distance@G_offset,___wmul@multiplier
  2175   000952  C032  F002         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2176   000956  C031  F003         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2177   00095A  C032  F004         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2178   00095E  EC53  F00D         	call	___wmul	;wreg free
  2179   000962  5001               	movf	?___wmul^0,w,c
  2180   000964  241F               	addwf	??_get_color_distance^0,w,c
  2181   000966  6E21               	movwf	(??_get_color_distance+2)^0,c
  2182   000968  5002               	movf	(?___wmul+1)^0,w,c
  2183   00096A  2020               	addwfc	(??_get_color_distance+1)^0,w,c
  2184   00096C  6E22               	movwf	(??_get_color_distance+3)^0,c
  2185   00096E  C033  F001         	movff	get_color_distance@B_offset,___wmul@multiplier
  2186   000972  C034  F002         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2187   000976  C033  F003         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2188   00097A  C034  F004         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2189   00097E  EC53  F00D         	call	___wmul	;wreg free
  2190   000982  5001               	movf	?___wmul^0,w,c
  2191   000984  2421               	addwf	(??_get_color_distance+2)^0,w,c
  2192   000986  6E07               	movwf	?_get_color_distance^0,c
  2193   000988  5002               	movf	(?___wmul+1)^0,w,c
  2194   00098A  2022               	addwfc	(??_get_color_distance+3)^0,w,c
  2195   00098C  6E08               	movwf	(?_get_color_distance+1)^0,c
  2196   00098E  0012               	return		;funcret
  2197   000990                     __end_of_get_color_distance:
  2198                           	callstack 0
  2199                           
  2200 ;; *************** function ___lmul *****************
  2201 ;; Defined at:
  2202 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;  multiplier      4    0[COMRAM] unsigned long 
  2205 ;;  multiplicand    4    4[COMRAM] unsigned long 
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  product         4    8[COMRAM] unsigned long 
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  4    0[COMRAM] unsigned long 
  2210 ;; Registers used:
  2211 ;;		wreg, status,2, status,0
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2217 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2218 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;Total ram usage:       12 bytes
  2222 ;; Hardware stack levels used: 1
  2223 ;; Hardware stack levels required when called: 2
  2224 ;; This function calls:
  2225 ;;		Nothing
  2226 ;; This function is called by:
  2227 ;;		_get_color_code
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text7
  2232   0016EE                     __ptext7:
  2233                           	callstack 0
  2234   0016EE                     ___lmul:
  2235                           	callstack 27
  2236   0016EE  0E00               	movlw	0
  2237   0016F0  6E09               	movwf	___lmul@product^0,c
  2238   0016F2  0E00               	movlw	0
  2239   0016F4  6E0A               	movwf	(___lmul@product+1)^0,c
  2240   0016F6  0E00               	movlw	0
  2241   0016F8  6E0B               	movwf	(___lmul@product+2)^0,c
  2242   0016FA  0E00               	movlw	0
  2243   0016FC  6E0C               	movwf	(___lmul@product+3)^0,c
  2244   0016FE                     l2474:
  2245   0016FE  A001               	btfss	___lmul@multiplier^0,0,c
  2246   001700  EF84  F00B         	goto	u1361
  2247   001704  EF86  F00B         	goto	u1360
  2248   001708                     u1361:
  2249   001708  EF8E  F00B         	goto	l2478
  2250   00170C                     u1360:
  2251   00170C  5005               	movf	___lmul@multiplicand^0,w,c
  2252   00170E  2609               	addwf	___lmul@product^0,f,c
  2253   001710  5006               	movf	(___lmul@multiplicand+1)^0,w,c
  2254   001712  220A               	addwfc	(___lmul@product+1)^0,f,c
  2255   001714  5007               	movf	(___lmul@multiplicand+2)^0,w,c
  2256   001716  220B               	addwfc	(___lmul@product+2)^0,f,c
  2257   001718  5008               	movf	(___lmul@multiplicand+3)^0,w,c
  2258   00171A  220C               	addwfc	(___lmul@product+3)^0,f,c
  2259   00171C                     l2478:
  2260   00171C  90D8               	bcf	status,0,c
  2261   00171E  3605               	rlcf	___lmul@multiplicand^0,f,c
  2262   001720  3606               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2263   001722  3607               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2264   001724  3608               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2265   001726  90D8               	bcf	status,0,c
  2266   001728  3204               	rrcf	(___lmul@multiplier+3)^0,f,c
  2267   00172A  3203               	rrcf	(___lmul@multiplier+2)^0,f,c
  2268   00172C  3202               	rrcf	(___lmul@multiplier+1)^0,f,c
  2269   00172E  3201               	rrcf	___lmul@multiplier^0,f,c
  2270   001730  5001               	movf	___lmul@multiplier^0,w,c
  2271   001732  1002               	iorwf	(___lmul@multiplier+1)^0,w,c
  2272   001734  1003               	iorwf	(___lmul@multiplier+2)^0,w,c
  2273   001736  1004               	iorwf	(___lmul@multiplier+3)^0,w,c
  2274   001738  A4D8               	btfss	status,2,c
  2275   00173A  EFA1  F00B         	goto	u1371
  2276   00173E  EFA3  F00B         	goto	u1370
  2277   001742                     u1371:
  2278   001742  EF7F  F00B         	goto	l2474
  2279   001746                     u1370:
  2280   001746  C009  F001         	movff	___lmul@product,?___lmul
  2281   00174A  C00A  F002         	movff	___lmul@product+1,?___lmul+1
  2282   00174E  C00B  F003         	movff	___lmul@product+2,?___lmul+2
  2283   001752  C00C  F004         	movff	___lmul@product+3,?___lmul+3
  2284   001756  0012               	return		;funcret
  2285   001758                     __end_of___lmul:
  2286                           	callstack 0
  2287                           
  2288 ;; *************** function ___lldiv *****************
  2289 ;; Defined at:
  2290 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;  dividend        4   12[COMRAM] unsigned long 
  2293 ;;  divisor         4   16[COMRAM] unsigned long 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  quotient        4   20[COMRAM] unsigned long 
  2296 ;;  counter         1   24[COMRAM] unsigned char 
  2297 ;; Return value:  Size  Location     Type
  2298 ;;                  4   12[COMRAM] unsigned long 
  2299 ;; Registers used:
  2300 ;;		wreg, status,2, status,0
  2301 ;; Tracked objects:
  2302 ;;		On entry : 0/0
  2303 ;;		On exit  : 0/0
  2304 ;;		Unchanged: 0/0
  2305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2306 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2307 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2309 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2310 ;;Total ram usage:       13 bytes
  2311 ;; Hardware stack levels used: 1
  2312 ;; Hardware stack levels required when called: 2
  2313 ;; This function calls:
  2314 ;;		Nothing
  2315 ;; This function is called by:
  2316 ;;		_get_color_code
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text8
  2321   001394                     __ptext8:
  2322                           	callstack 0
  2323   001394                     ___lldiv:
  2324                           	callstack 27
  2325   001394  0E00               	movlw	0
  2326   001396  6E15               	movwf	___lldiv@quotient^0,c
  2327   001398  0E00               	movlw	0
  2328   00139A  6E16               	movwf	(___lldiv@quotient+1)^0,c
  2329   00139C  0E00               	movlw	0
  2330   00139E  6E17               	movwf	(___lldiv@quotient+2)^0,c
  2331   0013A0  0E00               	movlw	0
  2332   0013A2  6E18               	movwf	(___lldiv@quotient+3)^0,c
  2333   0013A4  5011               	movf	___lldiv@divisor^0,w,c
  2334   0013A6  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  2335   0013A8  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  2336   0013AA  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  2337   0013AC  B4D8               	btfsc	status,2,c
  2338   0013AE  EFDB  F009         	goto	u1381
  2339   0013B2  EFDD  F009         	goto	u1380
  2340   0013B6                     u1381:
  2341   0013B6  EF13  F00A         	goto	l448
  2342   0013BA                     u1380:
  2343   0013BA  0E01               	movlw	1
  2344   0013BC  6E19               	movwf	___lldiv@counter^0,c
  2345   0013BE  EFE7  F009         	goto	l2490
  2346   0013C2                     l2488:
  2347   0013C2  90D8               	bcf	status,0,c
  2348   0013C4  3611               	rlcf	___lldiv@divisor^0,f,c
  2349   0013C6  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  2350   0013C8  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  2351   0013CA  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  2352   0013CC  2A19               	incf	___lldiv@counter^0,f,c
  2353   0013CE                     l2490:
  2354   0013CE  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  2355   0013D0  EFEC  F009         	goto	u1391
  2356   0013D4  EFEE  F009         	goto	u1390
  2357   0013D8                     u1391:
  2358   0013D8  EFE1  F009         	goto	l2488
  2359   0013DC                     u1390:
  2360   0013DC                     l2492:
  2361   0013DC  90D8               	bcf	status,0,c
  2362   0013DE  3615               	rlcf	___lldiv@quotient^0,f,c
  2363   0013E0  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  2364   0013E2  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  2365   0013E4  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  2366   0013E6  5011               	movf	___lldiv@divisor^0,w,c
  2367   0013E8  5C0D               	subwf	___lldiv@dividend^0,w,c
  2368   0013EA  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2369   0013EC  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2370   0013EE  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2371   0013F0  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2372   0013F2  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2373   0013F4  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  2374   0013F6  A0D8               	btfss	status,0,c
  2375   0013F8  EF00  F00A         	goto	u1401
  2376   0013FC  EF02  F00A         	goto	u1400
  2377   001400                     u1401:
  2378   001400  EF0B  F00A         	goto	l2500
  2379   001404                     u1400:
  2380   001404  5011               	movf	___lldiv@divisor^0,w,c
  2381   001406  5E0D               	subwf	___lldiv@dividend^0,f,c
  2382   001408  5012               	movf	(___lldiv@divisor+1)^0,w,c
  2383   00140A  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2384   00140C  5013               	movf	(___lldiv@divisor+2)^0,w,c
  2385   00140E  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2386   001410  5014               	movf	(___lldiv@divisor+3)^0,w,c
  2387   001412  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  2388   001414  8015               	bsf	___lldiv@quotient^0,0,c
  2389   001416                     l2500:
  2390   001416  90D8               	bcf	status,0,c
  2391   001418  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  2392   00141A  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  2393   00141C  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  2394   00141E  3211               	rrcf	___lldiv@divisor^0,f,c
  2395   001420  2E19               	decfsz	___lldiv@counter^0,f,c
  2396   001422  EFEE  F009         	goto	l2492
  2397   001426                     l448:
  2398   001426  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  2399   00142A  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  2400   00142E  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  2401   001432  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  2402   001436  0012               	return		;funcret
  2403   001438                     __end_of___lldiv:
  2404                           	callstack 0
  2405                           
  2406 ;; *************** function _fullSpeedAhead *****************
  2407 ;; Defined at:
  2408 ;;		line 247 in file "dc_motor.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  2411 ;;		 -> main@motorL(9), 
  2412 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  2413 ;;		 -> main@motorR(9), 
  2414 ;; Auto vars:     Size  Location     Type
  2415 ;;		None
  2416 ;; Return value:  Size  Location     Type
  2417 ;;                  1    wreg      void 
  2418 ;; Registers used:
  2419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2420 ;; Tracked objects:
  2421 ;;		On entry : 0/0
  2422 ;;		On exit  : 0/0
  2423 ;;		Unchanged: 0/0
  2424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2425 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2428 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2429 ;;Total ram usage:        4 bytes
  2430 ;; Hardware stack levels used: 1
  2431 ;; Hardware stack levels required when called: 4
  2432 ;; This function calls:
  2433 ;;		_setMotorPWM
  2434 ;; This function is called by:
  2435 ;;		_main
  2436 ;; This function uses a non-reentrant model
  2437 ;;
  2438                           
  2439                           	psect	text9
  2440   0017BA                     __ptext9:
  2441                           	callstack 0
  2442   0017BA                     _fullSpeedAhead:
  2443                           	callstack 26
  2444   0017BA                     
  2445                           ;dc_motor.c: 247: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 248: {;dc_motor.c: 249:     seconds = 0;
  2446   0017BA  0E00               	movlw	0
  2447   0017BC  6E5E               	movwf	(_seconds+1)^0,c
  2448   0017BE  0E00               	movlw	0
  2449   0017C0  6E5D               	movwf	_seconds^0,c
  2450   0017C2                     
  2451                           ;dc_motor.c: 250:     (*mL).direction=1;
  2452   0017C2  EE20 F001          	lfsr	2,1
  2453   0017C6  5014               	movf	fullSpeedAhead@mL^0,w,c
  2454   0017C8  26D9               	addwf	fsr2l,f,c
  2455   0017CA  5015               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2456   0017CC  22DA               	addwfc	fsr2h,f,c
  2457   0017CE  0E01               	movlw	1
  2458   0017D0  6EDF               	movwf	indf2,c
  2459   0017D2                     
  2460                           ;dc_motor.c: 251:     (*mR).direction=1;
  2461   0017D2  EE20 F001          	lfsr	2,1
  2462   0017D6  5016               	movf	fullSpeedAhead@mR^0,w,c
  2463   0017D8  26D9               	addwf	fsr2l,f,c
  2464   0017DA  5017               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2465   0017DC  22DA               	addwfc	fsr2h,f,c
  2466   0017DE  0E01               	movlw	1
  2467   0017E0  6EDF               	movwf	indf2,c
  2468   0017E2                     
  2469                           ;dc_motor.c: 252:     (*mL).power=40;
  2470   0017E2  C014  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2471   0017E6  C015  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2472   0017EA  0E28               	movlw	40
  2473   0017EC  6EDF               	movwf	indf2,c
  2474   0017EE                     
  2475                           ;dc_motor.c: 253:     (*mR).power=38;
  2476   0017EE  C016  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2477   0017F2  C017  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2478   0017F6  0E26               	movlw	38
  2479   0017F8  6EDF               	movwf	indf2,c
  2480   0017FA                     
  2481                           ;dc_motor.c: 254:     setMotorPWM(mL);
  2482   0017FA  C014  F00E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2483   0017FE  C015  F00F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2484   001802  ECC8  F004         	call	_setMotorPWM	;wreg free
  2485   001806                     
  2486                           ;dc_motor.c: 255:     setMotorPWM(mR);
  2487   001806  C016  F00E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2488   00180A  C017  F00F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2489   00180E  ECC8  F004         	call	_setMotorPWM	;wreg free
  2490   001812  0012               	return		;funcret
  2491   001814                     __end_of_fullSpeedAhead:
  2492                           	callstack 0
  2493                           
  2494 ;; *************** function _color_click_init *****************
  2495 ;; Defined at:
  2496 ;;		line 30 in file "color.c"
  2497 ;; Parameters:    Size  Location     Type
  2498 ;;		None
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;		None
  2501 ;; Return value:  Size  Location     Type
  2502 ;;                  1    wreg      void 
  2503 ;; Registers used:
  2504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2505 ;; Tracked objects:
  2506 ;;		On entry : 0/0
  2507 ;;		On exit  : 0/0
  2508 ;;		Unchanged: 0/0
  2509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2513 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2514 ;;Total ram usage:        1 bytes
  2515 ;; Hardware stack levels used: 1
  2516 ;; Hardware stack levels required when called: 6
  2517 ;; This function calls:
  2518 ;;		_I2C_2_Master_Init
  2519 ;;		_calibrate_black
  2520 ;;		_calibrate_white
  2521 ;;		_color_writetoaddr
  2522 ;; This function is called by:
  2523 ;;		_main
  2524 ;; This function uses a non-reentrant model
  2525 ;;
  2526                           
  2527                           	psect	text10
  2528   000AFC                     __ptext10:
  2529                           	callstack 0
  2530   000AFC                     _color_click_init:
  2531                           	callstack 24
  2532   000AFC                     
  2533                           ;color.c: 33:     I2C_2_Master_Init();
  2534   000AFC  EC2A  F00D         	call	_I2C_2_Master_Init	;wreg free
  2535   000B00                     
  2536                           ;color.c: 36:   color_writetoaddr(0x00, 0x01);
  2537   000B00  0E01               	movlw	1
  2538   000B02  6E03               	movwf	color_writetoaddr@value^0,c
  2539   000B04  0E00               	movlw	0
  2540   000B06  EC66  F00D         	call	_color_writetoaddr
  2541   000B0A                     
  2542                           ;color.c: 37:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2543   000B0A  0E3F               	movlw	63
  2544   000B0C  6E14               	movwf	??_color_click_init^0,c
  2545   000B0E  0E55               	movlw	85
  2546   000B10                     u2307:
  2547   000B10  2EE8               	decfsz	wreg,f,c
  2548   000B12  D7FE               	bra	u2307
  2549   000B14  2E14               	decfsz	??_color_click_init^0,f,c
  2550   000B16  D7FC               	bra	u2307
  2551   000B18  F000               	nop	
  2552   000B1A                     
  2553                           ;color.c: 40:  color_writetoaddr(0x00, 0x03);
  2554   000B1A  0E03               	movlw	3
  2555   000B1C  6E03               	movwf	color_writetoaddr@value^0,c
  2556   000B1E  0E00               	movlw	0
  2557   000B20  EC66  F00D         	call	_color_writetoaddr
  2558   000B24                     
  2559                           ;color.c: 43:  color_writetoaddr(0x01, 0xD5);
  2560   000B24  0ED5               	movlw	213
  2561   000B26  6E03               	movwf	color_writetoaddr@value^0,c
  2562   000B28  0E01               	movlw	1
  2563   000B2A  EC66  F00D         	call	_color_writetoaddr
  2564   000B2E                     
  2565                           ;color.c: 45:     TRISFbits.TRISF7 = 0;
  2566   000B2E  9E86               	bcf	134,7,c	;volatile
  2567   000B30                     
  2568                           ;color.c: 46:     TRISGbits.TRISG1 = 0;
  2569   000B30  9287               	bcf	135,1,c	;volatile
  2570   000B32                     
  2571                           ;color.c: 47:     TRISAbits.TRISA4 = 0;
  2572   000B32  9881               	bcf	129,4,c	;volatile
  2573   000B34                     
  2574                           ;color.c: 49:     Color_rules[0] = Red_rule;
  2575   000B34  EE20  F0B4         	lfsr	2,_Red_rule
  2576   000B38  EE11  F000         	lfsr	1,_Color_rules
  2577   000B3C  0E0B               	movlw	11
  2578   000B3E                     u1411:
  2579   000B3E  CFDB FFE3          	movff	plusw2,plusw1
  2580   000B42  06E8               	decf	wreg,f,c
  2581   000B44  E2FC               	bc	u1411
  2582   000B46                     
  2583                           ;color.c: 50:     Color_rules[1] = Green_rule;
  2584   000B46  EE20  F0A8         	lfsr	2,_Green_rule
  2585   000B4A  EE11  F00C         	lfsr	1,_Color_rules+12
  2586   000B4E  0E0B               	movlw	11
  2587   000B50                     u1421:
  2588   000B50  CFDB FFE3          	movff	plusw2,plusw1
  2589   000B54  06E8               	decf	wreg,f,c
  2590   000B56  E2FC               	bc	u1421
  2591   000B58                     
  2592                           ;color.c: 51:     Color_rules[2] = Blue_rule;
  2593   000B58  EE20  F09C         	lfsr	2,_Blue_rule
  2594   000B5C  EE11  F018         	lfsr	1,_Color_rules+24
  2595   000B60  0E0B               	movlw	11
  2596   000B62                     u1431:
  2597   000B62  CFDB FFE3          	movff	plusw2,plusw1
  2598   000B66  06E8               	decf	wreg,f,c
  2599   000B68  E2FC               	bc	u1431
  2600   000B6A                     
  2601                           ;color.c: 52:     Color_rules[3] = Yellow_rule;
  2602   000B6A  EE20  F090         	lfsr	2,_Yellow_rule
  2603   000B6E  EE11  F024         	lfsr	1,_Color_rules+36
  2604   000B72  0E0B               	movlw	11
  2605   000B74                     u1441:
  2606   000B74  CFDB FFE3          	movff	plusw2,plusw1
  2607   000B78  06E8               	decf	wreg,f,c
  2608   000B7A  E2FC               	bc	u1441
  2609   000B7C                     
  2610                           ;color.c: 53:     Color_rules[4] = Pink_rule;
  2611   000B7C  EE20  F084         	lfsr	2,_Pink_rule
  2612   000B80  EE11  F030         	lfsr	1,_Color_rules+48
  2613   000B84  0E0B               	movlw	11
  2614   000B86                     u1451:
  2615   000B86  CFDB FFE3          	movff	plusw2,plusw1
  2616   000B8A  06E8               	decf	wreg,f,c
  2617   000B8C  E2FC               	bc	u1451
  2618   000B8E                     
  2619                           ;color.c: 54:     Color_rules[5] = Orange_rule;
  2620   000B8E  EE20  F078         	lfsr	2,_Orange_rule
  2621   000B92  EE11  F03C         	lfsr	1,_Color_rules+60
  2622   000B96  0E0B               	movlw	11
  2623   000B98                     u1461:
  2624   000B98  CFDB FFE3          	movff	plusw2,plusw1
  2625   000B9C  06E8               	decf	wreg,f,c
  2626   000B9E  E2FC               	bc	u1461
  2627   000BA0                     
  2628                           ;color.c: 55:     Color_rules[6] = Lightblue_rule;
  2629   000BA0  EE20  F06C         	lfsr	2,_Lightblue_rule
  2630   000BA4  EE11  F048         	lfsr	1,_Color_rules+72
  2631   000BA8  0E0B               	movlw	11
  2632   000BAA                     u1471:
  2633   000BAA  CFDB FFE3          	movff	plusw2,plusw1
  2634   000BAE  06E8               	decf	wreg,f,c
  2635   000BB0  E2FC               	bc	u1471
  2636   000BB2                     
  2637                           ;color.c: 56:     Color_rules[7] = White_rule;
  2638   000BB2  EE21  F0DC         	lfsr	2,_White_rule
  2639   000BB6  EE11  F054         	lfsr	1,_Color_rules+84
  2640   000BBA  0E0B               	movlw	11
  2641   000BBC                     u1481:
  2642   000BBC  CFDB FFE3          	movff	plusw2,plusw1
  2643   000BC0  06E8               	decf	wreg,f,c
  2644   000BC2  E2FC               	bc	u1481
  2645   000BC4                     
  2646                           ;color.c: 57:     Color_rules[8] = Black_rule;
  2647   000BC4  EE21  F0D0         	lfsr	2,_Black_rule
  2648   000BC8  EE11  F060         	lfsr	1,_Color_rules+96
  2649   000BCC  0E0B               	movlw	11
  2650   000BCE                     u1491:
  2651   000BCE  CFDB FFE3          	movff	plusw2,plusw1
  2652   000BD2  06E8               	decf	wreg,f,c
  2653   000BD4  E2FC               	bc	u1491
  2654   000BD6                     
  2655                           ;color.c: 66:     TRISFbits.TRISF3=1;
  2656   000BD6  8686               	bsf	134,3,c	;volatile
  2657   000BD8                     
  2658                           ;color.c: 67:     ANSELFbits.ANSELF3=0;
  2659   000BD8  010E               	movlb	14	; () banked
  2660   000BDA  97B4               	bcf	180,3,b	;volatile
  2661   000BDC                     
  2662                           ; BSR set to: 14
  2663                           ;color.c: 68:     TRISFbits.TRISF2=1;
  2664   000BDC  8486               	bsf	134,2,c	;volatile
  2665   000BDE                     
  2666                           ; BSR set to: 14
  2667                           ;color.c: 69:     ANSELFbits.ANSELF2=0;
  2668   000BDE  95B4               	bcf	180,2,b	;volatile
  2669   000BE0                     l67:
  2670   000BE0  A68E               	btfss	142,3,c	;volatile
  2671   000BE2  EFF5  F005         	goto	u1501
  2672   000BE6  EFF7  F005         	goto	u1500
  2673   000BEA                     u1501:
  2674   000BEA  EFFE  F005         	goto	l71
  2675   000BEE                     u1500:
  2676   000BEE  B48E               	btfsc	142,2,c	;volatile
  2677   000BF0  EFFC  F005         	goto	u1511
  2678   000BF4  EFFE  F005         	goto	u1510
  2679   000BF8                     u1511:
  2680   000BF8  EFF0  F005         	goto	l67
  2681   000BFC                     u1510:
  2682   000BFC                     l71:
  2683                           
  2684                           ;color.c: 72:     if(!PORTFbits.RF2){
  2685   000BFC  B48E               	btfsc	142,2,c	;volatile
  2686   000BFE  EF03  F006         	goto	u1521
  2687   000C02  EF05  F006         	goto	u1520
  2688   000C06                     u1521:
  2689   000C06  EF07  F006         	goto	l2550
  2690   000C0A                     u1520:
  2691   000C0A  EF19  F006         	goto	l73
  2692   000C0E                     l2550:
  2693                           
  2694                           ;color.c: 75:     calibrate_white();
  2695   000C0E  EC75  F009         	call	_calibrate_white	;wreg free
  2696   000C12                     l74:
  2697   000C12  B68E               	btfsc	142,3,c	;volatile
  2698   000C14  EF0E  F006         	goto	u1531
  2699   000C18  EF10  F006         	goto	u1530
  2700   000C1C                     u1531:
  2701   000C1C  EF09  F006         	goto	l74
  2702   000C20                     u1530:
  2703   000C20                     
  2704                           ;color.c: 77:     calibrate_black();
  2705   000C20  EC6A  F008         	call	_calibrate_black	;wreg free
  2706   000C24                     l77:
  2707   000C24  B68E               	btfsc	142,3,c	;volatile
  2708   000C26  EF17  F006         	goto	u1541
  2709   000C2A  EF19  F006         	goto	u1540
  2710   000C2E                     u1541:
  2711   000C2E  EF12  F006         	goto	l77
  2712   000C32                     u1540:
  2713   000C32                     l73:
  2714   000C32  0012               	return		;funcret
  2715   000C34                     __end_of_color_click_init:
  2716                           	callstack 0
  2717                           
  2718 ;; *************** function _color_writetoaddr *****************
  2719 ;; Defined at:
  2720 ;;		line 82 in file "color.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  address         1    wreg     unsigned char 
  2723 ;;  value           1    2[COMRAM] unsigned char 
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  address         1    3[COMRAM] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, status,0, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2735 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2736 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2738 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2739 ;;Total ram usage:        2 bytes
  2740 ;; Hardware stack levels used: 1
  2741 ;; Hardware stack levels required when called: 4
  2742 ;; This function calls:
  2743 ;;		_I2C_2_Master_Start
  2744 ;;		_I2C_2_Master_Stop
  2745 ;;		_I2C_2_Master_Write
  2746 ;; This function is called by:
  2747 ;;		_color_click_init
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750                           
  2751                           	psect	text11
  2752   001ACC                     __ptext11:
  2753                           	callstack 0
  2754   001ACC                     _color_writetoaddr:
  2755                           	callstack 25
  2756                           
  2757                           ;incstack = 0
  2758                           ;color_writetoaddr@address stored from wreg
  2759   001ACC  6E04               	movwf	color_writetoaddr@address^0,c
  2760   001ACE                     
  2761                           ;color.c: 83:     I2C_2_Master_Start();
  2762   001ACE  ECA4  F00D         	call	_I2C_2_Master_Start	;wreg free
  2763                           
  2764                           ;color.c: 84:     I2C_2_Master_Write(0x52 | 0x00);
  2765   001AD2  0E52               	movlw	82
  2766   001AD4  EC93  F00D         	call	_I2C_2_Master_Write
  2767                           
  2768                           ;color.c: 85:     I2C_2_Master_Write(0x80 | address);
  2769   001AD8  5004               	movf	color_writetoaddr@address^0,w,c
  2770   001ADA  0980               	iorlw	128
  2771   001ADC  EC93  F00D         	call	_I2C_2_Master_Write
  2772                           
  2773                           ;color.c: 86:     I2C_2_Master_Write(value);
  2774   001AE0  5003               	movf	color_writetoaddr@value^0,w,c
  2775   001AE2  EC93  F00D         	call	_I2C_2_Master_Write
  2776                           
  2777                           ;color.c: 87:     I2C_2_Master_Stop();
  2778   001AE6  EC9F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  2779   001AEA  0012               	return		;funcret
  2780   001AEC                     __end_of_color_writetoaddr:
  2781                           	callstack 0
  2782                           
  2783 ;; *************** function _calibrate_white *****************
  2784 ;; Defined at:
  2785 ;;		line 229 in file "color.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;		None
  2788 ;; Auto vars:     Size  Location     Type
  2789 ;;		None
  2790 ;; Return value:  Size  Location     Type
  2791 ;;                  1    wreg      void 
  2792 ;; Registers used:
  2793 ;;		wreg, status,2, status,0, cstack
  2794 ;; Tracked objects:
  2795 ;;		On entry : 0/0
  2796 ;;		On exit  : 0/0
  2797 ;;		Unchanged: 0/0
  2798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2802 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2803 ;;Total ram usage:        2 bytes
  2804 ;; Hardware stack levels used: 1
  2805 ;; Hardware stack levels required when called: 5
  2806 ;; This function calls:
  2807 ;;		_color_read_Blue
  2808 ;;		_color_read_Green
  2809 ;;		_color_read_Red
  2810 ;;		_set_led_color
  2811 ;; This function is called by:
  2812 ;;		_color_click_init
  2813 ;; This function uses a non-reentrant model
  2814 ;;
  2815                           
  2816                           	psect	text12
  2817   0012EA                     __ptext12:
  2818                           	callstack 0
  2819   0012EA                     _calibrate_white:
  2820                           	callstack 24
  2821   0012EA                     
  2822                           ;color.c: 230:     set_led_color(0b100);
  2823   0012EA  0E00               	movlw	0
  2824   0012EC  6E02               	movwf	(set_led_color@color+1)^0,c
  2825   0012EE  0E04               	movlw	4
  2826   0012F0  6E01               	movwf	set_led_color@color^0,c
  2827   0012F2  ECCE  F00C         	call	_set_led_color	;wreg free
  2828   0012F6                     
  2829                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2830   0012F6  0E12               	movlw	18
  2831   0012F8  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2832   0012FA  0EDC               	movlw	220
  2833   0012FC  6E0C               	movwf	??_calibrate_white^0,c
  2834   0012FE  0E60               	movlw	96
  2835   001300                     u2317:
  2836   001300  2EE8               	decfsz	wreg,f,c
  2837   001302  D7FE               	bra	u2317
  2838   001304  2E0C               	decfsz	??_calibrate_white^0,f,c
  2839   001306  D7FC               	bra	u2317
  2840   001308  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2841   00130A  D7FA               	bra	u2317
  2842   00130C                     
  2843                           ;color.c: 232:     White_setup.R = color_read_Red();
  2844   00130C  EC0A  F00C         	call	_color_read_Red	;wreg free
  2845   001310  C005  F060         	movff	?_color_read_Red,_White_setup
  2846   001314  C006  F061         	movff	?_color_read_Red+1,_White_setup+1
  2847   001318  0100               	movlb	0	; () banked
  2848   00131A  6B62               	clrf	(_White_setup+2)& (0+255),b
  2849   00131C  6B63               	clrf	(_White_setup+3)& (0+255),b
  2850   00131E                     
  2851                           ; BSR set to: 0
  2852                           ;color.c: 233:     set_led_color(0b010);
  2853   00131E  0E00               	movlw	0
  2854   001320  6E02               	movwf	(set_led_color@color+1)^0,c
  2855   001322  0E02               	movlw	2
  2856   001324  6E01               	movwf	set_led_color@color^0,c
  2857   001326  ECCE  F00C         	call	_set_led_color	;wreg free
  2858   00132A                     
  2859                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2860   00132A  0E12               	movlw	18
  2861   00132C  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2862   00132E  0EDC               	movlw	220
  2863   001330  6E0C               	movwf	??_calibrate_white^0,c
  2864   001332  0E60               	movlw	96
  2865   001334                     u2327:
  2866   001334  2EE8               	decfsz	wreg,f,c
  2867   001336  D7FE               	bra	u2327
  2868   001338  2E0C               	decfsz	??_calibrate_white^0,f,c
  2869   00133A  D7FC               	bra	u2327
  2870   00133C  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2871   00133E  D7FA               	bra	u2327
  2872                           
  2873                           ;color.c: 235:     White_setup.G = color_read_Green();
  2874   001340  EC32  F00C         	call	_color_read_Green	;wreg free
  2875   001344  C005  F064         	movff	?_color_read_Green,_White_setup+4
  2876   001348  C006  F065         	movff	?_color_read_Green+1,_White_setup+5
  2877   00134C  0100               	movlb	0	; () banked
  2878   00134E  6B66               	clrf	(_White_setup+6)& (0+255),b
  2879   001350  6B67               	clrf	(_White_setup+7)& (0+255),b
  2880   001352                     
  2881                           ; BSR set to: 0
  2882                           ;color.c: 236:     set_led_color(0b001);
  2883   001352  0E00               	movlw	0
  2884   001354  6E02               	movwf	(set_led_color@color+1)^0,c
  2885   001356  0E01               	movlw	1
  2886   001358  6E01               	movwf	set_led_color@color^0,c
  2887   00135A  ECCE  F00C         	call	_set_led_color	;wreg free
  2888   00135E                     
  2889                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2890   00135E  0E12               	movlw	18
  2891   001360  6E0D               	movwf	(??_calibrate_white+1)^0,c
  2892   001362  0EDC               	movlw	220
  2893   001364  6E0C               	movwf	??_calibrate_white^0,c
  2894   001366  0E60               	movlw	96
  2895   001368                     u2337:
  2896   001368  2EE8               	decfsz	wreg,f,c
  2897   00136A  D7FE               	bra	u2337
  2898   00136C  2E0C               	decfsz	??_calibrate_white^0,f,c
  2899   00136E  D7FC               	bra	u2337
  2900   001370  2E0D               	decfsz	(??_calibrate_white+1)^0,f,c
  2901   001372  D7FA               	bra	u2337
  2902   001374                     
  2903                           ;color.c: 238:     White_setup.B = color_read_Blue();
  2904   001374  EC82  F00C         	call	_color_read_Blue	;wreg free
  2905   001378  C005  F068         	movff	?_color_read_Blue,_White_setup+8
  2906   00137C  C006  F069         	movff	?_color_read_Blue+1,_White_setup+9
  2907   001380  0100               	movlb	0	; () banked
  2908   001382  6B6A               	clrf	(_White_setup+10)& (0+255),b
  2909   001384  6B6B               	clrf	(_White_setup+11)& (0+255),b
  2910   001386                     
  2911                           ; BSR set to: 0
  2912                           ;color.c: 239:     set_led_color(0b000);
  2913   001386  0E00               	movlw	0
  2914   001388  6E02               	movwf	(set_led_color@color+1)^0,c
  2915   00138A  0E00               	movlw	0
  2916   00138C  6E01               	movwf	set_led_color@color^0,c
  2917   00138E  ECCE  F00C         	call	_set_led_color	;wreg free
  2918   001392  0012               	return		;funcret
  2919   001394                     __end_of_calibrate_white:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _calibrate_black *****************
  2923 ;; Defined at:
  2924 ;;		line 209 in file "color.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  clear2          2   17[COMRAM] unsigned int 
  2929 ;;  clear1          2   15[COMRAM] unsigned int 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0, cstack
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2940 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2943 ;;Total ram usage:        6 bytes
  2944 ;; Hardware stack levels used: 1
  2945 ;; Hardware stack levels required when called: 5
  2946 ;; This function calls:
  2947 ;;		___lwdiv
  2948 ;;		_color_read_Blue
  2949 ;;		_color_read_Clear
  2950 ;;		_color_read_Green
  2951 ;;		_color_read_Red
  2952 ;;		_set_led_color
  2953 ;; This function is called by:
  2954 ;;		_color_click_init
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text13
  2959   0010D4                     __ptext13:
  2960                           	callstack 0
  2961   0010D4                     _calibrate_black:
  2962                           	callstack 24
  2963   0010D4                     
  2964                           ;color.c: 210:     set_led_color(0b100);
  2965   0010D4  0E00               	movlw	0
  2966   0010D6  6E02               	movwf	(set_led_color@color+1)^0,c
  2967   0010D8  0E04               	movlw	4
  2968   0010DA  6E01               	movwf	set_led_color@color^0,c
  2969   0010DC  ECCE  F00C         	call	_set_led_color	;wreg free
  2970   0010E0                     
  2971                           ;color.c: 211:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  2972   0010E0  0E12               	movlw	18
  2973   0010E2  6E0F               	movwf	(??_calibrate_black+1)^0,c
  2974   0010E4  0EDC               	movlw	220
  2975   0010E6  6E0E               	movwf	??_calibrate_black^0,c
  2976   0010E8  0E60               	movlw	96
  2977   0010EA                     u2347:
  2978   0010EA  2EE8               	decfsz	wreg,f,c
  2979   0010EC  D7FE               	bra	u2347
  2980   0010EE  2E0E               	decfsz	??_calibrate_black^0,f,c
  2981   0010F0  D7FC               	bra	u2347
  2982   0010F2  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  2983   0010F4  D7FA               	bra	u2347
  2984   0010F6                     
  2985                           ;color.c: 212:     Black_setup.R = color_read_Red();
  2986   0010F6  EC0A  F00C         	call	_color_read_Red	;wreg free
  2987   0010FA  C005  F04D         	movff	?_color_read_Red,_Black_setup
  2988   0010FE  C006  F04E         	movff	?_color_read_Red+1,_Black_setup+1
  2989   001102  6A4F               	clrf	(_Black_setup+2)^0,c
  2990   001104  6A50               	clrf	(_Black_setup+3)^0,c
  2991   001106                     
  2992                           ;color.c: 213:     set_led_color(0b010);
  2993   001106  0E00               	movlw	0
  2994   001108  6E02               	movwf	(set_led_color@color+1)^0,c
  2995   00110A  0E02               	movlw	2
  2996   00110C  6E01               	movwf	set_led_color@color^0,c
  2997   00110E  ECCE  F00C         	call	_set_led_color	;wreg free
  2998   001112                     
  2999                           ;color.c: 214:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3000   001112  0E12               	movlw	18
  3001   001114  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3002   001116  0EDC               	movlw	220
  3003   001118  6E0E               	movwf	??_calibrate_black^0,c
  3004   00111A  0E60               	movlw	96
  3005   00111C                     u2357:
  3006   00111C  2EE8               	decfsz	wreg,f,c
  3007   00111E  D7FE               	bra	u2357
  3008   001120  2E0E               	decfsz	??_calibrate_black^0,f,c
  3009   001122  D7FC               	bra	u2357
  3010   001124  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3011   001126  D7FA               	bra	u2357
  3012                           
  3013                           ;color.c: 215:     Black_setup.G = color_read_Green();
  3014   001128  EC32  F00C         	call	_color_read_Green	;wreg free
  3015   00112C  C005  F051         	movff	?_color_read_Green,_Black_setup+4
  3016   001130  C006  F052         	movff	?_color_read_Green+1,_Black_setup+5
  3017   001134  6A53               	clrf	(_Black_setup+6)^0,c
  3018   001136  6A54               	clrf	(_Black_setup+7)^0,c
  3019   001138                     
  3020                           ;color.c: 216:     set_led_color(0b001);
  3021   001138  0E00               	movlw	0
  3022   00113A  6E02               	movwf	(set_led_color@color+1)^0,c
  3023   00113C  0E01               	movlw	1
  3024   00113E  6E01               	movwf	set_led_color@color^0,c
  3025   001140  ECCE  F00C         	call	_set_led_color	;wreg free
  3026   001144                     
  3027                           ;color.c: 217:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3028   001144  0E12               	movlw	18
  3029   001146  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3030   001148  0EDC               	movlw	220
  3031   00114A  6E0E               	movwf	??_calibrate_black^0,c
  3032   00114C  0E60               	movlw	96
  3033   00114E                     u2367:
  3034   00114E  2EE8               	decfsz	wreg,f,c
  3035   001150  D7FE               	bra	u2367
  3036   001152  2E0E               	decfsz	??_calibrate_black^0,f,c
  3037   001154  D7FC               	bra	u2367
  3038   001156  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3039   001158  D7FA               	bra	u2367
  3040   00115A                     
  3041                           ;color.c: 218:     Black_setup.B = color_read_Blue();
  3042   00115A  EC82  F00C         	call	_color_read_Blue	;wreg free
  3043   00115E  C005  F055         	movff	?_color_read_Blue,_Black_setup+8
  3044   001162  C006  F056         	movff	?_color_read_Blue+1,_Black_setup+9
  3045   001166  6A57               	clrf	(_Black_setup+10)^0,c
  3046   001168  6A58               	clrf	(_Black_setup+11)^0,c
  3047   00116A                     
  3048                           ;color.c: 219:     set_led_color(0b000);
  3049   00116A  0E00               	movlw	0
  3050   00116C  6E02               	movwf	(set_led_color@color+1)^0,c
  3051   00116E  0E00               	movlw	0
  3052   001170  6E01               	movwf	set_led_color@color^0,c
  3053   001172  ECCE  F00C         	call	_set_led_color	;wreg free
  3054                           
  3055                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3056   001176  0E12               	movlw	18
  3057   001178  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3058   00117A  0EDC               	movlw	220
  3059   00117C  6E0E               	movwf	??_calibrate_black^0,c
  3060   00117E  0E60               	movlw	96
  3061   001180                     u2377:
  3062   001180  2EE8               	decfsz	wreg,f,c
  3063   001182  D7FE               	bra	u2377
  3064   001184  2E0E               	decfsz	??_calibrate_black^0,f,c
  3065   001186  D7FC               	bra	u2377
  3066   001188  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3067   00118A  D7FA               	bra	u2377
  3068   00118C                     
  3069                           ;color.c: 221:     unsigned int clear1 = color_read_Clear();
  3070   00118C  EC5A  F00C         	call	_color_read_Clear	;wreg free
  3071   001190  C005  F010         	movff	?_color_read_Clear,calibrate_black@clear1
  3072   001194  C006  F011         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3073   001198                     
  3074                           ;color.c: 222:     set_led_color(0b111);
  3075   001198  0E00               	movlw	0
  3076   00119A  6E02               	movwf	(set_led_color@color+1)^0,c
  3077   00119C  0E07               	movlw	7
  3078   00119E  6E01               	movwf	set_led_color@color^0,c
  3079   0011A0  ECCE  F00C         	call	_set_led_color	;wreg free
  3080   0011A4                     
  3081                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3082   0011A4  0E12               	movlw	18
  3083   0011A6  6E0F               	movwf	(??_calibrate_black+1)^0,c
  3084   0011A8  0EDC               	movlw	220
  3085   0011AA  6E0E               	movwf	??_calibrate_black^0,c
  3086   0011AC  0E60               	movlw	96
  3087   0011AE                     u2387:
  3088   0011AE  2EE8               	decfsz	wreg,f,c
  3089   0011B0  D7FE               	bra	u2387
  3090   0011B2  2E0E               	decfsz	??_calibrate_black^0,f,c
  3091   0011B4  D7FC               	bra	u2387
  3092   0011B6  2E0F               	decfsz	(??_calibrate_black+1)^0,f,c
  3093   0011B8  D7FA               	bra	u2387
  3094   0011BA                     
  3095                           ;color.c: 224:     unsigned int clear2 = color_read_Clear();
  3096   0011BA  EC5A  F00C         	call	_color_read_Clear	;wreg free
  3097   0011BE  C005  F012         	movff	?_color_read_Clear,calibrate_black@clear2
  3098   0011C2  C006  F013         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3099                           
  3100                           ;color.c: 225:     set_led_color(0b000);
  3101   0011C6  0E00               	movlw	0
  3102   0011C8  6E02               	movwf	(set_led_color@color+1)^0,c
  3103   0011CA  0E00               	movlw	0
  3104   0011CC  6E01               	movwf	set_led_color@color^0,c
  3105   0011CE  ECCE  F00C         	call	_set_led_color	;wreg free
  3106   0011D2                     
  3107                           ;color.c: 226:     wall_coef = clear2/clear1/2;
  3108   0011D2  C012  F007         	movff	calibrate_black@clear2,___lwdiv@dividend
  3109   0011D6  C013  F008         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3110   0011DA  C010  F009         	movff	calibrate_black@clear1,___lwdiv@divisor
  3111   0011DE  C011  F00A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3112   0011E2  EC3D  F00B         	call	___lwdiv	;wreg free
  3113   0011E6  90D8               	bcf	status,0,c
  3114   0011E8  3008               	rrcf	(?___lwdiv+1)^0,w,c
  3115   0011EA  6E0E               	movwf	??_calibrate_black^0,c
  3116   0011EC  3007               	rrcf	?___lwdiv^0,w,c
  3117   0011EE  6E59               	movwf	_wall_coef^0,c
  3118   0011F0  C00E  F05A         	movff	??_calibrate_black,_wall_coef+1
  3119   0011F4  0012               	return		;funcret
  3120   0011F6                     __end_of_calibrate_black:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _set_led_color *****************
  3124 ;; Defined at:
  3125 ;;		line 154 in file "color.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  color           2    0[COMRAM] unsigned int 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		None
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3143 ;;Total ram usage:        2 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 2
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_get_color_code
  3150 ;;		_calibrate_black
  3151 ;;		_calibrate_white
  3152 ;;		_get_wall_presence
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text14
  3157   00199C                     __ptext14:
  3158                           	callstack 0
  3159   00199C                     _set_led_color:
  3160                           	callstack 27
  3161   00199C                     
  3162                           ;color.c: 158:     if(color & 0b100){
  3163   00199C  A401               	btfss	set_led_color@color^0,2,c
  3164   00199E  EFD3  F00C         	goto	u1201
  3165   0019A2  EFD5  F00C         	goto	u1200
  3166   0019A6                     u1201:
  3167   0019A6  EFD8  F00C         	goto	l112
  3168   0019AA                     u1200:
  3169   0019AA                     
  3170                           ;color.c: 159:         LATGbits.LATG1 = 1;
  3171   0019AA  827F               	bsf	127,1,c	;volatile
  3172                           
  3173                           ;color.c: 160:     }else{
  3174   0019AC  EFD9  F00C         	goto	l113
  3175   0019B0                     l112:
  3176                           
  3177                           ;color.c: 161:         LATGbits.LATG1 = 0;
  3178   0019B0  927F               	bcf	127,1,c	;volatile
  3179   0019B2                     l113:
  3180                           
  3181                           ;color.c: 163:     if(color & 0b010){
  3182   0019B2  A201               	btfss	set_led_color@color^0,1,c
  3183   0019B4  EFDE  F00C         	goto	u1211
  3184   0019B8  EFE0  F00C         	goto	u1210
  3185   0019BC                     u1211:
  3186   0019BC  EFE3  F00C         	goto	l114
  3187   0019C0                     u1210:
  3188   0019C0                     
  3189                           ;color.c: 164:         LATAbits.LATA4 = 1;
  3190   0019C0  8879               	bsf	121,4,c	;volatile
  3191                           
  3192                           ;color.c: 165:     }else{
  3193   0019C2  EFE4  F00C         	goto	l115
  3194   0019C6                     l114:
  3195                           
  3196                           ;color.c: 166:         LATAbits.LATA4 = 0;
  3197   0019C6  9879               	bcf	121,4,c	;volatile
  3198   0019C8                     l115:
  3199                           
  3200                           ;color.c: 168:     if(color & 0b001){
  3201   0019C8  A001               	btfss	set_led_color@color^0,0,c
  3202   0019CA  EFE9  F00C         	goto	u1221
  3203   0019CE  EFEB  F00C         	goto	u1220
  3204   0019D2                     u1221:
  3205   0019D2  EFEE  F00C         	goto	l116
  3206   0019D6                     u1220:
  3207   0019D6                     
  3208                           ;color.c: 169:         LATFbits.LATF7 = 1;
  3209   0019D6  8E7E               	bsf	126,7,c	;volatile
  3210                           
  3211                           ;color.c: 170:     }else{
  3212   0019D8  EFEF  F00C         	goto	l118
  3213   0019DC                     l116:
  3214                           
  3215                           ;color.c: 171:         LATFbits.LATF7 = 0;
  3216   0019DC  9E7E               	bcf	126,7,c	;volatile
  3217   0019DE                     l118:
  3218   0019DE  0012               	return		;funcret
  3219   0019E0                     __end_of_set_led_color:
  3220                           	callstack 0
  3221                           
  3222 ;; *************** function _color_read_Red *****************
  3223 ;; Defined at:
  3224 ;;		line 90 in file "color.c"
  3225 ;; Parameters:    Size  Location     Type
  3226 ;;		None
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  tmp             2    9[COMRAM] unsigned int 
  3229 ;; Return value:  Size  Location     Type
  3230 ;;                  2    4[COMRAM] unsigned int 
  3231 ;; Registers used:
  3232 ;;		wreg, status,2, status,0, cstack
  3233 ;; Tracked objects:
  3234 ;;		On entry : 0/0
  3235 ;;		On exit  : 0/0
  3236 ;;		Unchanged: 0/0
  3237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3238 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3239 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3240 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3241 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3242 ;;Total ram usage:        7 bytes
  3243 ;; Hardware stack levels used: 1
  3244 ;; Hardware stack levels required when called: 4
  3245 ;; This function calls:
  3246 ;;		_I2C_2_Master_Read
  3247 ;;		_I2C_2_Master_RepStart
  3248 ;;		_I2C_2_Master_Start
  3249 ;;		_I2C_2_Master_Stop
  3250 ;;		_I2C_2_Master_Write
  3251 ;; This function is called by:
  3252 ;;		_get_color_code
  3253 ;;		_calibrate_black
  3254 ;;		_calibrate_white
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text15
  3259   001814                     __ptext15:
  3260                           	callstack 0
  3261   001814                     _color_read_Red:
  3262                           	callstack 25
  3263   001814                     
  3264                           ;color.c: 92:  unsigned int tmp;;color.c: 93:  I2C_2_Master_Start();
  3265   001814  ECA4  F00D         	call	_I2C_2_Master_Start	;wreg free
  3266                           
  3267                           ;color.c: 94:  I2C_2_Master_Write(0x52 | 0x00);
  3268   001818  0E52               	movlw	82
  3269   00181A  EC93  F00D         	call	_I2C_2_Master_Write
  3270                           
  3271                           ;color.c: 95:  I2C_2_Master_Write(0xA0 | 0x16);
  3272   00181E  0EB6               	movlw	182
  3273   001820  EC93  F00D         	call	_I2C_2_Master_Write
  3274                           
  3275                           ;color.c: 96:  I2C_2_Master_RepStart();
  3276   001824  ECA9  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3277                           
  3278                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x01);
  3279   001828  0E53               	movlw	83
  3280   00182A  EC93  F00D         	call	_I2C_2_Master_Write
  3281                           
  3282                           ;color.c: 98:  tmp=I2C_2_Master_Read(1);
  3283   00182E  0E01               	movlw	1
  3284   001830  ECF0  F00C         	call	_I2C_2_Master_Read
  3285   001834  6E07               	movwf	??_color_read_Red^0,c
  3286   001836  5007               	movf	??_color_read_Red^0,w,c
  3287   001838  6E0A               	movwf	color_read_Red@tmp^0,c
  3288   00183A  6A0B               	clrf	(color_read_Red@tmp+1)^0,c
  3289                           
  3290                           ;color.c: 99:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3291   00183C  0E00               	movlw	0
  3292   00183E  ECF0  F00C         	call	_I2C_2_Master_Read
  3293   001842  6E07               	movwf	??_color_read_Red^0,c
  3294   001844  5007               	movf	??_color_read_Red^0,w,c
  3295   001846  6E09               	movwf	(??_color_read_Red+2)^0,c
  3296   001848  6A08               	clrf	(??_color_read_Red+1)^0,c
  3297   00184A  500A               	movf	color_read_Red@tmp^0,w,c
  3298   00184C  1008               	iorwf	(??_color_read_Red+1)^0,w,c
  3299   00184E  6E0A               	movwf	color_read_Red@tmp^0,c
  3300   001850  500B               	movf	(color_read_Red@tmp+1)^0,w,c
  3301   001852  1009               	iorwf	(??_color_read_Red+2)^0,w,c
  3302   001854  6E0B               	movwf	(color_read_Red@tmp+1)^0,c
  3303                           
  3304                           ;color.c: 100:  I2C_2_Master_Stop();
  3305   001856  EC9F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3306   00185A                     
  3307                           ;color.c: 101:  return tmp;
  3308   00185A  C00A  F005         	movff	color_read_Red@tmp,?_color_read_Red
  3309   00185E  C00B  F006         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3310   001862  0012               	return		;funcret
  3311   001864                     __end_of_color_read_Red:
  3312                           	callstack 0
  3313                           
  3314 ;; *************** function _color_read_Green *****************
  3315 ;; Defined at:
  3316 ;;		line 118 in file "color.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;		None
  3319 ;; Auto vars:     Size  Location     Type
  3320 ;;  tmp             2    9[COMRAM] unsigned int 
  3321 ;; Return value:  Size  Location     Type
  3322 ;;                  2    4[COMRAM] unsigned int 
  3323 ;; Registers used:
  3324 ;;		wreg, status,2, status,0, cstack
  3325 ;; Tracked objects:
  3326 ;;		On entry : 0/0
  3327 ;;		On exit  : 0/0
  3328 ;;		Unchanged: 0/0
  3329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3330 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3331 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3332 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3333 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3334 ;;Total ram usage:        7 bytes
  3335 ;; Hardware stack levels used: 1
  3336 ;; Hardware stack levels required when called: 4
  3337 ;; This function calls:
  3338 ;;		_I2C_2_Master_Read
  3339 ;;		_I2C_2_Master_RepStart
  3340 ;;		_I2C_2_Master_Start
  3341 ;;		_I2C_2_Master_Stop
  3342 ;;		_I2C_2_Master_Write
  3343 ;; This function is called by:
  3344 ;;		_get_color_code
  3345 ;;		_calibrate_black
  3346 ;;		_calibrate_white
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text16
  3351   001864                     __ptext16:
  3352                           	callstack 0
  3353   001864                     _color_read_Green:
  3354                           	callstack 25
  3355   001864                     
  3356                           ;color.c: 120:  unsigned int tmp;;color.c: 121:  I2C_2_Master_Start();
  3357   001864  ECA4  F00D         	call	_I2C_2_Master_Start	;wreg free
  3358                           
  3359                           ;color.c: 122:  I2C_2_Master_Write(0x52 | 0x00);
  3360   001868  0E52               	movlw	82
  3361   00186A  EC93  F00D         	call	_I2C_2_Master_Write
  3362                           
  3363                           ;color.c: 123:  I2C_2_Master_Write(0xA0 | 0x18);
  3364   00186E  0EB8               	movlw	184
  3365   001870  EC93  F00D         	call	_I2C_2_Master_Write
  3366                           
  3367                           ;color.c: 124:  I2C_2_Master_RepStart();
  3368   001874  ECA9  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3369                           
  3370                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x01);
  3371   001878  0E53               	movlw	83
  3372   00187A  EC93  F00D         	call	_I2C_2_Master_Write
  3373                           
  3374                           ;color.c: 126:  tmp=I2C_2_Master_Read(1);
  3375   00187E  0E01               	movlw	1
  3376   001880  ECF0  F00C         	call	_I2C_2_Master_Read
  3377   001884  6E07               	movwf	??_color_read_Green^0,c
  3378   001886  5007               	movf	??_color_read_Green^0,w,c
  3379   001888  6E0A               	movwf	color_read_Green@tmp^0,c
  3380   00188A  6A0B               	clrf	(color_read_Green@tmp+1)^0,c
  3381                           
  3382                           ;color.c: 127:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3383   00188C  0E00               	movlw	0
  3384   00188E  ECF0  F00C         	call	_I2C_2_Master_Read
  3385   001892  6E07               	movwf	??_color_read_Green^0,c
  3386   001894  5007               	movf	??_color_read_Green^0,w,c
  3387   001896  6E09               	movwf	(??_color_read_Green+2)^0,c
  3388   001898  6A08               	clrf	(??_color_read_Green+1)^0,c
  3389   00189A  500A               	movf	color_read_Green@tmp^0,w,c
  3390   00189C  1008               	iorwf	(??_color_read_Green+1)^0,w,c
  3391   00189E  6E0A               	movwf	color_read_Green@tmp^0,c
  3392   0018A0  500B               	movf	(color_read_Green@tmp+1)^0,w,c
  3393   0018A2  1009               	iorwf	(??_color_read_Green+2)^0,w,c
  3394   0018A4  6E0B               	movwf	(color_read_Green@tmp+1)^0,c
  3395                           
  3396                           ;color.c: 128:  I2C_2_Master_Stop();
  3397   0018A6  EC9F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3398   0018AA                     
  3399                           ;color.c: 129:  return tmp;
  3400   0018AA  C00A  F005         	movff	color_read_Green@tmp,?_color_read_Green
  3401   0018AE  C00B  F006         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3402   0018B2  0012               	return		;funcret
  3403   0018B4                     __end_of_color_read_Green:
  3404                           	callstack 0
  3405                           
  3406 ;; *************** function _color_read_Clear *****************
  3407 ;; Defined at:
  3408 ;;		line 132 in file "color.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;		None
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;  tmp             2    9[COMRAM] unsigned int 
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  2    4[COMRAM] unsigned int 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3422 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3423 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3424 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3425 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3426 ;;Total ram usage:        7 bytes
  3427 ;; Hardware stack levels used: 1
  3428 ;; Hardware stack levels required when called: 4
  3429 ;; This function calls:
  3430 ;;		_I2C_2_Master_Read
  3431 ;;		_I2C_2_Master_RepStart
  3432 ;;		_I2C_2_Master_Start
  3433 ;;		_I2C_2_Master_Stop
  3434 ;;		_I2C_2_Master_Write
  3435 ;; This function is called by:
  3436 ;;		_calibrate_black
  3437 ;;		_get_wall_presence
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text17
  3442   0018B4                     __ptext17:
  3443                           	callstack 0
  3444   0018B4                     _color_read_Clear:
  3445                           	callstack 25
  3446   0018B4                     
  3447                           ;color.c: 134:  unsigned int tmp;;color.c: 135:  I2C_2_Master_Start();
  3448   0018B4  ECA4  F00D         	call	_I2C_2_Master_Start	;wreg free
  3449                           
  3450                           ;color.c: 136:  I2C_2_Master_Write(0x52 | 0x00);
  3451   0018B8  0E52               	movlw	82
  3452   0018BA  EC93  F00D         	call	_I2C_2_Master_Write
  3453                           
  3454                           ;color.c: 137:  I2C_2_Master_Write(0xA0 | 0x14);
  3455   0018BE  0EB4               	movlw	180
  3456   0018C0  EC93  F00D         	call	_I2C_2_Master_Write
  3457                           
  3458                           ;color.c: 138:  I2C_2_Master_RepStart();
  3459   0018C4  ECA9  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3460                           
  3461                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x01);
  3462   0018C8  0E53               	movlw	83
  3463   0018CA  EC93  F00D         	call	_I2C_2_Master_Write
  3464                           
  3465                           ;color.c: 140:  tmp=I2C_2_Master_Read(1);
  3466   0018CE  0E01               	movlw	1
  3467   0018D0  ECF0  F00C         	call	_I2C_2_Master_Read
  3468   0018D4  6E07               	movwf	??_color_read_Clear^0,c
  3469   0018D6  5007               	movf	??_color_read_Clear^0,w,c
  3470   0018D8  6E0A               	movwf	color_read_Clear@tmp^0,c
  3471   0018DA  6A0B               	clrf	(color_read_Clear@tmp+1)^0,c
  3472                           
  3473                           ;color.c: 141:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3474   0018DC  0E00               	movlw	0
  3475   0018DE  ECF0  F00C         	call	_I2C_2_Master_Read
  3476   0018E2  6E07               	movwf	??_color_read_Clear^0,c
  3477   0018E4  5007               	movf	??_color_read_Clear^0,w,c
  3478   0018E6  6E09               	movwf	(??_color_read_Clear+2)^0,c
  3479   0018E8  6A08               	clrf	(??_color_read_Clear+1)^0,c
  3480   0018EA  500A               	movf	color_read_Clear@tmp^0,w,c
  3481   0018EC  1008               	iorwf	(??_color_read_Clear+1)^0,w,c
  3482   0018EE  6E0A               	movwf	color_read_Clear@tmp^0,c
  3483   0018F0  500B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3484   0018F2  1009               	iorwf	(??_color_read_Clear+2)^0,w,c
  3485   0018F4  6E0B               	movwf	(color_read_Clear@tmp+1)^0,c
  3486                           
  3487                           ;color.c: 142:  I2C_2_Master_Stop();
  3488   0018F6  EC9F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3489   0018FA                     
  3490                           ;color.c: 143:  return tmp;
  3491   0018FA  C00A  F005         	movff	color_read_Clear@tmp,?_color_read_Clear
  3492   0018FE  C00B  F006         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3493   001902  0012               	return		;funcret
  3494   001904                     __end_of_color_read_Clear:
  3495                           	callstack 0
  3496                           
  3497 ;; *************** function _color_read_Blue *****************
  3498 ;; Defined at:
  3499 ;;		line 104 in file "color.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  tmp             2    9[COMRAM] unsigned int 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  2    4[COMRAM] unsigned int 
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3513 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3514 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3515 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3516 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3517 ;;Total ram usage:        7 bytes
  3518 ;; Hardware stack levels used: 1
  3519 ;; Hardware stack levels required when called: 4
  3520 ;; This function calls:
  3521 ;;		_I2C_2_Master_Read
  3522 ;;		_I2C_2_Master_RepStart
  3523 ;;		_I2C_2_Master_Start
  3524 ;;		_I2C_2_Master_Stop
  3525 ;;		_I2C_2_Master_Write
  3526 ;; This function is called by:
  3527 ;;		_get_color_code
  3528 ;;		_calibrate_black
  3529 ;;		_calibrate_white
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text18
  3534   001904                     __ptext18:
  3535                           	callstack 0
  3536   001904                     _color_read_Blue:
  3537                           	callstack 25
  3538   001904                     
  3539                           ;color.c: 106:  unsigned int tmp;;color.c: 107:  I2C_2_Master_Start();
  3540   001904  ECA4  F00D         	call	_I2C_2_Master_Start	;wreg free
  3541                           
  3542                           ;color.c: 108:  I2C_2_Master_Write(0x52 | 0x00);
  3543   001908  0E52               	movlw	82
  3544   00190A  EC93  F00D         	call	_I2C_2_Master_Write
  3545                           
  3546                           ;color.c: 109:  I2C_2_Master_Write(0xA0 | 0x1A);
  3547   00190E  0EBA               	movlw	186
  3548   001910  EC93  F00D         	call	_I2C_2_Master_Write
  3549                           
  3550                           ;color.c: 110:  I2C_2_Master_RepStart();
  3551   001914  ECA9  F00D         	call	_I2C_2_Master_RepStart	;wreg free
  3552                           
  3553                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x01);
  3554   001918  0E53               	movlw	83
  3555   00191A  EC93  F00D         	call	_I2C_2_Master_Write
  3556                           
  3557                           ;color.c: 112:  tmp=I2C_2_Master_Read(1);
  3558   00191E  0E01               	movlw	1
  3559   001920  ECF0  F00C         	call	_I2C_2_Master_Read
  3560   001924  6E07               	movwf	??_color_read_Blue^0,c
  3561   001926  5007               	movf	??_color_read_Blue^0,w,c
  3562   001928  6E0A               	movwf	color_read_Blue@tmp^0,c
  3563   00192A  6A0B               	clrf	(color_read_Blue@tmp+1)^0,c
  3564                           
  3565                           ;color.c: 113:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3566   00192C  0E00               	movlw	0
  3567   00192E  ECF0  F00C         	call	_I2C_2_Master_Read
  3568   001932  6E07               	movwf	??_color_read_Blue^0,c
  3569   001934  5007               	movf	??_color_read_Blue^0,w,c
  3570   001936  6E09               	movwf	(??_color_read_Blue+2)^0,c
  3571   001938  6A08               	clrf	(??_color_read_Blue+1)^0,c
  3572   00193A  500A               	movf	color_read_Blue@tmp^0,w,c
  3573   00193C  1008               	iorwf	(??_color_read_Blue+1)^0,w,c
  3574   00193E  6E0A               	movwf	color_read_Blue@tmp^0,c
  3575   001940  500B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3576   001942  1009               	iorwf	(??_color_read_Blue+2)^0,w,c
  3577   001944  6E0B               	movwf	(color_read_Blue@tmp+1)^0,c
  3578                           
  3579                           ;color.c: 114:  I2C_2_Master_Stop();
  3580   001946  EC9F  F00D         	call	_I2C_2_Master_Stop	;wreg free
  3581   00194A                     
  3582                           ;color.c: 115:  return tmp;
  3583   00194A  C00A  F005         	movff	color_read_Blue@tmp,?_color_read_Blue
  3584   00194E  C00B  F006         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3585   001952  0012               	return		;funcret
  3586   001954                     __end_of_color_read_Blue:
  3587                           	callstack 0
  3588                           
  3589 ;; *************** function _I2C_2_Master_Write *****************
  3590 ;; Defined at:
  3591 ;;		line 45 in file "i2c.c"
  3592 ;; Parameters:    Size  Location     Type
  3593 ;;  data_byte       1    wreg     unsigned char 
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;  data_byte       1    1[COMRAM] unsigned char 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, status,2, status,0, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3609 ;;Total ram usage:        1 bytes
  3610 ;; Hardware stack levels used: 1
  3611 ;; Hardware stack levels required when called: 3
  3612 ;; This function calls:
  3613 ;;		_I2C_2_Master_Idle
  3614 ;; This function is called by:
  3615 ;;		_color_writetoaddr
  3616 ;;		_color_read_Red
  3617 ;;		_color_read_Blue
  3618 ;;		_color_read_Green
  3619 ;;		_color_read_Clear
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text19
  3624   001B26                     __ptext19:
  3625                           	callstack 0
  3626   001B26                     _I2C_2_Master_Write:
  3627                           	callstack 25
  3628                           
  3629                           ;incstack = 0
  3630                           ;I2C_2_Master_Write@data_byte stored from wreg
  3631   001B26  6E02               	movwf	I2C_2_Master_Write@data_byte^0,c
  3632   001B28                     
  3633                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3634   001B28  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3635   001B2C                     
  3636                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3637   001B2C  C002  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  3638   001B30  0012               	return		;funcret
  3639   001B32                     __end_of_I2C_2_Master_Write:
  3640                           	callstack 0
  3641                           
  3642 ;; *************** function _I2C_2_Master_Stop *****************
  3643 ;; Defined at:
  3644 ;;		line 39 in file "i2c.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;		None
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;		None
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      void 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0, cstack
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3662 ;;Total ram usage:        0 bytes
  3663 ;; Hardware stack levels used: 1
  3664 ;; Hardware stack levels required when called: 3
  3665 ;; This function calls:
  3666 ;;		_I2C_2_Master_Idle
  3667 ;; This function is called by:
  3668 ;;		_color_writetoaddr
  3669 ;;		_color_read_Red
  3670 ;;		_color_read_Blue
  3671 ;;		_color_read_Green
  3672 ;;		_color_read_Clear
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text20
  3677   001B3E                     __ptext20:
  3678                           	callstack 0
  3679   001B3E                     _I2C_2_Master_Stop:
  3680                           	callstack 25
  3681   001B3E                     
  3682                           ;i2c.c: 41:   I2C_2_Master_Idle();
  3683   001B3E  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3684   001B42                     
  3685                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  3686   001B42  010E               	movlb	14	; () banked
  3687   001B44  85DA               	bsf	218,2,b	;volatile
  3688   001B46                     
  3689                           ; BSR set to: 14
  3690   001B46  0012               	return		;funcret
  3691   001B48                     __end_of_I2C_2_Master_Stop:
  3692                           	callstack 0
  3693                           
  3694 ;; *************** function _I2C_2_Master_Start *****************
  3695 ;; Defined at:
  3696 ;;		line 27 in file "i2c.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;		None
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3714 ;;Total ram usage:        0 bytes
  3715 ;; Hardware stack levels used: 1
  3716 ;; Hardware stack levels required when called: 3
  3717 ;; This function calls:
  3718 ;;		_I2C_2_Master_Idle
  3719 ;; This function is called by:
  3720 ;;		_color_writetoaddr
  3721 ;;		_color_read_Red
  3722 ;;		_color_read_Blue
  3723 ;;		_color_read_Green
  3724 ;;		_color_read_Clear
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text21
  3729   001B48                     __ptext21:
  3730                           	callstack 0
  3731   001B48                     _I2C_2_Master_Start:
  3732                           	callstack 25
  3733   001B48                     
  3734                           ;i2c.c: 29:   I2C_2_Master_Idle();
  3735   001B48  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3736   001B4C                     
  3737                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  3738   001B4C  010E               	movlb	14	; () banked
  3739   001B4E  81DA               	bsf	218,0,b	;volatile
  3740   001B50                     
  3741                           ; BSR set to: 14
  3742   001B50  0012               	return		;funcret
  3743   001B52                     __end_of_I2C_2_Master_Start:
  3744                           	callstack 0
  3745                           
  3746 ;; *************** function _I2C_2_Master_RepStart *****************
  3747 ;; Defined at:
  3748 ;;		line 33 in file "i2c.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3766 ;;Total ram usage:        0 bytes
  3767 ;; Hardware stack levels used: 1
  3768 ;; Hardware stack levels required when called: 3
  3769 ;; This function calls:
  3770 ;;		_I2C_2_Master_Idle
  3771 ;; This function is called by:
  3772 ;;		_color_read_Red
  3773 ;;		_color_read_Blue
  3774 ;;		_color_read_Green
  3775 ;;		_color_read_Clear
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text22
  3780   001B52                     __ptext22:
  3781                           	callstack 0
  3782   001B52                     _I2C_2_Master_RepStart:
  3783                           	callstack 25
  3784   001B52                     
  3785                           ;i2c.c: 35:   I2C_2_Master_Idle();
  3786   001B52  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3787   001B56                     
  3788                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  3789   001B56  010E               	movlb	14	; () banked
  3790   001B58  83DA               	bsf	218,1,b	;volatile
  3791   001B5A                     
  3792                           ; BSR set to: 14
  3793   001B5A  0012               	return		;funcret
  3794   001B5C                     __end_of_I2C_2_Master_RepStart:
  3795                           	callstack 0
  3796                           
  3797 ;; *************** function _I2C_2_Master_Read *****************
  3798 ;; Defined at:
  3799 ;;		line 51 in file "i2c.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  ack             1    wreg     unsigned char 
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;  ack             1    2[COMRAM] unsigned char 
  3804 ;;  tmp             1    3[COMRAM] unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  1    wreg      unsigned char 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0, cstack
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3815 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3816 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3817 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3818 ;;Total ram usage:        3 bytes
  3819 ;; Hardware stack levels used: 1
  3820 ;; Hardware stack levels required when called: 3
  3821 ;; This function calls:
  3822 ;;		_I2C_2_Master_Idle
  3823 ;; This function is called by:
  3824 ;;		_color_read_Red
  3825 ;;		_color_read_Blue
  3826 ;;		_color_read_Green
  3827 ;;		_color_read_Clear
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text23
  3832   0019E0                     __ptext23:
  3833                           	callstack 0
  3834   0019E0                     _I2C_2_Master_Read:
  3835                           	callstack 25
  3836                           
  3837                           ; BSR set to: 14
  3838                           ;incstack = 0
  3839                           ;I2C_2_Master_Read@ack stored from wreg
  3840   0019E0  6E03               	movwf	I2C_2_Master_Read@ack^0,c
  3841   0019E2                     
  3842                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  3843   0019E2  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3844   0019E6                     
  3845                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  3846   0019E6  010E               	movlb	14	; () banked
  3847   0019E8  87DA               	bsf	218,3,b	;volatile
  3848                           
  3849                           ;i2c.c: 56:   I2C_2_Master_Idle();
  3850   0019EA  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3851   0019EE                     
  3852                           ;i2c.c: 57:   tmp = SSP2BUF;
  3853   0019EE  CED5 F004          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  3854                           
  3855                           ;i2c.c: 58:   I2C_2_Master_Idle();
  3856   0019F2  EC3F  F00D         	call	_I2C_2_Master_Idle	;wreg free
  3857   0019F6                     
  3858                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  3859   0019F6  5003               	movf	I2C_2_Master_Read@ack^0,w,c
  3860   0019F8  B4D8               	btfsc	status,2,c
  3861   0019FA  EF01  F00D         	goto	u1151
  3862   0019FE  EF05  F00D         	goto	u1150
  3863   001A02                     u1151:
  3864   001A02  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3865   001A04  2A02               	incf	??_I2C_2_Master_Read^0,f,c
  3866   001A06  EF06  F00D         	goto	u1168
  3867   001A0A                     u1150:
  3868   001A0A  6A02               	clrf	??_I2C_2_Master_Read^0,c
  3869   001A0C                     u1168:
  3870   001A0C  3A02               	swapf	??_I2C_2_Master_Read^0,f,c
  3871   001A0E  4602               	rlncf	??_I2C_2_Master_Read^0,f,c
  3872   001A10  010E               	movlb	14	; () banked
  3873   001A12  51DA               	movf	218,w,b	;volatile
  3874   001A14  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3875   001A16  0BDF               	andlw	-33
  3876   001A18  1802               	xorwf	??_I2C_2_Master_Read^0,w,c
  3877   001A1A  6FDA               	movwf	218,b	;volatile
  3878   001A1C                     
  3879                           ; BSR set to: 14
  3880                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  3881   001A1C  89DA               	bsf	218,4,b	;volatile
  3882   001A1E                     
  3883                           ; BSR set to: 14
  3884                           ;i2c.c: 61:   return tmp;
  3885   001A1E  5004               	movf	I2C_2_Master_Read@tmp^0,w,c
  3886   001A20                     
  3887                           ; BSR set to: 14
  3888   001A20  0012               	return		;funcret
  3889   001A22                     __end_of_I2C_2_Master_Read:
  3890                           	callstack 0
  3891                           
  3892 ;; *************** function _I2C_2_Master_Idle *****************
  3893 ;; Defined at:
  3894 ;;		line 22 in file "i2c.c"
  3895 ;; Parameters:    Size  Location     Type
  3896 ;;		None
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;		None
  3899 ;; Return value:  Size  Location     Type
  3900 ;;                  1    wreg      void 
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0
  3903 ;; Tracked objects:
  3904 ;;		On entry : 0/0
  3905 ;;		On exit  : 0/0
  3906 ;;		Unchanged: 0/0
  3907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3911 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3912 ;;Total ram usage:        1 bytes
  3913 ;; Hardware stack levels used: 1
  3914 ;; Hardware stack levels required when called: 2
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_I2C_2_Master_Start
  3919 ;;		_I2C_2_Master_RepStart
  3920 ;;		_I2C_2_Master_Stop
  3921 ;;		_I2C_2_Master_Write
  3922 ;;		_I2C_2_Master_Read
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text24
  3927   001A7E                     __ptext24:
  3928                           	callstack 0
  3929   001A7E                     _I2C_2_Master_Idle:
  3930                           	callstack 25
  3931   001A7E                     l323:
  3932   001A7E  010E               	movlb	14	; () banked
  3933   001A80  B5D8               	btfsc	216,2,b	;volatile
  3934   001A82  EF45  F00D         	goto	u1131
  3935   001A86  EF47  F00D         	goto	u1130
  3936   001A8A                     u1131:
  3937   001A8A  EF3F  F00D         	goto	l323
  3938   001A8E                     u1130:
  3939   001A8E                     
  3940                           ; BSR set to: 14
  3941   001A8E  CEDA F001          	movff	3802,??_I2C_2_Master_Idle	;volatile
  3942   001A92  0E1F               	movlw	31
  3943   001A94  1601               	andwf	??_I2C_2_Master_Idle^0,f,c
  3944   001A96  A4D8               	btfss	status,2,c
  3945   001A98  EF50  F00D         	goto	u1141
  3946   001A9C  EF52  F00D         	goto	u1140
  3947   001AA0                     u1141:
  3948   001AA0  EF3F  F00D         	goto	l323
  3949   001AA4                     u1140:
  3950   001AA4                     
  3951                           ; BSR set to: 14
  3952   001AA4  0012               	return		;funcret
  3953   001AA6                     __end_of_I2C_2_Master_Idle:
  3954                           	callstack 0
  3955                           
  3956 ;; *************** function _I2C_2_Master_Init *****************
  3957 ;; Defined at:
  3958 ;;		line 4 in file "i2c.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      void 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3976 ;;Total ram usage:        0 bytes
  3977 ;; Hardware stack levels used: 1
  3978 ;; Hardware stack levels required when called: 2
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_color_click_init
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text25
  3987   001A54                     __ptext25:
  3988                           	callstack 0
  3989   001A54                     _I2C_2_Master_Init:
  3990                           	callstack 27
  3991   001A54                     
  3992                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  3993   001A54  010E               	movlb	14	; () banked
  3994   001A56  51D9               	movf	217,w,b	;volatile
  3995   001A58  0BF0               	andlw	-16
  3996   001A5A  0908               	iorlw	8
  3997   001A5C  6FD9               	movwf	217,b	;volatile
  3998   001A5E                     
  3999                           ; BSR set to: 14
  4000                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4001   001A5E  8BD9               	bsf	217,5,b	;volatile
  4002                           
  4003                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4004   001A60  0E9F               	movlw	159
  4005   001A62  6FD6               	movwf	214,b	;volatile
  4006   001A64                     
  4007                           ; BSR set to: 14
  4008                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4009   001A64  8A84               	bsf	132,5,c	;volatile
  4010   001A66                     
  4011                           ; BSR set to: 14
  4012                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4013   001A66  8C84               	bsf	132,6,c	;volatile
  4014   001A68                     
  4015                           ; BSR set to: 14
  4016                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4017   001A68  9BA7               	bcf	167,5,b	;volatile
  4018   001A6A                     
  4019                           ; BSR set to: 14
  4020                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4021   001A6A  9DA7               	bcf	167,6,b	;volatile
  4022                           
  4023                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4024   001A6C  0E1D               	movlw	29
  4025   001A6E  6F1D               	movwf	29,b	;volatile
  4026                           
  4027                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4028   001A70  0E1E               	movlw	30
  4029   001A72  6F1C               	movwf	28,b	;volatile
  4030                           
  4031                           ;i2c.c: 18:   RD5PPS=0x1C;
  4032   001A74  0E1C               	movlw	28
  4033   001A76  6F6F               	movwf	111,b	;volatile
  4034                           
  4035                           ;i2c.c: 19:   RD6PPS=0x1B;
  4036   001A78  0E1B               	movlw	27
  4037   001A7A  6F70               	movwf	112,b	;volatile
  4038   001A7C                     
  4039                           ; BSR set to: 14
  4040   001A7C  0012               	return		;funcret
  4041   001A7E                     __end_of_I2C_2_Master_Init:
  4042                           	callstack 0
  4043                           
  4044 ;; *************** function _add_seconds_to_list *****************
  4045 ;; Defined at:
  4046 ;;		line 424 in file "dc_motor.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4063 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4064 ;;Total ram usage:        2 bytes
  4065 ;; Hardware stack levels used: 1
  4066 ;; Hardware stack levels required when called: 2
  4067 ;; This function calls:
  4068 ;;		Nothing
  4069 ;; This function is called by:
  4070 ;;		_main
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text26
  4075   001954                     __ptext26:
  4076                           	callstack 0
  4077   001954                     _add_seconds_to_list:
  4078                           	callstack 28
  4079   001954                     
  4080                           ;dc_motor.c: 426:     if (seconds > 20)
  4081   001954  BE5E               	btfsc	(_seconds+1)^0,7,c
  4082   001956  EFB6  F00C         	goto	u1841
  4083   00195A  505E               	movf	(_seconds+1)^0,w,c
  4084   00195C  E109               	bnz	u1840
  4085   00195E  0E15               	movlw	21
  4086   001960  5C5D               	subwf	_seconds^0,w,c
  4087   001962  A0D8               	btfss	status,0,c
  4088   001964  EFB6  F00C         	goto	u1841
  4089   001968  EFB8  F00C         	goto	u1840
  4090   00196C                     u1841:
  4091   00196C  EFCD  F00C         	goto	l293
  4092   001970                     u1840:
  4093   001970                     
  4094                           ;dc_motor.c: 427:     {;dc_motor.c: 428:         movement_list[index] = seconds - 10;
  4095   001970  0EF6               	movlw	246
  4096   001972  245D               	addwf	_seconds^0,w,c
  4097   001974  6E01               	movwf	??_add_seconds_to_list^0,c
  4098   001976  0EFF               	movlw	255
  4099   001978  205E               	addwfc	(_seconds+1)^0,w,c
  4100   00197A  6E02               	movwf	(??_add_seconds_to_list+1)^0,c
  4101   00197C  90D8               	bcf	status,0,c
  4102   00197E  345B               	rlcf	_index^0,w,c
  4103   001980  6ED9               	movwf	fsr2l,c
  4104   001982  345C               	rlcf	(_index+1)^0,w,c
  4105   001984  6EDA               	movwf	fsr2h,c
  4106   001986  0E6C               	movlw	low _movement_list
  4107   001988  26D9               	addwf	fsr2l,f,c
  4108   00198A  0E01               	movlw	high _movement_list
  4109   00198C  22DA               	addwfc	fsr2h,f,c
  4110   00198E  C001  FFDE         	movff	??_add_seconds_to_list,postinc2
  4111   001992  C002  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4112   001996                     
  4113                           ;dc_motor.c: 429:         index++;
  4114   001996  4A5B               	infsnz	_index^0,f,c
  4115   001998  2A5C               	incf	(_index+1)^0,f,c
  4116   00199A                     l293:
  4117   00199A  0012               	return		;funcret
  4118   00199C                     __end_of_add_seconds_to_list:
  4119                           	callstack 0
  4120                           
  4121 ;; *************** function _Timer0_init *****************
  4122 ;; Defined at:
  4123 ;;		line 7 in file "timers.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;		None
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;		None
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  1    wreg      void 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4141 ;;Total ram usage:        0 bytes
  4142 ;; Hardware stack levels used: 1
  4143 ;; Hardware stack levels required when called: 2
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_main
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text27
  4152   001AEC                     __ptext27:
  4153                           	callstack 0
  4154   001AEC                     _Timer0_init:
  4155                           	callstack 28
  4156   001AEC                     
  4157                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4158   001AEC  50D6               	movf	214,w,c	;volatile
  4159   001AEE  0B1F               	andlw	-225
  4160   001AF0  0940               	iorlw	64
  4161   001AF2  6ED6               	movwf	214,c	;volatile
  4162   001AF4                     
  4163                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4164   001AF4  88D6               	bsf	214,4,c	;volatile
  4165                           
  4166                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4167   001AF6  50D6               	movf	214,w,c	;volatile
  4168   001AF8  0BF0               	andlw	-16
  4169   001AFA  0908               	iorlw	8
  4170   001AFC  6ED6               	movwf	214,c	;volatile
  4171                           
  4172                           ;timers.c: 13:     TMR0H=0b11100111;
  4173   001AFE  0EE7               	movlw	231
  4174   001B00  6ED4               	movwf	212,c	;volatile
  4175                           
  4176                           ;timers.c: 14:     TMR0L=0b10010101;
  4177   001B02  0E95               	movlw	149
  4178   001B04  6ED3               	movwf	211,c	;volatile
  4179   001B06                     
  4180                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4181   001B06  88D5               	bsf	213,4,c	;volatile
  4182   001B08                     
  4183                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4184   001B08  8ED5               	bsf	213,7,c	;volatile
  4185   001B0A  0012               	return		;funcret
  4186   001B0C                     __end_of_Timer0_init:
  4187                           	callstack 0
  4188                           
  4189 ;; *************** function _RobotMovement *****************
  4190 ;; Defined at:
  4191 ;;		line 315 in file "dc_motor.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  color           2   27[COMRAM] unsigned int 
  4194 ;;  motorL          2   29[COMRAM] PTR struct DC_motor
  4195 ;;		 -> main@motorR(9), main@motorL(9), 
  4196 ;;  motorR          2   31[COMRAM] PTR struct DC_motor
  4197 ;;		 -> main@motorR(9), main@motorL(9), 
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  i               2   37[COMRAM] int 
  4200 ;;  i               2   35[COMRAM] int 
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 0/0
  4207 ;;		On exit  : 0/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4210 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4211 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4213 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4214 ;;Total ram usage:       12 bytes
  4215 ;; Hardware stack levels used: 1
  4216 ;; Hardware stack levels required when called: 5
  4217 ;; This function calls:
  4218 ;;		_turnLeft
  4219 ;;		_turnLeftLong
  4220 ;;		_turnRight
  4221 ;;		_turnRightLong
  4222 ;; This function is called by:
  4223 ;;		_main
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text28
  4228   000032                     __ptext28:
  4229                           	callstack 0
  4230   000032                     _RobotMovement:
  4231                           	callstack 25
  4232   000032                     
  4233                           ;dc_motor.c: 315: void RobotMovement(unsigned int color, struct DC_motor *motorL, struct
      +                           DC_motor *motorR);dc_motor.c: 316: {;dc_motor.c: 318:     if(color == 0){
  4234   000032  501C               	movf	RobotMovement@color^0,w,c
  4235   000034  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4236   000036  A4D8               	btfss	status,2,c
  4237   000038  EF20  F000         	goto	u1681
  4238   00003C  EF22  F000         	goto	u1680
  4239   000040                     u1681:
  4240   000040  EF3B  F000         	goto	l2700
  4241   000044                     u1680:
  4242   000044                     
  4243                           ;dc_motor.c: 319:         turnRight(&motorL, &motorR);
  4244   000044  0E1E               	movlw	low RobotMovement@motorL
  4245   000046  6E14               	movwf	turnRight@mL^0,c
  4246   000048  0E00               	movlw	high RobotMovement@motorL
  4247   00004A  6E15               	movwf	(turnRight@mL+1)^0,c
  4248   00004C  0E20               	movlw	low RobotMovement@motorR
  4249   00004E  6E16               	movwf	turnRight@mR^0,c
  4250   000050  0E00               	movlw	high RobotMovement@motorR
  4251   000052  6E17               	movwf	(turnRight@mR+1)^0,c
  4252   000054  ECAE  F006         	call	_turnRight	;wreg free
  4253   000058                     
  4254                           ;dc_motor.c: 320:         movement_list[index] = -1;
  4255   000058  90D8               	bcf	status,0,c
  4256   00005A  345B               	rlcf	_index^0,w,c
  4257   00005C  6ED9               	movwf	fsr2l,c
  4258   00005E  345C               	rlcf	(_index+1)^0,w,c
  4259   000060  6EDA               	movwf	fsr2h,c
  4260   000062  0E6C               	movlw	low _movement_list
  4261   000064  26D9               	addwf	fsr2l,f,c
  4262   000066  0E01               	movlw	high _movement_list
  4263   000068  22DA               	addwfc	fsr2h,f,c
  4264   00006A  0EFF               	movlw	255
  4265   00006C  6EDE               	movwf	postinc2,c
  4266   00006E  0EFF               	movlw	255
  4267   000070  6EDD               	movwf	postdec2,c
  4268   000072                     
  4269                           ;dc_motor.c: 321:         index++;
  4270   000072  4A5B               	infsnz	_index^0,f,c
  4271   000074  2A5C               	incf	(_index+1)^0,f,c
  4272   000076                     l2700:
  4273                           
  4274                           ;dc_motor.c: 324:     if(color == 1){
  4275   000076  041C               	decf	RobotMovement@color^0,w,c
  4276   000078  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4277   00007A  A4D8               	btfss	status,2,c
  4278   00007C  EF42  F000         	goto	u1691
  4279   000080  EF44  F000         	goto	u1690
  4280   000084                     u1691:
  4281   000084  EF5D  F000         	goto	l2708
  4282   000088                     u1690:
  4283   000088                     
  4284                           ;dc_motor.c: 325:         turnLeft(&motorL, &motorR);
  4285   000088  0E1E               	movlw	low RobotMovement@motorL
  4286   00008A  6E14               	movwf	turnLeft@mL^0,c
  4287   00008C  0E00               	movlw	high RobotMovement@motorL
  4288   00008E  6E15               	movwf	(turnLeft@mL+1)^0,c
  4289   000090  0E20               	movlw	low RobotMovement@motorR
  4290   000092  6E16               	movwf	turnLeft@mR^0,c
  4291   000094  0E00               	movlw	high RobotMovement@motorR
  4292   000096  6E17               	movwf	(turnLeft@mR+1)^0,c
  4293   000098  ECD6  F007         	call	_turnLeft	;wreg free
  4294   00009C                     
  4295                           ;dc_motor.c: 326:         movement_list[index] = -2;
  4296   00009C  90D8               	bcf	status,0,c
  4297   00009E  345B               	rlcf	_index^0,w,c
  4298   0000A0  6ED9               	movwf	fsr2l,c
  4299   0000A2  345C               	rlcf	(_index+1)^0,w,c
  4300   0000A4  6EDA               	movwf	fsr2h,c
  4301   0000A6  0E6C               	movlw	low _movement_list
  4302   0000A8  26D9               	addwf	fsr2l,f,c
  4303   0000AA  0E01               	movlw	high _movement_list
  4304   0000AC  22DA               	addwfc	fsr2h,f,c
  4305   0000AE  0EFE               	movlw	254
  4306   0000B0  6EDE               	movwf	postinc2,c
  4307   0000B2  0EFF               	movlw	255
  4308   0000B4  6EDD               	movwf	postdec2,c
  4309   0000B6                     
  4310                           ;dc_motor.c: 327:         index++;
  4311   0000B6  4A5B               	infsnz	_index^0,f,c
  4312   0000B8  2A5C               	incf	(_index+1)^0,f,c
  4313   0000BA                     l2708:
  4314                           
  4315                           ;dc_motor.c: 330:     if(color == 2){
  4316   0000BA  0E02               	movlw	2
  4317   0000BC  181C               	xorwf	RobotMovement@color^0,w,c
  4318   0000BE  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4319   0000C0  A4D8               	btfss	status,2,c
  4320   0000C2  EF65  F000         	goto	u1701
  4321   0000C6  EF67  F000         	goto	u1700
  4322   0000CA                     u1701:
  4323   0000CA  EF94  F000         	goto	l2726
  4324   0000CE                     u1700:
  4325   0000CE                     
  4326                           ;dc_motor.c: 331:         int i;;dc_motor.c: 332:         for (i=0;i<2;i++){
  4327   0000CE  0E00               	movlw	0
  4328   0000D0  6E25               	movwf	(RobotMovement@i+1)^0,c
  4329   0000D2  0E00               	movlw	0
  4330   0000D4  6E24               	movwf	RobotMovement@i^0,c
  4331   0000D6                     l2716:
  4332                           
  4333                           ;dc_motor.c: 333:             turnRight(&motorL, &motorR);
  4334   0000D6  0E1E               	movlw	low RobotMovement@motorL
  4335   0000D8  6E14               	movwf	turnRight@mL^0,c
  4336   0000DA  0E00               	movlw	high RobotMovement@motorL
  4337   0000DC  6E15               	movwf	(turnRight@mL+1)^0,c
  4338   0000DE  0E20               	movlw	low RobotMovement@motorR
  4339   0000E0  6E16               	movwf	turnRight@mR^0,c
  4340   0000E2  0E00               	movlw	high RobotMovement@motorR
  4341   0000E4  6E17               	movwf	(turnRight@mR+1)^0,c
  4342   0000E6  ECAE  F006         	call	_turnRight	;wreg free
  4343   0000EA                     
  4344                           ;dc_motor.c: 334:             movement_list[index] = -1;
  4345   0000EA  90D8               	bcf	status,0,c
  4346   0000EC  345B               	rlcf	_index^0,w,c
  4347   0000EE  6ED9               	movwf	fsr2l,c
  4348   0000F0  345C               	rlcf	(_index+1)^0,w,c
  4349   0000F2  6EDA               	movwf	fsr2h,c
  4350   0000F4  0E6C               	movlw	low _movement_list
  4351   0000F6  26D9               	addwf	fsr2l,f,c
  4352   0000F8  0E01               	movlw	high _movement_list
  4353   0000FA  22DA               	addwfc	fsr2h,f,c
  4354   0000FC  0EFF               	movlw	255
  4355   0000FE  6EDE               	movwf	postinc2,c
  4356   000100  0EFF               	movlw	255
  4357   000102  6EDD               	movwf	postdec2,c
  4358   000104                     
  4359                           ;dc_motor.c: 335:             index++;
  4360   000104  4A5B               	infsnz	_index^0,f,c
  4361   000106  2A5C               	incf	(_index+1)^0,f,c
  4362   000108                     
  4363                           ;dc_motor.c: 336:         }
  4364   000108  4A24               	infsnz	RobotMovement@i^0,f,c
  4365   00010A  2A25               	incf	(RobotMovement@i+1)^0,f,c
  4366   00010C  BE25               	btfsc	(RobotMovement@i+1)^0,7,c
  4367   00010E  EF92  F000         	goto	u1711
  4368   000112  5025               	movf	(RobotMovement@i+1)^0,w,c
  4369   000114  E109               	bnz	u1710
  4370   000116  0E02               	movlw	2
  4371   000118  5C24               	subwf	RobotMovement@i^0,w,c
  4372   00011A  A0D8               	btfss	status,0,c
  4373   00011C  EF92  F000         	goto	u1711
  4374   000120  EF94  F000         	goto	u1710
  4375   000124                     u1711:
  4376   000124  EF6B  F000         	goto	l2716
  4377   000128                     u1710:
  4378   000128                     l2726:
  4379                           
  4380                           ;dc_motor.c: 339:     if(color == 3){
  4381   000128  0E03               	movlw	3
  4382   00012A  181C               	xorwf	RobotMovement@color^0,w,c
  4383   00012C  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4384   00012E  A4D8               	btfss	status,2,c
  4385   000130  EF9C  F000         	goto	u1721
  4386   000134  EF9E  F000         	goto	u1720
  4387   000138                     u1721:
  4388   000138  EF34  F001         	goto	l2744
  4389   00013C                     u1720:
  4390   00013C                     
  4391                           ;dc_motor.c: 341:         if (movement_list[index-1] > 10)
  4392   00013C  90D8               	bcf	status,0,c
  4393   00013E  345B               	rlcf	_index^0,w,c
  4394   000140  6ED9               	movwf	fsr2l,c
  4395   000142  345C               	rlcf	(_index+1)^0,w,c
  4396   000144  6EDA               	movwf	fsr2h,c
  4397   000146  0E6A               	movlw	low (_movement_list+65534)
  4398   000148  26D9               	addwf	fsr2l,f,c
  4399   00014A  0E01               	movlw	high (_movement_list+65534)
  4400   00014C  22DA               	addwfc	fsr2h,f,c
  4401   00014E  0E01               	movlw	1
  4402   000150  BEDB               	btfsc	plusw2,7,c
  4403   000152  EFB5  F000         	goto	u1731
  4404   000156  0E01               	movlw	1
  4405   000158  50DB               	movf	plusw2,w,c
  4406   00015A  E109               	bnz	u1730
  4407   00015C  0E0B               	movlw	11
  4408   00015E  5CDE               	subwf	postinc2,w,c
  4409   000160  A0D8               	btfss	status,0,c
  4410   000162  EFB5  F000         	goto	u1731
  4411   000166  EFB7  F000         	goto	u1730
  4412   00016A                     u1731:
  4413   00016A  EFD5  F000         	goto	l2734
  4414   00016E                     u1730:
  4415   00016E                     
  4416                           ;dc_motor.c: 342:         {;dc_motor.c: 344:             movement_list[index-1] -= 20;
  4417   00016E  90D8               	bcf	status,0,c
  4418   000170  345B               	rlcf	_index^0,w,c
  4419   000172  6ED9               	movwf	fsr2l,c
  4420   000174  345C               	rlcf	(_index+1)^0,w,c
  4421   000176  6EDA               	movwf	fsr2h,c
  4422   000178  0E6A               	movlw	low (_movement_list+65534)
  4423   00017A  26D9               	addwf	fsr2l,f,c
  4424   00017C  0E01               	movlw	high (_movement_list+65534)
  4425   00017E  22DA               	addwfc	fsr2h,f,c
  4426   000180  0EEC               	movlw	236
  4427   000182  26DE               	addwf	postinc2,f,c
  4428   000184  0EFF               	movlw	255
  4429   000186  22DD               	addwfc	postdec2,f,c
  4430                           
  4431                           ;dc_motor.c: 346:             movement_list[index] = -1;
  4432   000188  90D8               	bcf	status,0,c
  4433   00018A  345B               	rlcf	_index^0,w,c
  4434   00018C  6ED9               	movwf	fsr2l,c
  4435   00018E  345C               	rlcf	(_index+1)^0,w,c
  4436   000190  6EDA               	movwf	fsr2h,c
  4437   000192  0E6C               	movlw	low _movement_list
  4438   000194  26D9               	addwf	fsr2l,f,c
  4439   000196  0E01               	movlw	high _movement_list
  4440   000198  22DA               	addwfc	fsr2h,f,c
  4441   00019A  0EFF               	movlw	255
  4442   00019C  6EDE               	movwf	postinc2,c
  4443   00019E  0EFF               	movlw	255
  4444   0001A0  6EDD               	movwf	postdec2,c
  4445   0001A2                     
  4446                           ;dc_motor.c: 347:             index += 1;
  4447   0001A2  4A5B               	infsnz	_index^0,f,c
  4448   0001A4  2A5C               	incf	(_index+1)^0,f,c
  4449                           
  4450                           ;dc_motor.c: 348:         }else{
  4451   0001A6  EF34  F001         	goto	l2744
  4452   0001AA                     l2734:
  4453                           
  4454                           ;dc_motor.c: 350:             if (movement_list[index-1] == -1)
  4455   0001AA  90D8               	bcf	status,0,c
  4456   0001AC  345B               	rlcf	_index^0,w,c
  4457   0001AE  6ED9               	movwf	fsr2l,c
  4458   0001B0  345C               	rlcf	(_index+1)^0,w,c
  4459   0001B2  6EDA               	movwf	fsr2h,c
  4460   0001B4  0E6A               	movlw	low (_movement_list+65534)
  4461   0001B6  26D9               	addwf	fsr2l,f,c
  4462   0001B8  0E01               	movlw	high (_movement_list+65534)
  4463   0001BA  22DA               	addwfc	fsr2h,f,c
  4464   0001BC  28DE               	incf	postinc2,w,c
  4465   0001BE  E106               	bnz	u1741
  4466   0001C0  28DE               	incf	postinc2,w,c
  4467   0001C2  A4D8               	btfss	status,2,c
  4468   0001C4  EFE6  F000         	goto	u1741
  4469   0001C8  EFE8  F000         	goto	u1740
  4470   0001CC                     u1741:
  4471   0001CC  EFF5  F000         	goto	l277
  4472   0001D0                     u1740:
  4473   0001D0                     
  4474                           ;dc_motor.c: 351:             {;dc_motor.c: 353:                 movement_list[index-1] 
      +                          = -2;
  4475   0001D0  90D8               	bcf	status,0,c
  4476   0001D2  345B               	rlcf	_index^0,w,c
  4477   0001D4  6ED9               	movwf	fsr2l,c
  4478   0001D6  345C               	rlcf	(_index+1)^0,w,c
  4479   0001D8  6EDA               	movwf	fsr2h,c
  4480   0001DA  0E6A               	movlw	low (_movement_list+65534)
  4481   0001DC  26D9               	addwf	fsr2l,f,c
  4482   0001DE  0E01               	movlw	high (_movement_list+65534)
  4483   0001E0  22DA               	addwfc	fsr2h,f,c
  4484   0001E2  0EFE               	movlw	254
  4485   0001E4  6EDE               	movwf	postinc2,c
  4486   0001E6  0EFF               	movlw	255
  4487   0001E8  6EDD               	movwf	postdec2,c
  4488   0001EA                     l277:
  4489                           
  4490                           ;dc_motor.c: 356:             if (movement_list[index-1] == -2)
  4491   0001EA  90D8               	bcf	status,0,c
  4492   0001EC  345B               	rlcf	_index^0,w,c
  4493   0001EE  6ED9               	movwf	fsr2l,c
  4494   0001F0  345C               	rlcf	(_index+1)^0,w,c
  4495   0001F2  6EDA               	movwf	fsr2h,c
  4496   0001F4  0E6A               	movlw	low (_movement_list+65534)
  4497   0001F6  26D9               	addwf	fsr2l,f,c
  4498   0001F8  0E01               	movlw	high (_movement_list+65534)
  4499   0001FA  22DA               	addwfc	fsr2h,f,c
  4500   0001FC  0EFE               	movlw	254
  4501   0001FE  18DE               	xorwf	postinc2,w,c
  4502   000200  E106               	bnz	u1751
  4503   000202  28DE               	incf	postinc2,w,c
  4504   000204  A4D8               	btfss	status,2,c
  4505   000206  EF07  F001         	goto	u1751
  4506   00020A  EF09  F001         	goto	u1750
  4507   00020E                     u1751:
  4508   00020E  EF16  F001         	goto	l278
  4509   000212                     u1750:
  4510   000212                     
  4511                           ;dc_motor.c: 357:             {;dc_motor.c: 359:                 movement_list[index-1] 
      +                          = -1;
  4512   000212  90D8               	bcf	status,0,c
  4513   000214  345B               	rlcf	_index^0,w,c
  4514   000216  6ED9               	movwf	fsr2l,c
  4515   000218  345C               	rlcf	(_index+1)^0,w,c
  4516   00021A  6EDA               	movwf	fsr2h,c
  4517   00021C  0E6A               	movlw	low (_movement_list+65534)
  4518   00021E  26D9               	addwf	fsr2l,f,c
  4519   000220  0E01               	movlw	high (_movement_list+65534)
  4520   000222  22DA               	addwfc	fsr2h,f,c
  4521   000224  0EFF               	movlw	255
  4522   000226  6EDE               	movwf	postinc2,c
  4523   000228  0EFF               	movlw	255
  4524   00022A  6EDD               	movwf	postdec2,c
  4525   00022C                     l278:
  4526                           
  4527                           ;dc_motor.c: 362:         movement_list[index] = 20;
  4528   00022C  90D8               	bcf	status,0,c
  4529   00022E  345B               	rlcf	_index^0,w,c
  4530   000230  6ED9               	movwf	fsr2l,c
  4531   000232  345C               	rlcf	(_index+1)^0,w,c
  4532   000234  6EDA               	movwf	fsr2h,c
  4533   000236  0E6C               	movlw	low _movement_list
  4534   000238  26D9               	addwf	fsr2l,f,c
  4535   00023A  0E01               	movlw	high _movement_list
  4536   00023C  22DA               	addwfc	fsr2h,f,c
  4537   00023E  0E14               	movlw	20
  4538   000240  6EDE               	movwf	postinc2,c
  4539   000242  0E00               	movlw	0
  4540   000244  6EDD               	movwf	postdec2,c
  4541   000246                     
  4542                           ;dc_motor.c: 363:         index += 1;
  4543   000246  4A5B               	infsnz	_index^0,f,c
  4544   000248  2A5C               	incf	(_index+1)^0,f,c
  4545   00024A                     
  4546                           ;dc_motor.c: 365:         movement_list[index] = -2;
  4547   00024A  90D8               	bcf	status,0,c
  4548   00024C  345B               	rlcf	_index^0,w,c
  4549   00024E  6ED9               	movwf	fsr2l,c
  4550   000250  345C               	rlcf	(_index+1)^0,w,c
  4551   000252  6EDA               	movwf	fsr2h,c
  4552   000254  0E6C               	movlw	low _movement_list
  4553   000256  26D9               	addwf	fsr2l,f,c
  4554   000258  0E01               	movlw	high _movement_list
  4555   00025A  22DA               	addwfc	fsr2h,f,c
  4556   00025C  0EFE               	movlw	254
  4557   00025E  6EDE               	movwf	postinc2,c
  4558   000260  0EFF               	movlw	255
  4559   000262  6EDD               	movwf	postdec2,c
  4560                           
  4561                           ;dc_motor.c: 366:         index += 1;
  4562   000264  4A5B               	infsnz	_index^0,f,c
  4563   000266  2A5C               	incf	(_index+1)^0,f,c
  4564   000268                     l2744:
  4565                           
  4566                           ;dc_motor.c: 371:     if(color == 4){
  4567   000268  0E04               	movlw	4
  4568   00026A  181C               	xorwf	RobotMovement@color^0,w,c
  4569   00026C  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4570   00026E  A4D8               	btfss	status,2,c
  4571   000270  EF3C  F001         	goto	u1761
  4572   000274  EF3E  F001         	goto	u1760
  4573   000278                     u1761:
  4574   000278  EFD4  F001         	goto	l2762
  4575   00027C                     u1760:
  4576   00027C                     
  4577                           ;dc_motor.c: 373:         if (movement_list[index-1] > 10)
  4578   00027C  90D8               	bcf	status,0,c
  4579   00027E  345B               	rlcf	_index^0,w,c
  4580   000280  6ED9               	movwf	fsr2l,c
  4581   000282  345C               	rlcf	(_index+1)^0,w,c
  4582   000284  6EDA               	movwf	fsr2h,c
  4583   000286  0E6A               	movlw	low (_movement_list+65534)
  4584   000288  26D9               	addwf	fsr2l,f,c
  4585   00028A  0E01               	movlw	high (_movement_list+65534)
  4586   00028C  22DA               	addwfc	fsr2h,f,c
  4587   00028E  0E01               	movlw	1
  4588   000290  BEDB               	btfsc	plusw2,7,c
  4589   000292  EF55  F001         	goto	u1771
  4590   000296  0E01               	movlw	1
  4591   000298  50DB               	movf	plusw2,w,c
  4592   00029A  E109               	bnz	u1770
  4593   00029C  0E0B               	movlw	11
  4594   00029E  5CDE               	subwf	postinc2,w,c
  4595   0002A0  A0D8               	btfss	status,0,c
  4596   0002A2  EF55  F001         	goto	u1771
  4597   0002A6  EF57  F001         	goto	u1770
  4598   0002AA                     u1771:
  4599   0002AA  EF75  F001         	goto	l2752
  4600   0002AE                     u1770:
  4601   0002AE                     
  4602                           ;dc_motor.c: 374:         {;dc_motor.c: 376:             movement_list[index-1] -= 20;
  4603   0002AE  90D8               	bcf	status,0,c
  4604   0002B0  345B               	rlcf	_index^0,w,c
  4605   0002B2  6ED9               	movwf	fsr2l,c
  4606   0002B4  345C               	rlcf	(_index+1)^0,w,c
  4607   0002B6  6EDA               	movwf	fsr2h,c
  4608   0002B8  0E6A               	movlw	low (_movement_list+65534)
  4609   0002BA  26D9               	addwf	fsr2l,f,c
  4610   0002BC  0E01               	movlw	high (_movement_list+65534)
  4611   0002BE  22DA               	addwfc	fsr2h,f,c
  4612   0002C0  0EEC               	movlw	236
  4613   0002C2  26DE               	addwf	postinc2,f,c
  4614   0002C4  0EFF               	movlw	255
  4615   0002C6  22DD               	addwfc	postdec2,f,c
  4616                           
  4617                           ;dc_motor.c: 378:             movement_list[index] = -2;
  4618   0002C8  90D8               	bcf	status,0,c
  4619   0002CA  345B               	rlcf	_index^0,w,c
  4620   0002CC  6ED9               	movwf	fsr2l,c
  4621   0002CE  345C               	rlcf	(_index+1)^0,w,c
  4622   0002D0  6EDA               	movwf	fsr2h,c
  4623   0002D2  0E6C               	movlw	low _movement_list
  4624   0002D4  26D9               	addwf	fsr2l,f,c
  4625   0002D6  0E01               	movlw	high _movement_list
  4626   0002D8  22DA               	addwfc	fsr2h,f,c
  4627   0002DA  0EFE               	movlw	254
  4628   0002DC  6EDE               	movwf	postinc2,c
  4629   0002DE  0EFF               	movlw	255
  4630   0002E0  6EDD               	movwf	postdec2,c
  4631   0002E2                     
  4632                           ;dc_motor.c: 379:             index += 1;
  4633   0002E2  4A5B               	infsnz	_index^0,f,c
  4634   0002E4  2A5C               	incf	(_index+1)^0,f,c
  4635                           
  4636                           ;dc_motor.c: 380:         }else{
  4637   0002E6  EFD4  F001         	goto	l2762
  4638   0002EA                     l2752:
  4639                           
  4640                           ;dc_motor.c: 382:             if (movement_list[index-1] == -1)
  4641   0002EA  90D8               	bcf	status,0,c
  4642   0002EC  345B               	rlcf	_index^0,w,c
  4643   0002EE  6ED9               	movwf	fsr2l,c
  4644   0002F0  345C               	rlcf	(_index+1)^0,w,c
  4645   0002F2  6EDA               	movwf	fsr2h,c
  4646   0002F4  0E6A               	movlw	low (_movement_list+65534)
  4647   0002F6  26D9               	addwf	fsr2l,f,c
  4648   0002F8  0E01               	movlw	high (_movement_list+65534)
  4649   0002FA  22DA               	addwfc	fsr2h,f,c
  4650   0002FC  28DE               	incf	postinc2,w,c
  4651   0002FE  E106               	bnz	u1781
  4652   000300  28DE               	incf	postinc2,w,c
  4653   000302  A4D8               	btfss	status,2,c
  4654   000304  EF86  F001         	goto	u1781
  4655   000308  EF88  F001         	goto	u1780
  4656   00030C                     u1781:
  4657   00030C  EF95  F001         	goto	l282
  4658   000310                     u1780:
  4659   000310                     
  4660                           ;dc_motor.c: 383:             {;dc_motor.c: 385:                 movement_list[index-1] 
      +                          = -2;
  4661   000310  90D8               	bcf	status,0,c
  4662   000312  345B               	rlcf	_index^0,w,c
  4663   000314  6ED9               	movwf	fsr2l,c
  4664   000316  345C               	rlcf	(_index+1)^0,w,c
  4665   000318  6EDA               	movwf	fsr2h,c
  4666   00031A  0E6A               	movlw	low (_movement_list+65534)
  4667   00031C  26D9               	addwf	fsr2l,f,c
  4668   00031E  0E01               	movlw	high (_movement_list+65534)
  4669   000320  22DA               	addwfc	fsr2h,f,c
  4670   000322  0EFE               	movlw	254
  4671   000324  6EDE               	movwf	postinc2,c
  4672   000326  0EFF               	movlw	255
  4673   000328  6EDD               	movwf	postdec2,c
  4674   00032A                     l282:
  4675                           
  4676                           ;dc_motor.c: 388:             if (movement_list[index-1] == -2)
  4677   00032A  90D8               	bcf	status,0,c
  4678   00032C  345B               	rlcf	_index^0,w,c
  4679   00032E  6ED9               	movwf	fsr2l,c
  4680   000330  345C               	rlcf	(_index+1)^0,w,c
  4681   000332  6EDA               	movwf	fsr2h,c
  4682   000334  0E6A               	movlw	low (_movement_list+65534)
  4683   000336  26D9               	addwf	fsr2l,f,c
  4684   000338  0E01               	movlw	high (_movement_list+65534)
  4685   00033A  22DA               	addwfc	fsr2h,f,c
  4686   00033C  0EFE               	movlw	254
  4687   00033E  18DE               	xorwf	postinc2,w,c
  4688   000340  E106               	bnz	u1791
  4689   000342  28DE               	incf	postinc2,w,c
  4690   000344  A4D8               	btfss	status,2,c
  4691   000346  EFA7  F001         	goto	u1791
  4692   00034A  EFA9  F001         	goto	u1790
  4693   00034E                     u1791:
  4694   00034E  EFB6  F001         	goto	l283
  4695   000352                     u1790:
  4696   000352                     
  4697                           ;dc_motor.c: 389:             {;dc_motor.c: 391:                 movement_list[index-1] 
      +                          = -1;
  4698   000352  90D8               	bcf	status,0,c
  4699   000354  345B               	rlcf	_index^0,w,c
  4700   000356  6ED9               	movwf	fsr2l,c
  4701   000358  345C               	rlcf	(_index+1)^0,w,c
  4702   00035A  6EDA               	movwf	fsr2h,c
  4703   00035C  0E6A               	movlw	low (_movement_list+65534)
  4704   00035E  26D9               	addwf	fsr2l,f,c
  4705   000360  0E01               	movlw	high (_movement_list+65534)
  4706   000362  22DA               	addwfc	fsr2h,f,c
  4707   000364  0EFF               	movlw	255
  4708   000366  6EDE               	movwf	postinc2,c
  4709   000368  0EFF               	movlw	255
  4710   00036A  6EDD               	movwf	postdec2,c
  4711   00036C                     l283:
  4712                           
  4713                           ;dc_motor.c: 394:         movement_list[index] = 20;
  4714   00036C  90D8               	bcf	status,0,c
  4715   00036E  345B               	rlcf	_index^0,w,c
  4716   000370  6ED9               	movwf	fsr2l,c
  4717   000372  345C               	rlcf	(_index+1)^0,w,c
  4718   000374  6EDA               	movwf	fsr2h,c
  4719   000376  0E6C               	movlw	low _movement_list
  4720   000378  26D9               	addwf	fsr2l,f,c
  4721   00037A  0E01               	movlw	high _movement_list
  4722   00037C  22DA               	addwfc	fsr2h,f,c
  4723   00037E  0E14               	movlw	20
  4724   000380  6EDE               	movwf	postinc2,c
  4725   000382  0E00               	movlw	0
  4726   000384  6EDD               	movwf	postdec2,c
  4727   000386                     
  4728                           ;dc_motor.c: 395:         index += 1;
  4729   000386  4A5B               	infsnz	_index^0,f,c
  4730   000388  2A5C               	incf	(_index+1)^0,f,c
  4731   00038A                     
  4732                           ;dc_motor.c: 397:         movement_list[index] = -1;
  4733   00038A  90D8               	bcf	status,0,c
  4734   00038C  345B               	rlcf	_index^0,w,c
  4735   00038E  6ED9               	movwf	fsr2l,c
  4736   000390  345C               	rlcf	(_index+1)^0,w,c
  4737   000392  6EDA               	movwf	fsr2h,c
  4738   000394  0E6C               	movlw	low _movement_list
  4739   000396  26D9               	addwf	fsr2l,f,c
  4740   000398  0E01               	movlw	high _movement_list
  4741   00039A  22DA               	addwfc	fsr2h,f,c
  4742   00039C  0EFF               	movlw	255
  4743   00039E  6EDE               	movwf	postinc2,c
  4744   0003A0  0EFF               	movlw	255
  4745   0003A2  6EDD               	movwf	postdec2,c
  4746                           
  4747                           ;dc_motor.c: 398:         index += 1;
  4748   0003A4  4A5B               	infsnz	_index^0,f,c
  4749   0003A6  2A5C               	incf	(_index+1)^0,f,c
  4750   0003A8                     l2762:
  4751                           
  4752                           ;dc_motor.c: 402:     if(color == 5){
  4753   0003A8  0E05               	movlw	5
  4754   0003AA  181C               	xorwf	RobotMovement@color^0,w,c
  4755   0003AC  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4756   0003AE  A4D8               	btfss	status,2,c
  4757   0003B0  EFDC  F001         	goto	u1801
  4758   0003B4  EFDE  F001         	goto	u1800
  4759   0003B8                     u1801:
  4760   0003B8  EFF7  F001         	goto	l2770
  4761   0003BC                     u1800:
  4762   0003BC                     
  4763                           ;dc_motor.c: 403:         turnRightLong(&motorL, &motorR);
  4764   0003BC  0E1E               	movlw	low RobotMovement@motorL
  4765   0003BE  6E14               	movwf	turnRightLong@mL^0,c
  4766   0003C0  0E00               	movlw	high RobotMovement@motorL
  4767   0003C2  6E15               	movwf	(turnRightLong@mL+1)^0,c
  4768   0003C4  0E20               	movlw	low RobotMovement@motorR
  4769   0003C6  6E16               	movwf	turnRightLong@mR^0,c
  4770   0003C8  0E00               	movlw	high RobotMovement@motorR
  4771   0003CA  6E17               	movwf	(turnRightLong@mR+1)^0,c
  4772   0003CC  EC1A  F006         	call	_turnRightLong	;wreg free
  4773   0003D0                     
  4774                           ;dc_motor.c: 404:         movement_list[index] = -3;
  4775   0003D0  90D8               	bcf	status,0,c
  4776   0003D2  345B               	rlcf	_index^0,w,c
  4777   0003D4  6ED9               	movwf	fsr2l,c
  4778   0003D6  345C               	rlcf	(_index+1)^0,w,c
  4779   0003D8  6EDA               	movwf	fsr2h,c
  4780   0003DA  0E6C               	movlw	low _movement_list
  4781   0003DC  26D9               	addwf	fsr2l,f,c
  4782   0003DE  0E01               	movlw	high _movement_list
  4783   0003E0  22DA               	addwfc	fsr2h,f,c
  4784   0003E2  0EFD               	movlw	253
  4785   0003E4  6EDE               	movwf	postinc2,c
  4786   0003E6  0EFF               	movlw	255
  4787   0003E8  6EDD               	movwf	postdec2,c
  4788   0003EA                     
  4789                           ;dc_motor.c: 405:         index += 1;
  4790   0003EA  4A5B               	infsnz	_index^0,f,c
  4791   0003EC  2A5C               	incf	(_index+1)^0,f,c
  4792   0003EE                     l2770:
  4793                           
  4794                           ;dc_motor.c: 408:     if(color == 6){
  4795   0003EE  0E06               	movlw	6
  4796   0003F0  181C               	xorwf	RobotMovement@color^0,w,c
  4797   0003F2  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4798   0003F4  A4D8               	btfss	status,2,c
  4799   0003F6  EFFF  F001         	goto	u1811
  4800   0003FA  EF01  F002         	goto	u1810
  4801   0003FE                     u1811:
  4802   0003FE  EF1A  F002         	goto	l2778
  4803   000402                     u1810:
  4804   000402                     
  4805                           ;dc_motor.c: 409:         turnLeftLong(&motorL, &motorR);
  4806   000402  0E1E               	movlw	low RobotMovement@motorL
  4807   000404  6E14               	movwf	turnLeftLong@mL^0,c
  4808   000406  0E00               	movlw	high RobotMovement@motorL
  4809   000408  6E15               	movwf	(turnLeftLong@mL+1)^0,c
  4810   00040A  0E20               	movlw	low RobotMovement@motorR
  4811   00040C  6E16               	movwf	turnLeftLong@mR^0,c
  4812   00040E  0E00               	movlw	high RobotMovement@motorR
  4813   000410  6E17               	movwf	(turnLeftLong@mR+1)^0,c
  4814   000412  EC42  F007         	call	_turnLeftLong	;wreg free
  4815   000416                     
  4816                           ;dc_motor.c: 410:         movement_list[index] = -4;
  4817   000416  90D8               	bcf	status,0,c
  4818   000418  345B               	rlcf	_index^0,w,c
  4819   00041A  6ED9               	movwf	fsr2l,c
  4820   00041C  345C               	rlcf	(_index+1)^0,w,c
  4821   00041E  6EDA               	movwf	fsr2h,c
  4822   000420  0E6C               	movlw	low _movement_list
  4823   000422  26D9               	addwf	fsr2l,f,c
  4824   000424  0E01               	movlw	high _movement_list
  4825   000426  22DA               	addwfc	fsr2h,f,c
  4826   000428  0EFC               	movlw	252
  4827   00042A  6EDE               	movwf	postinc2,c
  4828   00042C  0EFF               	movlw	255
  4829   00042E  6EDD               	movwf	postdec2,c
  4830   000430                     
  4831                           ;dc_motor.c: 411:         index += 1;
  4832   000430  4A5B               	infsnz	_index^0,f,c
  4833   000432  2A5C               	incf	(_index+1)^0,f,c
  4834   000434                     l2778:
  4835                           
  4836                           ;dc_motor.c: 414:     if(color == 7){
  4837   000434  0E07               	movlw	7
  4838   000436  181C               	xorwf	RobotMovement@color^0,w,c
  4839   000438  101D               	iorwf	(RobotMovement@color+1)^0,w,c
  4840   00043A  A4D8               	btfss	status,2,c
  4841   00043C  EF22  F002         	goto	u1821
  4842   000440  EF24  F002         	goto	u1820
  4843   000444                     u1821:
  4844   000444  EF42  F002         	goto	l289
  4845   000448                     u1820:
  4846   000448                     
  4847                           ;dc_motor.c: 415:         int i;;dc_motor.c: 416:         for (i=0;i<2;i++){
  4848   000448  0E00               	movlw	0
  4849   00044A  6E27               	movwf	(RobotMovement@i_1275+1)^0,c
  4850   00044C  0E00               	movlw	0
  4851   00044E  6E26               	movwf	RobotMovement@i_1275^0,c
  4852   000450                     l2786:
  4853                           
  4854                           ;dc_motor.c: 417:         turnRight(&motorL, &motorR);
  4855   000450  0E1E               	movlw	low RobotMovement@motorL
  4856   000452  6E14               	movwf	turnRight@mL^0,c
  4857   000454  0E00               	movlw	high RobotMovement@motorL
  4858   000456  6E15               	movwf	(turnRight@mL+1)^0,c
  4859   000458  0E20               	movlw	low RobotMovement@motorR
  4860   00045A  6E16               	movwf	turnRight@mR^0,c
  4861   00045C  0E00               	movlw	high RobotMovement@motorR
  4862   00045E  6E17               	movwf	(turnRight@mR+1)^0,c
  4863   000460  ECAE  F006         	call	_turnRight	;wreg free
  4864   000464                     
  4865                           ;dc_motor.c: 418:         }
  4866   000464  4A26               	infsnz	RobotMovement@i_1275^0,f,c
  4867   000466  2A27               	incf	(RobotMovement@i_1275+1)^0,f,c
  4868   000468  BE27               	btfsc	(RobotMovement@i_1275+1)^0,7,c
  4869   00046A  EF40  F002         	goto	u1831
  4870   00046E  5027               	movf	(RobotMovement@i_1275+1)^0,w,c
  4871   000470  E109               	bnz	u1830
  4872   000472  0E02               	movlw	2
  4873   000474  5C26               	subwf	RobotMovement@i_1275^0,w,c
  4874   000476  A0D8               	btfss	status,0,c
  4875   000478  EF40  F002         	goto	u1831
  4876   00047C  EF42  F002         	goto	u1830
  4877   000480                     u1831:
  4878   000480  EF28  F002         	goto	l2786
  4879   000484                     u1830:
  4880   000484                     l289:
  4881   000484  0012               	return		;funcret
  4882   000486                     __end_of_RobotMovement:
  4883                           	callstack 0
  4884                           
  4885 ;; *************** function _turnRightLong *****************
  4886 ;; Defined at:
  4887 ;;		line 222 in file "dc_motor.c"
  4888 ;; Parameters:    Size  Location     Type
  4889 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  4890 ;;		 -> RobotMovement@motorL(2), 
  4891 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  4892 ;;		 -> RobotMovement@motorR(2), 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  i               2   25[COMRAM] int 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      void 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4904 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4905 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4906 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4907 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4908 ;;Total ram usage:        8 bytes
  4909 ;; Hardware stack levels used: 1
  4910 ;; Hardware stack levels required when called: 4
  4911 ;; This function calls:
  4912 ;;		_setMotorPWM
  4913 ;; This function is called by:
  4914 ;;		_RobotMovement
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text29
  4919   000C34                     __ptext29:
  4920                           	callstack 0
  4921   000C34                     _turnRightLong:
  4922                           	callstack 25
  4923   000C34                     
  4924                           ;dc_motor.c: 222: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 223: {;dc_motor.c: 225:     int i;;dc_motor.c: 226:     for(i=25;i<40;i+=5){
  4925   000C34  0E00               	movlw	0
  4926   000C36  6E1B               	movwf	(turnRightLong@i+1)^0,c
  4927   000C38  0E19               	movlw	25
  4928   000C3A  6E1A               	movwf	turnRightLong@i^0,c
  4929   000C3C                     l2434:
  4930                           
  4931                           ;dc_motor.c: 227:     (*mL).direction=1;
  4932   000C3C  EE20 F001          	lfsr	2,1
  4933   000C40  5014               	movf	turnRightLong@mL^0,w,c
  4934   000C42  26D9               	addwf	fsr2l,f,c
  4935   000C44  5015               	movf	(turnRightLong@mL+1)^0,w,c
  4936   000C46  22DA               	addwfc	fsr2h,f,c
  4937   000C48  0E01               	movlw	1
  4938   000C4A  6EDF               	movwf	indf2,c
  4939                           
  4940                           ;dc_motor.c: 228:     (*mR).direction=0;
  4941   000C4C  EE20 F001          	lfsr	2,1
  4942   000C50  5016               	movf	turnRightLong@mR^0,w,c
  4943   000C52  26D9               	addwf	fsr2l,f,c
  4944   000C54  5017               	movf	(turnRightLong@mR+1)^0,w,c
  4945   000C56  22DA               	addwfc	fsr2h,f,c
  4946   000C58  0E00               	movlw	0
  4947   000C5A  6EDF               	movwf	indf2,c
  4948   000C5C                     
  4949                           ;dc_motor.c: 229:     (*mL).power=i;
  4950   000C5C  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  4951   000C60  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  4952   000C64  C01A  FFDF         	movff	turnRightLong@i,indf2
  4953   000C68                     
  4954                           ;dc_motor.c: 230:     (*mR).power=i;
  4955   000C68  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  4956   000C6C  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  4957   000C70  C01A  FFDF         	movff	turnRightLong@i,indf2
  4958   000C74                     
  4959                           ;dc_motor.c: 231:     setMotorPWM(mL);
  4960   000C74  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  4961   000C78  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  4962   000C7C  ECC8  F004         	call	_setMotorPWM	;wreg free
  4963   000C80                     
  4964                           ;dc_motor.c: 232:     setMotorPWM(mR);
  4965   000C80  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  4966   000C84  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  4967   000C88  ECC8  F004         	call	_setMotorPWM	;wreg free
  4968   000C8C                     
  4969                           ;dc_motor.c: 233:     _delay((unsigned long)((161)*(64000000/4000.0)));
  4970   000C8C  0E0E               	movlw	14
  4971   000C8E  6E19               	movwf	(??_turnRightLong+1)^0,c
  4972   000C90  0E12               	movlw	18
  4973   000C92  6E18               	movwf	??_turnRightLong^0,c
  4974   000C94  0E69               	movlw	105
  4975   000C96                     u2397:
  4976   000C96  2EE8               	decfsz	wreg,f,c
  4977   000C98  D7FE               	bra	u2397
  4978   000C9A  2E18               	decfsz	??_turnRightLong^0,f,c
  4979   000C9C  D7FC               	bra	u2397
  4980   000C9E  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  4981   000CA0  D7FA               	bra	u2397
  4982   000CA2  F000               	nop	
  4983   000CA4                     
  4984                           ;dc_motor.c: 234:     }
  4985   000CA4  0E05               	movlw	5
  4986   000CA6  261A               	addwf	turnRightLong@i^0,f,c
  4987   000CA8  0E00               	movlw	0
  4988   000CAA  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  4989   000CAC  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  4990   000CAE  EF62  F006         	goto	u1341
  4991   000CB2  501B               	movf	(turnRightLong@i+1)^0,w,c
  4992   000CB4  E109               	bnz	u1340
  4993   000CB6  0E28               	movlw	40
  4994   000CB8  5C1A               	subwf	turnRightLong@i^0,w,c
  4995   000CBA  A0D8               	btfss	status,0,c
  4996   000CBC  EF62  F006         	goto	u1341
  4997   000CC0  EF64  F006         	goto	u1340
  4998   000CC4                     u1341:
  4999   000CC4  EF1E  F006         	goto	l2434
  5000   000CC8                     u1340:
  5001   000CC8                     
  5002                           ;dc_motor.c: 235:     for(i=30;i>15;i-=5){
  5003   000CC8  0E00               	movlw	0
  5004   000CCA  6E1B               	movwf	(turnRightLong@i+1)^0,c
  5005   000CCC  0E1E               	movlw	30
  5006   000CCE  6E1A               	movwf	turnRightLong@i^0,c
  5007   000CD0                     l2456:
  5008                           
  5009                           ;dc_motor.c: 236:     (*mL).direction=1;
  5010   000CD0  EE20 F001          	lfsr	2,1
  5011   000CD4  5014               	movf	turnRightLong@mL^0,w,c
  5012   000CD6  26D9               	addwf	fsr2l,f,c
  5013   000CD8  5015               	movf	(turnRightLong@mL+1)^0,w,c
  5014   000CDA  22DA               	addwfc	fsr2h,f,c
  5015   000CDC  0E01               	movlw	1
  5016   000CDE  6EDF               	movwf	indf2,c
  5017                           
  5018                           ;dc_motor.c: 237:     (*mR).direction=0;
  5019   000CE0  EE20 F001          	lfsr	2,1
  5020   000CE4  5016               	movf	turnRightLong@mR^0,w,c
  5021   000CE6  26D9               	addwf	fsr2l,f,c
  5022   000CE8  5017               	movf	(turnRightLong@mR+1)^0,w,c
  5023   000CEA  22DA               	addwfc	fsr2h,f,c
  5024   000CEC  0E00               	movlw	0
  5025   000CEE  6EDF               	movwf	indf2,c
  5026   000CF0                     
  5027                           ;dc_motor.c: 238:     (*mL).power=i;
  5028   000CF0  C014  FFD9         	movff	turnRightLong@mL,fsr2l
  5029   000CF4  C015  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5030   000CF8  C01A  FFDF         	movff	turnRightLong@i,indf2
  5031   000CFC                     
  5032                           ;dc_motor.c: 239:     (*mR).power=i;
  5033   000CFC  C016  FFD9         	movff	turnRightLong@mR,fsr2l
  5034   000D00  C017  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5035   000D04  C01A  FFDF         	movff	turnRightLong@i,indf2
  5036   000D08                     
  5037                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5038   000D08  C014  F00E         	movff	turnRightLong@mL,setMotorPWM@m
  5039   000D0C  C015  F00F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5040   000D10  ECC8  F004         	call	_setMotorPWM	;wreg free
  5041   000D14                     
  5042                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5043   000D14  C016  F00E         	movff	turnRightLong@mR,setMotorPWM@m
  5044   000D18  C017  F00F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5045   000D1C  ECC8  F004         	call	_setMotorPWM	;wreg free
  5046   000D20                     
  5047                           ;dc_motor.c: 242:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5048   000D20  0E0D               	movlw	13
  5049   000D22  6E19               	movwf	(??_turnRightLong+1)^0,c
  5050   000D24  0EBF               	movlw	191
  5051   000D26  6E18               	movwf	??_turnRightLong^0,c
  5052   000D28  0E4C               	movlw	76
  5053   000D2A                     u2407:
  5054   000D2A  2EE8               	decfsz	wreg,f,c
  5055   000D2C  D7FE               	bra	u2407
  5056   000D2E  2E18               	decfsz	??_turnRightLong^0,f,c
  5057   000D30  D7FC               	bra	u2407
  5058   000D32  2E19               	decfsz	(??_turnRightLong+1)^0,f,c
  5059   000D34  D7FA               	bra	u2407
  5060   000D36                     
  5061                           ;dc_motor.c: 244:     }
  5062   000D36  0EFB               	movlw	251
  5063   000D38  261A               	addwf	turnRightLong@i^0,f,c
  5064   000D3A  0EFF               	movlw	255
  5065   000D3C  221B               	addwfc	(turnRightLong@i+1)^0,f,c
  5066   000D3E  BE1B               	btfsc	(turnRightLong@i+1)^0,7,c
  5067   000D40  EFAD  F006         	goto	u1350
  5068   000D44  501B               	movf	(turnRightLong@i+1)^0,w,c
  5069   000D46  E107               	bnz	u1351
  5070   000D48  0E10               	movlw	16
  5071   000D4A  5C1A               	subwf	turnRightLong@i^0,w,c
  5072   000D4C  B0D8               	btfsc	status,0,c
  5073   000D4E  EFAB  F006         	goto	u1351
  5074   000D52  EFAD  F006         	goto	u1350
  5075   000D56                     u1351:
  5076   000D56  EF68  F006         	goto	l2456
  5077   000D5A                     u1350:
  5078   000D5A  0012               	return		;funcret
  5079   000D5C                     __end_of_turnRightLong:
  5080                           	callstack 0
  5081                           
  5082 ;; *************** function _turnRight *****************
  5083 ;; Defined at:
  5084 ;;		line 149 in file "dc_motor.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5087 ;;		 -> RobotMovement@motorL(2), 
  5088 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5089 ;;		 -> RobotMovement@motorR(2), 
  5090 ;; Auto vars:     Size  Location     Type
  5091 ;;  i               2   25[COMRAM] int 
  5092 ;; Return value:  Size  Location     Type
  5093 ;;                  1    wreg      void 
  5094 ;; Registers used:
  5095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5096 ;; Tracked objects:
  5097 ;;		On entry : 0/0
  5098 ;;		On exit  : 0/0
  5099 ;;		Unchanged: 0/0
  5100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5103 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5104 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5105 ;;Total ram usage:        8 bytes
  5106 ;; Hardware stack levels used: 1
  5107 ;; Hardware stack levels required when called: 4
  5108 ;; This function calls:
  5109 ;;		_setMotorPWM
  5110 ;; This function is called by:
  5111 ;;		_RobotMovement
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text30
  5116   000D5C                     __ptext30:
  5117                           	callstack 0
  5118   000D5C                     _turnRight:
  5119                           	callstack 25
  5120   000D5C                     
  5121                           ;dc_motor.c: 149: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          50: {;dc_motor.c: 175:     int i;;dc_motor.c: 176:     for(i=25;i<40;i+=5){
  5122   000D5C  0E00               	movlw	0
  5123   000D5E  6E1B               	movwf	(turnRight@i+1)^0,c
  5124   000D60  0E19               	movlw	25
  5125   000D62  6E1A               	movwf	turnRight@i^0,c
  5126   000D64                     l2346:
  5127                           
  5128                           ;dc_motor.c: 177:     (*mL).direction=1;
  5129   000D64  EE20 F001          	lfsr	2,1
  5130   000D68  5014               	movf	turnRight@mL^0,w,c
  5131   000D6A  26D9               	addwf	fsr2l,f,c
  5132   000D6C  5015               	movf	(turnRight@mL+1)^0,w,c
  5133   000D6E  22DA               	addwfc	fsr2h,f,c
  5134   000D70  0E01               	movlw	1
  5135   000D72  6EDF               	movwf	indf2,c
  5136                           
  5137                           ;dc_motor.c: 178:     (*mR).direction=0;
  5138   000D74  EE20 F001          	lfsr	2,1
  5139   000D78  5016               	movf	turnRight@mR^0,w,c
  5140   000D7A  26D9               	addwf	fsr2l,f,c
  5141   000D7C  5017               	movf	(turnRight@mR+1)^0,w,c
  5142   000D7E  22DA               	addwfc	fsr2h,f,c
  5143   000D80  0E00               	movlw	0
  5144   000D82  6EDF               	movwf	indf2,c
  5145   000D84                     
  5146                           ;dc_motor.c: 179:     (*mL).power=i;
  5147   000D84  C014  FFD9         	movff	turnRight@mL,fsr2l
  5148   000D88  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5149   000D8C  C01A  FFDF         	movff	turnRight@i,indf2
  5150   000D90                     
  5151                           ;dc_motor.c: 180:     (*mR).power=i;
  5152   000D90  C016  FFD9         	movff	turnRight@mR,fsr2l
  5153   000D94  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5154   000D98  C01A  FFDF         	movff	turnRight@i,indf2
  5155   000D9C                     
  5156                           ;dc_motor.c: 181:     setMotorPWM(mL);
  5157   000D9C  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5158   000DA0  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5159   000DA4  ECC8  F004         	call	_setMotorPWM	;wreg free
  5160   000DA8                     
  5161                           ;dc_motor.c: 182:     setMotorPWM(mR);
  5162   000DA8  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5163   000DAC  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5164   000DB0  ECC8  F004         	call	_setMotorPWM	;wreg free
  5165   000DB4                     
  5166                           ;dc_motor.c: 183:     _delay((unsigned long)((107)*(64000000/4000.0)));
  5167   000DB4  0E09               	movlw	9
  5168   000DB6  6E19               	movwf	(??_turnRight+1)^0,c
  5169   000DB8  0EB0               	movlw	176
  5170   000DBA  6E18               	movwf	??_turnRight^0,c
  5171   000DBC  0E58               	movlw	88
  5172   000DBE                     u2417:
  5173   000DBE  2EE8               	decfsz	wreg,f,c
  5174   000DC0  D7FE               	bra	u2417
  5175   000DC2  2E18               	decfsz	??_turnRight^0,f,c
  5176   000DC4  D7FC               	bra	u2417
  5177   000DC6  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5178   000DC8  D7FA               	bra	u2417
  5179   000DCA  D000               	nop2	
  5180   000DCC                     
  5181                           ;dc_motor.c: 184:     }
  5182   000DCC  0E05               	movlw	5
  5183   000DCE  261A               	addwf	turnRight@i^0,f,c
  5184   000DD0  0E00               	movlw	0
  5185   000DD2  221B               	addwfc	(turnRight@i+1)^0,f,c
  5186   000DD4  BE1B               	btfsc	(turnRight@i+1)^0,7,c
  5187   000DD6  EFF6  F006         	goto	u1301
  5188   000DDA  501B               	movf	(turnRight@i+1)^0,w,c
  5189   000DDC  E109               	bnz	u1300
  5190   000DDE  0E28               	movlw	40
  5191   000DE0  5C1A               	subwf	turnRight@i^0,w,c
  5192   000DE2  A0D8               	btfss	status,0,c
  5193   000DE4  EFF6  F006         	goto	u1301
  5194   000DE8  EFF8  F006         	goto	u1300
  5195   000DEC                     u1301:
  5196   000DEC  EFB2  F006         	goto	l2346
  5197   000DF0                     u1300:
  5198   000DF0                     
  5199                           ;dc_motor.c: 185:     for(i=30;i>15;i-=5){
  5200   000DF0  0E00               	movlw	0
  5201   000DF2  6E1B               	movwf	(turnRight@i+1)^0,c
  5202   000DF4  0E1E               	movlw	30
  5203   000DF6  6E1A               	movwf	turnRight@i^0,c
  5204   000DF8                     l2368:
  5205                           
  5206                           ;dc_motor.c: 186:     (*mL).direction=1;
  5207   000DF8  EE20 F001          	lfsr	2,1
  5208   000DFC  5014               	movf	turnRight@mL^0,w,c
  5209   000DFE  26D9               	addwf	fsr2l,f,c
  5210   000E00  5015               	movf	(turnRight@mL+1)^0,w,c
  5211   000E02  22DA               	addwfc	fsr2h,f,c
  5212   000E04  0E01               	movlw	1
  5213   000E06  6EDF               	movwf	indf2,c
  5214                           
  5215                           ;dc_motor.c: 187:     (*mR).direction=0;
  5216   000E08  EE20 F001          	lfsr	2,1
  5217   000E0C  5016               	movf	turnRight@mR^0,w,c
  5218   000E0E  26D9               	addwf	fsr2l,f,c
  5219   000E10  5017               	movf	(turnRight@mR+1)^0,w,c
  5220   000E12  22DA               	addwfc	fsr2h,f,c
  5221   000E14  0E00               	movlw	0
  5222   000E16  6EDF               	movwf	indf2,c
  5223   000E18                     
  5224                           ;dc_motor.c: 188:     (*mL).power=i;
  5225   000E18  C014  FFD9         	movff	turnRight@mL,fsr2l
  5226   000E1C  C015  FFDA         	movff	turnRight@mL+1,fsr2h
  5227   000E20  C01A  FFDF         	movff	turnRight@i,indf2
  5228   000E24                     
  5229                           ;dc_motor.c: 189:     (*mR).power=i;
  5230   000E24  C016  FFD9         	movff	turnRight@mR,fsr2l
  5231   000E28  C017  FFDA         	movff	turnRight@mR+1,fsr2h
  5232   000E2C  C01A  FFDF         	movff	turnRight@i,indf2
  5233   000E30                     
  5234                           ;dc_motor.c: 190:     setMotorPWM(mL);
  5235   000E30  C014  F00E         	movff	turnRight@mL,setMotorPWM@m
  5236   000E34  C015  F00F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5237   000E38  ECC8  F004         	call	_setMotorPWM	;wreg free
  5238   000E3C                     
  5239                           ;dc_motor.c: 191:     setMotorPWM(mR);
  5240   000E3C  C016  F00E         	movff	turnRight@mR,setMotorPWM@m
  5241   000E40  C017  F00F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5242   000E44  ECC8  F004         	call	_setMotorPWM	;wreg free
  5243   000E48                     
  5244                           ;dc_motor.c: 192:     _delay((unsigned long)((105)*(64000000/4000.0)));
  5245   000E48  0E09               	movlw	9
  5246   000E4A  6E19               	movwf	(??_turnRight+1)^0,c
  5247   000E4C  0E86               	movlw	134
  5248   000E4E  6E18               	movwf	??_turnRight^0,c
  5249   000E50  0ECA               	movlw	202
  5250   000E52                     u2427:
  5251   000E52  2EE8               	decfsz	wreg,f,c
  5252   000E54  D7FE               	bra	u2427
  5253   000E56  2E18               	decfsz	??_turnRight^0,f,c
  5254   000E58  D7FC               	bra	u2427
  5255   000E5A  2E19               	decfsz	(??_turnRight+1)^0,f,c
  5256   000E5C  D7FA               	bra	u2427
  5257   000E5E                     
  5258                           ;dc_motor.c: 194:     }
  5259   000E5E  0EFB               	movlw	251
  5260   000E60  261A               	addwf	turnRight@i^0,f,c
  5261   000E62  0EFF               	movlw	255
  5262   000E64  221B               	addwfc	(turnRight@i+1)^0,f,c
  5263   000E66  BE1B               	btfsc	(turnRight@i+1)^0,7,c
  5264   000E68  EF41  F007         	goto	u1310
  5265   000E6C  501B               	movf	(turnRight@i+1)^0,w,c
  5266   000E6E  E107               	bnz	u1311
  5267   000E70  0E10               	movlw	16
  5268   000E72  5C1A               	subwf	turnRight@i^0,w,c
  5269   000E74  B0D8               	btfsc	status,0,c
  5270   000E76  EF3F  F007         	goto	u1311
  5271   000E7A  EF41  F007         	goto	u1310
  5272   000E7E                     u1311:
  5273   000E7E  EFFC  F006         	goto	l2368
  5274   000E82                     u1310:
  5275   000E82  0012               	return		;funcret
  5276   000E84                     __end_of_turnRight:
  5277                           	callstack 0
  5278                           
  5279 ;; *************** function _turnLeftLong *****************
  5280 ;; Defined at:
  5281 ;;		line 197 in file "dc_motor.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5284 ;;		 -> RobotMovement@motorL(2), 
  5285 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5286 ;;		 -> RobotMovement@motorR(2), 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  i               2   25[COMRAM] int 
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5293 ;; Tracked objects:
  5294 ;;		On entry : 0/0
  5295 ;;		On exit  : 0/0
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5298 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5300 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5301 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5302 ;;Total ram usage:        8 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 4
  5305 ;; This function calls:
  5306 ;;		_setMotorPWM
  5307 ;; This function is called by:
  5308 ;;		_RobotMovement
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text31
  5313   000E84                     __ptext31:
  5314                           	callstack 0
  5315   000E84                     _turnLeftLong:
  5316                           	callstack 25
  5317   000E84                     
  5318                           ;dc_motor.c: 197: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 198: {;dc_motor.c: 200:     int i;;dc_motor.c: 201:     for(i=23;i<38;i+=5){
  5319   000E84  0E00               	movlw	0
  5320   000E86  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5321   000E88  0E17               	movlw	23
  5322   000E8A  6E1A               	movwf	turnLeftLong@i^0,c
  5323   000E8C                     l2390:
  5324                           
  5325                           ;dc_motor.c: 202:     (*mL).direction=0;
  5326   000E8C  EE20 F001          	lfsr	2,1
  5327   000E90  5014               	movf	turnLeftLong@mL^0,w,c
  5328   000E92  26D9               	addwf	fsr2l,f,c
  5329   000E94  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5330   000E96  22DA               	addwfc	fsr2h,f,c
  5331   000E98  0E00               	movlw	0
  5332   000E9A  6EDF               	movwf	indf2,c
  5333                           
  5334                           ;dc_motor.c: 203:     (*mR).direction=1;
  5335   000E9C  EE20 F001          	lfsr	2,1
  5336   000EA0  5016               	movf	turnLeftLong@mR^0,w,c
  5337   000EA2  26D9               	addwf	fsr2l,f,c
  5338   000EA4  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5339   000EA6  22DA               	addwfc	fsr2h,f,c
  5340   000EA8  0E01               	movlw	1
  5341   000EAA  6EDF               	movwf	indf2,c
  5342   000EAC                     
  5343                           ;dc_motor.c: 204:     (*mL).power=i;
  5344   000EAC  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5345   000EB0  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5346   000EB4  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5347   000EB8                     
  5348                           ;dc_motor.c: 205:     (*mR).power=i;
  5349   000EB8  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5350   000EBC  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5351   000EC0  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5352   000EC4                     
  5353                           ;dc_motor.c: 206:     setMotorPWM(mL);
  5354   000EC4  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5355   000EC8  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5356   000ECC  ECC8  F004         	call	_setMotorPWM	;wreg free
  5357   000ED0                     
  5358                           ;dc_motor.c: 207:     setMotorPWM(mR);
  5359   000ED0  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5360   000ED4  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5361   000ED8  ECC8  F004         	call	_setMotorPWM	;wreg free
  5362   000EDC                     
  5363                           ;dc_motor.c: 208:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5364   000EDC  0E0D               	movlw	13
  5365   000EDE  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5366   000EE0  0EAA               	movlw	170
  5367   000EE2  6E18               	movwf	??_turnLeftLong^0,c
  5368   000EE4  0E84               	movlw	132
  5369   000EE6                     u2437:
  5370   000EE6  2EE8               	decfsz	wreg,f,c
  5371   000EE8  D7FE               	bra	u2437
  5372   000EEA  2E18               	decfsz	??_turnLeftLong^0,f,c
  5373   000EEC  D7FC               	bra	u2437
  5374   000EEE  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5375   000EF0  D7FA               	bra	u2437
  5376   000EF2  D000               	nop2	
  5377   000EF4                     
  5378                           ;dc_motor.c: 209:     }
  5379   000EF4  0E05               	movlw	5
  5380   000EF6  261A               	addwf	turnLeftLong@i^0,f,c
  5381   000EF8  0E00               	movlw	0
  5382   000EFA  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5383   000EFC  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5384   000EFE  EF8A  F007         	goto	u1321
  5385   000F02  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5386   000F04  E109               	bnz	u1320
  5387   000F06  0E26               	movlw	38
  5388   000F08  5C1A               	subwf	turnLeftLong@i^0,w,c
  5389   000F0A  A0D8               	btfss	status,0,c
  5390   000F0C  EF8A  F007         	goto	u1321
  5391   000F10  EF8C  F007         	goto	u1320
  5392   000F14                     u1321:
  5393   000F14  EF46  F007         	goto	l2390
  5394   000F18                     u1320:
  5395   000F18                     
  5396                           ;dc_motor.c: 210:     for(i=28;i>13;i-=5){
  5397   000F18  0E00               	movlw	0
  5398   000F1A  6E1B               	movwf	(turnLeftLong@i+1)^0,c
  5399   000F1C  0E1C               	movlw	28
  5400   000F1E  6E1A               	movwf	turnLeftLong@i^0,c
  5401   000F20                     l2412:
  5402                           
  5403                           ;dc_motor.c: 211:     (*mL).direction=0;
  5404   000F20  EE20 F001          	lfsr	2,1
  5405   000F24  5014               	movf	turnLeftLong@mL^0,w,c
  5406   000F26  26D9               	addwf	fsr2l,f,c
  5407   000F28  5015               	movf	(turnLeftLong@mL+1)^0,w,c
  5408   000F2A  22DA               	addwfc	fsr2h,f,c
  5409   000F2C  0E00               	movlw	0
  5410   000F2E  6EDF               	movwf	indf2,c
  5411                           
  5412                           ;dc_motor.c: 212:     (*mR).direction=1;
  5413   000F30  EE20 F001          	lfsr	2,1
  5414   000F34  5016               	movf	turnLeftLong@mR^0,w,c
  5415   000F36  26D9               	addwf	fsr2l,f,c
  5416   000F38  5017               	movf	(turnLeftLong@mR+1)^0,w,c
  5417   000F3A  22DA               	addwfc	fsr2h,f,c
  5418   000F3C  0E01               	movlw	1
  5419   000F3E  6EDF               	movwf	indf2,c
  5420   000F40                     
  5421                           ;dc_motor.c: 213:     (*mL).power=i;
  5422   000F40  C014  FFD9         	movff	turnLeftLong@mL,fsr2l
  5423   000F44  C015  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5424   000F48  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5425   000F4C                     
  5426                           ;dc_motor.c: 214:     (*mR).power=i;
  5427   000F4C  C016  FFD9         	movff	turnLeftLong@mR,fsr2l
  5428   000F50  C017  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5429   000F54  C01A  FFDF         	movff	turnLeftLong@i,indf2
  5430   000F58                     
  5431                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5432   000F58  C014  F00E         	movff	turnLeftLong@mL,setMotorPWM@m
  5433   000F5C  C015  F00F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5434   000F60  ECC8  F004         	call	_setMotorPWM	;wreg free
  5435   000F64                     
  5436                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5437   000F64  C016  F00E         	movff	turnLeftLong@mR,setMotorPWM@m
  5438   000F68  C017  F00F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5439   000F6C  ECC8  F004         	call	_setMotorPWM	;wreg free
  5440   000F70                     
  5441                           ;dc_motor.c: 217:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5442   000F70  0E0D               	movlw	13
  5443   000F72  6E19               	movwf	(??_turnLeftLong+1)^0,c
  5444   000F74  0E2D               	movlw	45
  5445   000F76  6E18               	movwf	??_turnLeftLong^0,c
  5446   000F78  0ED8               	movlw	216
  5447   000F7A                     u2447:
  5448   000F7A  2EE8               	decfsz	wreg,f,c
  5449   000F7C  D7FE               	bra	u2447
  5450   000F7E  2E18               	decfsz	??_turnLeftLong^0,f,c
  5451   000F80  D7FC               	bra	u2447
  5452   000F82  2E19               	decfsz	(??_turnLeftLong+1)^0,f,c
  5453   000F84  D7FA               	bra	u2447
  5454   000F86                     
  5455                           ;dc_motor.c: 219:     }
  5456   000F86  0EFB               	movlw	251
  5457   000F88  261A               	addwf	turnLeftLong@i^0,f,c
  5458   000F8A  0EFF               	movlw	255
  5459   000F8C  221B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5460   000F8E  BE1B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5461   000F90  EFD5  F007         	goto	u1330
  5462   000F94  501B               	movf	(turnLeftLong@i+1)^0,w,c
  5463   000F96  E107               	bnz	u1331
  5464   000F98  0E0E               	movlw	14
  5465   000F9A  5C1A               	subwf	turnLeftLong@i^0,w,c
  5466   000F9C  B0D8               	btfsc	status,0,c
  5467   000F9E  EFD3  F007         	goto	u1331
  5468   000FA2  EFD5  F007         	goto	u1330
  5469   000FA6                     u1331:
  5470   000FA6  EF90  F007         	goto	l2412
  5471   000FAA                     u1330:
  5472   000FAA  0012               	return		;funcret
  5473   000FAC                     __end_of_turnLeftLong:
  5474                           	callstack 0
  5475                           
  5476 ;; *************** function _turnLeft *****************
  5477 ;; Defined at:
  5478 ;;		line 101 in file "dc_motor.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  mL              2   19[COMRAM] PTR struct DC_motor
  5481 ;;		 -> RobotMovement@motorL(2), 
  5482 ;;  mR              2   21[COMRAM] PTR struct DC_motor
  5483 ;;		 -> RobotMovement@motorR(2), 
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;  i               2   25[COMRAM] int 
  5486 ;; Return value:  Size  Location     Type
  5487 ;;                  1    wreg      void 
  5488 ;; Registers used:
  5489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5496 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5498 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5499 ;;Total ram usage:        8 bytes
  5500 ;; Hardware stack levels used: 1
  5501 ;; Hardware stack levels required when called: 4
  5502 ;; This function calls:
  5503 ;;		_setMotorPWM
  5504 ;; This function is called by:
  5505 ;;		_RobotMovement
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text32
  5510   000FAC                     __ptext32:
  5511                           	callstack 0
  5512   000FAC                     _turnLeft:
  5513                           	callstack 25
  5514   000FAC                     
  5515                           ;dc_motor.c: 101: void turnLeft(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 10
      +                          2: {;dc_motor.c: 127:     int i;;dc_motor.c: 128:     for(i=23;i<38;i+=5){
  5516   000FAC  0E00               	movlw	0
  5517   000FAE  6E1B               	movwf	(turnLeft@i+1)^0,c
  5518   000FB0  0E17               	movlw	23
  5519   000FB2  6E1A               	movwf	turnLeft@i^0,c
  5520   000FB4                     l2302:
  5521                           
  5522                           ;dc_motor.c: 129:     (*mL).direction=0;
  5523   000FB4  EE20 F001          	lfsr	2,1
  5524   000FB8  5014               	movf	turnLeft@mL^0,w,c
  5525   000FBA  26D9               	addwf	fsr2l,f,c
  5526   000FBC  5015               	movf	(turnLeft@mL+1)^0,w,c
  5527   000FBE  22DA               	addwfc	fsr2h,f,c
  5528   000FC0  0E00               	movlw	0
  5529   000FC2  6EDF               	movwf	indf2,c
  5530                           
  5531                           ;dc_motor.c: 130:     (*mR).direction=1;
  5532   000FC4  EE20 F001          	lfsr	2,1
  5533   000FC8  5016               	movf	turnLeft@mR^0,w,c
  5534   000FCA  26D9               	addwf	fsr2l,f,c
  5535   000FCC  5017               	movf	(turnLeft@mR+1)^0,w,c
  5536   000FCE  22DA               	addwfc	fsr2h,f,c
  5537   000FD0  0E01               	movlw	1
  5538   000FD2  6EDF               	movwf	indf2,c
  5539   000FD4                     
  5540                           ;dc_motor.c: 131:     (*mL).power=i;
  5541   000FD4  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5542   000FD8  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5543   000FDC  C01A  FFDF         	movff	turnLeft@i,indf2
  5544   000FE0                     
  5545                           ;dc_motor.c: 132:     (*mR).power=i;
  5546   000FE0  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5547   000FE4  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5548   000FE8  C01A  FFDF         	movff	turnLeft@i,indf2
  5549   000FEC                     
  5550                           ;dc_motor.c: 133:     setMotorPWM(mL);
  5551   000FEC  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5552   000FF0  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5553   000FF4  ECC8  F004         	call	_setMotorPWM	;wreg free
  5554   000FF8                     
  5555                           ;dc_motor.c: 134:     setMotorPWM(mR);
  5556   000FF8  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5557   000FFC  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5558   001000  ECC8  F004         	call	_setMotorPWM	;wreg free
  5559   001004                     
  5560                           ;dc_motor.c: 135:     _delay((unsigned long)((104)*(64000000/4000.0)));
  5561   001004  0E09               	movlw	9
  5562   001006  6E19               	movwf	(??_turnLeft+1)^0,c
  5563   001008  0E72               	movlw	114
  5564   00100A  6E18               	movwf	??_turnLeft^0,c
  5565   00100C  0E02               	movlw	2
  5566   00100E                     u2457:
  5567   00100E  2EE8               	decfsz	wreg,f,c
  5568   001010  D7FE               	bra	u2457
  5569   001012  2E18               	decfsz	??_turnLeft^0,f,c
  5570   001014  D7FC               	bra	u2457
  5571   001016  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5572   001018  D7FA               	bra	u2457
  5573   00101A                     
  5574                           ;dc_motor.c: 136:     }
  5575   00101A  0E05               	movlw	5
  5576   00101C  261A               	addwf	turnLeft@i^0,f,c
  5577   00101E  0E00               	movlw	0
  5578   001020  221B               	addwfc	(turnLeft@i+1)^0,f,c
  5579   001022  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
  5580   001024  EF1D  F008         	goto	u1281
  5581   001028  501B               	movf	(turnLeft@i+1)^0,w,c
  5582   00102A  E109               	bnz	u1280
  5583   00102C  0E26               	movlw	38
  5584   00102E  5C1A               	subwf	turnLeft@i^0,w,c
  5585   001030  A0D8               	btfss	status,0,c
  5586   001032  EF1D  F008         	goto	u1281
  5587   001036  EF1F  F008         	goto	u1280
  5588   00103A                     u1281:
  5589   00103A  EFDA  F007         	goto	l2302
  5590   00103E                     u1280:
  5591   00103E                     
  5592                           ;dc_motor.c: 137:     for(i=28;i>13;i-=5){
  5593   00103E  0E00               	movlw	0
  5594   001040  6E1B               	movwf	(turnLeft@i+1)^0,c
  5595   001042  0E1C               	movlw	28
  5596   001044  6E1A               	movwf	turnLeft@i^0,c
  5597   001046                     l2324:
  5598                           
  5599                           ;dc_motor.c: 138:     (*mL).direction=0;
  5600   001046  EE20 F001          	lfsr	2,1
  5601   00104A  5014               	movf	turnLeft@mL^0,w,c
  5602   00104C  26D9               	addwf	fsr2l,f,c
  5603   00104E  5015               	movf	(turnLeft@mL+1)^0,w,c
  5604   001050  22DA               	addwfc	fsr2h,f,c
  5605   001052  0E00               	movlw	0
  5606   001054  6EDF               	movwf	indf2,c
  5607                           
  5608                           ;dc_motor.c: 139:     (*mR).direction=1;
  5609   001056  EE20 F001          	lfsr	2,1
  5610   00105A  5016               	movf	turnLeft@mR^0,w,c
  5611   00105C  26D9               	addwf	fsr2l,f,c
  5612   00105E  5017               	movf	(turnLeft@mR+1)^0,w,c
  5613   001060  22DA               	addwfc	fsr2h,f,c
  5614   001062  0E01               	movlw	1
  5615   001064  6EDF               	movwf	indf2,c
  5616   001066                     
  5617                           ;dc_motor.c: 140:     (*mL).power=i;
  5618   001066  C014  FFD9         	movff	turnLeft@mL,fsr2l
  5619   00106A  C015  FFDA         	movff	turnLeft@mL+1,fsr2h
  5620   00106E  C01A  FFDF         	movff	turnLeft@i,indf2
  5621   001072                     
  5622                           ;dc_motor.c: 141:     (*mR).power=i;
  5623   001072  C016  FFD9         	movff	turnLeft@mR,fsr2l
  5624   001076  C017  FFDA         	movff	turnLeft@mR+1,fsr2h
  5625   00107A  C01A  FFDF         	movff	turnLeft@i,indf2
  5626   00107E                     
  5627                           ;dc_motor.c: 142:     setMotorPWM(mL);
  5628   00107E  C014  F00E         	movff	turnLeft@mL,setMotorPWM@m
  5629   001082  C015  F00F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  5630   001086  ECC8  F004         	call	_setMotorPWM	;wreg free
  5631   00108A                     
  5632                           ;dc_motor.c: 143:     setMotorPWM(mR);
  5633   00108A  C016  F00E         	movff	turnLeft@mR,setMotorPWM@m
  5634   00108E  C017  F00F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  5635   001092  ECC8  F004         	call	_setMotorPWM	;wreg free
  5636   001096                     
  5637                           ;dc_motor.c: 144:     _delay((unsigned long)((100)*(64000000/4000.0)));
  5638   001096  0E09               	movlw	9
  5639   001098  6E19               	movwf	(??_turnLeft+1)^0,c
  5640   00109A  0E1E               	movlw	30
  5641   00109C  6E18               	movwf	??_turnLeft^0,c
  5642   00109E  0EE4               	movlw	228
  5643   0010A0                     u2467:
  5644   0010A0  2EE8               	decfsz	wreg,f,c
  5645   0010A2  D7FE               	bra	u2467
  5646   0010A4  2E18               	decfsz	??_turnLeft^0,f,c
  5647   0010A6  D7FC               	bra	u2467
  5648   0010A8  2E19               	decfsz	(??_turnLeft+1)^0,f,c
  5649   0010AA  D7FA               	bra	u2467
  5650   0010AC  D000               	nop2	
  5651   0010AE                     
  5652                           ;dc_motor.c: 146:     }
  5653   0010AE  0EFB               	movlw	251
  5654   0010B0  261A               	addwf	turnLeft@i^0,f,c
  5655   0010B2  0EFF               	movlw	255
  5656   0010B4  221B               	addwfc	(turnLeft@i+1)^0,f,c
  5657   0010B6  BE1B               	btfsc	(turnLeft@i+1)^0,7,c
  5658   0010B8  EF69  F008         	goto	u1290
  5659   0010BC  501B               	movf	(turnLeft@i+1)^0,w,c
  5660   0010BE  E107               	bnz	u1291
  5661   0010C0  0E0E               	movlw	14
  5662   0010C2  5C1A               	subwf	turnLeft@i^0,w,c
  5663   0010C4  B0D8               	btfsc	status,0,c
  5664   0010C6  EF67  F008         	goto	u1291
  5665   0010CA  EF69  F008         	goto	u1290
  5666   0010CE                     u1291:
  5667   0010CE  EF23  F008         	goto	l2324
  5668   0010D2                     u1290:
  5669   0010D2  0012               	return		;funcret
  5670   0010D4                     __end_of_turnLeft:
  5671                           	callstack 0
  5672                           
  5673 ;; *************** function _setMotorPWM *****************
  5674 ;; Defined at:
  5675 ;;		line 69 in file "dc_motor.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  m               2   13[COMRAM] PTR struct DC_motor
  5678 ;;		 -> main@motorR(9), main@motorL(9), RobotMovement@motorR(2), RobotMovement@motorL(2), 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  negDuty         1   18[COMRAM] unsigned char 
  5681 ;;  posDuty         1   17[COMRAM] unsigned char 
  5682 ;; Return value:  Size  Location     Type
  5683 ;;                  1    wreg      void 
  5684 ;; Registers used:
  5685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5686 ;; Tracked objects:
  5687 ;;		On entry : 0/0
  5688 ;;		On exit  : 0/0
  5689 ;;		Unchanged: 0/0
  5690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5691 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5692 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5694 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5695 ;;Total ram usage:        6 bytes
  5696 ;; Hardware stack levels used: 1
  5697 ;; Hardware stack levels required when called: 3
  5698 ;; This function calls:
  5699 ;;		___lwdiv
  5700 ;;		___wmul
  5701 ;; This function is called by:
  5702 ;;		_stop
  5703 ;;		_turnLeft
  5704 ;;		_turnRight
  5705 ;;		_turnLeftLong
  5706 ;;		_turnRightLong
  5707 ;;		_fullSpeedAhead
  5708 ;;		_moveBack
  5709 ;;		_TimedfullSpeedAhead
  5710 ;;		_Calibrate
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text33
  5715   000990                     __ptext33:
  5716                           	callstack 0
  5717   000990                     _setMotorPWM:
  5718                           	callstack 26
  5719   000990                     
  5720                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  5721   000990  EE20 F002          	lfsr	2,2
  5722   000994  500E               	movf	setMotorPWM@m^0,w,c
  5723   000996  26D9               	addwf	fsr2l,f,c
  5724   000998  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5725   00099A  22DA               	addwfc	fsr2h,f,c
  5726   00099C  50DF               	movf	indf2,w,c
  5727   00099E  B4D8               	btfsc	status,2,c
  5728   0009A0  EFD4  F004         	goto	u1231
  5729   0009A4  EFD6  F004         	goto	u1230
  5730   0009A8                     u1231:
  5731   0009A8  EF0A  F005         	goto	l2202
  5732   0009AC                     u1230:
  5733   0009AC                     
  5734                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  5735   0009AC  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5736   0009B0  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5737   0009B4  50DF               	movf	indf2,w,c
  5738   0009B6  6E10               	movwf	??_setMotorPWM^0,c
  5739   0009B8  5010               	movf	??_setMotorPWM^0,w,c
  5740   0009BA  6E01               	movwf	___wmul@multiplier^0,c
  5741   0009BC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5742   0009BE  EE20 F003          	lfsr	2,3
  5743   0009C2  500E               	movf	setMotorPWM@m^0,w,c
  5744   0009C4  26D9               	addwf	fsr2l,f,c
  5745   0009C6  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5746   0009C8  22DA               	addwfc	fsr2h,f,c
  5747   0009CA  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5748   0009CE  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5749   0009D2  EC53  F00D         	call	___wmul	;wreg free
  5750   0009D6  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5751   0009DA  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5752   0009DE  0E00               	movlw	0
  5753   0009E0  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5754   0009E2  0E64               	movlw	100
  5755   0009E4  6E09               	movwf	___lwdiv@divisor^0,c
  5756   0009E6  EC3D  F00B         	call	___lwdiv	;wreg free
  5757   0009EA  EE20 F003          	lfsr	2,3
  5758   0009EE  500E               	movf	setMotorPWM@m^0,w,c
  5759   0009F0  26D9               	addwf	fsr2l,f,c
  5760   0009F2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5761   0009F4  22DA               	addwfc	fsr2h,f,c
  5762   0009F6  50DF               	movf	indf2,w,c
  5763   0009F8  6E11               	movwf	(??_setMotorPWM+1)^0,c
  5764   0009FA  5007               	movf	?___lwdiv^0,w,c
  5765   0009FC  5C11               	subwf	(??_setMotorPWM+1)^0,w,c
  5766   0009FE  6E12               	movwf	setMotorPWM@posDuty^0,c
  5767   000A00                     
  5768                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  5769   000A00  EE20 F003          	lfsr	2,3
  5770   000A04  500E               	movf	setMotorPWM@m^0,w,c
  5771   000A06  26D9               	addwf	fsr2l,f,c
  5772   000A08  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5773   000A0A  22DA               	addwfc	fsr2h,f,c
  5774   000A0C  50DF               	movf	indf2,w,c
  5775   000A0E  6E13               	movwf	setMotorPWM@negDuty^0,c
  5776                           
  5777                           ;dc_motor.c: 76:     }
  5778   000A10  EF2D  F005         	goto	l2206
  5779   000A14                     l2202:
  5780                           
  5781                           ;dc_motor.c: 78:         posDuty=0;
  5782   000A14  0E00               	movlw	0
  5783   000A16  6E12               	movwf	setMotorPWM@posDuty^0,c
  5784   000A18                     
  5785                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  5786   000A18  C00E  FFD9         	movff	setMotorPWM@m,fsr2l
  5787   000A1C  C00F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  5788   000A20  50DF               	movf	indf2,w,c
  5789   000A22  6E10               	movwf	??_setMotorPWM^0,c
  5790   000A24  5010               	movf	??_setMotorPWM^0,w,c
  5791   000A26  6E01               	movwf	___wmul@multiplier^0,c
  5792   000A28  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5793   000A2A  EE20 F003          	lfsr	2,3
  5794   000A2E  500E               	movf	setMotorPWM@m^0,w,c
  5795   000A30  26D9               	addwf	fsr2l,f,c
  5796   000A32  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5797   000A34  22DA               	addwfc	fsr2h,f,c
  5798   000A36  CFDE F003          	movff	postinc2,___wmul@multiplicand
  5799   000A3A  CFDD F004          	movff	postdec2,___wmul@multiplicand+1
  5800   000A3E  EC53  F00D         	call	___wmul	;wreg free
  5801   000A42  C001  F007         	movff	?___wmul,___lwdiv@dividend
  5802   000A46  C002  F008         	movff	?___wmul+1,___lwdiv@dividend+1
  5803   000A4A  0E00               	movlw	0
  5804   000A4C  6E0A               	movwf	(___lwdiv@divisor+1)^0,c
  5805   000A4E  0E64               	movlw	100
  5806   000A50  6E09               	movwf	___lwdiv@divisor^0,c
  5807   000A52  EC3D  F00B         	call	___lwdiv	;wreg free
  5808   000A56  5007               	movf	?___lwdiv^0,w,c
  5809   000A58  6E13               	movwf	setMotorPWM@negDuty^0,c
  5810   000A5A                     l2206:
  5811                           
  5812                           ;dc_motor.c: 82:     if (m->direction) {
  5813   000A5A  EE20 F001          	lfsr	2,1
  5814   000A5E  500E               	movf	setMotorPWM@m^0,w,c
  5815   000A60  26D9               	addwf	fsr2l,f,c
  5816   000A62  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5817   000A64  22DA               	addwfc	fsr2h,f,c
  5818   000A66  50DF               	movf	indf2,w,c
  5819   000A68  B4D8               	btfsc	status,2,c
  5820   000A6A  EF39  F005         	goto	u1241
  5821   000A6E  EF3B  F005         	goto	u1240
  5822   000A72                     u1241:
  5823   000A72  EF5D  F005         	goto	l2210
  5824   000A76                     u1240:
  5825   000A76                     
  5826                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  5827   000A76  EE20 F005          	lfsr	2,5
  5828   000A7A  500E               	movf	setMotorPWM@m^0,w,c
  5829   000A7C  26D9               	addwf	fsr2l,f,c
  5830   000A7E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5831   000A80  22DA               	addwfc	fsr2h,f,c
  5832   000A82  CFDE F010          	movff	postinc2,??_setMotorPWM
  5833   000A86  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5834   000A8A  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5835   000A8E  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5836   000A92  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5837                           
  5838                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  5839   000A96  EE20 F007          	lfsr	2,7
  5840   000A9A  500E               	movf	setMotorPWM@m^0,w,c
  5841   000A9C  26D9               	addwf	fsr2l,f,c
  5842   000A9E  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5843   000AA0  22DA               	addwfc	fsr2h,f,c
  5844   000AA2  CFDE F010          	movff	postinc2,??_setMotorPWM
  5845   000AA6  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5846   000AAA  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5847   000AAE  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5848   000AB2  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5849                           
  5850                           ;dc_motor.c: 85:     } else {
  5851   000AB6  EF7D  F005         	goto	l211
  5852   000ABA                     l2210:
  5853                           
  5854                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  5855   000ABA  EE20 F005          	lfsr	2,5
  5856   000ABE  500E               	movf	setMotorPWM@m^0,w,c
  5857   000AC0  26D9               	addwf	fsr2l,f,c
  5858   000AC2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5859   000AC4  22DA               	addwfc	fsr2h,f,c
  5860   000AC6  CFDE F010          	movff	postinc2,??_setMotorPWM
  5861   000ACA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5862   000ACE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5863   000AD2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5864   000AD6  C013  FFDF         	movff	setMotorPWM@negDuty,indf2
  5865                           
  5866                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  5867   000ADA  EE20 F007          	lfsr	2,7
  5868   000ADE  500E               	movf	setMotorPWM@m^0,w,c
  5869   000AE0  26D9               	addwf	fsr2l,f,c
  5870   000AE2  500F               	movf	(setMotorPWM@m+1)^0,w,c
  5871   000AE4  22DA               	addwfc	fsr2h,f,c
  5872   000AE6  CFDE F010          	movff	postinc2,??_setMotorPWM
  5873   000AEA  CFDD F011          	movff	postdec2,??_setMotorPWM+1
  5874   000AEE  C010  FFD9         	movff	??_setMotorPWM,fsr2l
  5875   000AF2  C011  FFDA         	movff	??_setMotorPWM+1,fsr2h
  5876   000AF6  C012  FFDF         	movff	setMotorPWM@posDuty,indf2
  5877   000AFA                     l211:
  5878   000AFA  0012               	return		;funcret
  5879   000AFC                     __end_of_setMotorPWM:
  5880                           	callstack 0
  5881                           
  5882 ;; *************** function ___wmul *****************
  5883 ;; Defined at:
  5884 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  multiplier      2    0[COMRAM] unsigned int 
  5887 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;  product         2    4[COMRAM] unsigned int 
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  2    0[COMRAM] unsigned int 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2, status,0, prodl, prodh
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5899 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5902 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5903 ;;Total ram usage:        6 bytes
  5904 ;; Hardware stack levels used: 1
  5905 ;; Hardware stack levels required when called: 2
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_get_color_distance
  5910 ;;		_get_color_code
  5911 ;;		_get_wall_presence
  5912 ;;		_setMotorPWM
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text34
  5917   001AA6                     __ptext34:
  5918                           	callstack 0
  5919   001AA6                     ___wmul:
  5920                           	callstack 26
  5921   001AA6  5001               	movf	___wmul@multiplier^0,w,c
  5922   001AA8  0203               	mulwf	___wmul@multiplicand^0,c
  5923   001AAA  CFF3 F005          	movff	prodl,___wmul@product
  5924   001AAE  CFF4 F006          	movff	prodh,___wmul@product+1
  5925   001AB2  5001               	movf	___wmul@multiplier^0,w,c
  5926   001AB4  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5927   001AB6  50F3               	movf	243,w,c
  5928   001AB8  2606               	addwf	(___wmul@product+1)^0,f,c
  5929   001ABA  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5930   001ABC  0203               	mulwf	___wmul@multiplicand^0,c
  5931   001ABE  50F3               	movf	243,w,c
  5932   001AC0  2606               	addwf	(___wmul@product+1)^0,f,c
  5933   001AC2  C005  F001         	movff	___wmul@product,?___wmul
  5934   001AC6  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5935   001ACA  0012               	return		;funcret
  5936   001ACC                     __end_of___wmul:
  5937                           	callstack 0
  5938                           
  5939 ;; *************** function ___lwdiv *****************
  5940 ;; Defined at:
  5941 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  dividend        2    6[COMRAM] unsigned int 
  5944 ;;  divisor         2    8[COMRAM] unsigned int 
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;  quotient        2   10[COMRAM] unsigned int 
  5947 ;;  counter         1   12[COMRAM] unsigned char 
  5948 ;; Return value:  Size  Location     Type
  5949 ;;                  2    6[COMRAM] unsigned int 
  5950 ;; Registers used:
  5951 ;;		wreg, status,2, status,0
  5952 ;; Tracked objects:
  5953 ;;		On entry : 0/0
  5954 ;;		On exit  : 0/0
  5955 ;;		Unchanged: 0/0
  5956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5957 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5958 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5960 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5961 ;;Total ram usage:        7 bytes
  5962 ;; Hardware stack levels used: 1
  5963 ;; Hardware stack levels required when called: 2
  5964 ;; This function calls:
  5965 ;;		Nothing
  5966 ;; This function is called by:
  5967 ;;		_calibrate_black
  5968 ;;		_setMotorPWM
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text35
  5973   00167A                     __ptext35:
  5974                           	callstack 0
  5975   00167A                     ___lwdiv:
  5976                           	callstack 26
  5977   00167A  0E00               	movlw	0
  5978   00167C  6E0C               	movwf	(___lwdiv@quotient+1)^0,c
  5979   00167E  0E00               	movlw	0
  5980   001680  6E0B               	movwf	___lwdiv@quotient^0,c
  5981   001682  5009               	movf	___lwdiv@divisor^0,w,c
  5982   001684  100A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5983   001686  B4D8               	btfsc	status,2,c
  5984   001688  EF48  F00B         	goto	u1171
  5985   00168C  EF4A  F00B         	goto	u1170
  5986   001690                     u1171:
  5987   001690  EF72  F00B         	goto	l912
  5988   001694                     u1170:
  5989   001694  0E01               	movlw	1
  5990   001696  6E0D               	movwf	___lwdiv@counter^0,c
  5991   001698  EF52  F00B         	goto	l2150
  5992   00169C                     l2148:
  5993   00169C  90D8               	bcf	status,0,c
  5994   00169E  3609               	rlcf	___lwdiv@divisor^0,f,c
  5995   0016A0  360A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5996   0016A2  2A0D               	incf	___lwdiv@counter^0,f,c
  5997   0016A4                     l2150:
  5998   0016A4  AE0A               	btfss	(___lwdiv@divisor+1)^0,7,c
  5999   0016A6  EF57  F00B         	goto	u1181
  6000   0016AA  EF59  F00B         	goto	u1180
  6001   0016AE                     u1181:
  6002   0016AE  EF4E  F00B         	goto	l2148
  6003   0016B2                     u1180:
  6004   0016B2                     l2152:
  6005   0016B2  90D8               	bcf	status,0,c
  6006   0016B4  360B               	rlcf	___lwdiv@quotient^0,f,c
  6007   0016B6  360C               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6008   0016B8  5009               	movf	___lwdiv@divisor^0,w,c
  6009   0016BA  5C07               	subwf	___lwdiv@dividend^0,w,c
  6010   0016BC  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6011   0016BE  5808               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6012   0016C0  A0D8               	btfss	status,0,c
  6013   0016C2  EF65  F00B         	goto	u1191
  6014   0016C6  EF67  F00B         	goto	u1190
  6015   0016CA                     u1191:
  6016   0016CA  EF6C  F00B         	goto	l2160
  6017   0016CE                     u1190:
  6018   0016CE  5009               	movf	___lwdiv@divisor^0,w,c
  6019   0016D0  5E07               	subwf	___lwdiv@dividend^0,f,c
  6020   0016D2  500A               	movf	(___lwdiv@divisor+1)^0,w,c
  6021   0016D4  5A08               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6022   0016D6  800B               	bsf	___lwdiv@quotient^0,0,c
  6023   0016D8                     l2160:
  6024   0016D8  90D8               	bcf	status,0,c
  6025   0016DA  320A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6026   0016DC  3209               	rrcf	___lwdiv@divisor^0,f,c
  6027   0016DE  2E0D               	decfsz	___lwdiv@counter^0,f,c
  6028   0016E0  EF59  F00B         	goto	l2152
  6029   0016E4                     l912:
  6030   0016E4  C00B  F007         	movff	___lwdiv@quotient,?___lwdiv
  6031   0016E8  C00C  F008         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6032   0016EC  0012               	return		;funcret
  6033   0016EE                     __end_of___lwdiv:
  6034                           	callstack 0
  6035                           
  6036 ;; *************** function _Interrupts_init *****************
  6037 ;; Defined at:
  6038 ;;		line 10 in file "interrupts.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		None
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6056 ;;Total ram usage:        0 bytes
  6057 ;; Hardware stack levels used: 1
  6058 ;; Hardware stack levels required when called: 2
  6059 ;; This function calls:
  6060 ;;		Nothing
  6061 ;; This function is called by:
  6062 ;;		_main
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text36
  6067   001B32                     __ptext36:
  6068                           	callstack 0
  6069   001B32                     _Interrupts_init:
  6070                           	callstack 28
  6071   001B32                     
  6072                           ;interrupts.c: 12:     INTCONbits.PEIE = 1;
  6073   001B32  8CF2               	bsf	242,6,c	;volatile
  6074                           
  6075                           ;interrupts.c: 13:     PIE0bits.TMR0IE = 1;
  6076   001B34  010E               	movlb	14	; () banked
  6077   001B36  8B29               	bsf	41,5,b	;volatile
  6078                           
  6079                           ;interrupts.c: 14:     PIE2bits.C1IE = 1;
  6080   001B38  812B               	bsf	43,0,b	;volatile
  6081                           
  6082                           ;interrupts.c: 15:     INTCONbits.GIE = 1;
  6083   001B3A  8EF2               	bsf	242,7,c	;volatile
  6084   001B3C                     
  6085                           ; BSR set to: 14
  6086   001B3C  0012               	return		;funcret
  6087   001B3E                     __end_of_Interrupts_init:
  6088                           	callstack 0
  6089                           
  6090 ;; *************** function _HighISR *****************
  6091 ;; Defined at:
  6092 ;;		line 22 in file "interrupts.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used: 1
  6112 ;; Hardware stack levels required when called: 1
  6113 ;; This function calls:
  6114 ;;		_increment_seconds
  6115 ;; This function is called by:
  6116 ;;		Interrupt level 2
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	intcode
  6121   000008                     __pintcode:
  6122                           	callstack 0
  6123   000008                     _HighISR:
  6124                           	callstack 24
  6125                           
  6126                           ; BSR set to: 14
  6127                           ;incstack = 0
  6128   000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6129   00000A                     
  6130                           ;interrupts.c: 24:     if(PIR0bits.TMR0IF == 1){
  6131   00000A  010E               	movlb	14	; () banked
  6132   00000C  AB33               	btfss	51,5,b	;volatile
  6133   00000E  EF0B  F000         	goto	i2u75_41
  6134   000012  EF0D  F000         	goto	i2u75_40
  6135   000016                     i2u75_41:
  6136   000016  EF15  F000         	goto	i2l364
  6137   00001A                     i2u75_40:
  6138   00001A                     
  6139                           ; BSR set to: 14
  6140                           ;interrupts.c: 25:     increment_seconds();
  6141   00001A  ECAE  F00D         	call	_increment_seconds	;wreg free
  6142   00001E                     
  6143                           ;interrupts.c: 27:     TMR0H=0b11100111;
  6144   00001E  0EE7               	movlw	231
  6145   000020  6ED4               	movwf	212,c	;volatile
  6146   000022                     
  6147                           ;interrupts.c: 28:     TMR0L=0b10010101;
  6148   000022  0E95               	movlw	149
  6149   000024  6ED3               	movwf	211,c	;volatile
  6150   000026                     
  6151                           ;interrupts.c: 30:     PIR0bits.TMR0IF = 0;
  6152   000026  010E               	movlb	14	; () banked
  6153   000028  9B33               	bcf	51,5,b	;volatile
  6154   00002A                     i2l364:
  6155                           
  6156                           ; BSR set to: 14
  6157   00002A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6158   00002C  0011               	retfie		f
  6159   00002E                     __end_of_HighISR:
  6160                           	callstack 0
  6161                           
  6162 ;; *************** function _increment_seconds *****************
  6163 ;; Defined at:
  6164 ;;		line 309 in file "dc_motor.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      void 
  6171 ;; Registers used:
  6172 ;;		status,2, status,0
  6173 ;; Tracked objects:
  6174 ;;		On entry : 0/0
  6175 ;;		On exit  : 0/0
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used: 1
  6184 ;; This function calls:
  6185 ;;		Nothing
  6186 ;; This function is called by:
  6187 ;;		_HighISR
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191                           	psect	text38
  6192   001B5C                     __ptext38:
  6193                           	callstack 0
  6194   001B5C                     _increment_seconds:
  6195                           	callstack 24
  6196   001B5C                     
  6197                           ;dc_motor.c: 311:     seconds += 1;
  6198   001B5C  4A5D               	infsnz	_seconds^0,f,c
  6199   001B5E  2A5E               	incf	(_seconds+1)^0,f,c
  6200   001B60  0012               	return		;funcret
  6201   001B62                     __end_of_increment_seconds:
  6202                           	callstack 0
  6203   000000                     
  6204                           	psect	rparam
  6205   000000                     
  6206                           	psect	temp
  6207   00005F                     btemp:
  6208                           	callstack 0
  6209   00005F                     	ds	1
  6210   000000                     int$flags	set	btemp
  6211   000000                     wtemp8	set	btemp+1
  6212   000000                     ttemp5	set	btemp+1
  6213   000000                     ttemp6	set	btemp+4
  6214   000000                     ttemp7	set	btemp+8
  6215                           
  6216                           	psect	idloc
  6217                           
  6218                           ;Config register IDLOC0 @ 0x200000
  6219                           ;	unspecified, using default values
  6220   200000                     	org	2097152
  6221   200000  0FFF               	dw	4095
  6222                           
  6223                           ;Config register IDLOC1 @ 0x200002
  6224                           ;	unspecified, using default values
  6225   200002                     	org	2097154
  6226   200002  0FFF               	dw	4095
  6227                           
  6228                           ;Config register IDLOC2 @ 0x200004
  6229                           ;	unspecified, using default values
  6230   200004                     	org	2097156
  6231   200004  0FFF               	dw	4095
  6232                           
  6233                           ;Config register IDLOC3 @ 0x200006
  6234                           ;	unspecified, using default values
  6235   200006                     	org	2097158
  6236   200006  0FFF               	dw	4095
  6237                           
  6238                           ;Config register IDLOC4 @ 0x200008
  6239                           ;	unspecified, using default values
  6240   200008                     	org	2097160
  6241   200008  0FFF               	dw	4095
  6242                           
  6243                           ;Config register IDLOC5 @ 0x20000A
  6244                           ;	unspecified, using default values
  6245   20000A                     	org	2097162
  6246   20000A  0FFF               	dw	4095
  6247                           
  6248                           ;Config register IDLOC6 @ 0x20000C
  6249                           ;	unspecified, using default values
  6250   20000C                     	org	2097164
  6251   20000C  0FFF               	dw	4095
  6252                           
  6253                           ;Config register IDLOC7 @ 0x20000E
  6254                           ;	unspecified, using default values
  6255   20000E                     	org	2097166
  6256   20000E  0FFF               	dw	4095
  6257                           
  6258                           	psect	config
  6259                           
  6260                           ;Config register CONFIG1L @ 0x300000
  6261                           ;	External Oscillator mode Selection bits
  6262                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  6263                           ;	Power-up default value for COSC bits
  6264                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  6265   300000                     	org	3145728
  6266   300000  AA                 	db	170
  6267                           
  6268                           ;Config register CONFIG1H @ 0x300001
  6269                           ;	unspecified, using default values
  6270                           ;	Clock Out Enable bit
  6271                           ;	CLKOUTEN = 0x1, unprogrammed default
  6272                           ;	Clock Switch Enable bit
  6273                           ;	CSWEN = 0x1, unprogrammed default
  6274                           ;	Fail-Safe Clock Monitor Enable bit
  6275                           ;	FCMEN = 0x1, unprogrammed default
  6276   300001                     	org	3145729
  6277   300001  FF                 	db	255
  6278                           
  6279                           ;Config register CONFIG2L @ 0x300002
  6280                           ;	unspecified, using default values
  6281                           ;	Master Clear Enable bit
  6282                           ;	MCLRE = 0x1, unprogrammed default
  6283                           ;	Power-up Timer Enable bit
  6284                           ;	PWRTE = 0x1, unprogrammed default
  6285                           ;	Low-power BOR enable bit
  6286                           ;	LPBOREN = 0x1, unprogrammed default
  6287                           ;	Brown-out Reset Enable bits
  6288                           ;	BOREN = 0x3, unprogrammed default
  6289   300002                     	org	3145730
  6290   300002  FF                 	db	255
  6291                           
  6292                           ;Config register CONFIG2H @ 0x300003
  6293                           ;	unspecified, using default values
  6294                           ;	Brown Out Reset Voltage selection bits
  6295                           ;	BORV = 0x3, unprogrammed default
  6296                           ;	ZCD Disable bit
  6297                           ;	ZCD = 0x1, unprogrammed default
  6298                           ;	PPSLOCK bit One-Way Set Enable bit
  6299                           ;	PPS1WAY = 0x1, unprogrammed default
  6300                           ;	Stack Full/Underflow Reset Enable bit
  6301                           ;	STVREN = 0x1, unprogrammed default
  6302                           ;	Debugger Enable bit
  6303                           ;	DEBUG = 0x1, unprogrammed default
  6304                           ;	Extended Instruction Set Enable bit
  6305                           ;	XINST = 0x1, unprogrammed default
  6306   300003                     	org	3145731
  6307   300003  FF                 	db	255
  6308                           
  6309                           ;Config register CONFIG3L @ 0x300004
  6310                           ;	WDT Period Select bits
  6311                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6312                           ;	WDT operating mode
  6313                           ;	WDTE = OFF, WDT Disabled
  6314   300004                     	org	3145732
  6315   300004  9F                 	db	159
  6316                           
  6317                           ;Config register CONFIG3H @ 0x300005
  6318                           ;	unspecified, using default values
  6319                           ;	WDT Window Select bits
  6320                           ;	WDTCWS = 0x7, unprogrammed default
  6321                           ;	WDT input clock selector
  6322                           ;	WDTCCS = 0x7, unprogrammed default
  6323   300005                     	org	3145733
  6324   300005  FF                 	db	255
  6325                           
  6326                           ;Config register CONFIG4L @ 0x300006
  6327                           ;	unspecified, using default values
  6328                           ;	Write Protection Block 0
  6329                           ;	WRT0 = 0x1, unprogrammed default
  6330                           ;	Write Protection Block 1
  6331                           ;	WRT1 = 0x1, unprogrammed default
  6332                           ;	Write Protection Block 2
  6333                           ;	WRT2 = 0x1, unprogrammed default
  6334                           ;	Write Protection Block 3
  6335                           ;	WRT3 = 0x1, unprogrammed default
  6336                           ;	Write Protection Block 3
  6337                           ;	WRT4 = 0x1, unprogrammed default
  6338                           ;	Write Protection Block 3
  6339                           ;	WRT5 = 0x1, unprogrammed default
  6340                           ;	Write Protection Block 3
  6341                           ;	WRT6 = 0x1, unprogrammed default
  6342                           ;	Write Protection Block 3
  6343                           ;	WRT7 = 0x1, unprogrammed default
  6344   300006                     	org	3145734
  6345   300006  FF                 	db	255
  6346                           
  6347                           ;Config register CONFIG4H @ 0x300007
  6348                           ;	unspecified, using default values
  6349                           ;	Configuration Register Write Protection bit
  6350                           ;	WRTC = 0x1, unprogrammed default
  6351                           ;	Boot Block Write Protection bit
  6352                           ;	WRTB = 0x1, unprogrammed default
  6353                           ;	Data EEPROM Write Protection bit
  6354                           ;	WRTD = 0x1, unprogrammed default
  6355                           ;	Scanner Enable bit
  6356                           ;	SCANE = 0x1, unprogrammed default
  6357                           ;	Low Voltage Programming Enable bit
  6358                           ;	LVP = 0x1, unprogrammed default
  6359   300007                     	org	3145735
  6360   300007  FF                 	db	255
  6361                           
  6362                           ;Config register CONFIG5L @ 0x300008
  6363                           ;	unspecified, using default values
  6364                           ;	UserNVM Program Memory Code Protection bit
  6365                           ;	CP = 0x1, unprogrammed default
  6366                           ;	DataNVM Memory Code Protection bit
  6367                           ;	CPD = 0x1, unprogrammed default
  6368   300008                     	org	3145736
  6369   300008  FF                 	db	255
  6370                           
  6371                           ;Config register CONFIG5H @ 0x300009
  6372                           ;	unspecified, using default values
  6373   300009                     	org	3145737
  6374   300009  FF                 	db	255
  6375                           
  6376                           ;Config register CONFIG6L @ 0x30000A
  6377                           ;	unspecified, using default values
  6378                           ;	Table Read Protection Block 0
  6379                           ;	EBTR0 = 0x1, unprogrammed default
  6380                           ;	Table Read Protection Block 1
  6381                           ;	EBTR1 = 0x1, unprogrammed default
  6382                           ;	Table Read Protection Block 2
  6383                           ;	EBTR2 = 0x1, unprogrammed default
  6384                           ;	Table Read Protection Block 3
  6385                           ;	EBTR3 = 0x1, unprogrammed default
  6386                           ;	Table Read Protection Block 4
  6387                           ;	EBTR4 = 0x1, unprogrammed default
  6388                           ;	Table Read Protection Block 5
  6389                           ;	EBTR5 = 0x1, unprogrammed default
  6390                           ;	Table Read Protection Block 6
  6391                           ;	EBTR6 = 0x1, unprogrammed default
  6392                           ;	Table Read Protection Block 7
  6393                           ;	EBTR7 = 0x1, unprogrammed default
  6394   30000A                     	org	3145738
  6395   30000A  FF                 	db	255
  6396                           
  6397                           ;Config register CONFIG6H @ 0x30000B
  6398                           ;	unspecified, using default values
  6399                           ;	Boot Block Table Read Protection bit
  6400                           ;	EBTRB = 0x1, unprogrammed default
  6401   30000B                     	org	3145739
  6402   30000B  FF                 	db	255
  6403                           tosu	equ	0xFFF
  6404                           tosh	equ	0xFFE
  6405                           tosl	equ	0xFFD
  6406                           stkptr	equ	0xFFC
  6407                           pclatu	equ	0xFFB
  6408                           pclath	equ	0xFFA
  6409                           pcl	equ	0xFF9
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           indf0	equ	0xFEF
  6417                           postinc0	equ	0xFEE
  6418                           postdec0	equ	0xFED
  6419                           preinc0	equ	0xFEC
  6420                           plusw0	equ	0xFEB
  6421                           fsr0h	equ	0xFEA
  6422                           fsr0l	equ	0xFE9
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           postinc1	equ	0xFE6
  6426                           postdec1	equ	0xFE5
  6427                           preinc1	equ	0xFE4
  6428                           plusw1	equ	0xFE3
  6429                           fsr1h	equ	0xFE2
  6430                           fsr1l	equ	0xFE1
  6431                           bsr	equ	0xFE0
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           preinc2	equ	0xFDC
  6436                           plusw2	equ	0xFDB
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         236
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      94
    BANK0           160     44     154
    BANK1           256      0     232
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    RobotMovement@motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    RobotMovement@motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    RobotMovement@motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    RobotMovement@motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 0
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), 

    Calibrate@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    Calibrate@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorR(COMRAM[2]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorL(COMRAM[2]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorR(COMRAM[2]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorL(COMRAM[2]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorR(COMRAM[2]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorL(COMRAM[2]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorR(COMRAM[2]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 2
		 -> RobotMovement@motorL(COMRAM[2]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(COMRAM[9]), 

    S1015DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1015DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(COMRAM[9]), main@motorL(COMRAM[9]), RobotMovement@motorR(COMRAM[2]), RobotMovement@motorL(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_get_color_code
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _get_wall_presence->_color_read_Clear
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnLeftLong
    _RobotMovement->_turnRight
    _RobotMovement->_turnRightLong
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_get_color_code

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0   47505
                                             56 COMRAM    20    20      0
                    _Interrupts_init
                      _RobotMovement
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                  _get_wall_presence
                    _initDCmotorsPWM
                           _moveBack
                               _stop
 ---------------------------------------------------------------------------------
 (1) _stop                                                 4     0      4    4349
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _moveBack                                             8     2      6    4491
                                             19 COMRAM     8     2      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_presence                                    8     6      2    2632
                                             11 COMRAM     8     6      2
                             ___wmul
                   _color_read_Clear
                      _set_led_color
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    6509
                                             52 COMRAM     4     2      2
                                              0 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2034
                                              6 COMRAM    46    22     24
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     674
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                             12 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    4545
                                             19 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    4357
                                             19 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     294
                                              2 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1697
                                             11 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      6     6      0    2366
                                             13 COMRAM     6     6      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1358
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Clear                                     7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     113
                                              4 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      22
                                              1 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      45
                                              1 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   19972
                                             27 COMRAM    12     6      6
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                            8     4      4    5009
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                             8     4      4    4705
                                             19 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4109
                                             13 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1115
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     510
                                              6 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0       0
                  _increment_seconds
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _turnLeft
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_wall_presence
     ___wmul
     _color_read_Clear
     _set_led_color
   _initDCmotorsPWM
   _moveBack
     _setMotorPWM
   _stop
     _setMotorPWM

 _HighISR (ROOT)
   _increment_seconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E8       7       90.6%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2C      9A       5       96.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5E       1      100.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E0      60        0.0%
DATA                 0      0     1E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Dec 08 10:01:19 2022

               _color_read_Red 1814             RobotMovement@color 001C                _color_read_Blue 1904  
                           l71 0BFC                             l73 0C32                             l82 1AEA  
                           l74 0C12                             l91 18B2                             l67 0BE0  
                           l85 1862                             l77 0C24                             l94 1902  
                           l88 1952            ___wmul@multiplicand 0003               _color_read_Clear 18B4  
             ?_calibrate_black 0001               _color_read_Green 1864            RobotMovement@motorL 001E  
          RobotMovement@motorR 0020              ??_Interrupts_init 0001                            l112 19B0  
                          l113 19B2                            l114 19C6                            l211 0AFA  
                          l115 19C8                            l116 19DC                            l204 1562  
                          l221 10D2                            l141 11F4                            l109 098E  
                          l118 19DE                            l214 1A52                            l320 1A7C  
                          l144 1392                            l136 081A                            l242 0D5A  
                          l138 0822                            l235 0FAA                            l323 1A7E  
                          l147 14D2                            l228 0E82                            l332 1B5A  
                          l421 1ACA                            l341 1A20                            l245 1812  
                          l326 1AA4                            l254 15EE                            l335 1B46  
                          l432 1746                            l329 1B50                            l433 1756  
                          l282 032A                            l418 1B0A                            l338 1B30  
                          l283 036C                            l277 01EA                            l293 199A  
                          l358 1B3C                            l278 022C                            l455 1436  
                          l448 1426                            l289 0484                            l912 16E4  
                          l919 16EC                            _RGB 00EE               ?_calibrate_white 0001  
                          wreg 000FE8                           l2102 1A7E                           l2110 1B28  
                         l2200 0A00                           l2104 1A8E                           l2120 1B56  
                         l2112 1B2C                           l2210 0ABA                           l2202 0A14  
                         l2130 1A1C                           l2122 19E2                           l2106 1B48  
                         l2114 1B3E                           l2204 0A18                           l2220 1A68  
                         l2212 1A54                           l2132 1A1E                           l2124 19E6  
                         l2108 1B4C                           l2116 1B42                           l2150 16A4  
                         l2142 167A                           l2206 0A5A                           l2310 0FF8  
                         l2302 0FB4                           l2222 1A6A                           l2214 1A5E  
                         l2126 19EE                           l2118 1B52                           l2230 130C  
                         l2160 16D8                           l2152 16B2                           l2144 1682  
                         l2136 1AA6                           l2208 0A76                           l2312 1004  
                         l2304 0FD4                           l2400 0EDC                           l2216 1A64  
                         l2128 19F6                           l2240 1374                           l2232 131E  
                         l2224 1ACE                           l2162 16DE                           l2154 16B8  
                         l2146 1694                           l2138 1AC2                           l2330 107E  
                         l2314 101A                           l2306 0FE0                           l2402 0EF4  
                         l2218 1A66                           l2170 1904                           l2250 1106  
                         l2242 1386                           l2234 132A                           l2226 12EA  
                         l2156 16CE                           l2148 169C                           l2332 108A  
                         l2324 1046                           l2316 1022                           l2308 0FEC  
                         l2420 0F64                           l2412 0F20                           l2404 0EFC  
                         l2340 0D5C                           l2172 194A                           l2164 1814  
                         l2260 116A                           l2252 1112                           l2244 10D4  
                         l2236 1352                           l2228 12F6                           l2500 1416  
                         l2158 16D6                           l2334 1096                           l2326 1066  
                         l2318 103E                           l2422 0F70                           l2414 0F40  
                         l2406 0F18                           l2350 0D90                           l2182 18B4  
                         l2166 185A                           l2190 19AA                           l2270 11D2  
                         l2262 118C                           l2254 1138                           l2246 10E0  
                         l2238 135E                           l2510 0B1A                           l2502 1420  
                         l2336 10AE                           l2328 1072                           l2424 0F86  
                         l2416 0F4C                           l2360 0DD4                           l2352 0D9C  
                         l2440 0C74                           l2184 18FA                           l2176 1864  
                         l2192 19C0                           l2264 1198                           l2256 1144  
                         l2248 10F6                           l2520 0B34                           l2512 0B24  
                         l2504 0AFC                           l2280 089C                           l2272 0824  
                         l2600 0772                           l2338 10B6                           l2426 0F8E  
                         l2418 0F58                           l2370 0E18                           l2362 0DF0  
                         l2354 0DA8                           l2346 0D64                           l2450 0CC8  
                         l2442 0C80                           l2434 0C3C                           l2178 18AA  
                         l2194 19D6                           l2266 11A4                           l2258 115A  
                         l2530 0B8E                           l2522 0B46                           l2514 0B2E  
                         l2506 0B00                           l2290 092A                           l2282 08B8  
                         l2274 0842                           l2610 07D8                           l2196 0990  
                         l2380 0E5E                           l2372 0E24                           l2356 0DB4  
                         l2348 0D84                           l2460 0CFC                           l2444 0C8C  
                         l2436 0C5C                           l2428 0C34                           l2700 0076  
                         l2188 199C                           l2268 11BA                           l2540 0BD8  
                         l2532 0BA0                           l2524 0B58                           l2516 0B30  
                         l2508 0B0A                           l2292 0932                           l2284 08D0  
                         l2276 085E                           l2612 07F0                           l2620 1444  
                         l2198 09AC                           l2390 0E8C                           l2382 0E66  
                         l2374 0E30                           l2358 0DCC                           l2470 0D3E  
                         l2462 0D08                           l2446 0CA4                           l2438 0C68  
                         l2710 00CE                           l2702 0088                           l2550 0C0E  
                         l2542 0BDC                           l2534 0BB2                           l2526 0B6A  
                         l2518 0B32                           l2286 08F6                           l2278 0876  
                         l2614 0800                           l2606 077A                           l2630 14A0  
                         l2622 145A                           l2296 0FAC                           l2392 0EAC  
                         l2384 0E84                           l2376 0E3C                           l2368 0DF8  
                         l2464 0D14                           l2456 0CD0                           l2448 0CAC  
                         l2720 0104                           l2704 009C                           l2800 1AEC  
                         l2552 0C20                           l2544 0BDE                           l2536 0BC4  
                         l2528 0B7C                           l2480 1726                           l2472 16EE  
                         l2288 0912                           l2616 0804                           l2608 07A8  
                         l2560 04BA                           l2624 1466                           l2640 1532  
                         l2394 0EB8                           l2378 0E48                           l2466 0D20  
                         l2458 0CF0                           l2730 016E                           l2722 0108  
                         l2706 00B6                           l2802 1AF4                           l2546 0BEE  
                         l2538 0BD6                           l2490 13CE                           l2482 1394  
                         l2474 16FE                           l2570 0522                           l2562 04C6  
                         l2554 0486                           l2626 1472                           l2618 1438  
                         l2650 1554                           l2642 153C                           l2634 14D4  
                         l2396 0EC4                           l2468 0D36                           l2740 0246  
                         l2732 01A2                           l2724 010C                           l2716 00D6  
                         l2708 00BA                           l2804 1B06                           l2492 13DC  
                         l2484 13A4                           l2476 170C                           l2580 05DC  
                         l2572 052E                           l2564 04EE                           l2556 0492  
                         l2628 1494                           l2652 1556                           l2644 153E  
                         l2636 14E4                           l2660 1A46                           l2398 0ED0  
                         l2750 02E2                           l2742 024A                           l2734 01AA  
                         l2718 00EA                           l2726 0128                           l2806 1B08  
                         l2670 17EE                           l2662 17BA                           l2494 13E6  
                         l2486 13BA                           l2478 171C                           l2590 06AA  
                         l2582 05FC                           l2574 054E                           l2566 04FA  
                         l2558 04A8                           l2654 1560                           l2646 1548  
                         l2638 150E                           l2830 120A                           l2760 038A  
                         l2752 02EA                           l2736 01D0                           l2728 013C  
                         l2744 0268                           l2672 17FA                           l2664 17C2  
                         l2496 1404                           l2488 13C2                           l2592 06BE  
                         l2584 0610                           l2576 0562                           l2568 0510  
                         l2648 154A                           l2680 1590                           l2656 1A22  
                         l2840 1218                           l2832 120A                           l2824 11F6  
                         l2770 03EE                           l2754 0310                           l2746 027C  
                         l2762 03A8                           l2738 0212                           l2674 1806  
                         l2666 17D2                           l2498 1414                           l2594 0728  
                         l2586 067A                           l2578 05CC                           l2682 159C  
                         l2690 15D8                           l2658 1A3A                           l2850 1238  
                         l2842 121C                           l2834 120E                           l2826 11FA  
                         l2780 0448                           l2772 0402                           l2764 03BC  
                         l2756 0352                           l2748 02AE                           l2692 0032  
                         l2668 17E2                           l2596 0738                           l2588 068A  
                         l2684 15A8                           l2676 1564                           l2860 1254  
                         l2852 123C                           l2844 1220                           l2836 1212  
                         l2828 11FE                           l2790 0468                           l2774 0416  
                         l2766 03D0                           l2758 0386                           l2694 0044  
                         l2598 0768                           l2686 15B4                           l2678 1570  
                         l2870 129E                           l2862 125C                           l2854 1240  
                         l2846 1228                           l2838 1214                           l2776 0430  
                         l2768 03EA                           l2696 0058                           l2792 1954  
                         l2688 15C0                           l2872 12AA                           l2864 1270  
                         l2856 1244                           l2848 1230                           l2786 0450  
                         l2778 0434                           l2698 0072                           l2794 1970  
                         l2874 12C6                           l2866 1286                           l2858 124C  
                         l2788 0464                           l2796 1996                           l2868 128A  
                         l2798 1B32                           u1200 19AA                           u1201 19A6  
                         u1130 1A8E                           u1210 19C0                           u1131 1A8A  
                         u1211 19BC                           u1300 0DF0                           u1140 1AA4  
                         u1220 19D6                           u1301 0DEC                           u1141 1AA0  
                         u1221 19D2                           u1230 09AC                           u1310 0E82  
                         u1150 1A0A                           u1231 09A8                           u1311 0E7E  
                         u1151 1A02                           u1240 0A76                           u1320 0F18  
                         u1400 1404                           u1241 0A72                           u1321 0F14  
                         u1401 1400                           u1170 1694                           u1330 0FAA  
                         u1250 0842                           u1171 1690                           u1331 0FA6  
                         u1411 0B3E                           u1251 083E                           u1180 16B2  
                         u1340 0CC8                           u1500 0BEE                           u1260 089C  
                         u1181 16AE                           u1341 0CC4                           u1501 0BEA  
                         u1421 0B50                           u1261 0898                           u1190 16CE  
                         u1350 0D5A                           u1510 0BFC                           u1270 08F6  
                         u1191 16CA                           u1351 0D56                           u1511 0BF8  
                         u1431 0B62                           u1271 08F2                           u1280 103E  
                         u1168 1A0C                           u1520 0C0A                           u1360 170C  
                         u1281 103A                           u1521 0C06                           u1441 0B74  
                         u1361 1708                           u1601 07A0                           u1290 10D2  
                         u1530 0C20                           u1370 1746                           u1291 10CE  
                         u1531 0C1C                           u1451 0B86                           u2307 0B10  
                         u1371 1742                           u1611 07B2                           u1700 00CE  
                         u1540 0C32                           u1380 13BA                           u1701 00CA  
                         u2317 1300                           u1541 0C2E                           u1461 0B98  
                         u1381 13B6                           u1621 07C4                           u1710 0128  
                         u1390 13DC                           u1630 07F0                           u1550 054E  
                         u2407 0D2A                           u1711 0124                           u2327 1334  
                         u1471 0BAA                           u1391 13D8                           u1631 07EC  
                         u1551 054A                           u2247 15CA                           u1800 03BC  
                         u1720 013C                           u1640 081A                           u1560 05FC  
                         u2417 0DBE                           u1801 03B8                           u1721 0138  
                         u2337 1368                           u1481 0BBC                           u1641 0816  
                         u1561 05F8                           u2257 144E                           u1810 0402  
                         u1730 016E                           u1570 06AA                           u1650 14CC  
                         _T2PR 000FBC                     _Black_rule 01D0                           u2427 0E52  
                         u1811 03FE                           u1731 016A                           u2347 10EA  
                         u1491 0BCE                           u1571 06A6                           u1651 14C6  
                         u2267 147C                           u1820 0448                           u1740 01D0  
                         u1660 14CE                           u2437 0EE6                           u1821 0444  
                         u1741 01CC                           u2357 111C                           u1581 0742  
                         u2277 049C                           u1830 0484                           u1750 0212  
                         u1670 15EE                           u2447 0F7A                           u1831 0480  
                         u1751 020E                           u2367 114E                           u1591 0754  
                         u2287 04D0                           u1671 15EA                           u1760 027C  
                         u1680 0044                           u1840 1970                           u2457 100E  
                         u1761 0278                           u1681 0040                           u1841 196C  
                         u2377 1180                           u2297 0504                           u1770 02AE  
                         u1690 0088                           u2467 10A0                           u1771 02AA  
                         u1691 0084                           u2387 11AE                           u1780 0310  
                         u2397 0C96                           u1781 030C                           u1790 0352  
                         u1870 1286                           u1791 034E                           u1871 1282  
                         _main 11F6                           fsr2h 000FDA                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           btemp 005F  
                         _stop 1A22                           prodh 000FF4                           prodl 000FF3  
                         start 002E         __end_of_color_read_Red 1864                __end_of_HighISR 002E  
                 ___param_bank 000000             _get_color_code$460 00D6             _get_color_code$458 00CE  
           _get_color_code$459 00D2                          ?_main 0001                __end_of___lldiv 1438  
                        ?_stop 0014            _add_seconds_to_list 1954                    _Black_setup 004D  
              __end_of___lwdiv 16EE                          i2l266 1B60                          i2l364 002A  
                        _TMR0H 000FD4                          _TMR0L 000FD3            ___lmul@multiplicand 0005  
   __end_of_I2C_2_Master_Start 1B52     __end_of_I2C_2_Master_Write 1B32             _get_color_distance 0824  
                        _index 005B                          tablat 000FF5                          plusw0 000FEB  
                        plusw1 000FE3                          plusw2 000FDB            ?_get_color_distance 0007  
                        ttemp5 0060                          ttemp6 0063                          ttemp7 0067  
                        status 000FD8                          wtemp8 0060           ?_add_seconds_to_list 0001  
                   _Green_rule 00A8        __end_of_color_read_Blue 1954          _I2C_2_Master_RepStart 1B52  
              ?_color_read_Red 0005                __initialization 15F0                   __end_of_main 12EA  
                 __end_of_stop 1A54                   _turnLeftLong 0E84           ??_get_color_distance 001F  
                       ??_main 0039                         ??_stop 0018                  __activetblptr 000000  
          _get_color_code$2441 00C2                   ?_setMotorPWM 000E                         _CCPR1H 000FAA  
                       _CCPR2H 000FA6                         _CCPR3H 000F25                         _CCPR4H 000F21  
                       _RE2PPS 000E74                         _RD5PPS 000E6F                         _RC7PPS 000E69  
                       _RD6PPS 000E70                         _RE4PPS 000E76                         i2l1820 001A  
                       i2l1822 001E                         i2l1824 0022                         i2l1826 0026  
                       i2l1818 000A                         i2l1684 1B5C                         _RG6PPS 000E88  
                    ??_HighISR 0001       __end_of_color_click_init 0C34          ??_add_seconds_to_list 0001  
               RobotMovement@i 0024          __end_of_RobotMovement 0486               ??_get_color_code 0037  
                ??_Timer0_init 0001                   _CCPTMRS0bits 000FAD                         ___lmul 16EE  
     get_color_distance@color1 0007       get_color_distance@color2 0013                         ___wmul 1AA6  
                    ??___lldiv 0015                      ??___lwdiv 000B                    _Color_rules 0100  
                       clear_0 1656                         clear_1 1662                         isa$std 000001  
             __end_of_moveBack 15F0          calibrate_black@clear1 0010          calibrate_black@clear2 0012  
                 __pdataCOMRAM 004D                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8                 _Lightblue_rule 006C                     _White_rule 01DC  
                       stop@mL 0014                         stop@mR 0016              ??_initDCmotorsPWM 0003  
             __end_of_turnLeft 10D4          __end_of_set_led_color 19E0                     __accesstop 0060  
      __end_of__initialization 1670       __end_of_color_read_Clear 1904        get_wall_presence@clear1 0010  
      get_wall_presence@clear2 0012       __end_of_color_read_Green 18B4         ?_I2C_2_Master_RepStart 0001  
                ___rparam_used 000001               ?_color_read_Blue 0005                _Interrupts_init 1B32  
               __pcstackCOMRAM 0001                   __pidataBANK0 1758                   __pidataBANK1 1B1A  
          __end_of_Timer0_init 1B0C                     __pbssBANK0 00EE                     __pbssBANK1 0100  
                _turnRightLong 0C34              _color_writetoaddr 1ACC                   _T2CLKCONbits 000FBF  
           ?_color_writetoaddr 0003                        ?___lmul 0001                        ?___wmul 0001  
               main@color_code 0039                 ___lmul@product 0009                get_color_code@i 00E0  
          ??_color_writetoaddr 0004        get_color_code@min_index 00DC                        i2u75_40 001A  
                      i2u75_41 0016                        _SSP2ADD 000ED6                        _SSP2BUF 000ED5  
      get_color_code@min_value 00DA              _get_wall_presence 1438                    _Orange_rule 0078  
           ?_get_wall_presence 000C        __end_of_Interrupts_init 1B3E         color_writetoaddr@value 0003  
             ??_color_read_Red 0007                        _HighISR 0008      __end_of_color_writetoaddr 1AEC  
               ?_turnRightLong 0014             _I2C_2_Master_Start 1B48             _I2C_2_Master_Write 1B26  
                    ?_moveBack 0014                        __Hparam 0000            ??_get_wall_presence 000E  
                      __Lparam 0000              color_read_Red@tmp 000A                    _Timer0_init 1AEC  
                      ___lldiv 1394            ?_I2C_2_Master_Start 0001                        ___lwdiv 167A  
          ?_I2C_2_Master_Write 0001                        __pcinit 15F0                        __ramtop 0E00  
                    ?_turnLeft 0014                        __ptext0 11F6                        __ptext1 1A22  
                      __ptext2 1564                        __ptext3 14D4                        __ptext4 1438  
                      __ptext5 0486                        __ptext6 0824                        __ptext7 16EE  
                      __ptext8 1394                        __ptext9 17BA                      _T2CONbits 000FBD  
                      _seconds 005D                      _T2HLTbits 000FBE      __end_of_get_wall_presence 14D4  
         ??_I2C_2_Master_Start 0002           ??_I2C_2_Master_Write 0002           end_of_initialization 1670  
            ?_color_click_init 0001                     ??_moveBack 001A                ___lldiv@divisor 0011  
           ??_color_click_init 0014                ___lldiv@counter 0019                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc2 000FDE  
                  _White_setup 0060                _initDCmotorsPWM 14D4                     ??_turnLeft 0018  
                    _PORTFbits 000F8E             setMotorPWM@negDuty 0013              __end_of_turnRight 0E84  
                  _Yellow_rule 0090                      _TRISAbits 000F81             setMotorPWM@posDuty 0012  
                    _TRISCbits 000F83                      _TRISDbits 000F84                      _TRISEbits 000F85  
                    _TRISFbits 000F86                      _TRISGbits 000F87    __end_of_add_seconds_to_list 199C  
             fullSpeedAhead@mL 0014               fullSpeedAhead@mR 0016       color_writetoaddr@address 0004  
   get_color_distance@B_offset 0033        ??_I2C_2_Master_RepStart 0002               ?_Interrupts_init 0001  
              ??_turnRightLong 0018                    _CCP1CONbits 000FAB     get_color_distance@G_offset 0031  
            _increment_seconds 1B5C              ?_color_read_Clear 0005                    _CCP2CONbits 000FA7  
            ??_calibrate_black 000E              ?_color_read_Green 0005                    _CCP3CONbits 000F26  
                  _CCP4CONbits 000F22                     main@motorL 003B                     main@motorR 0044  
            ??_calibrate_white 000C             ?_increment_seconds 0001             ??_color_read_Clear 0007  
           ??_color_read_Green 0007                 _fullSpeedAhead 17BA     get_color_distance@R_offset 002F  
                    _Blue_rule 009C            ??_increment_seconds 0001                 __end_of___lmul 1758  
               __end_of___wmul 1ACC                  __pidataCOMRAM 1B0C            color_read_Clear@tmp 000A  
          start_initialization 15F0      __end_of_increment_seconds 1B62                      _Pink_rule 0084  
          color_read_Green@tmp 000A        __end_of_initDCmotorsPWM 1564         __end_of_fullSpeedAhead 1814  
                     ??___lmul 0009                       ??___wmul 0005                    __pdataBANK0 0060  
                  __pdataBANK1 01DC         _get_color_distance$421 002B         _get_color_distance$417 0023  
       _get_color_distance$419 0027                    __pbssCOMRAM 005B                  __pcstackBANK0 00C2  
          get_color_code@value 00DE                       ?_HighISR 0001                  _RobotMovement 0032  
             ___lwdiv@dividend 0007                   ?_Timer0_init 0001                ?_fullSpeedAhead 0014  
                   moveBack@mL 0014                     moveBack@mR 0016                      __pintcode 0008  
                     ?___lldiv 000D                       ?___lwdiv 0007                  ?_turnLeftLong 0014  
                 moveBack@time 0018           I2C_2_Master_Read@ack 0003           I2C_2_Master_Read@tmp 0004  
  get_color_code@NormalizedRGB 00E2              _I2C_2_Master_Idle 1A7E              _I2C_2_Master_Init 1A54  
            _I2C_2_Master_Read 19E0              _I2C_2_Master_Stop 1B3E             ?_I2C_2_Master_Idle 0001  
           ?_I2C_2_Master_Init 0001             ?_I2C_2_Master_Read 0001                  ??_setMotorPWM 0010  
           ?_I2C_2_Master_Stop 0001               ___lwdiv@quotient 000B       initDCmotorsPWM@PWMperiod 0001  
              turnRightLong@mL 0014                turnRightLong@mR 0016                 turnLeftLong@mL 0014  
               turnLeftLong@mR 0016            ??_I2C_2_Master_Idle 0001            ??_I2C_2_Master_Init 0001  
          ??_I2C_2_Master_Read 0002                 ___wmul@product 0005                       _LATAbits 000F79  
                _set_led_color 199C            ??_I2C_2_Master_Stop 0002                       _LATCbits 000F7B  
                     _LATEbits 000F7D                       _LATFbits 000F7E                       _LATGbits 000F7F  
                     _PIE0bits 000E29                 ?_RobotMovement 001C                       _PIE2bits 000E2B  
                  turnRight@mL 0014                    turnRight@mR 0016                       _PIR0bits 000E33  
             ?_initDCmotorsPWM 0001                      _wall_coef 0059                      _wait_time 00C0  
                     _SSP2CON2 000EDA                 ??_turnLeftLong 0018                       _SSP2STAT 000ED8  
           set_led_color@color 0001      __end_of_I2C_2_Master_Idle 1AA6      __end_of_I2C_2_Master_Init 1A7E  
    __end_of_I2C_2_Master_Read 1A22              ___wmul@multiplier 0001      __end_of_I2C_2_Master_Stop 1B48  
                 setMotorPWM@m 000E    I2C_2_Master_Write@data_byte 0002                  _movement_list 016C  
            ??_color_read_Blue 0007                _calibrate_black 10D4                      _turnRight 0D5C  
              _calibrate_white 12EA              ___lmul@multiplier 0001                      copy_data0 1604  
                    copy_data1 1624                      copy_data2 1644                 ?_set_led_color 0001  
__end_of_I2C_2_Master_RepStart 1B5C             color_read_Blue@tmp 000A            __end_of_setMotorPWM 0AFC  
                     _Red_rule 00B4                       __Hrparam 0000                       __Lrparam 0000  
   __end_of_get_color_distance 0990                 _get_color_code 0486                     _ANSELDbits 000EA7  
                   _ANSELFbits 000EB4                     _T0CON0bits 000FD5                     _T0CON1bits 000FD6  
              ___lwdiv@divisor 0009                ___lwdiv@counter 000D                     ?_turnRight 0014  
                     __ptext10 0AFC                       __ptext11 1ACC                       __ptext20 1B3E  
                     __ptext12 12EA                       __ptext21 1B48                       __ptext13 10D4  
                     __ptext30 0D5C                       __ptext22 1B52                       __ptext14 199C  
                     __ptext31 0E84                       __ptext23 19E0                       __ptext15 1814  
                     __ptext32 0FAC                       __ptext24 1A7E                       __ptext16 1864  
                     __ptext33 0990                       __ptext25 1A54                       __ptext17 18B4  
                     __ptext34 1AA6                       __ptext26 1954                       __ptext18 1904  
                     __ptext35 167A                       __ptext27 1AEC                       __ptext19 1B26  
                     __ptext36 1B32                       __ptext28 0032                       __ptext29 0C34  
                     __ptext38 1B5C                   _SSP2CON1bits 000ED9                   _SSP2CON2bits 000EDA  
              ??_RobotMovement 0022                     turnLeft@mL 0014                     turnLeft@mR 0016  
               turnRightLong@i 001A                  turnLeftLong@i 001A          __end_of_turnRightLong 0D5C  
                     _moveBack 1564                     turnRight@i 001A                       isa$xinst 000000  
                     int$flags 005F         __end_of_get_color_code 0824        __end_of_calibrate_black 11F6  
                     _turnLeft 0FAC        __end_of_calibrate_white 1394                     _INTCONbits 000FF2  
                  _setMotorPWM 0990                ??_set_led_color 0003           __end_of_turnLeftLong 0FAC  
                     intlevel2 0000               ___lldiv@dividend 000D               ??_fullSpeedAhead 0018  
                    turnLeft@i 001A                ?_get_color_code 0035               _color_click_init 0AFC  
                   _SSP2DATPPS 000E1D               ___lldiv@quotient 0015                     _SSP2CLKPPS 000E1C  
                  ??_turnRight 0018            RobotMovement@i_1275 0026  
