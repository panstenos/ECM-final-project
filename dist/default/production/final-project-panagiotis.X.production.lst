

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Dec 13 15:09:05 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75   000000                     
    76                           ; Version 2.40
    77                           ; Generated 04/07/2022 GMT
    78                           ; 
    79                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112 ;; Function _get_led_color is unused but had its address taken
   113   000000                     
   114                           	psect	idataCOMRAM
   115   0021D0                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _wait_time
   119   0021D0  00DC               	dw	220
   120                           
   121                           ;initializer for _wall_coef
   122   0021D2  000F               	dw	15
   123                           
   124                           	psect	idataBANK0
   125   001EB4                     __pidataBANK0:
   126                           	callstack 0
   127                           
   128                           ;initializer for _Black_setup
   129   001EB4  0404               	dw	1028
   130   001EB6  0000               	dw	0
   131   001EB8  024B               	dw	587
   132   001EBA  0000               	dw	0
   133   001EBC  00A1               	dw	161
   134   001EBE  0000               	dw	0
   135                           
   136                           ;initializer for _White_setup
   137   001EC0  28FC               	dw	10492
   138   001EC2  0000               	dw	0
   139   001EC4  1B55               	dw	6997
   140   001EC6  0000               	dw	0
   141   001EC8  0770               	dw	1904
   142   001ECA  0000               	dw	0
   143                           
   144                           ;initializer for _Yellow_rule
   145   001ECC  005D               	dw	93
   146   001ECE  0000               	dw	0
   147   001ED0  004C               	dw	76
   148   001ED2  0000               	dw	0
   149   001ED4  0014               	dw	20
   150   001ED6  0000               	dw	0
   151                           
   152                           ;initializer for _Blue_rule
   153   001ED8  0003               	dw	3
   154   001EDA  0000               	dw	0
   155   001EDC  0009               	dw	9
   156   001EDE  0000               	dw	0
   157   001EE0  0024               	dw	36
   158   001EE2  0000               	dw	0
   159                           
   160                           ;initializer for _Green_rule
   161   001EE4  0019               	dw	25
   162   001EE6  0000               	dw	0
   163   001EE8  0036               	dw	54
   164   001EEA  0000               	dw	0
   165   001EEC  0008               	dw	8
   166   001EEE  0000               	dw	0
   167                           
   168                           ;initializer for _Red_rule
   169   001EF0  0048               	dw	72
   170   001EF2  0000               	dw	0
   171   001EF4  0002               	dw	2
   172   001EF6  0000               	dw	0
   173   001EF8  0002               	dw	2
   174   001EFA  0000               	dw	0
   175                           
   176                           	psect	idataBANK1
   177   002050                     __pidataBANK1:
   178                           	callstack 0
   179                           
   180                           ;initializer for _White_rule
   181   002050  0064               	dw	100
   182   002052  0000               	dw	0
   183   002054  0064               	dw	100
   184   002056  0000               	dw	0
   185   002058  0064               	dw	100
   186   00205A  0000               	dw	0
   187                           
   188                           ;initializer for _Lightblue_rule
   189   00205C  0026               	dw	38
   190   00205E  0000               	dw	0
   191   002060  0048               	dw	72
   192   002062  0000               	dw	0
   193   002064  0054               	dw	84
   194   002066  0000               	dw	0
   195                           
   196                           ;initializer for _Orange_rule
   197   002068  005C               	dw	92
   198   00206A  0000               	dw	0
   199   00206C  0027               	dw	39
   200   00206E  0000               	dw	0
   201   002070  001C               	dw	28
   202   002072  0000               	dw	0
   203                           
   204                           ;initializer for _Pink_rule
   205   002074  004D               	dw	77
   206   002076  0000               	dw	0
   207   002078  003C               	dw	60
   208   00207A  0000               	dw	0
   209   00207C  0040               	dw	64
   210   00207E  0000               	dw	0
   211   000000                     _T0CON0bits	set	4053
   212   000000                     _T0CON1bits	set	4054
   213   000000                     _TRISDbits	set	3972
   214   000000                     _SSP2CON2bits	set	3802
   215   000000                     _SSP2CLKPPS	set	3612
   216   000000                     _SSP2DATPPS	set	3613
   217   000000                     _RC7PPS	set	3689
   218   000000                     _RE2PPS	set	3700
   219   000000                     _ANSELFbits	set	3764
   220   000000                     _TRISAbits	set	3969
   221   000000                     _TRISFbits	set	3974
   222   000000                     _PORTFbits	set	3982
   223   000000                     _TRISGbits	set	3975
   224   000000                     _TRISCbits	set	3971
   225   000000                     _TRISEbits	set	3973
   226   000000                     _SSP2BUF	set	3797
   227   000000                     _SSP2ADD	set	3798
   228   000000                     _SSP2CON1bits	set	3801
   229   000000                     _LATAbits	set	3961
   230   000000                     _LATGbits	set	3967
   231   000000                     _CCPR4H	set	3873
   232   000000                     _CCPR3H	set	3877
   233   000000                     _T2PR	set	4028
   234   000000                     _T2CONbits	set	4029
   235   000000                     _CCPR2H	set	4006
   236   000000                     _CCPR1H	set	4010
   237   000000                     _LATCbits	set	3963
   238   000000                     _LATEbits	set	3965
   239   000000                     _LATFbits	set	3966
   240   000000                     _RE4PPS	set	3702
   241   000000                     _RG6PPS	set	3720
   242   000000                     _RD5PPS	set	3695
   243   000000                     _ANSELDbits	set	3751
   244   000000                     _TMR0L	set	4051
   245   000000                     _TMR0H	set	4052
   246   000000                     _INTCONbits	set	4082
   247   000000                     _T2CLKCONbits	set	4031
   248   000000                     _T2HLTbits	set	4030
   249   000000                     _CCP1CONbits	set	4011
   250   000000                     _CCPTMRS0bits	set	4013
   251   000000                     _CCP2CONbits	set	4007
   252   000000                     _CCP3CONbits	set	3878
   253   000000                     _CCP4CONbits	set	3874
   254   000000                     _SSP2CON2	set	3802
   255   000000                     _SSP2STAT	set	3800
   256   000000                     _PIE0bits	set	3625
   257   000000                     _RD6PPS	set	3696
   258   000000                     _PIE2bits	set	3627
   259   000000                     _PIR0bits	set	3635
   260                           
   261                           ; #config settings
   262                           
   263                           	psect	cinit
   264   0018CE                     __pcinit:
   265                           	callstack 0
   266   0018CE                     start_initialization:
   267                           	callstack 0
   268   0018CE                     __initialization:
   269                           	callstack 0
   270                           
   271                           ; Initialize objects allocated to BANK1 (48 bytes)
   272                           ; load TBLPTR registers with __pidataBANK1
   273   0018CE  0E50               	movlw	low __pidataBANK1
   274   0018D0  6EF6               	movwf	tblptrl,c
   275   0018D2  0E20               	movlw	high __pidataBANK1
   276   0018D4  6EF7               	movwf	tblptrh,c
   277   0018D6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   278   0018D8  6EF8               	movwf	tblptru,c
   279   0018DA  EE01  F078         	lfsr	0,__pdataBANK1
   280   0018DE  EE10 F030          	lfsr	1,48
   281   0018E2                     copy_data0:
   282   0018E2  0009               	tblrd		*+
   283   0018E4  CFF5 FFEE          	movff	tablat,postinc0
   284   0018E8  50E5               	movf	postdec1,w,c
   285   0018EA  50E1               	movf	fsr1l,w,c
   286   0018EC  E1FA               	bnz	copy_data0
   287                           
   288                           ; Initialize objects allocated to BANK0 (72 bytes)
   289                           ; load TBLPTR registers with __pidataBANK0
   290   0018EE  0EB4               	movlw	low __pidataBANK0
   291   0018F0  6EF6               	movwf	tblptrl,c
   292   0018F2  0E1E               	movlw	high __pidataBANK0
   293   0018F4  6EF7               	movwf	tblptrh,c
   294   0018F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   295   0018F8  6EF8               	movwf	tblptru,c
   296   0018FA  EE00  F060         	lfsr	0,__pdataBANK0
   297   0018FE  EE10 F048          	lfsr	1,72
   298   001902                     copy_data1:
   299   001902  0009               	tblrd		*+
   300   001904  CFF5 FFEE          	movff	tablat,postinc0
   301   001908  50E5               	movf	postdec1,w,c
   302   00190A  50E1               	movf	fsr1l,w,c
   303   00190C  E1FA               	bnz	copy_data1
   304                           
   305                           ; Initialize objects allocated to COMRAM (4 bytes)
   306                           ; load TBLPTR registers with __pidataCOMRAM
   307   00190E  0ED0               	movlw	low __pidataCOMRAM
   308   001910  6EF6               	movwf	tblptrl,c
   309   001912  0E21               	movlw	high __pidataCOMRAM
   310   001914  6EF7               	movwf	tblptrh,c
   311   001916  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   312   001918  6EF8               	movwf	tblptru,c
   313   00191A  EE00  F04A         	lfsr	0,__pdataCOMRAM
   314   00191E  EE10 F004          	lfsr	1,4
   315   001922                     copy_data2:
   316   001922  0009               	tblrd		*+
   317   001924  CFF5 FFEE          	movff	tablat,postinc0
   318   001928  50E5               	movf	postdec1,w,c
   319   00192A  50E1               	movf	fsr1l,w,c
   320   00192C  E1FA               	bnz	copy_data2
   321                           
   322                           ; Clear objects allocated to BANK2 (200 bytes)
   323   00192E  EE02  F000         	lfsr	0,__pbssBANK2
   324   001932  0EC8               	movlw	200
   325   001934                     clear_0:
   326   001934  6AEE               	clrf	postinc0,c
   327   001936  06E8               	decf	wreg,f,c
   328   001938  E1FD               	bnz	clear_0
   329                           
   330                           ; Clear objects allocated to BANK1 (120 bytes)
   331   00193A  EE01  F000         	lfsr	0,__pbssBANK1
   332   00193E  0E78               	movlw	120
   333   001940                     clear_1:
   334   001940  6AEE               	clrf	postinc0,c
   335   001942  06E8               	decf	wreg,f,c
   336   001944  E1FD               	bnz	clear_1
   337                           
   338                           ; Clear objects allocated to BANK0 (12 bytes)
   339   001946  EE00  F0E6         	lfsr	0,__pbssBANK0
   340   00194A  0E0C               	movlw	12
   341   00194C                     clear_2:
   342   00194C  6AEE               	clrf	postinc0,c
   343   00194E  06E8               	decf	wreg,f,c
   344   001950  E1FD               	bnz	clear_2
   345                           
   346                           ; Clear objects allocated to COMRAM (14 bytes)
   347   001952  EE00  F03C         	lfsr	0,__pbssCOMRAM
   348   001956  0E0E               	movlw	14
   349   001958                     clear_3:
   350   001958  6AEE               	clrf	postinc0,c
   351   00195A  06E8               	decf	wreg,f,c
   352   00195C  E1FD               	bnz	clear_3
   353   00195E                     end_of_initialization:
   354                           	callstack 0
   355   00195E                     __end_of__initialization:
   356                           	callstack 0
   357   00195E  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   358   001960  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   359   001962  0E00               	movlw	low (__Lmediumconst shr (0+16))
   360   001964  6EF8               	movwf	tblptru,c
   361   001966  0100               	movlb	0
   362   001968  EFCD  F005         	goto	_main	;jump to C main() function
   363                           
   364                           	psect	bssCOMRAM
   365   00003C                     __pbssCOMRAM:
   366                           	callstack 0
   367   00003C                     _wall_detection_counter:
   368                           	callstack 0
   369   00003C                     	ds	2
   370   00003E                     _incr_sec_counter:
   371                           	callstack 0
   372   00003E                     	ds	2
   373   000040                     _state:
   374                           	callstack 0
   375   000040                     	ds	2
   376   000042                     _index:
   377                           	callstack 0
   378   000042                     	ds	2
   379   000044                     _seconds:
   380                           	callstack 0
   381   000044                     	ds	2
   382   000046                     _clear2:
   383                           	callstack 0
   384   000046                     	ds	2
   385   000048                     _clear1:
   386                           	callstack 0
   387   000048                     	ds	2
   388                           
   389                           	psect	dataCOMRAM
   390   00004A                     __pdataCOMRAM:
   391                           	callstack 0
   392   00004A                     _wait_time:
   393                           	callstack 0
   394   00004A                     	ds	2
   395   00004C                     _wall_coef:
   396                           	callstack 0
   397   00004C                     	ds	2
   398                           
   399                           	psect	bssBANK0
   400   0000E6                     __pbssBANK0:
   401                           	callstack 0
   402   0000E6                     _RGB:
   403                           	callstack 0
   404   0000E6                     	ds	12
   405                           
   406                           	psect	dataBANK0
   407   000060                     __pdataBANK0:
   408                           	callstack 0
   409   000060                     _Black_setup:
   410                           	callstack 0
   411   000060                     	ds	12
   412   00006C                     _White_setup:
   413                           	callstack 0
   414   00006C                     	ds	12
   415   000078                     _Yellow_rule:
   416                           	callstack 0
   417   000078                     	ds	12
   418   000084                     _Blue_rule:
   419                           	callstack 0
   420   000084                     	ds	12
   421   000090                     _Green_rule:
   422                           	callstack 0
   423   000090                     	ds	12
   424   00009C                     _Red_rule:
   425                           	callstack 0
   426   00009C                     	ds	12
   427                           
   428                           	psect	bssBANK1
   429   000100                     __pbssBANK1:
   430                           	callstack 0
   431   000100                     _Color_rules:
   432                           	callstack 0
   433   000100                     	ds	108
   434   00016C                     _Black_rule:
   435                           	callstack 0
   436   00016C                     	ds	12
   437                           
   438                           	psect	dataBANK1
   439   000178                     __pdataBANK1:
   440                           	callstack 0
   441   000178                     _White_rule:
   442                           	callstack 0
   443   000178                     	ds	12
   444   000184                     _Lightblue_rule:
   445                           	callstack 0
   446   000184                     	ds	12
   447   000190                     _Orange_rule:
   448                           	callstack 0
   449   000190                     	ds	12
   450   00019C                     _Pink_rule:
   451                           	callstack 0
   452   00019C                     	ds	12
   453                           
   454                           	psect	bssBANK2
   455   000200                     __pbssBANK2:
   456                           	callstack 0
   457   000200                     _movement_list:
   458                           	callstack 0
   459   000200                     	ds	200
   460                           
   461                           	psect	cstackBANK1
   462   0001A8                     __pcstackBANK1:
   463                           	callstack 0
   464   0001A8                     main@color_code:
   465                           	callstack 0
   466                           
   467                           ; 2 bytes @ 0x0
   468   0001A8                     	ds	2
   469   0001AA                     main@state:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0x2
   473   0001AA                     	ds	2
   474   0001AC                     main@motorL:
   475                           	callstack 0
   476                           
   477                           ; 9 bytes @ 0x4
   478   0001AC                     	ds	9
   479   0001B5                     main@motorR:
   480                           	callstack 0
   481                           
   482                           ; 9 bytes @ 0xD
   483   0001B5                     	ds	9
   484                           
   485                           	psect	cstackBANK0
   486   0000A8                     __pcstackBANK0:
   487                           	callstack 0
   488   0000A8                     _get_color_distance$421:
   489                           	callstack 0
   490                           
   491                           ; 4 bytes @ 0x0
   492   0000A8                     	ds	4
   493   0000AC                     _get_color_distance$423:
   494                           	callstack 0
   495                           
   496                           ; 4 bytes @ 0x4
   497   0000AC                     	ds	4
   498   0000B0                     _get_color_distance$425:
   499                           	callstack 0
   500                           
   501                           ; 4 bytes @ 0x8
   502   0000B0                     	ds	4
   503   0000B4                     get_color_distance@R_offset:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0xC
   507   0000B4                     	ds	2
   508   0000B6                     get_color_distance@G_offset:
   509                           	callstack 0
   510                           
   511                           ; 2 bytes @ 0xE
   512   0000B6                     	ds	2
   513   0000B8                     get_color_distance@B_offset:
   514                           	callstack 0
   515                           
   516                           ; 2 bytes @ 0x10
   517   0000B8                     	ds	2
   518   0000BA                     _get_color_code$2463:
   519                           	callstack 0
   520                           
   521                           ; 12 bytes @ 0x12
   522   0000BA                     	ds	12
   523   0000C6                     _get_color_code$463:
   524                           	callstack 0
   525                           
   526                           ; 4 bytes @ 0x1E
   527   0000C6                     	ds	4
   528   0000CA                     _get_color_code$464:
   529                           	callstack 0
   530                           
   531                           ; 4 bytes @ 0x22
   532   0000CA                     	ds	4
   533   0000CE                     _get_color_code$465:
   534                           	callstack 0
   535                           
   536                           ; 4 bytes @ 0x26
   537   0000CE                     	ds	4
   538   0000D2                     get_color_code@min_value:
   539                           	callstack 0
   540                           
   541                           ; 2 bytes @ 0x2A
   542   0000D2                     	ds	2
   543   0000D4                     get_color_code@min_index:
   544                           	callstack 0
   545                           
   546                           ; 2 bytes @ 0x2C
   547   0000D4                     	ds	2
   548   0000D6                     get_color_code@value:
   549                           	callstack 0
   550                           
   551                           ; 2 bytes @ 0x2E
   552   0000D6                     	ds	2
   553   0000D8                     get_color_code@i:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0x30
   557   0000D8                     	ds	2
   558   0000DA                     get_color_code@NormalizedRGB:
   559                           	callstack 0
   560                           
   561                           ; 12 bytes @ 0x32
   562   0000DA                     	ds	12
   563                           
   564                           	psect	cstackCOMRAM
   565   000001                     __pcstackCOMRAM:
   566                           	callstack 0
   567   000001                     ??i2_I2C_2_Master_Idle:
   568   000001                     i2set_led_color@color:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x0
   572   000001                     	ds	1
   573   000002                     ??i2_I2C_2_Master_Read:
   574   000002                     i2I2C_2_Master_Write@data_byte:
   575                           	callstack 0
   576                           
   577                           ; 1 bytes @ 0x1
   578   000002                     	ds	1
   579   000003                     i2I2C_2_Master_Read@ack:
   580                           	callstack 0
   581                           
   582                           ; 1 bytes @ 0x2
   583   000003                     	ds	1
   584   000004                     i2I2C_2_Master_Read@tmp:
   585                           	callstack 0
   586                           
   587                           ; 1 bytes @ 0x3
   588   000004                     	ds	1
   589   000005                     ?i2_color_read_Clear:
   590                           	callstack 0
   591                           
   592                           ; 2 bytes @ 0x4
   593   000005                     	ds	2
   594   000007                     ??i2_color_read_Clear:
   595                           
   596                           ; 1 bytes @ 0x6
   597   000007                     	ds	3
   598   00000A                     i2color_read_Clear@tmp:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x9
   602   00000A                     	ds	2
   603   00000C                     set_wall_detection@mode:
   604                           	callstack 0
   605                           
   606                           ; 2 bytes @ 0xB
   607   00000C                     	ds	2
   608   00000E                     ??_set_wall_detection:
   609                           
   610                           ; 1 bytes @ 0xD
   611   00000E                     	ds	3
   612   000011                     ??_add_seconds_to_list:
   613   000011                     ??_I2C_2_Master_Idle:
   614   000011                     ?_get_state:
   615                           	callstack 0
   616   000011                     ?___wmul:
   617                           	callstack 0
   618   000011                     ?___lmul:
   619                           	callstack 0
   620   000011                     set_led_color@color:
   621                           	callstack 0
   622   000011                     initDCmotorsPWM@PWMperiod:
   623                           	callstack 0
   624   000011                     ___wmul@multiplier:
   625                           	callstack 0
   626   000011                     ___lmul@multiplier:
   627                           	callstack 0
   628                           
   629                           ; 4 bytes @ 0x10
   630   000011                     	ds	1
   631   000012                     ??_I2C_2_Master_Read:
   632   000012                     I2C_2_Master_Write@data_byte:
   633                           	callstack 0
   634                           
   635                           ; 1 bytes @ 0x11
   636   000012                     	ds	1
   637   000013                     color_writetoaddr@value:
   638                           	callstack 0
   639   000013                     I2C_2_Master_Read@ack:
   640                           	callstack 0
   641   000013                     ___wmul@multiplicand:
   642                           	callstack 0
   643                           
   644                           ; 2 bytes @ 0x12
   645   000013                     	ds	1
   646   000014                     color_writetoaddr@address:
   647                           	callstack 0
   648   000014                     I2C_2_Master_Read@tmp:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x13
   652   000014                     	ds	1
   653   000015                     ?_color_read_Red:
   654                           	callstack 0
   655   000015                     ?_color_read_Blue:
   656                           	callstack 0
   657   000015                     ?_color_read_Green:
   658                           	callstack 0
   659   000015                     ?_color_read_Clear:
   660                           	callstack 0
   661   000015                     ___wmul@product:
   662                           	callstack 0
   663   000015                     ___lmul@multiplicand:
   664                           	callstack 0
   665                           
   666                           ; 4 bytes @ 0x14
   667   000015                     	ds	2
   668   000017                     ??_color_read_Red:
   669   000017                     ??_color_read_Blue:
   670   000017                     ??_color_read_Green:
   671   000017                     ??_color_read_Clear:
   672   000017                     ?_get_color_distance:
   673                           	callstack 0
   674   000017                     ?_get_wall_detection:
   675                           	callstack 0
   676   000017                     ?___lwdiv:
   677                           	callstack 0
   678   000017                     ___lwdiv@dividend:
   679                           	callstack 0
   680   000017                     get_color_distance@color1:
   681                           	callstack 0
   682                           
   683                           ; 12 bytes @ 0x16
   684   000017                     	ds	2
   685   000019                     ___lwdiv@divisor:
   686                           	callstack 0
   687   000019                     ___lmul@product:
   688                           	callstack 0
   689                           
   690                           ; 4 bytes @ 0x18
   691   000019                     	ds	1
   692   00001A                     color_read_Red@tmp:
   693                           	callstack 0
   694   00001A                     color_read_Blue@tmp:
   695                           	callstack 0
   696   00001A                     color_read_Green@tmp:
   697                           	callstack 0
   698   00001A                     color_read_Clear@tmp:
   699                           	callstack 0
   700                           
   701                           ; 2 bytes @ 0x19
   702   00001A                     	ds	1
   703   00001B                     ___lwdiv@counter:
   704                           	callstack 0
   705                           
   706                           ; 1 bytes @ 0x1A
   707   00001B                     	ds	1
   708   00001C                     ??_calibrate_white:
   709   00001C                     ___lwdiv@quotient:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0x1B
   713   00001C                     	ds	1
   714   00001D                     ?___lldiv:
   715                           	callstack 0
   716   00001D                     ___lldiv@dividend:
   717                           	callstack 0
   718                           
   719                           ; 4 bytes @ 0x1C
   720   00001D                     	ds	1
   721   00001E                     ??_calibrate_black:
   722   00001E                     setMotorPWM@m:
   723                           	callstack 0
   724                           
   725                           ; 2 bytes @ 0x1D
   726   00001E                     	ds	2
   727   000020                     ??_setMotorPWM:
   728   000020                     calibrate_black@clear1:
   729                           	callstack 0
   730                           
   731                           ; 2 bytes @ 0x1F
   732   000020                     	ds	1
   733   000021                     ___lldiv@divisor:
   734                           	callstack 0
   735                           
   736                           ; 4 bytes @ 0x20
   737   000021                     	ds	1
   738   000022                     setMotorPWM@posDuty:
   739                           	callstack 0
   740   000022                     calibrate_black@clear2:
   741                           	callstack 0
   742                           
   743                           ; 2 bytes @ 0x21
   744   000022                     	ds	1
   745   000023                     setMotorPWM@negDuty:
   746                           	callstack 0
   747   000023                     get_color_distance@color2:
   748                           	callstack 0
   749                           
   750                           ; 12 bytes @ 0x22
   751   000023                     	ds	1
   752   000024                     stop@mL:
   753                           	callstack 0
   754   000024                     turnLeft@mL:
   755                           	callstack 0
   756   000024                     turnRight@mL:
   757                           	callstack 0
   758   000024                     turnLeftLong@mL:
   759                           	callstack 0
   760   000024                     turnRightLong@mL:
   761                           	callstack 0
   762   000024                     fullSpeedAhead@mL:
   763                           	callstack 0
   764   000024                     TimedfullSpeedAhead@mL:
   765                           	callstack 0
   766   000024                     moveBack@mL:
   767                           	callstack 0
   768   000024                     _calibrate_black$2464:
   769                           	callstack 0
   770                           
   771                           ; 2 bytes @ 0x23
   772   000024                     	ds	1
   773   000025                     ___lldiv@quotient:
   774                           	callstack 0
   775                           
   776                           ; 4 bytes @ 0x24
   777   000025                     	ds	1
   778   000026                     ??_color_click_init:
   779   000026                     stop@mR:
   780                           	callstack 0
   781   000026                     turnLeft@mR:
   782                           	callstack 0
   783   000026                     turnRight@mR:
   784                           	callstack 0
   785   000026                     turnLeftLong@mR:
   786                           	callstack 0
   787   000026                     turnRightLong@mR:
   788                           	callstack 0
   789   000026                     fullSpeedAhead@mR:
   790                           	callstack 0
   791   000026                     TimedfullSpeedAhead@mR:
   792                           	callstack 0
   793   000026                     moveBack@mR:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x25
   797   000026                     	ds	2
   798   000028                     ??_stop:
   799   000028                     ??_turnLeft:
   800   000028                     ??_turnRight:
   801   000028                     ??_turnLeftLong:
   802   000028                     ??_turnRightLong:
   803   000028                     TimedfullSpeedAhead@time:
   804                           	callstack 0
   805   000028                     moveBack@time:
   806                           	callstack 0
   807                           
   808                           ; 2 bytes @ 0x27
   809   000028                     	ds	1
   810   000029                     ___lldiv@counter:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x28
   814   000029                     	ds	1
   815   00002A                     turnLeft@k:
   816                           	callstack 0
   817   00002A                     turnRight@k:
   818                           	callstack 0
   819   00002A                     turnLeftLong@i:
   820                           	callstack 0
   821   00002A                     turnRightLong@i:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x29
   825   00002A                     	ds	2
   826   00002C                     turnLeft@i:
   827                           	callstack 0
   828   00002C                     turnRight@i:
   829                           	callstack 0
   830                           
   831                           ; 2 bytes @ 0x2B
   832   00002C                     	ds	2
   833   00002E                     RobotMovement@color:
   834                           	callstack 0
   835   00002E                     return_back@motorL:
   836                           	callstack 0
   837                           
   838                           ; 2 bytes @ 0x2D
   839   00002E                     	ds	1
   840   00002F                     ??_get_color_distance:
   841                           
   842                           ; 1 bytes @ 0x2E
   843   00002F                     	ds	1
   844   000030                     RobotMovement@motorL:
   845                           	callstack 0
   846   000030                     return_back@motorR:
   847                           	callstack 0
   848                           
   849                           ; 2 bytes @ 0x2F
   850   000030                     	ds	2
   851   000032                     ??_return_back:
   852   000032                     RobotMovement@motorR:
   853                           	callstack 0
   854                           
   855                           ; 2 bytes @ 0x31
   856   000032                     	ds	1
   857   000033                     ?_get_color_code:
   858                           	callstack 0
   859                           
   860                           ; 2 bytes @ 0x32
   861   000033                     	ds	1
   862   000034                     
   863                           ; 1 bytes @ 0x33
   864   000034                     	ds	1
   865   000035                     ??_get_color_code:
   866                           
   867                           ; 1 bytes @ 0x34
   868   000035                     	ds	1
   869   000036                     RobotMovement@i:
   870                           	callstack 0
   871                           
   872                           ; 2 bytes @ 0x35
   873   000036                     	ds	2
   874   000038                     RobotMovement@i_1278:
   875                           	callstack 0
   876                           
   877                           ; 2 bytes @ 0x37
   878   000038                     	ds	2
   879   00003A                     ??_main:
   880                           
   881                           ; 1 bytes @ 0x39
   882   00003A                     	ds	2
   883                           
   884 ;;
   885 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   886 ;;
   887 ;; *************** function _main *****************
   888 ;; Defined at:
   889 ;;		line 17 in file "main.c"
   890 ;; Parameters:    Size  Location     Type
   891 ;;		None
   892 ;; Auto vars:     Size  Location     Type
   893 ;;  color_code      2    0[BANK1 ] unsigned int 
   894 ;;  state           2    2[BANK1 ] int 
   895 ;;  motorR          9   13[BANK1 ] struct DC_motor
   896 ;;  motorL          9    4[BANK1 ] struct DC_motor
   897 ;;  PWMcycle        2    0        unsigned int 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   908 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   910 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   911 ;;Total ram usage:       24 bytes
   912 ;; Hardware stack levels required when called: 10
   913 ;; This function calls:
   914 ;;		_Interrupts_init
   915 ;;		_RobotMovement
   916 ;;		_TimedfullSpeedAhead
   917 ;;		_Timer0_init
   918 ;;		_add_seconds_to_list
   919 ;;		_color_click_init
   920 ;;		_fullSpeedAhead
   921 ;;		_get_color_code
   922 ;;		_get_state
   923 ;;		_get_wall_detection
   924 ;;		_initDCmotorsPWM
   925 ;;		_return_back
   926 ;;		_stop
   927 ;; This function is called by:
   928 ;;		Startup code after reset
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	text0
   933   000B9A                     __ptext0:
   934                           	callstack 0
   935   000B9A                     _main:
   936                           	callstack 21
   937   000B9A                     
   938                           ;main.c: 18:     Timer0_init();
   939   000B9A  ECA0  F010         	call	_Timer0_init	;wreg free
   940   000B9E                     
   941                           ;main.c: 19:     Interrupts_init();
   942   000B9E  ECB6  F010         	call	_Interrupts_init	;wreg free
   943   000BA2                     
   944                           ;main.c: 20:     initDCmotorsPWM(99);
   945   000BA2  0E00               	movlw	0
   946   000BA4  6E12               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   947   000BA6  0E63               	movlw	99
   948   000BA8  6E11               	movwf	initDCmotorsPWM@PWMperiod^0,c
   949   000BAA  ECB6  F00C         	call	_initDCmotorsPWM	;wreg free
   950   000BAE                     
   951                           ;main.c: 22:     color_click_init();
   952   000BAE  ECFC  F009         	call	_color_click_init	;wreg free
   953   000BB2                     
   954                           ;main.c: 24:     ANSELFbits.ANSELF2 = 0;
   955   000BB2  010E               	movlb	14	; () banked
   956   000BB4  95B4               	bcf	180,2,b	;volatile
   957   000BB6                     
   958                           ; BSR set to: 14
   959                           ;main.c: 25:     TRISFbits.TRISF2 = 1;
   960   000BB6  8486               	bsf	134,2,c	;volatile
   961   000BB8                     
   962                           ; BSR set to: 14
   963                           ;main.c: 27:     DC_motor motorL, motorR;;main.c: 28:     motorL.power=0;
   964   000BB8  0E00               	movlw	0
   965   000BBA  0101               	movlb	1	; () banked
   966   000BBC  6FAC               	movwf	main@motorL& (0+255),b
   967   000BBE                     
   968                           ; BSR set to: 1
   969                           ;main.c: 29:     motorL.direction=1;
   970   000BBE  0E01               	movlw	1
   971   000BC0  6FAD               	movwf	(main@motorL+1)& (0+255),b
   972   000BC2                     
   973                           ; BSR set to: 1
   974                           ;main.c: 30:     motorL.brakemode=1;
   975   000BC2  0E01               	movlw	1
   976   000BC4  6FAE               	movwf	(main@motorL+2)& (0+255),b
   977   000BC6                     
   978                           ; BSR set to: 1
   979                           ;main.c: 31:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   980   000BC6  0EAA               	movlw	170
   981   000BC8  6FB1               	movwf	(main@motorL+5)& (0+255),b
   982   000BCA  0E0F               	movlw	15
   983   000BCC  6FB2               	movwf	(main@motorL+6)& (0+255),b
   984   000BCE                     
   985                           ; BSR set to: 1
   986                           ;main.c: 32:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   987   000BCE  0EA6               	movlw	166
   988   000BD0  6FB3               	movwf	(main@motorL+7)& (0+255),b
   989   000BD2  0E0F               	movlw	15
   990   000BD4  6FB4               	movwf	(main@motorL+8)& (0+255),b
   991   000BD6                     
   992                           ; BSR set to: 1
   993                           ;main.c: 33:     motorL.PWMperiod=PWMcycle;
   994   000BD6  0E00               	movlw	0
   995   000BD8  6FB0               	movwf	(main@motorL+4)& (0+255),b
   996   000BDA  0E63               	movlw	99
   997   000BDC  6FAF               	movwf	(main@motorL+3)& (0+255),b
   998   000BDE                     
   999                           ; BSR set to: 1
  1000                           ;main.c: 35:     motorR.power=0;
  1001   000BDE  0E00               	movlw	0
  1002   000BE0  6FB5               	movwf	main@motorR& (0+255),b
  1003   000BE2                     
  1004                           ; BSR set to: 1
  1005                           ;main.c: 36:     motorR.direction=1;
  1006   000BE2  0E01               	movlw	1
  1007   000BE4  6FB6               	movwf	(main@motorR+1)& (0+255),b
  1008   000BE6                     
  1009                           ; BSR set to: 1
  1010                           ;main.c: 37:     motorR.brakemode=1;
  1011   000BE6  0E01               	movlw	1
  1012   000BE8  6FB7               	movwf	(main@motorR+2)& (0+255),b
  1013   000BEA                     
  1014                           ; BSR set to: 1
  1015                           ;main.c: 38:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1016   000BEA  0E25               	movlw	37
  1017   000BEC  6FBA               	movwf	(main@motorR+5)& (0+255),b
  1018   000BEE  0E0F               	movlw	15
  1019   000BF0  6FBB               	movwf	(main@motorR+6)& (0+255),b
  1020   000BF2                     
  1021                           ; BSR set to: 1
  1022                           ;main.c: 39:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1023   000BF2  0E21               	movlw	33
  1024   000BF4  6FBC               	movwf	(main@motorR+7)& (0+255),b
  1025   000BF6  0E0F               	movlw	15
  1026   000BF8  6FBD               	movwf	(main@motorR+8)& (0+255),b
  1027   000BFA                     
  1028                           ; BSR set to: 1
  1029                           ;main.c: 40:     motorR.PWMperiod=PWMcycle;
  1030   000BFA  0E00               	movlw	0
  1031   000BFC  6FB9               	movwf	(main@motorR+4)& (0+255),b
  1032   000BFE  0E63               	movlw	99
  1033   000C00  6FB8               	movwf	(main@motorR+3)& (0+255),b
  1034   000C02                     
  1035                           ; BSR set to: 1
  1036                           ;main.c: 42:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1037   000C02  0E52               	movlw	82
  1038   000C04  6E3B               	movwf	(??_main+1)^0,c
  1039   000C06  0E2B               	movlw	43
  1040   000C08  6E3A               	movwf	??_main^0,c
  1041   000C0A  0E00               	movlw	0
  1042   000C0C                     u4027:
  1043   000C0C  2EE8               	decfsz	wreg,f,c
  1044   000C0E  D7FE               	bra	u4027
  1045   000C10  2E3A               	decfsz	??_main^0,f,c
  1046   000C12  D7FC               	bra	u4027
  1047   000C14  2E3B               	decfsz	(??_main+1)^0,f,c
  1048   000C16  D7FA               	bra	u4027
  1049   000C18  D000               	nop2	
  1050   000C1A                     
  1051                           ;main.c: 43:     fullSpeedAhead(&motorL,&motorR);
  1052   000C1A  0EAC               	movlw	low main@motorL
  1053   000C1C  6E24               	movwf	fullSpeedAhead@mL^0,c
  1054   000C1E  0E01               	movlw	high main@motorL
  1055   000C20  6E25               	movwf	(fullSpeedAhead@mL+1)^0,c
  1056   000C22  0EB5               	movlw	low main@motorR
  1057   000C24  6E26               	movwf	fullSpeedAhead@mR^0,c
  1058   000C26  0E01               	movlw	high main@motorR
  1059   000C28  6E27               	movwf	(fullSpeedAhead@mR+1)^0,c
  1060   000C2A  EC13  F00E         	call	_fullSpeedAhead	;wreg free
  1061   000C2E                     l4322:
  1062                           
  1063                           ;main.c: 45:         int state = get_state();
  1064   000C2E  ECC2  F010         	call	_get_state	;wreg free
  1065   000C32  C011  F1AA         	movff	?_get_state,main@state
  1066   000C36  C012  F1AB         	movff	?_get_state+1,main@state+1
  1067   000C3A                     
  1068                           ;main.c: 46:         if(get_wall_detection() == 1 && state == 0 ){
  1069   000C3A  ECE1  F00D         	call	_get_wall_detection	;wreg free
  1070   000C3E  0417               	decf	?_get_wall_detection^0,w,c
  1071   000C40  1018               	iorwf	(?_get_wall_detection+1)^0,w,c
  1072   000C42  A4D8               	btfss	status,2,c
  1073   000C44  EF26  F006         	goto	u3621
  1074   000C48  EF28  F006         	goto	u3620
  1075   000C4C                     u3621:
  1076   000C4C  EF80  F006         	goto	l4342
  1077   000C50                     u3620:
  1078   000C50  0101               	movlb	1	; () banked
  1079   000C52  51AA               	movf	main@state& (0+255),w,b
  1080   000C54  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1081   000C56  A4D8               	btfss	status,2,c
  1082   000C58  EF30  F006         	goto	u3631
  1083   000C5C  EF32  F006         	goto	u3630
  1084   000C60                     u3631:
  1085   000C60  EF80  F006         	goto	l4342
  1086   000C64                     u3630:
  1087   000C64                     
  1088                           ; BSR set to: 1
  1089                           ;main.c: 48:             add_seconds_to_list();
  1090   000C64  EC7E  F00F         	call	_add_seconds_to_list	;wreg free
  1091   000C68                     
  1092                           ;main.c: 49:             stop(&motorL,&motorR);
  1093   000C68  0EAC               	movlw	low main@motorL
  1094   000C6A  6E24               	movwf	stop@mL^0,c
  1095   000C6C  0E01               	movlw	high main@motorL
  1096   000C6E  6E25               	movwf	(stop@mL+1)^0,c
  1097   000C70  0EB5               	movlw	low main@motorR
  1098   000C72  6E26               	movwf	stop@mR^0,c
  1099   000C74  0E01               	movlw	high main@motorR
  1100   000C76  6E27               	movwf	(stop@mR+1)^0,c
  1101   000C78  EC35  F00F         	call	_stop	;wreg free
  1102   000C7C                     
  1103                           ;main.c: 50:             unsigned int color_code = get_color_code();
  1104   000C7C  ECF4  F002         	call	_get_color_code	;wreg free
  1105   000C80  C033  F1A8         	movff	?_get_color_code,main@color_code
  1106   000C84  C034  F1A9         	movff	?_get_color_code+1,main@color_code+1
  1107   000C88                     
  1108                           ;main.c: 51:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1109   000C88  0EAC               	movlw	low main@motorL
  1110   000C8A  6E24               	movwf	TimedfullSpeedAhead@mL^0,c
  1111   000C8C  0E01               	movlw	high main@motorL
  1112   000C8E  6E25               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1113   000C90  0EB5               	movlw	low main@motorR
  1114   000C92  6E26               	movwf	TimedfullSpeedAhead@mR^0,c
  1115   000C94  0E01               	movlw	high main@motorR
  1116   000C96  6E27               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1117   000C98  0E00               	movlw	0
  1118   000C9A  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1119   000C9C  0E05               	movlw	5
  1120   000C9E  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  1121   000CA0  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1122   000CA4                     
  1123                           ;main.c: 52:             RobotMovement(color_code, &motorL, &motorR);
  1124   000CA4  C1A8  F02E         	movff	main@color_code,RobotMovement@color
  1125   000CA8  C1A9  F02F         	movff	main@color_code+1,RobotMovement@color+1
  1126   000CAC  0EAC               	movlw	low main@motorL
  1127   000CAE  6E30               	movwf	RobotMovement@motorL^0,c
  1128   000CB0  0E01               	movlw	high main@motorL
  1129   000CB2  6E31               	movwf	(RobotMovement@motorL+1)^0,c
  1130   000CB4  0EB5               	movlw	low main@motorR
  1131   000CB6  6E32               	movwf	RobotMovement@motorR^0,c
  1132   000CB8  0E01               	movlw	high main@motorR
  1133   000CBA  6E33               	movwf	(RobotMovement@motorR+1)^0,c
  1134   000CBC  EC51  F000         	call	_RobotMovement	;wreg free
  1135   000CC0                     
  1136                           ;main.c: 53:             if (state == 0)
  1137   000CC0  0101               	movlb	1	; () banked
  1138   000CC2  51AA               	movf	main@state& (0+255),w,b
  1139   000CC4  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1140   000CC6  A4D8               	btfss	status,2,c
  1141   000CC8  EF68  F006         	goto	u3641
  1142   000CCC  EF6A  F006         	goto	u3640
  1143   000CD0                     u3641:
  1144   000CD0  EF17  F006         	goto	l4322
  1145   000CD4                     u3640:
  1146   000CD4                     
  1147                           ; BSR set to: 1
  1148                           ;main.c: 54:             {;main.c: 55:                 stop(&motorL,&motorR);
  1149   000CD4  0EAC               	movlw	low main@motorL
  1150   000CD6  6E24               	movwf	stop@mL^0,c
  1151   000CD8  0E01               	movlw	high main@motorL
  1152   000CDA  6E25               	movwf	(stop@mL+1)^0,c
  1153   000CDC  0EB5               	movlw	low main@motorR
  1154   000CDE  6E26               	movwf	stop@mR^0,c
  1155   000CE0  0E01               	movlw	high main@motorR
  1156   000CE2  6E27               	movwf	(stop@mR+1)^0,c
  1157   000CE4  EC35  F00F         	call	_stop	;wreg free
  1158                           
  1159                           ;main.c: 56:                 fullSpeedAhead(&motorL,&motorR);
  1160   000CE8  0EAC               	movlw	low main@motorL
  1161   000CEA  6E24               	movwf	fullSpeedAhead@mL^0,c
  1162   000CEC  0E01               	movlw	high main@motorL
  1163   000CEE  6E25               	movwf	(fullSpeedAhead@mL+1)^0,c
  1164   000CF0  0EB5               	movlw	low main@motorR
  1165   000CF2  6E26               	movwf	fullSpeedAhead@mR^0,c
  1166   000CF4  0E01               	movlw	high main@motorR
  1167   000CF6  6E27               	movwf	(fullSpeedAhead@mR+1)^0,c
  1168   000CF8  EC13  F00E         	call	_fullSpeedAhead	;wreg free
  1169   000CFC  EF17  F006         	goto	l4322
  1170   000D00                     l4342:
  1171   000D00  0101               	movlb	1	; () banked
  1172   000D02  05AA               	decf	main@state& (0+255),w,b
  1173   000D04  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1174   000D06  A4D8               	btfss	status,2,c
  1175   000D08  EF88  F006         	goto	u3651
  1176   000D0C  EF8A  F006         	goto	u3650
  1177   000D10                     u3651:
  1178   000D10  EF96  F006         	goto	l458
  1179   000D14                     u3650:
  1180   000D14                     
  1181                           ; BSR set to: 1
  1182                           ;main.c: 59:             return_back(&motorL, &motorR);
  1183   000D14  0EAC               	movlw	low main@motorL
  1184   000D16  6E2E               	movwf	return_back@motorL^0,c
  1185   000D18  0E01               	movlw	high main@motorL
  1186   000D1A  6E2F               	movwf	(return_back@motorL+1)^0,c
  1187   000D1C  0EB5               	movlw	low main@motorR
  1188   000D1E  6E30               	movwf	return_back@motorR^0,c
  1189   000D20  0E01               	movlw	high main@motorR
  1190   000D22  6E31               	movwf	(return_back@motorR+1)^0,c
  1191   000D24  ECCB  F004         	call	_return_back	;wreg free
  1192                           
  1193                           ;main.c: 60:         }else{
  1194   000D28  EF17  F006         	goto	l4322
  1195   000D2C                     l458:
  1196                           
  1197                           ; BSR set to: 1
  1198   000D2C  EF17  F006         	goto	l4322
  1199   000D30  EF4F  F000         	goto	start
  1200   000D34                     __end_of_main:
  1201                           	callstack 0
  1202                           
  1203 ;; *************** function _return_back *****************
  1204 ;; Defined at:
  1205 ;;		line 445 in file "dc_motor.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;  motorL          2   45[COMRAM] PTR struct DC_motor
  1208 ;;		 -> main@motorL(9), 
  1209 ;;  motorR          2   47[COMRAM] PTR struct DC_motor
  1210 ;;		 -> main@motorR(9), 
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1224 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1225 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;Total ram usage:        6 bytes
  1227 ;; Hardware stack levels used: 1
  1228 ;; Hardware stack levels required when called: 8
  1229 ;; This function calls:
  1230 ;;		_TimedfullSpeedAhead
  1231 ;;		_moveBack
  1232 ;;		_stop
  1233 ;;		_turnLeft
  1234 ;;		_turnLeftLong
  1235 ;;		_turnRight
  1236 ;;		_turnRightLong
  1237 ;; This function is called by:
  1238 ;;		_main
  1239 ;; This function uses a non-reentrant model
  1240 ;;
  1241                           
  1242                           	psect	text1
  1243   000996                     __ptext1:
  1244                           	callstack 0
  1245   000996                     _return_back:
  1246                           	callstack 22
  1247   000996                     
  1248                           ;dc_motor.c: 445: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 446: {;dc_motor.c: 447:     while (index > 0){
  1249   000996  EFB2  F005         	goto	l316
  1250   00099A                     l4236:
  1251                           
  1252                           ;dc_motor.c: 448:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1253   00099A  90D8               	bcf	status,0,c
  1254   00099C  3442               	rlcf	_index^0,w,c
  1255   00099E  6ED9               	movwf	fsr2l,c
  1256   0009A0  3443               	rlcf	(_index+1)^0,w,c
  1257   0009A2  6EDA               	movwf	fsr2h,c
  1258   0009A4  0EFE               	movlw	low (_movement_list+65534)
  1259   0009A6  26D9               	addwf	fsr2l,f,c
  1260   0009A8  0E01               	movlw	high (_movement_list+65534)
  1261   0009AA  22DA               	addwfc	fsr2h,f,c
  1262   0009AC  28DE               	incf	postinc2,w,c
  1263   0009AE  E106               	bnz	u3551
  1264   0009B0  28DE               	incf	postinc2,w,c
  1265   0009B2  A4D8               	btfss	status,2,c
  1266   0009B4  EFDE  F004         	goto	u3551
  1267   0009B8  EFE0  F004         	goto	u3550
  1268   0009BC                     u3551:
  1269   0009BC  EFEC  F004         	goto	l4240
  1270   0009C0                     u3550:
  1271   0009C0  C02E  F024         	movff	return_back@motorL,turnLeft@mL
  1272   0009C4  C02F  F025         	movff	return_back@motorL+1,turnLeft@mL+1
  1273   0009C8  C030  F026         	movff	return_back@motorR,turnLeft@mR
  1274   0009CC  C031  F027         	movff	return_back@motorR+1,turnLeft@mR+1
  1275   0009D0  EC08  F008         	call	_turnLeft	;wreg free
  1276   0009D4  EFA5  F005         	goto	l4262
  1277   0009D8                     l4240:
  1278   0009D8  90D8               	bcf	status,0,c
  1279   0009DA  3442               	rlcf	_index^0,w,c
  1280   0009DC  6ED9               	movwf	fsr2l,c
  1281   0009DE  3443               	rlcf	(_index+1)^0,w,c
  1282   0009E0  6EDA               	movwf	fsr2h,c
  1283   0009E2  0EFE               	movlw	low (_movement_list+65534)
  1284   0009E4  26D9               	addwf	fsr2l,f,c
  1285   0009E6  0E01               	movlw	high (_movement_list+65534)
  1286   0009E8  22DA               	addwfc	fsr2h,f,c
  1287   0009EA  0EFE               	movlw	254
  1288   0009EC  18DE               	xorwf	postinc2,w,c
  1289   0009EE  E106               	bnz	u3561
  1290   0009F0  28DE               	incf	postinc2,w,c
  1291   0009F2  A4D8               	btfss	status,2,c
  1292   0009F4  EFFE  F004         	goto	u3561
  1293   0009F8  EF00  F005         	goto	u3560
  1294   0009FC                     u3561:
  1295   0009FC  EF0C  F005         	goto	l4244
  1296   000A00                     u3560:
  1297   000A00  C02E  F024         	movff	return_back@motorL,turnRight@mL
  1298   000A04  C02F  F025         	movff	return_back@motorL+1,turnRight@mL+1
  1299   000A08  C030  F026         	movff	return_back@motorR,turnRight@mR
  1300   000A0C  C031  F027         	movff	return_back@motorR+1,turnRight@mR+1
  1301   000A10  ECB5  F008         	call	_turnRight	;wreg free
  1302   000A14  EFA5  F005         	goto	l4262
  1303   000A18                     l4244:
  1304   000A18  90D8               	bcf	status,0,c
  1305   000A1A  3442               	rlcf	_index^0,w,c
  1306   000A1C  6ED9               	movwf	fsr2l,c
  1307   000A1E  3443               	rlcf	(_index+1)^0,w,c
  1308   000A20  6EDA               	movwf	fsr2h,c
  1309   000A22  0EFE               	movlw	low (_movement_list+65534)
  1310   000A24  26D9               	addwf	fsr2l,f,c
  1311   000A26  0E01               	movlw	high (_movement_list+65534)
  1312   000A28  22DA               	addwfc	fsr2h,f,c
  1313   000A2A  0EFD               	movlw	253
  1314   000A2C  18DE               	xorwf	postinc2,w,c
  1315   000A2E  E106               	bnz	u3571
  1316   000A30  28DE               	incf	postinc2,w,c
  1317   000A32  A4D8               	btfss	status,2,c
  1318   000A34  EF1E  F005         	goto	u3571
  1319   000A38  EF20  F005         	goto	u3570
  1320   000A3C                     u3571:
  1321   000A3C  EF2C  F005         	goto	l4248
  1322   000A40                     u3570:
  1323   000A40  C02E  F024         	movff	return_back@motorL,turnLeftLong@mL
  1324   000A44  C02F  F025         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1325   000A48  C030  F026         	movff	return_back@motorR,turnLeftLong@mR
  1326   000A4C  C031  F027         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1327   000A50  EC2C  F00B         	call	_turnLeftLong	;wreg free
  1328   000A54  EFA5  F005         	goto	l4262
  1329   000A58                     l4248:
  1330   000A58  90D8               	bcf	status,0,c
  1331   000A5A  3442               	rlcf	_index^0,w,c
  1332   000A5C  6ED9               	movwf	fsr2l,c
  1333   000A5E  3443               	rlcf	(_index+1)^0,w,c
  1334   000A60  6EDA               	movwf	fsr2h,c
  1335   000A62  0EFE               	movlw	low (_movement_list+65534)
  1336   000A64  26D9               	addwf	fsr2l,f,c
  1337   000A66  0E01               	movlw	high (_movement_list+65534)
  1338   000A68  22DA               	addwfc	fsr2h,f,c
  1339   000A6A  0EFC               	movlw	252
  1340   000A6C  18DE               	xorwf	postinc2,w,c
  1341   000A6E  E106               	bnz	u3581
  1342   000A70  28DE               	incf	postinc2,w,c
  1343   000A72  A4D8               	btfss	status,2,c
  1344   000A74  EF3E  F005         	goto	u3581
  1345   000A78  EF40  F005         	goto	u3580
  1346   000A7C                     u3581:
  1347   000A7C  EF4C  F005         	goto	l4252
  1348   000A80                     u3580:
  1349   000A80  C02E  F024         	movff	return_back@motorL,turnRightLong@mL
  1350   000A84  C02F  F025         	movff	return_back@motorL+1,turnRightLong@mL+1
  1351   000A88  C030  F026         	movff	return_back@motorR,turnRightLong@mR
  1352   000A8C  C031  F027         	movff	return_back@motorR+1,turnRightLong@mR+1
  1353   000A90  EC98  F00A         	call	_turnRightLong	;wreg free
  1354   000A94  EFA5  F005         	goto	l4262
  1355   000A98                     l4252:
  1356   000A98  90D8               	bcf	status,0,c
  1357   000A9A  3442               	rlcf	_index^0,w,c
  1358   000A9C  6ED9               	movwf	fsr2l,c
  1359   000A9E  3443               	rlcf	(_index+1)^0,w,c
  1360   000AA0  6EDA               	movwf	fsr2h,c
  1361   000AA2  0EFE               	movlw	low (_movement_list+65534)
  1362   000AA4  26D9               	addwf	fsr2l,f,c
  1363   000AA6  0E01               	movlw	high (_movement_list+65534)
  1364   000AA8  22DA               	addwfc	fsr2h,f,c
  1365   000AAA  0E01               	movlw	1
  1366   000AAC  BEDB               	btfsc	plusw2,7,c
  1367   000AAE  EF62  F005         	goto	u3591
  1368   000AB2  0E01               	movlw	1
  1369   000AB4  50DB               	movf	plusw2,w,c
  1370   000AB6  E108               	bnz	u3590
  1371   000AB8  04DE               	decf	postinc2,w,c
  1372   000ABA  A0D8               	btfss	status,0,c
  1373   000ABC  EF62  F005         	goto	u3591
  1374   000AC0  EF64  F005         	goto	u3590
  1375   000AC4                     u3591:
  1376   000AC4  EFA5  F005         	goto	l321
  1377   000AC8                     u3590:
  1378   000AC8                     
  1379                           ;dc_motor.c: 453:         {;dc_motor.c: 454:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1380   000AC8  C02E  F024         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1381   000ACC  C02F  F025         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1382   000AD0  C030  F026         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1383   000AD4  C031  F027         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1384   000AD8  90D8               	bcf	status,0,c
  1385   000ADA  3442               	rlcf	_index^0,w,c
  1386   000ADC  6ED9               	movwf	fsr2l,c
  1387   000ADE  3443               	rlcf	(_index+1)^0,w,c
  1388   000AE0  6EDA               	movwf	fsr2h,c
  1389   000AE2  0EFE               	movlw	low (_movement_list+65534)
  1390   000AE4  26D9               	addwf	fsr2l,f,c
  1391   000AE6  0E01               	movlw	high (_movement_list+65534)
  1392   000AE8  22DA               	addwfc	fsr2h,f,c
  1393   000AEA  CFDE F028          	movff	postinc2,TimedfullSpeedAhead@time
  1394   000AEE  CFDD F029          	movff	postdec2,TimedfullSpeedAhead@time+1
  1395   000AF2  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1396   000AF6                     
  1397                           ;dc_motor.c: 455:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1398   000AF6  0E11               	movlw	17
  1399   000AF8  6E33               	movwf	(??_return_back+1)^0,c
  1400   000AFA  0E3C               	movlw	60
  1401   000AFC  6E32               	movwf	??_return_back^0,c
  1402   000AFE  0ECB               	movlw	203
  1403   000B00                     u4037:
  1404   000B00  2EE8               	decfsz	wreg,f,c
  1405   000B02  D7FE               	bra	u4037
  1406   000B04  2E32               	decfsz	??_return_back^0,f,c
  1407   000B06  D7FC               	bra	u4037
  1408   000B08  2E33               	decfsz	(??_return_back+1)^0,f,c
  1409   000B0A  D7FA               	bra	u4037
  1410   000B0C  F000               	nop	
  1411   000B0E                     
  1412                           ;dc_motor.c: 456:             TimedfullSpeedAhead(motorL, motorR, 11);
  1413   000B0E  C02E  F024         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1414   000B12  C02F  F025         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1415   000B16  C030  F026         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1416   000B1A  C031  F027         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1417   000B1E  0E00               	movlw	0
  1418   000B20  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1419   000B22  0E0B               	movlw	11
  1420   000B24  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  1421   000B26  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1422   000B2A                     
  1423                           ;dc_motor.c: 457:             moveBack(motorL, motorR, 11);
  1424   000B2A  C02E  F024         	movff	return_back@motorL,moveBack@mL
  1425   000B2E  C02F  F025         	movff	return_back@motorL+1,moveBack@mL+1
  1426   000B32  C030  F026         	movff	return_back@motorR,moveBack@mR
  1427   000B36  C031  F027         	movff	return_back@motorR+1,moveBack@mR+1
  1428   000B3A  0E00               	movlw	0
  1429   000B3C  6E29               	movwf	(moveBack@time+1)^0,c
  1430   000B3E  0E0B               	movlw	11
  1431   000B40  6E28               	movwf	moveBack@time^0,c
  1432   000B42  ECFE  F00C         	call	_moveBack	;wreg free
  1433   000B46  EFA5  F005         	goto	l4262
  1434   000B4A                     l321:
  1435   000B4A                     l4262:
  1436                           
  1437                           ;dc_motor.c: 459:         stop(motorL,motorR);
  1438   000B4A  C02E  F024         	movff	return_back@motorL,stop@mL
  1439   000B4E  C02F  F025         	movff	return_back@motorL+1,stop@mL+1
  1440   000B52  C030  F026         	movff	return_back@motorR,stop@mR
  1441   000B56  C031  F027         	movff	return_back@motorR+1,stop@mR+1
  1442   000B5A  EC35  F00F         	call	_stop	;wreg free
  1443   000B5E                     
  1444                           ;dc_motor.c: 460:         index -= 1;
  1445   000B5E  0642               	decf	_index^0,f,c
  1446   000B60  A0D8               	btfss	status,0,c
  1447   000B62  0643               	decf	(_index+1)^0,f,c
  1448   000B64                     l316:
  1449                           
  1450                           ;dc_motor.c: 447:     while (index > 0){
  1451   000B64  BE43               	btfsc	(_index+1)^0,7,c
  1452   000B66  EFBF  F005         	goto	u3600
  1453   000B6A  5043               	movf	(_index+1)^0,w,c
  1454   000B6C  E106               	bnz	u3601
  1455   000B6E  0442               	decf	_index^0,w,c
  1456   000B70  B0D8               	btfsc	status,0,c
  1457   000B72  EFBD  F005         	goto	u3601
  1458   000B76  EFBF  F005         	goto	u3600
  1459   000B7A                     u3601:
  1460   000B7A  EFCD  F004         	goto	l4236
  1461   000B7E                     u3600:
  1462   000B7E                     
  1463                           ;dc_motor.c: 462:     if (index == 0){state = 2;}
  1464   000B7E  5042               	movf	_index^0,w,c
  1465   000B80  1043               	iorwf	(_index+1)^0,w,c
  1466   000B82  A4D8               	btfss	status,2,c
  1467   000B84  EFC6  F005         	goto	u3611
  1468   000B88  EFC8  F005         	goto	u3610
  1469   000B8C                     u3611:
  1470   000B8C  EFCC  F005         	goto	l329
  1471   000B90                     u3610:
  1472   000B90  0E00               	movlw	0
  1473   000B92  6E41               	movwf	(_state+1)^0,c
  1474   000B94  0E02               	movlw	2
  1475   000B96  6E40               	movwf	_state^0,c
  1476   000B98                     l329:
  1477   000B98  0012               	return		;funcret
  1478   000B9A                     __end_of_return_back:
  1479                           	callstack 0
  1480                           
  1481 ;; *************** function _initDCmotorsPWM *****************
  1482 ;; Defined at:
  1483 ;;		line 9 in file "dc_motor.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  PWMperiod       2   16[COMRAM] int 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;		None
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1497 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;Total ram usage:        2 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; Hardware stack levels required when called: 5
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           	psect	text2
  1512   00196C                     __ptext2:
  1513                           	callstack 0
  1514   00196C                     _initDCmotorsPWM:
  1515                           	callstack 25
  1516   00196C                     
  1517                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1518   00196C  9485               	bcf	133,2,c	;volatile
  1519                           
  1520                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1521   00196E  9E83               	bcf	131,7,c	;volatile
  1522                           
  1523                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1524   001970  9C87               	bcf	135,6,c	;volatile
  1525                           
  1526                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1527   001972  9885               	bcf	133,4,c	;volatile
  1528                           
  1529                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1530   001974  947D               	bcf	125,2,c	;volatile
  1531                           
  1532                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1533   001976  9E7B               	bcf	123,7,c	;volatile
  1534                           
  1535                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1536   001978  9C7F               	bcf	127,6,c	;volatile
  1537                           
  1538                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1539   00197A  987D               	bcf	125,4,c	;volatile
  1540   00197C                     
  1541                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1542   00197C  0E05               	movlw	5
  1543   00197E  010E               	movlb	14	; () banked
  1544   001980  6F74               	movwf	116,b	;volatile
  1545                           
  1546                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1547   001982  0E06               	movlw	6
  1548   001984  6F76               	movwf	118,b	;volatile
  1549                           
  1550                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1551   001986  0E07               	movlw	7
  1552   001988  6F69               	movwf	105,b	;volatile
  1553                           
  1554                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1555   00198A  0E08               	movlw	8
  1556   00198C  6F88               	movwf	136,b	;volatile
  1557                           
  1558                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1559   00198E  50BD               	movf	189,w,c	;volatile
  1560   001990  0B8F               	andlw	-113
  1561   001992  0940               	iorlw	64
  1562   001994  6EBD               	movwf	189,c	;volatile
  1563                           
  1564                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1565   001996  0EE0               	movlw	-32
  1566   001998  16BE               	andwf	190,f,c	;volatile
  1567                           
  1568                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1569   00199A  50BF               	movf	191,w,c	;volatile
  1570   00199C  0BF0               	andlw	-16
  1571   00199E  0901               	iorlw	1
  1572   0019A0  6EBF               	movwf	191,c	;volatile
  1573                           
  1574                           ;dc_motor.c: 34:     T2PR=99;
  1575   0019A2  0E63               	movlw	99
  1576   0019A4  6EBC               	movwf	188,c	;volatile
  1577   0019A6                     
  1578                           ; BSR set to: 14
  1579                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1580   0019A6  8EBD               	bsf	189,7,c	;volatile
  1581                           
  1582                           ;dc_motor.c: 39:     CCPR1H=0;
  1583   0019A8  0E00               	movlw	0
  1584   0019AA  6EAA               	movwf	170,c	;volatile
  1585                           
  1586                           ;dc_motor.c: 40:     CCPR2H=0;
  1587   0019AC  0E00               	movlw	0
  1588   0019AE  6EA6               	movwf	166,c	;volatile
  1589                           
  1590                           ;dc_motor.c: 41:     CCPR3H=0;
  1591   0019B0  0E00               	movlw	0
  1592   0019B2  010F               	movlb	15	; () banked
  1593   0019B4  6F25               	movwf	37,b	;volatile
  1594                           
  1595                           ;dc_motor.c: 42:     CCPR4H=0;
  1596   0019B6  0E00               	movlw	0
  1597   0019B8  6F21               	movwf	33,b	;volatile
  1598                           
  1599                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1600   0019BA  0EFC               	movlw	-4
  1601   0019BC  16AD               	andwf	173,f,c	;volatile
  1602                           
  1603                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1604   0019BE  0EF3               	movlw	-13
  1605   0019C0  16AD               	andwf	173,f,c	;volatile
  1606                           
  1607                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1608   0019C2  0ECF               	movlw	-49
  1609   0019C4  16AD               	andwf	173,f,c	;volatile
  1610                           
  1611                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1612   0019C6  0E3F               	movlw	-193
  1613   0019C8  16AD               	andwf	173,f,c	;volatile
  1614   0019CA                     
  1615                           ; BSR set to: 15
  1616                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1617   0019CA  88AB               	bsf	171,4,c	;volatile
  1618                           
  1619                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1620   0019CC  50AB               	movf	171,w,c	;volatile
  1621   0019CE  0BF0               	andlw	-16
  1622   0019D0  090C               	iorlw	12
  1623   0019D2  6EAB               	movwf	171,c	;volatile
  1624   0019D4                     
  1625                           ; BSR set to: 15
  1626                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1627   0019D4  8EAB               	bsf	171,7,c	;volatile
  1628   0019D6                     
  1629                           ; BSR set to: 15
  1630                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1631   0019D6  88A7               	bsf	167,4,c	;volatile
  1632                           
  1633                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1634   0019D8  50A7               	movf	167,w,c	;volatile
  1635   0019DA  0BF0               	andlw	-16
  1636   0019DC  090C               	iorlw	12
  1637   0019DE  6EA7               	movwf	167,c	;volatile
  1638   0019E0                     
  1639                           ; BSR set to: 15
  1640                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1641   0019E0  8EA7               	bsf	167,7,c	;volatile
  1642   0019E2                     
  1643                           ; BSR set to: 15
  1644                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1645   0019E2  8926               	bsf	38,4,b	;volatile
  1646                           
  1647                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1648   0019E4  5126               	movf	38,w,b	;volatile
  1649   0019E6  0BF0               	andlw	-16
  1650   0019E8  090C               	iorlw	12
  1651   0019EA  6F26               	movwf	38,b	;volatile
  1652   0019EC                     
  1653                           ; BSR set to: 15
  1654                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1655   0019EC  8F26               	bsf	38,7,b	;volatile
  1656   0019EE                     
  1657                           ; BSR set to: 15
  1658                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1659   0019EE  8922               	bsf	34,4,b	;volatile
  1660                           
  1661                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1662   0019F0  5122               	movf	34,w,b	;volatile
  1663   0019F2  0BF0               	andlw	-16
  1664   0019F4  090C               	iorlw	12
  1665   0019F6  6F22               	movwf	34,b	;volatile
  1666   0019F8                     
  1667                           ; BSR set to: 15
  1668                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1669   0019F8  8F22               	bsf	34,7,b	;volatile
  1670   0019FA                     
  1671                           ; BSR set to: 15
  1672   0019FA  0012               	return		;funcret
  1673   0019FC                     __end_of_initDCmotorsPWM:
  1674                           	callstack 0
  1675                           
  1676 ;; *************** function _get_wall_detection *****************
  1677 ;; Defined at:
  1678 ;;		line 253 in file "color.c"
  1679 ;; Parameters:    Size  Location     Type
  1680 ;;		None
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  2   22[COMRAM] unsigned int 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1695 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;Total ram usage:        2 bytes
  1697 ;; Hardware stack levels used: 1
  1698 ;; Hardware stack levels required when called: 6
  1699 ;; This function calls:
  1700 ;;		___wmul
  1701 ;; This function is called by:
  1702 ;;		_main
  1703 ;; This function uses a non-reentrant model
  1704 ;;
  1705                           
  1706                           	psect	text3
  1707   001BC2                     __ptext3:
  1708                           	callstack 0
  1709   001BC2                     _get_wall_detection:
  1710                           	callstack 24
  1711   001BC2                     
  1712                           ;color.c: 254:     if(clear1 == 0 || clear2 == 0){return 0;}
  1713   001BC2  5048               	movf	_clear1^0,w,c
  1714   001BC4  1049               	iorwf	(_clear1+1)^0,w,c
  1715   001BC6  B4D8               	btfsc	status,2,c
  1716   001BC8  EFE8  F00D         	goto	u3331
  1717   001BCC  EFEA  F00D         	goto	u3330
  1718   001BD0                     u3331:
  1719   001BD0  EFF3  F00D         	goto	l4070
  1720   001BD4                     u3330:
  1721   001BD4  5046               	movf	_clear2^0,w,c
  1722   001BD6  1047               	iorwf	(_clear2+1)^0,w,c
  1723   001BD8  A4D8               	btfss	status,2,c
  1724   001BDA  EFF1  F00D         	goto	u3341
  1725   001BDE  EFF3  F00D         	goto	u3340
  1726   001BE2                     u3341:
  1727   001BE2  EFF9  F00D         	goto	l4074
  1728   001BE6                     u3340:
  1729   001BE6                     l4070:
  1730   001BE6  0E00               	movlw	0
  1731   001BE8  6E18               	movwf	(?_get_wall_detection+1)^0,c
  1732   001BEA  0E00               	movlw	0
  1733   001BEC  6E17               	movwf	?_get_wall_detection^0,c
  1734   001BEE  EF12  F00E         	goto	l157
  1735   001BF2                     l4074:
  1736                           
  1737                           ;color.c: 255:     return clear2 >= clear1*wall_coef;
  1738   001BF2  C048  F011         	movff	_clear1,___wmul@multiplier
  1739   001BF6  C049  F012         	movff	_clear1+1,___wmul@multiplier+1
  1740   001BFA  C04C  F013         	movff	_wall_coef,___wmul@multiplicand
  1741   001BFE  C04D  F014         	movff	_wall_coef+1,___wmul@multiplicand+1
  1742   001C02  EC7D  F010         	call	___wmul	;wreg free
  1743   001C06  5011               	movf	?___wmul^0,w,c
  1744   001C08  5C46               	subwf	_clear2^0,w,c
  1745   001C0A  5012               	movf	(?___wmul+1)^0,w,c
  1746   001C0C  5847               	subwfb	(_clear2+1)^0,w,c
  1747   001C0E  B0D8               	btfsc	status,0,c
  1748   001C10  EF0C  F00E         	goto	u3351
  1749   001C14  EF0F  F00E         	goto	u3350
  1750   001C18                     u3351:
  1751   001C18  0E01               	movlw	1
  1752   001C1A  EF10  F00E         	goto	u3360
  1753   001C1E                     u3350:
  1754   001C1E  0E00               	movlw	0
  1755   001C20                     u3360:
  1756   001C20  6E17               	movwf	?_get_wall_detection^0,c
  1757   001C22  6A18               	clrf	(?_get_wall_detection+1)^0,c
  1758   001C24                     l157:
  1759   001C24  0012               	return		;funcret
  1760   001C26                     __end_of_get_wall_detection:
  1761                           	callstack 0
  1762                           
  1763 ;; *************** function _get_state *****************
  1764 ;; Defined at:
  1765 ;;		line 430 in file "dc_motor.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;		None
  1768 ;; Auto vars:     Size  Location     Type
  1769 ;;		None
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  2   16[COMRAM] int 
  1772 ;; Registers used:
  1773 ;;		None
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1779 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1782 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;Total ram usage:        2 bytes
  1784 ;; Hardware stack levels used: 1
  1785 ;; Hardware stack levels required when called: 5
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text4
  1794   002184                     __ptext4:
  1795                           	callstack 0
  1796   002184                     _get_state:
  1797                           	callstack 25
  1798   002184                     
  1799                           ;dc_motor.c: 432:     return state;
  1800   002184  C040  F011         	movff	_state,?_get_state
  1801   002188  C041  F012         	movff	_state+1,?_get_state+1
  1802   00218C  0012               	return		;funcret
  1803   00218E                     __end_of_get_state:
  1804                           	callstack 0
  1805                           
  1806 ;; *************** function _get_color_code *****************
  1807 ;; Defined at:
  1808 ;;		line 183 in file "color.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  value           2   46[BANK0 ] unsigned int 
  1813 ;;  i               2   48[BANK0 ] unsigned int 
  1814 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  1815 ;;  min_index       2   44[BANK0 ] unsigned int 
  1816 ;;  min_value       2   42[BANK0 ] unsigned int 
  1817 ;; Return value:  Size  Location     Type
  1818 ;;                  2   50[COMRAM] unsigned int 
  1819 ;; Registers used:
  1820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1821 ;; Tracked objects:
  1822 ;;		On entry : 0/0
  1823 ;;		On exit  : 0/0
  1824 ;;		Unchanged: 0/0
  1825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1826 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1827 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1828 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1829 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;Total ram usage:       48 bytes
  1831 ;; Hardware stack levels used: 1
  1832 ;; Hardware stack levels required when called: 8
  1833 ;; This function calls:
  1834 ;;		___lldiv
  1835 ;;		___lmul
  1836 ;;		___wmul
  1837 ;;		_color_read_Blue
  1838 ;;		_color_read_Green
  1839 ;;		_color_read_Red
  1840 ;;		_get_color_distance
  1841 ;;		_set_led_color
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text5
  1848   0005E8                     __ptext5:
  1849                           	callstack 0
  1850   0005E8                     _get_color_code:
  1851                           	callstack 22
  1852   0005E8                     
  1853                           ;color.c: 186:     set_led_color(0b100);
  1854   0005E8  0E00               	movlw	0
  1855   0005EA  6E12               	movwf	(set_led_color@color+1)^0,c
  1856   0005EC  0E04               	movlw	4
  1857   0005EE  6E11               	movwf	set_led_color@color^0,c
  1858   0005F0  ECA2  F00F         	call	_set_led_color	;wreg free
  1859   0005F4                     
  1860                           ;color.c: 187:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1861   0005F4  0E12               	movlw	18
  1862   0005F6  6E36               	movwf	(??_get_color_code+1)^0,c
  1863   0005F8  0EDC               	movlw	220
  1864   0005FA  6E35               	movwf	??_get_color_code^0,c
  1865   0005FC  0E60               	movlw	96
  1866   0005FE                     u4047:
  1867   0005FE  2EE8               	decfsz	wreg,f,c
  1868   000600  D7FE               	bra	u4047
  1869   000602  2E35               	decfsz	??_get_color_code^0,f,c
  1870   000604  D7FC               	bra	u4047
  1871   000606  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1872   000608  D7FA               	bra	u4047
  1873   00060A                     
  1874                           ;color.c: 188:     RGB.R = color_read_Red();
  1875   00060A  EC6D  F00E         	call	_color_read_Red	;wreg free
  1876   00060E  C015  F0E6         	movff	?_color_read_Red,_RGB
  1877   000612  C016  F0E7         	movff	?_color_read_Red+1,_RGB+1
  1878   000616  0100               	movlb	0	; () banked
  1879   000618  6BE8               	clrf	(_RGB+2)& (0+255),b
  1880   00061A  6BE9               	clrf	(_RGB+3)& (0+255),b
  1881   00061C                     
  1882                           ; BSR set to: 0
  1883                           ;color.c: 189:     set_led_color(0b010);
  1884   00061C  0E00               	movlw	0
  1885   00061E  6E12               	movwf	(set_led_color@color+1)^0,c
  1886   000620  0E02               	movlw	2
  1887   000622  6E11               	movwf	set_led_color@color^0,c
  1888   000624  ECA2  F00F         	call	_set_led_color	;wreg free
  1889   000628                     
  1890                           ;color.c: 190:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1891   000628  0E12               	movlw	18
  1892   00062A  6E36               	movwf	(??_get_color_code+1)^0,c
  1893   00062C  0EDC               	movlw	220
  1894   00062E  6E35               	movwf	??_get_color_code^0,c
  1895   000630  0E60               	movlw	96
  1896   000632                     u4057:
  1897   000632  2EE8               	decfsz	wreg,f,c
  1898   000634  D7FE               	bra	u4057
  1899   000636  2E35               	decfsz	??_get_color_code^0,f,c
  1900   000638  D7FC               	bra	u4057
  1901   00063A  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1902   00063C  D7FA               	bra	u4057
  1903                           
  1904                           ;color.c: 191:     RGB.G = color_read_Green();
  1905   00063E  EC95  F00E         	call	_color_read_Green	;wreg free
  1906   000642  C015  F0EA         	movff	?_color_read_Green,_RGB+4
  1907   000646  C016  F0EB         	movff	?_color_read_Green+1,_RGB+5
  1908   00064A  0100               	movlb	0	; () banked
  1909   00064C  6BEC               	clrf	(_RGB+6)& (0+255),b
  1910   00064E  6BED               	clrf	(_RGB+7)& (0+255),b
  1911   000650                     
  1912                           ; BSR set to: 0
  1913                           ;color.c: 192:     set_led_color(0b001);
  1914   000650  0E00               	movlw	0
  1915   000652  6E12               	movwf	(set_led_color@color+1)^0,c
  1916   000654  0E01               	movlw	1
  1917   000656  6E11               	movwf	set_led_color@color^0,c
  1918   000658  ECA2  F00F         	call	_set_led_color	;wreg free
  1919   00065C                     
  1920                           ;color.c: 193:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1921   00065C  0E12               	movlw	18
  1922   00065E  6E36               	movwf	(??_get_color_code+1)^0,c
  1923   000660  0EDC               	movlw	220
  1924   000662  6E35               	movwf	??_get_color_code^0,c
  1925   000664  0E60               	movlw	96
  1926   000666                     u4067:
  1927   000666  2EE8               	decfsz	wreg,f,c
  1928   000668  D7FE               	bra	u4067
  1929   00066A  2E35               	decfsz	??_get_color_code^0,f,c
  1930   00066C  D7FC               	bra	u4067
  1931   00066E  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1932   000670  D7FA               	bra	u4067
  1933   000672                     
  1934                           ;color.c: 194:     RGB.B = color_read_Blue();
  1935   000672  ECE5  F00E         	call	_color_read_Blue	;wreg free
  1936   000676  C015  F0EE         	movff	?_color_read_Blue,_RGB+8
  1937   00067A  C016  F0EF         	movff	?_color_read_Blue+1,_RGB+9
  1938   00067E  0100               	movlb	0	; () banked
  1939   000680  6BF0               	clrf	(_RGB+10)& (0+255),b
  1940   000682  6BF1               	clrf	(_RGB+11)& (0+255),b
  1941   000684                     
  1942                           ; BSR set to: 0
  1943                           ;color.c: 195:     clear1 = 0;
  1944   000684  0E00               	movlw	0
  1945   000686  6E49               	movwf	(_clear1+1)^0,c
  1946   000688  0E00               	movlw	0
  1947   00068A  6E48               	movwf	_clear1^0,c
  1948   00068C                     
  1949                           ; BSR set to: 0
  1950                           ;color.c: 196:     clear2 = 0;
  1951   00068C  0E00               	movlw	0
  1952   00068E  6E47               	movwf	(_clear2+1)^0,c
  1953   000690  0E00               	movlw	0
  1954   000692  6E46               	movwf	_clear2^0,c
  1955   000694                     
  1956                           ; BSR set to: 0
  1957                           ;color.c: 197:     set_led_color(0b000);
  1958   000694  0E00               	movlw	0
  1959   000696  6E12               	movwf	(set_led_color@color+1)^0,c
  1960   000698  0E00               	movlw	0
  1961   00069A  6E11               	movwf	set_led_color@color^0,c
  1962   00069C  ECA2  F00F         	call	_set_led_color	;wreg free
  1963   0006A0                     
  1964                           ;color.c: 199:     struct RGB_val NormalizedRGB;;color.c: 200:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1965   0006A0  0100               	movlb	0	; () banked
  1966   0006A2  5160               	movf	_Black_setup& (0+255),w,b
  1967   0006A4  5DE6               	subwf	_RGB& (0+255),w,b
  1968   0006A6  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1969   0006A8  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  1970   0006AA  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1971   0006AC  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  1972   0006AE  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1973   0006B0  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  1974   0006B2  B0D8               	btfsc	status,0,c
  1975   0006B4  EF5E  F003         	goto	u3231
  1976   0006B8  EF60  F003         	goto	u3230
  1977   0006BC                     u3231:
  1978   0006BC  EF6A  F003         	goto	l4024
  1979   0006C0                     u3230:
  1980   0006C0                     
  1981                           ; BSR set to: 0
  1982   0006C0  0E00               	movlw	0
  1983   0006C2  6FC6               	movwf	_get_color_code$463& (0+255),b
  1984   0006C4  0E00               	movlw	0
  1985   0006C6  6FC7               	movwf	(_get_color_code$463+1)& (0+255),b
  1986   0006C8  0E00               	movlw	0
  1987   0006CA  6FC8               	movwf	(_get_color_code$463+2)& (0+255),b
  1988   0006CC  0E00               	movlw	0
  1989   0006CE  6FC9               	movwf	(_get_color_code$463+3)& (0+255),b
  1990   0006D0  EF9F  F003         	goto	l4026
  1991   0006D4                     l4024:
  1992                           
  1993                           ; BSR set to: 0
  1994   0006D4  5160               	movf	_Black_setup& (0+255),w,b
  1995   0006D6  5DE6               	subwf	_RGB& (0+255),w,b
  1996   0006D8  6E11               	movwf	___lmul@multiplier^0,c
  1997   0006DA  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1998   0006DC  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  1999   0006DE  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2000   0006E0  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2001   0006E2  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2002   0006E4  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2003   0006E6  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2004   0006E8  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2005   0006EA  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2006   0006EC  0E64               	movlw	100
  2007   0006EE  6E15               	movwf	___lmul@multiplicand^0,c
  2008   0006F0  0E00               	movlw	0
  2009   0006F2  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2010   0006F4  0E00               	movlw	0
  2011   0006F6  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2012   0006F8  0E00               	movlw	0
  2013   0006FA  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2014   0006FC  ECAC  F00D         	call	___lmul	;wreg free
  2015   000700  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2016   000704  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2017   000708  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2018   00070C  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2019   000710  0100               	movlb	0	; () banked
  2020   000712  5160               	movf	_Black_setup& (0+255),w,b
  2021   000714  5D6C               	subwf	_White_setup& (0+255),w,b
  2022   000716  6E21               	movwf	___lldiv@divisor^0,c
  2023   000718  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2024   00071A  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  2025   00071C  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2026   00071E  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2027   000720  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  2028   000722  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2029   000724  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2030   000726  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  2031   000728  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2032   00072A  EC15  F00C         	call	___lldiv	;wreg free
  2033   00072E  C01D  F0C6         	movff	?___lldiv,_get_color_code$463
  2034   000732  C01E  F0C7         	movff	?___lldiv+1,_get_color_code$463+1
  2035   000736  C01F  F0C8         	movff	?___lldiv+2,_get_color_code$463+2
  2036   00073A  C020  F0C9         	movff	?___lldiv+3,_get_color_code$463+3
  2037   00073E                     l4026:
  2038   00073E  C0C6  F0DA         	movff	_get_color_code$463,get_color_code@NormalizedRGB
  2039   000742  C0C7  F0DB         	movff	_get_color_code$463+1,get_color_code@NormalizedRGB+1
  2040   000746  C0C8  F0DC         	movff	_get_color_code$463+2,get_color_code@NormalizedRGB+2
  2041   00074A  C0C9  F0DD         	movff	_get_color_code$463+3,get_color_code@NormalizedRGB+3
  2042   00074E                     
  2043                           ;color.c: 201:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2044   00074E  0100               	movlb	0	; () banked
  2045   000750  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2046   000752  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2047   000754  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2048   000756  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2049   000758  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2050   00075A  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2051   00075C  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2052   00075E  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2053   000760  B0D8               	btfsc	status,0,c
  2054   000762  EFB5  F003         	goto	u3241
  2055   000766  EFB7  F003         	goto	u3240
  2056   00076A                     u3241:
  2057   00076A  EFC1  F003         	goto	l4032
  2058   00076E                     u3240:
  2059   00076E                     
  2060                           ; BSR set to: 0
  2061   00076E  0E00               	movlw	0
  2062   000770  6FCA               	movwf	_get_color_code$464& (0+255),b
  2063   000772  0E00               	movlw	0
  2064   000774  6FCB               	movwf	(_get_color_code$464+1)& (0+255),b
  2065   000776  0E00               	movlw	0
  2066   000778  6FCC               	movwf	(_get_color_code$464+2)& (0+255),b
  2067   00077A  0E00               	movlw	0
  2068   00077C  6FCD               	movwf	(_get_color_code$464+3)& (0+255),b
  2069   00077E  EFF6  F003         	goto	l4034
  2070   000782                     l4032:
  2071                           
  2072                           ; BSR set to: 0
  2073   000782  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2074   000784  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2075   000786  6E11               	movwf	___lmul@multiplier^0,c
  2076   000788  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2077   00078A  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2078   00078C  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2079   00078E  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2080   000790  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2081   000792  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2082   000794  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2083   000796  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2084   000798  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2085   00079A  0E64               	movlw	100
  2086   00079C  6E15               	movwf	___lmul@multiplicand^0,c
  2087   00079E  0E00               	movlw	0
  2088   0007A0  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2089   0007A2  0E00               	movlw	0
  2090   0007A4  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2091   0007A6  0E00               	movlw	0
  2092   0007A8  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2093   0007AA  ECAC  F00D         	call	___lmul	;wreg free
  2094   0007AE  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2095   0007B2  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2096   0007B6  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2097   0007BA  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2098   0007BE  0100               	movlb	0	; () banked
  2099   0007C0  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2100   0007C2  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2101   0007C4  6E21               	movwf	___lldiv@divisor^0,c
  2102   0007C6  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2103   0007C8  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2104   0007CA  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2105   0007CC  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2106   0007CE  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2107   0007D0  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2108   0007D2  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2109   0007D4  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2110   0007D6  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2111   0007D8  EC15  F00C         	call	___lldiv	;wreg free
  2112   0007DC  C01D  F0CA         	movff	?___lldiv,_get_color_code$464
  2113   0007E0  C01E  F0CB         	movff	?___lldiv+1,_get_color_code$464+1
  2114   0007E4  C01F  F0CC         	movff	?___lldiv+2,_get_color_code$464+2
  2115   0007E8  C020  F0CD         	movff	?___lldiv+3,_get_color_code$464+3
  2116   0007EC                     l4034:
  2117   0007EC  C0CA  F0DE         	movff	_get_color_code$464,get_color_code@NormalizedRGB+4
  2118   0007F0  C0CB  F0DF         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+5
  2119   0007F4  C0CC  F0E0         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+6
  2120   0007F8  C0CD  F0E1         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+7
  2121   0007FC                     
  2122                           ;color.c: 202:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2123   0007FC  0100               	movlb	0	; () banked
  2124   0007FE  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2125   000800  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2126   000802  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2127   000804  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2128   000806  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2129   000808  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2130   00080A  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2131   00080C  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2132   00080E  B0D8               	btfsc	status,0,c
  2133   000810  EF0C  F004         	goto	u3251
  2134   000814  EF0E  F004         	goto	u3250
  2135   000818                     u3251:
  2136   000818  EF18  F004         	goto	l4040
  2137   00081C                     u3250:
  2138   00081C                     
  2139                           ; BSR set to: 0
  2140   00081C  0E00               	movlw	0
  2141   00081E  6FCE               	movwf	_get_color_code$465& (0+255),b
  2142   000820  0E00               	movlw	0
  2143   000822  6FCF               	movwf	(_get_color_code$465+1)& (0+255),b
  2144   000824  0E00               	movlw	0
  2145   000826  6FD0               	movwf	(_get_color_code$465+2)& (0+255),b
  2146   000828  0E00               	movlw	0
  2147   00082A  6FD1               	movwf	(_get_color_code$465+3)& (0+255),b
  2148   00082C  EF4D  F004         	goto	l4042
  2149   000830                     l4040:
  2150                           
  2151                           ; BSR set to: 0
  2152   000830  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2153   000832  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2154   000834  6E11               	movwf	___lmul@multiplier^0,c
  2155   000836  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2156   000838  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2157   00083A  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2158   00083C  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2159   00083E  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2160   000840  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2161   000842  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2162   000844  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2163   000846  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2164   000848  0E64               	movlw	100
  2165   00084A  6E15               	movwf	___lmul@multiplicand^0,c
  2166   00084C  0E00               	movlw	0
  2167   00084E  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2168   000850  0E00               	movlw	0
  2169   000852  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2170   000854  0E00               	movlw	0
  2171   000856  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2172   000858  ECAC  F00D         	call	___lmul	;wreg free
  2173   00085C  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2174   000860  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2175   000864  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2176   000868  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2177   00086C  0100               	movlb	0	; () banked
  2178   00086E  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2179   000870  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2180   000872  6E21               	movwf	___lldiv@divisor^0,c
  2181   000874  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2182   000876  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2183   000878  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2184   00087A  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2185   00087C  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2186   00087E  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2187   000880  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2188   000882  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2189   000884  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2190   000886  EC15  F00C         	call	___lldiv	;wreg free
  2191   00088A  C01D  F0CE         	movff	?___lldiv,_get_color_code$465
  2192   00088E  C01E  F0CF         	movff	?___lldiv+1,_get_color_code$465+1
  2193   000892  C01F  F0D0         	movff	?___lldiv+2,_get_color_code$465+2
  2194   000896  C020  F0D1         	movff	?___lldiv+3,_get_color_code$465+3
  2195   00089A                     l4042:
  2196   00089A  C0CE  F0E2         	movff	_get_color_code$465,get_color_code@NormalizedRGB+8
  2197   00089E  C0CF  F0E3         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+9
  2198   0008A2  C0D0  F0E4         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+10
  2199   0008A6  C0D1  F0E5         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+11
  2200   0008AA                     
  2201                           ;color.c: 204:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2202   0008AA  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2203   0008AE  EE00  F017         	lfsr	0,get_color_distance@color1
  2204   0008B2  0E0B               	movlw	11
  2205   0008B4                     u3261:
  2206   0008B4  CFDB FFEB          	movff	plusw2,plusw0
  2207   0008B8  06E8               	decf	wreg,f,c
  2208   0008BA  E2FC               	bc	u3261
  2209   0008BC  EE21  F000         	lfsr	2,_Color_rules
  2210   0008C0  EE00  F023         	lfsr	0,get_color_distance@color2
  2211   0008C4  0E0B               	movlw	11
  2212   0008C6                     u3271:
  2213   0008C6  CFDB FFEB          	movff	plusw2,plusw0
  2214   0008CA  06E8               	decf	wreg,f,c
  2215   0008CC  E2FC               	bc	u3271
  2216   0008CE  EC9A  F006         	call	_get_color_distance	;wreg free
  2217   0008D2  C017  F0D2         	movff	?_get_color_distance,get_color_code@min_value
  2218   0008D6  C018  F0D3         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2219   0008DA                     
  2220                           ;color.c: 205:     unsigned int min_index = 0;
  2221   0008DA  0E00               	movlw	0
  2222   0008DC  0100               	movlb	0	; () banked
  2223   0008DE  6FD5               	movwf	(get_color_code@min_index+1)& (0+255),b
  2224   0008E0  0E00               	movlw	0
  2225   0008E2  6FD4               	movwf	get_color_code@min_index& (0+255),b
  2226   0008E4                     
  2227                           ; BSR set to: 0
  2228                           ;color.c: 206:     for(unsigned int i = 1;i < 9; i++){
  2229   0008E4  0E00               	movlw	0
  2230   0008E6  6FD9               	movwf	(get_color_code@i+1)& (0+255),b
  2231   0008E8  0E01               	movlw	1
  2232   0008EA  6FD8               	movwf	get_color_code@i& (0+255),b
  2233   0008EC                     l4054:
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;color.c: 207:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2237   0008EC  C0D8  F011         	movff	get_color_code@i,___wmul@multiplier
  2238   0008F0  C0D9  F012         	movff	get_color_code@i+1,___wmul@multiplier+1
  2239   0008F4  0E00               	movlw	0
  2240   0008F6  6E14               	movwf	(___wmul@multiplicand+1)^0,c
  2241   0008F8  0E0C               	movlw	12
  2242   0008FA  6E13               	movwf	___wmul@multiplicand^0,c
  2243   0008FC  EC7D  F010         	call	___wmul	;wreg free
  2244   000900  0E00               	movlw	low _Color_rules
  2245   000902  2411               	addwf	?___wmul^0,w,c
  2246   000904  6ED9               	movwf	fsr2l,c
  2247   000906  0E01               	movlw	high _Color_rules
  2248   000908  2012               	addwfc	(?___wmul+1)^0,w,c
  2249   00090A  6EDA               	movwf	fsr2h,c
  2250   00090C  EE10  F0BA         	lfsr	1,_get_color_code$2463
  2251   000910  0E0B               	movlw	11
  2252   000912                     u3281:
  2253   000912  CFDB FFE3          	movff	plusw2,plusw1
  2254   000916  06E8               	decf	wreg,f,c
  2255   000918  E2FC               	bc	u3281
  2256   00091A                     
  2257                           ;color.c: 207:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2258   00091A  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2259   00091E  EE00  F017         	lfsr	0,get_color_distance@color1
  2260   000922  0E0B               	movlw	11
  2261   000924                     u3291:
  2262   000924  CFDB FFEB          	movff	plusw2,plusw0
  2263   000928  06E8               	decf	wreg,f,c
  2264   00092A  E2FC               	bc	u3291
  2265   00092C  EE20  F0BA         	lfsr	2,_get_color_code$2463
  2266   000930  EE00  F023         	lfsr	0,get_color_distance@color2
  2267   000934  0E0B               	movlw	11
  2268   000936                     u3301:
  2269   000936  CFDB FFEB          	movff	plusw2,plusw0
  2270   00093A  06E8               	decf	wreg,f,c
  2271   00093C  E2FC               	bc	u3301
  2272   00093E  EC9A  F006         	call	_get_color_distance	;wreg free
  2273   000942  C017  F0D6         	movff	?_get_color_distance,get_color_code@value
  2274   000946  C018  F0D7         	movff	?_get_color_distance+1,get_color_code@value+1
  2275   00094A                     
  2276                           ;color.c: 208:         if(value < min_value){
  2277   00094A  0100               	movlb	0	; () banked
  2278   00094C  51D2               	movf	get_color_code@min_value& (0+255),w,b
  2279   00094E  5DD6               	subwf	get_color_code@value& (0+255),w,b
  2280   000950  51D3               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2281   000952  59D7               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2282   000954  B0D8               	btfsc	status,0,c
  2283   000956  EFAF  F004         	goto	u3311
  2284   00095A  EFB1  F004         	goto	u3310
  2285   00095E                     u3311:
  2286   00095E  EFB9  F004         	goto	l4062
  2287   000962                     u3310:
  2288   000962                     
  2289                           ; BSR set to: 0
  2290                           ;color.c: 209:             min_index = i;
  2291   000962  C0D8  F0D4         	movff	get_color_code@i,get_color_code@min_index
  2292   000966  C0D9  F0D5         	movff	get_color_code@i+1,get_color_code@min_index+1
  2293                           
  2294                           ;color.c: 210:             min_value = value;
  2295   00096A  C0D6  F0D2         	movff	get_color_code@value,get_color_code@min_value
  2296   00096E  C0D7  F0D3         	movff	get_color_code@value+1,get_color_code@min_value+1
  2297   000972                     l4062:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;color.c: 212:     }
  2301   000972  4BD8               	infsnz	get_color_code@i& (0+255),f,b
  2302   000974  2BD9               	incf	(get_color_code@i+1)& (0+255),f,b
  2303   000976                     
  2304                           ; BSR set to: 0
  2305   000976  51D9               	movf	(get_color_code@i+1)& (0+255),w,b
  2306   000978  E109               	bnz	u3320
  2307   00097A  0E09               	movlw	9
  2308   00097C  5DD8               	subwf	get_color_code@i& (0+255),w,b
  2309   00097E  A0D8               	btfss	status,0,c
  2310   000980  EFC4  F004         	goto	u3321
  2311   000984  EFC6  F004         	goto	u3320
  2312   000988                     u3321:
  2313   000988  EF76  F004         	goto	l4054
  2314   00098C                     u3320:
  2315   00098C                     
  2316                           ; BSR set to: 0
  2317                           ;color.c: 213:     return min_index;
  2318   00098C  C0D4  F033         	movff	get_color_code@min_index,?_get_color_code
  2319   000990  C0D5  F034         	movff	get_color_code@min_index+1,?_get_color_code+1
  2320   000994                     
  2321                           ; BSR set to: 0
  2322   000994  0012               	return		;funcret
  2323   000996                     __end_of_get_color_code:
  2324                           	callstack 0
  2325                           
  2326 ;; *************** function _get_color_distance *****************
  2327 ;; Defined at:
  2328 ;;		line 149 in file "color.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  color1         12   22[COMRAM] struct RGB_val
  2331 ;;  color2         12   34[COMRAM] struct RGB_val
  2332 ;; Auto vars:     Size  Location     Type
  2333 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2334 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2335 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2336 ;; Return value:  Size  Location     Type
  2337 ;;                  2   22[COMRAM] unsigned int 
  2338 ;; Registers used:
  2339 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2340 ;; Tracked objects:
  2341 ;;		On entry : 0/0
  2342 ;;		On exit  : 0/0
  2343 ;;		Unchanged: 0/0
  2344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2345 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2346 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2347 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2348 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;Total ram usage:       46 bytes
  2350 ;; Hardware stack levels used: 1
  2351 ;; Hardware stack levels required when called: 6
  2352 ;; This function calls:
  2353 ;;		___wmul
  2354 ;; This function is called by:
  2355 ;;		_get_color_code
  2356 ;; This function uses a non-reentrant model
  2357 ;;
  2358                           
  2359                           	psect	text6
  2360   000D34                     __ptext6:
  2361                           	callstack 0
  2362   000D34                     _get_color_distance:
  2363                           	callstack 23
  2364   000D34                     
  2365                           ;color.c: 150:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2366   000D34  5023               	movf	get_color_distance@color2^0,w,c
  2367   000D36  5C17               	subwf	get_color_distance@color1^0,w,c
  2368   000D38  5024               	movf	(get_color_distance@color2+1)^0,w,c
  2369   000D3A  5818               	subwfb	(get_color_distance@color1+1)^0,w,c
  2370   000D3C  5025               	movf	(get_color_distance@color2+2)^0,w,c
  2371   000D3E  5819               	subwfb	(get_color_distance@color1+2)^0,w,c
  2372   000D40  5026               	movf	(get_color_distance@color2+3)^0,w,c
  2373   000D42  581A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2374   000D44  B0D8               	btfsc	status,0,c
  2375   000D46  EFA7  F006         	goto	u2891
  2376   000D4A  EFA9  F006         	goto	u2890
  2377   000D4E                     u2891:
  2378   000D4E  EFB8  F006         	goto	l3664
  2379   000D52                     u2890:
  2380   000D52  5017               	movf	get_color_distance@color1^0,w,c
  2381   000D54  5C23               	subwf	get_color_distance@color2^0,w,c
  2382   000D56  0100               	movlb	0	; () banked
  2383   000D58  6FA8               	movwf	_get_color_distance$421& (0+255),b
  2384   000D5A  5018               	movf	(get_color_distance@color1+1)^0,w,c
  2385   000D5C  5824               	subwfb	(get_color_distance@color2+1)^0,w,c
  2386   000D5E  6FA9               	movwf	(_get_color_distance$421+1)& (0+255),b
  2387   000D60  5019               	movf	(get_color_distance@color1+2)^0,w,c
  2388   000D62  5825               	subwfb	(get_color_distance@color2+2)^0,w,c
  2389   000D64  6FAA               	movwf	(_get_color_distance$421+2)& (0+255),b
  2390   000D66  501A               	movf	(get_color_distance@color1+3)^0,w,c
  2391   000D68  5826               	subwfb	(get_color_distance@color2+3)^0,w,c
  2392   000D6A  6FAB               	movwf	(_get_color_distance$421+3)& (0+255),b
  2393   000D6C  EFC5  F006         	goto	l3666
  2394   000D70                     l3664:
  2395   000D70  5023               	movf	get_color_distance@color2^0,w,c
  2396   000D72  5C17               	subwf	get_color_distance@color1^0,w,c
  2397   000D74  0100               	movlb	0	; () banked
  2398   000D76  6FA8               	movwf	_get_color_distance$421& (0+255),b
  2399   000D78  5024               	movf	(get_color_distance@color2+1)^0,w,c
  2400   000D7A  5818               	subwfb	(get_color_distance@color1+1)^0,w,c
  2401   000D7C  6FA9               	movwf	(_get_color_distance$421+1)& (0+255),b
  2402   000D7E  5025               	movf	(get_color_distance@color2+2)^0,w,c
  2403   000D80  5819               	subwfb	(get_color_distance@color1+2)^0,w,c
  2404   000D82  6FAA               	movwf	(_get_color_distance$421+2)& (0+255),b
  2405   000D84  5026               	movf	(get_color_distance@color2+3)^0,w,c
  2406   000D86  581A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2407   000D88  6FAB               	movwf	(_get_color_distance$421+3)& (0+255),b
  2408   000D8A                     l3666:
  2409                           
  2410                           ; BSR set to: 0
  2411   000D8A  C0A8  F0B4         	movff	_get_color_distance$421,get_color_distance@R_offset
  2412   000D8E  C0A9  F0B5         	movff	_get_color_distance$421+1,get_color_distance@R_offset+1
  2413                           
  2414                           ;color.c: 151:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2415   000D92  5027               	movf	(get_color_distance@color2+4)^0,w,c
  2416   000D94  5C1B               	subwf	(get_color_distance@color1+4)^0,w,c
  2417   000D96  5028               	movf	(get_color_distance@color2+5)^0,w,c
  2418   000D98  581C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2419   000D9A  5029               	movf	(get_color_distance@color2+6)^0,w,c
  2420   000D9C  581D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2421   000D9E  502A               	movf	(get_color_distance@color2+7)^0,w,c
  2422   000DA0  581E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2423   000DA2  B0D8               	btfsc	status,0,c
  2424   000DA4  EFD6  F006         	goto	u2901
  2425   000DA8  EFD8  F006         	goto	u2900
  2426   000DAC                     u2901:
  2427   000DAC  EFE6  F006         	goto	l3670
  2428   000DB0                     u2900:
  2429   000DB0                     
  2430                           ; BSR set to: 0
  2431   000DB0  501B               	movf	(get_color_distance@color1+4)^0,w,c
  2432   000DB2  5C27               	subwf	(get_color_distance@color2+4)^0,w,c
  2433   000DB4  6FAC               	movwf	_get_color_distance$423& (0+255),b
  2434   000DB6  501C               	movf	(get_color_distance@color1+5)^0,w,c
  2435   000DB8  5828               	subwfb	(get_color_distance@color2+5)^0,w,c
  2436   000DBA  6FAD               	movwf	(_get_color_distance$423+1)& (0+255),b
  2437   000DBC  501D               	movf	(get_color_distance@color1+6)^0,w,c
  2438   000DBE  5829               	subwfb	(get_color_distance@color2+6)^0,w,c
  2439   000DC0  6FAE               	movwf	(_get_color_distance$423+2)& (0+255),b
  2440   000DC2  501E               	movf	(get_color_distance@color1+7)^0,w,c
  2441   000DC4  582A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2442   000DC6  6FAF               	movwf	(_get_color_distance$423+3)& (0+255),b
  2443   000DC8  EFF2  F006         	goto	l3672
  2444   000DCC                     l3670:
  2445                           
  2446                           ; BSR set to: 0
  2447   000DCC  5027               	movf	(get_color_distance@color2+4)^0,w,c
  2448   000DCE  5C1B               	subwf	(get_color_distance@color1+4)^0,w,c
  2449   000DD0  6FAC               	movwf	_get_color_distance$423& (0+255),b
  2450   000DD2  5028               	movf	(get_color_distance@color2+5)^0,w,c
  2451   000DD4  581C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2452   000DD6  6FAD               	movwf	(_get_color_distance$423+1)& (0+255),b
  2453   000DD8  5029               	movf	(get_color_distance@color2+6)^0,w,c
  2454   000DDA  581D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2455   000DDC  6FAE               	movwf	(_get_color_distance$423+2)& (0+255),b
  2456   000DDE  502A               	movf	(get_color_distance@color2+7)^0,w,c
  2457   000DE0  581E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2458   000DE2  6FAF               	movwf	(_get_color_distance$423+3)& (0+255),b
  2459   000DE4                     l3672:
  2460                           
  2461                           ; BSR set to: 0
  2462   000DE4  C0AC  F0B6         	movff	_get_color_distance$423,get_color_distance@G_offset
  2463   000DE8  C0AD  F0B7         	movff	_get_color_distance$423+1,get_color_distance@G_offset+1
  2464                           
  2465                           ;color.c: 152:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2466   000DEC  502B               	movf	(get_color_distance@color2+8)^0,w,c
  2467   000DEE  5C1F               	subwf	(get_color_distance@color1+8)^0,w,c
  2468   000DF0  502C               	movf	(get_color_distance@color2+9)^0,w,c
  2469   000DF2  5820               	subwfb	(get_color_distance@color1+9)^0,w,c
  2470   000DF4  502D               	movf	(get_color_distance@color2+10)^0,w,c
  2471   000DF6  5821               	subwfb	(get_color_distance@color1+10)^0,w,c
  2472   000DF8  502E               	movf	(get_color_distance@color2+11)^0,w,c
  2473   000DFA  5822               	subwfb	(get_color_distance@color1+11)^0,w,c
  2474   000DFC  B0D8               	btfsc	status,0,c
  2475   000DFE  EF03  F007         	goto	u2911
  2476   000E02  EF05  F007         	goto	u2910
  2477   000E06                     u2911:
  2478   000E06  EF13  F007         	goto	l3676
  2479   000E0A                     u2910:
  2480   000E0A                     
  2481                           ; BSR set to: 0
  2482   000E0A  501F               	movf	(get_color_distance@color1+8)^0,w,c
  2483   000E0C  5C2B               	subwf	(get_color_distance@color2+8)^0,w,c
  2484   000E0E  6FB0               	movwf	_get_color_distance$425& (0+255),b
  2485   000E10  5020               	movf	(get_color_distance@color1+9)^0,w,c
  2486   000E12  582C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2487   000E14  6FB1               	movwf	(_get_color_distance$425+1)& (0+255),b
  2488   000E16  5021               	movf	(get_color_distance@color1+10)^0,w,c
  2489   000E18  582D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2490   000E1A  6FB2               	movwf	(_get_color_distance$425+2)& (0+255),b
  2491   000E1C  5022               	movf	(get_color_distance@color1+11)^0,w,c
  2492   000E1E  582E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2493   000E20  6FB3               	movwf	(_get_color_distance$425+3)& (0+255),b
  2494   000E22  EF1F  F007         	goto	l3678
  2495   000E26                     l3676:
  2496                           
  2497                           ; BSR set to: 0
  2498   000E26  502B               	movf	(get_color_distance@color2+8)^0,w,c
  2499   000E28  5C1F               	subwf	(get_color_distance@color1+8)^0,w,c
  2500   000E2A  6FB0               	movwf	_get_color_distance$425& (0+255),b
  2501   000E2C  502C               	movf	(get_color_distance@color2+9)^0,w,c
  2502   000E2E  5820               	subwfb	(get_color_distance@color1+9)^0,w,c
  2503   000E30  6FB1               	movwf	(_get_color_distance$425+1)& (0+255),b
  2504   000E32  502D               	movf	(get_color_distance@color2+10)^0,w,c
  2505   000E34  5821               	subwfb	(get_color_distance@color1+10)^0,w,c
  2506   000E36  6FB2               	movwf	(_get_color_distance$425+2)& (0+255),b
  2507   000E38  502E               	movf	(get_color_distance@color2+11)^0,w,c
  2508   000E3A  5822               	subwfb	(get_color_distance@color1+11)^0,w,c
  2509   000E3C  6FB3               	movwf	(_get_color_distance$425+3)& (0+255),b
  2510   000E3E                     l3678:
  2511                           
  2512                           ; BSR set to: 0
  2513   000E3E  C0B0  F0B8         	movff	_get_color_distance$425,get_color_distance@B_offset
  2514   000E42  C0B1  F0B9         	movff	_get_color_distance$425+1,get_color_distance@B_offset+1
  2515   000E46                     
  2516                           ; BSR set to: 0
  2517                           ;color.c: 154:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2518   000E46  C0B4  F011         	movff	get_color_distance@R_offset,___wmul@multiplier
  2519   000E4A  C0B5  F012         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2520   000E4E  C0B4  F013         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2521   000E52  C0B5  F014         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2522   000E56  EC7D  F010         	call	___wmul	;wreg free
  2523   000E5A  C011  F02F         	movff	?___wmul,??_get_color_distance
  2524   000E5E  C012  F030         	movff	?___wmul+1,??_get_color_distance+1
  2525   000E62  C0B6  F011         	movff	get_color_distance@G_offset,___wmul@multiplier
  2526   000E66  C0B7  F012         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2527   000E6A  C0B6  F013         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2528   000E6E  C0B7  F014         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2529   000E72  EC7D  F010         	call	___wmul	;wreg free
  2530   000E76  5011               	movf	?___wmul^0,w,c
  2531   000E78  242F               	addwf	??_get_color_distance^0,w,c
  2532   000E7A  6E31               	movwf	(??_get_color_distance+2)^0,c
  2533   000E7C  5012               	movf	(?___wmul+1)^0,w,c
  2534   000E7E  2030               	addwfc	(??_get_color_distance+1)^0,w,c
  2535   000E80  6E32               	movwf	(??_get_color_distance+3)^0,c
  2536   000E82  C0B8  F011         	movff	get_color_distance@B_offset,___wmul@multiplier
  2537   000E86  C0B9  F012         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2538   000E8A  C0B8  F013         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2539   000E8E  C0B9  F014         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2540   000E92  EC7D  F010         	call	___wmul	;wreg free
  2541   000E96  5011               	movf	?___wmul^0,w,c
  2542   000E98  2431               	addwf	(??_get_color_distance+2)^0,w,c
  2543   000E9A  6E17               	movwf	?_get_color_distance^0,c
  2544   000E9C  5012               	movf	(?___wmul+1)^0,w,c
  2545   000E9E  2032               	addwfc	(??_get_color_distance+3)^0,w,c
  2546   000EA0  6E18               	movwf	(?_get_color_distance+1)^0,c
  2547   000EA2  0012               	return		;funcret
  2548   000EA4                     __end_of_get_color_distance:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function ___lmul *****************
  2552 ;; Defined at:
  2553 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  multiplier      4   16[COMRAM] unsigned long 
  2556 ;;  multiplicand    4   20[COMRAM] unsigned long 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  product         4   24[COMRAM] unsigned long 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  4   16[COMRAM] unsigned long 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2568 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2569 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2571 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2572 ;;Total ram usage:       12 bytes
  2573 ;; Hardware stack levels used: 1
  2574 ;; Hardware stack levels required when called: 5
  2575 ;; This function calls:
  2576 ;;		Nothing
  2577 ;; This function is called by:
  2578 ;;		_get_color_code
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text7
  2583   001B58                     __ptext7:
  2584                           	callstack 0
  2585   001B58                     ___lmul:
  2586                           	callstack 24
  2587   001B58  0E00               	movlw	0
  2588   001B5A  6E19               	movwf	___lmul@product^0,c
  2589   001B5C  0E00               	movlw	0
  2590   001B5E  6E1A               	movwf	(___lmul@product+1)^0,c
  2591   001B60  0E00               	movlw	0
  2592   001B62  6E1B               	movwf	(___lmul@product+2)^0,c
  2593   001B64  0E00               	movlw	0
  2594   001B66  6E1C               	movwf	(___lmul@product+3)^0,c
  2595   001B68                     l3918:
  2596   001B68  A011               	btfss	___lmul@multiplier^0,0,c
  2597   001B6A  EFB9  F00D         	goto	u3041
  2598   001B6E  EFBB  F00D         	goto	u3040
  2599   001B72                     u3041:
  2600   001B72  EFC3  F00D         	goto	l3922
  2601   001B76                     u3040:
  2602   001B76  5015               	movf	___lmul@multiplicand^0,w,c
  2603   001B78  2619               	addwf	___lmul@product^0,f,c
  2604   001B7A  5016               	movf	(___lmul@multiplicand+1)^0,w,c
  2605   001B7C  221A               	addwfc	(___lmul@product+1)^0,f,c
  2606   001B7E  5017               	movf	(___lmul@multiplicand+2)^0,w,c
  2607   001B80  221B               	addwfc	(___lmul@product+2)^0,f,c
  2608   001B82  5018               	movf	(___lmul@multiplicand+3)^0,w,c
  2609   001B84  221C               	addwfc	(___lmul@product+3)^0,f,c
  2610   001B86                     l3922:
  2611   001B86  90D8               	bcf	status,0,c
  2612   001B88  3615               	rlcf	___lmul@multiplicand^0,f,c
  2613   001B8A  3616               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2614   001B8C  3617               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2615   001B8E  3618               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2616   001B90  90D8               	bcf	status,0,c
  2617   001B92  3214               	rrcf	(___lmul@multiplier+3)^0,f,c
  2618   001B94  3213               	rrcf	(___lmul@multiplier+2)^0,f,c
  2619   001B96  3212               	rrcf	(___lmul@multiplier+1)^0,f,c
  2620   001B98  3211               	rrcf	___lmul@multiplier^0,f,c
  2621   001B9A  5011               	movf	___lmul@multiplier^0,w,c
  2622   001B9C  1012               	iorwf	(___lmul@multiplier+1)^0,w,c
  2623   001B9E  1013               	iorwf	(___lmul@multiplier+2)^0,w,c
  2624   001BA0  1014               	iorwf	(___lmul@multiplier+3)^0,w,c
  2625   001BA2  A4D8               	btfss	status,2,c
  2626   001BA4  EFD6  F00D         	goto	u3051
  2627   001BA8  EFD8  F00D         	goto	u3050
  2628   001BAC                     u3051:
  2629   001BAC  EFB4  F00D         	goto	l3918
  2630   001BB0                     u3050:
  2631   001BB0  C019  F011         	movff	___lmul@product,?___lmul
  2632   001BB4  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  2633   001BB8  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  2634   001BBC  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  2635   001BC0  0012               	return		;funcret
  2636   001BC2                     __end_of___lmul:
  2637                           	callstack 0
  2638                           
  2639 ;; *************** function ___lldiv *****************
  2640 ;; Defined at:
  2641 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2642 ;; Parameters:    Size  Location     Type
  2643 ;;  dividend        4   28[COMRAM] unsigned long 
  2644 ;;  divisor         4   32[COMRAM] unsigned long 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  quotient        4   36[COMRAM] unsigned long 
  2647 ;;  counter         1   40[COMRAM] unsigned char 
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  4   28[COMRAM] unsigned long 
  2650 ;; Registers used:
  2651 ;;		wreg, status,2, status,0
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2657 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2658 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2660 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;Total ram usage:       13 bytes
  2662 ;; Hardware stack levels used: 1
  2663 ;; Hardware stack levels required when called: 5
  2664 ;; This function calls:
  2665 ;;		Nothing
  2666 ;; This function is called by:
  2667 ;;		_get_color_code
  2668 ;; This function uses a non-reentrant model
  2669 ;;
  2670                           
  2671                           	psect	text8
  2672   00182A                     __ptext8:
  2673                           	callstack 0
  2674   00182A                     ___lldiv:
  2675                           	callstack 24
  2676   00182A  0E00               	movlw	0
  2677   00182C  6E25               	movwf	___lldiv@quotient^0,c
  2678   00182E  0E00               	movlw	0
  2679   001830  6E26               	movwf	(___lldiv@quotient+1)^0,c
  2680   001832  0E00               	movlw	0
  2681   001834  6E27               	movwf	(___lldiv@quotient+2)^0,c
  2682   001836  0E00               	movlw	0
  2683   001838  6E28               	movwf	(___lldiv@quotient+3)^0,c
  2684   00183A  5021               	movf	___lldiv@divisor^0,w,c
  2685   00183C  1022               	iorwf	(___lldiv@divisor+1)^0,w,c
  2686   00183E  1023               	iorwf	(___lldiv@divisor+2)^0,w,c
  2687   001840  1024               	iorwf	(___lldiv@divisor+3)^0,w,c
  2688   001842  B4D8               	btfsc	status,2,c
  2689   001844  EF26  F00C         	goto	u3061
  2690   001848  EF28  F00C         	goto	u3060
  2691   00184C                     u3061:
  2692   00184C  EF5E  F00C         	goto	l504
  2693   001850                     u3060:
  2694   001850  0E01               	movlw	1
  2695   001852  6E29               	movwf	___lldiv@counter^0,c
  2696   001854  EF32  F00C         	goto	l3934
  2697   001858                     l3932:
  2698   001858  90D8               	bcf	status,0,c
  2699   00185A  3621               	rlcf	___lldiv@divisor^0,f,c
  2700   00185C  3622               	rlcf	(___lldiv@divisor+1)^0,f,c
  2701   00185E  3623               	rlcf	(___lldiv@divisor+2)^0,f,c
  2702   001860  3624               	rlcf	(___lldiv@divisor+3)^0,f,c
  2703   001862  2A29               	incf	___lldiv@counter^0,f,c
  2704   001864                     l3934:
  2705   001864  AE24               	btfss	(___lldiv@divisor+3)^0,7,c
  2706   001866  EF37  F00C         	goto	u3071
  2707   00186A  EF39  F00C         	goto	u3070
  2708   00186E                     u3071:
  2709   00186E  EF2C  F00C         	goto	l3932
  2710   001872                     u3070:
  2711   001872                     l3936:
  2712   001872  90D8               	bcf	status,0,c
  2713   001874  3625               	rlcf	___lldiv@quotient^0,f,c
  2714   001876  3626               	rlcf	(___lldiv@quotient+1)^0,f,c
  2715   001878  3627               	rlcf	(___lldiv@quotient+2)^0,f,c
  2716   00187A  3628               	rlcf	(___lldiv@quotient+3)^0,f,c
  2717   00187C  5021               	movf	___lldiv@divisor^0,w,c
  2718   00187E  5C1D               	subwf	___lldiv@dividend^0,w,c
  2719   001880  5022               	movf	(___lldiv@divisor+1)^0,w,c
  2720   001882  581E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2721   001884  5023               	movf	(___lldiv@divisor+2)^0,w,c
  2722   001886  581F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2723   001888  5024               	movf	(___lldiv@divisor+3)^0,w,c
  2724   00188A  5820               	subwfb	(___lldiv@dividend+3)^0,w,c
  2725   00188C  A0D8               	btfss	status,0,c
  2726   00188E  EF4B  F00C         	goto	u3081
  2727   001892  EF4D  F00C         	goto	u3080
  2728   001896                     u3081:
  2729   001896  EF56  F00C         	goto	l3944
  2730   00189A                     u3080:
  2731   00189A  5021               	movf	___lldiv@divisor^0,w,c
  2732   00189C  5E1D               	subwf	___lldiv@dividend^0,f,c
  2733   00189E  5022               	movf	(___lldiv@divisor+1)^0,w,c
  2734   0018A0  5A1E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2735   0018A2  5023               	movf	(___lldiv@divisor+2)^0,w,c
  2736   0018A4  5A1F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2737   0018A6  5024               	movf	(___lldiv@divisor+3)^0,w,c
  2738   0018A8  5A20               	subwfb	(___lldiv@dividend+3)^0,f,c
  2739   0018AA  8025               	bsf	___lldiv@quotient^0,0,c
  2740   0018AC                     l3944:
  2741   0018AC  90D8               	bcf	status,0,c
  2742   0018AE  3224               	rrcf	(___lldiv@divisor+3)^0,f,c
  2743   0018B0  3223               	rrcf	(___lldiv@divisor+2)^0,f,c
  2744   0018B2  3222               	rrcf	(___lldiv@divisor+1)^0,f,c
  2745   0018B4  3221               	rrcf	___lldiv@divisor^0,f,c
  2746   0018B6  2E29               	decfsz	___lldiv@counter^0,f,c
  2747   0018B8  EF39  F00C         	goto	l3936
  2748   0018BC                     l504:
  2749   0018BC  C025  F01D         	movff	___lldiv@quotient,?___lldiv
  2750   0018C0  C026  F01E         	movff	___lldiv@quotient+1,?___lldiv+1
  2751   0018C4  C027  F01F         	movff	___lldiv@quotient+2,?___lldiv+2
  2752   0018C8  C028  F020         	movff	___lldiv@quotient+3,?___lldiv+3
  2753   0018CC  0012               	return		;funcret
  2754   0018CE                     __end_of___lldiv:
  2755                           	callstack 0
  2756                           
  2757 ;; *************** function _fullSpeedAhead *****************
  2758 ;; Defined at:
  2759 ;;		line 256 in file "dc_motor.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  2762 ;;		 -> main@motorL(9), 
  2763 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  2764 ;;		 -> main@motorR(9), 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2779 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;Total ram usage:        4 bytes
  2781 ;; Hardware stack levels used: 1
  2782 ;; Hardware stack levels required when called: 7
  2783 ;; This function calls:
  2784 ;;		_setMotorPWM
  2785 ;; This function is called by:
  2786 ;;		_main
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text9
  2791   001C26                     __ptext9:
  2792                           	callstack 0
  2793   001C26                     _fullSpeedAhead:
  2794                           	callstack 23
  2795   001C26                     
  2796                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2797   001C26  0E00               	movlw	0
  2798   001C28  6E45               	movwf	(_seconds+1)^0,c
  2799   001C2A  0E00               	movlw	0
  2800   001C2C  6E44               	movwf	_seconds^0,c
  2801   001C2E                     
  2802                           ;dc_motor.c: 259:     (*mL).direction=0;
  2803   001C2E  EE20 F001          	lfsr	2,1
  2804   001C32  5024               	movf	fullSpeedAhead@mL^0,w,c
  2805   001C34  26D9               	addwf	fsr2l,f,c
  2806   001C36  5025               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2807   001C38  22DA               	addwfc	fsr2h,f,c
  2808   001C3A  0E00               	movlw	0
  2809   001C3C  6EDF               	movwf	indf2,c
  2810   001C3E                     
  2811                           ;dc_motor.c: 260:     (*mR).direction=0;
  2812   001C3E  EE20 F001          	lfsr	2,1
  2813   001C42  5026               	movf	fullSpeedAhead@mR^0,w,c
  2814   001C44  26D9               	addwf	fsr2l,f,c
  2815   001C46  5027               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2816   001C48  22DA               	addwfc	fsr2h,f,c
  2817   001C4A  0E00               	movlw	0
  2818   001C4C  6EDF               	movwf	indf2,c
  2819   001C4E                     
  2820                           ;dc_motor.c: 261:     (*mL).power=50;
  2821   001C4E  C024  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2822   001C52  C025  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2823   001C56  0E32               	movlw	50
  2824   001C58  6EDF               	movwf	indf2,c
  2825   001C5A                     
  2826                           ;dc_motor.c: 262:     (*mR).power=50;
  2827   001C5A  C026  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2828   001C5E  C027  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2829   001C62  0E32               	movlw	50
  2830   001C64  6EDF               	movwf	indf2,c
  2831   001C66                     
  2832                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2833   001C66  C024  F01E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2834   001C6A  C025  F01F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2835   001C6E  EC52  F007         	call	_setMotorPWM	;wreg free
  2836   001C72                     
  2837                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2838   001C72  C026  F01E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2839   001C76  C027  F01F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2840   001C7A  EC52  F007         	call	_setMotorPWM	;wreg free
  2841   001C7E  0012               	return		;funcret
  2842   001C80                     __end_of_fullSpeedAhead:
  2843                           	callstack 0
  2844                           
  2845 ;; *************** function _color_click_init *****************
  2846 ;; Defined at:
  2847 ;;		line 33 in file "color.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;		None
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;		None
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2863 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;Total ram usage:        1 bytes
  2866 ;; Hardware stack levels used: 1
  2867 ;; Hardware stack levels required when called: 9
  2868 ;; This function calls:
  2869 ;;		_I2C_2_Master_Init
  2870 ;;		_calibrate_black
  2871 ;;		_calibrate_white
  2872 ;;		_color_writetoaddr
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           	psect	text10
  2879   0013F8                     __ptext10:
  2880                           	callstack 0
  2881   0013F8                     _color_click_init:
  2882                           	callstack 21
  2883   0013F8                     
  2884                           ;color.c: 36:     I2C_2_Master_Init();
  2885   0013F8  EC40  F010         	call	_I2C_2_Master_Init	;wreg free
  2886   0013FC                     
  2887                           ;color.c: 39:   color_writetoaddr(0x00, 0x01);
  2888   0013FC  0E01               	movlw	1
  2889   0013FE  6E13               	movwf	color_writetoaddr@value^0,c
  2890   001400  0E00               	movlw	0
  2891   001402  EC90  F010         	call	_color_writetoaddr
  2892   001406                     
  2893                           ;color.c: 40:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2894   001406  0E3F               	movlw	63
  2895   001408  6E26               	movwf	??_color_click_init^0,c
  2896   00140A  0E55               	movlw	85
  2897   00140C                     u4077:
  2898   00140C  2EE8               	decfsz	wreg,f,c
  2899   00140E  D7FE               	bra	u4077
  2900   001410  2E26               	decfsz	??_color_click_init^0,f,c
  2901   001412  D7FC               	bra	u4077
  2902   001414  F000               	nop	
  2903   001416                     
  2904                           ;color.c: 43:  color_writetoaddr(0x00, 0x03);
  2905   001416  0E03               	movlw	3
  2906   001418  6E13               	movwf	color_writetoaddr@value^0,c
  2907   00141A  0E00               	movlw	0
  2908   00141C  EC90  F010         	call	_color_writetoaddr
  2909   001420                     
  2910                           ;color.c: 46:  color_writetoaddr(0x01, 0xD5);
  2911   001420  0ED5               	movlw	213
  2912   001422  6E13               	movwf	color_writetoaddr@value^0,c
  2913   001424  0E01               	movlw	1
  2914   001426  EC90  F010         	call	_color_writetoaddr
  2915   00142A                     
  2916                           ;color.c: 48:     TRISFbits.TRISF7 = 0;
  2917   00142A  9E86               	bcf	134,7,c	;volatile
  2918   00142C                     
  2919                           ;color.c: 49:     TRISGbits.TRISG1 = 0;
  2920   00142C  9287               	bcf	135,1,c	;volatile
  2921   00142E                     
  2922                           ;color.c: 50:     TRISAbits.TRISA4 = 0;
  2923   00142E  9881               	bcf	129,4,c	;volatile
  2924   001430                     
  2925                           ;color.c: 52:     Color_rules[0] = Red_rule;
  2926   001430  EE20  F09C         	lfsr	2,_Red_rule
  2927   001434  EE11  F000         	lfsr	1,_Color_rules
  2928   001438  0E0B               	movlw	11
  2929   00143A                     u3091:
  2930   00143A  CFDB FFE3          	movff	plusw2,plusw1
  2931   00143E  06E8               	decf	wreg,f,c
  2932   001440  E2FC               	bc	u3091
  2933   001442                     
  2934                           ;color.c: 53:     Color_rules[1] = Green_rule;
  2935   001442  EE20  F090         	lfsr	2,_Green_rule
  2936   001446  EE11  F00C         	lfsr	1,_Color_rules+12
  2937   00144A  0E0B               	movlw	11
  2938   00144C                     u3101:
  2939   00144C  CFDB FFE3          	movff	plusw2,plusw1
  2940   001450  06E8               	decf	wreg,f,c
  2941   001452  E2FC               	bc	u3101
  2942   001454                     
  2943                           ;color.c: 54:     Color_rules[2] = Blue_rule;
  2944   001454  EE20  F084         	lfsr	2,_Blue_rule
  2945   001458  EE11  F018         	lfsr	1,_Color_rules+24
  2946   00145C  0E0B               	movlw	11
  2947   00145E                     u3111:
  2948   00145E  CFDB FFE3          	movff	plusw2,plusw1
  2949   001462  06E8               	decf	wreg,f,c
  2950   001464  E2FC               	bc	u3111
  2951   001466                     
  2952                           ;color.c: 55:     Color_rules[3] = Yellow_rule;
  2953   001466  EE20  F078         	lfsr	2,_Yellow_rule
  2954   00146A  EE11  F024         	lfsr	1,_Color_rules+36
  2955   00146E  0E0B               	movlw	11
  2956   001470                     u3121:
  2957   001470  CFDB FFE3          	movff	plusw2,plusw1
  2958   001474  06E8               	decf	wreg,f,c
  2959   001476  E2FC               	bc	u3121
  2960   001478                     
  2961                           ;color.c: 56:     Color_rules[4] = Pink_rule;
  2962   001478  EE21  F09C         	lfsr	2,_Pink_rule
  2963   00147C  EE11  F030         	lfsr	1,_Color_rules+48
  2964   001480  0E0B               	movlw	11
  2965   001482                     u3131:
  2966   001482  CFDB FFE3          	movff	plusw2,plusw1
  2967   001486  06E8               	decf	wreg,f,c
  2968   001488  E2FC               	bc	u3131
  2969   00148A                     
  2970                           ;color.c: 57:     Color_rules[5] = Orange_rule;
  2971   00148A  EE21  F090         	lfsr	2,_Orange_rule
  2972   00148E  EE11  F03C         	lfsr	1,_Color_rules+60
  2973   001492  0E0B               	movlw	11
  2974   001494                     u3141:
  2975   001494  CFDB FFE3          	movff	plusw2,plusw1
  2976   001498  06E8               	decf	wreg,f,c
  2977   00149A  E2FC               	bc	u3141
  2978   00149C                     
  2979                           ;color.c: 58:     Color_rules[6] = Lightblue_rule;
  2980   00149C  EE21  F084         	lfsr	2,_Lightblue_rule
  2981   0014A0  EE11  F048         	lfsr	1,_Color_rules+72
  2982   0014A4  0E0B               	movlw	11
  2983   0014A6                     u3151:
  2984   0014A6  CFDB FFE3          	movff	plusw2,plusw1
  2985   0014AA  06E8               	decf	wreg,f,c
  2986   0014AC  E2FC               	bc	u3151
  2987   0014AE                     
  2988                           ;color.c: 59:     Color_rules[7] = White_rule;
  2989   0014AE  EE21  F078         	lfsr	2,_White_rule
  2990   0014B2  EE11  F054         	lfsr	1,_Color_rules+84
  2991   0014B6  0E0B               	movlw	11
  2992   0014B8                     u3161:
  2993   0014B8  CFDB FFE3          	movff	plusw2,plusw1
  2994   0014BC  06E8               	decf	wreg,f,c
  2995   0014BE  E2FC               	bc	u3161
  2996   0014C0                     
  2997                           ;color.c: 60:     Color_rules[8] = Black_rule;
  2998   0014C0  EE21  F06C         	lfsr	2,_Black_rule
  2999   0014C4  EE11  F060         	lfsr	1,_Color_rules+96
  3000   0014C8  0E0B               	movlw	11
  3001   0014CA                     u3171:
  3002   0014CA  CFDB FFE3          	movff	plusw2,plusw1
  3003   0014CE  06E8               	decf	wreg,f,c
  3004   0014D0  E2FC               	bc	u3171
  3005   0014D2                     
  3006                           ;color.c: 69:     TRISFbits.TRISF3=1;
  3007   0014D2  8686               	bsf	134,3,c	;volatile
  3008   0014D4                     
  3009                           ;color.c: 70:     ANSELFbits.ANSELF3=0;
  3010   0014D4  010E               	movlb	14	; () banked
  3011   0014D6  97B4               	bcf	180,3,b	;volatile
  3012   0014D8                     
  3013                           ; BSR set to: 14
  3014                           ;color.c: 71:     TRISFbits.TRISF2=1;
  3015   0014D8  8486               	bsf	134,2,c	;volatile
  3016   0014DA                     
  3017                           ; BSR set to: 14
  3018                           ;color.c: 72:     ANSELFbits.ANSELF2=0;
  3019   0014DA  95B4               	bcf	180,2,b	;volatile
  3020   0014DC                     l71:
  3021   0014DC  A68E               	btfss	142,3,c	;volatile
  3022   0014DE  EF73  F00A         	goto	u3181
  3023   0014E2  EF75  F00A         	goto	u3180
  3024   0014E6                     u3181:
  3025   0014E6  EF7C  F00A         	goto	l75
  3026   0014EA                     u3180:
  3027   0014EA  B48E               	btfsc	142,2,c	;volatile
  3028   0014EC  EF7A  F00A         	goto	u3191
  3029   0014F0  EF7C  F00A         	goto	u3190
  3030   0014F4                     u3191:
  3031   0014F4  EF6E  F00A         	goto	l71
  3032   0014F8                     u3190:
  3033   0014F8                     l75:
  3034                           
  3035                           ;color.c: 75:     if(!PORTFbits.RF2){
  3036   0014F8  B48E               	btfsc	142,2,c	;volatile
  3037   0014FA  EF81  F00A         	goto	u3201
  3038   0014FE  EF83  F00A         	goto	u3200
  3039   001502                     u3201:
  3040   001502  EF85  F00A         	goto	l3994
  3041   001506                     u3200:
  3042   001506  EF97  F00A         	goto	l77
  3043   00150A                     l3994:
  3044                           
  3045                           ;color.c: 78:     calibrate_white();
  3046   00150A  ECC0  F00B         	call	_calibrate_white	;wreg free
  3047   00150E                     l78:
  3048   00150E  B68E               	btfsc	142,3,c	;volatile
  3049   001510  EF8C  F00A         	goto	u3211
  3050   001514  EF8E  F00A         	goto	u3210
  3051   001518                     u3211:
  3052   001518  EF87  F00A         	goto	l78
  3053   00151C                     u3210:
  3054   00151C                     
  3055                           ;color.c: 80:     calibrate_black();
  3056   00151C  EC5D  F009         	call	_calibrate_black	;wreg free
  3057   001520                     l81:
  3058   001520  B68E               	btfsc	142,3,c	;volatile
  3059   001522  EF95  F00A         	goto	u3221
  3060   001526  EF97  F00A         	goto	u3220
  3061   00152A                     u3221:
  3062   00152A  EF90  F00A         	goto	l81
  3063   00152E                     u3220:
  3064   00152E                     l77:
  3065   00152E  0012               	return		;funcret
  3066   001530                     __end_of_color_click_init:
  3067                           	callstack 0
  3068                           
  3069 ;; *************** function _color_writetoaddr *****************
  3070 ;; Defined at:
  3071 ;;		line 85 in file "color.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  address         1    wreg     unsigned char 
  3074 ;;  value           1   18[COMRAM] unsigned char 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  address         1   19[COMRAM] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2, status,0, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3086 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3089 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;Total ram usage:        2 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 7
  3093 ;; This function calls:
  3094 ;;		_I2C_2_Master_Start
  3095 ;;		_I2C_2_Master_Stop
  3096 ;;		_I2C_2_Master_Write
  3097 ;; This function is called by:
  3098 ;;		_color_click_init
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text11
  3103   002120                     __ptext11:
  3104                           	callstack 0
  3105   002120                     _color_writetoaddr:
  3106                           	callstack 22
  3107                           
  3108                           ;incstack = 0
  3109                           ;color_writetoaddr@address stored from wreg
  3110   002120  6E14               	movwf	color_writetoaddr@address^0,c
  3111   002122                     
  3112                           ;color.c: 86:     I2C_2_Master_Start();
  3113   002122  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3114                           
  3115                           ;color.c: 87:     I2C_2_Master_Write(0x52 | 0x00);
  3116   002126  0E52               	movlw	82
  3117   002128  ECB0  F010         	call	_I2C_2_Master_Write
  3118                           
  3119                           ;color.c: 88:     I2C_2_Master_Write(0x80 | address);
  3120   00212C  5014               	movf	color_writetoaddr@address^0,w,c
  3121   00212E  0980               	iorlw	128
  3122   002130  ECB0  F010         	call	_I2C_2_Master_Write
  3123                           
  3124                           ;color.c: 89:     I2C_2_Master_Write(value);
  3125   002134  5013               	movf	color_writetoaddr@value^0,w,c
  3126   002136  ECB0  F010         	call	_I2C_2_Master_Write
  3127                           
  3128                           ;color.c: 90:     I2C_2_Master_Stop();
  3129   00213A  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3130   00213E  0012               	return		;funcret
  3131   002140                     __end_of_color_writetoaddr:
  3132                           	callstack 0
  3133                           
  3134 ;; *************** function _calibrate_white *****************
  3135 ;; Defined at:
  3136 ;;		line 238 in file "color.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;		None
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;		None
  3141 ;; Return value:  Size  Location     Type
  3142 ;;                  1    wreg      void 
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0, cstack
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3152 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;Total ram usage:        2 bytes
  3155 ;; Hardware stack levels used: 1
  3156 ;; Hardware stack levels required when called: 8
  3157 ;; This function calls:
  3158 ;;		_color_read_Blue
  3159 ;;		_color_read_Green
  3160 ;;		_color_read_Red
  3161 ;;		_set_led_color
  3162 ;; This function is called by:
  3163 ;;		_color_click_init
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text12
  3168   001780                     __ptext12:
  3169                           	callstack 0
  3170   001780                     _calibrate_white:
  3171                           	callstack 21
  3172   001780                     
  3173                           ;color.c: 239:     set_led_color(0b100);
  3174   001780  0E00               	movlw	0
  3175   001782  6E12               	movwf	(set_led_color@color+1)^0,c
  3176   001784  0E04               	movlw	4
  3177   001786  6E11               	movwf	set_led_color@color^0,c
  3178   001788  ECA2  F00F         	call	_set_led_color	;wreg free
  3179   00178C                     
  3180                           ;color.c: 240:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3181   00178C  0E12               	movlw	18
  3182   00178E  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3183   001790  0EDC               	movlw	220
  3184   001792  6E1C               	movwf	??_calibrate_white^0,c
  3185   001794  0E60               	movlw	96
  3186   001796                     u4087:
  3187   001796  2EE8               	decfsz	wreg,f,c
  3188   001798  D7FE               	bra	u4087
  3189   00179A  2E1C               	decfsz	??_calibrate_white^0,f,c
  3190   00179C  D7FC               	bra	u4087
  3191   00179E  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3192   0017A0  D7FA               	bra	u4087
  3193   0017A2                     
  3194                           ;color.c: 241:     White_setup.R = color_read_Red();
  3195   0017A2  EC6D  F00E         	call	_color_read_Red	;wreg free
  3196   0017A6  C015  F06C         	movff	?_color_read_Red,_White_setup
  3197   0017AA  C016  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3198   0017AE  0100               	movlb	0	; () banked
  3199   0017B0  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3200   0017B2  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3201   0017B4                     
  3202                           ; BSR set to: 0
  3203                           ;color.c: 242:     set_led_color(0b010);
  3204   0017B4  0E00               	movlw	0
  3205   0017B6  6E12               	movwf	(set_led_color@color+1)^0,c
  3206   0017B8  0E02               	movlw	2
  3207   0017BA  6E11               	movwf	set_led_color@color^0,c
  3208   0017BC  ECA2  F00F         	call	_set_led_color	;wreg free
  3209   0017C0                     
  3210                           ;color.c: 243:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3211   0017C0  0E12               	movlw	18
  3212   0017C2  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3213   0017C4  0EDC               	movlw	220
  3214   0017C6  6E1C               	movwf	??_calibrate_white^0,c
  3215   0017C8  0E60               	movlw	96
  3216   0017CA                     u4097:
  3217   0017CA  2EE8               	decfsz	wreg,f,c
  3218   0017CC  D7FE               	bra	u4097
  3219   0017CE  2E1C               	decfsz	??_calibrate_white^0,f,c
  3220   0017D0  D7FC               	bra	u4097
  3221   0017D2  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3222   0017D4  D7FA               	bra	u4097
  3223                           
  3224                           ;color.c: 244:     White_setup.G = color_read_Green();
  3225   0017D6  EC95  F00E         	call	_color_read_Green	;wreg free
  3226   0017DA  C015  F070         	movff	?_color_read_Green,_White_setup+4
  3227   0017DE  C016  F071         	movff	?_color_read_Green+1,_White_setup+5
  3228   0017E2  0100               	movlb	0	; () banked
  3229   0017E4  6B72               	clrf	(_White_setup+6)& (0+255),b
  3230   0017E6  6B73               	clrf	(_White_setup+7)& (0+255),b
  3231   0017E8                     
  3232                           ; BSR set to: 0
  3233                           ;color.c: 245:     set_led_color(0b001);
  3234   0017E8  0E00               	movlw	0
  3235   0017EA  6E12               	movwf	(set_led_color@color+1)^0,c
  3236   0017EC  0E01               	movlw	1
  3237   0017EE  6E11               	movwf	set_led_color@color^0,c
  3238   0017F0  ECA2  F00F         	call	_set_led_color	;wreg free
  3239   0017F4                     
  3240                           ;color.c: 246:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3241   0017F4  0E12               	movlw	18
  3242   0017F6  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3243   0017F8  0EDC               	movlw	220
  3244   0017FA  6E1C               	movwf	??_calibrate_white^0,c
  3245   0017FC  0E60               	movlw	96
  3246   0017FE                     u4107:
  3247   0017FE  2EE8               	decfsz	wreg,f,c
  3248   001800  D7FE               	bra	u4107
  3249   001802  2E1C               	decfsz	??_calibrate_white^0,f,c
  3250   001804  D7FC               	bra	u4107
  3251   001806  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3252   001808  D7FA               	bra	u4107
  3253   00180A                     
  3254                           ;color.c: 247:     White_setup.B = color_read_Blue();
  3255   00180A  ECE5  F00E         	call	_color_read_Blue	;wreg free
  3256   00180E  C015  F074         	movff	?_color_read_Blue,_White_setup+8
  3257   001812  C016  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3258   001816  0100               	movlb	0	; () banked
  3259   001818  6B76               	clrf	(_White_setup+10)& (0+255),b
  3260   00181A  6B77               	clrf	(_White_setup+11)& (0+255),b
  3261   00181C                     
  3262                           ; BSR set to: 0
  3263                           ;color.c: 248:     set_led_color(0b000);
  3264   00181C  0E00               	movlw	0
  3265   00181E  6E12               	movwf	(set_led_color@color+1)^0,c
  3266   001820  0E00               	movlw	0
  3267   001822  6E11               	movwf	set_led_color@color^0,c
  3268   001824  ECA2  F00F         	call	_set_led_color	;wreg free
  3269   001828  0012               	return		;funcret
  3270   00182A                     __end_of_calibrate_white:
  3271                           	callstack 0
  3272                           
  3273 ;; *************** function _calibrate_black *****************
  3274 ;; Defined at:
  3275 ;;		line 218 in file "color.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;		None
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  clear2          2   33[COMRAM] unsigned int 
  3280 ;;  clear1          2   31[COMRAM] unsigned int 
  3281 ;; Return value:  Size  Location     Type
  3282 ;;                  1    wreg      void 
  3283 ;; Registers used:
  3284 ;;		wreg, status,2, status,0, cstack
  3285 ;; Tracked objects:
  3286 ;;		On entry : 0/0
  3287 ;;		On exit  : 0/0
  3288 ;;		Unchanged: 0/0
  3289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3291 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3292 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3293 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3294 ;;Total ram usage:        8 bytes
  3295 ;; Hardware stack levels used: 1
  3296 ;; Hardware stack levels required when called: 8
  3297 ;; This function calls:
  3298 ;;		___lwdiv
  3299 ;;		_color_read_Blue
  3300 ;;		_color_read_Clear
  3301 ;;		_color_read_Green
  3302 ;;		_color_read_Red
  3303 ;;		_set_led_color
  3304 ;; This function is called by:
  3305 ;;		_color_click_init
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           	psect	text13
  3310   0012BA                     __ptext13:
  3311                           	callstack 0
  3312   0012BA                     _calibrate_black:
  3313                           	callstack 21
  3314   0012BA                     
  3315                           ;color.c: 219:     set_led_color(0b100);
  3316   0012BA  0E00               	movlw	0
  3317   0012BC  6E12               	movwf	(set_led_color@color+1)^0,c
  3318   0012BE  0E04               	movlw	4
  3319   0012C0  6E11               	movwf	set_led_color@color^0,c
  3320   0012C2  ECA2  F00F         	call	_set_led_color	;wreg free
  3321   0012C6                     
  3322                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3323   0012C6  0E12               	movlw	18
  3324   0012C8  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3325   0012CA  0EDC               	movlw	220
  3326   0012CC  6E1E               	movwf	??_calibrate_black^0,c
  3327   0012CE  0E60               	movlw	96
  3328   0012D0                     u4117:
  3329   0012D0  2EE8               	decfsz	wreg,f,c
  3330   0012D2  D7FE               	bra	u4117
  3331   0012D4  2E1E               	decfsz	??_calibrate_black^0,f,c
  3332   0012D6  D7FC               	bra	u4117
  3333   0012D8  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3334   0012DA  D7FA               	bra	u4117
  3335   0012DC                     
  3336                           ;color.c: 221:     Black_setup.R = color_read_Red();
  3337   0012DC  EC6D  F00E         	call	_color_read_Red	;wreg free
  3338   0012E0  C015  F060         	movff	?_color_read_Red,_Black_setup
  3339   0012E4  C016  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3340   0012E8  0100               	movlb	0	; () banked
  3341   0012EA  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3342   0012EC  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3343   0012EE                     
  3344                           ; BSR set to: 0
  3345                           ;color.c: 222:     set_led_color(0b010);
  3346   0012EE  0E00               	movlw	0
  3347   0012F0  6E12               	movwf	(set_led_color@color+1)^0,c
  3348   0012F2  0E02               	movlw	2
  3349   0012F4  6E11               	movwf	set_led_color@color^0,c
  3350   0012F6  ECA2  F00F         	call	_set_led_color	;wreg free
  3351   0012FA                     
  3352                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3353   0012FA  0E12               	movlw	18
  3354   0012FC  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3355   0012FE  0EDC               	movlw	220
  3356   001300  6E1E               	movwf	??_calibrate_black^0,c
  3357   001302  0E60               	movlw	96
  3358   001304                     u4127:
  3359   001304  2EE8               	decfsz	wreg,f,c
  3360   001306  D7FE               	bra	u4127
  3361   001308  2E1E               	decfsz	??_calibrate_black^0,f,c
  3362   00130A  D7FC               	bra	u4127
  3363   00130C  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3364   00130E  D7FA               	bra	u4127
  3365                           
  3366                           ;color.c: 224:     Black_setup.G = color_read_Green();
  3367   001310  EC95  F00E         	call	_color_read_Green	;wreg free
  3368   001314  C015  F064         	movff	?_color_read_Green,_Black_setup+4
  3369   001318  C016  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3370   00131C  0100               	movlb	0	; () banked
  3371   00131E  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3372   001320  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3373   001322                     
  3374                           ; BSR set to: 0
  3375                           ;color.c: 225:     set_led_color(0b001);
  3376   001322  0E00               	movlw	0
  3377   001324  6E12               	movwf	(set_led_color@color+1)^0,c
  3378   001326  0E01               	movlw	1
  3379   001328  6E11               	movwf	set_led_color@color^0,c
  3380   00132A  ECA2  F00F         	call	_set_led_color	;wreg free
  3381   00132E                     
  3382                           ;color.c: 226:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3383   00132E  0E12               	movlw	18
  3384   001330  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3385   001332  0EDC               	movlw	220
  3386   001334  6E1E               	movwf	??_calibrate_black^0,c
  3387   001336  0E60               	movlw	96
  3388   001338                     u4137:
  3389   001338  2EE8               	decfsz	wreg,f,c
  3390   00133A  D7FE               	bra	u4137
  3391   00133C  2E1E               	decfsz	??_calibrate_black^0,f,c
  3392   00133E  D7FC               	bra	u4137
  3393   001340  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3394   001342  D7FA               	bra	u4137
  3395   001344                     
  3396                           ;color.c: 227:     Black_setup.B = color_read_Blue();
  3397   001344  ECE5  F00E         	call	_color_read_Blue	;wreg free
  3398   001348  C015  F068         	movff	?_color_read_Blue,_Black_setup+8
  3399   00134C  C016  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3400   001350  0100               	movlb	0	; () banked
  3401   001352  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3402   001354  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3403   001356                     
  3404                           ; BSR set to: 0
  3405                           ;color.c: 228:     set_led_color(0b000);
  3406   001356  0E00               	movlw	0
  3407   001358  6E12               	movwf	(set_led_color@color+1)^0,c
  3408   00135A  0E00               	movlw	0
  3409   00135C  6E11               	movwf	set_led_color@color^0,c
  3410   00135E  ECA2  F00F         	call	_set_led_color	;wreg free
  3411                           
  3412                           ;color.c: 229:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3413   001362  0E12               	movlw	18
  3414   001364  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3415   001366  0EDC               	movlw	220
  3416   001368  6E1E               	movwf	??_calibrate_black^0,c
  3417   00136A  0E60               	movlw	96
  3418   00136C                     u4147:
  3419   00136C  2EE8               	decfsz	wreg,f,c
  3420   00136E  D7FE               	bra	u4147
  3421   001370  2E1E               	decfsz	??_calibrate_black^0,f,c
  3422   001372  D7FC               	bra	u4147
  3423   001374  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3424   001376  D7FA               	bra	u4147
  3425   001378                     
  3426                           ;color.c: 230:     unsigned int clear1 = color_read_Clear();
  3427   001378  ECBD  F00E         	call	_color_read_Clear	;wreg free
  3428   00137C  C015  F020         	movff	?_color_read_Clear,calibrate_black@clear1
  3429   001380  C016  F021         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3430   001384                     
  3431                           ;color.c: 231:     set_led_color(0b111);
  3432   001384  0E00               	movlw	0
  3433   001386  6E12               	movwf	(set_led_color@color+1)^0,c
  3434   001388  0E07               	movlw	7
  3435   00138A  6E11               	movwf	set_led_color@color^0,c
  3436   00138C  ECA2  F00F         	call	_set_led_color	;wreg free
  3437   001390                     
  3438                           ;color.c: 232:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3439   001390  0E12               	movlw	18
  3440   001392  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3441   001394  0EDC               	movlw	220
  3442   001396  6E1E               	movwf	??_calibrate_black^0,c
  3443   001398  0E60               	movlw	96
  3444   00139A                     u4157:
  3445   00139A  2EE8               	decfsz	wreg,f,c
  3446   00139C  D7FE               	bra	u4157
  3447   00139E  2E1E               	decfsz	??_calibrate_black^0,f,c
  3448   0013A0  D7FC               	bra	u4157
  3449   0013A2  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3450   0013A4  D7FA               	bra	u4157
  3451   0013A6                     
  3452                           ;color.c: 233:     unsigned int clear2 = color_read_Clear();
  3453   0013A6  ECBD  F00E         	call	_color_read_Clear	;wreg free
  3454   0013AA  C015  F022         	movff	?_color_read_Clear,calibrate_black@clear2
  3455   0013AE  C016  F023         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3456                           
  3457                           ;color.c: 234:     set_led_color(0b000);
  3458   0013B2  0E00               	movlw	0
  3459   0013B4  6E12               	movwf	(set_led_color@color+1)^0,c
  3460   0013B6  0E00               	movlw	0
  3461   0013B8  6E11               	movwf	set_led_color@color^0,c
  3462   0013BA  ECA2  F00F         	call	_set_led_color	;wreg free
  3463   0013BE                     
  3464                           ;color.c: 235:     wall_coef = clear2/clear1/5;
  3465   0013BE  C020  F019         	movff	calibrate_black@clear1,___lwdiv@divisor
  3466   0013C2  C021  F01A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3467   0013C6  C022  F017         	movff	calibrate_black@clear2,___lwdiv@dividend
  3468   0013CA  C023  F018         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3469   0013CE  EC72  F00D         	call	___lwdiv	;wreg free
  3470   0013D2  C017  F024         	movff	?___lwdiv,_calibrate_black$2464
  3471   0013D6  C018  F025         	movff	?___lwdiv+1,_calibrate_black$2464+1
  3472   0013DA                     
  3473                           ;color.c: 235:     wall_coef = clear2/clear1/5;
  3474   0013DA  C024  F017         	movff	_calibrate_black$2464,___lwdiv@dividend
  3475   0013DE  C025  F018         	movff	_calibrate_black$2464+1,___lwdiv@dividend+1
  3476   0013E2  0E00               	movlw	0
  3477   0013E4  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  3478   0013E6  0E05               	movlw	5
  3479   0013E8  6E19               	movwf	___lwdiv@divisor^0,c
  3480   0013EA  EC72  F00D         	call	___lwdiv	;wreg free
  3481   0013EE  C017  F04C         	movff	?___lwdiv,_wall_coef
  3482   0013F2  C018  F04D         	movff	?___lwdiv+1,_wall_coef+1
  3483   0013F6  0012               	return		;funcret
  3484   0013F8                     __end_of_calibrate_black:
  3485                           	callstack 0
  3486                           
  3487 ;; *************** function _set_led_color *****************
  3488 ;; Defined at:
  3489 ;;		line 157 in file "color.c"
  3490 ;; Parameters:    Size  Location     Type
  3491 ;;  color           2   16[COMRAM] unsigned int 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;		None
  3494 ;; Return value:  Size  Location     Type
  3495 ;;                  1    wreg      void 
  3496 ;; Registers used:
  3497 ;;		None
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3507 ;;Total ram usage:        2 bytes
  3508 ;; Hardware stack levels used: 1
  3509 ;; Hardware stack levels required when called: 5
  3510 ;; This function calls:
  3511 ;;		Nothing
  3512 ;; This function is called by:
  3513 ;;		_get_color_code
  3514 ;;		_calibrate_black
  3515 ;;		_calibrate_white
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           	psect	text14
  3520   001F44                     __ptext14:
  3521                           	callstack 0
  3522   001F44                     _set_led_color:
  3523                           	callstack 24
  3524   001F44                     
  3525                           ;color.c: 161:     if(color & 0b100){
  3526   001F44  A411               	btfss	set_led_color@color^0,2,c
  3527   001F46  EFA7  F00F         	goto	u2841
  3528   001F4A  EFA9  F00F         	goto	u2840
  3529   001F4E                     u2841:
  3530   001F4E  EFAC  F00F         	goto	l116
  3531   001F52                     u2840:
  3532   001F52                     
  3533                           ;color.c: 162:         LATGbits.LATG1 = 1;
  3534   001F52  827F               	bsf	127,1,c	;volatile
  3535                           
  3536                           ;color.c: 163:     }else{
  3537   001F54  EFAD  F00F         	goto	l117
  3538   001F58                     l116:
  3539                           
  3540                           ;color.c: 164:         LATGbits.LATG1 = 0;
  3541   001F58  927F               	bcf	127,1,c	;volatile
  3542   001F5A                     l117:
  3543                           
  3544                           ;color.c: 166:     if(color & 0b010){
  3545   001F5A  A211               	btfss	set_led_color@color^0,1,c
  3546   001F5C  EFB2  F00F         	goto	u2851
  3547   001F60  EFB4  F00F         	goto	u2850
  3548   001F64                     u2851:
  3549   001F64  EFB7  F00F         	goto	l118
  3550   001F68                     u2850:
  3551   001F68                     
  3552                           ;color.c: 167:         LATAbits.LATA4 = 1;
  3553   001F68  8879               	bsf	121,4,c	;volatile
  3554                           
  3555                           ;color.c: 168:     }else{
  3556   001F6A  EFB8  F00F         	goto	l119
  3557   001F6E                     l118:
  3558                           
  3559                           ;color.c: 169:         LATAbits.LATA4 = 0;
  3560   001F6E  9879               	bcf	121,4,c	;volatile
  3561   001F70                     l119:
  3562                           
  3563                           ;color.c: 171:     if(color & 0b001){
  3564   001F70  A011               	btfss	set_led_color@color^0,0,c
  3565   001F72  EFBD  F00F         	goto	u2861
  3566   001F76  EFBF  F00F         	goto	u2860
  3567   001F7A                     u2861:
  3568   001F7A  EFC2  F00F         	goto	l120
  3569   001F7E                     u2860:
  3570   001F7E                     
  3571                           ;color.c: 172:         LATFbits.LATF7 = 1;
  3572   001F7E  8E7E               	bsf	126,7,c	;volatile
  3573                           
  3574                           ;color.c: 173:     }else{
  3575   001F80  EFC3  F00F         	goto	l122
  3576   001F84                     l120:
  3577                           
  3578                           ;color.c: 174:         LATFbits.LATF7 = 0;
  3579   001F84  9E7E               	bcf	126,7,c	;volatile
  3580   001F86                     l122:
  3581   001F86  0012               	return		;funcret
  3582   001F88                     __end_of_set_led_color:
  3583                           	callstack 0
  3584                           
  3585 ;; *************** function _color_read_Red *****************
  3586 ;; Defined at:
  3587 ;;		line 93 in file "color.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  tmp             2   25[COMRAM] unsigned int 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  2   20[COMRAM] unsigned int 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3601 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3602 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3603 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3604 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;Total ram usage:        7 bytes
  3606 ;; Hardware stack levels used: 1
  3607 ;; Hardware stack levels required when called: 7
  3608 ;; This function calls:
  3609 ;;		_I2C_2_Master_Read
  3610 ;;		_I2C_2_Master_RepStart
  3611 ;;		_I2C_2_Master_Start
  3612 ;;		_I2C_2_Master_Stop
  3613 ;;		_I2C_2_Master_Write
  3614 ;; This function is called by:
  3615 ;;		_get_color_code
  3616 ;;		_calibrate_black
  3617 ;;		_calibrate_white
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text15
  3622   001CDA                     __ptext15:
  3623                           	callstack 0
  3624   001CDA                     _color_read_Red:
  3625                           	callstack 22
  3626   001CDA                     
  3627                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  3628   001CDA  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3629                           
  3630                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  3631   001CDE  0E52               	movlw	82
  3632   001CE0  ECB0  F010         	call	_I2C_2_Master_Write
  3633                           
  3634                           ;color.c: 98:  I2C_2_Master_Write(0xA0 | 0x16);
  3635   001CE4  0EB6               	movlw	182
  3636   001CE6  ECB0  F010         	call	_I2C_2_Master_Write
  3637                           
  3638                           ;color.c: 99:  I2C_2_Master_RepStart();
  3639   001CEA  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3640                           
  3641                           ;color.c: 100:  I2C_2_Master_Write(0x52 | 0x01);
  3642   001CEE  0E53               	movlw	83
  3643   001CF0  ECB0  F010         	call	_I2C_2_Master_Write
  3644                           
  3645                           ;color.c: 101:  tmp=I2C_2_Master_Read(1);
  3646   001CF4  0E01               	movlw	1
  3647   001CF6  ECE6  F00F         	call	_I2C_2_Master_Read
  3648   001CFA  6E17               	movwf	??_color_read_Red^0,c
  3649   001CFC  5017               	movf	??_color_read_Red^0,w,c
  3650   001CFE  6E1A               	movwf	color_read_Red@tmp^0,c
  3651   001D00  6A1B               	clrf	(color_read_Red@tmp+1)^0,c
  3652                           
  3653                           ;color.c: 102:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3654   001D02  0E00               	movlw	0
  3655   001D04  ECE6  F00F         	call	_I2C_2_Master_Read
  3656   001D08  6E17               	movwf	??_color_read_Red^0,c
  3657   001D0A  5017               	movf	??_color_read_Red^0,w,c
  3658   001D0C  6E19               	movwf	(??_color_read_Red+2)^0,c
  3659   001D0E  6A18               	clrf	(??_color_read_Red+1)^0,c
  3660   001D10  501A               	movf	color_read_Red@tmp^0,w,c
  3661   001D12  1018               	iorwf	(??_color_read_Red+1)^0,w,c
  3662   001D14  6E1A               	movwf	color_read_Red@tmp^0,c
  3663   001D16  501B               	movf	(color_read_Red@tmp+1)^0,w,c
  3664   001D18  1019               	iorwf	(??_color_read_Red+2)^0,w,c
  3665   001D1A  6E1B               	movwf	(color_read_Red@tmp+1)^0,c
  3666                           
  3667                           ;color.c: 103:  I2C_2_Master_Stop();
  3668   001D1C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3669   001D20                     
  3670                           ;color.c: 104:  return tmp;
  3671   001D20  C01A  F015         	movff	color_read_Red@tmp,?_color_read_Red
  3672   001D24  C01B  F016         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3673   001D28  0012               	return		;funcret
  3674   001D2A                     __end_of_color_read_Red:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _color_read_Green *****************
  3678 ;; Defined at:
  3679 ;;		line 121 in file "color.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;		None
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  tmp             2   25[COMRAM] unsigned int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  2   20[COMRAM] unsigned int 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3693 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3694 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3695 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3696 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;Total ram usage:        7 bytes
  3698 ;; Hardware stack levels used: 1
  3699 ;; Hardware stack levels required when called: 7
  3700 ;; This function calls:
  3701 ;;		_I2C_2_Master_Read
  3702 ;;		_I2C_2_Master_RepStart
  3703 ;;		_I2C_2_Master_Start
  3704 ;;		_I2C_2_Master_Stop
  3705 ;;		_I2C_2_Master_Write
  3706 ;; This function is called by:
  3707 ;;		_get_color_code
  3708 ;;		_calibrate_black
  3709 ;;		_calibrate_white
  3710 ;; This function uses a non-reentrant model
  3711 ;;
  3712                           
  3713                           	psect	text16
  3714   001D2A                     __ptext16:
  3715                           	callstack 0
  3716   001D2A                     _color_read_Green:
  3717                           	callstack 22
  3718   001D2A                     
  3719                           ;color.c: 123:  unsigned int tmp;;color.c: 124:  I2C_2_Master_Start();
  3720   001D2A  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3721                           
  3722                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x00);
  3723   001D2E  0E52               	movlw	82
  3724   001D30  ECB0  F010         	call	_I2C_2_Master_Write
  3725                           
  3726                           ;color.c: 126:  I2C_2_Master_Write(0xA0 | 0x18);
  3727   001D34  0EB8               	movlw	184
  3728   001D36  ECB0  F010         	call	_I2C_2_Master_Write
  3729                           
  3730                           ;color.c: 127:  I2C_2_Master_RepStart();
  3731   001D3A  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3732                           
  3733                           ;color.c: 128:  I2C_2_Master_Write(0x52 | 0x01);
  3734   001D3E  0E53               	movlw	83
  3735   001D40  ECB0  F010         	call	_I2C_2_Master_Write
  3736                           
  3737                           ;color.c: 129:  tmp=I2C_2_Master_Read(1);
  3738   001D44  0E01               	movlw	1
  3739   001D46  ECE6  F00F         	call	_I2C_2_Master_Read
  3740   001D4A  6E17               	movwf	??_color_read_Green^0,c
  3741   001D4C  5017               	movf	??_color_read_Green^0,w,c
  3742   001D4E  6E1A               	movwf	color_read_Green@tmp^0,c
  3743   001D50  6A1B               	clrf	(color_read_Green@tmp+1)^0,c
  3744                           
  3745                           ;color.c: 130:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3746   001D52  0E00               	movlw	0
  3747   001D54  ECE6  F00F         	call	_I2C_2_Master_Read
  3748   001D58  6E17               	movwf	??_color_read_Green^0,c
  3749   001D5A  5017               	movf	??_color_read_Green^0,w,c
  3750   001D5C  6E19               	movwf	(??_color_read_Green+2)^0,c
  3751   001D5E  6A18               	clrf	(??_color_read_Green+1)^0,c
  3752   001D60  501A               	movf	color_read_Green@tmp^0,w,c
  3753   001D62  1018               	iorwf	(??_color_read_Green+1)^0,w,c
  3754   001D64  6E1A               	movwf	color_read_Green@tmp^0,c
  3755   001D66  501B               	movf	(color_read_Green@tmp+1)^0,w,c
  3756   001D68  1019               	iorwf	(??_color_read_Green+2)^0,w,c
  3757   001D6A  6E1B               	movwf	(color_read_Green@tmp+1)^0,c
  3758                           
  3759                           ;color.c: 131:  I2C_2_Master_Stop();
  3760   001D6C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3761   001D70                     
  3762                           ;color.c: 132:  return tmp;
  3763   001D70  C01A  F015         	movff	color_read_Green@tmp,?_color_read_Green
  3764   001D74  C01B  F016         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3765   001D78  0012               	return		;funcret
  3766   001D7A                     __end_of_color_read_Green:
  3767                           	callstack 0
  3768                           
  3769 ;; *************** function _color_read_Clear *****************
  3770 ;; Defined at:
  3771 ;;		line 135 in file "color.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  tmp             2   25[COMRAM] unsigned int 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  2   20[COMRAM] unsigned int 
  3778 ;; Registers used:
  3779 ;;		wreg, status,2, status,0, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3785 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3787 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3788 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;Total ram usage:        7 bytes
  3790 ;; Hardware stack levels used: 1
  3791 ;; Hardware stack levels required when called: 7
  3792 ;; This function calls:
  3793 ;;		_I2C_2_Master_Read
  3794 ;;		_I2C_2_Master_RepStart
  3795 ;;		_I2C_2_Master_Start
  3796 ;;		_I2C_2_Master_Stop
  3797 ;;		_I2C_2_Master_Write
  3798 ;; This function is called by:
  3799 ;;		_calibrate_black
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text17
  3804   001D7A                     __ptext17:
  3805                           	callstack 0
  3806   001D7A                     _color_read_Clear:
  3807                           	callstack 21
  3808   001D7A                     
  3809                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  3810   001D7A  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3811                           
  3812                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  3813   001D7E  0E52               	movlw	82
  3814   001D80  ECB0  F010         	call	_I2C_2_Master_Write
  3815                           
  3816                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  3817   001D84  0EB4               	movlw	180
  3818   001D86  ECB0  F010         	call	_I2C_2_Master_Write
  3819                           
  3820                           ;color.c: 141:  I2C_2_Master_RepStart();
  3821   001D8A  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3822                           
  3823                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  3824   001D8E  0E53               	movlw	83
  3825   001D90  ECB0  F010         	call	_I2C_2_Master_Write
  3826                           
  3827                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  3828   001D94  0E01               	movlw	1
  3829   001D96  ECE6  F00F         	call	_I2C_2_Master_Read
  3830   001D9A  6E17               	movwf	??_color_read_Clear^0,c
  3831   001D9C  5017               	movf	??_color_read_Clear^0,w,c
  3832   001D9E  6E1A               	movwf	color_read_Clear@tmp^0,c
  3833   001DA0  6A1B               	clrf	(color_read_Clear@tmp+1)^0,c
  3834                           
  3835                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3836   001DA2  0E00               	movlw	0
  3837   001DA4  ECE6  F00F         	call	_I2C_2_Master_Read
  3838   001DA8  6E17               	movwf	??_color_read_Clear^0,c
  3839   001DAA  5017               	movf	??_color_read_Clear^0,w,c
  3840   001DAC  6E19               	movwf	(??_color_read_Clear+2)^0,c
  3841   001DAE  6A18               	clrf	(??_color_read_Clear+1)^0,c
  3842   001DB0  501A               	movf	color_read_Clear@tmp^0,w,c
  3843   001DB2  1018               	iorwf	(??_color_read_Clear+1)^0,w,c
  3844   001DB4  6E1A               	movwf	color_read_Clear@tmp^0,c
  3845   001DB6  501B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3846   001DB8  1019               	iorwf	(??_color_read_Clear+2)^0,w,c
  3847   001DBA  6E1B               	movwf	(color_read_Clear@tmp+1)^0,c
  3848                           
  3849                           ;color.c: 145:  I2C_2_Master_Stop();
  3850   001DBC  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3851   001DC0                     
  3852                           ;color.c: 146:  return tmp;
  3853   001DC0  C01A  F015         	movff	color_read_Clear@tmp,?_color_read_Clear
  3854   001DC4  C01B  F016         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3855   001DC8  0012               	return		;funcret
  3856   001DCA                     __end_of_color_read_Clear:
  3857                           	callstack 0
  3858                           
  3859 ;; *************** function _color_read_Blue *****************
  3860 ;; Defined at:
  3861 ;;		line 107 in file "color.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;		None
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  tmp             2   25[COMRAM] unsigned int 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  2   20[COMRAM] unsigned int 
  3868 ;; Registers used:
  3869 ;;		wreg, status,2, status,0, cstack
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3875 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3876 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3877 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3878 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;Total ram usage:        7 bytes
  3880 ;; Hardware stack levels used: 1
  3881 ;; Hardware stack levels required when called: 7
  3882 ;; This function calls:
  3883 ;;		_I2C_2_Master_Read
  3884 ;;		_I2C_2_Master_RepStart
  3885 ;;		_I2C_2_Master_Start
  3886 ;;		_I2C_2_Master_Stop
  3887 ;;		_I2C_2_Master_Write
  3888 ;; This function is called by:
  3889 ;;		_get_color_code
  3890 ;;		_calibrate_black
  3891 ;;		_calibrate_white
  3892 ;; This function uses a non-reentrant model
  3893 ;;
  3894                           
  3895                           	psect	text18
  3896   001DCA                     __ptext18:
  3897                           	callstack 0
  3898   001DCA                     _color_read_Blue:
  3899                           	callstack 22
  3900   001DCA                     
  3901                           ;color.c: 109:  unsigned int tmp;;color.c: 110:  I2C_2_Master_Start();
  3902   001DCA  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3903                           
  3904                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x00);
  3905   001DCE  0E52               	movlw	82
  3906   001DD0  ECB0  F010         	call	_I2C_2_Master_Write
  3907                           
  3908                           ;color.c: 112:  I2C_2_Master_Write(0xA0 | 0x1A);
  3909   001DD4  0EBA               	movlw	186
  3910   001DD6  ECB0  F010         	call	_I2C_2_Master_Write
  3911                           
  3912                           ;color.c: 113:  I2C_2_Master_RepStart();
  3913   001DDA  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3914                           
  3915                           ;color.c: 114:  I2C_2_Master_Write(0x52 | 0x01);
  3916   001DDE  0E53               	movlw	83
  3917   001DE0  ECB0  F010         	call	_I2C_2_Master_Write
  3918                           
  3919                           ;color.c: 115:  tmp=I2C_2_Master_Read(1);
  3920   001DE4  0E01               	movlw	1
  3921   001DE6  ECE6  F00F         	call	_I2C_2_Master_Read
  3922   001DEA  6E17               	movwf	??_color_read_Blue^0,c
  3923   001DEC  5017               	movf	??_color_read_Blue^0,w,c
  3924   001DEE  6E1A               	movwf	color_read_Blue@tmp^0,c
  3925   001DF0  6A1B               	clrf	(color_read_Blue@tmp+1)^0,c
  3926                           
  3927                           ;color.c: 116:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3928   001DF2  0E00               	movlw	0
  3929   001DF4  ECE6  F00F         	call	_I2C_2_Master_Read
  3930   001DF8  6E17               	movwf	??_color_read_Blue^0,c
  3931   001DFA  5017               	movf	??_color_read_Blue^0,w,c
  3932   001DFC  6E19               	movwf	(??_color_read_Blue+2)^0,c
  3933   001DFE  6A18               	clrf	(??_color_read_Blue+1)^0,c
  3934   001E00  501A               	movf	color_read_Blue@tmp^0,w,c
  3935   001E02  1018               	iorwf	(??_color_read_Blue+1)^0,w,c
  3936   001E04  6E1A               	movwf	color_read_Blue@tmp^0,c
  3937   001E06  501B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3938   001E08  1019               	iorwf	(??_color_read_Blue+2)^0,w,c
  3939   001E0A  6E1B               	movwf	(color_read_Blue@tmp+1)^0,c
  3940                           
  3941                           ;color.c: 117:  I2C_2_Master_Stop();
  3942   001E0C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3943   001E10                     
  3944                           ;color.c: 118:  return tmp;
  3945   001E10  C01A  F015         	movff	color_read_Blue@tmp,?_color_read_Blue
  3946   001E14  C01B  F016         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3947   001E18  0012               	return		;funcret
  3948   001E1A                     __end_of_color_read_Blue:
  3949                           	callstack 0
  3950                           
  3951 ;; *************** function _I2C_2_Master_Write *****************
  3952 ;; Defined at:
  3953 ;;		line 45 in file "i2c.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  data_byte       1    wreg     unsigned char 
  3956 ;; Auto vars:     Size  Location     Type
  3957 ;;  data_byte       1   17[COMRAM] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, cstack
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3970 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;Total ram usage:        1 bytes
  3972 ;; Hardware stack levels used: 1
  3973 ;; Hardware stack levels required when called: 6
  3974 ;; This function calls:
  3975 ;;		_I2C_2_Master_Idle
  3976 ;; This function is called by:
  3977 ;;		_color_writetoaddr
  3978 ;;		_color_read_Red
  3979 ;;		_color_read_Blue
  3980 ;;		_color_read_Green
  3981 ;;		_color_read_Clear
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           	psect	text19
  3986   002160                     __ptext19:
  3987                           	callstack 0
  3988   002160                     _I2C_2_Master_Write:
  3989                           	callstack 22
  3990                           
  3991                           ;incstack = 0
  3992                           ;I2C_2_Master_Write@data_byte stored from wreg
  3993   002160  6E12               	movwf	I2C_2_Master_Write@data_byte^0,c
  3994   002162                     
  3995                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3996   002162  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  3997   002166                     
  3998                           ;i2c.c: 48:   SSP2BUF = data_byte;
  3999   002166  C012  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4000   00216A  0012               	return		;funcret
  4001   00216C                     __end_of_I2C_2_Master_Write:
  4002                           	callstack 0
  4003                           
  4004 ;; *************** function _I2C_2_Master_Stop *****************
  4005 ;; Defined at:
  4006 ;;		line 39 in file "i2c.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used: 1
  4026 ;; Hardware stack levels required when called: 6
  4027 ;; This function calls:
  4028 ;;		_I2C_2_Master_Idle
  4029 ;; This function is called by:
  4030 ;;		_color_writetoaddr
  4031 ;;		_color_read_Red
  4032 ;;		_color_read_Blue
  4033 ;;		_color_read_Green
  4034 ;;		_color_read_Clear
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text20
  4039   00218E                     __ptext20:
  4040                           	callstack 0
  4041   00218E                     _I2C_2_Master_Stop:
  4042                           	callstack 22
  4043   00218E                     
  4044                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4045   00218E  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4046   002192                     
  4047                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4048   002192  010E               	movlb	14	; () banked
  4049   002194  85DA               	bsf	218,2,b	;volatile
  4050   002196                     
  4051                           ; BSR set to: 14
  4052   002196  0012               	return		;funcret
  4053   002198                     __end_of_I2C_2_Master_Stop:
  4054                           	callstack 0
  4055                           
  4056 ;; *************** function _I2C_2_Master_Start *****************
  4057 ;; Defined at:
  4058 ;;		line 27 in file "i2c.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;		None
  4063 ;; Return value:  Size  Location     Type
  4064 ;;                  1    wreg      void 
  4065 ;; Registers used:
  4066 ;;		wreg, status,2, status,0, cstack
  4067 ;; Tracked objects:
  4068 ;;		On entry : 0/0
  4069 ;;		On exit  : 0/0
  4070 ;;		Unchanged: 0/0
  4071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;Total ram usage:        0 bytes
  4077 ;; Hardware stack levels used: 1
  4078 ;; Hardware stack levels required when called: 6
  4079 ;; This function calls:
  4080 ;;		_I2C_2_Master_Idle
  4081 ;; This function is called by:
  4082 ;;		_color_writetoaddr
  4083 ;;		_color_read_Red
  4084 ;;		_color_read_Blue
  4085 ;;		_color_read_Green
  4086 ;;		_color_read_Clear
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text21
  4091   002198                     __ptext21:
  4092                           	callstack 0
  4093   002198                     _I2C_2_Master_Start:
  4094                           	callstack 22
  4095   002198                     
  4096                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4097   002198  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4098   00219C                     
  4099                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4100   00219C  010E               	movlb	14	; () banked
  4101   00219E  81DA               	bsf	218,0,b	;volatile
  4102   0021A0                     
  4103                           ; BSR set to: 14
  4104   0021A0  0012               	return		;funcret
  4105   0021A2                     __end_of_I2C_2_Master_Start:
  4106                           	callstack 0
  4107                           
  4108 ;; *************** function _I2C_2_Master_RepStart *****************
  4109 ;; Defined at:
  4110 ;;		line 33 in file "i2c.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;		None
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, status,2, status,0, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;Total ram usage:        0 bytes
  4129 ;; Hardware stack levels used: 1
  4130 ;; Hardware stack levels required when called: 6
  4131 ;; This function calls:
  4132 ;;		_I2C_2_Master_Idle
  4133 ;; This function is called by:
  4134 ;;		_color_read_Red
  4135 ;;		_color_read_Blue
  4136 ;;		_color_read_Green
  4137 ;;		_color_read_Clear
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           	psect	text22
  4142   0021A2                     __ptext22:
  4143                           	callstack 0
  4144   0021A2                     _I2C_2_Master_RepStart:
  4145                           	callstack 22
  4146   0021A2                     
  4147                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4148   0021A2  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4149   0021A6                     
  4150                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4151   0021A6  010E               	movlb	14	; () banked
  4152   0021A8  83DA               	bsf	218,1,b	;volatile
  4153   0021AA                     
  4154                           ; BSR set to: 14
  4155   0021AA  0012               	return		;funcret
  4156   0021AC                     __end_of_I2C_2_Master_RepStart:
  4157                           	callstack 0
  4158                           
  4159 ;; *************** function _I2C_2_Master_Read *****************
  4160 ;; Defined at:
  4161 ;;		line 51 in file "i2c.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  ack             1    wreg     unsigned char 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  ack             1   18[COMRAM] unsigned char 
  4166 ;;  tmp             1   19[COMRAM] unsigned char 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      unsigned char 
  4169 ;; Registers used:
  4170 ;;		wreg, status,2, status,0, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4177 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;Total ram usage:        3 bytes
  4181 ;; Hardware stack levels used: 1
  4182 ;; Hardware stack levels required when called: 6
  4183 ;; This function calls:
  4184 ;;		_I2C_2_Master_Idle
  4185 ;; This function is called by:
  4186 ;;		_color_read_Red
  4187 ;;		_color_read_Blue
  4188 ;;		_color_read_Green
  4189 ;;		_color_read_Clear
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text23
  4194   001FCC                     __ptext23:
  4195                           	callstack 0
  4196   001FCC                     _I2C_2_Master_Read:
  4197                           	callstack 22
  4198                           
  4199                           ; BSR set to: 14
  4200                           ;incstack = 0
  4201                           ;I2C_2_Master_Read@ack stored from wreg
  4202   001FCC  6E13               	movwf	I2C_2_Master_Read@ack^0,c
  4203   001FCE                     
  4204                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4205   001FCE  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4206   001FD2                     
  4207                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4208   001FD2  010E               	movlb	14	; () banked
  4209   001FD4  87DA               	bsf	218,3,b	;volatile
  4210                           
  4211                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4212   001FD6  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4213   001FDA                     
  4214                           ;i2c.c: 57:   tmp = SSP2BUF;
  4215   001FDA  CED5 F014          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4216                           
  4217                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4218   001FDE  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4219   001FE2                     
  4220                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4221   001FE2  5013               	movf	I2C_2_Master_Read@ack^0,w,c
  4222   001FE4  B4D8               	btfsc	status,2,c
  4223   001FE6  EFF7  F00F         	goto	u2791
  4224   001FEA  EFFB  F00F         	goto	u2790
  4225   001FEE                     u2791:
  4226   001FEE  6A12               	clrf	??_I2C_2_Master_Read^0,c
  4227   001FF0  2A12               	incf	??_I2C_2_Master_Read^0,f,c
  4228   001FF2  EFFC  F00F         	goto	u2808
  4229   001FF6                     u2790:
  4230   001FF6  6A12               	clrf	??_I2C_2_Master_Read^0,c
  4231   001FF8                     u2808:
  4232   001FF8  3A12               	swapf	??_I2C_2_Master_Read^0,f,c
  4233   001FFA  4612               	rlncf	??_I2C_2_Master_Read^0,f,c
  4234   001FFC  010E               	movlb	14	; () banked
  4235   001FFE  51DA               	movf	218,w,b	;volatile
  4236   002000  1812               	xorwf	??_I2C_2_Master_Read^0,w,c
  4237   002002  0BDF               	andlw	-33
  4238   002004  1812               	xorwf	??_I2C_2_Master_Read^0,w,c
  4239   002006  6FDA               	movwf	218,b	;volatile
  4240   002008                     
  4241                           ; BSR set to: 14
  4242                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4243   002008  89DA               	bsf	218,4,b	;volatile
  4244   00200A                     
  4245                           ; BSR set to: 14
  4246                           ;i2c.c: 61:   return tmp;
  4247   00200A  5014               	movf	I2C_2_Master_Read@tmp^0,w,c
  4248   00200C                     
  4249                           ; BSR set to: 14
  4250   00200C  0012               	return		;funcret
  4251   00200E                     __end_of_I2C_2_Master_Read:
  4252                           	callstack 0
  4253                           
  4254 ;; *************** function _I2C_2_Master_Idle *****************
  4255 ;; Defined at:
  4256 ;;		line 22 in file "i2c.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, status,2, status,0
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4273 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4274 ;;Total ram usage:        1 bytes
  4275 ;; Hardware stack levels used: 1
  4276 ;; Hardware stack levels required when called: 5
  4277 ;; This function calls:
  4278 ;;		Nothing
  4279 ;; This function is called by:
  4280 ;;		_I2C_2_Master_Start
  4281 ;;		_I2C_2_Master_RepStart
  4282 ;;		_I2C_2_Master_Stop
  4283 ;;		_I2C_2_Master_Write
  4284 ;;		_I2C_2_Master_Read
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text24
  4289   0020AA                     __ptext24:
  4290                           	callstack 0
  4291   0020AA                     _I2C_2_Master_Idle:
  4292                           	callstack 22
  4293   0020AA                     l359:
  4294   0020AA  010E               	movlb	14	; () banked
  4295   0020AC  B5D8               	btfsc	216,2,b	;volatile
  4296   0020AE  EF5B  F010         	goto	u2771
  4297   0020B2  EF5D  F010         	goto	u2770
  4298   0020B6                     u2771:
  4299   0020B6  EF55  F010         	goto	l359
  4300   0020BA                     u2770:
  4301   0020BA                     
  4302                           ; BSR set to: 14
  4303   0020BA  CEDA F011          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4304   0020BE  0E1F               	movlw	31
  4305   0020C0  1611               	andwf	??_I2C_2_Master_Idle^0,f,c
  4306   0020C2  A4D8               	btfss	status,2,c
  4307   0020C4  EF66  F010         	goto	u2781
  4308   0020C8  EF68  F010         	goto	u2780
  4309   0020CC                     u2781:
  4310   0020CC  EF55  F010         	goto	l359
  4311   0020D0                     u2780:
  4312   0020D0                     
  4313                           ; BSR set to: 14
  4314   0020D0  0012               	return		;funcret
  4315   0020D2                     __end_of_I2C_2_Master_Idle:
  4316                           	callstack 0
  4317                           
  4318 ;; *************** function _I2C_2_Master_Init *****************
  4319 ;; Defined at:
  4320 ;;		line 4 in file "i2c.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;		None
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;		None
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      void 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4338 ;;Total ram usage:        0 bytes
  4339 ;; Hardware stack levels used: 1
  4340 ;; Hardware stack levels required when called: 5
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_color_click_init
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           	psect	text25
  4349   002080                     __ptext25:
  4350                           	callstack 0
  4351   002080                     _I2C_2_Master_Init:
  4352                           	callstack 24
  4353   002080                     
  4354                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4355   002080  010E               	movlb	14	; () banked
  4356   002082  51D9               	movf	217,w,b	;volatile
  4357   002084  0BF0               	andlw	-16
  4358   002086  0908               	iorlw	8
  4359   002088  6FD9               	movwf	217,b	;volatile
  4360   00208A                     
  4361                           ; BSR set to: 14
  4362                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4363   00208A  8BD9               	bsf	217,5,b	;volatile
  4364                           
  4365                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4366   00208C  0E9F               	movlw	159
  4367   00208E  6FD6               	movwf	214,b	;volatile
  4368   002090                     
  4369                           ; BSR set to: 14
  4370                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4371   002090  8A84               	bsf	132,5,c	;volatile
  4372   002092                     
  4373                           ; BSR set to: 14
  4374                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4375   002092  8C84               	bsf	132,6,c	;volatile
  4376   002094                     
  4377                           ; BSR set to: 14
  4378                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4379   002094  9BA7               	bcf	167,5,b	;volatile
  4380   002096                     
  4381                           ; BSR set to: 14
  4382                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4383   002096  9DA7               	bcf	167,6,b	;volatile
  4384                           
  4385                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4386   002098  0E1D               	movlw	29
  4387   00209A  6F1D               	movwf	29,b	;volatile
  4388                           
  4389                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4390   00209C  0E1E               	movlw	30
  4391   00209E  6F1C               	movwf	28,b	;volatile
  4392                           
  4393                           ;i2c.c: 18:   RD5PPS=0x1C;
  4394   0020A0  0E1C               	movlw	28
  4395   0020A2  6F6F               	movwf	111,b	;volatile
  4396                           
  4397                           ;i2c.c: 19:   RD6PPS=0x1B;
  4398   0020A4  0E1B               	movlw	27
  4399   0020A6  6F70               	movwf	112,b	;volatile
  4400   0020A8                     
  4401                           ; BSR set to: 14
  4402   0020A8  0012               	return		;funcret
  4403   0020AA                     __end_of_I2C_2_Master_Init:
  4404                           	callstack 0
  4405                           
  4406 ;; *************** function _add_seconds_to_list *****************
  4407 ;; Defined at:
  4408 ;;		line 436 in file "dc_motor.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;		None
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  1    wreg      void 
  4415 ;; Registers used:
  4416 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4417 ;; Tracked objects:
  4418 ;;		On entry : 0/0
  4419 ;;		On exit  : 0/0
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4424 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4425 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4426 ;;Total ram usage:        2 bytes
  4427 ;; Hardware stack levels used: 1
  4428 ;; Hardware stack levels required when called: 5
  4429 ;; This function calls:
  4430 ;;		Nothing
  4431 ;; This function is called by:
  4432 ;;		_main
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           	psect	text26
  4437   001EFC                     __ptext26:
  4438                           	callstack 0
  4439   001EFC                     _add_seconds_to_list:
  4440                           	callstack 25
  4441   001EFC                     
  4442                           ;dc_motor.c: 438:     if (seconds > 22)
  4443   001EFC  BE45               	btfsc	(_seconds+1)^0,7,c
  4444   001EFE  EF8A  F00F         	goto	u3541
  4445   001F02  5045               	movf	(_seconds+1)^0,w,c
  4446   001F04  E109               	bnz	u3540
  4447   001F06  0E17               	movlw	23
  4448   001F08  5C44               	subwf	_seconds^0,w,c
  4449   001F0A  A0D8               	btfss	status,0,c
  4450   001F0C  EF8A  F00F         	goto	u3541
  4451   001F10  EF8C  F00F         	goto	u3540
  4452   001F14                     u3541:
  4453   001F14  EFA1  F00F         	goto	l313
  4454   001F18                     u3540:
  4455   001F18                     
  4456                           ;dc_motor.c: 439:     {;dc_motor.c: 440:         movement_list[index] = seconds - 11;
  4457   001F18  0EF5               	movlw	245
  4458   001F1A  2444               	addwf	_seconds^0,w,c
  4459   001F1C  6E11               	movwf	??_add_seconds_to_list^0,c
  4460   001F1E  0EFF               	movlw	255
  4461   001F20  2045               	addwfc	(_seconds+1)^0,w,c
  4462   001F22  6E12               	movwf	(??_add_seconds_to_list+1)^0,c
  4463   001F24  90D8               	bcf	status,0,c
  4464   001F26  3442               	rlcf	_index^0,w,c
  4465   001F28  6ED9               	movwf	fsr2l,c
  4466   001F2A  3443               	rlcf	(_index+1)^0,w,c
  4467   001F2C  6EDA               	movwf	fsr2h,c
  4468   001F2E  0E00               	movlw	low _movement_list
  4469   001F30  26D9               	addwf	fsr2l,f,c
  4470   001F32  0E02               	movlw	high _movement_list
  4471   001F34  22DA               	addwfc	fsr2h,f,c
  4472   001F36  C011  FFDE         	movff	??_add_seconds_to_list,postinc2
  4473   001F3A  C012  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4474   001F3E                     
  4475                           ;dc_motor.c: 441:         index++;
  4476   001F3E  4A42               	infsnz	_index^0,f,c
  4477   001F40  2A43               	incf	(_index+1)^0,f,c
  4478   001F42                     l313:
  4479   001F42  0012               	return		;funcret
  4480   001F44                     __end_of_add_seconds_to_list:
  4481                           	callstack 0
  4482                           
  4483 ;; *************** function _Timer0_init *****************
  4484 ;; Defined at:
  4485 ;;		line 7 in file "timers.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;		None
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;Total ram usage:        0 bytes
  4504 ;; Hardware stack levels used: 1
  4505 ;; Hardware stack levels required when called: 5
  4506 ;; This function calls:
  4507 ;;		Nothing
  4508 ;; This function is called by:
  4509 ;;		_main
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text27
  4514   002140                     __ptext27:
  4515                           	callstack 0
  4516   002140                     _Timer0_init:
  4517                           	callstack 25
  4518   002140                     
  4519                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4520   002140  50D6               	movf	214,w,c	;volatile
  4521   002142  0B1F               	andlw	-225
  4522   002144  0940               	iorlw	64
  4523   002146  6ED6               	movwf	214,c	;volatile
  4524   002148                     
  4525                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4526   002148  88D6               	bsf	214,4,c	;volatile
  4527                           
  4528                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4529   00214A  50D6               	movf	214,w,c	;volatile
  4530   00214C  0BF0               	andlw	-16
  4531   00214E  0908               	iorlw	8
  4532   002150  6ED6               	movwf	214,c	;volatile
  4533                           
  4534                           ;timers.c: 13:     TMR0H=0b11111101;
  4535   002152  0EFD               	movlw	253
  4536   002154  6ED4               	movwf	212,c	;volatile
  4537                           
  4538                           ;timers.c: 14:     TMR0L=0b10010000;
  4539   002156  0E90               	movlw	144
  4540   002158  6ED3               	movwf	211,c	;volatile
  4541   00215A                     
  4542                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4543   00215A  88D5               	bsf	213,4,c	;volatile
  4544   00215C                     
  4545                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4546   00215C  8ED5               	bsf	213,7,c	;volatile
  4547   00215E  0012               	return		;funcret
  4548   002160                     __end_of_Timer0_init:
  4549                           	callstack 0
  4550                           
  4551 ;; *************** function _RobotMovement *****************
  4552 ;; Defined at:
  4553 ;;		line 303 in file "dc_motor.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  color           2   45[COMRAM] unsigned int 
  4556 ;;  motorL          2   47[COMRAM] PTR struct DC_motor
  4557 ;;		 -> main@motorL(9), 
  4558 ;;  motorR          2   49[COMRAM] PTR struct DC_motor
  4559 ;;		 -> main@motorR(9), 
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;  i               2   55[COMRAM] int 
  4562 ;;  i               2   53[COMRAM] int 
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4572 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4573 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4574 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4575 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;Total ram usage:       12 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 8
  4579 ;; This function calls:
  4580 ;;		_TimedfullSpeedAhead
  4581 ;;		_moveBack
  4582 ;;		_stop
  4583 ;;		_turnLeft
  4584 ;;		_turnLeftLong
  4585 ;;		_turnRight
  4586 ;;		_turnRightLong
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text28
  4593   0000A2                     __ptext28:
  4594                           	callstack 0
  4595   0000A2                     _RobotMovement:
  4596                           	callstack 22
  4597   0000A2                     
  4598                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 305:     moveBack(motorL, motorR, 11);
  4599   0000A2  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4600   0000A6  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4601   0000AA  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4602   0000AE  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4603   0000B2  0E00               	movlw	0
  4604   0000B4  6E29               	movwf	(moveBack@time+1)^0,c
  4605   0000B6  0E0B               	movlw	11
  4606   0000B8  6E28               	movwf	moveBack@time^0,c
  4607   0000BA  ECFE  F00C         	call	_moveBack	;wreg free
  4608                           
  4609                           ;dc_motor.c: 306:     stop(motorL,motorR);
  4610   0000BE  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4611   0000C2  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4612   0000C6  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4613   0000CA  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4614   0000CE  EC35  F00F         	call	_stop	;wreg free
  4615   0000D2                     
  4616                           ;dc_motor.c: 309:     if(color == 0){
  4617   0000D2  502E               	movf	RobotMovement@color^0,w,c
  4618   0000D4  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4619   0000D6  A4D8               	btfss	status,2,c
  4620   0000D8  EF70  F000         	goto	u3371
  4621   0000DC  EF72  F000         	goto	u3370
  4622   0000E0                     u3371:
  4623   0000E0  EF8B  F000         	goto	l4124
  4624   0000E4                     u3370:
  4625   0000E4                     
  4626                           ;dc_motor.c: 310:         turnRight(motorL, motorR);
  4627   0000E4  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4628   0000E8  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4629   0000EC  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4630   0000F0  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4631   0000F4  ECB5  F008         	call	_turnRight	;wreg free
  4632   0000F8                     
  4633                           ;dc_motor.c: 311:         movement_list[index] = -1;
  4634   0000F8  90D8               	bcf	status,0,c
  4635   0000FA  3442               	rlcf	_index^0,w,c
  4636   0000FC  6ED9               	movwf	fsr2l,c
  4637   0000FE  3443               	rlcf	(_index+1)^0,w,c
  4638   000100  6EDA               	movwf	fsr2h,c
  4639   000102  0E00               	movlw	low _movement_list
  4640   000104  26D9               	addwf	fsr2l,f,c
  4641   000106  0E02               	movlw	high _movement_list
  4642   000108  22DA               	addwfc	fsr2h,f,c
  4643   00010A  0EFF               	movlw	255
  4644   00010C  6EDE               	movwf	postinc2,c
  4645   00010E  0EFF               	movlw	255
  4646   000110  6EDD               	movwf	postdec2,c
  4647   000112                     
  4648                           ;dc_motor.c: 312:         index++;
  4649   000112  4A42               	infsnz	_index^0,f,c
  4650   000114  2A43               	incf	(_index+1)^0,f,c
  4651   000116                     l4124:
  4652                           
  4653                           ;dc_motor.c: 315:     if(color == 1){
  4654   000116  042E               	decf	RobotMovement@color^0,w,c
  4655   000118  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4656   00011A  A4D8               	btfss	status,2,c
  4657   00011C  EF92  F000         	goto	u3381
  4658   000120  EF94  F000         	goto	u3380
  4659   000124                     u3381:
  4660   000124  EFAD  F000         	goto	l4132
  4661   000128                     u3380:
  4662   000128                     
  4663                           ;dc_motor.c: 316:         turnLeft(motorL, motorR);
  4664   000128  C030  F024         	movff	RobotMovement@motorL,turnLeft@mL
  4665   00012C  C031  F025         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4666   000130  C032  F026         	movff	RobotMovement@motorR,turnLeft@mR
  4667   000134  C033  F027         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4668   000138  EC08  F008         	call	_turnLeft	;wreg free
  4669   00013C                     
  4670                           ;dc_motor.c: 317:         movement_list[index] = -2;
  4671   00013C  90D8               	bcf	status,0,c
  4672   00013E  3442               	rlcf	_index^0,w,c
  4673   000140  6ED9               	movwf	fsr2l,c
  4674   000142  3443               	rlcf	(_index+1)^0,w,c
  4675   000144  6EDA               	movwf	fsr2h,c
  4676   000146  0E00               	movlw	low _movement_list
  4677   000148  26D9               	addwf	fsr2l,f,c
  4678   00014A  0E02               	movlw	high _movement_list
  4679   00014C  22DA               	addwfc	fsr2h,f,c
  4680   00014E  0EFE               	movlw	254
  4681   000150  6EDE               	movwf	postinc2,c
  4682   000152  0EFF               	movlw	255
  4683   000154  6EDD               	movwf	postdec2,c
  4684   000156                     
  4685                           ;dc_motor.c: 318:         index++;
  4686   000156  4A42               	infsnz	_index^0,f,c
  4687   000158  2A43               	incf	(_index+1)^0,f,c
  4688   00015A                     l4132:
  4689                           
  4690                           ;dc_motor.c: 321:     if(color == 2){
  4691   00015A  0E02               	movlw	2
  4692   00015C  182E               	xorwf	RobotMovement@color^0,w,c
  4693   00015E  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4694   000160  A4D8               	btfss	status,2,c
  4695   000162  EFB5  F000         	goto	u3391
  4696   000166  EFB7  F000         	goto	u3390
  4697   00016A                     u3391:
  4698   00016A  EFE4  F000         	goto	l4150
  4699   00016E                     u3390:
  4700   00016E                     
  4701                           ;dc_motor.c: 322:         int i;;dc_motor.c: 323:         for (i=0;i<2;i++){
  4702   00016E  0E00               	movlw	0
  4703   000170  6E37               	movwf	(RobotMovement@i+1)^0,c
  4704   000172  0E00               	movlw	0
  4705   000174  6E36               	movwf	RobotMovement@i^0,c
  4706   000176                     l4140:
  4707                           
  4708                           ;dc_motor.c: 324:             turnRight(motorL, motorR);
  4709   000176  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4710   00017A  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4711   00017E  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4712   000182  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4713   000186  ECB5  F008         	call	_turnRight	;wreg free
  4714   00018A                     
  4715                           ;dc_motor.c: 325:             movement_list[index] = -1;
  4716   00018A  90D8               	bcf	status,0,c
  4717   00018C  3442               	rlcf	_index^0,w,c
  4718   00018E  6ED9               	movwf	fsr2l,c
  4719   000190  3443               	rlcf	(_index+1)^0,w,c
  4720   000192  6EDA               	movwf	fsr2h,c
  4721   000194  0E00               	movlw	low _movement_list
  4722   000196  26D9               	addwf	fsr2l,f,c
  4723   000198  0E02               	movlw	high _movement_list
  4724   00019A  22DA               	addwfc	fsr2h,f,c
  4725   00019C  0EFF               	movlw	255
  4726   00019E  6EDE               	movwf	postinc2,c
  4727   0001A0  0EFF               	movlw	255
  4728   0001A2  6EDD               	movwf	postdec2,c
  4729   0001A4                     
  4730                           ;dc_motor.c: 326:             index++;
  4731   0001A4  4A42               	infsnz	_index^0,f,c
  4732   0001A6  2A43               	incf	(_index+1)^0,f,c
  4733   0001A8                     
  4734                           ;dc_motor.c: 327:         }
  4735   0001A8  4A36               	infsnz	RobotMovement@i^0,f,c
  4736   0001AA  2A37               	incf	(RobotMovement@i+1)^0,f,c
  4737   0001AC  BE37               	btfsc	(RobotMovement@i+1)^0,7,c
  4738   0001AE  EFE2  F000         	goto	u3401
  4739   0001B2  5037               	movf	(RobotMovement@i+1)^0,w,c
  4740   0001B4  E109               	bnz	u3400
  4741   0001B6  0E02               	movlw	2
  4742   0001B8  5C36               	subwf	RobotMovement@i^0,w,c
  4743   0001BA  A0D8               	btfss	status,0,c
  4744   0001BC  EFE2  F000         	goto	u3401
  4745   0001C0  EFE4  F000         	goto	u3400
  4746   0001C4                     u3401:
  4747   0001C4  EFBB  F000         	goto	l4140
  4748   0001C8                     u3400:
  4749   0001C8                     l4150:
  4750                           
  4751                           ;dc_motor.c: 330:     if(color == 3){
  4752   0001C8  0E03               	movlw	3
  4753   0001CA  182E               	xorwf	RobotMovement@color^0,w,c
  4754   0001CC  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4755   0001CE  A4D8               	btfss	status,2,c
  4756   0001D0  EFEC  F000         	goto	u3411
  4757   0001D4  EFEE  F000         	goto	u3410
  4758   0001D8                     u3411:
  4759   0001D8  EFA6  F001         	goto	l4170
  4760   0001DC                     u3410:
  4761   0001DC                     
  4762                           ;dc_motor.c: 332:         moveBack(motorL, motorR, 33);
  4763   0001DC  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4764   0001E0  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4765   0001E4  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4766   0001E8  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4767   0001EC  0E00               	movlw	0
  4768   0001EE  6E29               	movwf	(moveBack@time+1)^0,c
  4769   0001F0  0E21               	movlw	33
  4770   0001F2  6E28               	movwf	moveBack@time^0,c
  4771   0001F4  ECFE  F00C         	call	_moveBack	;wreg free
  4772                           
  4773                           ;dc_motor.c: 333:         stop(motorL, motorR);
  4774   0001F8  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4775   0001FC  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4776   000200  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4777   000204  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4778   000208  EC35  F00F         	call	_stop	;wreg free
  4779                           
  4780                           ;dc_motor.c: 334:         turnRight(motorL, motorR);
  4781   00020C  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4782   000210  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4783   000214  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4784   000218  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4785   00021C  ECB5  F008         	call	_turnRight	;wreg free
  4786   000220                     
  4787                           ;dc_motor.c: 336:         if (movement_list[index-1] > 11)
  4788   000220  90D8               	bcf	status,0,c
  4789   000222  3442               	rlcf	_index^0,w,c
  4790   000224  6ED9               	movwf	fsr2l,c
  4791   000226  3443               	rlcf	(_index+1)^0,w,c
  4792   000228  6EDA               	movwf	fsr2h,c
  4793   00022A  0EFE               	movlw	low (_movement_list+65534)
  4794   00022C  26D9               	addwf	fsr2l,f,c
  4795   00022E  0E01               	movlw	high (_movement_list+65534)
  4796   000230  22DA               	addwfc	fsr2h,f,c
  4797   000232  0E01               	movlw	1
  4798   000234  BEDB               	btfsc	plusw2,7,c
  4799   000236  EF27  F001         	goto	u3421
  4800   00023A  0E01               	movlw	1
  4801   00023C  50DB               	movf	plusw2,w,c
  4802   00023E  E109               	bnz	u3420
  4803   000240  0E0C               	movlw	12
  4804   000242  5CDE               	subwf	postinc2,w,c
  4805   000244  A0D8               	btfss	status,0,c
  4806   000246  EF27  F001         	goto	u3421
  4807   00024A  EF29  F001         	goto	u3420
  4808   00024E                     u3421:
  4809   00024E  EF47  F001         	goto	l4160
  4810   000252                     u3420:
  4811   000252                     
  4812                           ;dc_motor.c: 337:         {;dc_motor.c: 339:             movement_list[index-1] -= 22;
  4813   000252  90D8               	bcf	status,0,c
  4814   000254  3442               	rlcf	_index^0,w,c
  4815   000256  6ED9               	movwf	fsr2l,c
  4816   000258  3443               	rlcf	(_index+1)^0,w,c
  4817   00025A  6EDA               	movwf	fsr2h,c
  4818   00025C  0EFE               	movlw	low (_movement_list+65534)
  4819   00025E  26D9               	addwf	fsr2l,f,c
  4820   000260  0E01               	movlw	high (_movement_list+65534)
  4821   000262  22DA               	addwfc	fsr2h,f,c
  4822   000264  0EEA               	movlw	234
  4823   000266  26DE               	addwf	postinc2,f,c
  4824   000268  0EFF               	movlw	255
  4825   00026A  22DD               	addwfc	postdec2,f,c
  4826                           
  4827                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4828   00026C  90D8               	bcf	status,0,c
  4829   00026E  3442               	rlcf	_index^0,w,c
  4830   000270  6ED9               	movwf	fsr2l,c
  4831   000272  3443               	rlcf	(_index+1)^0,w,c
  4832   000274  6EDA               	movwf	fsr2h,c
  4833   000276  0E00               	movlw	low _movement_list
  4834   000278  26D9               	addwf	fsr2l,f,c
  4835   00027A  0E02               	movlw	high _movement_list
  4836   00027C  22DA               	addwfc	fsr2h,f,c
  4837   00027E  0EFF               	movlw	255
  4838   000280  6EDE               	movwf	postinc2,c
  4839   000282  0EFF               	movlw	255
  4840   000284  6EDD               	movwf	postdec2,c
  4841   000286                     
  4842                           ;dc_motor.c: 342:             index += 1;
  4843   000286  4A42               	infsnz	_index^0,f,c
  4844   000288  2A43               	incf	(_index+1)^0,f,c
  4845                           
  4846                           ;dc_motor.c: 343:         }else{
  4847   00028A  EFA6  F001         	goto	l4170
  4848   00028E                     l4160:
  4849                           
  4850                           ;dc_motor.c: 345:             if (movement_list[index-1] == -1)
  4851   00028E  90D8               	bcf	status,0,c
  4852   000290  3442               	rlcf	_index^0,w,c
  4853   000292  6ED9               	movwf	fsr2l,c
  4854   000294  3443               	rlcf	(_index+1)^0,w,c
  4855   000296  6EDA               	movwf	fsr2h,c
  4856   000298  0EFE               	movlw	low (_movement_list+65534)
  4857   00029A  26D9               	addwf	fsr2l,f,c
  4858   00029C  0E01               	movlw	high (_movement_list+65534)
  4859   00029E  22DA               	addwfc	fsr2h,f,c
  4860   0002A0  28DE               	incf	postinc2,w,c
  4861   0002A2  E106               	bnz	u3431
  4862   0002A4  28DE               	incf	postinc2,w,c
  4863   0002A6  A4D8               	btfss	status,2,c
  4864   0002A8  EF58  F001         	goto	u3431
  4865   0002AC  EF5A  F001         	goto	u3430
  4866   0002B0                     u3431:
  4867   0002B0  EF67  F001         	goto	l293
  4868   0002B4                     u3430:
  4869   0002B4                     
  4870                           ;dc_motor.c: 346:             {;dc_motor.c: 348:                 movement_list[index-1] 
      +                          = -2;
  4871   0002B4  90D8               	bcf	status,0,c
  4872   0002B6  3442               	rlcf	_index^0,w,c
  4873   0002B8  6ED9               	movwf	fsr2l,c
  4874   0002BA  3443               	rlcf	(_index+1)^0,w,c
  4875   0002BC  6EDA               	movwf	fsr2h,c
  4876   0002BE  0EFE               	movlw	low (_movement_list+65534)
  4877   0002C0  26D9               	addwf	fsr2l,f,c
  4878   0002C2  0E01               	movlw	high (_movement_list+65534)
  4879   0002C4  22DA               	addwfc	fsr2h,f,c
  4880   0002C6  0EFE               	movlw	254
  4881   0002C8  6EDE               	movwf	postinc2,c
  4882   0002CA  0EFF               	movlw	255
  4883   0002CC  6EDD               	movwf	postdec2,c
  4884   0002CE                     l293:
  4885                           
  4886                           ;dc_motor.c: 351:             if (movement_list[index-1] == -2)
  4887   0002CE  90D8               	bcf	status,0,c
  4888   0002D0  3442               	rlcf	_index^0,w,c
  4889   0002D2  6ED9               	movwf	fsr2l,c
  4890   0002D4  3443               	rlcf	(_index+1)^0,w,c
  4891   0002D6  6EDA               	movwf	fsr2h,c
  4892   0002D8  0EFE               	movlw	low (_movement_list+65534)
  4893   0002DA  26D9               	addwf	fsr2l,f,c
  4894   0002DC  0E01               	movlw	high (_movement_list+65534)
  4895   0002DE  22DA               	addwfc	fsr2h,f,c
  4896   0002E0  0EFE               	movlw	254
  4897   0002E2  18DE               	xorwf	postinc2,w,c
  4898   0002E4  E106               	bnz	u3441
  4899   0002E6  28DE               	incf	postinc2,w,c
  4900   0002E8  A4D8               	btfss	status,2,c
  4901   0002EA  EF79  F001         	goto	u3441
  4902   0002EE  EF7B  F001         	goto	u3440
  4903   0002F2                     u3441:
  4904   0002F2  EF88  F001         	goto	l294
  4905   0002F6                     u3440:
  4906   0002F6                     
  4907                           ;dc_motor.c: 352:             {;dc_motor.c: 354:                 movement_list[index-1] 
      +                          = -1;
  4908   0002F6  90D8               	bcf	status,0,c
  4909   0002F8  3442               	rlcf	_index^0,w,c
  4910   0002FA  6ED9               	movwf	fsr2l,c
  4911   0002FC  3443               	rlcf	(_index+1)^0,w,c
  4912   0002FE  6EDA               	movwf	fsr2h,c
  4913   000300  0EFE               	movlw	low (_movement_list+65534)
  4914   000302  26D9               	addwf	fsr2l,f,c
  4915   000304  0E01               	movlw	high (_movement_list+65534)
  4916   000306  22DA               	addwfc	fsr2h,f,c
  4917   000308  0EFF               	movlw	255
  4918   00030A  6EDE               	movwf	postinc2,c
  4919   00030C  0EFF               	movlw	255
  4920   00030E  6EDD               	movwf	postdec2,c
  4921   000310                     l294:
  4922                           
  4923                           ;dc_motor.c: 357:         movement_list[index] = 22;
  4924   000310  90D8               	bcf	status,0,c
  4925   000312  3442               	rlcf	_index^0,w,c
  4926   000314  6ED9               	movwf	fsr2l,c
  4927   000316  3443               	rlcf	(_index+1)^0,w,c
  4928   000318  6EDA               	movwf	fsr2h,c
  4929   00031A  0E00               	movlw	low _movement_list
  4930   00031C  26D9               	addwf	fsr2l,f,c
  4931   00031E  0E02               	movlw	high _movement_list
  4932   000320  22DA               	addwfc	fsr2h,f,c
  4933   000322  0E16               	movlw	22
  4934   000324  6EDE               	movwf	postinc2,c
  4935   000326  0E00               	movlw	0
  4936   000328  6EDD               	movwf	postdec2,c
  4937   00032A                     
  4938                           ;dc_motor.c: 358:         index += 1;
  4939   00032A  4A42               	infsnz	_index^0,f,c
  4940   00032C  2A43               	incf	(_index+1)^0,f,c
  4941   00032E                     
  4942                           ;dc_motor.c: 360:         movement_list[index] = -2;
  4943   00032E  90D8               	bcf	status,0,c
  4944   000330  3442               	rlcf	_index^0,w,c
  4945   000332  6ED9               	movwf	fsr2l,c
  4946   000334  3443               	rlcf	(_index+1)^0,w,c
  4947   000336  6EDA               	movwf	fsr2h,c
  4948   000338  0E00               	movlw	low _movement_list
  4949   00033A  26D9               	addwf	fsr2l,f,c
  4950   00033C  0E02               	movlw	high _movement_list
  4951   00033E  22DA               	addwfc	fsr2h,f,c
  4952   000340  0EFE               	movlw	254
  4953   000342  6EDE               	movwf	postinc2,c
  4954   000344  0EFF               	movlw	255
  4955   000346  6EDD               	movwf	postdec2,c
  4956                           
  4957                           ;dc_motor.c: 361:         index += 1;
  4958   000348  4A42               	infsnz	_index^0,f,c
  4959   00034A  2A43               	incf	(_index+1)^0,f,c
  4960   00034C                     l4170:
  4961                           
  4962                           ;dc_motor.c: 366:     if(color == 4){
  4963   00034C  0E04               	movlw	4
  4964   00034E  182E               	xorwf	RobotMovement@color^0,w,c
  4965   000350  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4966   000352  A4D8               	btfss	status,2,c
  4967   000354  EFAE  F001         	goto	u3451
  4968   000358  EFB0  F001         	goto	u3450
  4969   00035C                     u3451:
  4970   00035C  EF68  F002         	goto	l4190
  4971   000360                     u3450:
  4972   000360                     
  4973                           ;dc_motor.c: 368:         moveBack(motorL, motorR, 33);
  4974   000360  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4975   000364  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4976   000368  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4977   00036C  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4978   000370  0E00               	movlw	0
  4979   000372  6E29               	movwf	(moveBack@time+1)^0,c
  4980   000374  0E21               	movlw	33
  4981   000376  6E28               	movwf	moveBack@time^0,c
  4982   000378  ECFE  F00C         	call	_moveBack	;wreg free
  4983                           
  4984                           ;dc_motor.c: 369:         stop(motorL, motorR);
  4985   00037C  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4986   000380  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4987   000384  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4988   000388  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4989   00038C  EC35  F00F         	call	_stop	;wreg free
  4990                           
  4991                           ;dc_motor.c: 370:         turnLeft(motorL, motorR);
  4992   000390  C030  F024         	movff	RobotMovement@motorL,turnLeft@mL
  4993   000394  C031  F025         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4994   000398  C032  F026         	movff	RobotMovement@motorR,turnLeft@mR
  4995   00039C  C033  F027         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4996   0003A0  EC08  F008         	call	_turnLeft	;wreg free
  4997   0003A4                     
  4998                           ;dc_motor.c: 372:         if (movement_list[index-1] > 11)
  4999   0003A4  90D8               	bcf	status,0,c
  5000   0003A6  3442               	rlcf	_index^0,w,c
  5001   0003A8  6ED9               	movwf	fsr2l,c
  5002   0003AA  3443               	rlcf	(_index+1)^0,w,c
  5003   0003AC  6EDA               	movwf	fsr2h,c
  5004   0003AE  0EFE               	movlw	low (_movement_list+65534)
  5005   0003B0  26D9               	addwf	fsr2l,f,c
  5006   0003B2  0E01               	movlw	high (_movement_list+65534)
  5007   0003B4  22DA               	addwfc	fsr2h,f,c
  5008   0003B6  0E01               	movlw	1
  5009   0003B8  BEDB               	btfsc	plusw2,7,c
  5010   0003BA  EFE9  F001         	goto	u3461
  5011   0003BE  0E01               	movlw	1
  5012   0003C0  50DB               	movf	plusw2,w,c
  5013   0003C2  E109               	bnz	u3460
  5014   0003C4  0E0C               	movlw	12
  5015   0003C6  5CDE               	subwf	postinc2,w,c
  5016   0003C8  A0D8               	btfss	status,0,c
  5017   0003CA  EFE9  F001         	goto	u3461
  5018   0003CE  EFEB  F001         	goto	u3460
  5019   0003D2                     u3461:
  5020   0003D2  EF09  F002         	goto	l4180
  5021   0003D6                     u3460:
  5022   0003D6                     
  5023                           ;dc_motor.c: 373:         {;dc_motor.c: 375:             movement_list[index-1] -= 22;
  5024   0003D6  90D8               	bcf	status,0,c
  5025   0003D8  3442               	rlcf	_index^0,w,c
  5026   0003DA  6ED9               	movwf	fsr2l,c
  5027   0003DC  3443               	rlcf	(_index+1)^0,w,c
  5028   0003DE  6EDA               	movwf	fsr2h,c
  5029   0003E0  0EFE               	movlw	low (_movement_list+65534)
  5030   0003E2  26D9               	addwf	fsr2l,f,c
  5031   0003E4  0E01               	movlw	high (_movement_list+65534)
  5032   0003E6  22DA               	addwfc	fsr2h,f,c
  5033   0003E8  0EEA               	movlw	234
  5034   0003EA  26DE               	addwf	postinc2,f,c
  5035   0003EC  0EFF               	movlw	255
  5036   0003EE  22DD               	addwfc	postdec2,f,c
  5037                           
  5038                           ;dc_motor.c: 377:             movement_list[index] = -2;
  5039   0003F0  90D8               	bcf	status,0,c
  5040   0003F2  3442               	rlcf	_index^0,w,c
  5041   0003F4  6ED9               	movwf	fsr2l,c
  5042   0003F6  3443               	rlcf	(_index+1)^0,w,c
  5043   0003F8  6EDA               	movwf	fsr2h,c
  5044   0003FA  0E00               	movlw	low _movement_list
  5045   0003FC  26D9               	addwf	fsr2l,f,c
  5046   0003FE  0E02               	movlw	high _movement_list
  5047   000400  22DA               	addwfc	fsr2h,f,c
  5048   000402  0EFE               	movlw	254
  5049   000404  6EDE               	movwf	postinc2,c
  5050   000406  0EFF               	movlw	255
  5051   000408  6EDD               	movwf	postdec2,c
  5052   00040A                     
  5053                           ;dc_motor.c: 378:             index += 1;
  5054   00040A  4A42               	infsnz	_index^0,f,c
  5055   00040C  2A43               	incf	(_index+1)^0,f,c
  5056                           
  5057                           ;dc_motor.c: 379:         }else{
  5058   00040E  EF68  F002         	goto	l4190
  5059   000412                     l4180:
  5060                           
  5061                           ;dc_motor.c: 381:             if (movement_list[index-1] == -1)
  5062   000412  90D8               	bcf	status,0,c
  5063   000414  3442               	rlcf	_index^0,w,c
  5064   000416  6ED9               	movwf	fsr2l,c
  5065   000418  3443               	rlcf	(_index+1)^0,w,c
  5066   00041A  6EDA               	movwf	fsr2h,c
  5067   00041C  0EFE               	movlw	low (_movement_list+65534)
  5068   00041E  26D9               	addwf	fsr2l,f,c
  5069   000420  0E01               	movlw	high (_movement_list+65534)
  5070   000422  22DA               	addwfc	fsr2h,f,c
  5071   000424  28DE               	incf	postinc2,w,c
  5072   000426  E106               	bnz	u3471
  5073   000428  28DE               	incf	postinc2,w,c
  5074   00042A  A4D8               	btfss	status,2,c
  5075   00042C  EF1A  F002         	goto	u3471
  5076   000430  EF1C  F002         	goto	u3470
  5077   000434                     u3471:
  5078   000434  EF29  F002         	goto	l298
  5079   000438                     u3470:
  5080   000438                     
  5081                           ;dc_motor.c: 382:             {;dc_motor.c: 384:                 movement_list[index-1] 
      +                          = -2;
  5082   000438  90D8               	bcf	status,0,c
  5083   00043A  3442               	rlcf	_index^0,w,c
  5084   00043C  6ED9               	movwf	fsr2l,c
  5085   00043E  3443               	rlcf	(_index+1)^0,w,c
  5086   000440  6EDA               	movwf	fsr2h,c
  5087   000442  0EFE               	movlw	low (_movement_list+65534)
  5088   000444  26D9               	addwf	fsr2l,f,c
  5089   000446  0E01               	movlw	high (_movement_list+65534)
  5090   000448  22DA               	addwfc	fsr2h,f,c
  5091   00044A  0EFE               	movlw	254
  5092   00044C  6EDE               	movwf	postinc2,c
  5093   00044E  0EFF               	movlw	255
  5094   000450  6EDD               	movwf	postdec2,c
  5095   000452                     l298:
  5096                           
  5097                           ;dc_motor.c: 387:             if (movement_list[index-1] == -2)
  5098   000452  90D8               	bcf	status,0,c
  5099   000454  3442               	rlcf	_index^0,w,c
  5100   000456  6ED9               	movwf	fsr2l,c
  5101   000458  3443               	rlcf	(_index+1)^0,w,c
  5102   00045A  6EDA               	movwf	fsr2h,c
  5103   00045C  0EFE               	movlw	low (_movement_list+65534)
  5104   00045E  26D9               	addwf	fsr2l,f,c
  5105   000460  0E01               	movlw	high (_movement_list+65534)
  5106   000462  22DA               	addwfc	fsr2h,f,c
  5107   000464  0EFE               	movlw	254
  5108   000466  18DE               	xorwf	postinc2,w,c
  5109   000468  E106               	bnz	u3481
  5110   00046A  28DE               	incf	postinc2,w,c
  5111   00046C  A4D8               	btfss	status,2,c
  5112   00046E  EF3B  F002         	goto	u3481
  5113   000472  EF3D  F002         	goto	u3480
  5114   000476                     u3481:
  5115   000476  EF4A  F002         	goto	l299
  5116   00047A                     u3480:
  5117   00047A                     
  5118                           ;dc_motor.c: 388:             {;dc_motor.c: 390:                 movement_list[index-1] 
      +                          = -1;
  5119   00047A  90D8               	bcf	status,0,c
  5120   00047C  3442               	rlcf	_index^0,w,c
  5121   00047E  6ED9               	movwf	fsr2l,c
  5122   000480  3443               	rlcf	(_index+1)^0,w,c
  5123   000482  6EDA               	movwf	fsr2h,c
  5124   000484  0EFE               	movlw	low (_movement_list+65534)
  5125   000486  26D9               	addwf	fsr2l,f,c
  5126   000488  0E01               	movlw	high (_movement_list+65534)
  5127   00048A  22DA               	addwfc	fsr2h,f,c
  5128   00048C  0EFF               	movlw	255
  5129   00048E  6EDE               	movwf	postinc2,c
  5130   000490  0EFF               	movlw	255
  5131   000492  6EDD               	movwf	postdec2,c
  5132   000494                     l299:
  5133                           
  5134                           ;dc_motor.c: 393:         movement_list[index] = 22;
  5135   000494  90D8               	bcf	status,0,c
  5136   000496  3442               	rlcf	_index^0,w,c
  5137   000498  6ED9               	movwf	fsr2l,c
  5138   00049A  3443               	rlcf	(_index+1)^0,w,c
  5139   00049C  6EDA               	movwf	fsr2h,c
  5140   00049E  0E00               	movlw	low _movement_list
  5141   0004A0  26D9               	addwf	fsr2l,f,c
  5142   0004A2  0E02               	movlw	high _movement_list
  5143   0004A4  22DA               	addwfc	fsr2h,f,c
  5144   0004A6  0E16               	movlw	22
  5145   0004A8  6EDE               	movwf	postinc2,c
  5146   0004AA  0E00               	movlw	0
  5147   0004AC  6EDD               	movwf	postdec2,c
  5148   0004AE                     
  5149                           ;dc_motor.c: 394:         index += 1;
  5150   0004AE  4A42               	infsnz	_index^0,f,c
  5151   0004B0  2A43               	incf	(_index+1)^0,f,c
  5152   0004B2                     
  5153                           ;dc_motor.c: 396:         movement_list[index] = -1;
  5154   0004B2  90D8               	bcf	status,0,c
  5155   0004B4  3442               	rlcf	_index^0,w,c
  5156   0004B6  6ED9               	movwf	fsr2l,c
  5157   0004B8  3443               	rlcf	(_index+1)^0,w,c
  5158   0004BA  6EDA               	movwf	fsr2h,c
  5159   0004BC  0E00               	movlw	low _movement_list
  5160   0004BE  26D9               	addwf	fsr2l,f,c
  5161   0004C0  0E02               	movlw	high _movement_list
  5162   0004C2  22DA               	addwfc	fsr2h,f,c
  5163   0004C4  0EFF               	movlw	255
  5164   0004C6  6EDE               	movwf	postinc2,c
  5165   0004C8  0EFF               	movlw	255
  5166   0004CA  6EDD               	movwf	postdec2,c
  5167                           
  5168                           ;dc_motor.c: 397:         index += 1;
  5169   0004CC  4A42               	infsnz	_index^0,f,c
  5170   0004CE  2A43               	incf	(_index+1)^0,f,c
  5171   0004D0                     l4190:
  5172                           
  5173                           ;dc_motor.c: 401:     if(color == 5){
  5174   0004D0  0E05               	movlw	5
  5175   0004D2  182E               	xorwf	RobotMovement@color^0,w,c
  5176   0004D4  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5177   0004D6  A4D8               	btfss	status,2,c
  5178   0004D8  EF70  F002         	goto	u3491
  5179   0004DC  EF72  F002         	goto	u3490
  5180   0004E0                     u3491:
  5181   0004E0  EF8B  F002         	goto	l4198
  5182   0004E4                     u3490:
  5183   0004E4                     
  5184                           ;dc_motor.c: 402:         turnRightLong(motorL, motorR);
  5185   0004E4  C030  F024         	movff	RobotMovement@motorL,turnRightLong@mL
  5186   0004E8  C031  F025         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5187   0004EC  C032  F026         	movff	RobotMovement@motorR,turnRightLong@mR
  5188   0004F0  C033  F027         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5189   0004F4  EC98  F00A         	call	_turnRightLong	;wreg free
  5190   0004F8                     
  5191                           ;dc_motor.c: 403:         movement_list[index] = -3;
  5192   0004F8  90D8               	bcf	status,0,c
  5193   0004FA  3442               	rlcf	_index^0,w,c
  5194   0004FC  6ED9               	movwf	fsr2l,c
  5195   0004FE  3443               	rlcf	(_index+1)^0,w,c
  5196   000500  6EDA               	movwf	fsr2h,c
  5197   000502  0E00               	movlw	low _movement_list
  5198   000504  26D9               	addwf	fsr2l,f,c
  5199   000506  0E02               	movlw	high _movement_list
  5200   000508  22DA               	addwfc	fsr2h,f,c
  5201   00050A  0EFD               	movlw	253
  5202   00050C  6EDE               	movwf	postinc2,c
  5203   00050E  0EFF               	movlw	255
  5204   000510  6EDD               	movwf	postdec2,c
  5205   000512                     
  5206                           ;dc_motor.c: 404:         index += 1;
  5207   000512  4A42               	infsnz	_index^0,f,c
  5208   000514  2A43               	incf	(_index+1)^0,f,c
  5209   000516                     l4198:
  5210                           
  5211                           ;dc_motor.c: 407:     if(color == 6){
  5212   000516  0E06               	movlw	6
  5213   000518  182E               	xorwf	RobotMovement@color^0,w,c
  5214   00051A  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5215   00051C  A4D8               	btfss	status,2,c
  5216   00051E  EF93  F002         	goto	u3501
  5217   000522  EF95  F002         	goto	u3500
  5218   000526                     u3501:
  5219   000526  EFAE  F002         	goto	l4206
  5220   00052A                     u3500:
  5221   00052A                     
  5222                           ;dc_motor.c: 408:         turnLeftLong(motorL, motorR);
  5223   00052A  C030  F024         	movff	RobotMovement@motorL,turnLeftLong@mL
  5224   00052E  C031  F025         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5225   000532  C032  F026         	movff	RobotMovement@motorR,turnLeftLong@mR
  5226   000536  C033  F027         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5227   00053A  EC2C  F00B         	call	_turnLeftLong	;wreg free
  5228   00053E                     
  5229                           ;dc_motor.c: 409:         movement_list[index] = -4;
  5230   00053E  90D8               	bcf	status,0,c
  5231   000540  3442               	rlcf	_index^0,w,c
  5232   000542  6ED9               	movwf	fsr2l,c
  5233   000544  3443               	rlcf	(_index+1)^0,w,c
  5234   000546  6EDA               	movwf	fsr2h,c
  5235   000548  0E00               	movlw	low _movement_list
  5236   00054A  26D9               	addwf	fsr2l,f,c
  5237   00054C  0E02               	movlw	high _movement_list
  5238   00054E  22DA               	addwfc	fsr2h,f,c
  5239   000550  0EFC               	movlw	252
  5240   000552  6EDE               	movwf	postinc2,c
  5241   000554  0EFF               	movlw	255
  5242   000556  6EDD               	movwf	postdec2,c
  5243   000558                     
  5244                           ;dc_motor.c: 410:         index += 1;
  5245   000558  4A42               	infsnz	_index^0,f,c
  5246   00055A  2A43               	incf	(_index+1)^0,f,c
  5247   00055C                     l4206:
  5248                           
  5249                           ;dc_motor.c: 413:     if(color == 7){
  5250   00055C  0E07               	movlw	7
  5251   00055E  182E               	xorwf	RobotMovement@color^0,w,c
  5252   000560  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5253   000562  A4D8               	btfss	status,2,c
  5254   000564  EFB6  F002         	goto	u3511
  5255   000568  EFB8  F002         	goto	u3510
  5256   00056C                     u3511:
  5257   00056C  EFDA  F002         	goto	l4222
  5258   000570                     u3510:
  5259   000570                     
  5260                           ;dc_motor.c: 414:         int i;;dc_motor.c: 415:         for (i=0;i<2;i++)
  5261   000570  0E00               	movlw	0
  5262   000572  6E39               	movwf	(RobotMovement@i_1278+1)^0,c
  5263   000574  0E00               	movlw	0
  5264   000576  6E38               	movwf	RobotMovement@i_1278^0,c
  5265   000578                     l4214:
  5266                           
  5267                           ;dc_motor.c: 416:         {;dc_motor.c: 417:             turnRight(motorL, motorR);
  5268   000578  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  5269   00057C  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5270   000580  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  5271   000584  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5272   000588  ECB5  F008         	call	_turnRight	;wreg free
  5273   00058C                     
  5274                           ;dc_motor.c: 418:         }
  5275   00058C  4A38               	infsnz	RobotMovement@i_1278^0,f,c
  5276   00058E  2A39               	incf	(RobotMovement@i_1278+1)^0,f,c
  5277   000590  BE39               	btfsc	(RobotMovement@i_1278+1)^0,7,c
  5278   000592  EFD4  F002         	goto	u3521
  5279   000596  5039               	movf	(RobotMovement@i_1278+1)^0,w,c
  5280   000598  E109               	bnz	u3520
  5281   00059A  0E02               	movlw	2
  5282   00059C  5C38               	subwf	RobotMovement@i_1278^0,w,c
  5283   00059E  A0D8               	btfss	status,0,c
  5284   0005A0  EFD4  F002         	goto	u3521
  5285   0005A4  EFD6  F002         	goto	u3520
  5286   0005A8                     u3521:
  5287   0005A8  EFBC  F002         	goto	l4214
  5288   0005AC                     u3520:
  5289   0005AC                     
  5290                           ;dc_motor.c: 420:         state = 1;
  5291   0005AC  0E00               	movlw	0
  5292   0005AE  6E41               	movwf	(_state+1)^0,c
  5293   0005B0  0E01               	movlw	1
  5294   0005B2  6E40               	movwf	_state^0,c
  5295   0005B4                     l4222:
  5296                           
  5297                           ;dc_motor.c: 423:     if (color > 7)
  5298   0005B4  502F               	movf	(RobotMovement@color+1)^0,w,c
  5299   0005B6  E109               	bnz	u3530
  5300   0005B8  0E08               	movlw	8
  5301   0005BA  5C2E               	subwf	RobotMovement@color^0,w,c
  5302   0005BC  A0D8               	btfss	status,0,c
  5303   0005BE  EFE3  F002         	goto	u3531
  5304   0005C2  EFE5  F002         	goto	u3530
  5305   0005C6                     u3531:
  5306   0005C6  EFF3  F002         	goto	l306
  5307   0005CA                     u3530:
  5308   0005CA                     
  5309                           ;dc_motor.c: 424:     {;dc_motor.c: 425:         TimedfullSpeedAhead(motorL, motorR, 11)
      +                          ;
  5310   0005CA  C030  F024         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5311   0005CE  C031  F025         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5312   0005D2  C032  F026         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5313   0005D6  C033  F027         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5314   0005DA  0E00               	movlw	0
  5315   0005DC  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5316   0005DE  0E0B               	movlw	11
  5317   0005E0  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  5318   0005E2  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5319   0005E6                     l306:
  5320   0005E6  0012               	return		;funcret
  5321   0005E8                     __end_of_RobotMovement:
  5322                           	callstack 0
  5323                           
  5324 ;; *************** function _turnRightLong *****************
  5325 ;; Defined at:
  5326 ;;		line 231 in file "dc_motor.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5329 ;;		 -> main@motorL(9), 
  5330 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5331 ;;		 -> main@motorR(9), 
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  i               2   41[COMRAM] int 
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5338 ;; Tracked objects:
  5339 ;;		On entry : 0/0
  5340 ;;		On exit  : 0/0
  5341 ;;		Unchanged: 0/0
  5342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5344 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5345 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5346 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;Total ram usage:        8 bytes
  5348 ;; Hardware stack levels used: 1
  5349 ;; Hardware stack levels required when called: 7
  5350 ;; This function calls:
  5351 ;;		_setMotorPWM
  5352 ;; This function is called by:
  5353 ;;		_RobotMovement
  5354 ;;		_return_back
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text29
  5359   001530                     __ptext29:
  5360                           	callstack 0
  5361   001530                     _turnRightLong:
  5362                           	callstack 22
  5363   001530                     
  5364                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5365   001530  0E00               	movlw	0
  5366   001532  6E2B               	movwf	(turnRightLong@i+1)^0,c
  5367   001534  0E19               	movlw	25
  5368   001536  6E2A               	movwf	turnRightLong@i^0,c
  5369   001538                     l3850:
  5370                           
  5371                           ;dc_motor.c: 236:     (*mL).direction=0;
  5372   001538  EE20 F001          	lfsr	2,1
  5373   00153C  5024               	movf	turnRightLong@mL^0,w,c
  5374   00153E  26D9               	addwf	fsr2l,f,c
  5375   001540  5025               	movf	(turnRightLong@mL+1)^0,w,c
  5376   001542  22DA               	addwfc	fsr2h,f,c
  5377   001544  0E00               	movlw	0
  5378   001546  6EDF               	movwf	indf2,c
  5379                           
  5380                           ;dc_motor.c: 237:     (*mR).direction=1;
  5381   001548  EE20 F001          	lfsr	2,1
  5382   00154C  5026               	movf	turnRightLong@mR^0,w,c
  5383   00154E  26D9               	addwf	fsr2l,f,c
  5384   001550  5027               	movf	(turnRightLong@mR+1)^0,w,c
  5385   001552  22DA               	addwfc	fsr2h,f,c
  5386   001554  0E01               	movlw	1
  5387   001556  6EDF               	movwf	indf2,c
  5388   001558                     
  5389                           ;dc_motor.c: 238:     (*mL).power=i;
  5390   001558  C024  FFD9         	movff	turnRightLong@mL,fsr2l
  5391   00155C  C025  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5392   001560  C02A  FFDF         	movff	turnRightLong@i,indf2
  5393   001564                     
  5394                           ;dc_motor.c: 239:     (*mR).power=i;
  5395   001564  C026  FFD9         	movff	turnRightLong@mR,fsr2l
  5396   001568  C027  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5397   00156C  C02A  FFDF         	movff	turnRightLong@i,indf2
  5398   001570                     
  5399                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5400   001570  C024  F01E         	movff	turnRightLong@mL,setMotorPWM@m
  5401   001574  C025  F01F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5402   001578  EC52  F007         	call	_setMotorPWM	;wreg free
  5403   00157C                     
  5404                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5405   00157C  C026  F01E         	movff	turnRightLong@mR,setMotorPWM@m
  5406   001580  C027  F01F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5407   001584  EC52  F007         	call	_setMotorPWM	;wreg free
  5408   001588                     
  5409                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5410   001588  0E0E               	movlw	14
  5411   00158A  6E29               	movwf	(??_turnRightLong+1)^0,c
  5412   00158C  0E12               	movlw	18
  5413   00158E  6E28               	movwf	??_turnRightLong^0,c
  5414   001590  0E69               	movlw	105
  5415   001592                     u4167:
  5416   001592  2EE8               	decfsz	wreg,f,c
  5417   001594  D7FE               	bra	u4167
  5418   001596  2E28               	decfsz	??_turnRightLong^0,f,c
  5419   001598  D7FC               	bra	u4167
  5420   00159A  2E29               	decfsz	(??_turnRightLong+1)^0,f,c
  5421   00159C  D7FA               	bra	u4167
  5422   00159E  F000               	nop	
  5423   0015A0                     
  5424                           ;dc_motor.c: 243:     }
  5425   0015A0  0E05               	movlw	5
  5426   0015A2  262A               	addwf	turnRightLong@i^0,f,c
  5427   0015A4  0E00               	movlw	0
  5428   0015A6  222B               	addwfc	(turnRightLong@i+1)^0,f,c
  5429   0015A8  BE2B               	btfsc	(turnRightLong@i+1)^0,7,c
  5430   0015AA  EFE0  F00A         	goto	u3001
  5431   0015AE  502B               	movf	(turnRightLong@i+1)^0,w,c
  5432   0015B0  E109               	bnz	u3000
  5433   0015B2  0E28               	movlw	40
  5434   0015B4  5C2A               	subwf	turnRightLong@i^0,w,c
  5435   0015B6  A0D8               	btfss	status,0,c
  5436   0015B8  EFE0  F00A         	goto	u3001
  5437   0015BC  EFE2  F00A         	goto	u3000
  5438   0015C0                     u3001:
  5439   0015C0  EF9C  F00A         	goto	l3850
  5440   0015C4                     u3000:
  5441   0015C4                     
  5442                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5443   0015C4  0E00               	movlw	0
  5444   0015C6  6E2B               	movwf	(turnRightLong@i+1)^0,c
  5445   0015C8  0E1E               	movlw	30
  5446   0015CA  6E2A               	movwf	turnRightLong@i^0,c
  5447   0015CC                     l3872:
  5448                           
  5449                           ;dc_motor.c: 245:     (*mL).direction=0;
  5450   0015CC  EE20 F001          	lfsr	2,1
  5451   0015D0  5024               	movf	turnRightLong@mL^0,w,c
  5452   0015D2  26D9               	addwf	fsr2l,f,c
  5453   0015D4  5025               	movf	(turnRightLong@mL+1)^0,w,c
  5454   0015D6  22DA               	addwfc	fsr2h,f,c
  5455   0015D8  0E00               	movlw	0
  5456   0015DA  6EDF               	movwf	indf2,c
  5457                           
  5458                           ;dc_motor.c: 246:     (*mR).direction=1;
  5459   0015DC  EE20 F001          	lfsr	2,1
  5460   0015E0  5026               	movf	turnRightLong@mR^0,w,c
  5461   0015E2  26D9               	addwf	fsr2l,f,c
  5462   0015E4  5027               	movf	(turnRightLong@mR+1)^0,w,c
  5463   0015E6  22DA               	addwfc	fsr2h,f,c
  5464   0015E8  0E01               	movlw	1
  5465   0015EA  6EDF               	movwf	indf2,c
  5466   0015EC                     
  5467                           ;dc_motor.c: 247:     (*mL).power=i;
  5468   0015EC  C024  FFD9         	movff	turnRightLong@mL,fsr2l
  5469   0015F0  C025  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5470   0015F4  C02A  FFDF         	movff	turnRightLong@i,indf2
  5471   0015F8                     
  5472                           ;dc_motor.c: 248:     (*mR).power=i;
  5473   0015F8  C026  FFD9         	movff	turnRightLong@mR,fsr2l
  5474   0015FC  C027  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5475   001600  C02A  FFDF         	movff	turnRightLong@i,indf2
  5476   001604                     
  5477                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5478   001604  C024  F01E         	movff	turnRightLong@mL,setMotorPWM@m
  5479   001608  C025  F01F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5480   00160C  EC52  F007         	call	_setMotorPWM	;wreg free
  5481   001610                     
  5482                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5483   001610  C026  F01E         	movff	turnRightLong@mR,setMotorPWM@m
  5484   001614  C027  F01F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5485   001618  EC52  F007         	call	_setMotorPWM	;wreg free
  5486   00161C                     
  5487                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5488   00161C  0E0D               	movlw	13
  5489   00161E  6E29               	movwf	(??_turnRightLong+1)^0,c
  5490   001620  0EBF               	movlw	191
  5491   001622  6E28               	movwf	??_turnRightLong^0,c
  5492   001624  0E4C               	movlw	76
  5493   001626                     u4177:
  5494   001626  2EE8               	decfsz	wreg,f,c
  5495   001628  D7FE               	bra	u4177
  5496   00162A  2E28               	decfsz	??_turnRightLong^0,f,c
  5497   00162C  D7FC               	bra	u4177
  5498   00162E  2E29               	decfsz	(??_turnRightLong+1)^0,f,c
  5499   001630  D7FA               	bra	u4177
  5500   001632                     
  5501                           ;dc_motor.c: 253:     }
  5502   001632  0EFB               	movlw	251
  5503   001634  262A               	addwf	turnRightLong@i^0,f,c
  5504   001636  0EFF               	movlw	255
  5505   001638  222B               	addwfc	(turnRightLong@i+1)^0,f,c
  5506   00163A  BE2B               	btfsc	(turnRightLong@i+1)^0,7,c
  5507   00163C  EF2B  F00B         	goto	u3010
  5508   001640  502B               	movf	(turnRightLong@i+1)^0,w,c
  5509   001642  E107               	bnz	u3011
  5510   001644  0E10               	movlw	16
  5511   001646  5C2A               	subwf	turnRightLong@i^0,w,c
  5512   001648  B0D8               	btfsc	status,0,c
  5513   00164A  EF29  F00B         	goto	u3011
  5514   00164E  EF2B  F00B         	goto	u3010
  5515   001652                     u3011:
  5516   001652  EFE6  F00A         	goto	l3872
  5517   001656                     u3010:
  5518   001656  0012               	return		;funcret
  5519   001658                     __end_of_turnRightLong:
  5520                           	callstack 0
  5521                           
  5522 ;; *************** function _turnRight *****************
  5523 ;; Defined at:
  5524 ;;		line 154 in file "dc_motor.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5527 ;;		 -> main@motorL(9), 
  5528 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5529 ;;		 -> main@motorR(9), 
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;  i               2   43[COMRAM] int 
  5532 ;;  k               2   41[COMRAM] int 
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  1    wreg      void 
  5535 ;; Registers used:
  5536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 0/0
  5539 ;;		On exit  : 0/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5543 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5545 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;Total ram usage:       10 bytes
  5547 ;; Hardware stack levels used: 1
  5548 ;; Hardware stack levels required when called: 7
  5549 ;; This function calls:
  5550 ;;		_setMotorPWM
  5551 ;; This function is called by:
  5552 ;;		_RobotMovement
  5553 ;;		_return_back
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text30
  5558   00116A                     __ptext30:
  5559                           	callstack 0
  5560   00116A                     _turnRight:
  5561                           	callstack 22
  5562   00116A                     
  5563                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5564   00116A  0E00               	movlw	0
  5565   00116C  6E2B               	movwf	(turnRight@k+1)^0,c
  5566   00116E  0E00               	movlw	0
  5567   001170  6E2A               	movwf	turnRight@k^0,c
  5568   001172                     l3752:
  5569                           
  5570                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5571   001172  0E00               	movlw	0
  5572   001174  6E2D               	movwf	(turnRight@i+1)^0,c
  5573   001176  0E1B               	movlw	27
  5574   001178  6E2C               	movwf	turnRight@i^0,c
  5575   00117A                     l3758:
  5576                           
  5577                           ;dc_motor.c: 185:         (*mL).direction=0;
  5578   00117A  EE20 F001          	lfsr	2,1
  5579   00117E  5024               	movf	turnRight@mL^0,w,c
  5580   001180  26D9               	addwf	fsr2l,f,c
  5581   001182  5025               	movf	(turnRight@mL+1)^0,w,c
  5582   001184  22DA               	addwfc	fsr2h,f,c
  5583   001186  0E00               	movlw	0
  5584   001188  6EDF               	movwf	indf2,c
  5585                           
  5586                           ;dc_motor.c: 186:         (*mR).direction=1;
  5587   00118A  EE20 F001          	lfsr	2,1
  5588   00118E  5026               	movf	turnRight@mR^0,w,c
  5589   001190  26D9               	addwf	fsr2l,f,c
  5590   001192  5027               	movf	(turnRight@mR+1)^0,w,c
  5591   001194  22DA               	addwfc	fsr2h,f,c
  5592   001196  0E01               	movlw	1
  5593   001198  6EDF               	movwf	indf2,c
  5594   00119A                     
  5595                           ;dc_motor.c: 187:         (*mL).power=i;
  5596   00119A  C024  FFD9         	movff	turnRight@mL,fsr2l
  5597   00119E  C025  FFDA         	movff	turnRight@mL+1,fsr2h
  5598   0011A2  C02C  FFDF         	movff	turnRight@i,indf2
  5599   0011A6                     
  5600                           ;dc_motor.c: 188:         (*mR).power=i;
  5601   0011A6  C026  FFD9         	movff	turnRight@mR,fsr2l
  5602   0011AA  C027  FFDA         	movff	turnRight@mR+1,fsr2h
  5603   0011AE  C02C  FFDF         	movff	turnRight@i,indf2
  5604   0011B2                     
  5605                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5606   0011B2  C024  F01E         	movff	turnRight@mL,setMotorPWM@m
  5607   0011B6  C025  F01F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5608   0011BA  EC52  F007         	call	_setMotorPWM	;wreg free
  5609   0011BE                     
  5610                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5611   0011BE  C026  F01E         	movff	turnRight@mR,setMotorPWM@m
  5612   0011C2  C027  F01F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5613   0011C6  EC52  F007         	call	_setMotorPWM	;wreg free
  5614   0011CA                     
  5615                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5616   0011CA  0E09               	movlw	9
  5617   0011CC  6E29               	movwf	(??_turnRight+1)^0,c
  5618   0011CE  0EB0               	movlw	176
  5619   0011D0  6E28               	movwf	??_turnRight^0,c
  5620   0011D2  0E58               	movlw	88
  5621   0011D4                     u4187:
  5622   0011D4  2EE8               	decfsz	wreg,f,c
  5623   0011D6  D7FE               	bra	u4187
  5624   0011D8  2E28               	decfsz	??_turnRight^0,f,c
  5625   0011DA  D7FC               	bra	u4187
  5626   0011DC  2E29               	decfsz	(??_turnRight+1)^0,f,c
  5627   0011DE  D7FA               	bra	u4187
  5628   0011E0  D000               	nop2	
  5629   0011E2                     
  5630                           ;dc_motor.c: 192:         }
  5631   0011E2  0E05               	movlw	5
  5632   0011E4  262C               	addwf	turnRight@i^0,f,c
  5633   0011E6  0E00               	movlw	0
  5634   0011E8  222D               	addwfc	(turnRight@i+1)^0,f,c
  5635   0011EA  BE2D               	btfsc	(turnRight@i+1)^0,7,c
  5636   0011EC  EF01  F009         	goto	u2951
  5637   0011F0  502D               	movf	(turnRight@i+1)^0,w,c
  5638   0011F2  E109               	bnz	u2950
  5639   0011F4  0E2A               	movlw	42
  5640   0011F6  5C2C               	subwf	turnRight@i^0,w,c
  5641   0011F8  A0D8               	btfss	status,0,c
  5642   0011FA  EF01  F009         	goto	u2951
  5643   0011FE  EF03  F009         	goto	u2950
  5644   001202                     u2951:
  5645   001202  EFBD  F008         	goto	l3758
  5646   001206                     u2950:
  5647   001206                     
  5648                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5649   001206  0E00               	movlw	0
  5650   001208  6E2D               	movwf	(turnRight@i+1)^0,c
  5651   00120A  0E20               	movlw	32
  5652   00120C  6E2C               	movwf	turnRight@i^0,c
  5653   00120E                     l3780:
  5654                           
  5655                           ;dc_motor.c: 194:         (*mL).direction=0;
  5656   00120E  EE20 F001          	lfsr	2,1
  5657   001212  5024               	movf	turnRight@mL^0,w,c
  5658   001214  26D9               	addwf	fsr2l,f,c
  5659   001216  5025               	movf	(turnRight@mL+1)^0,w,c
  5660   001218  22DA               	addwfc	fsr2h,f,c
  5661   00121A  0E00               	movlw	0
  5662   00121C  6EDF               	movwf	indf2,c
  5663                           
  5664                           ;dc_motor.c: 195:         (*mR).direction=1;
  5665   00121E  EE20 F001          	lfsr	2,1
  5666   001222  5026               	movf	turnRight@mR^0,w,c
  5667   001224  26D9               	addwf	fsr2l,f,c
  5668   001226  5027               	movf	(turnRight@mR+1)^0,w,c
  5669   001228  22DA               	addwfc	fsr2h,f,c
  5670   00122A  0E01               	movlw	1
  5671   00122C  6EDF               	movwf	indf2,c
  5672   00122E                     
  5673                           ;dc_motor.c: 196:         (*mL).power=i;
  5674   00122E  C024  FFD9         	movff	turnRight@mL,fsr2l
  5675   001232  C025  FFDA         	movff	turnRight@mL+1,fsr2h
  5676   001236  C02C  FFDF         	movff	turnRight@i,indf2
  5677   00123A                     
  5678                           ;dc_motor.c: 197:         (*mR).power=i;
  5679   00123A  C026  FFD9         	movff	turnRight@mR,fsr2l
  5680   00123E  C027  FFDA         	movff	turnRight@mR+1,fsr2h
  5681   001242  C02C  FFDF         	movff	turnRight@i,indf2
  5682   001246                     
  5683                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5684   001246  C024  F01E         	movff	turnRight@mL,setMotorPWM@m
  5685   00124A  C025  F01F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5686   00124E  EC52  F007         	call	_setMotorPWM	;wreg free
  5687   001252                     
  5688                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5689   001252  C026  F01E         	movff	turnRight@mR,setMotorPWM@m
  5690   001256  C027  F01F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5691   00125A  EC52  F007         	call	_setMotorPWM	;wreg free
  5692   00125E                     
  5693                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5694   00125E  0E09               	movlw	9
  5695   001260  6E29               	movwf	(??_turnRight+1)^0,c
  5696   001262  0E86               	movlw	134
  5697   001264  6E28               	movwf	??_turnRight^0,c
  5698   001266  0ECA               	movlw	202
  5699   001268                     u4197:
  5700   001268  2EE8               	decfsz	wreg,f,c
  5701   00126A  D7FE               	bra	u4197
  5702   00126C  2E28               	decfsz	??_turnRight^0,f,c
  5703   00126E  D7FC               	bra	u4197
  5704   001270  2E29               	decfsz	(??_turnRight+1)^0,f,c
  5705   001272  D7FA               	bra	u4197
  5706   001274                     
  5707                           ;dc_motor.c: 202:         }
  5708   001274  0EFB               	movlw	251
  5709   001276  262C               	addwf	turnRight@i^0,f,c
  5710   001278  0EFF               	movlw	255
  5711   00127A  222D               	addwfc	(turnRight@i+1)^0,f,c
  5712   00127C  BE2D               	btfsc	(turnRight@i+1)^0,7,c
  5713   00127E  EF4C  F009         	goto	u2960
  5714   001282  502D               	movf	(turnRight@i+1)^0,w,c
  5715   001284  E107               	bnz	u2961
  5716   001286  0E12               	movlw	18
  5717   001288  5C2C               	subwf	turnRight@i^0,w,c
  5718   00128A  B0D8               	btfsc	status,0,c
  5719   00128C  EF4A  F009         	goto	u2961
  5720   001290  EF4C  F009         	goto	u2960
  5721   001294                     u2961:
  5722   001294  EF07  F009         	goto	l3780
  5723   001298                     u2960:
  5724   001298                     
  5725                           ;dc_motor.c: 203:     }
  5726   001298  4A2A               	infsnz	turnRight@k^0,f,c
  5727   00129A  2A2B               	incf	(turnRight@k+1)^0,f,c
  5728   00129C  BE2B               	btfsc	(turnRight@k+1)^0,7,c
  5729   00129E  EF5A  F009         	goto	u2971
  5730   0012A2  502B               	movf	(turnRight@k+1)^0,w,c
  5731   0012A4  E109               	bnz	u2970
  5732   0012A6  0E02               	movlw	2
  5733   0012A8  5C2A               	subwf	turnRight@k^0,w,c
  5734   0012AA  A0D8               	btfss	status,0,c
  5735   0012AC  EF5A  F009         	goto	u2971
  5736   0012B0  EF5C  F009         	goto	u2970
  5737   0012B4                     u2971:
  5738   0012B4  EFB9  F008         	goto	l3752
  5739   0012B8                     u2970:
  5740   0012B8  0012               	return		;funcret
  5741   0012BA                     __end_of_turnRight:
  5742                           	callstack 0
  5743                           
  5744 ;; *************** function _turnLeftLong *****************
  5745 ;; Defined at:
  5746 ;;		line 206 in file "dc_motor.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5749 ;;		 -> main@motorL(9), 
  5750 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5751 ;;		 -> main@motorR(9), 
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;  i               2   41[COMRAM] int 
  5754 ;; Return value:  Size  Location     Type
  5755 ;;                  1    wreg      void 
  5756 ;; Registers used:
  5757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5758 ;; Tracked objects:
  5759 ;;		On entry : 0/0
  5760 ;;		On exit  : 0/0
  5761 ;;		Unchanged: 0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5766 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5767 ;;Total ram usage:        8 bytes
  5768 ;; Hardware stack levels used: 1
  5769 ;; Hardware stack levels required when called: 7
  5770 ;; This function calls:
  5771 ;;		_setMotorPWM
  5772 ;; This function is called by:
  5773 ;;		_RobotMovement
  5774 ;;		_return_back
  5775 ;; This function uses a non-reentrant model
  5776 ;;
  5777                           
  5778                           	psect	text31
  5779   001658                     __ptext31:
  5780                           	callstack 0
  5781   001658                     _turnLeftLong:
  5782                           	callstack 22
  5783   001658                     
  5784                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5785   001658  0E00               	movlw	0
  5786   00165A  6E2B               	movwf	(turnLeftLong@i+1)^0,c
  5787   00165C  0E17               	movlw	23
  5788   00165E  6E2A               	movwf	turnLeftLong@i^0,c
  5789   001660                     l3806:
  5790                           
  5791                           ;dc_motor.c: 211:     (*mL).direction=1;
  5792   001660  EE20 F001          	lfsr	2,1
  5793   001664  5024               	movf	turnLeftLong@mL^0,w,c
  5794   001666  26D9               	addwf	fsr2l,f,c
  5795   001668  5025               	movf	(turnLeftLong@mL+1)^0,w,c
  5796   00166A  22DA               	addwfc	fsr2h,f,c
  5797   00166C  0E01               	movlw	1
  5798   00166E  6EDF               	movwf	indf2,c
  5799                           
  5800                           ;dc_motor.c: 212:     (*mR).direction=0;
  5801   001670  EE20 F001          	lfsr	2,1
  5802   001674  5026               	movf	turnLeftLong@mR^0,w,c
  5803   001676  26D9               	addwf	fsr2l,f,c
  5804   001678  5027               	movf	(turnLeftLong@mR+1)^0,w,c
  5805   00167A  22DA               	addwfc	fsr2h,f,c
  5806   00167C  0E00               	movlw	0
  5807   00167E  6EDF               	movwf	indf2,c
  5808   001680                     
  5809                           ;dc_motor.c: 213:     (*mL).power=i;
  5810   001680  C024  FFD9         	movff	turnLeftLong@mL,fsr2l
  5811   001684  C025  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5812   001688  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5813   00168C                     
  5814                           ;dc_motor.c: 214:     (*mR).power=i;
  5815   00168C  C026  FFD9         	movff	turnLeftLong@mR,fsr2l
  5816   001690  C027  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5817   001694  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5818   001698                     
  5819                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5820   001698  C024  F01E         	movff	turnLeftLong@mL,setMotorPWM@m
  5821   00169C  C025  F01F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5822   0016A0  EC52  F007         	call	_setMotorPWM	;wreg free
  5823   0016A4                     
  5824                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5825   0016A4  C026  F01E         	movff	turnLeftLong@mR,setMotorPWM@m
  5826   0016A8  C027  F01F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5827   0016AC  EC52  F007         	call	_setMotorPWM	;wreg free
  5828   0016B0                     
  5829                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5830   0016B0  0E0D               	movlw	13
  5831   0016B2  6E29               	movwf	(??_turnLeftLong+1)^0,c
  5832   0016B4  0EAA               	movlw	170
  5833   0016B6  6E28               	movwf	??_turnLeftLong^0,c
  5834   0016B8  0E84               	movlw	132
  5835   0016BA                     u4207:
  5836   0016BA  2EE8               	decfsz	wreg,f,c
  5837   0016BC  D7FE               	bra	u4207
  5838   0016BE  2E28               	decfsz	??_turnLeftLong^0,f,c
  5839   0016C0  D7FC               	bra	u4207
  5840   0016C2  2E29               	decfsz	(??_turnLeftLong+1)^0,f,c
  5841   0016C4  D7FA               	bra	u4207
  5842   0016C6  D000               	nop2	
  5843   0016C8                     
  5844                           ;dc_motor.c: 218:     }
  5845   0016C8  0E05               	movlw	5
  5846   0016CA  262A               	addwf	turnLeftLong@i^0,f,c
  5847   0016CC  0E00               	movlw	0
  5848   0016CE  222B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5849   0016D0  BE2B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5850   0016D2  EF74  F00B         	goto	u2981
  5851   0016D6  502B               	movf	(turnLeftLong@i+1)^0,w,c
  5852   0016D8  E109               	bnz	u2980
  5853   0016DA  0E26               	movlw	38
  5854   0016DC  5C2A               	subwf	turnLeftLong@i^0,w,c
  5855   0016DE  A0D8               	btfss	status,0,c
  5856   0016E0  EF74  F00B         	goto	u2981
  5857   0016E4  EF76  F00B         	goto	u2980
  5858   0016E8                     u2981:
  5859   0016E8  EF30  F00B         	goto	l3806
  5860   0016EC                     u2980:
  5861   0016EC                     
  5862                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5863   0016EC  0E00               	movlw	0
  5864   0016EE  6E2B               	movwf	(turnLeftLong@i+1)^0,c
  5865   0016F0  0E1C               	movlw	28
  5866   0016F2  6E2A               	movwf	turnLeftLong@i^0,c
  5867   0016F4                     l3828:
  5868                           
  5869                           ;dc_motor.c: 220:     (*mL).direction=1;
  5870   0016F4  EE20 F001          	lfsr	2,1
  5871   0016F8  5024               	movf	turnLeftLong@mL^0,w,c
  5872   0016FA  26D9               	addwf	fsr2l,f,c
  5873   0016FC  5025               	movf	(turnLeftLong@mL+1)^0,w,c
  5874   0016FE  22DA               	addwfc	fsr2h,f,c
  5875   001700  0E01               	movlw	1
  5876   001702  6EDF               	movwf	indf2,c
  5877                           
  5878                           ;dc_motor.c: 221:     (*mR).direction=0;
  5879   001704  EE20 F001          	lfsr	2,1
  5880   001708  5026               	movf	turnLeftLong@mR^0,w,c
  5881   00170A  26D9               	addwf	fsr2l,f,c
  5882   00170C  5027               	movf	(turnLeftLong@mR+1)^0,w,c
  5883   00170E  22DA               	addwfc	fsr2h,f,c
  5884   001710  0E00               	movlw	0
  5885   001712  6EDF               	movwf	indf2,c
  5886   001714                     
  5887                           ;dc_motor.c: 222:     (*mL).power=i;
  5888   001714  C024  FFD9         	movff	turnLeftLong@mL,fsr2l
  5889   001718  C025  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5890   00171C  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5891   001720                     
  5892                           ;dc_motor.c: 223:     (*mR).power=i;
  5893   001720  C026  FFD9         	movff	turnLeftLong@mR,fsr2l
  5894   001724  C027  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5895   001728  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5896   00172C                     
  5897                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5898   00172C  C024  F01E         	movff	turnLeftLong@mL,setMotorPWM@m
  5899   001730  C025  F01F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5900   001734  EC52  F007         	call	_setMotorPWM	;wreg free
  5901   001738                     
  5902                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5903   001738  C026  F01E         	movff	turnLeftLong@mR,setMotorPWM@m
  5904   00173C  C027  F01F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5905   001740  EC52  F007         	call	_setMotorPWM	;wreg free
  5906   001744                     
  5907                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5908   001744  0E0D               	movlw	13
  5909   001746  6E29               	movwf	(??_turnLeftLong+1)^0,c
  5910   001748  0E2D               	movlw	45
  5911   00174A  6E28               	movwf	??_turnLeftLong^0,c
  5912   00174C  0ED8               	movlw	216
  5913   00174E                     u4217:
  5914   00174E  2EE8               	decfsz	wreg,f,c
  5915   001750  D7FE               	bra	u4217
  5916   001752  2E28               	decfsz	??_turnLeftLong^0,f,c
  5917   001754  D7FC               	bra	u4217
  5918   001756  2E29               	decfsz	(??_turnLeftLong+1)^0,f,c
  5919   001758  D7FA               	bra	u4217
  5920   00175A                     
  5921                           ;dc_motor.c: 228:     }
  5922   00175A  0EFB               	movlw	251
  5923   00175C  262A               	addwf	turnLeftLong@i^0,f,c
  5924   00175E  0EFF               	movlw	255
  5925   001760  222B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5926   001762  BE2B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5927   001764  EFBF  F00B         	goto	u2990
  5928   001768  502B               	movf	(turnLeftLong@i+1)^0,w,c
  5929   00176A  E107               	bnz	u2991
  5930   00176C  0E0E               	movlw	14
  5931   00176E  5C2A               	subwf	turnLeftLong@i^0,w,c
  5932   001770  B0D8               	btfsc	status,0,c
  5933   001772  EFBD  F00B         	goto	u2991
  5934   001776  EFBF  F00B         	goto	u2990
  5935   00177A                     u2991:
  5936   00177A  EF7A  F00B         	goto	l3828
  5937   00177E                     u2990:
  5938   00177E  0012               	return		;funcret
  5939   001780                     __end_of_turnLeftLong:
  5940                           	callstack 0
  5941                           
  5942 ;; *************** function _turnLeft *****************
  5943 ;; Defined at:
  5944 ;;		line 102 in file "dc_motor.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5947 ;;		 -> main@motorL(9), 
  5948 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5949 ;;		 -> main@motorR(9), 
  5950 ;; Auto vars:     Size  Location     Type
  5951 ;;  i               2   43[COMRAM] int 
  5952 ;;  k               2   41[COMRAM] int 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5963 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5964 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5965 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5966 ;;Total ram usage:       10 bytes
  5967 ;; Hardware stack levels used: 1
  5968 ;; Hardware stack levels required when called: 7
  5969 ;; This function calls:
  5970 ;;		_setMotorPWM
  5971 ;; This function is called by:
  5972 ;;		_RobotMovement
  5973 ;;		_return_back
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           	psect	text32
  5978   001010                     __ptext32:
  5979                           	callstack 0
  5980   001010                     _turnLeft:
  5981                           	callstack 22
  5982   001010                     
  5983                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5984   001010  0E00               	movlw	0
  5985   001012  6E2B               	movwf	(turnLeft@k+1)^0,c
  5986   001014  0E00               	movlw	0
  5987   001016  6E2A               	movwf	turnLeft@k^0,c
  5988                           
  5989                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5990   001018  0E00               	movlw	0
  5991   00101A  6E2B               	movwf	(turnLeft@k+1)^0,c
  5992   00101C  0E00               	movlw	0
  5993   00101E  6E2A               	movwf	turnLeft@k^0,c
  5994   001020                     l3698:
  5995                           
  5996                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  5997   001020  0E00               	movlw	0
  5998   001022  6E2D               	movwf	(turnLeft@i+1)^0,c
  5999   001024  0E2F               	movlw	47
  6000   001026  6E2C               	movwf	turnLeft@i^0,c
  6001   001028                     l3704:
  6002                           
  6003                           ;dc_motor.c: 133:         (*mL).direction=1;
  6004   001028  EE20 F001          	lfsr	2,1
  6005   00102C  5024               	movf	turnLeft@mL^0,w,c
  6006   00102E  26D9               	addwf	fsr2l,f,c
  6007   001030  5025               	movf	(turnLeft@mL+1)^0,w,c
  6008   001032  22DA               	addwfc	fsr2h,f,c
  6009   001034  0E01               	movlw	1
  6010   001036  6EDF               	movwf	indf2,c
  6011                           
  6012                           ;dc_motor.c: 134:         (*mR).direction=0;
  6013   001038  EE20 F001          	lfsr	2,1
  6014   00103C  5026               	movf	turnLeft@mR^0,w,c
  6015   00103E  26D9               	addwf	fsr2l,f,c
  6016   001040  5027               	movf	(turnLeft@mR+1)^0,w,c
  6017   001042  22DA               	addwfc	fsr2h,f,c
  6018   001044  0E00               	movlw	0
  6019   001046  6EDF               	movwf	indf2,c
  6020   001048                     
  6021                           ;dc_motor.c: 135:         (*mL).power=i;
  6022   001048  C024  FFD9         	movff	turnLeft@mL,fsr2l
  6023   00104C  C025  FFDA         	movff	turnLeft@mL+1,fsr2h
  6024   001050  C02C  FFDF         	movff	turnLeft@i,indf2
  6025   001054                     
  6026                           ;dc_motor.c: 136:         (*mR).power=i;
  6027   001054  C026  FFD9         	movff	turnLeft@mR,fsr2l
  6028   001058  C027  FFDA         	movff	turnLeft@mR+1,fsr2h
  6029   00105C  C02C  FFDF         	movff	turnLeft@i,indf2
  6030   001060                     
  6031                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6032   001060  C024  F01E         	movff	turnLeft@mL,setMotorPWM@m
  6033   001064  C025  F01F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6034   001068  EC52  F007         	call	_setMotorPWM	;wreg free
  6035   00106C                     
  6036                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6037   00106C  C026  F01E         	movff	turnLeft@mR,setMotorPWM@m
  6038   001070  C027  F01F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6039   001074  EC52  F007         	call	_setMotorPWM	;wreg free
  6040   001078                     
  6041                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6042   001078  0E05               	movlw	5
  6043   00107A  6E29               	movwf	(??_turnLeft+1)^0,c
  6044   00107C  0EB6               	movlw	182
  6045   00107E  6E28               	movwf	??_turnLeft^0,c
  6046   001080  0E2C               	movlw	44
  6047   001082                     u4227:
  6048   001082  2EE8               	decfsz	wreg,f,c
  6049   001084  D7FE               	bra	u4227
  6050   001086  2E28               	decfsz	??_turnLeft^0,f,c
  6051   001088  D7FC               	bra	u4227
  6052   00108A  2E29               	decfsz	(??_turnLeft+1)^0,f,c
  6053   00108C  D7FA               	bra	u4227
  6054   00108E  D000               	nop2	
  6055   001090                     
  6056                           ;dc_motor.c: 140:         }
  6057   001090  0E05               	movlw	5
  6058   001092  262C               	addwf	turnLeft@i^0,f,c
  6059   001094  0E00               	movlw	0
  6060   001096  222D               	addwfc	(turnLeft@i+1)^0,f,c
  6061   001098  BE2D               	btfsc	(turnLeft@i+1)^0,7,c
  6062   00109A  EF58  F008         	goto	u2921
  6063   00109E  502D               	movf	(turnLeft@i+1)^0,w,c
  6064   0010A0  E109               	bnz	u2920
  6065   0010A2  0E3E               	movlw	62
  6066   0010A4  5C2C               	subwf	turnLeft@i^0,w,c
  6067   0010A6  A0D8               	btfss	status,0,c
  6068   0010A8  EF58  F008         	goto	u2921
  6069   0010AC  EF5A  F008         	goto	u2920
  6070   0010B0                     u2921:
  6071   0010B0  EF14  F008         	goto	l3704
  6072   0010B4                     u2920:
  6073   0010B4                     
  6074                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  6075   0010B4  0E00               	movlw	0
  6076   0010B6  6E2D               	movwf	(turnLeft@i+1)^0,c
  6077   0010B8  0E34               	movlw	52
  6078   0010BA  6E2C               	movwf	turnLeft@i^0,c
  6079   0010BC                     l3726:
  6080                           
  6081                           ;dc_motor.c: 142:         (*mL).direction=1;
  6082   0010BC  EE20 F001          	lfsr	2,1
  6083   0010C0  5024               	movf	turnLeft@mL^0,w,c
  6084   0010C2  26D9               	addwf	fsr2l,f,c
  6085   0010C4  5025               	movf	(turnLeft@mL+1)^0,w,c
  6086   0010C6  22DA               	addwfc	fsr2h,f,c
  6087   0010C8  0E01               	movlw	1
  6088   0010CA  6EDF               	movwf	indf2,c
  6089                           
  6090                           ;dc_motor.c: 143:         (*mR).direction=0;
  6091   0010CC  EE20 F001          	lfsr	2,1
  6092   0010D0  5026               	movf	turnLeft@mR^0,w,c
  6093   0010D2  26D9               	addwf	fsr2l,f,c
  6094   0010D4  5027               	movf	(turnLeft@mR+1)^0,w,c
  6095   0010D6  22DA               	addwfc	fsr2h,f,c
  6096   0010D8  0E00               	movlw	0
  6097   0010DA  6EDF               	movwf	indf2,c
  6098   0010DC                     
  6099                           ;dc_motor.c: 144:         (*mL).power=i;
  6100   0010DC  C024  FFD9         	movff	turnLeft@mL,fsr2l
  6101   0010E0  C025  FFDA         	movff	turnLeft@mL+1,fsr2h
  6102   0010E4  C02C  FFDF         	movff	turnLeft@i,indf2
  6103   0010E8                     
  6104                           ;dc_motor.c: 145:         (*mR).power=i;
  6105   0010E8  C026  FFD9         	movff	turnLeft@mR,fsr2l
  6106   0010EC  C027  FFDA         	movff	turnLeft@mR+1,fsr2h
  6107   0010F0  C02C  FFDF         	movff	turnLeft@i,indf2
  6108   0010F4                     
  6109                           ;dc_motor.c: 146:         setMotorPWM(mL);
  6110   0010F4  C024  F01E         	movff	turnLeft@mL,setMotorPWM@m
  6111   0010F8  C025  F01F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6112   0010FC  EC52  F007         	call	_setMotorPWM	;wreg free
  6113   001100                     
  6114                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6115   001100  C026  F01E         	movff	turnLeft@mR,setMotorPWM@m
  6116   001104  C027  F01F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6117   001108  EC52  F007         	call	_setMotorPWM	;wreg free
  6118   00110C                     
  6119                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6120   00110C  0E05               	movlw	5
  6121   00110E  6E29               	movwf	(??_turnLeft+1)^0,c
  6122   001110  0EA1               	movlw	161
  6123   001112  6E28               	movwf	??_turnLeft^0,c
  6124   001114  0E65               	movlw	101
  6125   001116                     u4237:
  6126   001116  2EE8               	decfsz	wreg,f,c
  6127   001118  D7FE               	bra	u4237
  6128   00111A  2E28               	decfsz	??_turnLeft^0,f,c
  6129   00111C  D7FC               	bra	u4237
  6130   00111E  2E29               	decfsz	(??_turnLeft+1)^0,f,c
  6131   001120  D7FA               	bra	u4237
  6132   001122  F000               	nop	
  6133   001124                     
  6134                           ;dc_motor.c: 150:         }
  6135   001124  0EFB               	movlw	251
  6136   001126  262C               	addwf	turnLeft@i^0,f,c
  6137   001128  0EFF               	movlw	255
  6138   00112A  222D               	addwfc	(turnLeft@i+1)^0,f,c
  6139   00112C  BE2D               	btfsc	(turnLeft@i+1)^0,7,c
  6140   00112E  EFA4  F008         	goto	u2930
  6141   001132  502D               	movf	(turnLeft@i+1)^0,w,c
  6142   001134  E107               	bnz	u2931
  6143   001136  0E26               	movlw	38
  6144   001138  5C2C               	subwf	turnLeft@i^0,w,c
  6145   00113A  B0D8               	btfsc	status,0,c
  6146   00113C  EFA2  F008         	goto	u2931
  6147   001140  EFA4  F008         	goto	u2930
  6148   001144                     u2931:
  6149   001144  EF5E  F008         	goto	l3726
  6150   001148                     u2930:
  6151   001148                     
  6152                           ;dc_motor.c: 151:     }
  6153   001148  4A2A               	infsnz	turnLeft@k^0,f,c
  6154   00114A  2A2B               	incf	(turnLeft@k+1)^0,f,c
  6155   00114C  BE2B               	btfsc	(turnLeft@k+1)^0,7,c
  6156   00114E  EFB2  F008         	goto	u2941
  6157   001152  502B               	movf	(turnLeft@k+1)^0,w,c
  6158   001154  E109               	bnz	u2940
  6159   001156  0E02               	movlw	2
  6160   001158  5C2A               	subwf	turnLeft@k^0,w,c
  6161   00115A  A0D8               	btfss	status,0,c
  6162   00115C  EFB2  F008         	goto	u2941
  6163   001160  EFB4  F008         	goto	u2940
  6164   001164                     u2941:
  6165   001164  EF10  F008         	goto	l3698
  6166   001168                     u2940:
  6167   001168  0012               	return		;funcret
  6168   00116A                     __end_of_turnLeft:
  6169                           	callstack 0
  6170                           
  6171 ;; *************** function _stop *****************
  6172 ;; Defined at:
  6173 ;;		line 92 in file "dc_motor.c"
  6174 ;; Parameters:    Size  Location     Type
  6175 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6176 ;;		 -> main@motorL(9), 
  6177 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6178 ;;		 -> main@motorR(9), 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;		None
  6181 ;; Return value:  Size  Location     Type
  6182 ;;                  1    wreg      void 
  6183 ;; Registers used:
  6184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6190 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6193 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;Total ram usage:        6 bytes
  6195 ;; Hardware stack levels used: 1
  6196 ;; Hardware stack levels required when called: 7
  6197 ;; This function calls:
  6198 ;;		_setMotorPWM
  6199 ;; This function is called by:
  6200 ;;		_RobotMovement
  6201 ;;		_return_back
  6202 ;;		_main
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text33
  6207   001E6A                     __ptext33:
  6208                           	callstack 0
  6209   001E6A                     _stop:
  6210                           	callstack 23
  6211   001E6A                     
  6212                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6213   001E6A  C024  FFD9         	movff	stop@mL,fsr2l
  6214   001E6E  C025  FFDA         	movff	stop@mL+1,fsr2h
  6215   001E72  0E00               	movlw	0
  6216   001E74  6EDF               	movwf	indf2,c
  6217                           
  6218                           ;dc_motor.c: 95:     (*mR).power=0;
  6219   001E76  C026  FFD9         	movff	stop@mR,fsr2l
  6220   001E7A  C027  FFDA         	movff	stop@mR+1,fsr2h
  6221   001E7E  0E00               	movlw	0
  6222   001E80  6EDF               	movwf	indf2,c
  6223   001E82                     
  6224                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6225   001E82  C024  F01E         	movff	stop@mL,setMotorPWM@m
  6226   001E86  C025  F01F         	movff	stop@mL+1,setMotorPWM@m+1
  6227   001E8A  EC52  F007         	call	_setMotorPWM	;wreg free
  6228   001E8E                     
  6229                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6230   001E8E  C026  F01E         	movff	stop@mR,setMotorPWM@m
  6231   001E92  C027  F01F         	movff	stop@mR+1,setMotorPWM@m+1
  6232   001E96  EC52  F007         	call	_setMotorPWM	;wreg free
  6233   001E9A                     
  6234                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6235   001E9A  0E52               	movlw	82
  6236   001E9C  6E29               	movwf	(??_stop+1)^0,c
  6237   001E9E  0E2B               	movlw	43
  6238   001EA0  6E28               	movwf	??_stop^0,c
  6239   001EA2  0E00               	movlw	0
  6240   001EA4                     u4247:
  6241   001EA4  2EE8               	decfsz	wreg,f,c
  6242   001EA6  D7FE               	bra	u4247
  6243   001EA8  2E28               	decfsz	??_stop^0,f,c
  6244   001EAA  D7FC               	bra	u4247
  6245   001EAC  2E29               	decfsz	(??_stop+1)^0,f,c
  6246   001EAE  D7FA               	bra	u4247
  6247   001EB0  D000               	nop2	
  6248   001EB2  0012               	return		;funcret
  6249   001EB4                     __end_of_stop:
  6250                           	callstack 0
  6251                           
  6252 ;; *************** function _moveBack *****************
  6253 ;; Defined at:
  6254 ;;		line 282 in file "dc_motor.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6257 ;;		 -> main@motorL(9), 
  6258 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6259 ;;		 -> main@motorR(9), 
  6260 ;;  time            2   39[COMRAM] unsigned int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;		None
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  1    wreg      void 
  6265 ;; Registers used:
  6266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6272 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6275 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;Total ram usage:        6 bytes
  6277 ;; Hardware stack levels used: 1
  6278 ;; Hardware stack levels required when called: 7
  6279 ;; This function calls:
  6280 ;;		_setMotorPWM
  6281 ;; This function is called by:
  6282 ;;		_RobotMovement
  6283 ;;		_return_back
  6284 ;; This function uses a non-reentrant model
  6285 ;;
  6286                           
  6287                           	psect	text34
  6288   0019FC                     __ptext34:
  6289                           	callstack 0
  6290   0019FC                     _moveBack:
  6291                           	callstack 22
  6292   0019FC                     
  6293                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6294   0019FC  0E00               	movlw	0
  6295   0019FE  6E45               	movwf	(_seconds+1)^0,c
  6296   001A00  0E00               	movlw	0
  6297   001A02  6E44               	movwf	_seconds^0,c
  6298                           
  6299                           ;dc_motor.c: 285:     while (seconds<time)
  6300   001A04  EF2C  F00D         	goto	l3914
  6301   001A08                     l3904:
  6302                           
  6303                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6304   001A08  EE20 F001          	lfsr	2,1
  6305   001A0C  5024               	movf	moveBack@mL^0,w,c
  6306   001A0E  26D9               	addwf	fsr2l,f,c
  6307   001A10  5025               	movf	(moveBack@mL+1)^0,w,c
  6308   001A12  22DA               	addwfc	fsr2h,f,c
  6309   001A14  0E01               	movlw	1
  6310   001A16  6EDF               	movwf	indf2,c
  6311                           
  6312                           ;dc_motor.c: 288:         (*mR).direction=1;
  6313   001A18  EE20 F001          	lfsr	2,1
  6314   001A1C  5026               	movf	moveBack@mR^0,w,c
  6315   001A1E  26D9               	addwf	fsr2l,f,c
  6316   001A20  5027               	movf	(moveBack@mR+1)^0,w,c
  6317   001A22  22DA               	addwfc	fsr2h,f,c
  6318   001A24  0E01               	movlw	1
  6319   001A26  6EDF               	movwf	indf2,c
  6320   001A28                     
  6321                           ;dc_motor.c: 289:         (*mL).power=40;
  6322   001A28  C024  FFD9         	movff	moveBack@mL,fsr2l
  6323   001A2C  C025  FFDA         	movff	moveBack@mL+1,fsr2h
  6324   001A30  0E28               	movlw	40
  6325   001A32  6EDF               	movwf	indf2,c
  6326   001A34                     
  6327                           ;dc_motor.c: 290:         (*mR).power=39;
  6328   001A34  C026  FFD9         	movff	moveBack@mR,fsr2l
  6329   001A38  C027  FFDA         	movff	moveBack@mR+1,fsr2h
  6330   001A3C  0E27               	movlw	39
  6331   001A3E  6EDF               	movwf	indf2,c
  6332   001A40                     
  6333                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6334   001A40  C024  F01E         	movff	moveBack@mL,setMotorPWM@m
  6335   001A44  C025  F01F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6336   001A48  EC52  F007         	call	_setMotorPWM	;wreg free
  6337   001A4C                     
  6338                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6339   001A4C  C026  F01E         	movff	moveBack@mR,setMotorPWM@m
  6340   001A50  C027  F01F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6341   001A54  EC52  F007         	call	_setMotorPWM	;wreg free
  6342   001A58                     l3914:
  6343                           
  6344                           ;dc_motor.c: 285:     while (seconds<time)
  6345   001A58  5028               	movf	moveBack@time^0,w,c
  6346   001A5A  5C44               	subwf	_seconds^0,w,c
  6347   001A5C  5029               	movf	(moveBack@time+1)^0,w,c
  6348   001A5E  5845               	subwfb	(_seconds+1)^0,w,c
  6349   001A60  A0D8               	btfss	status,0,c
  6350   001A62  EF35  F00D         	goto	u3031
  6351   001A66  EF37  F00D         	goto	u3030
  6352   001A6A                     u3031:
  6353   001A6A  EF04  F00D         	goto	l3904
  6354   001A6E                     u3030:
  6355   001A6E  0012               	return		;funcret
  6356   001A70                     __end_of_moveBack:
  6357                           	callstack 0
  6358                           
  6359 ;; *************** function _TimedfullSpeedAhead *****************
  6360 ;; Defined at:
  6361 ;;		line 267 in file "dc_motor.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6364 ;;		 -> main@motorL(9), 
  6365 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6366 ;;		 -> main@motorR(9), 
  6367 ;;  time            2   39[COMRAM] unsigned int 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  1    wreg      void 
  6372 ;; Registers used:
  6373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6379 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;Total ram usage:        6 bytes
  6384 ;; Hardware stack levels used: 1
  6385 ;; Hardware stack levels required when called: 7
  6386 ;; This function calls:
  6387 ;;		_setMotorPWM
  6388 ;; This function is called by:
  6389 ;;		_RobotMovement
  6390 ;;		_return_back
  6391 ;;		_main
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text35
  6396   001A70                     __ptext35:
  6397                           	callstack 0
  6398   001A70                     _TimedfullSpeedAhead:
  6399                           	callstack 22
  6400   001A70                     
  6401                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6402   001A70  0E00               	movlw	0
  6403   001A72  6E45               	movwf	(_seconds+1)^0,c
  6404   001A74  0E00               	movlw	0
  6405   001A76  6E44               	movwf	_seconds^0,c
  6406                           
  6407                           ;dc_motor.c: 270:     while (seconds<time)
  6408   001A78  EF66  F00D         	goto	l3900
  6409   001A7C                     l3890:
  6410                           
  6411                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6412   001A7C  EE20 F001          	lfsr	2,1
  6413   001A80  5024               	movf	TimedfullSpeedAhead@mL^0,w,c
  6414   001A82  26D9               	addwf	fsr2l,f,c
  6415   001A84  5025               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6416   001A86  22DA               	addwfc	fsr2h,f,c
  6417   001A88  0E00               	movlw	0
  6418   001A8A  6EDF               	movwf	indf2,c
  6419                           
  6420                           ;dc_motor.c: 274:         (*mR).direction=0;
  6421   001A8C  EE20 F001          	lfsr	2,1
  6422   001A90  5026               	movf	TimedfullSpeedAhead@mR^0,w,c
  6423   001A92  26D9               	addwf	fsr2l,f,c
  6424   001A94  5027               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6425   001A96  22DA               	addwfc	fsr2h,f,c
  6426   001A98  0E00               	movlw	0
  6427   001A9A  6EDF               	movwf	indf2,c
  6428   001A9C                     
  6429                           ;dc_motor.c: 275:         (*mL).power=50;
  6430   001A9C  C024  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6431   001AA0  C025  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6432   001AA4  0E32               	movlw	50
  6433   001AA6  6EDF               	movwf	indf2,c
  6434   001AA8                     
  6435                           ;dc_motor.c: 276:         (*mR).power=50;
  6436   001AA8  C026  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6437   001AAC  C027  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6438   001AB0  0E32               	movlw	50
  6439   001AB2  6EDF               	movwf	indf2,c
  6440   001AB4                     
  6441                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6442   001AB4  C024  F01E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6443   001AB8  C025  F01F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6444   001ABC  EC52  F007         	call	_setMotorPWM	;wreg free
  6445   001AC0                     
  6446                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6447   001AC0  C026  F01E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6448   001AC4  C027  F01F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6449   001AC8  EC52  F007         	call	_setMotorPWM	;wreg free
  6450   001ACC                     l3900:
  6451                           
  6452                           ;dc_motor.c: 270:     while (seconds<time)
  6453   001ACC  5028               	movf	TimedfullSpeedAhead@time^0,w,c
  6454   001ACE  5C44               	subwf	_seconds^0,w,c
  6455   001AD0  5029               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6456   001AD2  5845               	subwfb	(_seconds+1)^0,w,c
  6457   001AD4  A0D8               	btfss	status,0,c
  6458   001AD6  EF6F  F00D         	goto	u3021
  6459   001ADA  EF71  F00D         	goto	u3020
  6460   001ADE                     u3021:
  6461   001ADE  EF3E  F00D         	goto	l3890
  6462   001AE2                     u3020:
  6463   001AE2  0012               	return		;funcret
  6464   001AE4                     __end_of_TimedfullSpeedAhead:
  6465                           	callstack 0
  6466                           
  6467 ;; *************** function _setMotorPWM *****************
  6468 ;; Defined at:
  6469 ;;		line 69 in file "dc_motor.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  m               2   29[COMRAM] PTR struct DC_motor
  6472 ;;		 -> main@motorR(9), main@motorL(9), 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  negDuty         1   34[COMRAM] unsigned char 
  6475 ;;  posDuty         1   33[COMRAM] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6486 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6487 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6488 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6489 ;;Total ram usage:        6 bytes
  6490 ;; Hardware stack levels used: 1
  6491 ;; Hardware stack levels required when called: 6
  6492 ;; This function calls:
  6493 ;;		___lwdiv
  6494 ;;		___wmul
  6495 ;; This function is called by:
  6496 ;;		_stop
  6497 ;;		_turnLeft
  6498 ;;		_turnRight
  6499 ;;		_turnLeftLong
  6500 ;;		_turnRightLong
  6501 ;;		_fullSpeedAhead
  6502 ;;		_TimedfullSpeedAhead
  6503 ;;		_moveBack
  6504 ;; This function uses a non-reentrant model
  6505 ;;
  6506                           
  6507                           	psect	text36
  6508   000EA4                     __ptext36:
  6509                           	callstack 0
  6510   000EA4                     _setMotorPWM:
  6511                           	callstack 23
  6512   000EA4                     
  6513                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6514   000EA4  EE20 F002          	lfsr	2,2
  6515   000EA8  501E               	movf	setMotorPWM@m^0,w,c
  6516   000EAA  26D9               	addwf	fsr2l,f,c
  6517   000EAC  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6518   000EAE  22DA               	addwfc	fsr2h,f,c
  6519   000EB0  50DF               	movf	indf2,w,c
  6520   000EB2  B4D8               	btfsc	status,2,c
  6521   000EB4  EF5E  F007         	goto	u2871
  6522   000EB8  EF60  F007         	goto	u2870
  6523   000EBC                     u2871:
  6524   000EBC  EF94  F007         	goto	l3588
  6525   000EC0                     u2870:
  6526   000EC0                     
  6527                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6528   000EC0  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6529   000EC4  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6530   000EC8  50DF               	movf	indf2,w,c
  6531   000ECA  6E20               	movwf	??_setMotorPWM^0,c
  6532   000ECC  5020               	movf	??_setMotorPWM^0,w,c
  6533   000ECE  6E11               	movwf	___wmul@multiplier^0,c
  6534   000ED0  6A12               	clrf	(___wmul@multiplier+1)^0,c
  6535   000ED2  EE20 F003          	lfsr	2,3
  6536   000ED6  501E               	movf	setMotorPWM@m^0,w,c
  6537   000ED8  26D9               	addwf	fsr2l,f,c
  6538   000EDA  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6539   000EDC  22DA               	addwfc	fsr2h,f,c
  6540   000EDE  CFDE F013          	movff	postinc2,___wmul@multiplicand
  6541   000EE2  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  6542   000EE6  EC7D  F010         	call	___wmul	;wreg free
  6543   000EEA  C011  F017         	movff	?___wmul,___lwdiv@dividend
  6544   000EEE  C012  F018         	movff	?___wmul+1,___lwdiv@dividend+1
  6545   000EF2  0E00               	movlw	0
  6546   000EF4  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  6547   000EF6  0E64               	movlw	100
  6548   000EF8  6E19               	movwf	___lwdiv@divisor^0,c
  6549   000EFA  EC72  F00D         	call	___lwdiv	;wreg free
  6550   000EFE  EE20 F003          	lfsr	2,3
  6551   000F02  501E               	movf	setMotorPWM@m^0,w,c
  6552   000F04  26D9               	addwf	fsr2l,f,c
  6553   000F06  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6554   000F08  22DA               	addwfc	fsr2h,f,c
  6555   000F0A  50DF               	movf	indf2,w,c
  6556   000F0C  6E21               	movwf	(??_setMotorPWM+1)^0,c
  6557   000F0E  5017               	movf	?___lwdiv^0,w,c
  6558   000F10  5C21               	subwf	(??_setMotorPWM+1)^0,w,c
  6559   000F12  6E22               	movwf	setMotorPWM@posDuty^0,c
  6560   000F14                     
  6561                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6562   000F14  EE20 F003          	lfsr	2,3
  6563   000F18  501E               	movf	setMotorPWM@m^0,w,c
  6564   000F1A  26D9               	addwf	fsr2l,f,c
  6565   000F1C  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6566   000F1E  22DA               	addwfc	fsr2h,f,c
  6567   000F20  50DF               	movf	indf2,w,c
  6568   000F22  6E23               	movwf	setMotorPWM@negDuty^0,c
  6569                           
  6570                           ;dc_motor.c: 76:     }
  6571   000F24  EFB7  F007         	goto	l3592
  6572   000F28                     l3588:
  6573                           
  6574                           ;dc_motor.c: 78:         posDuty=0;
  6575   000F28  0E00               	movlw	0
  6576   000F2A  6E22               	movwf	setMotorPWM@posDuty^0,c
  6577   000F2C                     
  6578                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6579   000F2C  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6580   000F30  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6581   000F34  50DF               	movf	indf2,w,c
  6582   000F36  6E20               	movwf	??_setMotorPWM^0,c
  6583   000F38  5020               	movf	??_setMotorPWM^0,w,c
  6584   000F3A  6E11               	movwf	___wmul@multiplier^0,c
  6585   000F3C  6A12               	clrf	(___wmul@multiplier+1)^0,c
  6586   000F3E  EE20 F003          	lfsr	2,3
  6587   000F42  501E               	movf	setMotorPWM@m^0,w,c
  6588   000F44  26D9               	addwf	fsr2l,f,c
  6589   000F46  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6590   000F48  22DA               	addwfc	fsr2h,f,c
  6591   000F4A  CFDE F013          	movff	postinc2,___wmul@multiplicand
  6592   000F4E  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  6593   000F52  EC7D  F010         	call	___wmul	;wreg free
  6594   000F56  C011  F017         	movff	?___wmul,___lwdiv@dividend
  6595   000F5A  C012  F018         	movff	?___wmul+1,___lwdiv@dividend+1
  6596   000F5E  0E00               	movlw	0
  6597   000F60  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  6598   000F62  0E64               	movlw	100
  6599   000F64  6E19               	movwf	___lwdiv@divisor^0,c
  6600   000F66  EC72  F00D         	call	___lwdiv	;wreg free
  6601   000F6A  5017               	movf	?___lwdiv^0,w,c
  6602   000F6C  6E23               	movwf	setMotorPWM@negDuty^0,c
  6603   000F6E                     l3592:
  6604                           
  6605                           ;dc_motor.c: 82:     if (m->direction) {
  6606   000F6E  EE20 F001          	lfsr	2,1
  6607   000F72  501E               	movf	setMotorPWM@m^0,w,c
  6608   000F74  26D9               	addwf	fsr2l,f,c
  6609   000F76  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6610   000F78  22DA               	addwfc	fsr2h,f,c
  6611   000F7A  50DF               	movf	indf2,w,c
  6612   000F7C  B4D8               	btfsc	status,2,c
  6613   000F7E  EFC3  F007         	goto	u2881
  6614   000F82  EFC5  F007         	goto	u2880
  6615   000F86                     u2881:
  6616   000F86  EFE7  F007         	goto	l3596
  6617   000F8A                     u2880:
  6618   000F8A                     
  6619                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6620   000F8A  EE20 F005          	lfsr	2,5
  6621   000F8E  501E               	movf	setMotorPWM@m^0,w,c
  6622   000F90  26D9               	addwf	fsr2l,f,c
  6623   000F92  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6624   000F94  22DA               	addwfc	fsr2h,f,c
  6625   000F96  CFDE F020          	movff	postinc2,??_setMotorPWM
  6626   000F9A  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6627   000F9E  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6628   000FA2  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6629   000FA6  C022  FFDF         	movff	setMotorPWM@posDuty,indf2
  6630                           
  6631                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6632   000FAA  EE20 F007          	lfsr	2,7
  6633   000FAE  501E               	movf	setMotorPWM@m^0,w,c
  6634   000FB0  26D9               	addwf	fsr2l,f,c
  6635   000FB2  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6636   000FB4  22DA               	addwfc	fsr2h,f,c
  6637   000FB6  CFDE F020          	movff	postinc2,??_setMotorPWM
  6638   000FBA  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6639   000FBE  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6640   000FC2  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6641   000FC6  C023  FFDF         	movff	setMotorPWM@negDuty,indf2
  6642                           
  6643                           ;dc_motor.c: 85:     } else {
  6644   000FCA  EF07  F008         	goto	l229
  6645   000FCE                     l3596:
  6646                           
  6647                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6648   000FCE  EE20 F005          	lfsr	2,5
  6649   000FD2  501E               	movf	setMotorPWM@m^0,w,c
  6650   000FD4  26D9               	addwf	fsr2l,f,c
  6651   000FD6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6652   000FD8  22DA               	addwfc	fsr2h,f,c
  6653   000FDA  CFDE F020          	movff	postinc2,??_setMotorPWM
  6654   000FDE  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6655   000FE2  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6656   000FE6  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6657   000FEA  C023  FFDF         	movff	setMotorPWM@negDuty,indf2
  6658                           
  6659                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6660   000FEE  EE20 F007          	lfsr	2,7
  6661   000FF2  501E               	movf	setMotorPWM@m^0,w,c
  6662   000FF4  26D9               	addwf	fsr2l,f,c
  6663   000FF6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6664   000FF8  22DA               	addwfc	fsr2h,f,c
  6665   000FFA  CFDE F020          	movff	postinc2,??_setMotorPWM
  6666   000FFE  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6667   001002  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6668   001006  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6669   00100A  C022  FFDF         	movff	setMotorPWM@posDuty,indf2
  6670   00100E                     l229:
  6671   00100E  0012               	return		;funcret
  6672   001010                     __end_of_setMotorPWM:
  6673                           	callstack 0
  6674                           
  6675 ;; *************** function ___wmul *****************
  6676 ;; Defined at:
  6677 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  multiplier      2   16[COMRAM] unsigned int 
  6680 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  product         2   20[COMRAM] unsigned int 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  2   16[COMRAM] unsigned int 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2, status,0, prodl, prodh
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6692 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6693 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6695 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6696 ;;Total ram usage:        6 bytes
  6697 ;; Hardware stack levels used: 1
  6698 ;; Hardware stack levels required when called: 5
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_get_color_distance
  6703 ;;		_get_color_code
  6704 ;;		_get_wall_detection
  6705 ;;		_setMotorPWM
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text37
  6710   0020FA                     __ptext37:
  6711                           	callstack 0
  6712   0020FA                     ___wmul:
  6713                           	callstack 23
  6714   0020FA  5011               	movf	___wmul@multiplier^0,w,c
  6715   0020FC  0213               	mulwf	___wmul@multiplicand^0,c
  6716   0020FE  CFF3 F015          	movff	prodl,___wmul@product
  6717   002102  CFF4 F016          	movff	prodh,___wmul@product+1
  6718   002106  5011               	movf	___wmul@multiplier^0,w,c
  6719   002108  0214               	mulwf	(___wmul@multiplicand+1)^0,c
  6720   00210A  50F3               	movf	243,w,c
  6721   00210C  2616               	addwf	(___wmul@product+1)^0,f,c
  6722   00210E  5012               	movf	(___wmul@multiplier+1)^0,w,c
  6723   002110  0213               	mulwf	___wmul@multiplicand^0,c
  6724   002112  50F3               	movf	243,w,c
  6725   002114  2616               	addwf	(___wmul@product+1)^0,f,c
  6726   002116  C015  F011         	movff	___wmul@product,?___wmul
  6727   00211A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6728   00211E  0012               	return		;funcret
  6729   002120                     __end_of___wmul:
  6730                           	callstack 0
  6731                           
  6732 ;; *************** function ___lwdiv *****************
  6733 ;; Defined at:
  6734 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  dividend        2   22[COMRAM] unsigned int 
  6737 ;;  divisor         2   24[COMRAM] unsigned int 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  quotient        2   27[COMRAM] unsigned int 
  6740 ;;  counter         1   26[COMRAM] unsigned char 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  2   22[COMRAM] unsigned int 
  6743 ;; Registers used:
  6744 ;;		wreg, status,2, status,0
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6750 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6753 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;Total ram usage:        7 bytes
  6755 ;; Hardware stack levels used: 1
  6756 ;; Hardware stack levels required when called: 5
  6757 ;; This function calls:
  6758 ;;		Nothing
  6759 ;; This function is called by:
  6760 ;;		_calibrate_black
  6761 ;;		_setMotorPWM
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text38
  6766   001AE4                     __ptext38:
  6767                           	callstack 0
  6768   001AE4                     ___lwdiv:
  6769                           	callstack 23
  6770   001AE4  0E00               	movlw	0
  6771   001AE6  6E1D               	movwf	(___lwdiv@quotient+1)^0,c
  6772   001AE8  0E00               	movlw	0
  6773   001AEA  6E1C               	movwf	___lwdiv@quotient^0,c
  6774   001AEC  5019               	movf	___lwdiv@divisor^0,w,c
  6775   001AEE  101A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6776   001AF0  B4D8               	btfsc	status,2,c
  6777   001AF2  EF7D  F00D         	goto	u2811
  6778   001AF6  EF7F  F00D         	goto	u2810
  6779   001AFA                     u2811:
  6780   001AFA  EFA7  F00D         	goto	l968
  6781   001AFE                     u2810:
  6782   001AFE  0E01               	movlw	1
  6783   001B00  6E1B               	movwf	___lwdiv@counter^0,c
  6784   001B02  EF87  F00D         	goto	l3536
  6785   001B06                     l3534:
  6786   001B06  90D8               	bcf	status,0,c
  6787   001B08  3619               	rlcf	___lwdiv@divisor^0,f,c
  6788   001B0A  361A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6789   001B0C  2A1B               	incf	___lwdiv@counter^0,f,c
  6790   001B0E                     l3536:
  6791   001B0E  AE1A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6792   001B10  EF8C  F00D         	goto	u2821
  6793   001B14  EF8E  F00D         	goto	u2820
  6794   001B18                     u2821:
  6795   001B18  EF83  F00D         	goto	l3534
  6796   001B1C                     u2820:
  6797   001B1C                     l3538:
  6798   001B1C  90D8               	bcf	status,0,c
  6799   001B1E  361C               	rlcf	___lwdiv@quotient^0,f,c
  6800   001B20  361D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6801   001B22  5019               	movf	___lwdiv@divisor^0,w,c
  6802   001B24  5C17               	subwf	___lwdiv@dividend^0,w,c
  6803   001B26  501A               	movf	(___lwdiv@divisor+1)^0,w,c
  6804   001B28  5818               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6805   001B2A  A0D8               	btfss	status,0,c
  6806   001B2C  EF9A  F00D         	goto	u2831
  6807   001B30  EF9C  F00D         	goto	u2830
  6808   001B34                     u2831:
  6809   001B34  EFA1  F00D         	goto	l3546
  6810   001B38                     u2830:
  6811   001B38  5019               	movf	___lwdiv@divisor^0,w,c
  6812   001B3A  5E17               	subwf	___lwdiv@dividend^0,f,c
  6813   001B3C  501A               	movf	(___lwdiv@divisor+1)^0,w,c
  6814   001B3E  5A18               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6815   001B40  801C               	bsf	___lwdiv@quotient^0,0,c
  6816   001B42                     l3546:
  6817   001B42  90D8               	bcf	status,0,c
  6818   001B44  321A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6819   001B46  3219               	rrcf	___lwdiv@divisor^0,f,c
  6820   001B48  2E1B               	decfsz	___lwdiv@counter^0,f,c
  6821   001B4A  EF8E  F00D         	goto	l3538
  6822   001B4E                     l968:
  6823   001B4E  C01C  F017         	movff	___lwdiv@quotient,?___lwdiv
  6824   001B52  C01D  F018         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6825   001B56  0012               	return		;funcret
  6826   001B58                     __end_of___lwdiv:
  6827                           	callstack 0
  6828                           
  6829 ;; *************** function _Interrupts_init *****************
  6830 ;; Defined at:
  6831 ;;		line 11 in file "interrupts.c"
  6832 ;; Parameters:    Size  Location     Type
  6833 ;;		None
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;		None
  6836 ;; Return value:  Size  Location     Type
  6837 ;;                  1    wreg      void 
  6838 ;; Registers used:
  6839 ;;		None
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6849 ;;Total ram usage:        0 bytes
  6850 ;; Hardware stack levels used: 1
  6851 ;; Hardware stack levels required when called: 5
  6852 ;; This function calls:
  6853 ;;		Nothing
  6854 ;; This function is called by:
  6855 ;;		_main
  6856 ;; This function uses a non-reentrant model
  6857 ;;
  6858                           
  6859                           	psect	text39
  6860   00216C                     __ptext39:
  6861                           	callstack 0
  6862   00216C                     _Interrupts_init:
  6863                           	callstack 25
  6864   00216C                     
  6865                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  6866   00216C  8CF2               	bsf	242,6,c	;volatile
  6867                           
  6868                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  6869   00216E  010E               	movlb	14	; () banked
  6870   002170  8B29               	bsf	41,5,b	;volatile
  6871                           
  6872                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  6873   002172  812B               	bsf	43,0,b	;volatile
  6874                           
  6875                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  6876   002174  8EF2               	bsf	242,7,c	;volatile
  6877   002176                     
  6878                           ; BSR set to: 14
  6879   002176  0012               	return		;funcret
  6880   002178                     __end_of_Interrupts_init:
  6881                           	callstack 0
  6882                           
  6883 ;; *************** function _HighISR *****************
  6884 ;; Defined at:
  6885 ;;		line 25 in file "interrupts.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used: 1
  6905 ;; Hardware stack levels required when called: 4
  6906 ;; This function calls:
  6907 ;;		_increment_seconds
  6908 ;;		_set_wall_detection
  6909 ;; This function is called by:
  6910 ;;		Interrupt level 2
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	intcode
  6915   000008                     __pintcode:
  6916                           	callstack 0
  6917   000008                     _HighISR:
  6918                           	callstack 21
  6919                           
  6920                           ; BSR set to: 14
  6921                           ;incstack = 0
  6922   000008  824E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6923   00000A                     
  6924                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  6925   00000A  010E               	movlb	14	; () banked
  6926   00000C  AB33               	btfss	51,5,b	;volatile
  6927   00000E  EF0B  F000         	goto	i2u233_41
  6928   000012  EF0D  F000         	goto	i2u233_40
  6929   000016                     i2u233_41:
  6930   000016  EF4D  F000         	goto	i2l410
  6931   00001A                     i2u233_40:
  6932   00001A                     
  6933                           ; BSR set to: 14
  6934                           ;interrupts.c: 28:         incr_sec_counter += 10;
  6935   00001A  0E0A               	movlw	10
  6936   00001C  263E               	addwf	_incr_sec_counter^0,f,c
  6937   00001E  0E00               	movlw	0
  6938   000020  223F               	addwfc	(_incr_sec_counter+1)^0,f,c
  6939                           
  6940                           ;interrupts.c: 30:         if(incr_sec_counter == 10){
  6941   000022  0E0A               	movlw	10
  6942   000024  183E               	xorwf	_incr_sec_counter^0,w,c
  6943   000026  103F               	iorwf	(_incr_sec_counter+1)^0,w,c
  6944   000028  A4D8               	btfss	status,2,c
  6945   00002A  EF19  F000         	goto	i2u234_41
  6946   00002E  EF1B  F000         	goto	i2u234_40
  6947   000032                     i2u234_41:
  6948   000032  EF21  F000         	goto	i2l3186
  6949   000036                     i2u234_40:
  6950   000036                     
  6951                           ; BSR set to: 14
  6952                           ;interrupts.c: 31:             increment_seconds();
  6953   000036  ECE5  F010         	call	_increment_seconds	;wreg free
  6954   00003A                     
  6955                           ;interrupts.c: 32:             incr_sec_counter = 0;
  6956   00003A  0E00               	movlw	0
  6957   00003C  6E3F               	movwf	(_incr_sec_counter+1)^0,c
  6958   00003E  0E00               	movlw	0
  6959   000040  6E3E               	movwf	_incr_sec_counter^0,c
  6960   000042                     i2l3186:
  6961                           
  6962                           ;interrupts.c: 35:         if(wall_detection_counter == 22){
  6963   000042  0E16               	movlw	22
  6964   000044  183C               	xorwf	_wall_detection_counter^0,w,c
  6965   000046  103D               	iorwf	(_wall_detection_counter+1)^0,w,c
  6966   000048  A4D8               	btfss	status,2,c
  6967   00004A  EF29  F000         	goto	i2u235_41
  6968   00004E  EF2B  F000         	goto	i2u235_40
  6969   000052                     i2u235_41:
  6970   000052  EF33  F000         	goto	i2l3190
  6971   000056                     i2u235_40:
  6972   000056                     
  6973                           ;interrupts.c: 36:             set_wall_detection(0);
  6974   000056  0E00               	movlw	0
  6975   000058  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  6976   00005A  0E00               	movlw	0
  6977   00005C  6E0C               	movwf	set_wall_detection@mode^0,c
  6978   00005E  EC40  F00E         	call	_set_wall_detection	;wreg free
  6979                           
  6980                           ;interrupts.c: 37:         }
  6981   000062  EF47  F000         	goto	i2l3196
  6982   000066                     i2l3190:
  6983   000066  0E2C               	movlw	44
  6984   000068  183C               	xorwf	_wall_detection_counter^0,w,c
  6985   00006A  103D               	iorwf	(_wall_detection_counter+1)^0,w,c
  6986   00006C  A4D8               	btfss	status,2,c
  6987   00006E  EF3B  F000         	goto	i2u236_41
  6988   000072  EF3D  F000         	goto	i2u236_40
  6989   000076                     i2u236_41:
  6990   000076  EF47  F000         	goto	i2l3196
  6991   00007A                     i2u236_40:
  6992   00007A                     
  6993                           ;interrupts.c: 39:             set_wall_detection(1);
  6994   00007A  0E00               	movlw	0
  6995   00007C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  6996   00007E  0E01               	movlw	1
  6997   000080  6E0C               	movwf	set_wall_detection@mode^0,c
  6998   000082  EC40  F00E         	call	_set_wall_detection	;wreg free
  6999   000086                     
  7000                           ;interrupts.c: 40:             wall_detection_counter = 0;
  7001   000086  0E00               	movlw	0
  7002   000088  6E3D               	movwf	(_wall_detection_counter+1)^0,c
  7003   00008A  0E00               	movlw	0
  7004   00008C  6E3C               	movwf	_wall_detection_counter^0,c
  7005   00008E                     i2l3196:
  7006                           
  7007                           ;interrupts.c: 43:         TMR0H=0b11111101;
  7008   00008E  0EFD               	movlw	253
  7009   000090  6ED4               	movwf	212,c	;volatile
  7010   000092                     
  7011                           ;interrupts.c: 44:         TMR0L=0b10010000;
  7012   000092  0E90               	movlw	144
  7013   000094  6ED3               	movwf	211,c	;volatile
  7014   000096                     
  7015                           ;interrupts.c: 46:         PIR0bits.TMR0IF = 0;
  7016   000096  010E               	movlb	14	; () banked
  7017   000098  9B33               	bcf	51,5,b	;volatile
  7018   00009A                     i2l410:
  7019                           
  7020                           ; BSR set to: 14
  7021   00009A  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7022   00009C  0011               	retfie		f
  7023   00009E                     __end_of_HighISR:
  7024                           	callstack 0
  7025                           
  7026 ;; *************** function _set_wall_detection *****************
  7027 ;; Defined at:
  7028 ;;		line 258 in file "color.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  mode            2   11[COMRAM] unsigned int 
  7031 ;; Auto vars:     Size  Location     Type
  7032 ;;		None
  7033 ;; Return value:  Size  Location     Type
  7034 ;;                  1    wreg      void 
  7035 ;; Registers used:
  7036 ;;		wreg, status,2, status,0, cstack
  7037 ;; Tracked objects:
  7038 ;;		On entry : 0/0
  7039 ;;		On exit  : 0/0
  7040 ;;		Unchanged: 0/0
  7041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7044 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7045 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7046 ;;Total ram usage:        5 bytes
  7047 ;; Hardware stack levels used: 1
  7048 ;; Hardware stack levels required when called: 3
  7049 ;; This function calls:
  7050 ;;		i2_color_read_Clear
  7051 ;;		i2_set_led_color
  7052 ;; This function is called by:
  7053 ;;		_HighISR
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text41
  7058   001C80                     __ptext41:
  7059                           	callstack 0
  7060   001C80                     _set_wall_detection:
  7061                           	callstack 21
  7062   001C80  040C               	decf	set_wall_detection@mode^0,w,c
  7063   001C82  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7064   001C84  A4D8               	btfss	status,2,c
  7065   001C86  EF47  F00E         	goto	i2u206_41
  7066   001C8A  EF49  F00E         	goto	i2u206_40
  7067   001C8E                     i2u206_41:
  7068   001C8E  EF66  F00E         	goto	i2l2974
  7069   001C92                     i2u206_40:
  7070   001C92  0E00               	movlw	0
  7071   001C94  6E0E               	movwf	??_set_wall_detection^0,c
  7072   001C96  0E00               	movlw	0
  7073   001C98  6E0F               	movwf	(??_set_wall_detection+1)^0,c
  7074   001C9A  0E00               	movlw	0
  7075   001C9C  6E10               	movwf	(??_set_wall_detection+2)^0,c
  7076   001C9E  0E07               	movlw	7
  7077   001CA0  180E               	xorwf	??_set_wall_detection^0,w,c
  7078   001CA2  100F               	iorwf	(??_set_wall_detection+1)^0,w,c
  7079   001CA4  1010               	iorwf	(??_set_wall_detection+2)^0,w,c
  7080   001CA6  A4D8               	btfss	status,2,c
  7081   001CA8  EF58  F00E         	goto	i2u207_41
  7082   001CAC  EF5A  F00E         	goto	i2u207_40
  7083   001CB0                     i2u207_41:
  7084   001CB0  EF66  F00E         	goto	i2l2974
  7085   001CB4                     i2u207_40:
  7086   001CB4                     
  7087                           ;color.c: 263:         clear2 = color_read_Clear();
  7088   001CB4  EC0D  F00F         	call	i2_color_read_Clear	;wreg free
  7089   001CB8  C005  F046         	movff	?i2_color_read_Clear,_clear2
  7090   001CBC  C006  F047         	movff	?i2_color_read_Clear+1,_clear2+1
  7091   001CC0                     
  7092                           ;color.c: 264:         set_led_color(0b000);
  7093   001CC0  0E00               	movlw	0
  7094   001CC2  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7095   001CC4  0E00               	movlw	0
  7096   001CC6  6E01               	movwf	i2set_led_color@color^0,c
  7097   001CC8  ECC4  F00F         	call	i2_set_led_color	;wreg free
  7098   001CCC                     i2l2974:
  7099                           
  7100                           ;color.c: 266:     set_led_color(0b000);
  7101   001CCC  0E00               	movlw	0
  7102   001CCE  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7103   001CD0  0E00               	movlw	0
  7104   001CD2  6E01               	movwf	i2set_led_color@color^0,c
  7105   001CD4  ECC4  F00F         	call	i2_set_led_color	;wreg free
  7106   001CD8  0012               	return		;funcret
  7107   001CDA                     __end_of_set_wall_detection:
  7108                           	callstack 0
  7109                           
  7110 ;; *************** function i2_set_led_color *****************
  7111 ;; Defined at:
  7112 ;;		line 157 in file "color.c"
  7113 ;; Parameters:    Size  Location     Type
  7114 ;;  color           2    0[COMRAM] unsigned int 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;		None
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  1    wreg      void 
  7119 ;; Registers used:
  7120 ;;		None
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used: 1
  7132 ;; This function calls:
  7133 ;;		Nothing
  7134 ;; This function is called by:
  7135 ;;		_set_wall_detection
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           	psect	text42
  7140   001F88                     __ptext42:
  7141                           	callstack 0
  7142   001F88                     i2_set_led_color:
  7143                           	callstack 23
  7144   001F88                     
  7145                           ;color.c: 161:     if(color & 0b100){
  7146   001F88  A401               	btfss	i2set_led_color@color^0,2,c
  7147   001F8A  EFC9  F00F         	goto	i2u175_41
  7148   001F8E  EFCB  F00F         	goto	i2u175_40
  7149   001F92                     i2u175_41:
  7150   001F92  EFCE  F00F         	goto	i2l116
  7151   001F96                     i2u175_40:
  7152   001F96                     
  7153                           ;color.c: 162:         LATGbits.LATG1 = 1;
  7154   001F96  827F               	bsf	127,1,c	;volatile
  7155                           
  7156                           ;color.c: 163:     }else{
  7157   001F98  EFCF  F00F         	goto	i2l117
  7158   001F9C                     i2l116:
  7159                           
  7160                           ;color.c: 164:         LATGbits.LATG1 = 0;
  7161   001F9C  927F               	bcf	127,1,c	;volatile
  7162   001F9E                     i2l117:
  7163                           
  7164                           ;color.c: 166:     if(color & 0b010){
  7165   001F9E  A201               	btfss	i2set_led_color@color^0,1,c
  7166   001FA0  EFD4  F00F         	goto	i2u176_41
  7167   001FA4  EFD6  F00F         	goto	i2u176_40
  7168   001FA8                     i2u176_41:
  7169   001FA8  EFD9  F00F         	goto	i2l118
  7170   001FAC                     i2u176_40:
  7171   001FAC                     
  7172                           ;color.c: 167:         LATAbits.LATA4 = 1;
  7173   001FAC  8879               	bsf	121,4,c	;volatile
  7174                           
  7175                           ;color.c: 168:     }else{
  7176   001FAE  EFDA  F00F         	goto	i2l119
  7177   001FB2                     i2l118:
  7178                           
  7179                           ;color.c: 169:         LATAbits.LATA4 = 0;
  7180   001FB2  9879               	bcf	121,4,c	;volatile
  7181   001FB4                     i2l119:
  7182                           
  7183                           ;color.c: 171:     if(color & 0b001){
  7184   001FB4  A001               	btfss	i2set_led_color@color^0,0,c
  7185   001FB6  EFDF  F00F         	goto	i2u177_41
  7186   001FBA  EFE1  F00F         	goto	i2u177_40
  7187   001FBE                     i2u177_41:
  7188   001FBE  EFE4  F00F         	goto	i2l120
  7189   001FC2                     i2u177_40:
  7190   001FC2                     
  7191                           ;color.c: 172:         LATFbits.LATF7 = 1;
  7192   001FC2  8E7E               	bsf	126,7,c	;volatile
  7193                           
  7194                           ;color.c: 173:     }else{
  7195   001FC4  EFE5  F00F         	goto	i2l122
  7196   001FC8                     i2l120:
  7197                           
  7198                           ;color.c: 174:         LATFbits.LATF7 = 0;
  7199   001FC8  9E7E               	bcf	126,7,c	;volatile
  7200   001FCA                     i2l122:
  7201   001FCA  0012               	return		;funcret
  7202   001FCC                     __end_ofi2_set_led_color:
  7203                           	callstack 0
  7204                           
  7205 ;; *************** function i2_color_read_Clear *****************
  7206 ;; Defined at:
  7207 ;;		line 135 in file "color.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  tmp             2    9[COMRAM] unsigned int 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  2    4[COMRAM] unsigned int 
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7221 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7222 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7223 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7224 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7225 ;;Total ram usage:        7 bytes
  7226 ;; Hardware stack levels used: 1
  7227 ;; Hardware stack levels required when called: 2
  7228 ;; This function calls:
  7229 ;;		i2_I2C_2_Master_Read
  7230 ;;		i2_I2C_2_Master_RepStart
  7231 ;;		i2_I2C_2_Master_Start
  7232 ;;		i2_I2C_2_Master_Stop
  7233 ;;		i2_I2C_2_Master_Write
  7234 ;; This function is called by:
  7235 ;;		_set_wall_detection
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text43
  7240   001E1A                     __ptext43:
  7241                           	callstack 0
  7242   001E1A                     i2_color_read_Clear:
  7243                           	callstack 21
  7244   001E1A                     
  7245                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  7246   001E1A  ECDB  F010         	call	i2_I2C_2_Master_Start	;wreg free
  7247                           
  7248                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  7249   001E1E  0E52               	movlw	82
  7250   001E20  ECBC  F010         	call	i2_I2C_2_Master_Write
  7251                           
  7252                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  7253   001E24  0EB4               	movlw	180
  7254   001E26  ECBC  F010         	call	i2_I2C_2_Master_Write
  7255                           
  7256                           ;color.c: 141:  I2C_2_Master_RepStart();
  7257   001E2A  ECE0  F010         	call	i2_I2C_2_Master_RepStart	;wreg free
  7258                           
  7259                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  7260   001E2E  0E53               	movlw	83
  7261   001E30  ECBC  F010         	call	i2_I2C_2_Master_Write
  7262                           
  7263                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  7264   001E34  0E01               	movlw	1
  7265   001E36  EC07  F010         	call	i2_I2C_2_Master_Read
  7266   001E3A  6E07               	movwf	??i2_color_read_Clear^0,c
  7267   001E3C  5007               	movf	??i2_color_read_Clear^0,w,c
  7268   001E3E  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7269   001E40  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7270                           
  7271                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7272   001E42  0E00               	movlw	0
  7273   001E44  EC07  F010         	call	i2_I2C_2_Master_Read
  7274   001E48  6E07               	movwf	??i2_color_read_Clear^0,c
  7275   001E4A  5007               	movf	??i2_color_read_Clear^0,w,c
  7276   001E4C  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7277   001E4E  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7278   001E50  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7279   001E52  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7280   001E54  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7281   001E56  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7282   001E58  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7283   001E5A  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7284                           
  7285                           ;color.c: 145:  I2C_2_Master_Stop();
  7286   001E5C  ECD6  F010         	call	i2_I2C_2_Master_Stop	;wreg free
  7287   001E60                     
  7288                           ;color.c: 146:  return tmp;
  7289   001E60  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7290   001E64  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7291   001E68  0012               	return		;funcret
  7292   001E6A                     __end_ofi2_color_read_Clear:
  7293                           	callstack 0
  7294                           
  7295 ;; *************** function i2_I2C_2_Master_Write *****************
  7296 ;; Defined at:
  7297 ;;		line 45 in file "i2c.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  data_byte       1    wreg     unsigned char 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;  data_byte       1    1[COMRAM] unsigned char 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7314 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7315 ;;Total ram usage:        1 bytes
  7316 ;; Hardware stack levels used: 1
  7317 ;; Hardware stack levels required when called: 1
  7318 ;; This function calls:
  7319 ;;		i2_I2C_2_Master_Idle
  7320 ;; This function is called by:
  7321 ;;		i2_color_read_Clear
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text44
  7326   002178                     __ptext44:
  7327                           	callstack 0
  7328   002178                     i2_I2C_2_Master_Write:
  7329                           	callstack 21
  7330                           
  7331                           ;incstack = 0
  7332                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7333   002178  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7334   00217A                     
  7335                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7336   00217A  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7337   00217E                     
  7338                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7339   00217E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7340   002182  0012               	return		;funcret
  7341   002184                     __end_ofi2_I2C_2_Master_Write:
  7342                           	callstack 0
  7343                           
  7344 ;; *************** function i2_I2C_2_Master_Stop *****************
  7345 ;; Defined at:
  7346 ;;		line 39 in file "i2c.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;		None
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      void 
  7353 ;; Registers used:
  7354 ;;		wreg, status,2, status,0, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7364 ;;Total ram usage:        0 bytes
  7365 ;; Hardware stack levels used: 1
  7366 ;; Hardware stack levels required when called: 1
  7367 ;; This function calls:
  7368 ;;		i2_I2C_2_Master_Idle
  7369 ;; This function is called by:
  7370 ;;		i2_color_read_Clear
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text45
  7375   0021AC                     __ptext45:
  7376                           	callstack 0
  7377   0021AC                     i2_I2C_2_Master_Stop:
  7378                           	callstack 21
  7379   0021AC                     
  7380                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7381   0021AC  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7382   0021B0                     
  7383                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7384   0021B0  010E               	movlb	14	; () banked
  7385   0021B2  85DA               	bsf	218,2,b	;volatile
  7386   0021B4                     
  7387                           ; BSR set to: 14
  7388   0021B4  0012               	return		;funcret
  7389   0021B6                     __end_ofi2_I2C_2_Master_Stop:
  7390                           	callstack 0
  7391                           
  7392 ;; *************** function i2_I2C_2_Master_Start *****************
  7393 ;; Defined at:
  7394 ;;		line 27 in file "i2c.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;		None
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, status,2, status,0, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7412 ;;Total ram usage:        0 bytes
  7413 ;; Hardware stack levels used: 1
  7414 ;; Hardware stack levels required when called: 1
  7415 ;; This function calls:
  7416 ;;		i2_I2C_2_Master_Idle
  7417 ;; This function is called by:
  7418 ;;		i2_color_read_Clear
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text46
  7423   0021B6                     __ptext46:
  7424                           	callstack 0
  7425   0021B6                     i2_I2C_2_Master_Start:
  7426                           	callstack 21
  7427   0021B6                     
  7428                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7429   0021B6  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7430   0021BA                     
  7431                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7432   0021BA  010E               	movlb	14	; () banked
  7433   0021BC  81DA               	bsf	218,0,b	;volatile
  7434   0021BE                     
  7435                           ; BSR set to: 14
  7436   0021BE  0012               	return		;funcret
  7437   0021C0                     __end_ofi2_I2C_2_Master_Start:
  7438                           	callstack 0
  7439                           
  7440 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7441 ;; Defined at:
  7442 ;;		line 33 in file "i2c.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;		None
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;		None
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      void 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7460 ;;Total ram usage:        0 bytes
  7461 ;; Hardware stack levels used: 1
  7462 ;; Hardware stack levels required when called: 1
  7463 ;; This function calls:
  7464 ;;		i2_I2C_2_Master_Idle
  7465 ;; This function is called by:
  7466 ;;		i2_color_read_Clear
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text47
  7471   0021C0                     __ptext47:
  7472                           	callstack 0
  7473   0021C0                     i2_I2C_2_Master_RepStart:
  7474                           	callstack 21
  7475   0021C0                     
  7476                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7477   0021C0  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7478   0021C4                     
  7479                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7480   0021C4  010E               	movlb	14	; () banked
  7481   0021C6  83DA               	bsf	218,1,b	;volatile
  7482   0021C8                     
  7483                           ; BSR set to: 14
  7484   0021C8  0012               	return		;funcret
  7485   0021CA                     __end_ofi2_I2C_2_Master_RepStart:
  7486                           	callstack 0
  7487                           
  7488 ;; *************** function i2_I2C_2_Master_Read *****************
  7489 ;; Defined at:
  7490 ;;		line 51 in file "i2c.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  ack             1    wreg     unsigned char 
  7493 ;; Auto vars:     Size  Location     Type
  7494 ;;  ack             1    2[COMRAM] unsigned char 
  7495 ;;  tmp             1    3[COMRAM] unsigned char 
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      unsigned char 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7508 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7509 ;;Total ram usage:        3 bytes
  7510 ;; Hardware stack levels used: 1
  7511 ;; Hardware stack levels required when called: 1
  7512 ;; This function calls:
  7513 ;;		i2_I2C_2_Master_Idle
  7514 ;; This function is called by:
  7515 ;;		i2_color_read_Clear
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text48
  7520   00200E                     __ptext48:
  7521                           	callstack 0
  7522   00200E                     i2_I2C_2_Master_Read:
  7523                           	callstack 21
  7524                           
  7525                           ; BSR set to: 14
  7526                           ;incstack = 0
  7527                           ;i2I2C_2_Master_Read@ack stored from wreg
  7528   00200E  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7529   002010                     
  7530                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7531   002010  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7532   002014                     
  7533                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7534   002014  010E               	movlb	14	; () banked
  7535   002016  87DA               	bsf	218,3,b	;volatile
  7536                           
  7537                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7538   002018  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7539   00201C                     
  7540                           ;i2c.c: 57:   tmp = SSP2BUF;
  7541   00201C  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7542                           
  7543                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7544   002020  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7545   002024                     
  7546                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7547   002024  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7548   002026  B4D8               	btfsc	status,2,c
  7549   002028  EF18  F010         	goto	i2u153_41
  7550   00202C  EF1C  F010         	goto	i2u153_40
  7551   002030                     i2u153_41:
  7552   002030  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7553   002032  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7554   002034  EF1D  F010         	goto	i2u154_48
  7555   002038                     i2u153_40:
  7556   002038  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7557   00203A                     i2u154_48:
  7558   00203A  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7559   00203C  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7560   00203E  010E               	movlb	14	; () banked
  7561   002040  51DA               	movf	218,w,b	;volatile
  7562   002042  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7563   002044  0BDF               	andlw	-33
  7564   002046  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7565   002048  6FDA               	movwf	218,b	;volatile
  7566   00204A                     
  7567                           ; BSR set to: 14
  7568                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7569   00204A  89DA               	bsf	218,4,b	;volatile
  7570   00204C                     
  7571                           ; BSR set to: 14
  7572                           ;i2c.c: 61:   return tmp;
  7573   00204C  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7574   00204E                     
  7575                           ; BSR set to: 14
  7576   00204E  0012               	return		;funcret
  7577   002050                     __end_ofi2_I2C_2_Master_Read:
  7578                           	callstack 0
  7579                           
  7580 ;; *************** function i2_I2C_2_Master_Idle *****************
  7581 ;; Defined at:
  7582 ;;		line 22 in file "i2c.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7598 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7599 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7600 ;;Total ram usage:        1 bytes
  7601 ;; Hardware stack levels used: 1
  7602 ;; This function calls:
  7603 ;;		Nothing
  7604 ;; This function is called by:
  7605 ;;		i2_I2C_2_Master_Start
  7606 ;;		i2_I2C_2_Master_RepStart
  7607 ;;		i2_I2C_2_Master_Stop
  7608 ;;		i2_I2C_2_Master_Write
  7609 ;;		i2_I2C_2_Master_Read
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text49
  7614   0020D2                     __ptext49:
  7615                           	callstack 0
  7616   0020D2                     i2_I2C_2_Master_Idle:
  7617                           	callstack 21
  7618   0020D2                     i2l359:
  7619   0020D2  010E               	movlb	14	; () banked
  7620   0020D4  B5D8               	btfsc	216,2,b	;volatile
  7621   0020D6  EF6F  F010         	goto	i2u146_41
  7622   0020DA  EF71  F010         	goto	i2u146_40
  7623   0020DE                     i2u146_41:
  7624   0020DE  EF69  F010         	goto	i2l359
  7625   0020E2                     i2u146_40:
  7626   0020E2                     
  7627                           ; BSR set to: 14
  7628   0020E2  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7629   0020E6  0E1F               	movlw	31
  7630   0020E8  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7631   0020EA  A4D8               	btfss	status,2,c
  7632   0020EC  EF7A  F010         	goto	i2u147_41
  7633   0020F0  EF7C  F010         	goto	i2u147_40
  7634   0020F4                     i2u147_41:
  7635   0020F4  EF69  F010         	goto	i2l359
  7636   0020F8                     i2u147_40:
  7637   0020F8                     
  7638                           ; BSR set to: 14
  7639   0020F8  0012               	return		;funcret
  7640   0020FA                     __end_ofi2_I2C_2_Master_Idle:
  7641                           	callstack 0
  7642                           
  7643 ;; *************** function _increment_seconds *****************
  7644 ;; Defined at:
  7645 ;;		line 297 in file "dc_motor.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      void 
  7652 ;; Registers used:
  7653 ;;		status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7663 ;;Total ram usage:        0 bytes
  7664 ;; Hardware stack levels used: 1
  7665 ;; This function calls:
  7666 ;;		Nothing
  7667 ;; This function is called by:
  7668 ;;		_HighISR
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text50
  7673   0021CA                     __ptext50:
  7674                           	callstack 0
  7675   0021CA                     _increment_seconds:
  7676                           	callstack 24
  7677   0021CA                     
  7678                           ;dc_motor.c: 299:     seconds += 1;
  7679   0021CA  4A44               	infsnz	_seconds^0,f,c
  7680   0021CC  2A45               	incf	(_seconds+1)^0,f,c
  7681   0021CE  0012               	return		;funcret
  7682   0021D0                     __end_of_increment_seconds:
  7683                           	callstack 0
  7684   000000                     
  7685                           	psect	rparam
  7686   000000                     
  7687                           	psect	temp
  7688   00004E                     btemp:
  7689                           	callstack 0
  7690   00004E                     	ds	1
  7691   000000                     int$flags	set	btemp
  7692   000000                     wtemp8	set	btemp+1
  7693   000000                     ttemp5	set	btemp+1
  7694   000000                     ttemp6	set	btemp+4
  7695   000000                     ttemp7	set	btemp+8
  7696                           
  7697                           	psect	idloc
  7698                           
  7699                           ;Config register IDLOC0 @ 0x200000
  7700                           ;	unspecified, using default values
  7701   200000                     	org	2097152
  7702   200000  0FFF               	dw	4095
  7703                           
  7704                           ;Config register IDLOC1 @ 0x200002
  7705                           ;	unspecified, using default values
  7706   200002                     	org	2097154
  7707   200002  0FFF               	dw	4095
  7708                           
  7709                           ;Config register IDLOC2 @ 0x200004
  7710                           ;	unspecified, using default values
  7711   200004                     	org	2097156
  7712   200004  0FFF               	dw	4095
  7713                           
  7714                           ;Config register IDLOC3 @ 0x200006
  7715                           ;	unspecified, using default values
  7716   200006                     	org	2097158
  7717   200006  0FFF               	dw	4095
  7718                           
  7719                           ;Config register IDLOC4 @ 0x200008
  7720                           ;	unspecified, using default values
  7721   200008                     	org	2097160
  7722   200008  0FFF               	dw	4095
  7723                           
  7724                           ;Config register IDLOC5 @ 0x20000A
  7725                           ;	unspecified, using default values
  7726   20000A                     	org	2097162
  7727   20000A  0FFF               	dw	4095
  7728                           
  7729                           ;Config register IDLOC6 @ 0x20000C
  7730                           ;	unspecified, using default values
  7731   20000C                     	org	2097164
  7732   20000C  0FFF               	dw	4095
  7733                           
  7734                           ;Config register IDLOC7 @ 0x20000E
  7735                           ;	unspecified, using default values
  7736   20000E                     	org	2097166
  7737   20000E  0FFF               	dw	4095
  7738                           
  7739                           	psect	config
  7740                           
  7741                           ;Config register CONFIG1L @ 0x300000
  7742                           ;	External Oscillator mode Selection bits
  7743                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7744                           ;	Power-up default value for COSC bits
  7745                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7746   300000                     	org	3145728
  7747   300000  AA                 	db	170
  7748                           
  7749                           ;Config register CONFIG1H @ 0x300001
  7750                           ;	unspecified, using default values
  7751                           ;	Clock Out Enable bit
  7752                           ;	CLKOUTEN = 0x1, unprogrammed default
  7753                           ;	Clock Switch Enable bit
  7754                           ;	CSWEN = 0x1, unprogrammed default
  7755                           ;	Fail-Safe Clock Monitor Enable bit
  7756                           ;	FCMEN = 0x1, unprogrammed default
  7757   300001                     	org	3145729
  7758   300001  FF                 	db	255
  7759                           
  7760                           ;Config register CONFIG2L @ 0x300002
  7761                           ;	unspecified, using default values
  7762                           ;	Master Clear Enable bit
  7763                           ;	MCLRE = 0x1, unprogrammed default
  7764                           ;	Power-up Timer Enable bit
  7765                           ;	PWRTE = 0x1, unprogrammed default
  7766                           ;	Low-power BOR enable bit
  7767                           ;	LPBOREN = 0x1, unprogrammed default
  7768                           ;	Brown-out Reset Enable bits
  7769                           ;	BOREN = 0x3, unprogrammed default
  7770   300002                     	org	3145730
  7771   300002  FF                 	db	255
  7772                           
  7773                           ;Config register CONFIG2H @ 0x300003
  7774                           ;	unspecified, using default values
  7775                           ;	Brown Out Reset Voltage selection bits
  7776                           ;	BORV = 0x3, unprogrammed default
  7777                           ;	ZCD Disable bit
  7778                           ;	ZCD = 0x1, unprogrammed default
  7779                           ;	PPSLOCK bit One-Way Set Enable bit
  7780                           ;	PPS1WAY = 0x1, unprogrammed default
  7781                           ;	Stack Full/Underflow Reset Enable bit
  7782                           ;	STVREN = 0x1, unprogrammed default
  7783                           ;	Debugger Enable bit
  7784                           ;	DEBUG = 0x1, unprogrammed default
  7785                           ;	Extended Instruction Set Enable bit
  7786                           ;	XINST = 0x1, unprogrammed default
  7787   300003                     	org	3145731
  7788   300003  FF                 	db	255
  7789                           
  7790                           ;Config register CONFIG3L @ 0x300004
  7791                           ;	WDT Period Select bits
  7792                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7793                           ;	WDT operating mode
  7794                           ;	WDTE = OFF, WDT Disabled
  7795   300004                     	org	3145732
  7796   300004  9F                 	db	159
  7797                           
  7798                           ;Config register CONFIG3H @ 0x300005
  7799                           ;	unspecified, using default values
  7800                           ;	WDT Window Select bits
  7801                           ;	WDTCWS = 0x7, unprogrammed default
  7802                           ;	WDT input clock selector
  7803                           ;	WDTCCS = 0x7, unprogrammed default
  7804   300005                     	org	3145733
  7805   300005  FF                 	db	255
  7806                           
  7807                           ;Config register CONFIG4L @ 0x300006
  7808                           ;	unspecified, using default values
  7809                           ;	Write Protection Block 0
  7810                           ;	WRT0 = 0x1, unprogrammed default
  7811                           ;	Write Protection Block 1
  7812                           ;	WRT1 = 0x1, unprogrammed default
  7813                           ;	Write Protection Block 2
  7814                           ;	WRT2 = 0x1, unprogrammed default
  7815                           ;	Write Protection Block 3
  7816                           ;	WRT3 = 0x1, unprogrammed default
  7817                           ;	Write Protection Block 3
  7818                           ;	WRT4 = 0x1, unprogrammed default
  7819                           ;	Write Protection Block 3
  7820                           ;	WRT5 = 0x1, unprogrammed default
  7821                           ;	Write Protection Block 3
  7822                           ;	WRT6 = 0x1, unprogrammed default
  7823                           ;	Write Protection Block 3
  7824                           ;	WRT7 = 0x1, unprogrammed default
  7825   300006                     	org	3145734
  7826   300006  FF                 	db	255
  7827                           
  7828                           ;Config register CONFIG4H @ 0x300007
  7829                           ;	unspecified, using default values
  7830                           ;	Configuration Register Write Protection bit
  7831                           ;	WRTC = 0x1, unprogrammed default
  7832                           ;	Boot Block Write Protection bit
  7833                           ;	WRTB = 0x1, unprogrammed default
  7834                           ;	Data EEPROM Write Protection bit
  7835                           ;	WRTD = 0x1, unprogrammed default
  7836                           ;	Scanner Enable bit
  7837                           ;	SCANE = 0x1, unprogrammed default
  7838                           ;	Low Voltage Programming Enable bit
  7839                           ;	LVP = 0x1, unprogrammed default
  7840   300007                     	org	3145735
  7841   300007  FF                 	db	255
  7842                           
  7843                           ;Config register CONFIG5L @ 0x300008
  7844                           ;	unspecified, using default values
  7845                           ;	UserNVM Program Memory Code Protection bit
  7846                           ;	CP = 0x1, unprogrammed default
  7847                           ;	DataNVM Memory Code Protection bit
  7848                           ;	CPD = 0x1, unprogrammed default
  7849   300008                     	org	3145736
  7850   300008  FF                 	db	255
  7851                           
  7852                           ;Config register CONFIG5H @ 0x300009
  7853                           ;	unspecified, using default values
  7854   300009                     	org	3145737
  7855   300009  FF                 	db	255
  7856                           
  7857                           ;Config register CONFIG6L @ 0x30000A
  7858                           ;	unspecified, using default values
  7859                           ;	Table Read Protection Block 0
  7860                           ;	EBTR0 = 0x1, unprogrammed default
  7861                           ;	Table Read Protection Block 1
  7862                           ;	EBTR1 = 0x1, unprogrammed default
  7863                           ;	Table Read Protection Block 2
  7864                           ;	EBTR2 = 0x1, unprogrammed default
  7865                           ;	Table Read Protection Block 3
  7866                           ;	EBTR3 = 0x1, unprogrammed default
  7867                           ;	Table Read Protection Block 4
  7868                           ;	EBTR4 = 0x1, unprogrammed default
  7869                           ;	Table Read Protection Block 5
  7870                           ;	EBTR5 = 0x1, unprogrammed default
  7871                           ;	Table Read Protection Block 6
  7872                           ;	EBTR6 = 0x1, unprogrammed default
  7873                           ;	Table Read Protection Block 7
  7874                           ;	EBTR7 = 0x1, unprogrammed default
  7875   30000A                     	org	3145738
  7876   30000A  FF                 	db	255
  7877                           
  7878                           ;Config register CONFIG6H @ 0x30000B
  7879                           ;	unspecified, using default values
  7880                           ;	Boot Block Table Read Protection bit
  7881                           ;	EBTRB = 0x1, unprogrammed default
  7882   30000B                     	org	3145739
  7883   30000B  FF                 	db	255
  7884                           tosu	equ	0xFFF
  7885                           tosh	equ	0xFFE
  7886                           tosl	equ	0xFFD
  7887                           stkptr	equ	0xFFC
  7888                           pclatu	equ	0xFFB
  7889                           pclath	equ	0xFFA
  7890                           pcl	equ	0xFF9
  7891                           tblptru	equ	0xFF8
  7892                           tblptrh	equ	0xFF7
  7893                           tblptrl	equ	0xFF6
  7894                           tablat	equ	0xFF5
  7895                           prodh	equ	0xFF4
  7896                           prodl	equ	0xFF3
  7897                           indf0	equ	0xFEF
  7898                           postinc0	equ	0xFEE
  7899                           postdec0	equ	0xFED
  7900                           preinc0	equ	0xFEC
  7901                           plusw0	equ	0xFEB
  7902                           fsr0h	equ	0xFEA
  7903                           fsr0l	equ	0xFE9
  7904                           wreg	equ	0xFE8
  7905                           indf1	equ	0xFE7
  7906                           postinc1	equ	0xFE6
  7907                           postdec1	equ	0xFE5
  7908                           preinc1	equ	0xFE4
  7909                           plusw1	equ	0xFE3
  7910                           fsr1h	equ	0xFE2
  7911                           fsr1l	equ	0xFE1
  7912                           bsr	equ	0xFE0
  7913                           indf2	equ	0xFDF
  7914                           postinc2	equ	0xFDE
  7915                           postdec2	equ	0xFDD
  7916                           preinc2	equ	0xFDC
  7917                           plusw2	equ	0xFDB
  7918                           fsr2h	equ	0xFDA
  7919                           fsr2l	equ	0xFD9
  7920                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        124
    BSS         346
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      77
    BANK0           160     62     146
    BANK1           256     22     190
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1028DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1028DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnRight
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  122034
                                             57 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43468
                                             45 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             22 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8164
                                             50 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             22 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             28 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             35 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5490
                                             37 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             18 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    2010
                                             27 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3117
                                             29 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1518
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             17 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             17 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44407
                                             45 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    5873
                                             35 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             35 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    5873
                                             35 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             35 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             35 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             35 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6178
                                             35 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             29 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             22 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     431
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   5     3      2     431
                                             11 COMRAM     5     3      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     144
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      BE       7       74.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      92       5       91.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      4D       1       81.9%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     265      60        0.0%
DATA                 0      0     265       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Dec 13 15:09:05 2022

                 _color_read_Red 1CDA               RobotMovement@color 002E  
                _color_read_Blue 1DCA                               l71 14DC  
                             l81 1520                               l75 14F8  
                             l92 1E18                               l77 152E  
                             l86 213E                               l78 150E  
                             l95 1D78                               l89 1D28  
                             l98 1DC8              ___wmul@multiplicand 0013  
               _color_read_Clear 1D7A                 ?_calibrate_black 0001  
               _color_read_Green 1D2A              RobotMovement@motorL 0030  
            RobotMovement@motorR 0032                ??_Interrupts_init 0011  
                            l120 1F84                              l113 0EA2  
                            l122 1F86                              l116 1F58  
                            l117 1F5A                              l118 1F6E  
                            l222 19FA                              l119 1F70  
                            l151 1828                              l143 098C  
                            l232 1EB2                              l241 1168  
                            l313 1F42                              l145 0994  
                            l321 0B4A                              l250 12B8  
                            l306 05E6                              l148 13F6  
                            l316 0B64                              l229 100E  
                            l309 218C                              l157 1C24  
                            l511 18CC                              l264 1656  
                            l504 18BC                              l273 1AE2  
                            l257 177E                              l329 0B98  
                            l362 20D0                              l371 2196  
                            l267 1C7E                              l356 20A8  
                            l293 02CE                              l365 21A0  
                            l294 0310                              l374 216A  
                            l279 1A6E                              l359 20AA  
                            l368 21AA                              l377 200C  
                            l298 0452                              l474 215E  
                            l458 0D2C                              l299 0494  
                            l396 2176                              l477 211E  
                            l488 1BB0                              l489 1BC0  
                            l975 1B56                              l968 1B4E  
                            _RGB 00E6                 ?_calibrate_white 0001  
                            wreg 000FE8                             l4000 05F4  
                           l4010 065C                             l4002 060A  
                           l4100 1C26                             l4020 06A0  
                           l4012 0672                             l4004 061C  
                           l4110 1C66                             l4102 1C2E  
                           l4030 076E                             l4022 06C0  
                           l4014 0684                             l4006 0628  
                           l4200 052A                             l4120 00F8  
                           l4112 1C72                             l4104 1C3E  
                           l4040 0830                             l4032 0782  
                           l4024 06D4                             l4016 068C  
                           l4008 0650                             l4202 053E  
                           l4130 0156                             l4122 0112  
                           l4114 00A2                             l4106 1C4E  
                           l4042 089A                             l4034 07EC  
                           l4026 073E                             l4018 0694  
                           l4220 05AC                             l4204 0558  
                           l4140 0176                             l4132 015A  
                           l4124 0116                             l4116 00D2  
                           l3500 218E                             l4108 1C5A  
                           l4060 0962                             l4044 08AA  
                           l4036 07FC                             l4028 074E  
                           l4300 0BC6                             l4214 0578  
                           l4222 05B4                             l4206 055C  
                           l4142 018A                             l4134 016E  
                           l4150 01C8                             l4126 0128  
                           l4118 00E4                             l4230 1F18  
                           l3510 1FD2                             l3502 2192  
                           l4062 0972                             l4054 08EC  
                           l4046 08DA                             l4038 081C  
                           l4070 1BE6                             l4310 0BE6  
                           l4302 0BCE                             l4224 05CA  
                           l4216 058C                             l4208 0570  
                           l4160 028E                             l4152 01DC  
                           l4144 01A4                             l4128 013C  
                           l4232 1F3E                             l3600 208A  
                           l3512 1FDA                             l3504 21A2  
                           l4064 0976                             l4056 091A  
                           l4048 08E4                             l4080 197C  
                           l4240 09D8                             l4320 0C1A  
                           l4312 0BEA                             l4304 0BD6  
                           l3530 1AEC                             l3522 20FA  
                           l4218 0590                             l4162 02B4  
                           l4154 0220                             l4170 034C  
                           l4146 01A8                             l3602 2090  
                           l3514 1FE2                             l3506 21A6  
                           l3610 2122                             l4058 094A  
                           l4226 2184                             l4074 1BF2  
                           l4066 1BC2                             l4090 19E0  
                           l4082 19A6                             l4250 0A80  
                           l4242 0A00                             l4234 0996  
                           l4330 0C68                             l4322 0C2E  
                           l4314 0BF2                             l4306 0BDE  
                           l3540 1B22                             l3532 1AFE  
                           l3524 2116                             l4180 0412  
                           l4172 0360                             l4164 02F6  
                           l4156 0252                             l4148 01AC  
                           l4228 1EFC                             l3604 2092  
                           l3516 2008                             l3508 1FCE  
                           l3620 17C0                             l3612 1780  
                           l4068 1BD4                             l4092 19E2  
                           l4084 19CA                             l4260 0B2A  
                           l4252 0A98                             l4244 0A18  
                           l4236 099A                             l4340 0CD4  
                           l4332 0C7C                             l4324 0C3A  
                           l4316 0BFA                             l4308 0BE2  
                           l4270 216C                             l3542 1B38  
                           l3534 1B06                             l3710 1060  
                           l4182 0438                             l4174 03A4  
                           l4190 04D0                             l4166 032A  
                           l4158 0286                             l3606 2094  
                           l3518 200A                             l3550 1CDA  
                           l3630 12BA                             l3622 17E8  
                           l3614 178C                             l4094 19EC  
                           l4086 19D4                             l4078 196C  
                           l4254 0AC8                             l4246 0A40  
                           l4262 0B4A                             l4238 09C0  
                           l4334 0C88                             l4326 0C50  
                           l4342 0D00                             l4318 0C02  
                           l3544 1B40                             l3536 1B0E  
                           l3528 1AE4                             l3720 10B4  
                           l3712 106C                             l3704 1028  
                           l3800 1658                             l4192 04E4  
                           l4184 047A                             l4176 03D6  
                           l4168 032E                             l4272 2140  
                           l3608 2096                             l3552 1D20  
                           l3640 1322                             l3632 12C6  
                           l3624 17F4                             l3616 17A2  
                           l4096 19EE                             l4088 19D6  
                           l4264 0B5E                             l4256 0AF6  
                           l4248 0A58                             l4344 0D14  
                           l4336 0CA4                             l4328 0C64  
                           l4280 0B9A                             l3546 1B42  
                           l3538 1B1C                             l3730 10E8  
                           l3714 1078                             l3706 1048  
                           l3810 168C                             l4194 04F8  
                           l4186 04AE                             l4178 040A  
                           l4274 2148                             l3490 20BA  
                           l3570 1DC0                             l3562 1D2A  
                           l3650 1384                             l3642 132E  
                           l3634 12DC                             l3626 180A  
                           l3618 17B4                             l4098 19F8  
                           l4266 0B7E                             l4258 0B0E  
                           l4338 0CC0                             l4290 0BB2  
                           l4282 0B9E                             l3548 1B48  
                           l3900 1ACC                             l3740 112C  
                           l3732 10F4                             l3716 1090  
                           l3708 1054                             l3820 16D0  
                           l3812 1698                             l4196 0512  
                           l4188 04B2                             l4276 215A  
                           l3492 2198                             l3556 1DCA  
                           l3564 1D70                             l3580 1F7E  
                           l3652 1390                             l3644 1344  
                           l3636 12EE                             l3628 181C  
                           l3660 0D34                             l4268 0B90  
                           l4292 0BB6                             l4284 0BA2  
                           l3590 0F2C                             l3582 0EA4  
                           l3910 1A40                             l3902 19FC  
                           l3742 1148                             l3734 1100  
                           l3726 10BC                             l3718 1098  
                           l3830 1714                             l3822 16EC  
                           l3814 16A4                             l3806 1660  
                           l4198 0516                             l4278 215C  
                           l3494 219C                             l3558 1E10  
                           l3574 1F44                             l3654 13A6  
                           l3646 1356                             l3638 12FA  
                           l3670 0DCC                             l3662 0D52  
                           l4294 0BB8                             l4286 0BAE  
                           l3592 0F6E                             l3584 0EC0  
                           l3912 1A4C                             l3904 1A08  
                           l3744 114C                             l3736 110C  
                           l3728 10DC                             l3840 175A  
                           l3832 1720                             l3816 16B0  
                           l3808 1680                             l3760 119A  
                           l3752 1172                             l3488 20AA  
                           l3496 2162                             l3568 1D7A  
                           l3576 1F52                             l3656 13BE  
                           l3648 1378                             l3920 1B76  
                           l3680 0E46                             l3672 0DE4  
                           l3664 0D70                             l4296 0BBE  
                           l4288 0BAE                             l3594 0F8A  
                           l3586 0F14                             l3906 1A28  
                           l3914 1A58                             l3690 1E9A  
                           l3738 1124                             l3842 1762  
                           l3834 172C                             l3818 16C8  
                           l3770 11E2                             l3762 11A6  
                           l3746 116A                             l3850 1538  
                           l3498 2166                             l3578 1F68  
                           l3658 13DA                             l3930 1850  
                           l3922 1B86                             l3674 0E0A  
                           l3666 0D8A                             l4298 0BC2  
                           l3596 0FCE                             l3588 0F28  
                           l3908 1A34                             l3684 1E6A  
                           l3692 1010                             l3836 1738  
                           l3828 16F4                             l3780 120E  
                           l3772 11EA                             l3764 11B2  
                           l3860 1588                             l3852 1558  
                           l3844 1530                             l3940 189A  
                           l3932 1858                             l3924 1B90  
                           l3916 1B58                             l3676 0E26  
                           l3668 0DB0                             l3686 1E82  
                           l3838 1744                             l3790 125E  
                           l3782 122E                             l3774 1206  
                           l3766 11BE                             l3758 117A  
                           l3862 15A0                             l3854 1564  
                           l3598 2080                             l3950 13FC  
                           l3942 18AA                             l3934 1864  
                           l3926 182A                             l3918 1B68  
                           l3678 0E3E                             l3688 1E8E  
                           l3792 1274                             l3784 123A  
                           l3768 11CA                             l3880 1610  
                           l3872 15CC                             l3864 15A8  
                           l3856 1570                             l3960 142C  
                           l3952 1406                             l3944 18AC  
                           l3936 1872                             l3928 183A  
                           l3890 1A7C                             l3698 1020  
                           l3794 127C                             l3786 1246  
                           l3882 161C                             l3874 15EC  
                           l3866 15C4                             l3858 157C  
                           l3970 1466                             l3962 142E  
                           l3954 1416                             l3946 18B6  
                           l3938 187C                             l3892 1A9C  
                           l3796 1298                             l3788 1252  
                           l3884 1632                             l3876 15F8  
                           l3980 14C0                             l3972 1478  
                           l3964 1430                             l3956 1420  
                           l3948 13F8                             l3894 1AA8  
                           l3798 129C                             l3886 163A  
                           l3878 1604                             l3990 14EA  
                           l3982 14D2                             l3974 148A  
                           l3966 1442                             l3958 142A  
                           l3896 1AB4                             l3888 1A70  
                           l3984 14D4                             l3976 149C  
                           l3968 1454                             l3898 1AC0  
                           l3994 150A                             l3986 14D8  
                           l3978 14AE                             l3996 151C  
                           l3988 14DA                             l3998 05E8  
                           u3000 15C4                             u3001 15C0  
                           u3010 1656                             u3011 1652  
                           u3020 1AE2                             u3021 1ADE  
                           u3101 144C                             u3030 1A6E  
                           u3031 1A6A                             u3111 145E  
                           u3200 1506                             u3040 1B76  
                           u3201 1502                             u3121 1470  
                           u3041 1B72                             u3210 151C  
                           u3050 1BB0                             u3211 1518  
                           u3131 1482                             u3051 1BAC  
                           u3220 152E                             u3060 1850  
                           u3221 152A                             u3141 1494  
                           u3061 184C                             u3301 0936  
                           u3070 1872                             u3310 0962  
                           u3230 06C0                             u3151 14A6  
                           u3071 186E                             u3311 095E  
                           u3231 06BC                             u3400 01C8  
                           u3080 189A                             u3320 098C  
                           u3240 076E                             u3401 01C4  
                           u3161 14B8                             u3081 1896  
                           u3321 0988                             u3241 076A  
                           u3410 01DC                             u3250 081C  
                           u3330 1BD4                             _T2PR 000FBC  
                     _Black_rule 016C                             u3411 01D8  
                           u4107 17FE                             u3171 14CA  
                           u3091 143A                             u3251 0818  
                           u3331 1BD0                             u4027 0C0C  
                           u3500 052A                             u3420 0252  
                           u3180 14EA                             u3340 1BE6  
                           u3501 0526                             u3421 024E  
                           u4117 12D0                             u3181 14E6  
                           u3261 08B4                             u3341 1BE2  
                           u4037 0B00                             u3510 0570  
                           u3430 02B4                             u3190 14F8  
                           u3350 1C1E                             u4207 16BA  
                           u3511 056C                             u3431 02B0  
                           u4127 1304                             u3191 14F4  
                           u3271 08C6                             u4047 05FE  
                           u3351 1C18                             u3520 05AC  
                           u3440 02F6                             u3360 1C20  
                           u3600 0B7E                             u4217 174E  
                           u3521 05A8                             u3441 02F2  
                           u4137 1338                             u3281 0912  
                           u4057 0632                             u3601 0B7A  
                           u2810 1AFE                             u3530 05CA  
                           u3450 0360                             u3370 00E4  
                           u3610 0B90                             u2811 1AFA  
                           u4227 1082                             u3531 05C6  
                           u3451 035C                             u3371 00E0  
                           u4147 136C                             u3291 0924  
                           u4067 0666                             u3611 0B8C  
                           u2820 1B1C                             u3460 03D6  
                           u3380 0128                             u3540 1F18  
                           u2900 0DB0                             u3620 0C50  
                           u2821 1B18                             u4237 1116  
                           u3461 03D2                             u3381 0124  
                           u3541 1F14                             u4157 139A  
                           u4077 140C                             u2901 0DAC  
                           u3621 0C4C                             u2830 1B38  
                           u3470 0438                             u3390 016E  
                           u2910 0E0A                             u3550 09C0  
                           u3630 0C64                             u2831 1B34  
                           u4247 1EA4                             u4167 1592  
                           u3471 0434                             u3391 016A  
                           u4087 1796                             u2911 0E06  
                           u3551 09BC                             u3631 0C60  
                           u2920 10B4                             u3480 047A  
                           u2808 1FF8                             u2840 1F52  
                           u3560 0A00                             u3640 0CD4  
                           u2921 10B0                             u4177 1626  
                           u3481 0476                             u2841 1F4E  
                           u4097 17CA                             u3561 09FC  
                           u3641 0CD0                             u2930 1148  
                           u3490 04E4                             u2770 20BA  
                           u2850 1F68                             u3570 0A40  
                           u3650 0D14                             u2931 1144  
                           u4187 11D4                             u3491 04E0  
                           u2771 20B6                             u2851 1F64  
                           u3571 0A3C                             u3651 0D10  
                           u2940 1168                             u2780 20D0  
                           u2860 1F7E                             u3580 0A80  
                           u2941 1164                             u4197 1268  
                           u2781 20CC                             u2861 1F7A  
                           u3581 0A7C                             u2870 0EC0  
                           u2950 1206                             u2790 1FF6  
                           u3590 0AC8                             u2871 0EBC  
                           u2951 1202                             u2791 1FEE  
                           u3591 0AC4                             u2880 0F8A  
                           u2960 1298                             u2881 0F86  
                           u2961 1294                             u2970 12B8  
                           u2890 0D52                             u2971 12B4  
                           u2891 0D4E                             u2980 16EC  
                           u2981 16E8                             u2990 177E  
                           u2991 177A                             i2l98 1E68  
                           _main 0B9A                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004E  
                           _stop 1E6A                             prodh 000FF4  
                           prodl 000FF3                             start 009E  
         __end_of_color_read_Red 1D2A                  __end_of_HighISR 009E  
                   ___param_bank 000000       __end_ofi2_color_read_Clear 1E6A  
             _get_color_code$463 00C6               _get_color_code$464 00CA  
             _get_color_code$465 00CE                            ?_main 0001  
                __end_of___lldiv 18CE                            ?_stop 0024  
            _add_seconds_to_list 1EFC                      _Black_setup 0060  
                __end_of___lwdiv 1B58                            i2l120 1FC8  
                          i2l122 1FCA                            i2l116 1F9C  
                          i2l117 1F9E                            i2l118 1FB2  
                          i2l119 1FB4                            i2l410 009A  
                          i2l163 1CD8                            i2l282 21CE  
                          i2l362 20F8                            i2l371 21B4  
                          i2l365 21BE                            i2l374 2182  
                          i2l359 20D2                            i2l368 21C8  
                          i2l377 204E                            _TMR0H 000FD4  
                          _TMR0L 000FD3              ___lmul@multiplicand 0015  
     __end_of_I2C_2_Master_Start 21A2       __end_of_I2C_2_Master_Write 216C  
             _get_color_distance 0D34                            _index 0042  
                          _state 0040                            tablat 000FF5  
                          plusw0 000FEB                            plusw1 000FE3  
                          plusw2 000FDB              ?_get_color_distance 0017  
                          ttemp5 004F                            ttemp6 0052  
                          ttemp7 0056                            status 000FD8  
                          wtemp8 004F             ?_add_seconds_to_list 0001  
                     _Green_rule 0090          __end_of_color_read_Blue 1E1A  
          _I2C_2_Master_RepStart 21A2                  ?_color_read_Red 0015  
                __initialization 18CE                     __end_of_main 0D34  
                i2_set_led_color 1F88                     __end_of_stop 1EB4  
                   _turnLeftLong 1658             i2set_led_color@color 0001  
           ??_get_color_distance 002F                           ??_main 003A  
                         ??_stop 0028                    __activetblptr 000002  
            _get_color_code$2463 00BA                     ?_setMotorPWM 001E  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         _RE4PPS 000E76                           i2l3200 0096  
                         i2l2440 21C0                           i2l2442 21C4  
                         i2l2450 217E                           i2l2460 204A  
                         i2l2452 2010                           i2l2436 21B6  
                         i2l2444 21AC                           i2l3180 001A  
                         i2l2462 204C                           i2l2454 2014  
                         i2l2438 21BA                           i2l2446 21B0  
                         i2l3190 0066                           i2l3182 0036  
                         i2l1840 21CA                           i2l2384 20D2  
                         i2l2456 201C                           i2l2448 217A  
                         i2l3192 007A                           i2l3184 003A  
                         i2l2386 20E2                           i2l2458 2024  
                         i2l3194 0086                           i2l3186 0042  
                         i2l3178 000A                           i2l3196 008E  
                         i2l3188 0056                           i2l2822 1F88  
                         i2l3198 0092                           i2l2816 1E1A  
                         i2l2824 1F96                           i2l2818 1E60  
                         i2l2826 1FAC                           i2l2828 1FC2  
                         i2l2960 1C80                           i2l2970 1CB4  
                         _RG6PPS 000E88                           i2l2972 1CC0  
                         i2l2974 1CCC                           i2l2966 1C80  
                         i2l2968 1C92                        ??_HighISR 0011  
       __end_of_color_click_init 1530            ??_add_seconds_to_list 0011  
                 RobotMovement@i 0036            __end_of_RobotMovement 05E8  
               ??_get_color_code 0035                    ??_Timer0_init 0011  
                   _CCPTMRS0bits 000FAD                           ___lmul 1B58  
       get_color_distance@color1 0017         get_color_distance@color2 0023  
                         ___wmul 20FA                           _clear1 0048  
                         _clear2 0046                        ??___lldiv 0025  
                      ??___lwdiv 001B                      _Color_rules 0100  
                         clear_0 1934                           clear_1 1940  
                         clear_2 194C                           clear_3 1958  
                         isa$std 000001                 __end_of_moveBack 1A70  
          calibrate_black@clear1 0020            calibrate_black@clear2 0022  
                   __pdataCOMRAM 004A                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                   ?_return_back 002E                   _Lightblue_rule 0184  
                     _White_rule 0178                           stop@mL 0024  
                         stop@mR 0026                ??_initDCmotorsPWM 0013  
               __end_of_turnLeft 116A            __end_of_set_led_color 1F88  
                     __accesstop 0060          __end_of__initialization 195E  
       __end_of_color_read_Clear 1DCA         __end_of_color_read_Green 1D7A  
         ?_I2C_2_Master_RepStart 0001          __end_ofi2_set_led_color 1FCC  
                  ___rparam_used 000001                 ?_color_read_Blue 0015  
                _Interrupts_init 216C                   __pcstackCOMRAM 0001  
                   __pidataBANK0 1EB4                     __pidataBANK1 2050  
         i2I2C_2_Master_Read@ack 0003              __end_of_Timer0_init 2160  
         i2I2C_2_Master_Read@tmp 0004                       __pbssBANK0 00E6  
                     __pbssBANK1 0100                       __pbssBANK2 0200  
        i2_I2C_2_Master_RepStart 21C0                    _turnRightLong 1530  
              _color_writetoaddr 2120                     _T2CLKCONbits 000FBF  
             ?_color_writetoaddr 0013                          ?___lmul 0011  
                        ?___wmul 0011                   main@color_code 01A8  
                 ___lmul@product 0019                  get_color_code@i 00D8  
            ??_color_writetoaddr 0014            i2color_read_Clear@tmp 000A  
              return_back@motorL 002E                return_back@motorR 0030  
             i2_color_read_Clear 1E1A          get_color_code@min_index 00D4  
                        _SSP2ADD 000ED6                          _SSP2BUF 000ED5  
        get_color_code@min_value 00D2                      _Orange_rule 0190  
        __end_of_Interrupts_init 2178           color_writetoaddr@value 0013  
               ??_color_read_Red 0017              ?i2_color_read_Clear 0005  
     __end_of_get_wall_detection 1C26                          _HighISR 0008  
     __end_of_set_wall_detection 1CDA        __end_of_color_writetoaddr 2140  
               ?i2_set_led_color 0001                   ?_turnRightLong 0024  
             _I2C_2_Master_Start 2198              i2_I2C_2_Master_Idle 20D2  
             _I2C_2_Master_Write 2160                        ?_moveBack 0024  
            i2_I2C_2_Master_Read 200E                          __Hparam 0000  
            i2_I2C_2_Master_Stop 21AC                          __Lparam 0000  
              color_read_Red@tmp 001A                      _Timer0_init 2140  
              __end_of_get_state 218E                          ___lldiv 182A  
            ?_I2C_2_Master_Start 0001                          ___lwdiv 1AE4  
            ?_I2C_2_Master_Write 0001                          __pcinit 18CE  
           ??i2_color_read_Clear 0007                          __ramtop 0E00  
                      ?_turnLeft 0024                          __ptext0 0B9A  
                        __ptext1 0996                          __ptext2 196C  
                        __ptext3 1BC2                          __ptext4 2184  
                        __ptext5 05E8                          __ptext6 0D34  
                        __ptext7 1B58                          __ptext8 182A  
                        __ptext9 1C26             ?i2_I2C_2_Master_Idle 0001  
                      _T2CONbits 000FBD             ?i2_I2C_2_Master_Read 0001  
           ?i2_I2C_2_Master_Stop 0001                          _seconds 0044  
                      _T2HLTbits 000FBE             ??_I2C_2_Master_Start 0012  
           ??_I2C_2_Master_Write 0012             end_of_initialization 195E  
      ??i2_I2C_2_Master_RepStart 0002                    __Lmediumconst 0000  
              ?_color_click_init 0001                       ??_moveBack 002A  
                ___lldiv@divisor 0021               ??_color_click_init 0026  
                ___lldiv@counter 0029                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                      _White_setup 006C  
                _initDCmotorsPWM 196C                       ??_turnLeft 0028  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0023  
          ??i2_I2C_2_Master_Idle 0001            ??i2_I2C_2_Master_Read 0002  
              __end_of_turnRight 12BA            ??i2_I2C_2_Master_Stop 0002  
                    _Yellow_rule 0078                        _TRISAbits 000F81  
             setMotorPWM@posDuty 0022                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
           _calibrate_black$2464 0024      __end_of_add_seconds_to_list 1F44  
               fullSpeedAhead@mL 0024                 fullSpeedAhead@mR 0026  
       color_writetoaddr@address 0014       get_color_distance@B_offset 00B8  
        ??_I2C_2_Master_RepStart 0012                 ?_Interrupts_init 0001  
                ??_turnRightLong 0028                      _CCP1CONbits 000FAB  
     get_color_distance@G_offset 00B6                _increment_seconds 21CA  
              ?_color_read_Clear 0015                      _CCP2CONbits 000FA7  
              ??_calibrate_black 001E                ?_color_read_Green 0015  
                    _CCP3CONbits 000F26                      _CCP4CONbits 000F22  
                     main@motorL 01AC                       main@motorR 01B5  
              ??_calibrate_white 001C               ?_increment_seconds 0001  
             ??_color_read_Clear 0017               ??_color_read_Green 0017  
                 _fullSpeedAhead 1C26       get_color_distance@R_offset 00B4  
                      _Blue_rule 0084              ??_increment_seconds 0001  
                 __end_of___lmul 1BC2                   __end_of___wmul 2120  
                  __pidataCOMRAM 21D0              color_read_Clear@tmp 001A  
            start_initialization 18CE              _TimedfullSpeedAhead 1A70  
               _incr_sec_counter 003E        __end_of_increment_seconds 21D0  
                      _Pink_rule 019C              color_read_Green@tmp 001A  
        __end_of_initDCmotorsPWM 19FC             ?_TimedfullSpeedAhead 0024  
         __end_of_fullSpeedAhead 1C80                         ??___lmul 0019  
                       ??___wmul 0015                      __pdataBANK0 0060  
                    __pdataBANK1 0178    i2I2C_2_Master_Write@data_byte 0002  
   __end_ofi2_I2C_2_Master_Start 21C0     __end_ofi2_I2C_2_Master_Write 2184  
         _get_color_distance$421 00A8           _get_color_distance$423 00AC  
         _get_color_distance$425 00B0                      __pbssCOMRAM 003C  
                  __pcstackBANK0 00A8                    __pcstackBANK1 01A8  
            get_color_code@value 00D6                         ?_HighISR 0001  
                  _RobotMovement 00A2                 ___lwdiv@dividend 0017  
          ??_TimedfullSpeedAhead 002A                     ?_Timer0_init 0001  
                ?_fullSpeedAhead 0024                       moveBack@mL 0024  
                     moveBack@mR 0026                        __pintcode 0008  
                       ?___lldiv 001D                         ?___lwdiv 0017  
             _get_wall_detection 1BC2               _set_wall_detection 1C80  
                  ?_turnLeftLong 0024                     moveBack@time 0028  
                      _get_state 2184             I2C_2_Master_Read@ack 0013  
           I2C_2_Master_Read@tmp 0014            TimedfullSpeedAhead@mL 0024  
          TimedfullSpeedAhead@mR 0026              ?_get_wall_detection 0017  
            ?_set_wall_detection 000C      get_color_code@NormalizedRGB 00DA  
              _I2C_2_Master_Idle 20AA                _I2C_2_Master_Init 2080  
              _I2C_2_Master_Read 1FCC                _I2C_2_Master_Stop 218E  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 0020  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 001C  
       initDCmotorsPWM@PWMperiod 0011                  turnRightLong@mL 0024  
                turnRightLong@mR 0026                   turnLeftLong@mL 0024  
                 turnLeftLong@mR 0026              ??_I2C_2_Master_Idle 0011  
            ??_I2C_2_Master_Init 0011              ??_I2C_2_Master_Read 0012  
                 ___wmul@product 0015                         _LATAbits 000F79  
                  _set_led_color 1F44              ??_I2C_2_Master_Stop 0012  
                       _LATCbits 000F7B                         _LATEbits 000F7D  
                       _LATFbits 000F7E                         _LATGbits 000F7F  
           ??_get_wall_detection 0019                         _PIE0bits 000E29  
                 ?_RobotMovement 002E                         _PIE2bits 000E2B  
           ??_set_wall_detection 000E                         i2u206_40 1C92  
                       i2u206_41 1C8E                      turnRight@mL 0024  
                       i2u207_40 1CB4                         i2u207_41 1CB0  
                    turnRight@mR 0026                         i2u153_40 2038  
                       i2u233_40 001A                         i2u153_41 2030  
                       i2u233_41 0016                         i2u146_40 20E2  
                       i2u234_40 0036                         i2u146_41 20DE  
                       i2u234_41 0032                         i2u147_40 20F8  
                       i2u154_48 203A                         i2u235_40 0056  
                       i2u147_41 20F4                         i2u235_41 0052  
                       i2u236_40 007A                         i2u236_41 0076  
                       i2u175_40 1F96                         i2u175_41 1F92  
                       _PIR0bits 000E33                         i2u176_40 1FAC  
                       i2u176_41 1FA8                         i2u177_40 1FC2  
                       i2u177_41 1FBE                 ?_initDCmotorsPWM 0011  
                      _wall_coef 004C                        _wait_time 004A  
                       _SSP2CON2 000EDA                   ??_turnLeftLong 0028  
                       _SSP2STAT 000ED8               set_led_color@color 0011  
                     ?_get_state 0011        __end_of_I2C_2_Master_Idle 20D2  
      __end_of_I2C_2_Master_Init 20AA        __end_of_I2C_2_Master_Read 200E  
              ___wmul@multiplier 0011        __end_of_I2C_2_Master_Stop 2198  
                   setMotorPWM@m 001E      I2C_2_Master_Write@data_byte 0012  
                  _movement_list 0200                        main@state 01AA  
              ??_color_read_Blue 0017                    ??_return_back 0032  
                _calibrate_black 12BA          TimedfullSpeedAhead@time 0028  
                      _turnRight 116A                  _calibrate_white 1780  
              ___lmul@multiplier 0011                        copy_data0 18E2  
                      copy_data1 1902                        copy_data2 1922  
                 ?_set_led_color 0011    __end_of_I2C_2_Master_RepStart 21AC  
             color_read_Blue@tmp 001A              __end_of_setMotorPWM 1010  
                       _Red_rule 009C             i2_I2C_2_Master_Start 21B6  
           i2_I2C_2_Master_Write 2178                         __Hrparam 0000  
                       __Lrparam 0000      __end_ofi2_I2C_2_Master_Idle 20FA  
    __end_ofi2_I2C_2_Master_Read 2050       __end_of_get_color_distance 0EA4  
    __end_ofi2_I2C_2_Master_Stop 21B6                   _get_color_code 05E8  
                     _ANSELDbits 000EA7                       _ANSELFbits 000EB4  
                     _T0CON0bits 000FD5                       _T0CON1bits 000FD6  
       ?i2_I2C_2_Master_RepStart 0001                  ___lwdiv@divisor 0019  
                ___lwdiv@counter 001B                       ?_turnRight 0024  
                       __ptext10 13F8                         __ptext11 2120  
                       __ptext20 218E                         __ptext12 1780  
                       __ptext21 2198                         __ptext13 12BA  
                       __ptext30 116A                         __ptext22 21A2  
                       __ptext14 1F44                         __ptext31 1658  
                       __ptext23 1FCC                         __ptext15 1CDA  
                       __ptext32 1010                         __ptext24 20AA  
                       __ptext16 1D2A                         __ptext41 1C80  
                       __ptext33 1E6A                         __ptext25 2080  
                       __ptext17 1D7A                         __ptext50 21CA  
                       __ptext42 1F88                         __ptext34 19FC  
                       __ptext26 1EFC                         __ptext18 1DCA  
                       __ptext43 1E1A                         __ptext35 1A70  
                       __ptext27 2140                         __ptext19 2160  
                       __ptext44 2178                         __ptext36 0EA4  
                       __ptext28 00A2                         __ptext45 21AC  
                       __ptext37 20FA                         __ptext29 1530  
                       __ptext46 21B6                         __ptext38 1AE4  
                       __ptext47 21C0                         __ptext39 216C  
                       __ptext48 200E                         __ptext49 20D2  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                ??_RobotMovement 0034              __end_of_return_back 0B9A  
                     turnLeft@mL 0024                       turnLeft@mR 0026  
          ?i2_I2C_2_Master_Start 0001                   turnRightLong@i 002A  
          ?i2_I2C_2_Master_Write 0001                    turnLeftLong@i 002A  
          __end_of_turnRightLong 1658                         _moveBack 19FC  
                     turnRight@i 002C                       turnRight@k 002A  
                       isa$xinst 000000                         int$flags 004E  
         __end_of_get_color_code 0996          __end_of_calibrate_black 13F8  
                       _turnLeft 1010                      ??_get_state 0013  
        __end_of_calibrate_white 182A                       _INTCONbits 000FF2  
              ??i2_set_led_color 0003                      _setMotorPWM 0EA4  
                  _get_led_color 000000                  ??_set_led_color 0013  
           __end_of_turnLeftLong 1780                         intlevel2 0000  
               ___lldiv@dividend 001D                 ??_fullSpeedAhead 0028  
                      turnLeft@i 002C                        turnLeft@k 002A  
                ?_get_color_code 0033                 _color_click_init 13F8  
__end_ofi2_I2C_2_Master_RepStart 21CA           _wall_detection_counter 003C  
                     _SSP2DATPPS 000E1D                 ___lldiv@quotient 0025  
                     _SSP2CLKPPS 000E1C           set_wall_detection@mode 000C  
                    _return_back 0996                      ??_turnRight 0028  
    __end_of_TimedfullSpeedAhead 1AE4           ??i2_I2C_2_Master_Start 0002  
         ??i2_I2C_2_Master_Write 0002              RobotMovement@i_1278 0038  
