

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 12:22:34 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    73                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    74                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    75                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    76   000000                     
    77                           ; Version 2.40
    78                           ; Generated 04/07/2022 GMT
    79                           ; 
    80                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution. Publication is not required when
    94                           ;        this file is used in an embedded application.
    95                           ; 
    96                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    97                           ;        software without specific prior written permission.
    98                           ; 
    99                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   100                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   101                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   102                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   103                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   104                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   105                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   106                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   107                           ; 
   108                           ; 
   109                           ; Code-generator required, PIC18F67K40 Definitions
   110                           ; 
   111                           ; SFR Addresses
   112   000000                     
   113                           	psect	idataCOMRAM
   114   002198                     __pidataCOMRAM:
   115                           	callstack 0
   116                           
   117                           ;initializer for _Black_setup
   118   002198  0404               	dw	1028
   119   00219A  0000               	dw	0
   120   00219C  024B               	dw	587
   121   00219E  0000               	dw	0
   122   0021A0  00A1               	dw	161
   123   0021A2  0000               	dw	0
   124                           
   125                           ;initializer for _wall_detection_counter
   126   0021A4  0014               	dw	20
   127                           
   128                           	psect	idataBANK0
   129   001E90                     __pidataBANK0:
   130                           	callstack 0
   131                           
   132                           ;initializer for _White_setup
   133   001E90  28FC               	dw	10492
   134   001E92  0000               	dw	0
   135   001E94  1B55               	dw	6997
   136   001E96  0000               	dw	0
   137   001E98  0770               	dw	1904
   138   001E9A  0000               	dw	0
   139                           
   140                           ;initializer for _Pink_rule
   141   001E9C  004D               	dw	77
   142   001E9E  0000               	dw	0
   143   001EA0  003C               	dw	60
   144   001EA2  0000               	dw	0
   145   001EA4  0040               	dw	64
   146   001EA6  0000               	dw	0
   147                           
   148                           ;initializer for _Yellow_rule
   149   001EA8  005D               	dw	93
   150   001EAA  0000               	dw	0
   151   001EAC  004C               	dw	76
   152   001EAE  0000               	dw	0
   153   001EB0  0014               	dw	20
   154   001EB2  0000               	dw	0
   155                           
   156                           ;initializer for _Blue_rule
   157   001EB4  0003               	dw	3
   158   001EB6  0000               	dw	0
   159   001EB8  0009               	dw	9
   160   001EBA  0000               	dw	0
   161   001EBC  0024               	dw	36
   162   001EBE  0000               	dw	0
   163                           
   164                           ;initializer for _Green_rule
   165   001EC0  0019               	dw	25
   166   001EC2  0000               	dw	0
   167   001EC4  0036               	dw	54
   168   001EC6  0000               	dw	0
   169   001EC8  0008               	dw	8
   170   001ECA  0000               	dw	0
   171                           
   172                           ;initializer for _Red_rule
   173   001ECC  0048               	dw	72
   174   001ECE  0000               	dw	0
   175   001ED0  0002               	dw	2
   176   001ED2  0000               	dw	0
   177   001ED4  0002               	dw	2
   178   001ED6  0000               	dw	0
   179                           
   180                           ;initializer for _wait_time
   181   001ED8  00DC               	dw	220
   182                           
   183                           ;initializer for _wall_coef
   184   001EDA  000F               	dw	15
   185                           
   186                           	psect	idataBANK1
   187   00211A                     __pidataBANK1:
   188                           	callstack 0
   189                           
   190                           ;initializer for _White_rule
   191   00211A  0064               	dw	100
   192   00211C  0000               	dw	0
   193   00211E  0064               	dw	100
   194   002120  0000               	dw	0
   195   002122  0064               	dw	100
   196   002124  0000               	dw	0
   197                           
   198                           ;initializer for _Lightblue_rule
   199   002126  0026               	dw	38
   200   002128  0000               	dw	0
   201   00212A  0048               	dw	72
   202   00212C  0000               	dw	0
   203   00212E  0054               	dw	84
   204   002130  0000               	dw	0
   205                           
   206                           ;initializer for _Orange_rule
   207   002132  005C               	dw	92
   208   002134  0000               	dw	0
   209   002136  0027               	dw	39
   210   002138  0000               	dw	0
   211   00213A  001C               	dw	28
   212   00213C  0000               	dw	0
   213   000000                     _T0CON0bits	set	4053
   214   000000                     _T0CON1bits	set	4054
   215   000000                     _TRISDbits	set	3972
   216   000000                     _SSP2CON2bits	set	3802
   217   000000                     _SSP2CLKPPS	set	3612
   218   000000                     _SSP2DATPPS	set	3613
   219   000000                     _RC7PPS	set	3689
   220   000000                     _RE2PPS	set	3700
   221   000000                     _ANSELFbits	set	3764
   222   000000                     _TRISAbits	set	3969
   223   000000                     _TRISFbits	set	3974
   224   000000                     _PORTFbits	set	3982
   225   000000                     _TRISGbits	set	3975
   226   000000                     _TRISCbits	set	3971
   227   000000                     _TRISEbits	set	3973
   228   000000                     _SSP2BUF	set	3797
   229   000000                     _SSP2ADD	set	3798
   230   000000                     _SSP2CON1bits	set	3801
   231   000000                     _LATAbits	set	3961
   232   000000                     _LATGbits	set	3967
   233   000000                     _CCPR4H	set	3873
   234   000000                     _CCPR3H	set	3877
   235   000000                     _T2PR	set	4028
   236   000000                     _T2CONbits	set	4029
   237   000000                     _CCPR2H	set	4006
   238   000000                     _CCPR1H	set	4010
   239   000000                     _LATCbits	set	3963
   240   000000                     _LATEbits	set	3965
   241   000000                     _LATFbits	set	3966
   242   000000                     _RE4PPS	set	3702
   243   000000                     _RG6PPS	set	3720
   244   000000                     _RD5PPS	set	3695
   245   000000                     _ANSELDbits	set	3751
   246   000000                     _TMR0L	set	4051
   247   000000                     _TMR0H	set	4052
   248   000000                     _INTCONbits	set	4082
   249   000000                     _T2CLKCONbits	set	4031
   250   000000                     _T2HLTbits	set	4030
   251   000000                     _CCP1CONbits	set	4011
   252   000000                     _CCPTMRS0bits	set	4013
   253   000000                     _CCP2CONbits	set	4007
   254   000000                     _CCP3CONbits	set	3878
   255   000000                     _CCP4CONbits	set	3874
   256   000000                     _SSP2CON2	set	3802
   257   000000                     _SSP2STAT	set	3800
   258   000000                     _PIE0bits	set	3625
   259   000000                     _RD6PPS	set	3696
   260   000000                     _PIE2bits	set	3627
   261   000000                     _PIR0bits	set	3635
   262                           
   263                           ; #config settings
   264                           
   265                           	psect	cinit
   266   0018E0                     __pcinit:
   267                           	callstack 0
   268   0018E0                     start_initialization:
   269                           	callstack 0
   270   0018E0                     __initialization:
   271                           	callstack 0
   272                           
   273                           ; Initialize objects allocated to BANK1 (36 bytes)
   274                           ; load TBLPTR registers with __pidataBANK1
   275   0018E0  0E1A               	movlw	low __pidataBANK1
   276   0018E2  6EF6               	movwf	tblptrl,c
   277   0018E4  0E21               	movlw	high __pidataBANK1
   278   0018E6  6EF7               	movwf	tblptrh,c
   279   0018E8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   280   0018EA  6EF8               	movwf	tblptru,c
   281   0018EC  EE01  F078         	lfsr	0,__pdataBANK1
   282   0018F0  EE10 F024          	lfsr	1,36
   283   0018F4                     copy_data0:
   284   0018F4  0009               	tblrd		*+
   285   0018F6  CFF5 FFEE          	movff	tablat,postinc0
   286   0018FA  50E5               	movf	postdec1,w,c
   287   0018FC  50E1               	movf	fsr1l,w,c
   288   0018FE  E1FA               	bnz	copy_data0
   289                           
   290                           ; Initialize objects allocated to BANK0 (76 bytes)
   291                           ; load TBLPTR registers with __pidataBANK0
   292   001900  0E90               	movlw	low __pidataBANK0
   293   001902  6EF6               	movwf	tblptrl,c
   294   001904  0E1E               	movlw	high __pidataBANK0
   295   001906  6EF7               	movwf	tblptrh,c
   296   001908  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   297   00190A  6EF8               	movwf	tblptru,c
   298   00190C  EE00  F060         	lfsr	0,__pdataBANK0
   299   001910  EE10 F04C          	lfsr	1,76
   300   001914                     copy_data1:
   301   001914  0009               	tblrd		*+
   302   001916  CFF5 FFEE          	movff	tablat,postinc0
   303   00191A  50E5               	movf	postdec1,w,c
   304   00191C  50E1               	movf	fsr1l,w,c
   305   00191E  E1FA               	bnz	copy_data1
   306                           
   307                           ; Initialize objects allocated to COMRAM (14 bytes)
   308                           ; load TBLPTR registers with __pidataCOMRAM
   309   001920  0E98               	movlw	low __pidataCOMRAM
   310   001922  6EF6               	movwf	tblptrl,c
   311   001924  0E21               	movlw	high __pidataCOMRAM
   312   001926  6EF7               	movwf	tblptrh,c
   313   001928  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   314   00192A  6EF8               	movwf	tblptru,c
   315   00192C  EE00  F039         	lfsr	0,__pdataCOMRAM
   316   001930  EE10 F00E          	lfsr	1,14
   317   001934                     copy_data2:
   318   001934  0009               	tblrd		*+
   319   001936  CFF5 FFEE          	movff	tablat,postinc0
   320   00193A  50E5               	movf	postdec1,w,c
   321   00193C  50E1               	movf	fsr1l,w,c
   322   00193E  E1FA               	bnz	copy_data2
   323                           
   324                           ; Clear objects allocated to BANK2 (200 bytes)
   325   001940  EE02  F000         	lfsr	0,__pbssBANK2
   326   001944  0EC8               	movlw	200
   327   001946                     clear_0:
   328   001946  6AEE               	clrf	postinc0,c
   329   001948  06E8               	decf	wreg,f,c
   330   00194A  E1FD               	bnz	clear_0
   331                           
   332                           ; Clear objects allocated to BANK1 (120 bytes)
   333   00194C  EE01  F000         	lfsr	0,__pbssBANK1
   334   001950  0E78               	movlw	120
   335   001952                     clear_1:
   336   001952  6AEE               	clrf	postinc0,c
   337   001954  06E8               	decf	wreg,f,c
   338   001956  E1FD               	bnz	clear_1
   339                           
   340                           ; Clear objects allocated to BANK0 (18 bytes)
   341   001958  EE00  F0EA         	lfsr	0,__pbssBANK0
   342   00195C  0E12               	movlw	18
   343   00195E                     clear_2:
   344   00195E  6AEE               	clrf	postinc0,c
   345   001960  06E8               	decf	wreg,f,c
   346   001962  E1FD               	bnz	clear_2
   347                           
   348                           ; Clear objects allocated to COMRAM (8 bytes)
   349   001964  EE00  F047         	lfsr	0,__pbssCOMRAM
   350   001968  0E08               	movlw	8
   351   00196A                     clear_3:
   352   00196A  6AEE               	clrf	postinc0,c
   353   00196C  06E8               	decf	wreg,f,c
   354   00196E  E1FD               	bnz	clear_3
   355   001970                     end_of_initialization:
   356                           	callstack 0
   357   001970                     __end_of__initialization:
   358                           	callstack 0
   359   001970  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   360   001972  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   361   001974  0100               	movlb	0
   362   001976  EFC9  F005         	goto	_main	;jump to C main() function
   363                           
   364                           	psect	bssCOMRAM
   365   000047                     __pbssCOMRAM:
   366                           	callstack 0
   367   000047                     _index:
   368                           	callstack 0
   369   000047                     	ds	2
   370   000049                     _seconds:
   371                           	callstack 0
   372   000049                     	ds	2
   373   00004B                     _clear2:
   374                           	callstack 0
   375   00004B                     	ds	2
   376   00004D                     _clear1:
   377                           	callstack 0
   378   00004D                     	ds	2
   379                           
   380                           	psect	dataCOMRAM
   381   000039                     __pdataCOMRAM:
   382                           	callstack 0
   383   000039                     _Black_setup:
   384                           	callstack 0
   385   000039                     	ds	12
   386   000045                     _wall_detection_counter:
   387                           	callstack 0
   388   000045                     	ds	2
   389                           
   390                           	psect	bssBANK0
   391   0000EA                     __pbssBANK0:
   392                           	callstack 0
   393   0000EA                     _RGB:
   394                           	callstack 0
   395   0000EA                     	ds	12
   396   0000F6                     _incr_sec_counter:
   397                           	callstack 0
   398   0000F6                     	ds	2
   399   0000F8                     _state:
   400                           	callstack 0
   401   0000F8                     	ds	2
   402   0000FA                     _wall_detection_mode:
   403                           	callstack 0
   404   0000FA                     	ds	2
   405                           
   406                           	psect	dataBANK0
   407   000060                     __pdataBANK0:
   408                           	callstack 0
   409   000060                     _White_setup:
   410                           	callstack 0
   411   000060                     	ds	12
   412   00006C                     _Pink_rule:
   413                           	callstack 0
   414   00006C                     	ds	12
   415   000078                     _Yellow_rule:
   416                           	callstack 0
   417   000078                     	ds	12
   418   000084                     _Blue_rule:
   419                           	callstack 0
   420   000084                     	ds	12
   421   000090                     _Green_rule:
   422                           	callstack 0
   423   000090                     	ds	12
   424   00009C                     _Red_rule:
   425                           	callstack 0
   426   00009C                     	ds	12
   427   0000A8                     _wait_time:
   428                           	callstack 0
   429   0000A8                     	ds	2
   430   0000AA                     _wall_coef:
   431                           	callstack 0
   432   0000AA                     	ds	2
   433                           
   434                           	psect	bssBANK1
   435   000100                     __pbssBANK1:
   436                           	callstack 0
   437   000100                     _Color_rules:
   438                           	callstack 0
   439   000100                     	ds	108
   440   00016C                     _Black_rule:
   441                           	callstack 0
   442   00016C                     	ds	12
   443                           
   444                           	psect	dataBANK1
   445   000178                     __pdataBANK1:
   446                           	callstack 0
   447   000178                     _White_rule:
   448                           	callstack 0
   449   000178                     	ds	12
   450   000184                     _Lightblue_rule:
   451                           	callstack 0
   452   000184                     	ds	12
   453   000190                     _Orange_rule:
   454                           	callstack 0
   455   000190                     	ds	12
   456                           
   457                           	psect	bssBANK2
   458   000200                     __pbssBANK2:
   459                           	callstack 0
   460   000200                     _movement_list:
   461                           	callstack 0
   462   000200                     	ds	200
   463                           
   464                           	psect	cstackBANK1
   465   00019C                     __pcstackBANK1:
   466                           	callstack 0
   467   00019C                     main@color_code:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x0
   471   00019C                     	ds	2
   472   00019E                     main@state:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x2
   476   00019E                     	ds	2
   477   0001A0                     main@motorL:
   478                           	callstack 0
   479                           
   480                           ; 9 bytes @ 0x4
   481   0001A0                     	ds	9
   482   0001A9                     main@motorR:
   483                           	callstack 0
   484                           
   485                           ; 9 bytes @ 0xD
   486   0001A9                     	ds	9
   487                           
   488                           	psect	cstackBANK0
   489   0000AC                     __pcstackBANK0:
   490                           	callstack 0
   491   0000AC                     _get_color_distance$422:
   492                           	callstack 0
   493                           
   494                           ; 4 bytes @ 0x0
   495   0000AC                     	ds	4
   496   0000B0                     _get_color_distance$424:
   497                           	callstack 0
   498                           
   499                           ; 4 bytes @ 0x4
   500   0000B0                     	ds	4
   501   0000B4                     _get_color_distance$426:
   502                           	callstack 0
   503                           
   504                           ; 4 bytes @ 0x8
   505   0000B4                     	ds	4
   506   0000B8                     get_color_distance@R_offset:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0xC
   510   0000B8                     	ds	2
   511   0000BA                     get_color_distance@G_offset:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0xE
   515   0000BA                     	ds	2
   516   0000BC                     get_color_distance@B_offset:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x10
   520   0000BC                     	ds	2
   521   0000BE                     _get_color_code$2460:
   522                           	callstack 0
   523                           
   524                           ; 12 bytes @ 0x12
   525   0000BE                     	ds	12
   526   0000CA                     _get_color_code$464:
   527                           	callstack 0
   528                           
   529                           ; 4 bytes @ 0x1E
   530   0000CA                     	ds	4
   531   0000CE                     _get_color_code$465:
   532                           	callstack 0
   533                           
   534                           ; 4 bytes @ 0x22
   535   0000CE                     	ds	4
   536   0000D2                     _get_color_code$466:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x26
   540   0000D2                     	ds	4
   541   0000D6                     get_color_code@min_value:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0x2A
   545   0000D6                     	ds	2
   546   0000D8                     get_color_code@min_index:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x2C
   550   0000D8                     	ds	2
   551   0000DA                     get_color_code@value:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x2E
   555   0000DA                     	ds	2
   556   0000DC                     get_color_code@i:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x30
   560   0000DC                     	ds	2
   561   0000DE                     get_color_code@NormalizedRGB:
   562                           	callstack 0
   563                           
   564                           ; 12 bytes @ 0x32
   565   0000DE                     	ds	12
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     i2set_led_color@color:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x0
   575   000001                     	ds	1
   576   000002                     ??i2_I2C_2_Master_Read:
   577   000002                     i2I2C_2_Master_Write@data_byte:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x1
   581   000002                     	ds	1
   582   000003                     i2I2C_2_Master_Read@ack:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0x2
   586   000003                     	ds	1
   587   000004                     i2I2C_2_Master_Read@tmp:
   588                           	callstack 0
   589                           
   590                           ; 1 bytes @ 0x3
   591   000004                     	ds	1
   592   000005                     ?i2_color_read_Clear:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x4
   596   000005                     	ds	2
   597   000007                     ??i2_color_read_Clear:
   598                           
   599                           ; 1 bytes @ 0x6
   600   000007                     	ds	3
   601   00000A                     i2color_read_Clear@tmp:
   602                           	callstack 0
   603                           
   604                           ; 2 bytes @ 0x9
   605   00000A                     	ds	2
   606   00000C                     set_wall_detection@mode:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0xB
   610   00000C                     	ds	2
   611   00000E                     ??_add_seconds_to_list:
   612   00000E                     ??_I2C_2_Master_Idle:
   613   00000E                     ?_get_state:
   614                           	callstack 0
   615   00000E                     ?___wmul:
   616                           	callstack 0
   617   00000E                     ?___lmul:
   618                           	callstack 0
   619   00000E                     set_wall_detection_mode@mode:
   620                           	callstack 0
   621   00000E                     set_led_color@color:
   622                           	callstack 0
   623   00000E                     initDCmotorsPWM@PWMperiod:
   624                           	callstack 0
   625   00000E                     ___wmul@multiplier:
   626                           	callstack 0
   627   00000E                     ___lmul@multiplier:
   628                           	callstack 0
   629                           
   630                           ; 4 bytes @ 0xD
   631   00000E                     	ds	1
   632   00000F                     ??_I2C_2_Master_Read:
   633   00000F                     I2C_2_Master_Write@data_byte:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0xE
   637   00000F                     	ds	1
   638   000010                     color_writetoaddr@value:
   639                           	callstack 0
   640   000010                     I2C_2_Master_Read@ack:
   641                           	callstack 0
   642   000010                     ___wmul@multiplicand:
   643                           	callstack 0
   644                           
   645                           ; 2 bytes @ 0xF
   646   000010                     	ds	1
   647   000011                     color_writetoaddr@address:
   648                           	callstack 0
   649   000011                     I2C_2_Master_Read@tmp:
   650                           	callstack 0
   651                           
   652                           ; 1 bytes @ 0x10
   653   000011                     	ds	1
   654   000012                     ?_color_read_Red:
   655                           	callstack 0
   656   000012                     ?_color_read_Blue:
   657                           	callstack 0
   658   000012                     ?_color_read_Green:
   659                           	callstack 0
   660   000012                     ?_color_read_Clear:
   661                           	callstack 0
   662   000012                     ___wmul@product:
   663                           	callstack 0
   664   000012                     ___lmul@multiplicand:
   665                           	callstack 0
   666                           
   667                           ; 4 bytes @ 0x11
   668   000012                     	ds	2
   669   000014                     ??_color_read_Red:
   670   000014                     ??_color_read_Blue:
   671   000014                     ??_color_read_Green:
   672   000014                     ??_color_read_Clear:
   673   000014                     ?_get_color_distance:
   674                           	callstack 0
   675   000014                     ?_get_wall_detection:
   676                           	callstack 0
   677   000014                     ?___lwdiv:
   678                           	callstack 0
   679   000014                     ___lwdiv@dividend:
   680                           	callstack 0
   681   000014                     get_color_distance@color1:
   682                           	callstack 0
   683                           
   684                           ; 12 bytes @ 0x13
   685   000014                     	ds	2
   686   000016                     ___lwdiv@divisor:
   687                           	callstack 0
   688   000016                     ___lmul@product:
   689                           	callstack 0
   690                           
   691                           ; 4 bytes @ 0x15
   692   000016                     	ds	1
   693   000017                     color_read_Red@tmp:
   694                           	callstack 0
   695   000017                     color_read_Blue@tmp:
   696                           	callstack 0
   697   000017                     color_read_Green@tmp:
   698                           	callstack 0
   699   000017                     color_read_Clear@tmp:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0x16
   703   000017                     	ds	1
   704   000018                     ___lwdiv@counter:
   705                           	callstack 0
   706                           
   707                           ; 1 bytes @ 0x17
   708   000018                     	ds	1
   709   000019                     ??_calibrate_white:
   710   000019                     ___lwdiv@quotient:
   711                           	callstack 0
   712                           
   713                           ; 2 bytes @ 0x18
   714   000019                     	ds	1
   715   00001A                     ?___lldiv:
   716                           	callstack 0
   717   00001A                     ___lldiv@dividend:
   718                           	callstack 0
   719                           
   720                           ; 4 bytes @ 0x19
   721   00001A                     	ds	1
   722   00001B                     ??_calibrate_black:
   723   00001B                     setMotorPWM@m:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x1A
   727   00001B                     	ds	2
   728   00001D                     ??_setMotorPWM:
   729   00001D                     calibrate_black@clear1:
   730                           	callstack 0
   731                           
   732                           ; 2 bytes @ 0x1C
   733   00001D                     	ds	1
   734   00001E                     ___lldiv@divisor:
   735                           	callstack 0
   736                           
   737                           ; 4 bytes @ 0x1D
   738   00001E                     	ds	1
   739   00001F                     setMotorPWM@posDuty:
   740                           	callstack 0
   741   00001F                     calibrate_black@clear2:
   742                           	callstack 0
   743                           
   744                           ; 2 bytes @ 0x1E
   745   00001F                     	ds	1
   746   000020                     setMotorPWM@negDuty:
   747                           	callstack 0
   748   000020                     get_color_distance@color2:
   749                           	callstack 0
   750                           
   751                           ; 12 bytes @ 0x1F
   752   000020                     	ds	1
   753   000021                     stop@mL:
   754                           	callstack 0
   755   000021                     turnLeft@mL:
   756                           	callstack 0
   757   000021                     turnRight@mL:
   758                           	callstack 0
   759   000021                     turnLeftLong@mL:
   760                           	callstack 0
   761   000021                     turnRightLong@mL:
   762                           	callstack 0
   763   000021                     fullSpeedAhead@mL:
   764                           	callstack 0
   765   000021                     TimedfullSpeedAhead@mL:
   766                           	callstack 0
   767   000021                     moveBack@mL:
   768                           	callstack 0
   769   000021                     _calibrate_black$2461:
   770                           	callstack 0
   771                           
   772                           ; 2 bytes @ 0x20
   773   000021                     	ds	1
   774   000022                     ___lldiv@quotient:
   775                           	callstack 0
   776                           
   777                           ; 4 bytes @ 0x21
   778   000022                     	ds	1
   779   000023                     ??_color_click_init:
   780   000023                     stop@mR:
   781                           	callstack 0
   782   000023                     turnLeft@mR:
   783                           	callstack 0
   784   000023                     turnRight@mR:
   785                           	callstack 0
   786   000023                     turnLeftLong@mR:
   787                           	callstack 0
   788   000023                     turnRightLong@mR:
   789                           	callstack 0
   790   000023                     fullSpeedAhead@mR:
   791                           	callstack 0
   792   000023                     TimedfullSpeedAhead@mR:
   793                           	callstack 0
   794   000023                     moveBack@mR:
   795                           	callstack 0
   796                           
   797                           ; 2 bytes @ 0x22
   798   000023                     	ds	2
   799   000025                     ??_stop:
   800   000025                     ??_turnLeft:
   801   000025                     ??_turnRight:
   802   000025                     ??_turnLeftLong:
   803   000025                     ??_turnRightLong:
   804   000025                     TimedfullSpeedAhead@time:
   805                           	callstack 0
   806   000025                     moveBack@time:
   807                           	callstack 0
   808                           
   809                           ; 2 bytes @ 0x24
   810   000025                     	ds	1
   811   000026                     ___lldiv@counter:
   812                           	callstack 0
   813                           
   814                           ; 1 bytes @ 0x25
   815   000026                     	ds	1
   816   000027                     turnLeft@k:
   817                           	callstack 0
   818   000027                     turnRight@k:
   819                           	callstack 0
   820   000027                     turnLeftLong@i:
   821                           	callstack 0
   822   000027                     turnRightLong@i:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0x26
   826   000027                     	ds	2
   827   000029                     turnLeft@i:
   828                           	callstack 0
   829   000029                     turnRight@i:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0x28
   833   000029                     	ds	2
   834   00002B                     RobotMovement@color:
   835                           	callstack 0
   836   00002B                     return_back@motorL:
   837                           	callstack 0
   838                           
   839                           ; 2 bytes @ 0x2A
   840   00002B                     	ds	1
   841   00002C                     ??_get_color_distance:
   842                           
   843                           ; 1 bytes @ 0x2B
   844   00002C                     	ds	1
   845   00002D                     RobotMovement@motorL:
   846                           	callstack 0
   847   00002D                     return_back@motorR:
   848                           	callstack 0
   849                           
   850                           ; 2 bytes @ 0x2C
   851   00002D                     	ds	2
   852   00002F                     ??_return_back:
   853   00002F                     RobotMovement@motorR:
   854                           	callstack 0
   855                           
   856                           ; 2 bytes @ 0x2E
   857   00002F                     	ds	1
   858   000030                     ?_get_color_code:
   859                           	callstack 0
   860                           
   861                           ; 2 bytes @ 0x2F
   862   000030                     	ds	1
   863   000031                     
   864                           ; 1 bytes @ 0x30
   865   000031                     	ds	1
   866   000032                     ??_get_color_code:
   867                           
   868                           ; 1 bytes @ 0x31
   869   000032                     	ds	1
   870   000033                     RobotMovement@i:
   871                           	callstack 0
   872                           
   873                           ; 2 bytes @ 0x32
   874   000033                     	ds	2
   875   000035                     RobotMovement@i_1271:
   876                           	callstack 0
   877                           
   878                           ; 2 bytes @ 0x34
   879   000035                     	ds	2
   880   000037                     ??_main:
   881                           
   882                           ; 1 bytes @ 0x36
   883   000037                     	ds	2
   884                           
   885 ;;
   886 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   887 ;;
   888 ;; *************** function _main *****************
   889 ;; Defined at:
   890 ;;		line 17 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  color_code      2    0[BANK1 ] unsigned int 
   895 ;;  state           2    2[BANK1 ] int 
   896 ;;  motorR          9   13[BANK1 ] struct DC_motor
   897 ;;  motorL          9    4[BANK1 ] struct DC_motor
   898 ;;  PWMcycle        2    0        unsigned int 
   899 ;; Return value:  Size  Location     Type
   900 ;;                  1    wreg      void 
   901 ;; Registers used:
   902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   903 ;; Tracked objects:
   904 ;;		On entry : 0/0
   905 ;;		On exit  : 0/0
   906 ;;		Unchanged: 0/0
   907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   909 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   910 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   911 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   912 ;;Total ram usage:       24 bytes
   913 ;; Hardware stack levels required when called: 10
   914 ;; This function calls:
   915 ;;		_Interrupts_init
   916 ;;		_RobotMovement
   917 ;;		_TimedfullSpeedAhead
   918 ;;		_Timer0_init
   919 ;;		_add_seconds_to_list
   920 ;;		_color_click_init
   921 ;;		_fullSpeedAhead
   922 ;;		_get_color_code
   923 ;;		_get_state
   924 ;;		_get_wall_detection
   925 ;;		_initDCmotorsPWM
   926 ;;		_return_back
   927 ;;		_set_wall_detection_mode
   928 ;;		_stop
   929 ;; This function is called by:
   930 ;;		Startup code after reset
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text0
   935   000B92                     __ptext0:
   936                           	callstack 0
   937   000B92                     _main:
   938                           	callstack 21
   939   000B92                     
   940                           ;main.c: 19:     color_click_init();
   941   000B92  EC69  F009         	call	_color_click_init	;wreg free
   942   000B96                     
   943                           ;main.c: 20:     Timer0_init();
   944   000B96  ECAF  F010         	call	_Timer0_init	;wreg free
   945   000B9A                     
   946                           ;main.c: 21:     Interrupts_init();
   947   000B9A  ECD9  F010         	call	_Interrupts_init	;wreg free
   948   000B9E                     
   949                           ;main.c: 22:     initDCmotorsPWM(99);
   950   000B9E  0E00               	movlw	0
   951   000BA0  6E0F               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   952   000BA2  0E63               	movlw	99
   953   000BA4  6E0E               	movwf	initDCmotorsPWM@PWMperiod^0,c
   954   000BA6  ECBD  F00C         	call	_initDCmotorsPWM	;wreg free
   955   000BAA                     
   956                           ;main.c: 26:     ANSELFbits.ANSELF2 = 0;
   957   000BAA  010E               	movlb	14	; () banked
   958   000BAC  95B4               	bcf	180,2,b	;volatile
   959   000BAE                     
   960                           ; BSR set to: 14
   961                           ;main.c: 27:     TRISFbits.TRISF2 = 1;
   962   000BAE  8486               	bsf	134,2,c	;volatile
   963   000BB0                     
   964                           ; BSR set to: 14
   965                           ;main.c: 29:     DC_motor motorL, motorR;;main.c: 30:     motorL.power=0;
   966   000BB0  0E00               	movlw	0
   967   000BB2  0101               	movlb	1	; () banked
   968   000BB4  6FA0               	movwf	main@motorL& (0+255),b
   969   000BB6                     
   970                           ; BSR set to: 1
   971                           ;main.c: 31:     motorL.direction=1;
   972   000BB6  0E01               	movlw	1
   973   000BB8  6FA1               	movwf	(main@motorL+1)& (0+255),b
   974   000BBA                     
   975                           ; BSR set to: 1
   976                           ;main.c: 32:     motorL.brakemode=1;
   977   000BBA  0E01               	movlw	1
   978   000BBC  6FA2               	movwf	(main@motorL+2)& (0+255),b
   979   000BBE                     
   980                           ; BSR set to: 1
   981                           ;main.c: 33:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   982   000BBE  0EAA               	movlw	170
   983   000BC0  6FA5               	movwf	(main@motorL+5)& (0+255),b
   984   000BC2  0E0F               	movlw	15
   985   000BC4  6FA6               	movwf	(main@motorL+6)& (0+255),b
   986   000BC6                     
   987                           ; BSR set to: 1
   988                           ;main.c: 34:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   989   000BC6  0EA6               	movlw	166
   990   000BC8  6FA7               	movwf	(main@motorL+7)& (0+255),b
   991   000BCA  0E0F               	movlw	15
   992   000BCC  6FA8               	movwf	(main@motorL+8)& (0+255),b
   993   000BCE                     
   994                           ; BSR set to: 1
   995                           ;main.c: 35:     motorL.PWMperiod=PWMcycle;
   996   000BCE  0E00               	movlw	0
   997   000BD0  6FA4               	movwf	(main@motorL+4)& (0+255),b
   998   000BD2  0E63               	movlw	99
   999   000BD4  6FA3               	movwf	(main@motorL+3)& (0+255),b
  1000   000BD6                     
  1001                           ; BSR set to: 1
  1002                           ;main.c: 37:     motorR.power=0;
  1003   000BD6  0E00               	movlw	0
  1004   000BD8  6FA9               	movwf	main@motorR& (0+255),b
  1005   000BDA                     
  1006                           ; BSR set to: 1
  1007                           ;main.c: 38:     motorR.direction=1;
  1008   000BDA  0E01               	movlw	1
  1009   000BDC  6FAA               	movwf	(main@motorR+1)& (0+255),b
  1010   000BDE                     
  1011                           ; BSR set to: 1
  1012                           ;main.c: 39:     motorR.brakemode=1;
  1013   000BDE  0E01               	movlw	1
  1014   000BE0  6FAB               	movwf	(main@motorR+2)& (0+255),b
  1015   000BE2                     
  1016                           ; BSR set to: 1
  1017                           ;main.c: 40:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1018   000BE2  0E25               	movlw	37
  1019   000BE4  6FAE               	movwf	(main@motorR+5)& (0+255),b
  1020   000BE6  0E0F               	movlw	15
  1021   000BE8  6FAF               	movwf	(main@motorR+6)& (0+255),b
  1022   000BEA                     
  1023                           ; BSR set to: 1
  1024                           ;main.c: 41:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1025   000BEA  0E21               	movlw	33
  1026   000BEC  6FB0               	movwf	(main@motorR+7)& (0+255),b
  1027   000BEE  0E0F               	movlw	15
  1028   000BF0  6FB1               	movwf	(main@motorR+8)& (0+255),b
  1029   000BF2                     
  1030                           ; BSR set to: 1
  1031                           ;main.c: 42:     motorR.PWMperiod=PWMcycle;
  1032   000BF2  0E00               	movlw	0
  1033   000BF4  6FAD               	movwf	(main@motorR+4)& (0+255),b
  1034   000BF6  0E63               	movlw	99
  1035   000BF8  6FAC               	movwf	(main@motorR+3)& (0+255),b
  1036   000BFA                     
  1037                           ; BSR set to: 1
  1038                           ;main.c: 44:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1039   000BFA  0E52               	movlw	82
  1040   000BFC  6E38               	movwf	(??_main+1)^0,c
  1041   000BFE  0E2B               	movlw	43
  1042   000C00  6E37               	movwf	??_main^0,c
  1043   000C02  0E00               	movlw	0
  1044   000C04                     u4047:
  1045   000C04  2EE8               	decfsz	wreg,f,c
  1046   000C06  D7FE               	bra	u4047
  1047   000C08  2E37               	decfsz	??_main^0,f,c
  1048   000C0A  D7FC               	bra	u4047
  1049   000C0C  2E38               	decfsz	(??_main+1)^0,f,c
  1050   000C0E  D7FA               	bra	u4047
  1051   000C10  D000               	nop2	
  1052   000C12                     
  1053                           ;main.c: 45:     fullSpeedAhead(&motorL,&motorR);
  1054   000C12  0EA0               	movlw	low main@motorL
  1055   000C14  6E21               	movwf	fullSpeedAhead@mL^0,c
  1056   000C16  0E01               	movlw	high main@motorL
  1057   000C18  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1058   000C1A  0EA9               	movlw	low main@motorR
  1059   000C1C  6E23               	movwf	fullSpeedAhead@mR^0,c
  1060   000C1E  0E01               	movlw	high main@motorR
  1061   000C20  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1062   000C22  EC53  F00E         	call	_fullSpeedAhead	;wreg free
  1063   000C26                     l4351:
  1064                           
  1065                           ;main.c: 46:     set_wall_detection_mode(1);
  1066   000C26  0E00               	movlw	0
  1067   000C28  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1068   000C2A  0E01               	movlw	1
  1069   000C2C  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1070   000C2E  ECBF  F010         	call	_set_wall_detection_mode	;wreg free
  1071   000C32                     l4353:
  1072                           
  1073                           ;main.c: 48:         int state = get_state();
  1074   000C32  ECE5  F010         	call	_get_state	;wreg free
  1075   000C36  C00E  F19E         	movff	?_get_state,main@state
  1076   000C3A  C00F  F19F         	movff	?_get_state+1,main@state+1
  1077   000C3E                     
  1078                           ;main.c: 49:         if(get_wall_detection() == 1 && state == 0 ){
  1079   000C3E  EC21  F00E         	call	_get_wall_detection	;wreg free
  1080   000C42  0414               	decf	?_get_wall_detection^0,w,c
  1081   000C44  1015               	iorwf	(?_get_wall_detection+1)^0,w,c
  1082   000C46  A4D8               	btfss	status,2,c
  1083   000C48  EF28  F006         	goto	u3641
  1084   000C4C  EF2A  F006         	goto	u3640
  1085   000C50                     u3641:
  1086   000C50  EF88  F006         	goto	l4377
  1087   000C54                     u3640:
  1088   000C54  0101               	movlb	1	; () banked
  1089   000C56  519E               	movf	main@state& (0+255),w,b
  1090   000C58  119F               	iorwf	(main@state+1)& (0+255),w,b
  1091   000C5A  A4D8               	btfss	status,2,c
  1092   000C5C  EF32  F006         	goto	u3651
  1093   000C60  EF34  F006         	goto	u3650
  1094   000C64                     u3651:
  1095   000C64  EF88  F006         	goto	l4377
  1096   000C68                     u3650:
  1097   000C68                     
  1098                           ; BSR set to: 1
  1099                           ;main.c: 50:             set_wall_detection_mode(0);
  1100   000C68  0E00               	movlw	0
  1101   000C6A  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1102   000C6C  0E00               	movlw	0
  1103   000C6E  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1104   000C70  ECBF  F010         	call	_set_wall_detection_mode	;wreg free
  1105   000C74                     
  1106                           ;main.c: 52:             add_seconds_to_list();
  1107   000C74  EC93  F00F         	call	_add_seconds_to_list	;wreg free
  1108   000C78                     
  1109                           ;main.c: 53:             stop(&motorL,&motorR);
  1110   000C78  0EA0               	movlw	low main@motorL
  1111   000C7A  6E21               	movwf	stop@mL^0,c
  1112   000C7C  0E01               	movlw	high main@motorL
  1113   000C7E  6E22               	movwf	(stop@mL+1)^0,c
  1114   000C80  0EA9               	movlw	low main@motorR
  1115   000C82  6E23               	movwf	stop@mR^0,c
  1116   000C84  0E01               	movlw	high main@motorR
  1117   000C86  6E24               	movwf	(stop@mR+1)^0,c
  1118   000C88  EC6E  F00F         	call	_stop	;wreg free
  1119   000C8C                     
  1120                           ;main.c: 54:             unsigned int color_code = get_color_code();
  1121   000C8C  ECF7  F002         	call	_get_color_code	;wreg free
  1122   000C90  C030  F19C         	movff	?_get_color_code,main@color_code
  1123   000C94  C031  F19D         	movff	?_get_color_code+1,main@color_code+1
  1124   000C98                     
  1125                           ;main.c: 55:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1126   000C98  0EA0               	movlw	low main@motorL
  1127   000C9A  6E21               	movwf	TimedfullSpeedAhead@mL^0,c
  1128   000C9C  0E01               	movlw	high main@motorL
  1129   000C9E  6E22               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1130   000CA0  0EA9               	movlw	low main@motorR
  1131   000CA2  6E23               	movwf	TimedfullSpeedAhead@mR^0,c
  1132   000CA4  0E01               	movlw	high main@motorR
  1133   000CA6  6E24               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1134   000CA8  0E00               	movlw	0
  1135   000CAA  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1136   000CAC  0E05               	movlw	5
  1137   000CAE  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1138   000CB0  EC3F  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1139   000CB4                     
  1140                           ;main.c: 56:             RobotMovement(color_code, &motorL, &motorR);
  1141   000CB4  C19C  F02B         	movff	main@color_code,RobotMovement@color
  1142   000CB8  C19D  F02C         	movff	main@color_code+1,RobotMovement@color+1
  1143   000CBC  0EA0               	movlw	low main@motorL
  1144   000CBE  6E2D               	movwf	RobotMovement@motorL^0,c
  1145   000CC0  0E01               	movlw	high main@motorL
  1146   000CC2  6E2E               	movwf	(RobotMovement@motorL+1)^0,c
  1147   000CC4  0EA9               	movlw	low main@motorR
  1148   000CC6  6E2F               	movwf	RobotMovement@motorR^0,c
  1149   000CC8  0E01               	movlw	high main@motorR
  1150   000CCA  6E30               	movwf	(RobotMovement@motorR+1)^0,c
  1151   000CCC  EC53  F000         	call	_RobotMovement	;wreg free
  1152   000CD0                     
  1153                           ;main.c: 57:             if (state == 0)
  1154   000CD0  0101               	movlb	1	; () banked
  1155   000CD2  519E               	movf	main@state& (0+255),w,b
  1156   000CD4  119F               	iorwf	(main@state+1)& (0+255),w,b
  1157   000CD6  A4D8               	btfss	status,2,c
  1158   000CD8  EF70  F006         	goto	u3661
  1159   000CDC  EF72  F006         	goto	u3660
  1160   000CE0                     u3661:
  1161   000CE0  EF13  F006         	goto	l4351
  1162   000CE4                     u3660:
  1163   000CE4                     
  1164                           ; BSR set to: 1
  1165                           ;main.c: 58:             {;main.c: 59:                 stop(&motorL,&motorR);
  1166   000CE4  0EA0               	movlw	low main@motorL
  1167   000CE6  6E21               	movwf	stop@mL^0,c
  1168   000CE8  0E01               	movlw	high main@motorL
  1169   000CEA  6E22               	movwf	(stop@mL+1)^0,c
  1170   000CEC  0EA9               	movlw	low main@motorR
  1171   000CEE  6E23               	movwf	stop@mR^0,c
  1172   000CF0  0E01               	movlw	high main@motorR
  1173   000CF2  6E24               	movwf	(stop@mR+1)^0,c
  1174   000CF4  EC6E  F00F         	call	_stop	;wreg free
  1175                           
  1176                           ;main.c: 60:                 fullSpeedAhead(&motorL,&motorR);
  1177   000CF8  0EA0               	movlw	low main@motorL
  1178   000CFA  6E21               	movwf	fullSpeedAhead@mL^0,c
  1179   000CFC  0E01               	movlw	high main@motorL
  1180   000CFE  6E22               	movwf	(fullSpeedAhead@mL+1)^0,c
  1181   000D00  0EA9               	movlw	low main@motorR
  1182   000D02  6E23               	movwf	fullSpeedAhead@mR^0,c
  1183   000D04  0E01               	movlw	high main@motorR
  1184   000D06  6E24               	movwf	(fullSpeedAhead@mR+1)^0,c
  1185   000D08  EC53  F00E         	call	_fullSpeedAhead	;wreg free
  1186   000D0C  EF13  F006         	goto	l4351
  1187   000D10                     l4377:
  1188   000D10  0101               	movlb	1	; () banked
  1189   000D12  059E               	decf	main@state& (0+255),w,b
  1190   000D14  119F               	iorwf	(main@state+1)& (0+255),w,b
  1191   000D16  A4D8               	btfss	status,2,c
  1192   000D18  EF90  F006         	goto	u3671
  1193   000D1C  EF92  F006         	goto	u3670
  1194   000D20                     u3671:
  1195   000D20  EF19  F006         	goto	l4353
  1196   000D24                     u3670:
  1197   000D24                     
  1198                           ; BSR set to: 1
  1199                           ;main.c: 65:             set_wall_detection_mode(0);
  1200   000D24  0E00               	movlw	0
  1201   000D26  6E0F               	movwf	(set_wall_detection_mode@mode+1)^0,c
  1202   000D28  0E00               	movlw	0
  1203   000D2A  6E0E               	movwf	set_wall_detection_mode@mode^0,c
  1204   000D2C  ECBF  F010         	call	_set_wall_detection_mode	;wreg free
  1205   000D30                     
  1206                           ;main.c: 66:             return_back(&motorL, &motorR);
  1207   000D30  0EA0               	movlw	low main@motorL
  1208   000D32  6E2B               	movwf	return_back@motorL^0,c
  1209   000D34  0E01               	movlw	high main@motorL
  1210   000D36  6E2C               	movwf	(return_back@motorL+1)^0,c
  1211   000D38  0EA9               	movlw	low main@motorR
  1212   000D3A  6E2D               	movwf	return_back@motorR^0,c
  1213   000D3C  0E01               	movlw	high main@motorR
  1214   000D3E  6E2E               	movwf	(return_back@motorR+1)^0,c
  1215   000D40  ECC6  F004         	call	_return_back	;wreg free
  1216   000D44  EF19  F006         	goto	l4353
  1217   000D48  EF51  F000         	goto	start
  1218   000D4C                     __end_of_main:
  1219                           	callstack 0
  1220                           
  1221 ;; *************** function _set_wall_detection_mode *****************
  1222 ;; Defined at:
  1223 ;;		line 33 in file "color.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  mode            2   13[COMRAM] unsigned int 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1240 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1241 ;;Total ram usage:        2 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 5
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text1
  1252   00217E                     __ptext1:
  1253                           	callstack 0
  1254   00217E                     _set_wall_detection_mode:
  1255                           	callstack 25
  1256   00217E                     
  1257                           ;color.c: 34:     wall_detection_mode = mode;
  1258   00217E  C00E  F0FA         	movff	set_wall_detection_mode@mode,_wall_detection_mode
  1259   002182  C00F  F0FB         	movff	set_wall_detection_mode@mode+1,_wall_detection_mode+1
  1260   002186                     
  1261                           ;color.c: 35:     clear1 = 0;
  1262   002186  0E00               	movlw	0
  1263   002188  6E4E               	movwf	(_clear1+1)^0,c
  1264   00218A  0E00               	movlw	0
  1265   00218C  6E4D               	movwf	_clear1^0,c
  1266                           
  1267                           ;color.c: 36:     clear2 = 0;
  1268   00218E  0E00               	movlw	0
  1269   002190  6E4C               	movwf	(_clear2+1)^0,c
  1270   002192  0E00               	movlw	0
  1271   002194  6E4B               	movwf	_clear2^0,c
  1272   002196  0012               	return		;funcret
  1273   002198                     __end_of_set_wall_detection_mode:
  1274                           	callstack 0
  1275                           
  1276 ;; *************** function _return_back *****************
  1277 ;; Defined at:
  1278 ;;		line 445 in file "dc_motor.c"
  1279 ;; Parameters:    Size  Location     Type
  1280 ;;  motorL          2   42[COMRAM] PTR struct DC_motor
  1281 ;;		 -> main@motorL(9), 
  1282 ;;  motorR          2   44[COMRAM] PTR struct DC_motor
  1283 ;;		 -> main@motorR(9), 
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;		None
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1297 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1299 ;;Total ram usage:        6 bytes
  1300 ;; Hardware stack levels used: 1
  1301 ;; Hardware stack levels required when called: 8
  1302 ;; This function calls:
  1303 ;;		_TimedfullSpeedAhead
  1304 ;;		_moveBack
  1305 ;;		_stop
  1306 ;;		_turnLeft
  1307 ;;		_turnLeftLong
  1308 ;;		_turnRight
  1309 ;;		_turnRightLong
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text2
  1316   00098C                     __ptext2:
  1317                           	callstack 0
  1318   00098C                     _return_back:
  1319                           	callstack 22
  1320   00098C                     
  1321                           ;dc_motor.c: 445: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 446: {;dc_motor.c: 447:     while (index > 0){
  1322   00098C  EFAD  F005         	goto	l322
  1323   000990                     l4265:
  1324                           
  1325                           ;dc_motor.c: 448:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1326   000990  90D8               	bcf	status,0,c
  1327   000992  3447               	rlcf	_index^0,w,c
  1328   000994  6ED9               	movwf	fsr2l,c
  1329   000996  3448               	rlcf	(_index+1)^0,w,c
  1330   000998  6EDA               	movwf	fsr2h,c
  1331   00099A  0EFE               	movlw	low (_movement_list+65534)
  1332   00099C  26D9               	addwf	fsr2l,f,c
  1333   00099E  0E01               	movlw	high (_movement_list+65534)
  1334   0009A0  22DA               	addwfc	fsr2h,f,c
  1335   0009A2  28DE               	incf	postinc2,w,c
  1336   0009A4  E106               	bnz	u3571
  1337   0009A6  28DE               	incf	postinc2,w,c
  1338   0009A8  A4D8               	btfss	status,2,c
  1339   0009AA  EFD9  F004         	goto	u3571
  1340   0009AE  EFDB  F004         	goto	u3570
  1341   0009B2                     u3571:
  1342   0009B2  EFE7  F004         	goto	l4269
  1343   0009B6                     u3570:
  1344   0009B6  C02B  F021         	movff	return_back@motorL,turnLeft@mL
  1345   0009BA  C02C  F022         	movff	return_back@motorL+1,turnLeft@mL+1
  1346   0009BE  C02D  F023         	movff	return_back@motorR,turnLeft@mR
  1347   0009C2  C02E  F024         	movff	return_back@motorR+1,turnLeft@mR+1
  1348   0009C6  EC14  F008         	call	_turnLeft	;wreg free
  1349   0009CA  EFA0  F005         	goto	l4291
  1350   0009CE                     l4269:
  1351   0009CE  90D8               	bcf	status,0,c
  1352   0009D0  3447               	rlcf	_index^0,w,c
  1353   0009D2  6ED9               	movwf	fsr2l,c
  1354   0009D4  3448               	rlcf	(_index+1)^0,w,c
  1355   0009D6  6EDA               	movwf	fsr2h,c
  1356   0009D8  0EFE               	movlw	low (_movement_list+65534)
  1357   0009DA  26D9               	addwf	fsr2l,f,c
  1358   0009DC  0E01               	movlw	high (_movement_list+65534)
  1359   0009DE  22DA               	addwfc	fsr2h,f,c
  1360   0009E0  0EFE               	movlw	254
  1361   0009E2  18DE               	xorwf	postinc2,w,c
  1362   0009E4  E106               	bnz	u3581
  1363   0009E6  28DE               	incf	postinc2,w,c
  1364   0009E8  A4D8               	btfss	status,2,c
  1365   0009EA  EFF9  F004         	goto	u3581
  1366   0009EE  EFFB  F004         	goto	u3580
  1367   0009F2                     u3581:
  1368   0009F2  EF07  F005         	goto	l4273
  1369   0009F6                     u3580:
  1370   0009F6  C02B  F021         	movff	return_back@motorL,turnRight@mL
  1371   0009FA  C02C  F022         	movff	return_back@motorL+1,turnRight@mL+1
  1372   0009FE  C02D  F023         	movff	return_back@motorR,turnRight@mR
  1373   000A02  C02E  F024         	movff	return_back@motorR+1,turnRight@mR+1
  1374   000A06  ECC1  F008         	call	_turnRight	;wreg free
  1375   000A0A  EFA0  F005         	goto	l4291
  1376   000A0E                     l4273:
  1377   000A0E  90D8               	bcf	status,0,c
  1378   000A10  3447               	rlcf	_index^0,w,c
  1379   000A12  6ED9               	movwf	fsr2l,c
  1380   000A14  3448               	rlcf	(_index+1)^0,w,c
  1381   000A16  6EDA               	movwf	fsr2h,c
  1382   000A18  0EFE               	movlw	low (_movement_list+65534)
  1383   000A1A  26D9               	addwf	fsr2l,f,c
  1384   000A1C  0E01               	movlw	high (_movement_list+65534)
  1385   000A1E  22DA               	addwfc	fsr2h,f,c
  1386   000A20  0EFD               	movlw	253
  1387   000A22  18DE               	xorwf	postinc2,w,c
  1388   000A24  E106               	bnz	u3591
  1389   000A26  28DE               	incf	postinc2,w,c
  1390   000A28  A4D8               	btfss	status,2,c
  1391   000A2A  EF19  F005         	goto	u3591
  1392   000A2E  EF1B  F005         	goto	u3590
  1393   000A32                     u3591:
  1394   000A32  EF27  F005         	goto	l4277
  1395   000A36                     u3590:
  1396   000A36  C02B  F021         	movff	return_back@motorL,turnLeftLong@mL
  1397   000A3A  C02C  F022         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1398   000A3E  C02D  F023         	movff	return_back@motorR,turnLeftLong@mR
  1399   000A42  C02E  F024         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1400   000A46  EC35  F00B         	call	_turnLeftLong	;wreg free
  1401   000A4A  EFA0  F005         	goto	l4291
  1402   000A4E                     l4277:
  1403   000A4E  90D8               	bcf	status,0,c
  1404   000A50  3447               	rlcf	_index^0,w,c
  1405   000A52  6ED9               	movwf	fsr2l,c
  1406   000A54  3448               	rlcf	(_index+1)^0,w,c
  1407   000A56  6EDA               	movwf	fsr2h,c
  1408   000A58  0EFE               	movlw	low (_movement_list+65534)
  1409   000A5A  26D9               	addwf	fsr2l,f,c
  1410   000A5C  0E01               	movlw	high (_movement_list+65534)
  1411   000A5E  22DA               	addwfc	fsr2h,f,c
  1412   000A60  0EFC               	movlw	252
  1413   000A62  18DE               	xorwf	postinc2,w,c
  1414   000A64  E106               	bnz	u3601
  1415   000A66  28DE               	incf	postinc2,w,c
  1416   000A68  A4D8               	btfss	status,2,c
  1417   000A6A  EF39  F005         	goto	u3601
  1418   000A6E  EF3B  F005         	goto	u3600
  1419   000A72                     u3601:
  1420   000A72  EF47  F005         	goto	l4281
  1421   000A76                     u3600:
  1422   000A76  C02B  F021         	movff	return_back@motorL,turnRightLong@mL
  1423   000A7A  C02C  F022         	movff	return_back@motorL+1,turnRightLong@mL+1
  1424   000A7E  C02D  F023         	movff	return_back@motorR,turnRightLong@mR
  1425   000A82  C02E  F024         	movff	return_back@motorR+1,turnRightLong@mR+1
  1426   000A86  ECA1  F00A         	call	_turnRightLong	;wreg free
  1427   000A8A  EFA0  F005         	goto	l4291
  1428   000A8E                     l4281:
  1429   000A8E  90D8               	bcf	status,0,c
  1430   000A90  3447               	rlcf	_index^0,w,c
  1431   000A92  6ED9               	movwf	fsr2l,c
  1432   000A94  3448               	rlcf	(_index+1)^0,w,c
  1433   000A96  6EDA               	movwf	fsr2h,c
  1434   000A98  0EFE               	movlw	low (_movement_list+65534)
  1435   000A9A  26D9               	addwf	fsr2l,f,c
  1436   000A9C  0E01               	movlw	high (_movement_list+65534)
  1437   000A9E  22DA               	addwfc	fsr2h,f,c
  1438   000AA0  0E01               	movlw	1
  1439   000AA2  BEDB               	btfsc	plusw2,7,c
  1440   000AA4  EF5D  F005         	goto	u3611
  1441   000AA8  0E01               	movlw	1
  1442   000AAA  50DB               	movf	plusw2,w,c
  1443   000AAC  E108               	bnz	u3610
  1444   000AAE  04DE               	decf	postinc2,w,c
  1445   000AB0  A0D8               	btfss	status,0,c
  1446   000AB2  EF5D  F005         	goto	u3611
  1447   000AB6  EF5F  F005         	goto	u3610
  1448   000ABA                     u3611:
  1449   000ABA  EFA0  F005         	goto	l327
  1450   000ABE                     u3610:
  1451   000ABE                     
  1452                           ;dc_motor.c: 453:         {;dc_motor.c: 454:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1453   000ABE  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1454   000AC2  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1455   000AC6  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1456   000ACA  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1457   000ACE  90D8               	bcf	status,0,c
  1458   000AD0  3447               	rlcf	_index^0,w,c
  1459   000AD2  6ED9               	movwf	fsr2l,c
  1460   000AD4  3448               	rlcf	(_index+1)^0,w,c
  1461   000AD6  6EDA               	movwf	fsr2h,c
  1462   000AD8  0EFE               	movlw	low (_movement_list+65534)
  1463   000ADA  26D9               	addwf	fsr2l,f,c
  1464   000ADC  0E01               	movlw	high (_movement_list+65534)
  1465   000ADE  22DA               	addwfc	fsr2h,f,c
  1466   000AE0  CFDE F025          	movff	postinc2,TimedfullSpeedAhead@time
  1467   000AE4  CFDD F026          	movff	postdec2,TimedfullSpeedAhead@time+1
  1468   000AE8  EC3F  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1469   000AEC                     
  1470                           ;dc_motor.c: 455:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1471   000AEC  0E11               	movlw	17
  1472   000AEE  6E30               	movwf	(??_return_back+1)^0,c
  1473   000AF0  0E3C               	movlw	60
  1474   000AF2  6E2F               	movwf	??_return_back^0,c
  1475   000AF4  0ECB               	movlw	203
  1476   000AF6                     u4057:
  1477   000AF6  2EE8               	decfsz	wreg,f,c
  1478   000AF8  D7FE               	bra	u4057
  1479   000AFA  2E2F               	decfsz	??_return_back^0,f,c
  1480   000AFC  D7FC               	bra	u4057
  1481   000AFE  2E30               	decfsz	(??_return_back+1)^0,f,c
  1482   000B00  D7FA               	bra	u4057
  1483   000B02  F000               	nop	
  1484   000B04                     
  1485                           ;dc_motor.c: 456:             TimedfullSpeedAhead(motorL, motorR, 11);
  1486   000B04  C02B  F021         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1487   000B08  C02C  F022         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1488   000B0C  C02D  F023         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1489   000B10  C02E  F024         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1490   000B14  0E00               	movlw	0
  1491   000B16  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1492   000B18  0E0B               	movlw	11
  1493   000B1A  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  1494   000B1C  EC3F  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1495   000B20                     
  1496                           ;dc_motor.c: 457:             moveBack(motorL, motorR, 11);
  1497   000B20  C02B  F021         	movff	return_back@motorL,moveBack@mL
  1498   000B24  C02C  F022         	movff	return_back@motorL+1,moveBack@mL+1
  1499   000B28  C02D  F023         	movff	return_back@motorR,moveBack@mR
  1500   000B2C  C02E  F024         	movff	return_back@motorR+1,moveBack@mR+1
  1501   000B30  0E00               	movlw	0
  1502   000B32  6E26               	movwf	(moveBack@time+1)^0,c
  1503   000B34  0E0B               	movlw	11
  1504   000B36  6E25               	movwf	moveBack@time^0,c
  1505   000B38  EC05  F00D         	call	_moveBack	;wreg free
  1506   000B3C  EFA0  F005         	goto	l4291
  1507   000B40                     l327:
  1508   000B40                     l4291:
  1509                           
  1510                           ;dc_motor.c: 459:         stop(motorL,motorR);
  1511   000B40  C02B  F021         	movff	return_back@motorL,stop@mL
  1512   000B44  C02C  F022         	movff	return_back@motorL+1,stop@mL+1
  1513   000B48  C02D  F023         	movff	return_back@motorR,stop@mR
  1514   000B4C  C02E  F024         	movff	return_back@motorR+1,stop@mR+1
  1515   000B50  EC6E  F00F         	call	_stop	;wreg free
  1516   000B54                     
  1517                           ;dc_motor.c: 460:         index -= 1;
  1518   000B54  0647               	decf	_index^0,f,c
  1519   000B56  A0D8               	btfss	status,0,c
  1520   000B58  0648               	decf	(_index+1)^0,f,c
  1521   000B5A                     l322:
  1522                           
  1523                           ;dc_motor.c: 447:     while (index > 0){
  1524   000B5A  BE48               	btfsc	(_index+1)^0,7,c
  1525   000B5C  EFBA  F005         	goto	u3620
  1526   000B60  5048               	movf	(_index+1)^0,w,c
  1527   000B62  E106               	bnz	u3621
  1528   000B64  0447               	decf	_index^0,w,c
  1529   000B66  B0D8               	btfsc	status,0,c
  1530   000B68  EFB8  F005         	goto	u3621
  1531   000B6C  EFBA  F005         	goto	u3620
  1532   000B70                     u3621:
  1533   000B70  EFC8  F004         	goto	l4265
  1534   000B74                     u3620:
  1535   000B74                     
  1536                           ;dc_motor.c: 462:     if (index == 0){state = 2;}
  1537   000B74  5047               	movf	_index^0,w,c
  1538   000B76  1048               	iorwf	(_index+1)^0,w,c
  1539   000B78  A4D8               	btfss	status,2,c
  1540   000B7A  EFC1  F005         	goto	u3631
  1541   000B7E  EFC3  F005         	goto	u3630
  1542   000B82                     u3631:
  1543   000B82  EFC8  F005         	goto	l335
  1544   000B86                     u3630:
  1545   000B86  0E00               	movlw	0
  1546   000B88  0100               	movlb	0	; () banked
  1547   000B8A  6FF9               	movwf	(_state+1)& (0+255),b
  1548   000B8C  0E02               	movlw	2
  1549   000B8E  6FF8               	movwf	_state& (0+255),b
  1550   000B90                     l335:
  1551   000B90  0012               	return		;funcret
  1552   000B92                     __end_of_return_back:
  1553                           	callstack 0
  1554                           
  1555 ;; *************** function _initDCmotorsPWM *****************
  1556 ;; Defined at:
  1557 ;;		line 9 in file "dc_motor.c"
  1558 ;; Parameters:    Size  Location     Type
  1559 ;;  PWMperiod       2   13[COMRAM] int 
  1560 ;; Auto vars:     Size  Location     Type
  1561 ;;		None
  1562 ;; Return value:  Size  Location     Type
  1563 ;;                  1    wreg      void 
  1564 ;; Registers used:
  1565 ;;		wreg, status,2
  1566 ;; Tracked objects:
  1567 ;;		On entry : 0/0
  1568 ;;		On exit  : 0/0
  1569 ;;		Unchanged: 0/0
  1570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1571 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1575 ;;Total ram usage:        2 bytes
  1576 ;; Hardware stack levels used: 1
  1577 ;; Hardware stack levels required when called: 5
  1578 ;; This function calls:
  1579 ;;		Nothing
  1580 ;; This function is called by:
  1581 ;;		_main
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text3
  1586   00197A                     __ptext3:
  1587                           	callstack 0
  1588   00197A                     _initDCmotorsPWM:
  1589                           	callstack 25
  1590   00197A                     
  1591                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1592   00197A  9485               	bcf	133,2,c	;volatile
  1593                           
  1594                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1595   00197C  9E83               	bcf	131,7,c	;volatile
  1596                           
  1597                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1598   00197E  9C87               	bcf	135,6,c	;volatile
  1599                           
  1600                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1601   001980  9885               	bcf	133,4,c	;volatile
  1602                           
  1603                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1604   001982  947D               	bcf	125,2,c	;volatile
  1605                           
  1606                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1607   001984  9E7B               	bcf	123,7,c	;volatile
  1608                           
  1609                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1610   001986  9C7F               	bcf	127,6,c	;volatile
  1611                           
  1612                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1613   001988  987D               	bcf	125,4,c	;volatile
  1614   00198A                     
  1615                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1616   00198A  0E05               	movlw	5
  1617   00198C  010E               	movlb	14	; () banked
  1618   00198E  6F74               	movwf	116,b	;volatile
  1619                           
  1620                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1621   001990  0E06               	movlw	6
  1622   001992  6F76               	movwf	118,b	;volatile
  1623                           
  1624                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1625   001994  0E07               	movlw	7
  1626   001996  6F69               	movwf	105,b	;volatile
  1627                           
  1628                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1629   001998  0E08               	movlw	8
  1630   00199A  6F88               	movwf	136,b	;volatile
  1631                           
  1632                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1633   00199C  50BD               	movf	189,w,c	;volatile
  1634   00199E  0B8F               	andlw	-113
  1635   0019A0  0940               	iorlw	64
  1636   0019A2  6EBD               	movwf	189,c	;volatile
  1637                           
  1638                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1639   0019A4  0EE0               	movlw	-32
  1640   0019A6  16BE               	andwf	190,f,c	;volatile
  1641                           
  1642                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1643   0019A8  50BF               	movf	191,w,c	;volatile
  1644   0019AA  0BF0               	andlw	-16
  1645   0019AC  0901               	iorlw	1
  1646   0019AE  6EBF               	movwf	191,c	;volatile
  1647                           
  1648                           ;dc_motor.c: 34:     T2PR=99;
  1649   0019B0  0E63               	movlw	99
  1650   0019B2  6EBC               	movwf	188,c	;volatile
  1651   0019B4                     
  1652                           ; BSR set to: 14
  1653                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1654   0019B4  8EBD               	bsf	189,7,c	;volatile
  1655                           
  1656                           ;dc_motor.c: 39:     CCPR1H=0;
  1657   0019B6  0E00               	movlw	0
  1658   0019B8  6EAA               	movwf	170,c	;volatile
  1659                           
  1660                           ;dc_motor.c: 40:     CCPR2H=0;
  1661   0019BA  0E00               	movlw	0
  1662   0019BC  6EA6               	movwf	166,c	;volatile
  1663                           
  1664                           ;dc_motor.c: 41:     CCPR3H=0;
  1665   0019BE  0E00               	movlw	0
  1666   0019C0  010F               	movlb	15	; () banked
  1667   0019C2  6F25               	movwf	37,b	;volatile
  1668                           
  1669                           ;dc_motor.c: 42:     CCPR4H=0;
  1670   0019C4  0E00               	movlw	0
  1671   0019C6  6F21               	movwf	33,b	;volatile
  1672                           
  1673                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1674   0019C8  0EFC               	movlw	-4
  1675   0019CA  16AD               	andwf	173,f,c	;volatile
  1676                           
  1677                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1678   0019CC  0EF3               	movlw	-13
  1679   0019CE  16AD               	andwf	173,f,c	;volatile
  1680                           
  1681                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1682   0019D0  0ECF               	movlw	-49
  1683   0019D2  16AD               	andwf	173,f,c	;volatile
  1684                           
  1685                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1686   0019D4  0E3F               	movlw	-193
  1687   0019D6  16AD               	andwf	173,f,c	;volatile
  1688   0019D8                     
  1689                           ; BSR set to: 15
  1690                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1691   0019D8  88AB               	bsf	171,4,c	;volatile
  1692                           
  1693                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1694   0019DA  50AB               	movf	171,w,c	;volatile
  1695   0019DC  0BF0               	andlw	-16
  1696   0019DE  090C               	iorlw	12
  1697   0019E0  6EAB               	movwf	171,c	;volatile
  1698   0019E2                     
  1699                           ; BSR set to: 15
  1700                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1701   0019E2  8EAB               	bsf	171,7,c	;volatile
  1702   0019E4                     
  1703                           ; BSR set to: 15
  1704                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1705   0019E4  88A7               	bsf	167,4,c	;volatile
  1706                           
  1707                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1708   0019E6  50A7               	movf	167,w,c	;volatile
  1709   0019E8  0BF0               	andlw	-16
  1710   0019EA  090C               	iorlw	12
  1711   0019EC  6EA7               	movwf	167,c	;volatile
  1712   0019EE                     
  1713                           ; BSR set to: 15
  1714                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1715   0019EE  8EA7               	bsf	167,7,c	;volatile
  1716   0019F0                     
  1717                           ; BSR set to: 15
  1718                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1719   0019F0  8926               	bsf	38,4,b	;volatile
  1720                           
  1721                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1722   0019F2  5126               	movf	38,w,b	;volatile
  1723   0019F4  0BF0               	andlw	-16
  1724   0019F6  090C               	iorlw	12
  1725   0019F8  6F26               	movwf	38,b	;volatile
  1726   0019FA                     
  1727                           ; BSR set to: 15
  1728                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1729   0019FA  8F26               	bsf	38,7,b	;volatile
  1730   0019FC                     
  1731                           ; BSR set to: 15
  1732                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1733   0019FC  8922               	bsf	34,4,b	;volatile
  1734                           
  1735                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1736   0019FE  5122               	movf	34,w,b	;volatile
  1737   001A00  0BF0               	andlw	-16
  1738   001A02  090C               	iorlw	12
  1739   001A04  6F22               	movwf	34,b	;volatile
  1740   001A06                     
  1741                           ; BSR set to: 15
  1742                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1743   001A06  8F22               	bsf	34,7,b	;volatile
  1744   001A08                     
  1745                           ; BSR set to: 15
  1746   001A08  0012               	return		;funcret
  1747   001A0A                     __end_of_initDCmotorsPWM:
  1748                           	callstack 0
  1749                           
  1750 ;; *************** function _get_wall_detection *****************
  1751 ;; Defined at:
  1752 ;;		line 258 in file "color.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  2   19[COMRAM] unsigned int 
  1759 ;; Registers used:
  1760 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1769 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1770 ;;Total ram usage:        2 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 6
  1773 ;; This function calls:
  1774 ;;		___wmul
  1775 ;; This function is called by:
  1776 ;;		_main
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           	psect	text4
  1781   001C42                     __ptext4:
  1782                           	callstack 0
  1783   001C42                     _get_wall_detection:
  1784                           	callstack 24
  1785   001C42                     
  1786                           ;color.c: 259:     if(clear1 == 0 || clear2 == 0){return 0;}
  1787   001C42  504D               	movf	_clear1^0,w,c
  1788   001C44  104E               	iorwf	(_clear1+1)^0,w,c
  1789   001C46  B4D8               	btfsc	status,2,c
  1790   001C48  EF28  F00E         	goto	u3351
  1791   001C4C  EF2A  F00E         	goto	u3350
  1792   001C50                     u3351:
  1793   001C50  EF33  F00E         	goto	l4099
  1794   001C54                     u3350:
  1795   001C54  504B               	movf	_clear2^0,w,c
  1796   001C56  104C               	iorwf	(_clear2+1)^0,w,c
  1797   001C58  A4D8               	btfss	status,2,c
  1798   001C5A  EF31  F00E         	goto	u3361
  1799   001C5E  EF33  F00E         	goto	u3360
  1800   001C62                     u3361:
  1801   001C62  EF39  F00E         	goto	l4103
  1802   001C66                     u3360:
  1803   001C66                     l4099:
  1804   001C66  0E00               	movlw	0
  1805   001C68  6E15               	movwf	(?_get_wall_detection+1)^0,c
  1806   001C6A  0E00               	movlw	0
  1807   001C6C  6E14               	movwf	?_get_wall_detection^0,c
  1808   001C6E  EF52  F00E         	goto	l162
  1809   001C72                     l4103:
  1810                           
  1811                           ;color.c: 260:     return clear2 >= clear1*wall_coef;
  1812   001C72  C04D  F00E         	movff	_clear1,___wmul@multiplier
  1813   001C76  C04E  F00F         	movff	_clear1+1,___wmul@multiplier+1
  1814   001C7A  C0AA  F010         	movff	_wall_coef,___wmul@multiplicand
  1815   001C7E  C0AB  F011         	movff	_wall_coef+1,___wmul@multiplicand+1
  1816   001C82  EC7A  F010         	call	___wmul	;wreg free
  1817   001C86  500E               	movf	?___wmul^0,w,c
  1818   001C88  5C4B               	subwf	_clear2^0,w,c
  1819   001C8A  500F               	movf	(?___wmul+1)^0,w,c
  1820   001C8C  584C               	subwfb	(_clear2+1)^0,w,c
  1821   001C8E  B0D8               	btfsc	status,0,c
  1822   001C90  EF4C  F00E         	goto	u3371
  1823   001C94  EF4F  F00E         	goto	u3370
  1824   001C98                     u3371:
  1825   001C98  0E01               	movlw	1
  1826   001C9A  EF50  F00E         	goto	u3380
  1827   001C9E                     u3370:
  1828   001C9E  0E00               	movlw	0
  1829   001CA0                     u3380:
  1830   001CA0  6E14               	movwf	?_get_wall_detection^0,c
  1831   001CA2  6A15               	clrf	(?_get_wall_detection+1)^0,c
  1832   001CA4                     l162:
  1833   001CA4  0012               	return		;funcret
  1834   001CA6                     __end_of_get_wall_detection:
  1835                           	callstack 0
  1836                           
  1837 ;; *************** function _get_state *****************
  1838 ;; Defined at:
  1839 ;;		line 430 in file "dc_motor.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;		None
  1842 ;; Auto vars:     Size  Location     Type
  1843 ;;		None
  1844 ;; Return value:  Size  Location     Type
  1845 ;;                  2   13[COMRAM] int 
  1846 ;; Registers used:
  1847 ;;		None
  1848 ;; Tracked objects:
  1849 ;;		On entry : 0/0
  1850 ;;		On exit  : 0/0
  1851 ;;		Unchanged: 0/0
  1852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1853 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1856 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1857 ;;Total ram usage:        2 bytes
  1858 ;; Hardware stack levels used: 1
  1859 ;; Hardware stack levels required when called: 5
  1860 ;; This function calls:
  1861 ;;		Nothing
  1862 ;; This function is called by:
  1863 ;;		_main
  1864 ;; This function uses a non-reentrant model
  1865 ;;
  1866                           
  1867                           	psect	text5
  1868   0021CA                     __ptext5:
  1869                           	callstack 0
  1870   0021CA                     _get_state:
  1871                           	callstack 25
  1872   0021CA                     
  1873                           ;dc_motor.c: 432:     return state;
  1874   0021CA  C0F8  F00E         	movff	_state,?_get_state
  1875   0021CE  C0F9  F00F         	movff	_state+1,?_get_state+1
  1876   0021D2  0012               	return		;funcret
  1877   0021D4                     __end_of_get_state:
  1878                           	callstack 0
  1879                           
  1880 ;; *************** function _get_color_code *****************
  1881 ;; Defined at:
  1882 ;;		line 189 in file "color.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;		None
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  value           2   46[BANK0 ] unsigned int 
  1887 ;;  i               2   48[BANK0 ] unsigned int 
  1888 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  1889 ;;  min_index       2   44[BANK0 ] unsigned int 
  1890 ;;  min_value       2   42[BANK0 ] unsigned int 
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  2   47[COMRAM] unsigned int 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1901 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1902 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1903 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1904 ;;Total ram usage:       48 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 8
  1907 ;; This function calls:
  1908 ;;		___lldiv
  1909 ;;		___lmul
  1910 ;;		___wmul
  1911 ;;		_color_read_Blue
  1912 ;;		_color_read_Green
  1913 ;;		_color_read_Red
  1914 ;;		_get_color_distance
  1915 ;;		_set_led_color
  1916 ;; This function is called by:
  1917 ;;		_main
  1918 ;; This function uses a non-reentrant model
  1919 ;;
  1920                           
  1921                           	psect	text6
  1922   0005EE                     __ptext6:
  1923                           	callstack 0
  1924   0005EE                     _get_color_code:
  1925                           	callstack 22
  1926   0005EE                     
  1927                           ;color.c: 193:     set_led_color(0b100);
  1928   0005EE  0E00               	movlw	0
  1929   0005F0  6E0F               	movwf	(set_led_color@color+1)^0,c
  1930   0005F2  0E04               	movlw	4
  1931   0005F4  6E0E               	movwf	set_led_color@color^0,c
  1932   0005F6  ECB7  F00F         	call	_set_led_color	;wreg free
  1933   0005FA                     
  1934                           ;color.c: 194:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1935   0005FA  0E12               	movlw	18
  1936   0005FC  6E33               	movwf	(??_get_color_code+1)^0,c
  1937   0005FE  0EDC               	movlw	220
  1938   000600  6E32               	movwf	??_get_color_code^0,c
  1939   000602  0E60               	movlw	96
  1940   000604                     u4067:
  1941   000604  2EE8               	decfsz	wreg,f,c
  1942   000606  D7FE               	bra	u4067
  1943   000608  2E32               	decfsz	??_get_color_code^0,f,c
  1944   00060A  D7FC               	bra	u4067
  1945   00060C  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  1946   00060E  D7FA               	bra	u4067
  1947   000610                     
  1948                           ;color.c: 195:     RGB.R = color_read_Red();
  1949   000610  EC80  F00E         	call	_color_read_Red	;wreg free
  1950   000614  C012  F0EA         	movff	?_color_read_Red,_RGB
  1951   000618  C013  F0EB         	movff	?_color_read_Red+1,_RGB+1
  1952   00061C  0100               	movlb	0	; () banked
  1953   00061E  6BEC               	clrf	(_RGB+2)& (0+255),b
  1954   000620  6BED               	clrf	(_RGB+3)& (0+255),b
  1955   000622                     
  1956                           ; BSR set to: 0
  1957                           ;color.c: 196:     set_led_color(0b010);
  1958   000622  0E00               	movlw	0
  1959   000624  6E0F               	movwf	(set_led_color@color+1)^0,c
  1960   000626  0E02               	movlw	2
  1961   000628  6E0E               	movwf	set_led_color@color^0,c
  1962   00062A  ECB7  F00F         	call	_set_led_color	;wreg free
  1963   00062E                     
  1964                           ;color.c: 197:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1965   00062E  0E12               	movlw	18
  1966   000630  6E33               	movwf	(??_get_color_code+1)^0,c
  1967   000632  0EDC               	movlw	220
  1968   000634  6E32               	movwf	??_get_color_code^0,c
  1969   000636  0E60               	movlw	96
  1970   000638                     u4077:
  1971   000638  2EE8               	decfsz	wreg,f,c
  1972   00063A  D7FE               	bra	u4077
  1973   00063C  2E32               	decfsz	??_get_color_code^0,f,c
  1974   00063E  D7FC               	bra	u4077
  1975   000640  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  1976   000642  D7FA               	bra	u4077
  1977                           
  1978                           ;color.c: 198:     RGB.G = color_read_Green();
  1979   000644  ECA8  F00E         	call	_color_read_Green	;wreg free
  1980   000648  C012  F0EE         	movff	?_color_read_Green,_RGB+4
  1981   00064C  C013  F0EF         	movff	?_color_read_Green+1,_RGB+5
  1982   000650  0100               	movlb	0	; () banked
  1983   000652  6BF0               	clrf	(_RGB+6)& (0+255),b
  1984   000654  6BF1               	clrf	(_RGB+7)& (0+255),b
  1985   000656                     
  1986                           ; BSR set to: 0
  1987                           ;color.c: 199:     set_led_color(0b001);
  1988   000656  0E00               	movlw	0
  1989   000658  6E0F               	movwf	(set_led_color@color+1)^0,c
  1990   00065A  0E01               	movlw	1
  1991   00065C  6E0E               	movwf	set_led_color@color^0,c
  1992   00065E  ECB7  F00F         	call	_set_led_color	;wreg free
  1993   000662                     
  1994                           ;color.c: 200:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1995   000662  0E12               	movlw	18
  1996   000664  6E33               	movwf	(??_get_color_code+1)^0,c
  1997   000666  0EDC               	movlw	220
  1998   000668  6E32               	movwf	??_get_color_code^0,c
  1999   00066A  0E60               	movlw	96
  2000   00066C                     u4087:
  2001   00066C  2EE8               	decfsz	wreg,f,c
  2002   00066E  D7FE               	bra	u4087
  2003   000670  2E32               	decfsz	??_get_color_code^0,f,c
  2004   000672  D7FC               	bra	u4087
  2005   000674  2E33               	decfsz	(??_get_color_code+1)^0,f,c
  2006   000676  D7FA               	bra	u4087
  2007   000678                     
  2008                           ;color.c: 201:     RGB.B = color_read_Blue();
  2009   000678  ECF8  F00E         	call	_color_read_Blue	;wreg free
  2010   00067C  C012  F0F2         	movff	?_color_read_Blue,_RGB+8
  2011   000680  C013  F0F3         	movff	?_color_read_Blue+1,_RGB+9
  2012   000684  0100               	movlb	0	; () banked
  2013   000686  6BF4               	clrf	(_RGB+10)& (0+255),b
  2014   000688  6BF5               	clrf	(_RGB+11)& (0+255),b
  2015   00068A                     
  2016                           ; BSR set to: 0
  2017                           ;color.c: 202:     set_led_color(0b000);
  2018   00068A  0E00               	movlw	0
  2019   00068C  6E0F               	movwf	(set_led_color@color+1)^0,c
  2020   00068E  0E00               	movlw	0
  2021   000690  6E0E               	movwf	set_led_color@color^0,c
  2022   000692  ECB7  F00F         	call	_set_led_color	;wreg free
  2023   000696                     
  2024                           ;color.c: 204:     struct RGB_val NormalizedRGB;;color.c: 205:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  2025   000696  5039               	movf	_Black_setup^0,w,c
  2026   000698  0100               	movlb	0	; () banked
  2027   00069A  5DEA               	subwf	_RGB& (0+255),w,b
  2028   00069C  503A               	movf	(_Black_setup+1)^0,w,c
  2029   00069E  59EB               	subwfb	(_RGB+1)& (0+255),w,b
  2030   0006A0  503B               	movf	(_Black_setup+2)^0,w,c
  2031   0006A2  59EC               	subwfb	(_RGB+2)& (0+255),w,b
  2032   0006A4  503C               	movf	(_Black_setup+3)^0,w,c
  2033   0006A6  59ED               	subwfb	(_RGB+3)& (0+255),w,b
  2034   0006A8  B0D8               	btfsc	status,0,c
  2035   0006AA  EF59  F003         	goto	u3251
  2036   0006AE  EF5B  F003         	goto	u3250
  2037   0006B2                     u3251:
  2038   0006B2  EF65  F003         	goto	l4053
  2039   0006B6                     u3250:
  2040   0006B6                     
  2041                           ; BSR set to: 0
  2042   0006B6  0E00               	movlw	0
  2043   0006B8  6FCA               	movwf	_get_color_code$464& (0+255),b
  2044   0006BA  0E00               	movlw	0
  2045   0006BC  6FCB               	movwf	(_get_color_code$464+1)& (0+255),b
  2046   0006BE  0E00               	movlw	0
  2047   0006C0  6FCC               	movwf	(_get_color_code$464+2)& (0+255),b
  2048   0006C2  0E00               	movlw	0
  2049   0006C4  6FCD               	movwf	(_get_color_code$464+3)& (0+255),b
  2050   0006C6  EF9A  F003         	goto	l4055
  2051   0006CA                     l4053:
  2052                           
  2053                           ; BSR set to: 0
  2054   0006CA  5039               	movf	_Black_setup^0,w,c
  2055   0006CC  5DEA               	subwf	_RGB& (0+255),w,b
  2056   0006CE  6E0E               	movwf	___lmul@multiplier^0,c
  2057   0006D0  503A               	movf	(_Black_setup+1)^0,w,c
  2058   0006D2  59EB               	subwfb	(_RGB+1)& (0+255),w,b
  2059   0006D4  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2060   0006D6  503B               	movf	(_Black_setup+2)^0,w,c
  2061   0006D8  59EC               	subwfb	(_RGB+2)& (0+255),w,b
  2062   0006DA  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2063   0006DC  503C               	movf	(_Black_setup+3)^0,w,c
  2064   0006DE  59ED               	subwfb	(_RGB+3)& (0+255),w,b
  2065   0006E0  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2066   0006E2  0E64               	movlw	100
  2067   0006E4  6E12               	movwf	___lmul@multiplicand^0,c
  2068   0006E6  0E00               	movlw	0
  2069   0006E8  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2070   0006EA  0E00               	movlw	0
  2071   0006EC  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2072   0006EE  0E00               	movlw	0
  2073   0006F0  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2074   0006F2  ECEC  F00D         	call	___lmul	;wreg free
  2075   0006F6  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2076   0006FA  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2077   0006FE  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2078   000702  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2079   000706  5039               	movf	_Black_setup^0,w,c
  2080   000708  0100               	movlb	0	; () banked
  2081   00070A  5D60               	subwf	_White_setup& (0+255),w,b
  2082   00070C  6E1E               	movwf	___lldiv@divisor^0,c
  2083   00070E  503A               	movf	(_Black_setup+1)^0,w,c
  2084   000710  5961               	subwfb	(_White_setup+1)& (0+255),w,b
  2085   000712  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2086   000714  503B               	movf	(_Black_setup+2)^0,w,c
  2087   000716  5962               	subwfb	(_White_setup+2)& (0+255),w,b
  2088   000718  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2089   00071A  503C               	movf	(_Black_setup+3)^0,w,c
  2090   00071C  5963               	subwfb	(_White_setup+3)& (0+255),w,b
  2091   00071E  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2092   000720  EC1E  F00C         	call	___lldiv	;wreg free
  2093   000724  C01A  F0CA         	movff	?___lldiv,_get_color_code$464
  2094   000728  C01B  F0CB         	movff	?___lldiv+1,_get_color_code$464+1
  2095   00072C  C01C  F0CC         	movff	?___lldiv+2,_get_color_code$464+2
  2096   000730  C01D  F0CD         	movff	?___lldiv+3,_get_color_code$464+3
  2097   000734                     l4055:
  2098   000734  C0CA  F0DE         	movff	_get_color_code$464,get_color_code@NormalizedRGB
  2099   000738  C0CB  F0DF         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+1
  2100   00073C  C0CC  F0E0         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+2
  2101   000740  C0CD  F0E1         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+3
  2102   000744                     
  2103                           ;color.c: 206:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2104   000744  503D               	movf	(_Black_setup+4)^0,w,c
  2105   000746  0100               	movlb	0	; () banked
  2106   000748  5DEE               	subwf	(_RGB+4)& (0+255),w,b
  2107   00074A  503E               	movf	(_Black_setup+5)^0,w,c
  2108   00074C  59EF               	subwfb	(_RGB+5)& (0+255),w,b
  2109   00074E  503F               	movf	(_Black_setup+6)^0,w,c
  2110   000750  59F0               	subwfb	(_RGB+6)& (0+255),w,b
  2111   000752  5040               	movf	(_Black_setup+7)^0,w,c
  2112   000754  59F1               	subwfb	(_RGB+7)& (0+255),w,b
  2113   000756  B0D8               	btfsc	status,0,c
  2114   000758  EFB0  F003         	goto	u3261
  2115   00075C  EFB2  F003         	goto	u3260
  2116   000760                     u3261:
  2117   000760  EFBC  F003         	goto	l4061
  2118   000764                     u3260:
  2119   000764                     
  2120                           ; BSR set to: 0
  2121   000764  0E00               	movlw	0
  2122   000766  6FCE               	movwf	_get_color_code$465& (0+255),b
  2123   000768  0E00               	movlw	0
  2124   00076A  6FCF               	movwf	(_get_color_code$465+1)& (0+255),b
  2125   00076C  0E00               	movlw	0
  2126   00076E  6FD0               	movwf	(_get_color_code$465+2)& (0+255),b
  2127   000770  0E00               	movlw	0
  2128   000772  6FD1               	movwf	(_get_color_code$465+3)& (0+255),b
  2129   000774  EFF1  F003         	goto	l4063
  2130   000778                     l4061:
  2131                           
  2132                           ; BSR set to: 0
  2133   000778  503D               	movf	(_Black_setup+4)^0,w,c
  2134   00077A  5DEE               	subwf	(_RGB+4)& (0+255),w,b
  2135   00077C  6E0E               	movwf	___lmul@multiplier^0,c
  2136   00077E  503E               	movf	(_Black_setup+5)^0,w,c
  2137   000780  59EF               	subwfb	(_RGB+5)& (0+255),w,b
  2138   000782  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2139   000784  503F               	movf	(_Black_setup+6)^0,w,c
  2140   000786  59F0               	subwfb	(_RGB+6)& (0+255),w,b
  2141   000788  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2142   00078A  5040               	movf	(_Black_setup+7)^0,w,c
  2143   00078C  59F1               	subwfb	(_RGB+7)& (0+255),w,b
  2144   00078E  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2145   000790  0E64               	movlw	100
  2146   000792  6E12               	movwf	___lmul@multiplicand^0,c
  2147   000794  0E00               	movlw	0
  2148   000796  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2149   000798  0E00               	movlw	0
  2150   00079A  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2151   00079C  0E00               	movlw	0
  2152   00079E  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2153   0007A0  ECEC  F00D         	call	___lmul	;wreg free
  2154   0007A4  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2155   0007A8  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2156   0007AC  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2157   0007B0  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2158   0007B4  503D               	movf	(_Black_setup+4)^0,w,c
  2159   0007B6  0100               	movlb	0	; () banked
  2160   0007B8  5D64               	subwf	(_White_setup+4)& (0+255),w,b
  2161   0007BA  6E1E               	movwf	___lldiv@divisor^0,c
  2162   0007BC  503E               	movf	(_Black_setup+5)^0,w,c
  2163   0007BE  5965               	subwfb	(_White_setup+5)& (0+255),w,b
  2164   0007C0  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2165   0007C2  503F               	movf	(_Black_setup+6)^0,w,c
  2166   0007C4  5966               	subwfb	(_White_setup+6)& (0+255),w,b
  2167   0007C6  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2168   0007C8  5040               	movf	(_Black_setup+7)^0,w,c
  2169   0007CA  5967               	subwfb	(_White_setup+7)& (0+255),w,b
  2170   0007CC  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2171   0007CE  EC1E  F00C         	call	___lldiv	;wreg free
  2172   0007D2  C01A  F0CE         	movff	?___lldiv,_get_color_code$465
  2173   0007D6  C01B  F0CF         	movff	?___lldiv+1,_get_color_code$465+1
  2174   0007DA  C01C  F0D0         	movff	?___lldiv+2,_get_color_code$465+2
  2175   0007DE  C01D  F0D1         	movff	?___lldiv+3,_get_color_code$465+3
  2176   0007E2                     l4063:
  2177   0007E2  C0CE  F0E2         	movff	_get_color_code$465,get_color_code@NormalizedRGB+4
  2178   0007E6  C0CF  F0E3         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+5
  2179   0007EA  C0D0  F0E4         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+6
  2180   0007EE  C0D1  F0E5         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+7
  2181   0007F2                     
  2182                           ;color.c: 207:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2183   0007F2  5041               	movf	(_Black_setup+8)^0,w,c
  2184   0007F4  0100               	movlb	0	; () banked
  2185   0007F6  5DF2               	subwf	(_RGB+8)& (0+255),w,b
  2186   0007F8  5042               	movf	(_Black_setup+9)^0,w,c
  2187   0007FA  59F3               	subwfb	(_RGB+9)& (0+255),w,b
  2188   0007FC  5043               	movf	(_Black_setup+10)^0,w,c
  2189   0007FE  59F4               	subwfb	(_RGB+10)& (0+255),w,b
  2190   000800  5044               	movf	(_Black_setup+11)^0,w,c
  2191   000802  59F5               	subwfb	(_RGB+11)& (0+255),w,b
  2192   000804  B0D8               	btfsc	status,0,c
  2193   000806  EF07  F004         	goto	u3271
  2194   00080A  EF09  F004         	goto	u3270
  2195   00080E                     u3271:
  2196   00080E  EF13  F004         	goto	l4069
  2197   000812                     u3270:
  2198   000812                     
  2199                           ; BSR set to: 0
  2200   000812  0E00               	movlw	0
  2201   000814  6FD2               	movwf	_get_color_code$466& (0+255),b
  2202   000816  0E00               	movlw	0
  2203   000818  6FD3               	movwf	(_get_color_code$466+1)& (0+255),b
  2204   00081A  0E00               	movlw	0
  2205   00081C  6FD4               	movwf	(_get_color_code$466+2)& (0+255),b
  2206   00081E  0E00               	movlw	0
  2207   000820  6FD5               	movwf	(_get_color_code$466+3)& (0+255),b
  2208   000822  EF48  F004         	goto	l4071
  2209   000826                     l4069:
  2210                           
  2211                           ; BSR set to: 0
  2212   000826  5041               	movf	(_Black_setup+8)^0,w,c
  2213   000828  5DF2               	subwf	(_RGB+8)& (0+255),w,b
  2214   00082A  6E0E               	movwf	___lmul@multiplier^0,c
  2215   00082C  5042               	movf	(_Black_setup+9)^0,w,c
  2216   00082E  59F3               	subwfb	(_RGB+9)& (0+255),w,b
  2217   000830  6E0F               	movwf	(___lmul@multiplier+1)^0,c
  2218   000832  5043               	movf	(_Black_setup+10)^0,w,c
  2219   000834  59F4               	subwfb	(_RGB+10)& (0+255),w,b
  2220   000836  6E10               	movwf	(___lmul@multiplier+2)^0,c
  2221   000838  5044               	movf	(_Black_setup+11)^0,w,c
  2222   00083A  59F5               	subwfb	(_RGB+11)& (0+255),w,b
  2223   00083C  6E11               	movwf	(___lmul@multiplier+3)^0,c
  2224   00083E  0E64               	movlw	100
  2225   000840  6E12               	movwf	___lmul@multiplicand^0,c
  2226   000842  0E00               	movlw	0
  2227   000844  6E13               	movwf	(___lmul@multiplicand+1)^0,c
  2228   000846  0E00               	movlw	0
  2229   000848  6E14               	movwf	(___lmul@multiplicand+2)^0,c
  2230   00084A  0E00               	movlw	0
  2231   00084C  6E15               	movwf	(___lmul@multiplicand+3)^0,c
  2232   00084E  ECEC  F00D         	call	___lmul	;wreg free
  2233   000852  C00E  F01A         	movff	?___lmul,___lldiv@dividend
  2234   000856  C00F  F01B         	movff	?___lmul+1,___lldiv@dividend+1
  2235   00085A  C010  F01C         	movff	?___lmul+2,___lldiv@dividend+2
  2236   00085E  C011  F01D         	movff	?___lmul+3,___lldiv@dividend+3
  2237   000862  5041               	movf	(_Black_setup+8)^0,w,c
  2238   000864  0100               	movlb	0	; () banked
  2239   000866  5D68               	subwf	(_White_setup+8)& (0+255),w,b
  2240   000868  6E1E               	movwf	___lldiv@divisor^0,c
  2241   00086A  5042               	movf	(_Black_setup+9)^0,w,c
  2242   00086C  5969               	subwfb	(_White_setup+9)& (0+255),w,b
  2243   00086E  6E1F               	movwf	(___lldiv@divisor+1)^0,c
  2244   000870  5043               	movf	(_Black_setup+10)^0,w,c
  2245   000872  596A               	subwfb	(_White_setup+10)& (0+255),w,b
  2246   000874  6E20               	movwf	(___lldiv@divisor+2)^0,c
  2247   000876  5044               	movf	(_Black_setup+11)^0,w,c
  2248   000878  596B               	subwfb	(_White_setup+11)& (0+255),w,b
  2249   00087A  6E21               	movwf	(___lldiv@divisor+3)^0,c
  2250   00087C  EC1E  F00C         	call	___lldiv	;wreg free
  2251   000880  C01A  F0D2         	movff	?___lldiv,_get_color_code$466
  2252   000884  C01B  F0D3         	movff	?___lldiv+1,_get_color_code$466+1
  2253   000888  C01C  F0D4         	movff	?___lldiv+2,_get_color_code$466+2
  2254   00088C  C01D  F0D5         	movff	?___lldiv+3,_get_color_code$466+3
  2255   000890                     l4071:
  2256   000890  C0D2  F0E6         	movff	_get_color_code$466,get_color_code@NormalizedRGB+8
  2257   000894  C0D3  F0E7         	movff	_get_color_code$466+1,get_color_code@NormalizedRGB+9
  2258   000898  C0D4  F0E8         	movff	_get_color_code$466+2,get_color_code@NormalizedRGB+10
  2259   00089C  C0D5  F0E9         	movff	_get_color_code$466+3,get_color_code@NormalizedRGB+11
  2260   0008A0                     
  2261                           ;color.c: 209:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2262   0008A0  EE20  F0DE         	lfsr	2,get_color_code@NormalizedRGB
  2263   0008A4  EE00  F014         	lfsr	0,get_color_distance@color1
  2264   0008A8  0E0B               	movlw	11
  2265   0008AA                     u3281:
  2266   0008AA  CFDB FFEB          	movff	plusw2,plusw0
  2267   0008AE  06E8               	decf	wreg,f,c
  2268   0008B0  E2FC               	bc	u3281
  2269   0008B2  EE21  F000         	lfsr	2,_Color_rules
  2270   0008B6  EE00  F020         	lfsr	0,get_color_distance@color2
  2271   0008BA  0E0B               	movlw	11
  2272   0008BC                     u3291:
  2273   0008BC  CFDB FFEB          	movff	plusw2,plusw0
  2274   0008C0  06E8               	decf	wreg,f,c
  2275   0008C2  E2FC               	bc	u3291
  2276   0008C4  ECA6  F006         	call	_get_color_distance	;wreg free
  2277   0008C8  C014  F0D6         	movff	?_get_color_distance,get_color_code@min_value
  2278   0008CC  C015  F0D7         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2279   0008D0                     
  2280                           ;color.c: 210:     unsigned int min_index = 0;
  2281   0008D0  0E00               	movlw	0
  2282   0008D2  0100               	movlb	0	; () banked
  2283   0008D4  6FD9               	movwf	(get_color_code@min_index+1)& (0+255),b
  2284   0008D6  0E00               	movlw	0
  2285   0008D8  6FD8               	movwf	get_color_code@min_index& (0+255),b
  2286   0008DA                     
  2287                           ; BSR set to: 0
  2288                           ;color.c: 211:     for(unsigned int i = 1;i < 9; i++){
  2289   0008DA  0E00               	movlw	0
  2290   0008DC  6FDD               	movwf	(get_color_code@i+1)& (0+255),b
  2291   0008DE  0E01               	movlw	1
  2292   0008E0  6FDC               	movwf	get_color_code@i& (0+255),b
  2293   0008E2                     l4083:
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;color.c: 212:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2297   0008E2  C0DC  F00E         	movff	get_color_code@i,___wmul@multiplier
  2298   0008E6  C0DD  F00F         	movff	get_color_code@i+1,___wmul@multiplier+1
  2299   0008EA  0E00               	movlw	0
  2300   0008EC  6E11               	movwf	(___wmul@multiplicand+1)^0,c
  2301   0008EE  0E0C               	movlw	12
  2302   0008F0  6E10               	movwf	___wmul@multiplicand^0,c
  2303   0008F2  EC7A  F010         	call	___wmul	;wreg free
  2304   0008F6  0E00               	movlw	low _Color_rules
  2305   0008F8  240E               	addwf	?___wmul^0,w,c
  2306   0008FA  6ED9               	movwf	fsr2l,c
  2307   0008FC  0E01               	movlw	high _Color_rules
  2308   0008FE  200F               	addwfc	(?___wmul+1)^0,w,c
  2309   000900  6EDA               	movwf	fsr2h,c
  2310   000902  EE10  F0BE         	lfsr	1,_get_color_code$2460
  2311   000906  0E0B               	movlw	11
  2312   000908                     u3301:
  2313   000908  CFDB FFE3          	movff	plusw2,plusw1
  2314   00090C  06E8               	decf	wreg,f,c
  2315   00090E  E2FC               	bc	u3301
  2316   000910                     
  2317                           ;color.c: 212:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2318   000910  EE20  F0DE         	lfsr	2,get_color_code@NormalizedRGB
  2319   000914  EE00  F014         	lfsr	0,get_color_distance@color1
  2320   000918  0E0B               	movlw	11
  2321   00091A                     u3311:
  2322   00091A  CFDB FFEB          	movff	plusw2,plusw0
  2323   00091E  06E8               	decf	wreg,f,c
  2324   000920  E2FC               	bc	u3311
  2325   000922  EE20  F0BE         	lfsr	2,_get_color_code$2460
  2326   000926  EE00  F020         	lfsr	0,get_color_distance@color2
  2327   00092A  0E0B               	movlw	11
  2328   00092C                     u3321:
  2329   00092C  CFDB FFEB          	movff	plusw2,plusw0
  2330   000930  06E8               	decf	wreg,f,c
  2331   000932  E2FC               	bc	u3321
  2332   000934  ECA6  F006         	call	_get_color_distance	;wreg free
  2333   000938  C014  F0DA         	movff	?_get_color_distance,get_color_code@value
  2334   00093C  C015  F0DB         	movff	?_get_color_distance+1,get_color_code@value+1
  2335   000940                     
  2336                           ;color.c: 213:         if(value < min_value){
  2337   000940  0100               	movlb	0	; () banked
  2338   000942  51D6               	movf	get_color_code@min_value& (0+255),w,b
  2339   000944  5DDA               	subwf	get_color_code@value& (0+255),w,b
  2340   000946  51D7               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2341   000948  59DB               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2342   00094A  B0D8               	btfsc	status,0,c
  2343   00094C  EFAA  F004         	goto	u3331
  2344   000950  EFAC  F004         	goto	u3330
  2345   000954                     u3331:
  2346   000954  EFB4  F004         	goto	l4091
  2347   000958                     u3330:
  2348   000958                     
  2349                           ; BSR set to: 0
  2350                           ;color.c: 214:             min_index = i;
  2351   000958  C0DC  F0D8         	movff	get_color_code@i,get_color_code@min_index
  2352   00095C  C0DD  F0D9         	movff	get_color_code@i+1,get_color_code@min_index+1
  2353                           
  2354                           ;color.c: 215:             min_value = value;
  2355   000960  C0DA  F0D6         	movff	get_color_code@value,get_color_code@min_value
  2356   000964  C0DB  F0D7         	movff	get_color_code@value+1,get_color_code@min_value+1
  2357   000968                     l4091:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;color.c: 217:     }
  2361   000968  4BDC               	infsnz	get_color_code@i& (0+255),f,b
  2362   00096A  2BDD               	incf	(get_color_code@i+1)& (0+255),f,b
  2363   00096C                     
  2364                           ; BSR set to: 0
  2365   00096C  51DD               	movf	(get_color_code@i+1)& (0+255),w,b
  2366   00096E  E109               	bnz	u3340
  2367   000970  0E09               	movlw	9
  2368   000972  5DDC               	subwf	get_color_code@i& (0+255),w,b
  2369   000974  A0D8               	btfss	status,0,c
  2370   000976  EFBF  F004         	goto	u3341
  2371   00097A  EFC1  F004         	goto	u3340
  2372   00097E                     u3341:
  2373   00097E  EF71  F004         	goto	l4083
  2374   000982                     u3340:
  2375   000982                     
  2376                           ; BSR set to: 0
  2377                           ;color.c: 218:     return min_index;
  2378   000982  C0D8  F030         	movff	get_color_code@min_index,?_get_color_code
  2379   000986  C0D9  F031         	movff	get_color_code@min_index+1,?_get_color_code+1
  2380   00098A                     
  2381                           ; BSR set to: 0
  2382   00098A  0012               	return		;funcret
  2383   00098C                     __end_of_get_color_code:
  2384                           	callstack 0
  2385                           
  2386 ;; *************** function _get_color_distance *****************
  2387 ;; Defined at:
  2388 ;;		line 155 in file "color.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;  color1         12   19[COMRAM] struct RGB_val
  2391 ;;  color2         12   31[COMRAM] struct RGB_val
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2394 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2395 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  2   19[COMRAM] unsigned int 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2405 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2406 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2407 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2408 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2409 ;;Total ram usage:       46 bytes
  2410 ;; Hardware stack levels used: 1
  2411 ;; Hardware stack levels required when called: 6
  2412 ;; This function calls:
  2413 ;;		___wmul
  2414 ;; This function is called by:
  2415 ;;		_get_color_code
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text7
  2420   000D4C                     __ptext7:
  2421                           	callstack 0
  2422   000D4C                     _get_color_distance:
  2423                           	callstack 23
  2424   000D4C                     
  2425                           ;color.c: 156:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2426   000D4C  5020               	movf	get_color_distance@color2^0,w,c
  2427   000D4E  5C14               	subwf	get_color_distance@color1^0,w,c
  2428   000D50  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2429   000D52  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2430   000D54  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2431   000D56  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2432   000D58  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2433   000D5A  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2434   000D5C  B0D8               	btfsc	status,0,c
  2435   000D5E  EFB3  F006         	goto	u2911
  2436   000D62  EFB5  F006         	goto	u2910
  2437   000D66                     u2911:
  2438   000D66  EFC4  F006         	goto	l3693
  2439   000D6A                     u2910:
  2440   000D6A  5014               	movf	get_color_distance@color1^0,w,c
  2441   000D6C  5C20               	subwf	get_color_distance@color2^0,w,c
  2442   000D6E  0100               	movlb	0	; () banked
  2443   000D70  6FAC               	movwf	_get_color_distance$422& (0+255),b
  2444   000D72  5015               	movf	(get_color_distance@color1+1)^0,w,c
  2445   000D74  5821               	subwfb	(get_color_distance@color2+1)^0,w,c
  2446   000D76  6FAD               	movwf	(_get_color_distance$422+1)& (0+255),b
  2447   000D78  5016               	movf	(get_color_distance@color1+2)^0,w,c
  2448   000D7A  5822               	subwfb	(get_color_distance@color2+2)^0,w,c
  2449   000D7C  6FAE               	movwf	(_get_color_distance$422+2)& (0+255),b
  2450   000D7E  5017               	movf	(get_color_distance@color1+3)^0,w,c
  2451   000D80  5823               	subwfb	(get_color_distance@color2+3)^0,w,c
  2452   000D82  6FAF               	movwf	(_get_color_distance$422+3)& (0+255),b
  2453   000D84  EFD1  F006         	goto	l3695
  2454   000D88                     l3693:
  2455   000D88  5020               	movf	get_color_distance@color2^0,w,c
  2456   000D8A  5C14               	subwf	get_color_distance@color1^0,w,c
  2457   000D8C  0100               	movlb	0	; () banked
  2458   000D8E  6FAC               	movwf	_get_color_distance$422& (0+255),b
  2459   000D90  5021               	movf	(get_color_distance@color2+1)^0,w,c
  2460   000D92  5815               	subwfb	(get_color_distance@color1+1)^0,w,c
  2461   000D94  6FAD               	movwf	(_get_color_distance$422+1)& (0+255),b
  2462   000D96  5022               	movf	(get_color_distance@color2+2)^0,w,c
  2463   000D98  5816               	subwfb	(get_color_distance@color1+2)^0,w,c
  2464   000D9A  6FAE               	movwf	(_get_color_distance$422+2)& (0+255),b
  2465   000D9C  5023               	movf	(get_color_distance@color2+3)^0,w,c
  2466   000D9E  5817               	subwfb	(get_color_distance@color1+3)^0,w,c
  2467   000DA0  6FAF               	movwf	(_get_color_distance$422+3)& (0+255),b
  2468   000DA2                     l3695:
  2469                           
  2470                           ; BSR set to: 0
  2471   000DA2  C0AC  F0B8         	movff	_get_color_distance$422,get_color_distance@R_offset
  2472   000DA6  C0AD  F0B9         	movff	_get_color_distance$422+1,get_color_distance@R_offset+1
  2473                           
  2474                           ;color.c: 157:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2475   000DAA  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2476   000DAC  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2477   000DAE  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2478   000DB0  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2479   000DB2  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2480   000DB4  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2481   000DB6  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2482   000DB8  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2483   000DBA  B0D8               	btfsc	status,0,c
  2484   000DBC  EFE2  F006         	goto	u2921
  2485   000DC0  EFE4  F006         	goto	u2920
  2486   000DC4                     u2921:
  2487   000DC4  EFF2  F006         	goto	l3699
  2488   000DC8                     u2920:
  2489   000DC8                     
  2490                           ; BSR set to: 0
  2491   000DC8  5018               	movf	(get_color_distance@color1+4)^0,w,c
  2492   000DCA  5C24               	subwf	(get_color_distance@color2+4)^0,w,c
  2493   000DCC  6FB0               	movwf	_get_color_distance$424& (0+255),b
  2494   000DCE  5019               	movf	(get_color_distance@color1+5)^0,w,c
  2495   000DD0  5825               	subwfb	(get_color_distance@color2+5)^0,w,c
  2496   000DD2  6FB1               	movwf	(_get_color_distance$424+1)& (0+255),b
  2497   000DD4  501A               	movf	(get_color_distance@color1+6)^0,w,c
  2498   000DD6  5826               	subwfb	(get_color_distance@color2+6)^0,w,c
  2499   000DD8  6FB2               	movwf	(_get_color_distance$424+2)& (0+255),b
  2500   000DDA  501B               	movf	(get_color_distance@color1+7)^0,w,c
  2501   000DDC  5827               	subwfb	(get_color_distance@color2+7)^0,w,c
  2502   000DDE  6FB3               	movwf	(_get_color_distance$424+3)& (0+255),b
  2503   000DE0  EFFE  F006         	goto	l3701
  2504   000DE4                     l3699:
  2505                           
  2506                           ; BSR set to: 0
  2507   000DE4  5024               	movf	(get_color_distance@color2+4)^0,w,c
  2508   000DE6  5C18               	subwf	(get_color_distance@color1+4)^0,w,c
  2509   000DE8  6FB0               	movwf	_get_color_distance$424& (0+255),b
  2510   000DEA  5025               	movf	(get_color_distance@color2+5)^0,w,c
  2511   000DEC  5819               	subwfb	(get_color_distance@color1+5)^0,w,c
  2512   000DEE  6FB1               	movwf	(_get_color_distance$424+1)& (0+255),b
  2513   000DF0  5026               	movf	(get_color_distance@color2+6)^0,w,c
  2514   000DF2  581A               	subwfb	(get_color_distance@color1+6)^0,w,c
  2515   000DF4  6FB2               	movwf	(_get_color_distance$424+2)& (0+255),b
  2516   000DF6  5027               	movf	(get_color_distance@color2+7)^0,w,c
  2517   000DF8  581B               	subwfb	(get_color_distance@color1+7)^0,w,c
  2518   000DFA  6FB3               	movwf	(_get_color_distance$424+3)& (0+255),b
  2519   000DFC                     l3701:
  2520                           
  2521                           ; BSR set to: 0
  2522   000DFC  C0B0  F0BA         	movff	_get_color_distance$424,get_color_distance@G_offset
  2523   000E00  C0B1  F0BB         	movff	_get_color_distance$424+1,get_color_distance@G_offset+1
  2524                           
  2525                           ;color.c: 158:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2526   000E04  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2527   000E06  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2528   000E08  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2529   000E0A  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2530   000E0C  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2531   000E0E  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2532   000E10  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2533   000E12  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2534   000E14  B0D8               	btfsc	status,0,c
  2535   000E16  EF0F  F007         	goto	u2931
  2536   000E1A  EF11  F007         	goto	u2930
  2537   000E1E                     u2931:
  2538   000E1E  EF1F  F007         	goto	l3705
  2539   000E22                     u2930:
  2540   000E22                     
  2541                           ; BSR set to: 0
  2542   000E22  501C               	movf	(get_color_distance@color1+8)^0,w,c
  2543   000E24  5C28               	subwf	(get_color_distance@color2+8)^0,w,c
  2544   000E26  6FB4               	movwf	_get_color_distance$426& (0+255),b
  2545   000E28  501D               	movf	(get_color_distance@color1+9)^0,w,c
  2546   000E2A  5829               	subwfb	(get_color_distance@color2+9)^0,w,c
  2547   000E2C  6FB5               	movwf	(_get_color_distance$426+1)& (0+255),b
  2548   000E2E  501E               	movf	(get_color_distance@color1+10)^0,w,c
  2549   000E30  582A               	subwfb	(get_color_distance@color2+10)^0,w,c
  2550   000E32  6FB6               	movwf	(_get_color_distance$426+2)& (0+255),b
  2551   000E34  501F               	movf	(get_color_distance@color1+11)^0,w,c
  2552   000E36  582B               	subwfb	(get_color_distance@color2+11)^0,w,c
  2553   000E38  6FB7               	movwf	(_get_color_distance$426+3)& (0+255),b
  2554   000E3A  EF2B  F007         	goto	l3707
  2555   000E3E                     l3705:
  2556                           
  2557                           ; BSR set to: 0
  2558   000E3E  5028               	movf	(get_color_distance@color2+8)^0,w,c
  2559   000E40  5C1C               	subwf	(get_color_distance@color1+8)^0,w,c
  2560   000E42  6FB4               	movwf	_get_color_distance$426& (0+255),b
  2561   000E44  5029               	movf	(get_color_distance@color2+9)^0,w,c
  2562   000E46  581D               	subwfb	(get_color_distance@color1+9)^0,w,c
  2563   000E48  6FB5               	movwf	(_get_color_distance$426+1)& (0+255),b
  2564   000E4A  502A               	movf	(get_color_distance@color2+10)^0,w,c
  2565   000E4C  581E               	subwfb	(get_color_distance@color1+10)^0,w,c
  2566   000E4E  6FB6               	movwf	(_get_color_distance$426+2)& (0+255),b
  2567   000E50  502B               	movf	(get_color_distance@color2+11)^0,w,c
  2568   000E52  581F               	subwfb	(get_color_distance@color1+11)^0,w,c
  2569   000E54  6FB7               	movwf	(_get_color_distance$426+3)& (0+255),b
  2570   000E56                     l3707:
  2571                           
  2572                           ; BSR set to: 0
  2573   000E56  C0B4  F0BC         	movff	_get_color_distance$426,get_color_distance@B_offset
  2574   000E5A  C0B5  F0BD         	movff	_get_color_distance$426+1,get_color_distance@B_offset+1
  2575   000E5E                     
  2576                           ; BSR set to: 0
  2577                           ;color.c: 160:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2578   000E5E  C0B8  F00E         	movff	get_color_distance@R_offset,___wmul@multiplier
  2579   000E62  C0B9  F00F         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2580   000E66  C0B8  F010         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2581   000E6A  C0B9  F011         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2582   000E6E  EC7A  F010         	call	___wmul	;wreg free
  2583   000E72  C00E  F02C         	movff	?___wmul,??_get_color_distance
  2584   000E76  C00F  F02D         	movff	?___wmul+1,??_get_color_distance+1
  2585   000E7A  C0BA  F00E         	movff	get_color_distance@G_offset,___wmul@multiplier
  2586   000E7E  C0BB  F00F         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2587   000E82  C0BA  F010         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2588   000E86  C0BB  F011         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2589   000E8A  EC7A  F010         	call	___wmul	;wreg free
  2590   000E8E  500E               	movf	?___wmul^0,w,c
  2591   000E90  242C               	addwf	??_get_color_distance^0,w,c
  2592   000E92  6E2E               	movwf	(??_get_color_distance+2)^0,c
  2593   000E94  500F               	movf	(?___wmul+1)^0,w,c
  2594   000E96  202D               	addwfc	(??_get_color_distance+1)^0,w,c
  2595   000E98  6E2F               	movwf	(??_get_color_distance+3)^0,c
  2596   000E9A  C0BC  F00E         	movff	get_color_distance@B_offset,___wmul@multiplier
  2597   000E9E  C0BD  F00F         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2598   000EA2  C0BC  F010         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2599   000EA6  C0BD  F011         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2600   000EAA  EC7A  F010         	call	___wmul	;wreg free
  2601   000EAE  500E               	movf	?___wmul^0,w,c
  2602   000EB0  242E               	addwf	(??_get_color_distance+2)^0,w,c
  2603   000EB2  6E14               	movwf	?_get_color_distance^0,c
  2604   000EB4  500F               	movf	(?___wmul+1)^0,w,c
  2605   000EB6  202F               	addwfc	(??_get_color_distance+3)^0,w,c
  2606   000EB8  6E15               	movwf	(?_get_color_distance+1)^0,c
  2607   000EBA  0012               	return		;funcret
  2608   000EBC                     __end_of_get_color_distance:
  2609                           	callstack 0
  2610                           
  2611 ;; *************** function ___lmul *****************
  2612 ;; Defined at:
  2613 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  multiplier      4   13[COMRAM] unsigned long 
  2616 ;;  multiplicand    4   17[COMRAM] unsigned long 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  product         4   21[COMRAM] unsigned long 
  2619 ;; Return value:  Size  Location     Type
  2620 ;;                  4   13[COMRAM] unsigned long 
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2628 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2629 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2631 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2632 ;;Total ram usage:       12 bytes
  2633 ;; Hardware stack levels used: 1
  2634 ;; Hardware stack levels required when called: 5
  2635 ;; This function calls:
  2636 ;;		Nothing
  2637 ;; This function is called by:
  2638 ;;		_get_color_code
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           	psect	text8
  2643   001BD8                     __ptext8:
  2644                           	callstack 0
  2645   001BD8                     ___lmul:
  2646                           	callstack 24
  2647   001BD8  0E00               	movlw	0
  2648   001BDA  6E16               	movwf	___lmul@product^0,c
  2649   001BDC  0E00               	movlw	0
  2650   001BDE  6E17               	movwf	(___lmul@product+1)^0,c
  2651   001BE0  0E00               	movlw	0
  2652   001BE2  6E18               	movwf	(___lmul@product+2)^0,c
  2653   001BE4  0E00               	movlw	0
  2654   001BE6  6E19               	movwf	(___lmul@product+3)^0,c
  2655   001BE8                     l3947:
  2656   001BE8  A00E               	btfss	___lmul@multiplier^0,0,c
  2657   001BEA  EFF9  F00D         	goto	u3061
  2658   001BEE  EFFB  F00D         	goto	u3060
  2659   001BF2                     u3061:
  2660   001BF2  EF03  F00E         	goto	l3951
  2661   001BF6                     u3060:
  2662   001BF6  5012               	movf	___lmul@multiplicand^0,w,c
  2663   001BF8  2616               	addwf	___lmul@product^0,f,c
  2664   001BFA  5013               	movf	(___lmul@multiplicand+1)^0,w,c
  2665   001BFC  2217               	addwfc	(___lmul@product+1)^0,f,c
  2666   001BFE  5014               	movf	(___lmul@multiplicand+2)^0,w,c
  2667   001C00  2218               	addwfc	(___lmul@product+2)^0,f,c
  2668   001C02  5015               	movf	(___lmul@multiplicand+3)^0,w,c
  2669   001C04  2219               	addwfc	(___lmul@product+3)^0,f,c
  2670   001C06                     l3951:
  2671   001C06  90D8               	bcf	status,0,c
  2672   001C08  3612               	rlcf	___lmul@multiplicand^0,f,c
  2673   001C0A  3613               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2674   001C0C  3614               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2675   001C0E  3615               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2676   001C10  90D8               	bcf	status,0,c
  2677   001C12  3211               	rrcf	(___lmul@multiplier+3)^0,f,c
  2678   001C14  3210               	rrcf	(___lmul@multiplier+2)^0,f,c
  2679   001C16  320F               	rrcf	(___lmul@multiplier+1)^0,f,c
  2680   001C18  320E               	rrcf	___lmul@multiplier^0,f,c
  2681   001C1A  500E               	movf	___lmul@multiplier^0,w,c
  2682   001C1C  100F               	iorwf	(___lmul@multiplier+1)^0,w,c
  2683   001C1E  1010               	iorwf	(___lmul@multiplier+2)^0,w,c
  2684   001C20  1011               	iorwf	(___lmul@multiplier+3)^0,w,c
  2685   001C22  A4D8               	btfss	status,2,c
  2686   001C24  EF16  F00E         	goto	u3071
  2687   001C28  EF18  F00E         	goto	u3070
  2688   001C2C                     u3071:
  2689   001C2C  EFF4  F00D         	goto	l3947
  2690   001C30                     u3070:
  2691   001C30  C016  F00E         	movff	___lmul@product,?___lmul
  2692   001C34  C017  F00F         	movff	___lmul@product+1,?___lmul+1
  2693   001C38  C018  F010         	movff	___lmul@product+2,?___lmul+2
  2694   001C3C  C019  F011         	movff	___lmul@product+3,?___lmul+3
  2695   001C40  0012               	return		;funcret
  2696   001C42                     __end_of___lmul:
  2697                           	callstack 0
  2698                           
  2699 ;; *************** function ___lldiv *****************
  2700 ;; Defined at:
  2701 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  dividend        4   25[COMRAM] unsigned long 
  2704 ;;  divisor         4   29[COMRAM] unsigned long 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  quotient        4   33[COMRAM] unsigned long 
  2707 ;;  counter         1   37[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  4   25[COMRAM] unsigned long 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, status,0
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2717 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2718 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2720 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2721 ;;Total ram usage:       13 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 5
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_get_color_code
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text9
  2732   00183C                     __ptext9:
  2733                           	callstack 0
  2734   00183C                     ___lldiv:
  2735                           	callstack 24
  2736   00183C  0E00               	movlw	0
  2737   00183E  6E22               	movwf	___lldiv@quotient^0,c
  2738   001840  0E00               	movlw	0
  2739   001842  6E23               	movwf	(___lldiv@quotient+1)^0,c
  2740   001844  0E00               	movlw	0
  2741   001846  6E24               	movwf	(___lldiv@quotient+2)^0,c
  2742   001848  0E00               	movlw	0
  2743   00184A  6E25               	movwf	(___lldiv@quotient+3)^0,c
  2744   00184C  501E               	movf	___lldiv@divisor^0,w,c
  2745   00184E  101F               	iorwf	(___lldiv@divisor+1)^0,w,c
  2746   001850  1020               	iorwf	(___lldiv@divisor+2)^0,w,c
  2747   001852  1021               	iorwf	(___lldiv@divisor+3)^0,w,c
  2748   001854  B4D8               	btfsc	status,2,c
  2749   001856  EF2F  F00C         	goto	u3081
  2750   00185A  EF31  F00C         	goto	u3080
  2751   00185E                     u3081:
  2752   00185E  EF67  F00C         	goto	l511
  2753   001862                     u3080:
  2754   001862  0E01               	movlw	1
  2755   001864  6E26               	movwf	___lldiv@counter^0,c
  2756   001866  EF3B  F00C         	goto	l3963
  2757   00186A                     l3961:
  2758   00186A  90D8               	bcf	status,0,c
  2759   00186C  361E               	rlcf	___lldiv@divisor^0,f,c
  2760   00186E  361F               	rlcf	(___lldiv@divisor+1)^0,f,c
  2761   001870  3620               	rlcf	(___lldiv@divisor+2)^0,f,c
  2762   001872  3621               	rlcf	(___lldiv@divisor+3)^0,f,c
  2763   001874  2A26               	incf	___lldiv@counter^0,f,c
  2764   001876                     l3963:
  2765   001876  AE21               	btfss	(___lldiv@divisor+3)^0,7,c
  2766   001878  EF40  F00C         	goto	u3091
  2767   00187C  EF42  F00C         	goto	u3090
  2768   001880                     u3091:
  2769   001880  EF35  F00C         	goto	l3961
  2770   001884                     u3090:
  2771   001884                     l3965:
  2772   001884  90D8               	bcf	status,0,c
  2773   001886  3622               	rlcf	___lldiv@quotient^0,f,c
  2774   001888  3623               	rlcf	(___lldiv@quotient+1)^0,f,c
  2775   00188A  3624               	rlcf	(___lldiv@quotient+2)^0,f,c
  2776   00188C  3625               	rlcf	(___lldiv@quotient+3)^0,f,c
  2777   00188E  501E               	movf	___lldiv@divisor^0,w,c
  2778   001890  5C1A               	subwf	___lldiv@dividend^0,w,c
  2779   001892  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2780   001894  581B               	subwfb	(___lldiv@dividend+1)^0,w,c
  2781   001896  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2782   001898  581C               	subwfb	(___lldiv@dividend+2)^0,w,c
  2783   00189A  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2784   00189C  581D               	subwfb	(___lldiv@dividend+3)^0,w,c
  2785   00189E  A0D8               	btfss	status,0,c
  2786   0018A0  EF54  F00C         	goto	u3101
  2787   0018A4  EF56  F00C         	goto	u3100
  2788   0018A8                     u3101:
  2789   0018A8  EF5F  F00C         	goto	l3973
  2790   0018AC                     u3100:
  2791   0018AC  501E               	movf	___lldiv@divisor^0,w,c
  2792   0018AE  5E1A               	subwf	___lldiv@dividend^0,f,c
  2793   0018B0  501F               	movf	(___lldiv@divisor+1)^0,w,c
  2794   0018B2  5A1B               	subwfb	(___lldiv@dividend+1)^0,f,c
  2795   0018B4  5020               	movf	(___lldiv@divisor+2)^0,w,c
  2796   0018B6  5A1C               	subwfb	(___lldiv@dividend+2)^0,f,c
  2797   0018B8  5021               	movf	(___lldiv@divisor+3)^0,w,c
  2798   0018BA  5A1D               	subwfb	(___lldiv@dividend+3)^0,f,c
  2799   0018BC  8022               	bsf	___lldiv@quotient^0,0,c
  2800   0018BE                     l3973:
  2801   0018BE  90D8               	bcf	status,0,c
  2802   0018C0  3221               	rrcf	(___lldiv@divisor+3)^0,f,c
  2803   0018C2  3220               	rrcf	(___lldiv@divisor+2)^0,f,c
  2804   0018C4  321F               	rrcf	(___lldiv@divisor+1)^0,f,c
  2805   0018C6  321E               	rrcf	___lldiv@divisor^0,f,c
  2806   0018C8  2E26               	decfsz	___lldiv@counter^0,f,c
  2807   0018CA  EF42  F00C         	goto	l3965
  2808   0018CE                     l511:
  2809   0018CE  C022  F01A         	movff	___lldiv@quotient,?___lldiv
  2810   0018D2  C023  F01B         	movff	___lldiv@quotient+1,?___lldiv+1
  2811   0018D6  C024  F01C         	movff	___lldiv@quotient+2,?___lldiv+2
  2812   0018DA  C025  F01D         	movff	___lldiv@quotient+3,?___lldiv+3
  2813   0018DE  0012               	return		;funcret
  2814   0018E0                     __end_of___lldiv:
  2815                           	callstack 0
  2816                           
  2817 ;; *************** function _fullSpeedAhead *****************
  2818 ;; Defined at:
  2819 ;;		line 256 in file "dc_motor.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  2822 ;;		 -> main@motorL(9), 
  2823 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  2824 ;;		 -> main@motorR(9), 
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;		None
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      void 
  2829 ;; Registers used:
  2830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2831 ;; Tracked objects:
  2832 ;;		On entry : 0/0
  2833 ;;		On exit  : 0/0
  2834 ;;		Unchanged: 0/0
  2835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2836 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2840 ;;Total ram usage:        4 bytes
  2841 ;; Hardware stack levels used: 1
  2842 ;; Hardware stack levels required when called: 7
  2843 ;; This function calls:
  2844 ;;		_setMotorPWM
  2845 ;; This function is called by:
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text10
  2851   001CA6                     __ptext10:
  2852                           	callstack 0
  2853   001CA6                     _fullSpeedAhead:
  2854                           	callstack 23
  2855   001CA6                     
  2856                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2857   001CA6  0E00               	movlw	0
  2858   001CA8  6E4A               	movwf	(_seconds+1)^0,c
  2859   001CAA  0E00               	movlw	0
  2860   001CAC  6E49               	movwf	_seconds^0,c
  2861   001CAE                     
  2862                           ;dc_motor.c: 259:     (*mL).direction=0;
  2863   001CAE  EE20 F001          	lfsr	2,1
  2864   001CB2  5021               	movf	fullSpeedAhead@mL^0,w,c
  2865   001CB4  26D9               	addwf	fsr2l,f,c
  2866   001CB6  5022               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2867   001CB8  22DA               	addwfc	fsr2h,f,c
  2868   001CBA  0E00               	movlw	0
  2869   001CBC  6EDF               	movwf	indf2,c
  2870   001CBE                     
  2871                           ;dc_motor.c: 260:     (*mR).direction=0;
  2872   001CBE  EE20 F001          	lfsr	2,1
  2873   001CC2  5023               	movf	fullSpeedAhead@mR^0,w,c
  2874   001CC4  26D9               	addwf	fsr2l,f,c
  2875   001CC6  5024               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2876   001CC8  22DA               	addwfc	fsr2h,f,c
  2877   001CCA  0E00               	movlw	0
  2878   001CCC  6EDF               	movwf	indf2,c
  2879   001CCE                     
  2880                           ;dc_motor.c: 261:     (*mL).power=50;
  2881   001CCE  C021  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2882   001CD2  C022  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2883   001CD6  0E32               	movlw	50
  2884   001CD8  6EDF               	movwf	indf2,c
  2885   001CDA                     
  2886                           ;dc_motor.c: 262:     (*mR).power=50;
  2887   001CDA  C023  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2888   001CDE  C024  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2889   001CE2  0E32               	movlw	50
  2890   001CE4  6EDF               	movwf	indf2,c
  2891   001CE6                     
  2892                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2893   001CE6  C021  F01B         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2894   001CEA  C022  F01C         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2895   001CEE  EC5E  F007         	call	_setMotorPWM	;wreg free
  2896   001CF2                     
  2897                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2898   001CF2  C023  F01B         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2899   001CF6  C024  F01C         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2900   001CFA  EC5E  F007         	call	_setMotorPWM	;wreg free
  2901   001CFE  0012               	return		;funcret
  2902   001D00                     __end_of_fullSpeedAhead:
  2903                           	callstack 0
  2904                           
  2905 ;; *************** function _color_click_init *****************
  2906 ;; Defined at:
  2907 ;;		line 39 in file "color.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;                  1    wreg      void 
  2914 ;; Registers used:
  2915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/0
  2918 ;;		On exit  : 0/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2923 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2925 ;;Total ram usage:        1 bytes
  2926 ;; Hardware stack levels used: 1
  2927 ;; Hardware stack levels required when called: 9
  2928 ;; This function calls:
  2929 ;;		_I2C_2_Master_Init
  2930 ;;		_calibrate_black
  2931 ;;		_calibrate_white
  2932 ;;		_color_writetoaddr
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text11
  2939   0012D2                     __ptext11:
  2940                           	callstack 0
  2941   0012D2                     _color_click_init:
  2942                           	callstack 21
  2943   0012D2                     
  2944                           ;color.c: 42:     I2C_2_Master_Init();
  2945   0012D2  EC3D  F010         	call	_I2C_2_Master_Init	;wreg free
  2946   0012D6                     
  2947                           ;color.c: 45:   color_writetoaddr(0x00, 0x01);
  2948   0012D6  0E01               	movlw	1
  2949   0012D8  6E10               	movwf	color_writetoaddr@value^0,c
  2950   0012DA  0E00               	movlw	0
  2951   0012DC  EC9F  F010         	call	_color_writetoaddr
  2952   0012E0                     
  2953                           ;color.c: 46:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2954   0012E0  0E3F               	movlw	63
  2955   0012E2  6E23               	movwf	??_color_click_init^0,c
  2956   0012E4  0E55               	movlw	85
  2957   0012E6                     u4097:
  2958   0012E6  2EE8               	decfsz	wreg,f,c
  2959   0012E8  D7FE               	bra	u4097
  2960   0012EA  2E23               	decfsz	??_color_click_init^0,f,c
  2961   0012EC  D7FC               	bra	u4097
  2962   0012EE  F000               	nop	
  2963   0012F0                     
  2964                           ;color.c: 49:  color_writetoaddr(0x00, 0x03);
  2965   0012F0  0E03               	movlw	3
  2966   0012F2  6E10               	movwf	color_writetoaddr@value^0,c
  2967   0012F4  0E00               	movlw	0
  2968   0012F6  EC9F  F010         	call	_color_writetoaddr
  2969   0012FA                     
  2970                           ;color.c: 52:  color_writetoaddr(0x01, 0xD5);
  2971   0012FA  0ED5               	movlw	213
  2972   0012FC  6E10               	movwf	color_writetoaddr@value^0,c
  2973   0012FE  0E01               	movlw	1
  2974   001300  EC9F  F010         	call	_color_writetoaddr
  2975   001304                     
  2976                           ;color.c: 54:     TRISFbits.TRISF7 = 0;
  2977   001304  9E86               	bcf	134,7,c	;volatile
  2978   001306                     
  2979                           ;color.c: 55:     TRISGbits.TRISG1 = 0;
  2980   001306  9287               	bcf	135,1,c	;volatile
  2981   001308                     
  2982                           ;color.c: 56:     TRISAbits.TRISA4 = 0;
  2983   001308  9881               	bcf	129,4,c	;volatile
  2984   00130A                     
  2985                           ;color.c: 58:     Color_rules[0] = Red_rule;
  2986   00130A  EE20  F09C         	lfsr	2,_Red_rule
  2987   00130E  EE11  F000         	lfsr	1,_Color_rules
  2988   001312  0E0B               	movlw	11
  2989   001314                     u3111:
  2990   001314  CFDB FFE3          	movff	plusw2,plusw1
  2991   001318  06E8               	decf	wreg,f,c
  2992   00131A  E2FC               	bc	u3111
  2993   00131C                     
  2994                           ;color.c: 59:     Color_rules[1] = Green_rule;
  2995   00131C  EE20  F090         	lfsr	2,_Green_rule
  2996   001320  EE11  F00C         	lfsr	1,_Color_rules+12
  2997   001324  0E0B               	movlw	11
  2998   001326                     u3121:
  2999   001326  CFDB FFE3          	movff	plusw2,plusw1
  3000   00132A  06E8               	decf	wreg,f,c
  3001   00132C  E2FC               	bc	u3121
  3002   00132E                     
  3003                           ;color.c: 60:     Color_rules[2] = Blue_rule;
  3004   00132E  EE20  F084         	lfsr	2,_Blue_rule
  3005   001332  EE11  F018         	lfsr	1,_Color_rules+24
  3006   001336  0E0B               	movlw	11
  3007   001338                     u3131:
  3008   001338  CFDB FFE3          	movff	plusw2,plusw1
  3009   00133C  06E8               	decf	wreg,f,c
  3010   00133E  E2FC               	bc	u3131
  3011   001340                     
  3012                           ;color.c: 61:     Color_rules[3] = Yellow_rule;
  3013   001340  EE20  F078         	lfsr	2,_Yellow_rule
  3014   001344  EE11  F024         	lfsr	1,_Color_rules+36
  3015   001348  0E0B               	movlw	11
  3016   00134A                     u3141:
  3017   00134A  CFDB FFE3          	movff	plusw2,plusw1
  3018   00134E  06E8               	decf	wreg,f,c
  3019   001350  E2FC               	bc	u3141
  3020   001352                     
  3021                           ;color.c: 62:     Color_rules[4] = Pink_rule;
  3022   001352  EE20  F06C         	lfsr	2,_Pink_rule
  3023   001356  EE11  F030         	lfsr	1,_Color_rules+48
  3024   00135A  0E0B               	movlw	11
  3025   00135C                     u3151:
  3026   00135C  CFDB FFE3          	movff	plusw2,plusw1
  3027   001360  06E8               	decf	wreg,f,c
  3028   001362  E2FC               	bc	u3151
  3029   001364                     
  3030                           ;color.c: 63:     Color_rules[5] = Orange_rule;
  3031   001364  EE21  F090         	lfsr	2,_Orange_rule
  3032   001368  EE11  F03C         	lfsr	1,_Color_rules+60
  3033   00136C  0E0B               	movlw	11
  3034   00136E                     u3161:
  3035   00136E  CFDB FFE3          	movff	plusw2,plusw1
  3036   001372  06E8               	decf	wreg,f,c
  3037   001374  E2FC               	bc	u3161
  3038   001376                     
  3039                           ;color.c: 64:     Color_rules[6] = Lightblue_rule;
  3040   001376  EE21  F084         	lfsr	2,_Lightblue_rule
  3041   00137A  EE11  F048         	lfsr	1,_Color_rules+72
  3042   00137E  0E0B               	movlw	11
  3043   001380                     u3171:
  3044   001380  CFDB FFE3          	movff	plusw2,plusw1
  3045   001384  06E8               	decf	wreg,f,c
  3046   001386  E2FC               	bc	u3171
  3047   001388                     
  3048                           ;color.c: 65:     Color_rules[7] = White_rule;
  3049   001388  EE21  F078         	lfsr	2,_White_rule
  3050   00138C  EE11  F054         	lfsr	1,_Color_rules+84
  3051   001390  0E0B               	movlw	11
  3052   001392                     u3181:
  3053   001392  CFDB FFE3          	movff	plusw2,plusw1
  3054   001396  06E8               	decf	wreg,f,c
  3055   001398  E2FC               	bc	u3181
  3056   00139A                     
  3057                           ;color.c: 66:     Color_rules[8] = Black_rule;
  3058   00139A  EE21  F06C         	lfsr	2,_Black_rule
  3059   00139E  EE11  F060         	lfsr	1,_Color_rules+96
  3060   0013A2  0E0B               	movlw	11
  3061   0013A4                     u3191:
  3062   0013A4  CFDB FFE3          	movff	plusw2,plusw1
  3063   0013A8  06E8               	decf	wreg,f,c
  3064   0013AA  E2FC               	bc	u3191
  3065   0013AC                     
  3066                           ;color.c: 75:     TRISFbits.TRISF3=1;
  3067   0013AC  8686               	bsf	134,3,c	;volatile
  3068   0013AE                     
  3069                           ;color.c: 76:     ANSELFbits.ANSELF3=0;
  3070   0013AE  010E               	movlb	14	; () banked
  3071   0013B0  97B4               	bcf	180,3,b	;volatile
  3072   0013B2                     
  3073                           ; BSR set to: 14
  3074                           ;color.c: 77:     TRISFbits.TRISF2=1;
  3075   0013B2  8486               	bsf	134,2,c	;volatile
  3076   0013B4                     
  3077                           ; BSR set to: 14
  3078                           ;color.c: 78:     ANSELFbits.ANSELF2=0;
  3079   0013B4  95B4               	bcf	180,2,b	;volatile
  3080   0013B6                     l76:
  3081   0013B6  A68E               	btfss	142,3,c	;volatile
  3082   0013B8  EFE0  F009         	goto	u3201
  3083   0013BC  EFE2  F009         	goto	u3200
  3084   0013C0                     u3201:
  3085   0013C0  EFE9  F009         	goto	l80
  3086   0013C4                     u3200:
  3087   0013C4  B48E               	btfsc	142,2,c	;volatile
  3088   0013C6  EFE7  F009         	goto	u3211
  3089   0013CA  EFE9  F009         	goto	u3210
  3090   0013CE                     u3211:
  3091   0013CE  EFDB  F009         	goto	l76
  3092   0013D2                     u3210:
  3093   0013D2                     l80:
  3094                           
  3095                           ;color.c: 81:     if(!PORTFbits.RF2){
  3096   0013D2  B48E               	btfsc	142,2,c	;volatile
  3097   0013D4  EFEE  F009         	goto	u3221
  3098   0013D8  EFF0  F009         	goto	u3220
  3099   0013DC                     u3221:
  3100   0013DC  EFF2  F009         	goto	l4027
  3101   0013E0                     u3220:
  3102   0013E0  EF04  F00A         	goto	l82
  3103   0013E4                     l4027:
  3104                           
  3105                           ;color.c: 84:     calibrate_white();
  3106   0013E4  ECC9  F00B         	call	_calibrate_white	;wreg free
  3107   0013E8                     l83:
  3108   0013E8  B68E               	btfsc	142,3,c	;volatile
  3109   0013EA  EFF9  F009         	goto	u3231
  3110   0013EE  EFFB  F009         	goto	u3230
  3111   0013F2                     u3231:
  3112   0013F2  EFF4  F009         	goto	l83
  3113   0013F6                     u3230:
  3114   0013F6                     
  3115                           ;color.c: 86:     calibrate_black();
  3116   0013F6  EC05  F00A         	call	_calibrate_black	;wreg free
  3117   0013FA                     l86:
  3118   0013FA  B68E               	btfsc	142,3,c	;volatile
  3119   0013FC  EF02  F00A         	goto	u3241
  3120   001400  EF04  F00A         	goto	u3240
  3121   001404                     u3241:
  3122   001404  EFFD  F009         	goto	l86
  3123   001408                     u3240:
  3124   001408                     l82:
  3125   001408  0012               	return		;funcret
  3126   00140A                     __end_of_color_click_init:
  3127                           	callstack 0
  3128                           
  3129 ;; *************** function _color_writetoaddr *****************
  3130 ;; Defined at:
  3131 ;;		line 91 in file "color.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  address         1    wreg     unsigned char 
  3134 ;;  value           1   15[COMRAM] unsigned char 
  3135 ;; Auto vars:     Size  Location     Type
  3136 ;;  address         1   16[COMRAM] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  1    wreg      void 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3146 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3147 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3149 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3150 ;;Total ram usage:        2 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; Hardware stack levels required when called: 7
  3153 ;; This function calls:
  3154 ;;		_I2C_2_Master_Start
  3155 ;;		_I2C_2_Master_Stop
  3156 ;;		_I2C_2_Master_Write
  3157 ;; This function is called by:
  3158 ;;		_color_click_init
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text12
  3163   00213E                     __ptext12:
  3164                           	callstack 0
  3165   00213E                     _color_writetoaddr:
  3166                           	callstack 22
  3167                           
  3168                           ;incstack = 0
  3169                           ;color_writetoaddr@address stored from wreg
  3170   00213E  6E11               	movwf	color_writetoaddr@address^0,c
  3171   002140                     
  3172                           ;color.c: 92:     I2C_2_Master_Start();
  3173   002140  ECEF  F010         	call	_I2C_2_Master_Start	;wreg free
  3174                           
  3175                           ;color.c: 93:     I2C_2_Master_Write(0x52 | 0x00);
  3176   002144  0E52               	movlw	82
  3177   002146  ECD3  F010         	call	_I2C_2_Master_Write
  3178                           
  3179                           ;color.c: 94:     I2C_2_Master_Write(0x80 | address);
  3180   00214A  5011               	movf	color_writetoaddr@address^0,w,c
  3181   00214C  0980               	iorlw	128
  3182   00214E  ECD3  F010         	call	_I2C_2_Master_Write
  3183                           
  3184                           ;color.c: 95:     I2C_2_Master_Write(value);
  3185   002152  5010               	movf	color_writetoaddr@value^0,w,c
  3186   002154  ECD3  F010         	call	_I2C_2_Master_Write
  3187                           
  3188                           ;color.c: 96:     I2C_2_Master_Stop();
  3189   002158  ECEA  F010         	call	_I2C_2_Master_Stop	;wreg free
  3190   00215C  0012               	return		;funcret
  3191   00215E                     __end_of_color_writetoaddr:
  3192                           	callstack 0
  3193                           
  3194 ;; *************** function _calibrate_white *****************
  3195 ;; Defined at:
  3196 ;;		line 243 in file "color.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3214 ;;Total ram usage:        2 bytes
  3215 ;; Hardware stack levels used: 1
  3216 ;; Hardware stack levels required when called: 8
  3217 ;; This function calls:
  3218 ;;		_color_read_Blue
  3219 ;;		_color_read_Green
  3220 ;;		_color_read_Red
  3221 ;;		_set_led_color
  3222 ;; This function is called by:
  3223 ;;		_color_click_init
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text13
  3228   001792                     __ptext13:
  3229                           	callstack 0
  3230   001792                     _calibrate_white:
  3231                           	callstack 21
  3232   001792                     
  3233                           ;color.c: 244:     set_led_color(0b100);
  3234   001792  0E00               	movlw	0
  3235   001794  6E0F               	movwf	(set_led_color@color+1)^0,c
  3236   001796  0E04               	movlw	4
  3237   001798  6E0E               	movwf	set_led_color@color^0,c
  3238   00179A  ECB7  F00F         	call	_set_led_color	;wreg free
  3239   00179E                     
  3240                           ;color.c: 245:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3241   00179E  0E12               	movlw	18
  3242   0017A0  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3243   0017A2  0EDC               	movlw	220
  3244   0017A4  6E19               	movwf	??_calibrate_white^0,c
  3245   0017A6  0E60               	movlw	96
  3246   0017A8                     u4107:
  3247   0017A8  2EE8               	decfsz	wreg,f,c
  3248   0017AA  D7FE               	bra	u4107
  3249   0017AC  2E19               	decfsz	??_calibrate_white^0,f,c
  3250   0017AE  D7FC               	bra	u4107
  3251   0017B0  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3252   0017B2  D7FA               	bra	u4107
  3253   0017B4                     
  3254                           ;color.c: 246:     White_setup.R = color_read_Red();
  3255   0017B4  EC80  F00E         	call	_color_read_Red	;wreg free
  3256   0017B8  C012  F060         	movff	?_color_read_Red,_White_setup
  3257   0017BC  C013  F061         	movff	?_color_read_Red+1,_White_setup+1
  3258   0017C0  0100               	movlb	0	; () banked
  3259   0017C2  6B62               	clrf	(_White_setup+2)& (0+255),b
  3260   0017C4  6B63               	clrf	(_White_setup+3)& (0+255),b
  3261   0017C6                     
  3262                           ; BSR set to: 0
  3263                           ;color.c: 247:     set_led_color(0b010);
  3264   0017C6  0E00               	movlw	0
  3265   0017C8  6E0F               	movwf	(set_led_color@color+1)^0,c
  3266   0017CA  0E02               	movlw	2
  3267   0017CC  6E0E               	movwf	set_led_color@color^0,c
  3268   0017CE  ECB7  F00F         	call	_set_led_color	;wreg free
  3269   0017D2                     
  3270                           ;color.c: 248:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3271   0017D2  0E12               	movlw	18
  3272   0017D4  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3273   0017D6  0EDC               	movlw	220
  3274   0017D8  6E19               	movwf	??_calibrate_white^0,c
  3275   0017DA  0E60               	movlw	96
  3276   0017DC                     u4117:
  3277   0017DC  2EE8               	decfsz	wreg,f,c
  3278   0017DE  D7FE               	bra	u4117
  3279   0017E0  2E19               	decfsz	??_calibrate_white^0,f,c
  3280   0017E2  D7FC               	bra	u4117
  3281   0017E4  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3282   0017E6  D7FA               	bra	u4117
  3283                           
  3284                           ;color.c: 249:     White_setup.G = color_read_Green();
  3285   0017E8  ECA8  F00E         	call	_color_read_Green	;wreg free
  3286   0017EC  C012  F064         	movff	?_color_read_Green,_White_setup+4
  3287   0017F0  C013  F065         	movff	?_color_read_Green+1,_White_setup+5
  3288   0017F4  0100               	movlb	0	; () banked
  3289   0017F6  6B66               	clrf	(_White_setup+6)& (0+255),b
  3290   0017F8  6B67               	clrf	(_White_setup+7)& (0+255),b
  3291   0017FA                     
  3292                           ; BSR set to: 0
  3293                           ;color.c: 250:     set_led_color(0b001);
  3294   0017FA  0E00               	movlw	0
  3295   0017FC  6E0F               	movwf	(set_led_color@color+1)^0,c
  3296   0017FE  0E01               	movlw	1
  3297   001800  6E0E               	movwf	set_led_color@color^0,c
  3298   001802  ECB7  F00F         	call	_set_led_color	;wreg free
  3299   001806                     
  3300                           ;color.c: 251:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3301   001806  0E12               	movlw	18
  3302   001808  6E1A               	movwf	(??_calibrate_white+1)^0,c
  3303   00180A  0EDC               	movlw	220
  3304   00180C  6E19               	movwf	??_calibrate_white^0,c
  3305   00180E  0E60               	movlw	96
  3306   001810                     u4127:
  3307   001810  2EE8               	decfsz	wreg,f,c
  3308   001812  D7FE               	bra	u4127
  3309   001814  2E19               	decfsz	??_calibrate_white^0,f,c
  3310   001816  D7FC               	bra	u4127
  3311   001818  2E1A               	decfsz	(??_calibrate_white+1)^0,f,c
  3312   00181A  D7FA               	bra	u4127
  3313   00181C                     
  3314                           ;color.c: 252:     White_setup.B = color_read_Blue();
  3315   00181C  ECF8  F00E         	call	_color_read_Blue	;wreg free
  3316   001820  C012  F068         	movff	?_color_read_Blue,_White_setup+8
  3317   001824  C013  F069         	movff	?_color_read_Blue+1,_White_setup+9
  3318   001828  0100               	movlb	0	; () banked
  3319   00182A  6B6A               	clrf	(_White_setup+10)& (0+255),b
  3320   00182C  6B6B               	clrf	(_White_setup+11)& (0+255),b
  3321   00182E                     
  3322                           ; BSR set to: 0
  3323                           ;color.c: 253:     set_led_color(0b000);
  3324   00182E  0E00               	movlw	0
  3325   001830  6E0F               	movwf	(set_led_color@color+1)^0,c
  3326   001832  0E00               	movlw	0
  3327   001834  6E0E               	movwf	set_led_color@color^0,c
  3328   001836  ECB7  F00F         	call	_set_led_color	;wreg free
  3329   00183A  0012               	return		;funcret
  3330   00183C                     __end_of_calibrate_white:
  3331                           	callstack 0
  3332                           
  3333 ;; *************** function _calibrate_black *****************
  3334 ;; Defined at:
  3335 ;;		line 223 in file "color.c"
  3336 ;; Parameters:    Size  Location     Type
  3337 ;;		None
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  clear2          2   30[COMRAM] unsigned int 
  3340 ;;  clear1          2   28[COMRAM] unsigned int 
  3341 ;; Return value:  Size  Location     Type
  3342 ;;                  1    wreg      void 
  3343 ;; Registers used:
  3344 ;;		wreg, status,2, status,0, cstack
  3345 ;; Tracked objects:
  3346 ;;		On entry : 0/0
  3347 ;;		On exit  : 0/0
  3348 ;;		Unchanged: 0/0
  3349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3351 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3352 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3353 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3354 ;;Total ram usage:        8 bytes
  3355 ;; Hardware stack levels used: 1
  3356 ;; Hardware stack levels required when called: 8
  3357 ;; This function calls:
  3358 ;;		___lwdiv
  3359 ;;		_color_read_Blue
  3360 ;;		_color_read_Clear
  3361 ;;		_color_read_Green
  3362 ;;		_color_read_Red
  3363 ;;		_set_led_color
  3364 ;; This function is called by:
  3365 ;;		_color_click_init
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text14
  3370   00140A                     __ptext14:
  3371                           	callstack 0
  3372   00140A                     _calibrate_black:
  3373                           	callstack 21
  3374   00140A                     
  3375                           ;color.c: 224:     set_led_color(0b100);
  3376   00140A  0E00               	movlw	0
  3377   00140C  6E0F               	movwf	(set_led_color@color+1)^0,c
  3378   00140E  0E04               	movlw	4
  3379   001410  6E0E               	movwf	set_led_color@color^0,c
  3380   001412  ECB7  F00F         	call	_set_led_color	;wreg free
  3381   001416                     
  3382                           ;color.c: 225:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3383   001416  0E12               	movlw	18
  3384   001418  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3385   00141A  0EDC               	movlw	220
  3386   00141C  6E1B               	movwf	??_calibrate_black^0,c
  3387   00141E  0E60               	movlw	96
  3388   001420                     u4137:
  3389   001420  2EE8               	decfsz	wreg,f,c
  3390   001422  D7FE               	bra	u4137
  3391   001424  2E1B               	decfsz	??_calibrate_black^0,f,c
  3392   001426  D7FC               	bra	u4137
  3393   001428  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3394   00142A  D7FA               	bra	u4137
  3395   00142C                     
  3396                           ;color.c: 226:     Black_setup.R = color_read_Red();
  3397   00142C  EC80  F00E         	call	_color_read_Red	;wreg free
  3398   001430  C012  F039         	movff	?_color_read_Red,_Black_setup
  3399   001434  C013  F03A         	movff	?_color_read_Red+1,_Black_setup+1
  3400   001438  6A3B               	clrf	(_Black_setup+2)^0,c
  3401   00143A  6A3C               	clrf	(_Black_setup+3)^0,c
  3402   00143C                     
  3403                           ;color.c: 227:     set_led_color(0b010);
  3404   00143C  0E00               	movlw	0
  3405   00143E  6E0F               	movwf	(set_led_color@color+1)^0,c
  3406   001440  0E02               	movlw	2
  3407   001442  6E0E               	movwf	set_led_color@color^0,c
  3408   001444  ECB7  F00F         	call	_set_led_color	;wreg free
  3409   001448                     
  3410                           ;color.c: 228:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3411   001448  0E12               	movlw	18
  3412   00144A  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3413   00144C  0EDC               	movlw	220
  3414   00144E  6E1B               	movwf	??_calibrate_black^0,c
  3415   001450  0E60               	movlw	96
  3416   001452                     u4147:
  3417   001452  2EE8               	decfsz	wreg,f,c
  3418   001454  D7FE               	bra	u4147
  3419   001456  2E1B               	decfsz	??_calibrate_black^0,f,c
  3420   001458  D7FC               	bra	u4147
  3421   00145A  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3422   00145C  D7FA               	bra	u4147
  3423                           
  3424                           ;color.c: 229:     Black_setup.G = color_read_Green();
  3425   00145E  ECA8  F00E         	call	_color_read_Green	;wreg free
  3426   001462  C012  F03D         	movff	?_color_read_Green,_Black_setup+4
  3427   001466  C013  F03E         	movff	?_color_read_Green+1,_Black_setup+5
  3428   00146A  6A3F               	clrf	(_Black_setup+6)^0,c
  3429   00146C  6A40               	clrf	(_Black_setup+7)^0,c
  3430   00146E                     
  3431                           ;color.c: 230:     set_led_color(0b001);
  3432   00146E  0E00               	movlw	0
  3433   001470  6E0F               	movwf	(set_led_color@color+1)^0,c
  3434   001472  0E01               	movlw	1
  3435   001474  6E0E               	movwf	set_led_color@color^0,c
  3436   001476  ECB7  F00F         	call	_set_led_color	;wreg free
  3437   00147A                     
  3438                           ;color.c: 231:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3439   00147A  0E12               	movlw	18
  3440   00147C  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3441   00147E  0EDC               	movlw	220
  3442   001480  6E1B               	movwf	??_calibrate_black^0,c
  3443   001482  0E60               	movlw	96
  3444   001484                     u4157:
  3445   001484  2EE8               	decfsz	wreg,f,c
  3446   001486  D7FE               	bra	u4157
  3447   001488  2E1B               	decfsz	??_calibrate_black^0,f,c
  3448   00148A  D7FC               	bra	u4157
  3449   00148C  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3450   00148E  D7FA               	bra	u4157
  3451   001490                     
  3452                           ;color.c: 232:     Black_setup.B = color_read_Blue();
  3453   001490  ECF8  F00E         	call	_color_read_Blue	;wreg free
  3454   001494  C012  F041         	movff	?_color_read_Blue,_Black_setup+8
  3455   001498  C013  F042         	movff	?_color_read_Blue+1,_Black_setup+9
  3456   00149C  6A43               	clrf	(_Black_setup+10)^0,c
  3457   00149E  6A44               	clrf	(_Black_setup+11)^0,c
  3458   0014A0                     
  3459                           ;color.c: 233:     set_led_color(0b000);
  3460   0014A0  0E00               	movlw	0
  3461   0014A2  6E0F               	movwf	(set_led_color@color+1)^0,c
  3462   0014A4  0E00               	movlw	0
  3463   0014A6  6E0E               	movwf	set_led_color@color^0,c
  3464   0014A8  ECB7  F00F         	call	_set_led_color	;wreg free
  3465                           
  3466                           ;color.c: 234:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3467   0014AC  0E12               	movlw	18
  3468   0014AE  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3469   0014B0  0EDC               	movlw	220
  3470   0014B2  6E1B               	movwf	??_calibrate_black^0,c
  3471   0014B4  0E60               	movlw	96
  3472   0014B6                     u4167:
  3473   0014B6  2EE8               	decfsz	wreg,f,c
  3474   0014B8  D7FE               	bra	u4167
  3475   0014BA  2E1B               	decfsz	??_calibrate_black^0,f,c
  3476   0014BC  D7FC               	bra	u4167
  3477   0014BE  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3478   0014C0  D7FA               	bra	u4167
  3479   0014C2                     
  3480                           ;color.c: 235:     unsigned int clear1 = color_read_Clear();
  3481   0014C2  ECD0  F00E         	call	_color_read_Clear	;wreg free
  3482   0014C6  C012  F01D         	movff	?_color_read_Clear,calibrate_black@clear1
  3483   0014CA  C013  F01E         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3484   0014CE                     
  3485                           ;color.c: 236:     set_led_color(0b111);
  3486   0014CE  0E00               	movlw	0
  3487   0014D0  6E0F               	movwf	(set_led_color@color+1)^0,c
  3488   0014D2  0E07               	movlw	7
  3489   0014D4  6E0E               	movwf	set_led_color@color^0,c
  3490   0014D6  ECB7  F00F         	call	_set_led_color	;wreg free
  3491   0014DA                     
  3492                           ;color.c: 237:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3493   0014DA  0E12               	movlw	18
  3494   0014DC  6E1C               	movwf	(??_calibrate_black+1)^0,c
  3495   0014DE  0EDC               	movlw	220
  3496   0014E0  6E1B               	movwf	??_calibrate_black^0,c
  3497   0014E2  0E60               	movlw	96
  3498   0014E4                     u4177:
  3499   0014E4  2EE8               	decfsz	wreg,f,c
  3500   0014E6  D7FE               	bra	u4177
  3501   0014E8  2E1B               	decfsz	??_calibrate_black^0,f,c
  3502   0014EA  D7FC               	bra	u4177
  3503   0014EC  2E1C               	decfsz	(??_calibrate_black+1)^0,f,c
  3504   0014EE  D7FA               	bra	u4177
  3505   0014F0                     
  3506                           ;color.c: 238:     unsigned int clear2 = color_read_Clear();
  3507   0014F0  ECD0  F00E         	call	_color_read_Clear	;wreg free
  3508   0014F4  C012  F01F         	movff	?_color_read_Clear,calibrate_black@clear2
  3509   0014F8  C013  F020         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3510                           
  3511                           ;color.c: 239:     set_led_color(0b000);
  3512   0014FC  0E00               	movlw	0
  3513   0014FE  6E0F               	movwf	(set_led_color@color+1)^0,c
  3514   001500  0E00               	movlw	0
  3515   001502  6E0E               	movwf	set_led_color@color^0,c
  3516   001504  ECB7  F00F         	call	_set_led_color	;wreg free
  3517   001508                     
  3518                           ;color.c: 240:     wall_coef = clear2/clear1/5;
  3519   001508  C01D  F016         	movff	calibrate_black@clear1,___lwdiv@divisor
  3520   00150C  C01E  F017         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3521   001510  C01F  F014         	movff	calibrate_black@clear2,___lwdiv@dividend
  3522   001514  C020  F015         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3523   001518  EC79  F00D         	call	___lwdiv	;wreg free
  3524   00151C  C014  F021         	movff	?___lwdiv,_calibrate_black$2461
  3525   001520  C015  F022         	movff	?___lwdiv+1,_calibrate_black$2461+1
  3526   001524                     
  3527                           ;color.c: 240:     wall_coef = clear2/clear1/5;
  3528   001524  C021  F014         	movff	_calibrate_black$2461,___lwdiv@dividend
  3529   001528  C022  F015         	movff	_calibrate_black$2461+1,___lwdiv@dividend+1
  3530   00152C  0E00               	movlw	0
  3531   00152E  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  3532   001530  0E05               	movlw	5
  3533   001532  6E16               	movwf	___lwdiv@divisor^0,c
  3534   001534  EC79  F00D         	call	___lwdiv	;wreg free
  3535   001538  C014  F0AA         	movff	?___lwdiv,_wall_coef
  3536   00153C  C015  F0AB         	movff	?___lwdiv+1,_wall_coef+1
  3537   001540  0012               	return		;funcret
  3538   001542                     __end_of_calibrate_black:
  3539                           	callstack 0
  3540                           
  3541 ;; *************** function _set_led_color *****************
  3542 ;; Defined at:
  3543 ;;		line 163 in file "color.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  color           2   13[COMRAM] unsigned int 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		None
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3557 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3560 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3561 ;;Total ram usage:        2 bytes
  3562 ;; Hardware stack levels used: 1
  3563 ;; Hardware stack levels required when called: 5
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_get_color_code
  3568 ;;		_calibrate_black
  3569 ;;		_calibrate_white
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text15
  3574   001F6E                     __ptext15:
  3575                           	callstack 0
  3576   001F6E                     _set_led_color:
  3577                           	callstack 24
  3578   001F6E                     
  3579                           ;color.c: 167:     if(color & 0b100){
  3580   001F6E  A40E               	btfss	set_led_color@color^0,2,c
  3581   001F70  EFBC  F00F         	goto	u2861
  3582   001F74  EFBE  F00F         	goto	u2860
  3583   001F78                     u2861:
  3584   001F78  EFC1  F00F         	goto	l121
  3585   001F7C                     u2860:
  3586   001F7C                     
  3587                           ;color.c: 168:         LATGbits.LATG1 = 1;
  3588   001F7C  827F               	bsf	127,1,c	;volatile
  3589                           
  3590                           ;color.c: 169:     }else{
  3591   001F7E  EFC2  F00F         	goto	l122
  3592   001F82                     l121:
  3593                           
  3594                           ;color.c: 170:         LATGbits.LATG1 = 0;
  3595   001F82  927F               	bcf	127,1,c	;volatile
  3596   001F84                     l122:
  3597                           
  3598                           ;color.c: 172:     if(color & 0b010){
  3599   001F84  A20E               	btfss	set_led_color@color^0,1,c
  3600   001F86  EFC7  F00F         	goto	u2871
  3601   001F8A  EFC9  F00F         	goto	u2870
  3602   001F8E                     u2871:
  3603   001F8E  EFCC  F00F         	goto	l123
  3604   001F92                     u2870:
  3605   001F92                     
  3606                           ;color.c: 173:         LATAbits.LATA4 = 1;
  3607   001F92  8879               	bsf	121,4,c	;volatile
  3608                           
  3609                           ;color.c: 174:     }else{
  3610   001F94  EFCD  F00F         	goto	l124
  3611   001F98                     l123:
  3612                           
  3613                           ;color.c: 175:         LATAbits.LATA4 = 0;
  3614   001F98  9879               	bcf	121,4,c	;volatile
  3615   001F9A                     l124:
  3616                           
  3617                           ;color.c: 177:     if(color & 0b001){
  3618   001F9A  A00E               	btfss	set_led_color@color^0,0,c
  3619   001F9C  EFD2  F00F         	goto	u2881
  3620   001FA0  EFD4  F00F         	goto	u2880
  3621   001FA4                     u2881:
  3622   001FA4  EFD7  F00F         	goto	l125
  3623   001FA8                     u2880:
  3624   001FA8                     
  3625                           ;color.c: 178:         LATFbits.LATF7 = 1;
  3626   001FA8  8E7E               	bsf	126,7,c	;volatile
  3627                           
  3628                           ;color.c: 179:     }else{
  3629   001FAA  EFD8  F00F         	goto	l127
  3630   001FAE                     l125:
  3631                           
  3632                           ;color.c: 180:         LATFbits.LATF7 = 0;
  3633   001FAE  9E7E               	bcf	126,7,c	;volatile
  3634   001FB0                     l127:
  3635   001FB0  0012               	return		;funcret
  3636   001FB2                     __end_of_set_led_color:
  3637                           	callstack 0
  3638                           
  3639 ;; *************** function _color_read_Red *****************
  3640 ;; Defined at:
  3641 ;;		line 99 in file "color.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  tmp             2   22[COMRAM] unsigned int 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  2   17[COMRAM] unsigned int 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3655 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3656 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3657 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3658 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3659 ;;Total ram usage:        7 bytes
  3660 ;; Hardware stack levels used: 1
  3661 ;; Hardware stack levels required when called: 7
  3662 ;; This function calls:
  3663 ;;		_I2C_2_Master_Read
  3664 ;;		_I2C_2_Master_RepStart
  3665 ;;		_I2C_2_Master_Start
  3666 ;;		_I2C_2_Master_Stop
  3667 ;;		_I2C_2_Master_Write
  3668 ;; This function is called by:
  3669 ;;		_get_color_code
  3670 ;;		_calibrate_black
  3671 ;;		_calibrate_white
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text16
  3676   001D00                     __ptext16:
  3677                           	callstack 0
  3678   001D00                     _color_read_Red:
  3679                           	callstack 22
  3680   001D00                     
  3681                           ;color.c: 101:  unsigned int tmp;;color.c: 102:  I2C_2_Master_Start();
  3682   001D00  ECEF  F010         	call	_I2C_2_Master_Start	;wreg free
  3683                           
  3684                           ;color.c: 103:  I2C_2_Master_Write(0x52 | 0x00);
  3685   001D04  0E52               	movlw	82
  3686   001D06  ECD3  F010         	call	_I2C_2_Master_Write
  3687                           
  3688                           ;color.c: 104:  I2C_2_Master_Write(0xA0 | 0x16);
  3689   001D0A  0EB6               	movlw	182
  3690   001D0C  ECD3  F010         	call	_I2C_2_Master_Write
  3691                           
  3692                           ;color.c: 105:  I2C_2_Master_RepStart();
  3693   001D10  ECF4  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3694                           
  3695                           ;color.c: 106:  I2C_2_Master_Write(0x52 | 0x01);
  3696   001D14  0E53               	movlw	83
  3697   001D16  ECD3  F010         	call	_I2C_2_Master_Write
  3698                           
  3699                           ;color.c: 107:  tmp=I2C_2_Master_Read(1);
  3700   001D1A  0E01               	movlw	1
  3701   001D1C  ECFB  F00F         	call	_I2C_2_Master_Read
  3702   001D20  6E14               	movwf	??_color_read_Red^0,c
  3703   001D22  5014               	movf	??_color_read_Red^0,w,c
  3704   001D24  6E17               	movwf	color_read_Red@tmp^0,c
  3705   001D26  6A18               	clrf	(color_read_Red@tmp+1)^0,c
  3706                           
  3707                           ;color.c: 108:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3708   001D28  0E00               	movlw	0
  3709   001D2A  ECFB  F00F         	call	_I2C_2_Master_Read
  3710   001D2E  6E14               	movwf	??_color_read_Red^0,c
  3711   001D30  5014               	movf	??_color_read_Red^0,w,c
  3712   001D32  6E16               	movwf	(??_color_read_Red+2)^0,c
  3713   001D34  6A15               	clrf	(??_color_read_Red+1)^0,c
  3714   001D36  5017               	movf	color_read_Red@tmp^0,w,c
  3715   001D38  1015               	iorwf	(??_color_read_Red+1)^0,w,c
  3716   001D3A  6E17               	movwf	color_read_Red@tmp^0,c
  3717   001D3C  5018               	movf	(color_read_Red@tmp+1)^0,w,c
  3718   001D3E  1016               	iorwf	(??_color_read_Red+2)^0,w,c
  3719   001D40  6E18               	movwf	(color_read_Red@tmp+1)^0,c
  3720                           
  3721                           ;color.c: 109:  I2C_2_Master_Stop();
  3722   001D42  ECEA  F010         	call	_I2C_2_Master_Stop	;wreg free
  3723   001D46                     
  3724                           ;color.c: 110:  return tmp;
  3725   001D46  C017  F012         	movff	color_read_Red@tmp,?_color_read_Red
  3726   001D4A  C018  F013         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3727   001D4E  0012               	return		;funcret
  3728   001D50                     __end_of_color_read_Red:
  3729                           	callstack 0
  3730                           
  3731 ;; *************** function _color_read_Green *****************
  3732 ;; Defined at:
  3733 ;;		line 127 in file "color.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;		None
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  tmp             2   22[COMRAM] unsigned int 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  2   17[COMRAM] unsigned int 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3749 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3750 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3751 ;;Total ram usage:        7 bytes
  3752 ;; Hardware stack levels used: 1
  3753 ;; Hardware stack levels required when called: 7
  3754 ;; This function calls:
  3755 ;;		_I2C_2_Master_Read
  3756 ;;		_I2C_2_Master_RepStart
  3757 ;;		_I2C_2_Master_Start
  3758 ;;		_I2C_2_Master_Stop
  3759 ;;		_I2C_2_Master_Write
  3760 ;; This function is called by:
  3761 ;;		_get_color_code
  3762 ;;		_calibrate_black
  3763 ;;		_calibrate_white
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text17
  3768   001D50                     __ptext17:
  3769                           	callstack 0
  3770   001D50                     _color_read_Green:
  3771                           	callstack 22
  3772   001D50                     
  3773                           ;color.c: 129:  unsigned int tmp;;color.c: 130:  I2C_2_Master_Start();
  3774   001D50  ECEF  F010         	call	_I2C_2_Master_Start	;wreg free
  3775                           
  3776                           ;color.c: 131:  I2C_2_Master_Write(0x52 | 0x00);
  3777   001D54  0E52               	movlw	82
  3778   001D56  ECD3  F010         	call	_I2C_2_Master_Write
  3779                           
  3780                           ;color.c: 132:  I2C_2_Master_Write(0xA0 | 0x18);
  3781   001D5A  0EB8               	movlw	184
  3782   001D5C  ECD3  F010         	call	_I2C_2_Master_Write
  3783                           
  3784                           ;color.c: 133:  I2C_2_Master_RepStart();
  3785   001D60  ECF4  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3786                           
  3787                           ;color.c: 134:  I2C_2_Master_Write(0x52 | 0x01);
  3788   001D64  0E53               	movlw	83
  3789   001D66  ECD3  F010         	call	_I2C_2_Master_Write
  3790                           
  3791                           ;color.c: 135:  tmp=I2C_2_Master_Read(1);
  3792   001D6A  0E01               	movlw	1
  3793   001D6C  ECFB  F00F         	call	_I2C_2_Master_Read
  3794   001D70  6E14               	movwf	??_color_read_Green^0,c
  3795   001D72  5014               	movf	??_color_read_Green^0,w,c
  3796   001D74  6E17               	movwf	color_read_Green@tmp^0,c
  3797   001D76  6A18               	clrf	(color_read_Green@tmp+1)^0,c
  3798                           
  3799                           ;color.c: 136:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3800   001D78  0E00               	movlw	0
  3801   001D7A  ECFB  F00F         	call	_I2C_2_Master_Read
  3802   001D7E  6E14               	movwf	??_color_read_Green^0,c
  3803   001D80  5014               	movf	??_color_read_Green^0,w,c
  3804   001D82  6E16               	movwf	(??_color_read_Green+2)^0,c
  3805   001D84  6A15               	clrf	(??_color_read_Green+1)^0,c
  3806   001D86  5017               	movf	color_read_Green@tmp^0,w,c
  3807   001D88  1015               	iorwf	(??_color_read_Green+1)^0,w,c
  3808   001D8A  6E17               	movwf	color_read_Green@tmp^0,c
  3809   001D8C  5018               	movf	(color_read_Green@tmp+1)^0,w,c
  3810   001D8E  1016               	iorwf	(??_color_read_Green+2)^0,w,c
  3811   001D90  6E18               	movwf	(color_read_Green@tmp+1)^0,c
  3812                           
  3813                           ;color.c: 137:  I2C_2_Master_Stop();
  3814   001D92  ECEA  F010         	call	_I2C_2_Master_Stop	;wreg free
  3815   001D96                     
  3816                           ;color.c: 138:  return tmp;
  3817   001D96  C017  F012         	movff	color_read_Green@tmp,?_color_read_Green
  3818   001D9A  C018  F013         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3819   001D9E  0012               	return		;funcret
  3820   001DA0                     __end_of_color_read_Green:
  3821                           	callstack 0
  3822                           
  3823 ;; *************** function _color_read_Clear *****************
  3824 ;; Defined at:
  3825 ;;		line 141 in file "color.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;		None
  3828 ;; Auto vars:     Size  Location     Type
  3829 ;;  tmp             2   22[COMRAM] unsigned int 
  3830 ;; Return value:  Size  Location     Type
  3831 ;;                  2   17[COMRAM] unsigned int 
  3832 ;; Registers used:
  3833 ;;		wreg, status,2, status,0, cstack
  3834 ;; Tracked objects:
  3835 ;;		On entry : 0/0
  3836 ;;		On exit  : 0/0
  3837 ;;		Unchanged: 0/0
  3838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3841 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3842 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3843 ;;Total ram usage:        7 bytes
  3844 ;; Hardware stack levels used: 1
  3845 ;; Hardware stack levels required when called: 7
  3846 ;; This function calls:
  3847 ;;		_I2C_2_Master_Read
  3848 ;;		_I2C_2_Master_RepStart
  3849 ;;		_I2C_2_Master_Start
  3850 ;;		_I2C_2_Master_Stop
  3851 ;;		_I2C_2_Master_Write
  3852 ;; This function is called by:
  3853 ;;		_calibrate_black
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text18
  3858   001DA0                     __ptext18:
  3859                           	callstack 0
  3860   001DA0                     _color_read_Clear:
  3861                           	callstack 21
  3862   001DA0                     
  3863                           ;color.c: 143:  unsigned int tmp;;color.c: 144:  I2C_2_Master_Start();
  3864   001DA0  ECEF  F010         	call	_I2C_2_Master_Start	;wreg free
  3865                           
  3866                           ;color.c: 145:  I2C_2_Master_Write(0x52 | 0x00);
  3867   001DA4  0E52               	movlw	82
  3868   001DA6  ECD3  F010         	call	_I2C_2_Master_Write
  3869                           
  3870                           ;color.c: 146:  I2C_2_Master_Write(0xA0 | 0x14);
  3871   001DAA  0EB4               	movlw	180
  3872   001DAC  ECD3  F010         	call	_I2C_2_Master_Write
  3873                           
  3874                           ;color.c: 147:  I2C_2_Master_RepStart();
  3875   001DB0  ECF4  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3876                           
  3877                           ;color.c: 148:  I2C_2_Master_Write(0x52 | 0x01);
  3878   001DB4  0E53               	movlw	83
  3879   001DB6  ECD3  F010         	call	_I2C_2_Master_Write
  3880                           
  3881                           ;color.c: 149:  tmp=I2C_2_Master_Read(1);
  3882   001DBA  0E01               	movlw	1
  3883   001DBC  ECFB  F00F         	call	_I2C_2_Master_Read
  3884   001DC0  6E14               	movwf	??_color_read_Clear^0,c
  3885   001DC2  5014               	movf	??_color_read_Clear^0,w,c
  3886   001DC4  6E17               	movwf	color_read_Clear@tmp^0,c
  3887   001DC6  6A18               	clrf	(color_read_Clear@tmp+1)^0,c
  3888                           
  3889                           ;color.c: 150:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3890   001DC8  0E00               	movlw	0
  3891   001DCA  ECFB  F00F         	call	_I2C_2_Master_Read
  3892   001DCE  6E14               	movwf	??_color_read_Clear^0,c
  3893   001DD0  5014               	movf	??_color_read_Clear^0,w,c
  3894   001DD2  6E16               	movwf	(??_color_read_Clear+2)^0,c
  3895   001DD4  6A15               	clrf	(??_color_read_Clear+1)^0,c
  3896   001DD6  5017               	movf	color_read_Clear@tmp^0,w,c
  3897   001DD8  1015               	iorwf	(??_color_read_Clear+1)^0,w,c
  3898   001DDA  6E17               	movwf	color_read_Clear@tmp^0,c
  3899   001DDC  5018               	movf	(color_read_Clear@tmp+1)^0,w,c
  3900   001DDE  1016               	iorwf	(??_color_read_Clear+2)^0,w,c
  3901   001DE0  6E18               	movwf	(color_read_Clear@tmp+1)^0,c
  3902                           
  3903                           ;color.c: 151:  I2C_2_Master_Stop();
  3904   001DE2  ECEA  F010         	call	_I2C_2_Master_Stop	;wreg free
  3905   001DE6                     
  3906                           ;color.c: 152:  return tmp;
  3907   001DE6  C017  F012         	movff	color_read_Clear@tmp,?_color_read_Clear
  3908   001DEA  C018  F013         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3909   001DEE  0012               	return		;funcret
  3910   001DF0                     __end_of_color_read_Clear:
  3911                           	callstack 0
  3912                           
  3913 ;; *************** function _color_read_Blue *****************
  3914 ;; Defined at:
  3915 ;;		line 113 in file "color.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;		None
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  tmp             2   22[COMRAM] unsigned int 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  2   17[COMRAM] unsigned int 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3929 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3931 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3932 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3933 ;;Total ram usage:        7 bytes
  3934 ;; Hardware stack levels used: 1
  3935 ;; Hardware stack levels required when called: 7
  3936 ;; This function calls:
  3937 ;;		_I2C_2_Master_Read
  3938 ;;		_I2C_2_Master_RepStart
  3939 ;;		_I2C_2_Master_Start
  3940 ;;		_I2C_2_Master_Stop
  3941 ;;		_I2C_2_Master_Write
  3942 ;; This function is called by:
  3943 ;;		_get_color_code
  3944 ;;		_calibrate_black
  3945 ;;		_calibrate_white
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text19
  3950   001DF0                     __ptext19:
  3951                           	callstack 0
  3952   001DF0                     _color_read_Blue:
  3953                           	callstack 22
  3954   001DF0                     
  3955                           ;color.c: 115:  unsigned int tmp;;color.c: 116:  I2C_2_Master_Start();
  3956   001DF0  ECEF  F010         	call	_I2C_2_Master_Start	;wreg free
  3957                           
  3958                           ;color.c: 117:  I2C_2_Master_Write(0x52 | 0x00);
  3959   001DF4  0E52               	movlw	82
  3960   001DF6  ECD3  F010         	call	_I2C_2_Master_Write
  3961                           
  3962                           ;color.c: 118:  I2C_2_Master_Write(0xA0 | 0x1A);
  3963   001DFA  0EBA               	movlw	186
  3964   001DFC  ECD3  F010         	call	_I2C_2_Master_Write
  3965                           
  3966                           ;color.c: 119:  I2C_2_Master_RepStart();
  3967   001E00  ECF4  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3968                           
  3969                           ;color.c: 120:  I2C_2_Master_Write(0x52 | 0x01);
  3970   001E04  0E53               	movlw	83
  3971   001E06  ECD3  F010         	call	_I2C_2_Master_Write
  3972                           
  3973                           ;color.c: 121:  tmp=I2C_2_Master_Read(1);
  3974   001E0A  0E01               	movlw	1
  3975   001E0C  ECFB  F00F         	call	_I2C_2_Master_Read
  3976   001E10  6E14               	movwf	??_color_read_Blue^0,c
  3977   001E12  5014               	movf	??_color_read_Blue^0,w,c
  3978   001E14  6E17               	movwf	color_read_Blue@tmp^0,c
  3979   001E16  6A18               	clrf	(color_read_Blue@tmp+1)^0,c
  3980                           
  3981                           ;color.c: 122:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3982   001E18  0E00               	movlw	0
  3983   001E1A  ECFB  F00F         	call	_I2C_2_Master_Read
  3984   001E1E  6E14               	movwf	??_color_read_Blue^0,c
  3985   001E20  5014               	movf	??_color_read_Blue^0,w,c
  3986   001E22  6E16               	movwf	(??_color_read_Blue+2)^0,c
  3987   001E24  6A15               	clrf	(??_color_read_Blue+1)^0,c
  3988   001E26  5017               	movf	color_read_Blue@tmp^0,w,c
  3989   001E28  1015               	iorwf	(??_color_read_Blue+1)^0,w,c
  3990   001E2A  6E17               	movwf	color_read_Blue@tmp^0,c
  3991   001E2C  5018               	movf	(color_read_Blue@tmp+1)^0,w,c
  3992   001E2E  1016               	iorwf	(??_color_read_Blue+2)^0,w,c
  3993   001E30  6E18               	movwf	(color_read_Blue@tmp+1)^0,c
  3994                           
  3995                           ;color.c: 123:  I2C_2_Master_Stop();
  3996   001E32  ECEA  F010         	call	_I2C_2_Master_Stop	;wreg free
  3997   001E36                     
  3998                           ;color.c: 124:  return tmp;
  3999   001E36  C017  F012         	movff	color_read_Blue@tmp,?_color_read_Blue
  4000   001E3A  C018  F013         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  4001   001E3E  0012               	return		;funcret
  4002   001E40                     __end_of_color_read_Blue:
  4003                           	callstack 0
  4004                           
  4005 ;; *************** function _I2C_2_Master_Write *****************
  4006 ;; Defined at:
  4007 ;;		line 45 in file "i2c.c"
  4008 ;; Parameters:    Size  Location     Type
  4009 ;;  data_byte       1    wreg     unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  data_byte       1   14[COMRAM] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  1    wreg      void 
  4014 ;; Registers used:
  4015 ;;		wreg, status,2, status,0, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4022 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4024 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4025 ;;Total ram usage:        1 bytes
  4026 ;; Hardware stack levels used: 1
  4027 ;; Hardware stack levels required when called: 6
  4028 ;; This function calls:
  4029 ;;		_I2C_2_Master_Idle
  4030 ;; This function is called by:
  4031 ;;		_color_writetoaddr
  4032 ;;		_color_read_Red
  4033 ;;		_color_read_Blue
  4034 ;;		_color_read_Green
  4035 ;;		_color_read_Clear
  4036 ;; This function uses a non-reentrant model
  4037 ;;
  4038                           
  4039                           	psect	text20
  4040   0021A6                     __ptext20:
  4041                           	callstack 0
  4042   0021A6                     _I2C_2_Master_Write:
  4043                           	callstack 22
  4044                           
  4045                           ;incstack = 0
  4046                           ;I2C_2_Master_Write@data_byte stored from wreg
  4047   0021A6  6E0F               	movwf	I2C_2_Master_Write@data_byte^0,c
  4048   0021A8                     
  4049                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  4050   0021A8  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4051   0021AC                     
  4052                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4053   0021AC  C00F  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4054   0021B0  0012               	return		;funcret
  4055   0021B2                     __end_of_I2C_2_Master_Write:
  4056                           	callstack 0
  4057                           
  4058 ;; *************** function _I2C_2_Master_Stop *****************
  4059 ;; Defined at:
  4060 ;;		line 39 in file "i2c.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;		None
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;Total ram usage:        0 bytes
  4079 ;; Hardware stack levels used: 1
  4080 ;; Hardware stack levels required when called: 6
  4081 ;; This function calls:
  4082 ;;		_I2C_2_Master_Idle
  4083 ;; This function is called by:
  4084 ;;		_color_writetoaddr
  4085 ;;		_color_read_Red
  4086 ;;		_color_read_Blue
  4087 ;;		_color_read_Green
  4088 ;;		_color_read_Clear
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text21
  4093   0021D4                     __ptext21:
  4094                           	callstack 0
  4095   0021D4                     _I2C_2_Master_Stop:
  4096                           	callstack 22
  4097   0021D4                     
  4098                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4099   0021D4  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4100   0021D8                     
  4101                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4102   0021D8  010E               	movlb	14	; () banked
  4103   0021DA  85DA               	bsf	218,2,b	;volatile
  4104   0021DC                     
  4105                           ; BSR set to: 14
  4106   0021DC  0012               	return		;funcret
  4107   0021DE                     __end_of_I2C_2_Master_Stop:
  4108                           	callstack 0
  4109                           
  4110 ;; *************** function _I2C_2_Master_Start *****************
  4111 ;; Defined at:
  4112 ;;		line 27 in file "i2c.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;		None
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;		None
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4130 ;;Total ram usage:        0 bytes
  4131 ;; Hardware stack levels used: 1
  4132 ;; Hardware stack levels required when called: 6
  4133 ;; This function calls:
  4134 ;;		_I2C_2_Master_Idle
  4135 ;; This function is called by:
  4136 ;;		_color_writetoaddr
  4137 ;;		_color_read_Red
  4138 ;;		_color_read_Blue
  4139 ;;		_color_read_Green
  4140 ;;		_color_read_Clear
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text22
  4145   0021DE                     __ptext22:
  4146                           	callstack 0
  4147   0021DE                     _I2C_2_Master_Start:
  4148                           	callstack 22
  4149   0021DE                     
  4150                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4151   0021DE  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4152   0021E2                     
  4153                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4154   0021E2  010E               	movlb	14	; () banked
  4155   0021E4  81DA               	bsf	218,0,b	;volatile
  4156   0021E6                     
  4157                           ; BSR set to: 14
  4158   0021E6  0012               	return		;funcret
  4159   0021E8                     __end_of_I2C_2_Master_Start:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _I2C_2_Master_RepStart *****************
  4163 ;; Defined at:
  4164 ;;		line 33 in file "i2c.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;		None
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;		None
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      void 
  4171 ;; Registers used:
  4172 ;;		wreg, status,2, status,0, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4182 ;;Total ram usage:        0 bytes
  4183 ;; Hardware stack levels used: 1
  4184 ;; Hardware stack levels required when called: 6
  4185 ;; This function calls:
  4186 ;;		_I2C_2_Master_Idle
  4187 ;; This function is called by:
  4188 ;;		_color_read_Red
  4189 ;;		_color_read_Blue
  4190 ;;		_color_read_Green
  4191 ;;		_color_read_Clear
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           	psect	text23
  4196   0021E8                     __ptext23:
  4197                           	callstack 0
  4198   0021E8                     _I2C_2_Master_RepStart:
  4199                           	callstack 22
  4200   0021E8                     
  4201                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4202   0021E8  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4203   0021EC                     
  4204                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4205   0021EC  010E               	movlb	14	; () banked
  4206   0021EE  83DA               	bsf	218,1,b	;volatile
  4207   0021F0                     
  4208                           ; BSR set to: 14
  4209   0021F0  0012               	return		;funcret
  4210   0021F2                     __end_of_I2C_2_Master_RepStart:
  4211                           	callstack 0
  4212                           
  4213 ;; *************** function _I2C_2_Master_Read *****************
  4214 ;; Defined at:
  4215 ;;		line 51 in file "i2c.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  ack             1    wreg     unsigned char 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  ack             1   15[COMRAM] unsigned char 
  4220 ;;  tmp             1   16[COMRAM] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      unsigned char 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4231 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4232 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4233 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4234 ;;Total ram usage:        3 bytes
  4235 ;; Hardware stack levels used: 1
  4236 ;; Hardware stack levels required when called: 6
  4237 ;; This function calls:
  4238 ;;		_I2C_2_Master_Idle
  4239 ;; This function is called by:
  4240 ;;		_color_read_Red
  4241 ;;		_color_read_Blue
  4242 ;;		_color_read_Green
  4243 ;;		_color_read_Clear
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           	psect	text24
  4248   001FF6                     __ptext24:
  4249                           	callstack 0
  4250   001FF6                     _I2C_2_Master_Read:
  4251                           	callstack 22
  4252                           
  4253                           ; BSR set to: 14
  4254                           ;incstack = 0
  4255                           ;I2C_2_Master_Read@ack stored from wreg
  4256   001FF6  6E10               	movwf	I2C_2_Master_Read@ack^0,c
  4257   001FF8                     
  4258                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4259   001FF8  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4260   001FFC                     
  4261                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4262   001FFC  010E               	movlb	14	; () banked
  4263   001FFE  87DA               	bsf	218,3,b	;volatile
  4264                           
  4265                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4266   002000  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4267   002004                     
  4268                           ;i2c.c: 57:   tmp = SSP2BUF;
  4269   002004  CED5 F011          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4270                           
  4271                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4272   002008  EC52  F010         	call	_I2C_2_Master_Idle	;wreg free
  4273   00200C                     
  4274                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4275   00200C  5010               	movf	I2C_2_Master_Read@ack^0,w,c
  4276   00200E  B4D8               	btfsc	status,2,c
  4277   002010  EF0C  F010         	goto	u2811
  4278   002014  EF10  F010         	goto	u2810
  4279   002018                     u2811:
  4280   002018  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4281   00201A  2A0F               	incf	??_I2C_2_Master_Read^0,f,c
  4282   00201C  EF11  F010         	goto	u2828
  4283   002020                     u2810:
  4284   002020  6A0F               	clrf	??_I2C_2_Master_Read^0,c
  4285   002022                     u2828:
  4286   002022  3A0F               	swapf	??_I2C_2_Master_Read^0,f,c
  4287   002024  460F               	rlncf	??_I2C_2_Master_Read^0,f,c
  4288   002026  010E               	movlb	14	; () banked
  4289   002028  51DA               	movf	218,w,b	;volatile
  4290   00202A  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4291   00202C  0BDF               	andlw	-33
  4292   00202E  180F               	xorwf	??_I2C_2_Master_Read^0,w,c
  4293   002030  6FDA               	movwf	218,b	;volatile
  4294   002032                     
  4295                           ; BSR set to: 14
  4296                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4297   002032  89DA               	bsf	218,4,b	;volatile
  4298   002034                     
  4299                           ; BSR set to: 14
  4300                           ;i2c.c: 61:   return tmp;
  4301   002034  5011               	movf	I2C_2_Master_Read@tmp^0,w,c
  4302   002036                     
  4303                           ; BSR set to: 14
  4304   002036  0012               	return		;funcret
  4305   002038                     __end_of_I2C_2_Master_Read:
  4306                           	callstack 0
  4307                           
  4308 ;; *************** function _I2C_2_Master_Idle *****************
  4309 ;; Defined at:
  4310 ;;		line 22 in file "i2c.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;		None
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      void 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4328 ;;Total ram usage:        1 bytes
  4329 ;; Hardware stack levels used: 1
  4330 ;; Hardware stack levels required when called: 5
  4331 ;; This function calls:
  4332 ;;		Nothing
  4333 ;; This function is called by:
  4334 ;;		_I2C_2_Master_Start
  4335 ;;		_I2C_2_Master_RepStart
  4336 ;;		_I2C_2_Master_Stop
  4337 ;;		_I2C_2_Master_Write
  4338 ;;		_I2C_2_Master_Read
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text25
  4343   0020A4                     __ptext25:
  4344                           	callstack 0
  4345   0020A4                     _I2C_2_Master_Idle:
  4346                           	callstack 22
  4347   0020A4                     l365:
  4348   0020A4  010E               	movlb	14	; () banked
  4349   0020A6  B5D8               	btfsc	216,2,b	;volatile
  4350   0020A8  EF58  F010         	goto	u2791
  4351   0020AC  EF5A  F010         	goto	u2790
  4352   0020B0                     u2791:
  4353   0020B0  EF52  F010         	goto	l365
  4354   0020B4                     u2790:
  4355   0020B4                     
  4356                           ; BSR set to: 14
  4357   0020B4  CEDA F00E          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4358   0020B8  0E1F               	movlw	31
  4359   0020BA  160E               	andwf	??_I2C_2_Master_Idle^0,f,c
  4360   0020BC  A4D8               	btfss	status,2,c
  4361   0020BE  EF63  F010         	goto	u2801
  4362   0020C2  EF65  F010         	goto	u2800
  4363   0020C6                     u2801:
  4364   0020C6  EF52  F010         	goto	l365
  4365   0020CA                     u2800:
  4366   0020CA                     
  4367                           ; BSR set to: 14
  4368   0020CA  0012               	return		;funcret
  4369   0020CC                     __end_of_I2C_2_Master_Idle:
  4370                           	callstack 0
  4371                           
  4372 ;; *************** function _I2C_2_Master_Init *****************
  4373 ;; Defined at:
  4374 ;;		line 4 in file "i2c.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;		None
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      void 
  4381 ;; Registers used:
  4382 ;;		wreg, status,2
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4392 ;;Total ram usage:        0 bytes
  4393 ;; Hardware stack levels used: 1
  4394 ;; Hardware stack levels required when called: 5
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_color_click_init
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text26
  4403   00207A                     __ptext26:
  4404                           	callstack 0
  4405   00207A                     _I2C_2_Master_Init:
  4406                           	callstack 24
  4407   00207A                     
  4408                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4409   00207A  010E               	movlb	14	; () banked
  4410   00207C  51D9               	movf	217,w,b	;volatile
  4411   00207E  0BF0               	andlw	-16
  4412   002080  0908               	iorlw	8
  4413   002082  6FD9               	movwf	217,b	;volatile
  4414   002084                     
  4415                           ; BSR set to: 14
  4416                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4417   002084  8BD9               	bsf	217,5,b	;volatile
  4418                           
  4419                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4420   002086  0E9F               	movlw	159
  4421   002088  6FD6               	movwf	214,b	;volatile
  4422   00208A                     
  4423                           ; BSR set to: 14
  4424                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4425   00208A  8A84               	bsf	132,5,c	;volatile
  4426   00208C                     
  4427                           ; BSR set to: 14
  4428                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4429   00208C  8C84               	bsf	132,6,c	;volatile
  4430   00208E                     
  4431                           ; BSR set to: 14
  4432                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4433   00208E  9BA7               	bcf	167,5,b	;volatile
  4434   002090                     
  4435                           ; BSR set to: 14
  4436                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4437   002090  9DA7               	bcf	167,6,b	;volatile
  4438                           
  4439                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4440   002092  0E1D               	movlw	29
  4441   002094  6F1D               	movwf	29,b	;volatile
  4442                           
  4443                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4444   002096  0E1E               	movlw	30
  4445   002098  6F1C               	movwf	28,b	;volatile
  4446                           
  4447                           ;i2c.c: 18:   RD5PPS=0x1C;
  4448   00209A  0E1C               	movlw	28
  4449   00209C  6F6F               	movwf	111,b	;volatile
  4450                           
  4451                           ;i2c.c: 19:   RD6PPS=0x1B;
  4452   00209E  0E1B               	movlw	27
  4453   0020A0  6F70               	movwf	112,b	;volatile
  4454   0020A2                     
  4455                           ; BSR set to: 14
  4456   0020A2  0012               	return		;funcret
  4457   0020A4                     __end_of_I2C_2_Master_Init:
  4458                           	callstack 0
  4459                           
  4460 ;; *************** function _add_seconds_to_list *****************
  4461 ;; Defined at:
  4462 ;;		line 436 in file "dc_motor.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      void 
  4469 ;; Registers used:
  4470 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4480 ;;Total ram usage:        2 bytes
  4481 ;; Hardware stack levels used: 1
  4482 ;; Hardware stack levels required when called: 5
  4483 ;; This function calls:
  4484 ;;		Nothing
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           	psect	text27
  4491   001F26                     __ptext27:
  4492                           	callstack 0
  4493   001F26                     _add_seconds_to_list:
  4494                           	callstack 25
  4495   001F26                     
  4496                           ;dc_motor.c: 438:     if (seconds > 22)
  4497   001F26  BE4A               	btfsc	(_seconds+1)^0,7,c
  4498   001F28  EF9F  F00F         	goto	u3561
  4499   001F2C  504A               	movf	(_seconds+1)^0,w,c
  4500   001F2E  E109               	bnz	u3560
  4501   001F30  0E17               	movlw	23
  4502   001F32  5C49               	subwf	_seconds^0,w,c
  4503   001F34  A0D8               	btfss	status,0,c
  4504   001F36  EF9F  F00F         	goto	u3561
  4505   001F3A  EFA1  F00F         	goto	u3560
  4506   001F3E                     u3561:
  4507   001F3E  EFB6  F00F         	goto	l319
  4508   001F42                     u3560:
  4509   001F42                     
  4510                           ;dc_motor.c: 439:     {;dc_motor.c: 440:         movement_list[index] = seconds - 11;
  4511   001F42  0EF5               	movlw	245
  4512   001F44  2449               	addwf	_seconds^0,w,c
  4513   001F46  6E0E               	movwf	??_add_seconds_to_list^0,c
  4514   001F48  0EFF               	movlw	255
  4515   001F4A  204A               	addwfc	(_seconds+1)^0,w,c
  4516   001F4C  6E0F               	movwf	(??_add_seconds_to_list+1)^0,c
  4517   001F4E  90D8               	bcf	status,0,c
  4518   001F50  3447               	rlcf	_index^0,w,c
  4519   001F52  6ED9               	movwf	fsr2l,c
  4520   001F54  3448               	rlcf	(_index+1)^0,w,c
  4521   001F56  6EDA               	movwf	fsr2h,c
  4522   001F58  0E00               	movlw	low _movement_list
  4523   001F5A  26D9               	addwf	fsr2l,f,c
  4524   001F5C  0E02               	movlw	high _movement_list
  4525   001F5E  22DA               	addwfc	fsr2h,f,c
  4526   001F60  C00E  FFDE         	movff	??_add_seconds_to_list,postinc2
  4527   001F64  C00F  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4528   001F68                     
  4529                           ;dc_motor.c: 441:         index++;
  4530   001F68  4A47               	infsnz	_index^0,f,c
  4531   001F6A  2A48               	incf	(_index+1)^0,f,c
  4532   001F6C                     l319:
  4533   001F6C  0012               	return		;funcret
  4534   001F6E                     __end_of_add_seconds_to_list:
  4535                           	callstack 0
  4536                           
  4537 ;; *************** function _Timer0_init *****************
  4538 ;; Defined at:
  4539 ;;		line 7 in file "timers.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;		None
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4557 ;;Total ram usage:        0 bytes
  4558 ;; Hardware stack levels used: 1
  4559 ;; Hardware stack levels required when called: 5
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text28
  4568   00215E                     __ptext28:
  4569                           	callstack 0
  4570   00215E                     _Timer0_init:
  4571                           	callstack 25
  4572   00215E                     
  4573                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4574   00215E  50D6               	movf	214,w,c	;volatile
  4575   002160  0B1F               	andlw	-225
  4576   002162  0940               	iorlw	64
  4577   002164  6ED6               	movwf	214,c	;volatile
  4578   002166                     
  4579                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4580   002166  88D6               	bsf	214,4,c	;volatile
  4581                           
  4582                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4583   002168  50D6               	movf	214,w,c	;volatile
  4584   00216A  0BF0               	andlw	-16
  4585   00216C  0908               	iorlw	8
  4586   00216E  6ED6               	movwf	214,c	;volatile
  4587                           
  4588                           ;timers.c: 13:     TMR0H=0b11111101;
  4589   002170  0EFD               	movlw	253
  4590   002172  6ED4               	movwf	212,c	;volatile
  4591                           
  4592                           ;timers.c: 14:     TMR0L=0b10010000;
  4593   002174  0E90               	movlw	144
  4594   002176  6ED3               	movwf	211,c	;volatile
  4595   002178                     
  4596                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4597   002178  88D5               	bsf	213,4,c	;volatile
  4598   00217A                     
  4599                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4600   00217A  8ED5               	bsf	213,7,c	;volatile
  4601   00217C  0012               	return		;funcret
  4602   00217E                     __end_of_Timer0_init:
  4603                           	callstack 0
  4604                           
  4605 ;; *************** function _RobotMovement *****************
  4606 ;; Defined at:
  4607 ;;		line 303 in file "dc_motor.c"
  4608 ;; Parameters:    Size  Location     Type
  4609 ;;  color           2   42[COMRAM] unsigned int 
  4610 ;;  motorL          2   44[COMRAM] PTR struct DC_motor
  4611 ;;		 -> main@motorL(9), 
  4612 ;;  motorR          2   46[COMRAM] PTR struct DC_motor
  4613 ;;		 -> main@motorR(9), 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  i               2   52[COMRAM] int 
  4616 ;;  i               2   50[COMRAM] int 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4626 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4627 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4628 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4629 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4630 ;;Total ram usage:       12 bytes
  4631 ;; Hardware stack levels used: 1
  4632 ;; Hardware stack levels required when called: 8
  4633 ;; This function calls:
  4634 ;;		_TimedfullSpeedAhead
  4635 ;;		_moveBack
  4636 ;;		_stop
  4637 ;;		_turnLeft
  4638 ;;		_turnLeftLong
  4639 ;;		_turnRight
  4640 ;;		_turnRightLong
  4641 ;; This function is called by:
  4642 ;;		_main
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text29
  4647   0000A6                     __ptext29:
  4648                           	callstack 0
  4649   0000A6                     _RobotMovement:
  4650                           	callstack 22
  4651   0000A6                     
  4652                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 305:     moveBack(motorL, motorR, 11);
  4653   0000A6  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4654   0000AA  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4655   0000AE  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4656   0000B2  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4657   0000B6  0E00               	movlw	0
  4658   0000B8  6E26               	movwf	(moveBack@time+1)^0,c
  4659   0000BA  0E0B               	movlw	11
  4660   0000BC  6E25               	movwf	moveBack@time^0,c
  4661   0000BE  EC05  F00D         	call	_moveBack	;wreg free
  4662                           
  4663                           ;dc_motor.c: 306:     stop(motorL,motorR);
  4664   0000C2  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4665   0000C6  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4666   0000CA  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4667   0000CE  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4668   0000D2  EC6E  F00F         	call	_stop	;wreg free
  4669   0000D6                     
  4670                           ;dc_motor.c: 309:     if(color == 0){
  4671   0000D6  502B               	movf	RobotMovement@color^0,w,c
  4672   0000D8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4673   0000DA  A4D8               	btfss	status,2,c
  4674   0000DC  EF72  F000         	goto	u3391
  4675   0000E0  EF74  F000         	goto	u3390
  4676   0000E4                     u3391:
  4677   0000E4  EF8D  F000         	goto	l4153
  4678   0000E8                     u3390:
  4679   0000E8                     
  4680                           ;dc_motor.c: 310:         turnRight(motorL, motorR);
  4681   0000E8  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4682   0000EC  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4683   0000F0  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4684   0000F4  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4685   0000F8  ECC1  F008         	call	_turnRight	;wreg free
  4686   0000FC                     
  4687                           ;dc_motor.c: 311:         movement_list[index] = -1;
  4688   0000FC  90D8               	bcf	status,0,c
  4689   0000FE  3447               	rlcf	_index^0,w,c
  4690   000100  6ED9               	movwf	fsr2l,c
  4691   000102  3448               	rlcf	(_index+1)^0,w,c
  4692   000104  6EDA               	movwf	fsr2h,c
  4693   000106  0E00               	movlw	low _movement_list
  4694   000108  26D9               	addwf	fsr2l,f,c
  4695   00010A  0E02               	movlw	high _movement_list
  4696   00010C  22DA               	addwfc	fsr2h,f,c
  4697   00010E  0EFF               	movlw	255
  4698   000110  6EDE               	movwf	postinc2,c
  4699   000112  0EFF               	movlw	255
  4700   000114  6EDD               	movwf	postdec2,c
  4701   000116                     
  4702                           ;dc_motor.c: 312:         index++;
  4703   000116  4A47               	infsnz	_index^0,f,c
  4704   000118  2A48               	incf	(_index+1)^0,f,c
  4705   00011A                     l4153:
  4706                           
  4707                           ;dc_motor.c: 315:     if(color == 1){
  4708   00011A  042B               	decf	RobotMovement@color^0,w,c
  4709   00011C  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4710   00011E  A4D8               	btfss	status,2,c
  4711   000120  EF94  F000         	goto	u3401
  4712   000124  EF96  F000         	goto	u3400
  4713   000128                     u3401:
  4714   000128  EFAF  F000         	goto	l4161
  4715   00012C                     u3400:
  4716   00012C                     
  4717                           ;dc_motor.c: 316:         turnLeft(motorL, motorR);
  4718   00012C  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  4719   000130  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4720   000134  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  4721   000138  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4722   00013C  EC14  F008         	call	_turnLeft	;wreg free
  4723   000140                     
  4724                           ;dc_motor.c: 317:         movement_list[index] = -2;
  4725   000140  90D8               	bcf	status,0,c
  4726   000142  3447               	rlcf	_index^0,w,c
  4727   000144  6ED9               	movwf	fsr2l,c
  4728   000146  3448               	rlcf	(_index+1)^0,w,c
  4729   000148  6EDA               	movwf	fsr2h,c
  4730   00014A  0E00               	movlw	low _movement_list
  4731   00014C  26D9               	addwf	fsr2l,f,c
  4732   00014E  0E02               	movlw	high _movement_list
  4733   000150  22DA               	addwfc	fsr2h,f,c
  4734   000152  0EFE               	movlw	254
  4735   000154  6EDE               	movwf	postinc2,c
  4736   000156  0EFF               	movlw	255
  4737   000158  6EDD               	movwf	postdec2,c
  4738   00015A                     
  4739                           ;dc_motor.c: 318:         index++;
  4740   00015A  4A47               	infsnz	_index^0,f,c
  4741   00015C  2A48               	incf	(_index+1)^0,f,c
  4742   00015E                     l4161:
  4743                           
  4744                           ;dc_motor.c: 321:     if(color == 2){
  4745   00015E  0E02               	movlw	2
  4746   000160  182B               	xorwf	RobotMovement@color^0,w,c
  4747   000162  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4748   000164  A4D8               	btfss	status,2,c
  4749   000166  EFB7  F000         	goto	u3411
  4750   00016A  EFB9  F000         	goto	u3410
  4751   00016E                     u3411:
  4752   00016E  EFE6  F000         	goto	l4179
  4753   000172                     u3410:
  4754   000172                     
  4755                           ;dc_motor.c: 322:         int i;;dc_motor.c: 323:         for (i=0;i<2;i++){
  4756   000172  0E00               	movlw	0
  4757   000174  6E34               	movwf	(RobotMovement@i+1)^0,c
  4758   000176  0E00               	movlw	0
  4759   000178  6E33               	movwf	RobotMovement@i^0,c
  4760   00017A                     l4169:
  4761                           
  4762                           ;dc_motor.c: 324:             turnRight(motorL, motorR);
  4763   00017A  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4764   00017E  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4765   000182  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4766   000186  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4767   00018A  ECC1  F008         	call	_turnRight	;wreg free
  4768   00018E                     
  4769                           ;dc_motor.c: 325:             movement_list[index] = -1;
  4770   00018E  90D8               	bcf	status,0,c
  4771   000190  3447               	rlcf	_index^0,w,c
  4772   000192  6ED9               	movwf	fsr2l,c
  4773   000194  3448               	rlcf	(_index+1)^0,w,c
  4774   000196  6EDA               	movwf	fsr2h,c
  4775   000198  0E00               	movlw	low _movement_list
  4776   00019A  26D9               	addwf	fsr2l,f,c
  4777   00019C  0E02               	movlw	high _movement_list
  4778   00019E  22DA               	addwfc	fsr2h,f,c
  4779   0001A0  0EFF               	movlw	255
  4780   0001A2  6EDE               	movwf	postinc2,c
  4781   0001A4  0EFF               	movlw	255
  4782   0001A6  6EDD               	movwf	postdec2,c
  4783   0001A8                     
  4784                           ;dc_motor.c: 326:             index++;
  4785   0001A8  4A47               	infsnz	_index^0,f,c
  4786   0001AA  2A48               	incf	(_index+1)^0,f,c
  4787   0001AC                     
  4788                           ;dc_motor.c: 327:         }
  4789   0001AC  4A33               	infsnz	RobotMovement@i^0,f,c
  4790   0001AE  2A34               	incf	(RobotMovement@i+1)^0,f,c
  4791   0001B0  BE34               	btfsc	(RobotMovement@i+1)^0,7,c
  4792   0001B2  EFE4  F000         	goto	u3421
  4793   0001B6  5034               	movf	(RobotMovement@i+1)^0,w,c
  4794   0001B8  E109               	bnz	u3420
  4795   0001BA  0E02               	movlw	2
  4796   0001BC  5C33               	subwf	RobotMovement@i^0,w,c
  4797   0001BE  A0D8               	btfss	status,0,c
  4798   0001C0  EFE4  F000         	goto	u3421
  4799   0001C4  EFE6  F000         	goto	u3420
  4800   0001C8                     u3421:
  4801   0001C8  EFBD  F000         	goto	l4169
  4802   0001CC                     u3420:
  4803   0001CC                     l4179:
  4804                           
  4805                           ;dc_motor.c: 330:     if(color == 3){
  4806   0001CC  0E03               	movlw	3
  4807   0001CE  182B               	xorwf	RobotMovement@color^0,w,c
  4808   0001D0  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  4809   0001D2  A4D8               	btfss	status,2,c
  4810   0001D4  EFEE  F000         	goto	u3431
  4811   0001D8  EFF0  F000         	goto	u3430
  4812   0001DC                     u3431:
  4813   0001DC  EFA8  F001         	goto	l4199
  4814   0001E0                     u3430:
  4815   0001E0                     
  4816                           ;dc_motor.c: 332:         moveBack(motorL, motorR, 33);
  4817   0001E0  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  4818   0001E4  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4819   0001E8  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  4820   0001EC  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4821   0001F0  0E00               	movlw	0
  4822   0001F2  6E26               	movwf	(moveBack@time+1)^0,c
  4823   0001F4  0E21               	movlw	33
  4824   0001F6  6E25               	movwf	moveBack@time^0,c
  4825   0001F8  EC05  F00D         	call	_moveBack	;wreg free
  4826                           
  4827                           ;dc_motor.c: 333:         stop(motorL, motorR);
  4828   0001FC  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  4829   000200  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  4830   000204  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  4831   000208  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  4832   00020C  EC6E  F00F         	call	_stop	;wreg free
  4833                           
  4834                           ;dc_motor.c: 334:         turnRight(motorL, motorR);
  4835   000210  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  4836   000214  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4837   000218  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  4838   00021C  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4839   000220  ECC1  F008         	call	_turnRight	;wreg free
  4840   000224                     
  4841                           ;dc_motor.c: 336:         if (movement_list[index-1] > 11)
  4842   000224  90D8               	bcf	status,0,c
  4843   000226  3447               	rlcf	_index^0,w,c
  4844   000228  6ED9               	movwf	fsr2l,c
  4845   00022A  3448               	rlcf	(_index+1)^0,w,c
  4846   00022C  6EDA               	movwf	fsr2h,c
  4847   00022E  0EFE               	movlw	low (_movement_list+65534)
  4848   000230  26D9               	addwf	fsr2l,f,c
  4849   000232  0E01               	movlw	high (_movement_list+65534)
  4850   000234  22DA               	addwfc	fsr2h,f,c
  4851   000236  0E01               	movlw	1
  4852   000238  BEDB               	btfsc	plusw2,7,c
  4853   00023A  EF29  F001         	goto	u3441
  4854   00023E  0E01               	movlw	1
  4855   000240  50DB               	movf	plusw2,w,c
  4856   000242  E109               	bnz	u3440
  4857   000244  0E0C               	movlw	12
  4858   000246  5CDE               	subwf	postinc2,w,c
  4859   000248  A0D8               	btfss	status,0,c
  4860   00024A  EF29  F001         	goto	u3441
  4861   00024E  EF2B  F001         	goto	u3440
  4862   000252                     u3441:
  4863   000252  EF49  F001         	goto	l4189
  4864   000256                     u3440:
  4865   000256                     
  4866                           ;dc_motor.c: 337:         {;dc_motor.c: 339:             movement_list[index-1] -= 22;
  4867   000256  90D8               	bcf	status,0,c
  4868   000258  3447               	rlcf	_index^0,w,c
  4869   00025A  6ED9               	movwf	fsr2l,c
  4870   00025C  3448               	rlcf	(_index+1)^0,w,c
  4871   00025E  6EDA               	movwf	fsr2h,c
  4872   000260  0EFE               	movlw	low (_movement_list+65534)
  4873   000262  26D9               	addwf	fsr2l,f,c
  4874   000264  0E01               	movlw	high (_movement_list+65534)
  4875   000266  22DA               	addwfc	fsr2h,f,c
  4876   000268  0EEA               	movlw	234
  4877   00026A  26DE               	addwf	postinc2,f,c
  4878   00026C  0EFF               	movlw	255
  4879   00026E  22DD               	addwfc	postdec2,f,c
  4880                           
  4881                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4882   000270  90D8               	bcf	status,0,c
  4883   000272  3447               	rlcf	_index^0,w,c
  4884   000274  6ED9               	movwf	fsr2l,c
  4885   000276  3448               	rlcf	(_index+1)^0,w,c
  4886   000278  6EDA               	movwf	fsr2h,c
  4887   00027A  0E00               	movlw	low _movement_list
  4888   00027C  26D9               	addwf	fsr2l,f,c
  4889   00027E  0E02               	movlw	high _movement_list
  4890   000280  22DA               	addwfc	fsr2h,f,c
  4891   000282  0EFF               	movlw	255
  4892   000284  6EDE               	movwf	postinc2,c
  4893   000286  0EFF               	movlw	255
  4894   000288  6EDD               	movwf	postdec2,c
  4895   00028A                     
  4896                           ;dc_motor.c: 342:             index += 1;
  4897   00028A  4A47               	infsnz	_index^0,f,c
  4898   00028C  2A48               	incf	(_index+1)^0,f,c
  4899                           
  4900                           ;dc_motor.c: 343:         }else{
  4901   00028E  EFA8  F001         	goto	l4199
  4902   000292                     l4189:
  4903                           
  4904                           ;dc_motor.c: 345:             if (movement_list[index-1] == -1)
  4905   000292  90D8               	bcf	status,0,c
  4906   000294  3447               	rlcf	_index^0,w,c
  4907   000296  6ED9               	movwf	fsr2l,c
  4908   000298  3448               	rlcf	(_index+1)^0,w,c
  4909   00029A  6EDA               	movwf	fsr2h,c
  4910   00029C  0EFE               	movlw	low (_movement_list+65534)
  4911   00029E  26D9               	addwf	fsr2l,f,c
  4912   0002A0  0E01               	movlw	high (_movement_list+65534)
  4913   0002A2  22DA               	addwfc	fsr2h,f,c
  4914   0002A4  28DE               	incf	postinc2,w,c
  4915   0002A6  E106               	bnz	u3451
  4916   0002A8  28DE               	incf	postinc2,w,c
  4917   0002AA  A4D8               	btfss	status,2,c
  4918   0002AC  EF5A  F001         	goto	u3451
  4919   0002B0  EF5C  F001         	goto	u3450
  4920   0002B4                     u3451:
  4921   0002B4  EF69  F001         	goto	l299
  4922   0002B8                     u3450:
  4923   0002B8                     
  4924                           ;dc_motor.c: 346:             {;dc_motor.c: 348:                 movement_list[index-1] 
      +                          = -2;
  4925   0002B8  90D8               	bcf	status,0,c
  4926   0002BA  3447               	rlcf	_index^0,w,c
  4927   0002BC  6ED9               	movwf	fsr2l,c
  4928   0002BE  3448               	rlcf	(_index+1)^0,w,c
  4929   0002C0  6EDA               	movwf	fsr2h,c
  4930   0002C2  0EFE               	movlw	low (_movement_list+65534)
  4931   0002C4  26D9               	addwf	fsr2l,f,c
  4932   0002C6  0E01               	movlw	high (_movement_list+65534)
  4933   0002C8  22DA               	addwfc	fsr2h,f,c
  4934   0002CA  0EFE               	movlw	254
  4935   0002CC  6EDE               	movwf	postinc2,c
  4936   0002CE  0EFF               	movlw	255
  4937   0002D0  6EDD               	movwf	postdec2,c
  4938   0002D2                     l299:
  4939                           
  4940                           ;dc_motor.c: 351:             if (movement_list[index-1] == -2)
  4941   0002D2  90D8               	bcf	status,0,c
  4942   0002D4  3447               	rlcf	_index^0,w,c
  4943   0002D6  6ED9               	movwf	fsr2l,c
  4944   0002D8  3448               	rlcf	(_index+1)^0,w,c
  4945   0002DA  6EDA               	movwf	fsr2h,c
  4946   0002DC  0EFE               	movlw	low (_movement_list+65534)
  4947   0002DE  26D9               	addwf	fsr2l,f,c
  4948   0002E0  0E01               	movlw	high (_movement_list+65534)
  4949   0002E2  22DA               	addwfc	fsr2h,f,c
  4950   0002E4  0EFE               	movlw	254
  4951   0002E6  18DE               	xorwf	postinc2,w,c
  4952   0002E8  E106               	bnz	u3461
  4953   0002EA  28DE               	incf	postinc2,w,c
  4954   0002EC  A4D8               	btfss	status,2,c
  4955   0002EE  EF7B  F001         	goto	u3461
  4956   0002F2  EF7D  F001         	goto	u3460
  4957   0002F6                     u3461:
  4958   0002F6  EF8A  F001         	goto	l300
  4959   0002FA                     u3460:
  4960   0002FA                     
  4961                           ;dc_motor.c: 352:             {;dc_motor.c: 354:                 movement_list[index-1] 
      +                          = -1;
  4962   0002FA  90D8               	bcf	status,0,c
  4963   0002FC  3447               	rlcf	_index^0,w,c
  4964   0002FE  6ED9               	movwf	fsr2l,c
  4965   000300  3448               	rlcf	(_index+1)^0,w,c
  4966   000302  6EDA               	movwf	fsr2h,c
  4967   000304  0EFE               	movlw	low (_movement_list+65534)
  4968   000306  26D9               	addwf	fsr2l,f,c
  4969   000308  0E01               	movlw	high (_movement_list+65534)
  4970   00030A  22DA               	addwfc	fsr2h,f,c
  4971   00030C  0EFF               	movlw	255
  4972   00030E  6EDE               	movwf	postinc2,c
  4973   000310  0EFF               	movlw	255
  4974   000312  6EDD               	movwf	postdec2,c
  4975   000314                     l300:
  4976                           
  4977                           ;dc_motor.c: 357:         movement_list[index] = 22;
  4978   000314  90D8               	bcf	status,0,c
  4979   000316  3447               	rlcf	_index^0,w,c
  4980   000318  6ED9               	movwf	fsr2l,c
  4981   00031A  3448               	rlcf	(_index+1)^0,w,c
  4982   00031C  6EDA               	movwf	fsr2h,c
  4983   00031E  0E00               	movlw	low _movement_list
  4984   000320  26D9               	addwf	fsr2l,f,c
  4985   000322  0E02               	movlw	high _movement_list
  4986   000324  22DA               	addwfc	fsr2h,f,c
  4987   000326  0E16               	movlw	22
  4988   000328  6EDE               	movwf	postinc2,c
  4989   00032A  0E00               	movlw	0
  4990   00032C  6EDD               	movwf	postdec2,c
  4991   00032E                     
  4992                           ;dc_motor.c: 358:         index += 1;
  4993   00032E  4A47               	infsnz	_index^0,f,c
  4994   000330  2A48               	incf	(_index+1)^0,f,c
  4995   000332                     
  4996                           ;dc_motor.c: 360:         movement_list[index] = -2;
  4997   000332  90D8               	bcf	status,0,c
  4998   000334  3447               	rlcf	_index^0,w,c
  4999   000336  6ED9               	movwf	fsr2l,c
  5000   000338  3448               	rlcf	(_index+1)^0,w,c
  5001   00033A  6EDA               	movwf	fsr2h,c
  5002   00033C  0E00               	movlw	low _movement_list
  5003   00033E  26D9               	addwf	fsr2l,f,c
  5004   000340  0E02               	movlw	high _movement_list
  5005   000342  22DA               	addwfc	fsr2h,f,c
  5006   000344  0EFE               	movlw	254
  5007   000346  6EDE               	movwf	postinc2,c
  5008   000348  0EFF               	movlw	255
  5009   00034A  6EDD               	movwf	postdec2,c
  5010                           
  5011                           ;dc_motor.c: 361:         index += 1;
  5012   00034C  4A47               	infsnz	_index^0,f,c
  5013   00034E  2A48               	incf	(_index+1)^0,f,c
  5014   000350                     l4199:
  5015                           
  5016                           ;dc_motor.c: 366:     if(color == 4){
  5017   000350  0E04               	movlw	4
  5018   000352  182B               	xorwf	RobotMovement@color^0,w,c
  5019   000354  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5020   000356  A4D8               	btfss	status,2,c
  5021   000358  EFB0  F001         	goto	u3471
  5022   00035C  EFB2  F001         	goto	u3470
  5023   000360                     u3471:
  5024   000360  EF6A  F002         	goto	l4219
  5025   000364                     u3470:
  5026   000364                     
  5027                           ;dc_motor.c: 368:         moveBack(motorL, motorR, 33);
  5028   000364  C02D  F021         	movff	RobotMovement@motorL,moveBack@mL
  5029   000368  C02E  F022         	movff	RobotMovement@motorL+1,moveBack@mL+1
  5030   00036C  C02F  F023         	movff	RobotMovement@motorR,moveBack@mR
  5031   000370  C030  F024         	movff	RobotMovement@motorR+1,moveBack@mR+1
  5032   000374  0E00               	movlw	0
  5033   000376  6E26               	movwf	(moveBack@time+1)^0,c
  5034   000378  0E21               	movlw	33
  5035   00037A  6E25               	movwf	moveBack@time^0,c
  5036   00037C  EC05  F00D         	call	_moveBack	;wreg free
  5037                           
  5038                           ;dc_motor.c: 369:         stop(motorL, motorR);
  5039   000380  C02D  F021         	movff	RobotMovement@motorL,stop@mL
  5040   000384  C02E  F022         	movff	RobotMovement@motorL+1,stop@mL+1
  5041   000388  C02F  F023         	movff	RobotMovement@motorR,stop@mR
  5042   00038C  C030  F024         	movff	RobotMovement@motorR+1,stop@mR+1
  5043   000390  EC6E  F00F         	call	_stop	;wreg free
  5044                           
  5045                           ;dc_motor.c: 370:         turnLeft(motorL, motorR);
  5046   000394  C02D  F021         	movff	RobotMovement@motorL,turnLeft@mL
  5047   000398  C02E  F022         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  5048   00039C  C02F  F023         	movff	RobotMovement@motorR,turnLeft@mR
  5049   0003A0  C030  F024         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  5050   0003A4  EC14  F008         	call	_turnLeft	;wreg free
  5051   0003A8                     
  5052                           ;dc_motor.c: 372:         if (movement_list[index-1] > 11)
  5053   0003A8  90D8               	bcf	status,0,c
  5054   0003AA  3447               	rlcf	_index^0,w,c
  5055   0003AC  6ED9               	movwf	fsr2l,c
  5056   0003AE  3448               	rlcf	(_index+1)^0,w,c
  5057   0003B0  6EDA               	movwf	fsr2h,c
  5058   0003B2  0EFE               	movlw	low (_movement_list+65534)
  5059   0003B4  26D9               	addwf	fsr2l,f,c
  5060   0003B6  0E01               	movlw	high (_movement_list+65534)
  5061   0003B8  22DA               	addwfc	fsr2h,f,c
  5062   0003BA  0E01               	movlw	1
  5063   0003BC  BEDB               	btfsc	plusw2,7,c
  5064   0003BE  EFEB  F001         	goto	u3481
  5065   0003C2  0E01               	movlw	1
  5066   0003C4  50DB               	movf	plusw2,w,c
  5067   0003C6  E109               	bnz	u3480
  5068   0003C8  0E0C               	movlw	12
  5069   0003CA  5CDE               	subwf	postinc2,w,c
  5070   0003CC  A0D8               	btfss	status,0,c
  5071   0003CE  EFEB  F001         	goto	u3481
  5072   0003D2  EFED  F001         	goto	u3480
  5073   0003D6                     u3481:
  5074   0003D6  EF0B  F002         	goto	l4209
  5075   0003DA                     u3480:
  5076   0003DA                     
  5077                           ;dc_motor.c: 373:         {;dc_motor.c: 375:             movement_list[index-1] -= 22;
  5078   0003DA  90D8               	bcf	status,0,c
  5079   0003DC  3447               	rlcf	_index^0,w,c
  5080   0003DE  6ED9               	movwf	fsr2l,c
  5081   0003E0  3448               	rlcf	(_index+1)^0,w,c
  5082   0003E2  6EDA               	movwf	fsr2h,c
  5083   0003E4  0EFE               	movlw	low (_movement_list+65534)
  5084   0003E6  26D9               	addwf	fsr2l,f,c
  5085   0003E8  0E01               	movlw	high (_movement_list+65534)
  5086   0003EA  22DA               	addwfc	fsr2h,f,c
  5087   0003EC  0EEA               	movlw	234
  5088   0003EE  26DE               	addwf	postinc2,f,c
  5089   0003F0  0EFF               	movlw	255
  5090   0003F2  22DD               	addwfc	postdec2,f,c
  5091                           
  5092                           ;dc_motor.c: 377:             movement_list[index] = -2;
  5093   0003F4  90D8               	bcf	status,0,c
  5094   0003F6  3447               	rlcf	_index^0,w,c
  5095   0003F8  6ED9               	movwf	fsr2l,c
  5096   0003FA  3448               	rlcf	(_index+1)^0,w,c
  5097   0003FC  6EDA               	movwf	fsr2h,c
  5098   0003FE  0E00               	movlw	low _movement_list
  5099   000400  26D9               	addwf	fsr2l,f,c
  5100   000402  0E02               	movlw	high _movement_list
  5101   000404  22DA               	addwfc	fsr2h,f,c
  5102   000406  0EFE               	movlw	254
  5103   000408  6EDE               	movwf	postinc2,c
  5104   00040A  0EFF               	movlw	255
  5105   00040C  6EDD               	movwf	postdec2,c
  5106   00040E                     
  5107                           ;dc_motor.c: 378:             index += 1;
  5108   00040E  4A47               	infsnz	_index^0,f,c
  5109   000410  2A48               	incf	(_index+1)^0,f,c
  5110                           
  5111                           ;dc_motor.c: 379:         }else{
  5112   000412  EF6A  F002         	goto	l4219
  5113   000416                     l4209:
  5114                           
  5115                           ;dc_motor.c: 381:             if (movement_list[index-1] == -1)
  5116   000416  90D8               	bcf	status,0,c
  5117   000418  3447               	rlcf	_index^0,w,c
  5118   00041A  6ED9               	movwf	fsr2l,c
  5119   00041C  3448               	rlcf	(_index+1)^0,w,c
  5120   00041E  6EDA               	movwf	fsr2h,c
  5121   000420  0EFE               	movlw	low (_movement_list+65534)
  5122   000422  26D9               	addwf	fsr2l,f,c
  5123   000424  0E01               	movlw	high (_movement_list+65534)
  5124   000426  22DA               	addwfc	fsr2h,f,c
  5125   000428  28DE               	incf	postinc2,w,c
  5126   00042A  E106               	bnz	u3491
  5127   00042C  28DE               	incf	postinc2,w,c
  5128   00042E  A4D8               	btfss	status,2,c
  5129   000430  EF1C  F002         	goto	u3491
  5130   000434  EF1E  F002         	goto	u3490
  5131   000438                     u3491:
  5132   000438  EF2B  F002         	goto	l304
  5133   00043C                     u3490:
  5134   00043C                     
  5135                           ;dc_motor.c: 382:             {;dc_motor.c: 384:                 movement_list[index-1] 
      +                          = -2;
  5136   00043C  90D8               	bcf	status,0,c
  5137   00043E  3447               	rlcf	_index^0,w,c
  5138   000440  6ED9               	movwf	fsr2l,c
  5139   000442  3448               	rlcf	(_index+1)^0,w,c
  5140   000444  6EDA               	movwf	fsr2h,c
  5141   000446  0EFE               	movlw	low (_movement_list+65534)
  5142   000448  26D9               	addwf	fsr2l,f,c
  5143   00044A  0E01               	movlw	high (_movement_list+65534)
  5144   00044C  22DA               	addwfc	fsr2h,f,c
  5145   00044E  0EFE               	movlw	254
  5146   000450  6EDE               	movwf	postinc2,c
  5147   000452  0EFF               	movlw	255
  5148   000454  6EDD               	movwf	postdec2,c
  5149   000456                     l304:
  5150                           
  5151                           ;dc_motor.c: 387:             if (movement_list[index-1] == -2)
  5152   000456  90D8               	bcf	status,0,c
  5153   000458  3447               	rlcf	_index^0,w,c
  5154   00045A  6ED9               	movwf	fsr2l,c
  5155   00045C  3448               	rlcf	(_index+1)^0,w,c
  5156   00045E  6EDA               	movwf	fsr2h,c
  5157   000460  0EFE               	movlw	low (_movement_list+65534)
  5158   000462  26D9               	addwf	fsr2l,f,c
  5159   000464  0E01               	movlw	high (_movement_list+65534)
  5160   000466  22DA               	addwfc	fsr2h,f,c
  5161   000468  0EFE               	movlw	254
  5162   00046A  18DE               	xorwf	postinc2,w,c
  5163   00046C  E106               	bnz	u3501
  5164   00046E  28DE               	incf	postinc2,w,c
  5165   000470  A4D8               	btfss	status,2,c
  5166   000472  EF3D  F002         	goto	u3501
  5167   000476  EF3F  F002         	goto	u3500
  5168   00047A                     u3501:
  5169   00047A  EF4C  F002         	goto	l305
  5170   00047E                     u3500:
  5171   00047E                     
  5172                           ;dc_motor.c: 388:             {;dc_motor.c: 390:                 movement_list[index-1] 
      +                          = -1;
  5173   00047E  90D8               	bcf	status,0,c
  5174   000480  3447               	rlcf	_index^0,w,c
  5175   000482  6ED9               	movwf	fsr2l,c
  5176   000484  3448               	rlcf	(_index+1)^0,w,c
  5177   000486  6EDA               	movwf	fsr2h,c
  5178   000488  0EFE               	movlw	low (_movement_list+65534)
  5179   00048A  26D9               	addwf	fsr2l,f,c
  5180   00048C  0E01               	movlw	high (_movement_list+65534)
  5181   00048E  22DA               	addwfc	fsr2h,f,c
  5182   000490  0EFF               	movlw	255
  5183   000492  6EDE               	movwf	postinc2,c
  5184   000494  0EFF               	movlw	255
  5185   000496  6EDD               	movwf	postdec2,c
  5186   000498                     l305:
  5187                           
  5188                           ;dc_motor.c: 393:         movement_list[index] = 22;
  5189   000498  90D8               	bcf	status,0,c
  5190   00049A  3447               	rlcf	_index^0,w,c
  5191   00049C  6ED9               	movwf	fsr2l,c
  5192   00049E  3448               	rlcf	(_index+1)^0,w,c
  5193   0004A0  6EDA               	movwf	fsr2h,c
  5194   0004A2  0E00               	movlw	low _movement_list
  5195   0004A4  26D9               	addwf	fsr2l,f,c
  5196   0004A6  0E02               	movlw	high _movement_list
  5197   0004A8  22DA               	addwfc	fsr2h,f,c
  5198   0004AA  0E16               	movlw	22
  5199   0004AC  6EDE               	movwf	postinc2,c
  5200   0004AE  0E00               	movlw	0
  5201   0004B0  6EDD               	movwf	postdec2,c
  5202   0004B2                     
  5203                           ;dc_motor.c: 394:         index += 1;
  5204   0004B2  4A47               	infsnz	_index^0,f,c
  5205   0004B4  2A48               	incf	(_index+1)^0,f,c
  5206   0004B6                     
  5207                           ;dc_motor.c: 396:         movement_list[index] = -1;
  5208   0004B6  90D8               	bcf	status,0,c
  5209   0004B8  3447               	rlcf	_index^0,w,c
  5210   0004BA  6ED9               	movwf	fsr2l,c
  5211   0004BC  3448               	rlcf	(_index+1)^0,w,c
  5212   0004BE  6EDA               	movwf	fsr2h,c
  5213   0004C0  0E00               	movlw	low _movement_list
  5214   0004C2  26D9               	addwf	fsr2l,f,c
  5215   0004C4  0E02               	movlw	high _movement_list
  5216   0004C6  22DA               	addwfc	fsr2h,f,c
  5217   0004C8  0EFF               	movlw	255
  5218   0004CA  6EDE               	movwf	postinc2,c
  5219   0004CC  0EFF               	movlw	255
  5220   0004CE  6EDD               	movwf	postdec2,c
  5221                           
  5222                           ;dc_motor.c: 397:         index += 1;
  5223   0004D0  4A47               	infsnz	_index^0,f,c
  5224   0004D2  2A48               	incf	(_index+1)^0,f,c
  5225   0004D4                     l4219:
  5226                           
  5227                           ;dc_motor.c: 401:     if(color == 5){
  5228   0004D4  0E05               	movlw	5
  5229   0004D6  182B               	xorwf	RobotMovement@color^0,w,c
  5230   0004D8  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5231   0004DA  A4D8               	btfss	status,2,c
  5232   0004DC  EF72  F002         	goto	u3511
  5233   0004E0  EF74  F002         	goto	u3510
  5234   0004E4                     u3511:
  5235   0004E4  EF8D  F002         	goto	l4227
  5236   0004E8                     u3510:
  5237   0004E8                     
  5238                           ;dc_motor.c: 402:         turnRightLong(motorL, motorR);
  5239   0004E8  C02D  F021         	movff	RobotMovement@motorL,turnRightLong@mL
  5240   0004EC  C02E  F022         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5241   0004F0  C02F  F023         	movff	RobotMovement@motorR,turnRightLong@mR
  5242   0004F4  C030  F024         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5243   0004F8  ECA1  F00A         	call	_turnRightLong	;wreg free
  5244   0004FC                     
  5245                           ;dc_motor.c: 403:         movement_list[index] = -3;
  5246   0004FC  90D8               	bcf	status,0,c
  5247   0004FE  3447               	rlcf	_index^0,w,c
  5248   000500  6ED9               	movwf	fsr2l,c
  5249   000502  3448               	rlcf	(_index+1)^0,w,c
  5250   000504  6EDA               	movwf	fsr2h,c
  5251   000506  0E00               	movlw	low _movement_list
  5252   000508  26D9               	addwf	fsr2l,f,c
  5253   00050A  0E02               	movlw	high _movement_list
  5254   00050C  22DA               	addwfc	fsr2h,f,c
  5255   00050E  0EFD               	movlw	253
  5256   000510  6EDE               	movwf	postinc2,c
  5257   000512  0EFF               	movlw	255
  5258   000514  6EDD               	movwf	postdec2,c
  5259   000516                     
  5260                           ;dc_motor.c: 404:         index += 1;
  5261   000516  4A47               	infsnz	_index^0,f,c
  5262   000518  2A48               	incf	(_index+1)^0,f,c
  5263   00051A                     l4227:
  5264                           
  5265                           ;dc_motor.c: 407:     if(color == 6){
  5266   00051A  0E06               	movlw	6
  5267   00051C  182B               	xorwf	RobotMovement@color^0,w,c
  5268   00051E  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5269   000520  A4D8               	btfss	status,2,c
  5270   000522  EF95  F002         	goto	u3521
  5271   000526  EF97  F002         	goto	u3520
  5272   00052A                     u3521:
  5273   00052A  EFB0  F002         	goto	l4235
  5274   00052E                     u3520:
  5275   00052E                     
  5276                           ;dc_motor.c: 408:         turnLeftLong(motorL, motorR);
  5277   00052E  C02D  F021         	movff	RobotMovement@motorL,turnLeftLong@mL
  5278   000532  C02E  F022         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5279   000536  C02F  F023         	movff	RobotMovement@motorR,turnLeftLong@mR
  5280   00053A  C030  F024         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5281   00053E  EC35  F00B         	call	_turnLeftLong	;wreg free
  5282   000542                     
  5283                           ;dc_motor.c: 409:         movement_list[index] = -4;
  5284   000542  90D8               	bcf	status,0,c
  5285   000544  3447               	rlcf	_index^0,w,c
  5286   000546  6ED9               	movwf	fsr2l,c
  5287   000548  3448               	rlcf	(_index+1)^0,w,c
  5288   00054A  6EDA               	movwf	fsr2h,c
  5289   00054C  0E00               	movlw	low _movement_list
  5290   00054E  26D9               	addwf	fsr2l,f,c
  5291   000550  0E02               	movlw	high _movement_list
  5292   000552  22DA               	addwfc	fsr2h,f,c
  5293   000554  0EFC               	movlw	252
  5294   000556  6EDE               	movwf	postinc2,c
  5295   000558  0EFF               	movlw	255
  5296   00055A  6EDD               	movwf	postdec2,c
  5297   00055C                     
  5298                           ;dc_motor.c: 410:         index += 1;
  5299   00055C  4A47               	infsnz	_index^0,f,c
  5300   00055E  2A48               	incf	(_index+1)^0,f,c
  5301   000560                     l4235:
  5302                           
  5303                           ;dc_motor.c: 413:     if(color == 7){
  5304   000560  0E07               	movlw	7
  5305   000562  182B               	xorwf	RobotMovement@color^0,w,c
  5306   000564  102C               	iorwf	(RobotMovement@color+1)^0,w,c
  5307   000566  A4D8               	btfss	status,2,c
  5308   000568  EFB8  F002         	goto	u3531
  5309   00056C  EFBA  F002         	goto	u3530
  5310   000570                     u3531:
  5311   000570  EFDD  F002         	goto	l4251
  5312   000574                     u3530:
  5313   000574                     
  5314                           ;dc_motor.c: 414:         int i;;dc_motor.c: 415:         for (i=0;i<2;i++)
  5315   000574  0E00               	movlw	0
  5316   000576  6E36               	movwf	(RobotMovement@i_1271+1)^0,c
  5317   000578  0E00               	movlw	0
  5318   00057A  6E35               	movwf	RobotMovement@i_1271^0,c
  5319   00057C                     l4243:
  5320                           
  5321                           ;dc_motor.c: 416:         {;dc_motor.c: 417:             turnRight(motorL, motorR);
  5322   00057C  C02D  F021         	movff	RobotMovement@motorL,turnRight@mL
  5323   000580  C02E  F022         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5324   000584  C02F  F023         	movff	RobotMovement@motorR,turnRight@mR
  5325   000588  C030  F024         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5326   00058C  ECC1  F008         	call	_turnRight	;wreg free
  5327   000590                     
  5328                           ;dc_motor.c: 418:         }
  5329   000590  4A35               	infsnz	RobotMovement@i_1271^0,f,c
  5330   000592  2A36               	incf	(RobotMovement@i_1271+1)^0,f,c
  5331   000594  BE36               	btfsc	(RobotMovement@i_1271+1)^0,7,c
  5332   000596  EFD6  F002         	goto	u3541
  5333   00059A  5036               	movf	(RobotMovement@i_1271+1)^0,w,c
  5334   00059C  E109               	bnz	u3540
  5335   00059E  0E02               	movlw	2
  5336   0005A0  5C35               	subwf	RobotMovement@i_1271^0,w,c
  5337   0005A2  A0D8               	btfss	status,0,c
  5338   0005A4  EFD6  F002         	goto	u3541
  5339   0005A8  EFD8  F002         	goto	u3540
  5340   0005AC                     u3541:
  5341   0005AC  EFBE  F002         	goto	l4243
  5342   0005B0                     u3540:
  5343   0005B0                     
  5344                           ;dc_motor.c: 420:         state = 1;
  5345   0005B0  0E00               	movlw	0
  5346   0005B2  0100               	movlb	0	; () banked
  5347   0005B4  6FF9               	movwf	(_state+1)& (0+255),b
  5348   0005B6  0E01               	movlw	1
  5349   0005B8  6FF8               	movwf	_state& (0+255),b
  5350   0005BA                     l4251:
  5351                           
  5352                           ;dc_motor.c: 423:     if (color > 7)
  5353   0005BA  502C               	movf	(RobotMovement@color+1)^0,w,c
  5354   0005BC  E109               	bnz	u3550
  5355   0005BE  0E08               	movlw	8
  5356   0005C0  5C2B               	subwf	RobotMovement@color^0,w,c
  5357   0005C2  A0D8               	btfss	status,0,c
  5358   0005C4  EFE6  F002         	goto	u3551
  5359   0005C8  EFE8  F002         	goto	u3550
  5360   0005CC                     u3551:
  5361   0005CC  EFF6  F002         	goto	l312
  5362   0005D0                     u3550:
  5363   0005D0                     
  5364                           ;dc_motor.c: 424:     {;dc_motor.c: 425:         TimedfullSpeedAhead(motorL, motorR, 11)
      +                          ;
  5365   0005D0  C02D  F021         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5366   0005D4  C02E  F022         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5367   0005D8  C02F  F023         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5368   0005DC  C030  F024         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5369   0005E0  0E00               	movlw	0
  5370   0005E2  6E26               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5371   0005E4  0E0B               	movlw	11
  5372   0005E6  6E25               	movwf	TimedfullSpeedAhead@time^0,c
  5373   0005E8  EC3F  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5374   0005EC                     l312:
  5375   0005EC  0012               	return		;funcret
  5376   0005EE                     __end_of_RobotMovement:
  5377                           	callstack 0
  5378                           
  5379 ;; *************** function _turnRightLong *****************
  5380 ;; Defined at:
  5381 ;;		line 231 in file "dc_motor.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5384 ;;		 -> main@motorL(9), 
  5385 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5386 ;;		 -> main@motorR(9), 
  5387 ;; Auto vars:     Size  Location     Type
  5388 ;;  i               2   38[COMRAM] int 
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5398 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5399 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5400 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5401 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5402 ;;Total ram usage:        8 bytes
  5403 ;; Hardware stack levels used: 1
  5404 ;; Hardware stack levels required when called: 7
  5405 ;; This function calls:
  5406 ;;		_setMotorPWM
  5407 ;; This function is called by:
  5408 ;;		_RobotMovement
  5409 ;;		_return_back
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text30
  5414   001542                     __ptext30:
  5415                           	callstack 0
  5416   001542                     _turnRightLong:
  5417                           	callstack 22
  5418   001542                     
  5419                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5420   001542  0E00               	movlw	0
  5421   001544  6E28               	movwf	(turnRightLong@i+1)^0,c
  5422   001546  0E19               	movlw	25
  5423   001548  6E27               	movwf	turnRightLong@i^0,c
  5424   00154A                     l3879:
  5425                           
  5426                           ;dc_motor.c: 236:     (*mL).direction=0;
  5427   00154A  EE20 F001          	lfsr	2,1
  5428   00154E  5021               	movf	turnRightLong@mL^0,w,c
  5429   001550  26D9               	addwf	fsr2l,f,c
  5430   001552  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5431   001554  22DA               	addwfc	fsr2h,f,c
  5432   001556  0E00               	movlw	0
  5433   001558  6EDF               	movwf	indf2,c
  5434                           
  5435                           ;dc_motor.c: 237:     (*mR).direction=1;
  5436   00155A  EE20 F001          	lfsr	2,1
  5437   00155E  5023               	movf	turnRightLong@mR^0,w,c
  5438   001560  26D9               	addwf	fsr2l,f,c
  5439   001562  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5440   001564  22DA               	addwfc	fsr2h,f,c
  5441   001566  0E01               	movlw	1
  5442   001568  6EDF               	movwf	indf2,c
  5443   00156A                     
  5444                           ;dc_motor.c: 238:     (*mL).power=i;
  5445   00156A  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5446   00156E  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5447   001572  C027  FFDF         	movff	turnRightLong@i,indf2
  5448   001576                     
  5449                           ;dc_motor.c: 239:     (*mR).power=i;
  5450   001576  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5451   00157A  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5452   00157E  C027  FFDF         	movff	turnRightLong@i,indf2
  5453   001582                     
  5454                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5455   001582  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5456   001586  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5457   00158A  EC5E  F007         	call	_setMotorPWM	;wreg free
  5458   00158E                     
  5459                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5460   00158E  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5461   001592  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5462   001596  EC5E  F007         	call	_setMotorPWM	;wreg free
  5463   00159A                     
  5464                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5465   00159A  0E0E               	movlw	14
  5466   00159C  6E26               	movwf	(??_turnRightLong+1)^0,c
  5467   00159E  0E12               	movlw	18
  5468   0015A0  6E25               	movwf	??_turnRightLong^0,c
  5469   0015A2  0E69               	movlw	105
  5470   0015A4                     u4187:
  5471   0015A4  2EE8               	decfsz	wreg,f,c
  5472   0015A6  D7FE               	bra	u4187
  5473   0015A8  2E25               	decfsz	??_turnRightLong^0,f,c
  5474   0015AA  D7FC               	bra	u4187
  5475   0015AC  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5476   0015AE  D7FA               	bra	u4187
  5477   0015B0  F000               	nop	
  5478   0015B2                     
  5479                           ;dc_motor.c: 243:     }
  5480   0015B2  0E05               	movlw	5
  5481   0015B4  2627               	addwf	turnRightLong@i^0,f,c
  5482   0015B6  0E00               	movlw	0
  5483   0015B8  2228               	addwfc	(turnRightLong@i+1)^0,f,c
  5484   0015BA  BE28               	btfsc	(turnRightLong@i+1)^0,7,c
  5485   0015BC  EFE9  F00A         	goto	u3021
  5486   0015C0  5028               	movf	(turnRightLong@i+1)^0,w,c
  5487   0015C2  E109               	bnz	u3020
  5488   0015C4  0E28               	movlw	40
  5489   0015C6  5C27               	subwf	turnRightLong@i^0,w,c
  5490   0015C8  A0D8               	btfss	status,0,c
  5491   0015CA  EFE9  F00A         	goto	u3021
  5492   0015CE  EFEB  F00A         	goto	u3020
  5493   0015D2                     u3021:
  5494   0015D2  EFA5  F00A         	goto	l3879
  5495   0015D6                     u3020:
  5496   0015D6                     
  5497                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5498   0015D6  0E00               	movlw	0
  5499   0015D8  6E28               	movwf	(turnRightLong@i+1)^0,c
  5500   0015DA  0E1E               	movlw	30
  5501   0015DC  6E27               	movwf	turnRightLong@i^0,c
  5502   0015DE                     l3901:
  5503                           
  5504                           ;dc_motor.c: 245:     (*mL).direction=0;
  5505   0015DE  EE20 F001          	lfsr	2,1
  5506   0015E2  5021               	movf	turnRightLong@mL^0,w,c
  5507   0015E4  26D9               	addwf	fsr2l,f,c
  5508   0015E6  5022               	movf	(turnRightLong@mL+1)^0,w,c
  5509   0015E8  22DA               	addwfc	fsr2h,f,c
  5510   0015EA  0E00               	movlw	0
  5511   0015EC  6EDF               	movwf	indf2,c
  5512                           
  5513                           ;dc_motor.c: 246:     (*mR).direction=1;
  5514   0015EE  EE20 F001          	lfsr	2,1
  5515   0015F2  5023               	movf	turnRightLong@mR^0,w,c
  5516   0015F4  26D9               	addwf	fsr2l,f,c
  5517   0015F6  5024               	movf	(turnRightLong@mR+1)^0,w,c
  5518   0015F8  22DA               	addwfc	fsr2h,f,c
  5519   0015FA  0E01               	movlw	1
  5520   0015FC  6EDF               	movwf	indf2,c
  5521   0015FE                     
  5522                           ;dc_motor.c: 247:     (*mL).power=i;
  5523   0015FE  C021  FFD9         	movff	turnRightLong@mL,fsr2l
  5524   001602  C022  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5525   001606  C027  FFDF         	movff	turnRightLong@i,indf2
  5526   00160A                     
  5527                           ;dc_motor.c: 248:     (*mR).power=i;
  5528   00160A  C023  FFD9         	movff	turnRightLong@mR,fsr2l
  5529   00160E  C024  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5530   001612  C027  FFDF         	movff	turnRightLong@i,indf2
  5531   001616                     
  5532                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5533   001616  C021  F01B         	movff	turnRightLong@mL,setMotorPWM@m
  5534   00161A  C022  F01C         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5535   00161E  EC5E  F007         	call	_setMotorPWM	;wreg free
  5536   001622                     
  5537                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5538   001622  C023  F01B         	movff	turnRightLong@mR,setMotorPWM@m
  5539   001626  C024  F01C         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5540   00162A  EC5E  F007         	call	_setMotorPWM	;wreg free
  5541   00162E                     
  5542                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5543   00162E  0E0D               	movlw	13
  5544   001630  6E26               	movwf	(??_turnRightLong+1)^0,c
  5545   001632  0EBF               	movlw	191
  5546   001634  6E25               	movwf	??_turnRightLong^0,c
  5547   001636  0E4C               	movlw	76
  5548   001638                     u4197:
  5549   001638  2EE8               	decfsz	wreg,f,c
  5550   00163A  D7FE               	bra	u4197
  5551   00163C  2E25               	decfsz	??_turnRightLong^0,f,c
  5552   00163E  D7FC               	bra	u4197
  5553   001640  2E26               	decfsz	(??_turnRightLong+1)^0,f,c
  5554   001642  D7FA               	bra	u4197
  5555   001644                     
  5556                           ;dc_motor.c: 253:     }
  5557   001644  0EFB               	movlw	251
  5558   001646  2627               	addwf	turnRightLong@i^0,f,c
  5559   001648  0EFF               	movlw	255
  5560   00164A  2228               	addwfc	(turnRightLong@i+1)^0,f,c
  5561   00164C  BE28               	btfsc	(turnRightLong@i+1)^0,7,c
  5562   00164E  EF34  F00B         	goto	u3030
  5563   001652  5028               	movf	(turnRightLong@i+1)^0,w,c
  5564   001654  E107               	bnz	u3031
  5565   001656  0E10               	movlw	16
  5566   001658  5C27               	subwf	turnRightLong@i^0,w,c
  5567   00165A  B0D8               	btfsc	status,0,c
  5568   00165C  EF32  F00B         	goto	u3031
  5569   001660  EF34  F00B         	goto	u3030
  5570   001664                     u3031:
  5571   001664  EFEF  F00A         	goto	l3901
  5572   001668                     u3030:
  5573   001668  0012               	return		;funcret
  5574   00166A                     __end_of_turnRightLong:
  5575                           	callstack 0
  5576                           
  5577 ;; *************** function _turnRight *****************
  5578 ;; Defined at:
  5579 ;;		line 154 in file "dc_motor.c"
  5580 ;; Parameters:    Size  Location     Type
  5581 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5582 ;;		 -> main@motorL(9), 
  5583 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5584 ;;		 -> main@motorR(9), 
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;  i               2   40[COMRAM] int 
  5587 ;;  k               2   38[COMRAM] int 
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 0/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5597 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5598 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5599 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5600 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5601 ;;Total ram usage:       10 bytes
  5602 ;; Hardware stack levels used: 1
  5603 ;; Hardware stack levels required when called: 7
  5604 ;; This function calls:
  5605 ;;		_setMotorPWM
  5606 ;; This function is called by:
  5607 ;;		_RobotMovement
  5608 ;;		_return_back
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text31
  5613   001182                     __ptext31:
  5614                           	callstack 0
  5615   001182                     _turnRight:
  5616                           	callstack 22
  5617   001182                     
  5618                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5619   001182  0E00               	movlw	0
  5620   001184  6E28               	movwf	(turnRight@k+1)^0,c
  5621   001186  0E00               	movlw	0
  5622   001188  6E27               	movwf	turnRight@k^0,c
  5623   00118A                     l3781:
  5624                           
  5625                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5626   00118A  0E00               	movlw	0
  5627   00118C  6E2A               	movwf	(turnRight@i+1)^0,c
  5628   00118E  0E1B               	movlw	27
  5629   001190  6E29               	movwf	turnRight@i^0,c
  5630   001192                     l3787:
  5631                           
  5632                           ;dc_motor.c: 185:         (*mL).direction=0;
  5633   001192  EE20 F001          	lfsr	2,1
  5634   001196  5021               	movf	turnRight@mL^0,w,c
  5635   001198  26D9               	addwf	fsr2l,f,c
  5636   00119A  5022               	movf	(turnRight@mL+1)^0,w,c
  5637   00119C  22DA               	addwfc	fsr2h,f,c
  5638   00119E  0E00               	movlw	0
  5639   0011A0  6EDF               	movwf	indf2,c
  5640                           
  5641                           ;dc_motor.c: 186:         (*mR).direction=1;
  5642   0011A2  EE20 F001          	lfsr	2,1
  5643   0011A6  5023               	movf	turnRight@mR^0,w,c
  5644   0011A8  26D9               	addwf	fsr2l,f,c
  5645   0011AA  5024               	movf	(turnRight@mR+1)^0,w,c
  5646   0011AC  22DA               	addwfc	fsr2h,f,c
  5647   0011AE  0E01               	movlw	1
  5648   0011B0  6EDF               	movwf	indf2,c
  5649   0011B2                     
  5650                           ;dc_motor.c: 187:         (*mL).power=i;
  5651   0011B2  C021  FFD9         	movff	turnRight@mL,fsr2l
  5652   0011B6  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5653   0011BA  C029  FFDF         	movff	turnRight@i,indf2
  5654   0011BE                     
  5655                           ;dc_motor.c: 188:         (*mR).power=i;
  5656   0011BE  C023  FFD9         	movff	turnRight@mR,fsr2l
  5657   0011C2  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5658   0011C6  C029  FFDF         	movff	turnRight@i,indf2
  5659   0011CA                     
  5660                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5661   0011CA  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5662   0011CE  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5663   0011D2  EC5E  F007         	call	_setMotorPWM	;wreg free
  5664   0011D6                     
  5665                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5666   0011D6  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5667   0011DA  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5668   0011DE  EC5E  F007         	call	_setMotorPWM	;wreg free
  5669   0011E2                     
  5670                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5671   0011E2  0E09               	movlw	9
  5672   0011E4  6E26               	movwf	(??_turnRight+1)^0,c
  5673   0011E6  0EB0               	movlw	176
  5674   0011E8  6E25               	movwf	??_turnRight^0,c
  5675   0011EA  0E58               	movlw	88
  5676   0011EC                     u4207:
  5677   0011EC  2EE8               	decfsz	wreg,f,c
  5678   0011EE  D7FE               	bra	u4207
  5679   0011F0  2E25               	decfsz	??_turnRight^0,f,c
  5680   0011F2  D7FC               	bra	u4207
  5681   0011F4  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5682   0011F6  D7FA               	bra	u4207
  5683   0011F8  D000               	nop2	
  5684   0011FA                     
  5685                           ;dc_motor.c: 192:         }
  5686   0011FA  0E05               	movlw	5
  5687   0011FC  2629               	addwf	turnRight@i^0,f,c
  5688   0011FE  0E00               	movlw	0
  5689   001200  222A               	addwfc	(turnRight@i+1)^0,f,c
  5690   001202  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5691   001204  EF0D  F009         	goto	u2971
  5692   001208  502A               	movf	(turnRight@i+1)^0,w,c
  5693   00120A  E109               	bnz	u2970
  5694   00120C  0E2A               	movlw	42
  5695   00120E  5C29               	subwf	turnRight@i^0,w,c
  5696   001210  A0D8               	btfss	status,0,c
  5697   001212  EF0D  F009         	goto	u2971
  5698   001216  EF0F  F009         	goto	u2970
  5699   00121A                     u2971:
  5700   00121A  EFC9  F008         	goto	l3787
  5701   00121E                     u2970:
  5702   00121E                     
  5703                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5704   00121E  0E00               	movlw	0
  5705   001220  6E2A               	movwf	(turnRight@i+1)^0,c
  5706   001222  0E20               	movlw	32
  5707   001224  6E29               	movwf	turnRight@i^0,c
  5708   001226                     l3809:
  5709                           
  5710                           ;dc_motor.c: 194:         (*mL).direction=0;
  5711   001226  EE20 F001          	lfsr	2,1
  5712   00122A  5021               	movf	turnRight@mL^0,w,c
  5713   00122C  26D9               	addwf	fsr2l,f,c
  5714   00122E  5022               	movf	(turnRight@mL+1)^0,w,c
  5715   001230  22DA               	addwfc	fsr2h,f,c
  5716   001232  0E00               	movlw	0
  5717   001234  6EDF               	movwf	indf2,c
  5718                           
  5719                           ;dc_motor.c: 195:         (*mR).direction=1;
  5720   001236  EE20 F001          	lfsr	2,1
  5721   00123A  5023               	movf	turnRight@mR^0,w,c
  5722   00123C  26D9               	addwf	fsr2l,f,c
  5723   00123E  5024               	movf	(turnRight@mR+1)^0,w,c
  5724   001240  22DA               	addwfc	fsr2h,f,c
  5725   001242  0E01               	movlw	1
  5726   001244  6EDF               	movwf	indf2,c
  5727   001246                     
  5728                           ;dc_motor.c: 196:         (*mL).power=i;
  5729   001246  C021  FFD9         	movff	turnRight@mL,fsr2l
  5730   00124A  C022  FFDA         	movff	turnRight@mL+1,fsr2h
  5731   00124E  C029  FFDF         	movff	turnRight@i,indf2
  5732   001252                     
  5733                           ;dc_motor.c: 197:         (*mR).power=i;
  5734   001252  C023  FFD9         	movff	turnRight@mR,fsr2l
  5735   001256  C024  FFDA         	movff	turnRight@mR+1,fsr2h
  5736   00125A  C029  FFDF         	movff	turnRight@i,indf2
  5737   00125E                     
  5738                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5739   00125E  C021  F01B         	movff	turnRight@mL,setMotorPWM@m
  5740   001262  C022  F01C         	movff	turnRight@mL+1,setMotorPWM@m+1
  5741   001266  EC5E  F007         	call	_setMotorPWM	;wreg free
  5742   00126A                     
  5743                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5744   00126A  C023  F01B         	movff	turnRight@mR,setMotorPWM@m
  5745   00126E  C024  F01C         	movff	turnRight@mR+1,setMotorPWM@m+1
  5746   001272  EC5E  F007         	call	_setMotorPWM	;wreg free
  5747   001276                     
  5748                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5749   001276  0E09               	movlw	9
  5750   001278  6E26               	movwf	(??_turnRight+1)^0,c
  5751   00127A  0E86               	movlw	134
  5752   00127C  6E25               	movwf	??_turnRight^0,c
  5753   00127E  0ECA               	movlw	202
  5754   001280                     u4217:
  5755   001280  2EE8               	decfsz	wreg,f,c
  5756   001282  D7FE               	bra	u4217
  5757   001284  2E25               	decfsz	??_turnRight^0,f,c
  5758   001286  D7FC               	bra	u4217
  5759   001288  2E26               	decfsz	(??_turnRight+1)^0,f,c
  5760   00128A  D7FA               	bra	u4217
  5761   00128C                     
  5762                           ;dc_motor.c: 202:         }
  5763   00128C  0EFB               	movlw	251
  5764   00128E  2629               	addwf	turnRight@i^0,f,c
  5765   001290  0EFF               	movlw	255
  5766   001292  222A               	addwfc	(turnRight@i+1)^0,f,c
  5767   001294  BE2A               	btfsc	(turnRight@i+1)^0,7,c
  5768   001296  EF58  F009         	goto	u2980
  5769   00129A  502A               	movf	(turnRight@i+1)^0,w,c
  5770   00129C  E107               	bnz	u2981
  5771   00129E  0E12               	movlw	18
  5772   0012A0  5C29               	subwf	turnRight@i^0,w,c
  5773   0012A2  B0D8               	btfsc	status,0,c
  5774   0012A4  EF56  F009         	goto	u2981
  5775   0012A8  EF58  F009         	goto	u2980
  5776   0012AC                     u2981:
  5777   0012AC  EF13  F009         	goto	l3809
  5778   0012B0                     u2980:
  5779   0012B0                     
  5780                           ;dc_motor.c: 203:     }
  5781   0012B0  4A27               	infsnz	turnRight@k^0,f,c
  5782   0012B2  2A28               	incf	(turnRight@k+1)^0,f,c
  5783   0012B4  BE28               	btfsc	(turnRight@k+1)^0,7,c
  5784   0012B6  EF66  F009         	goto	u2991
  5785   0012BA  5028               	movf	(turnRight@k+1)^0,w,c
  5786   0012BC  E109               	bnz	u2990
  5787   0012BE  0E02               	movlw	2
  5788   0012C0  5C27               	subwf	turnRight@k^0,w,c
  5789   0012C2  A0D8               	btfss	status,0,c
  5790   0012C4  EF66  F009         	goto	u2991
  5791   0012C8  EF68  F009         	goto	u2990
  5792   0012CC                     u2991:
  5793   0012CC  EFC5  F008         	goto	l3781
  5794   0012D0                     u2990:
  5795   0012D0  0012               	return		;funcret
  5796   0012D2                     __end_of_turnRight:
  5797                           	callstack 0
  5798                           
  5799 ;; *************** function _turnLeftLong *****************
  5800 ;; Defined at:
  5801 ;;		line 206 in file "dc_motor.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  5804 ;;		 -> main@motorL(9), 
  5805 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  5806 ;;		 -> main@motorR(9), 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  i               2   38[COMRAM] int 
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5818 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5820 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5821 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5822 ;;Total ram usage:        8 bytes
  5823 ;; Hardware stack levels used: 1
  5824 ;; Hardware stack levels required when called: 7
  5825 ;; This function calls:
  5826 ;;		_setMotorPWM
  5827 ;; This function is called by:
  5828 ;;		_RobotMovement
  5829 ;;		_return_back
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text32
  5834   00166A                     __ptext32:
  5835                           	callstack 0
  5836   00166A                     _turnLeftLong:
  5837                           	callstack 22
  5838   00166A                     
  5839                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5840   00166A  0E00               	movlw	0
  5841   00166C  6E28               	movwf	(turnLeftLong@i+1)^0,c
  5842   00166E  0E17               	movlw	23
  5843   001670  6E27               	movwf	turnLeftLong@i^0,c
  5844   001672                     l3835:
  5845                           
  5846                           ;dc_motor.c: 211:     (*mL).direction=1;
  5847   001672  EE20 F001          	lfsr	2,1
  5848   001676  5021               	movf	turnLeftLong@mL^0,w,c
  5849   001678  26D9               	addwf	fsr2l,f,c
  5850   00167A  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  5851   00167C  22DA               	addwfc	fsr2h,f,c
  5852   00167E  0E01               	movlw	1
  5853   001680  6EDF               	movwf	indf2,c
  5854                           
  5855                           ;dc_motor.c: 212:     (*mR).direction=0;
  5856   001682  EE20 F001          	lfsr	2,1
  5857   001686  5023               	movf	turnLeftLong@mR^0,w,c
  5858   001688  26D9               	addwf	fsr2l,f,c
  5859   00168A  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  5860   00168C  22DA               	addwfc	fsr2h,f,c
  5861   00168E  0E00               	movlw	0
  5862   001690  6EDF               	movwf	indf2,c
  5863   001692                     
  5864                           ;dc_motor.c: 213:     (*mL).power=i;
  5865   001692  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  5866   001696  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5867   00169A  C027  FFDF         	movff	turnLeftLong@i,indf2
  5868   00169E                     
  5869                           ;dc_motor.c: 214:     (*mR).power=i;
  5870   00169E  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  5871   0016A2  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5872   0016A6  C027  FFDF         	movff	turnLeftLong@i,indf2
  5873   0016AA                     
  5874                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5875   0016AA  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  5876   0016AE  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5877   0016B2  EC5E  F007         	call	_setMotorPWM	;wreg free
  5878   0016B6                     
  5879                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5880   0016B6  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  5881   0016BA  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5882   0016BE  EC5E  F007         	call	_setMotorPWM	;wreg free
  5883   0016C2                     
  5884                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5885   0016C2  0E0D               	movlw	13
  5886   0016C4  6E26               	movwf	(??_turnLeftLong+1)^0,c
  5887   0016C6  0EAA               	movlw	170
  5888   0016C8  6E25               	movwf	??_turnLeftLong^0,c
  5889   0016CA  0E84               	movlw	132
  5890   0016CC                     u4227:
  5891   0016CC  2EE8               	decfsz	wreg,f,c
  5892   0016CE  D7FE               	bra	u4227
  5893   0016D0  2E25               	decfsz	??_turnLeftLong^0,f,c
  5894   0016D2  D7FC               	bra	u4227
  5895   0016D4  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  5896   0016D6  D7FA               	bra	u4227
  5897   0016D8  D000               	nop2	
  5898   0016DA                     
  5899                           ;dc_motor.c: 218:     }
  5900   0016DA  0E05               	movlw	5
  5901   0016DC  2627               	addwf	turnLeftLong@i^0,f,c
  5902   0016DE  0E00               	movlw	0
  5903   0016E0  2228               	addwfc	(turnLeftLong@i+1)^0,f,c
  5904   0016E2  BE28               	btfsc	(turnLeftLong@i+1)^0,7,c
  5905   0016E4  EF7D  F00B         	goto	u3001
  5906   0016E8  5028               	movf	(turnLeftLong@i+1)^0,w,c
  5907   0016EA  E109               	bnz	u3000
  5908   0016EC  0E26               	movlw	38
  5909   0016EE  5C27               	subwf	turnLeftLong@i^0,w,c
  5910   0016F0  A0D8               	btfss	status,0,c
  5911   0016F2  EF7D  F00B         	goto	u3001
  5912   0016F6  EF7F  F00B         	goto	u3000
  5913   0016FA                     u3001:
  5914   0016FA  EF39  F00B         	goto	l3835
  5915   0016FE                     u3000:
  5916   0016FE                     
  5917                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5918   0016FE  0E00               	movlw	0
  5919   001700  6E28               	movwf	(turnLeftLong@i+1)^0,c
  5920   001702  0E1C               	movlw	28
  5921   001704  6E27               	movwf	turnLeftLong@i^0,c
  5922   001706                     l3857:
  5923                           
  5924                           ;dc_motor.c: 220:     (*mL).direction=1;
  5925   001706  EE20 F001          	lfsr	2,1
  5926   00170A  5021               	movf	turnLeftLong@mL^0,w,c
  5927   00170C  26D9               	addwf	fsr2l,f,c
  5928   00170E  5022               	movf	(turnLeftLong@mL+1)^0,w,c
  5929   001710  22DA               	addwfc	fsr2h,f,c
  5930   001712  0E01               	movlw	1
  5931   001714  6EDF               	movwf	indf2,c
  5932                           
  5933                           ;dc_motor.c: 221:     (*mR).direction=0;
  5934   001716  EE20 F001          	lfsr	2,1
  5935   00171A  5023               	movf	turnLeftLong@mR^0,w,c
  5936   00171C  26D9               	addwf	fsr2l,f,c
  5937   00171E  5024               	movf	(turnLeftLong@mR+1)^0,w,c
  5938   001720  22DA               	addwfc	fsr2h,f,c
  5939   001722  0E00               	movlw	0
  5940   001724  6EDF               	movwf	indf2,c
  5941   001726                     
  5942                           ;dc_motor.c: 222:     (*mL).power=i;
  5943   001726  C021  FFD9         	movff	turnLeftLong@mL,fsr2l
  5944   00172A  C022  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5945   00172E  C027  FFDF         	movff	turnLeftLong@i,indf2
  5946   001732                     
  5947                           ;dc_motor.c: 223:     (*mR).power=i;
  5948   001732  C023  FFD9         	movff	turnLeftLong@mR,fsr2l
  5949   001736  C024  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5950   00173A  C027  FFDF         	movff	turnLeftLong@i,indf2
  5951   00173E                     
  5952                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5953   00173E  C021  F01B         	movff	turnLeftLong@mL,setMotorPWM@m
  5954   001742  C022  F01C         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5955   001746  EC5E  F007         	call	_setMotorPWM	;wreg free
  5956   00174A                     
  5957                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5958   00174A  C023  F01B         	movff	turnLeftLong@mR,setMotorPWM@m
  5959   00174E  C024  F01C         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5960   001752  EC5E  F007         	call	_setMotorPWM	;wreg free
  5961   001756                     
  5962                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5963   001756  0E0D               	movlw	13
  5964   001758  6E26               	movwf	(??_turnLeftLong+1)^0,c
  5965   00175A  0E2D               	movlw	45
  5966   00175C  6E25               	movwf	??_turnLeftLong^0,c
  5967   00175E  0ED8               	movlw	216
  5968   001760                     u4237:
  5969   001760  2EE8               	decfsz	wreg,f,c
  5970   001762  D7FE               	bra	u4237
  5971   001764  2E25               	decfsz	??_turnLeftLong^0,f,c
  5972   001766  D7FC               	bra	u4237
  5973   001768  2E26               	decfsz	(??_turnLeftLong+1)^0,f,c
  5974   00176A  D7FA               	bra	u4237
  5975   00176C                     
  5976                           ;dc_motor.c: 228:     }
  5977   00176C  0EFB               	movlw	251
  5978   00176E  2627               	addwf	turnLeftLong@i^0,f,c
  5979   001770  0EFF               	movlw	255
  5980   001772  2228               	addwfc	(turnLeftLong@i+1)^0,f,c
  5981   001774  BE28               	btfsc	(turnLeftLong@i+1)^0,7,c
  5982   001776  EFC8  F00B         	goto	u3010
  5983   00177A  5028               	movf	(turnLeftLong@i+1)^0,w,c
  5984   00177C  E107               	bnz	u3011
  5985   00177E  0E0E               	movlw	14
  5986   001780  5C27               	subwf	turnLeftLong@i^0,w,c
  5987   001782  B0D8               	btfsc	status,0,c
  5988   001784  EFC6  F00B         	goto	u3011
  5989   001788  EFC8  F00B         	goto	u3010
  5990   00178C                     u3011:
  5991   00178C  EF83  F00B         	goto	l3857
  5992   001790                     u3010:
  5993   001790  0012               	return		;funcret
  5994   001792                     __end_of_turnLeftLong:
  5995                           	callstack 0
  5996                           
  5997 ;; *************** function _turnLeft *****************
  5998 ;; Defined at:
  5999 ;;		line 102 in file "dc_motor.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6002 ;;		 -> main@motorL(9), 
  6003 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6004 ;;		 -> main@motorR(9), 
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;  i               2   40[COMRAM] int 
  6007 ;;  k               2   38[COMRAM] int 
  6008 ;; Return value:  Size  Location     Type
  6009 ;;                  1    wreg      void 
  6010 ;; Registers used:
  6011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6018 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6020 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6021 ;;Total ram usage:       10 bytes
  6022 ;; Hardware stack levels used: 1
  6023 ;; Hardware stack levels required when called: 7
  6024 ;; This function calls:
  6025 ;;		_setMotorPWM
  6026 ;; This function is called by:
  6027 ;;		_RobotMovement
  6028 ;;		_return_back
  6029 ;; This function uses a non-reentrant model
  6030 ;;
  6031                           
  6032                           	psect	text33
  6033   001028                     __ptext33:
  6034                           	callstack 0
  6035   001028                     _turnLeft:
  6036                           	callstack 22
  6037   001028                     
  6038                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  6039   001028  0E00               	movlw	0
  6040   00102A  6E28               	movwf	(turnLeft@k+1)^0,c
  6041   00102C  0E00               	movlw	0
  6042   00102E  6E27               	movwf	turnLeft@k^0,c
  6043                           
  6044                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  6045   001030  0E00               	movlw	0
  6046   001032  6E28               	movwf	(turnLeft@k+1)^0,c
  6047   001034  0E00               	movlw	0
  6048   001036  6E27               	movwf	turnLeft@k^0,c
  6049   001038                     l3727:
  6050                           
  6051                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  6052   001038  0E00               	movlw	0
  6053   00103A  6E2A               	movwf	(turnLeft@i+1)^0,c
  6054   00103C  0E2F               	movlw	47
  6055   00103E  6E29               	movwf	turnLeft@i^0,c
  6056   001040                     l3733:
  6057                           
  6058                           ;dc_motor.c: 133:         (*mL).direction=1;
  6059   001040  EE20 F001          	lfsr	2,1
  6060   001044  5021               	movf	turnLeft@mL^0,w,c
  6061   001046  26D9               	addwf	fsr2l,f,c
  6062   001048  5022               	movf	(turnLeft@mL+1)^0,w,c
  6063   00104A  22DA               	addwfc	fsr2h,f,c
  6064   00104C  0E01               	movlw	1
  6065   00104E  6EDF               	movwf	indf2,c
  6066                           
  6067                           ;dc_motor.c: 134:         (*mR).direction=0;
  6068   001050  EE20 F001          	lfsr	2,1
  6069   001054  5023               	movf	turnLeft@mR^0,w,c
  6070   001056  26D9               	addwf	fsr2l,f,c
  6071   001058  5024               	movf	(turnLeft@mR+1)^0,w,c
  6072   00105A  22DA               	addwfc	fsr2h,f,c
  6073   00105C  0E00               	movlw	0
  6074   00105E  6EDF               	movwf	indf2,c
  6075   001060                     
  6076                           ;dc_motor.c: 135:         (*mL).power=i;
  6077   001060  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6078   001064  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6079   001068  C029  FFDF         	movff	turnLeft@i,indf2
  6080   00106C                     
  6081                           ;dc_motor.c: 136:         (*mR).power=i;
  6082   00106C  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6083   001070  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6084   001074  C029  FFDF         	movff	turnLeft@i,indf2
  6085   001078                     
  6086                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6087   001078  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6088   00107C  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6089   001080  EC5E  F007         	call	_setMotorPWM	;wreg free
  6090   001084                     
  6091                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6092   001084  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6093   001088  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6094   00108C  EC5E  F007         	call	_setMotorPWM	;wreg free
  6095   001090                     
  6096                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6097   001090  0E05               	movlw	5
  6098   001092  6E26               	movwf	(??_turnLeft+1)^0,c
  6099   001094  0EB6               	movlw	182
  6100   001096  6E25               	movwf	??_turnLeft^0,c
  6101   001098  0E2C               	movlw	44
  6102   00109A                     u4247:
  6103   00109A  2EE8               	decfsz	wreg,f,c
  6104   00109C  D7FE               	bra	u4247
  6105   00109E  2E25               	decfsz	??_turnLeft^0,f,c
  6106   0010A0  D7FC               	bra	u4247
  6107   0010A2  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6108   0010A4  D7FA               	bra	u4247
  6109   0010A6  D000               	nop2	
  6110   0010A8                     
  6111                           ;dc_motor.c: 140:         }
  6112   0010A8  0E05               	movlw	5
  6113   0010AA  2629               	addwf	turnLeft@i^0,f,c
  6114   0010AC  0E00               	movlw	0
  6115   0010AE  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6116   0010B0  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6117   0010B2  EF64  F008         	goto	u2941
  6118   0010B6  502A               	movf	(turnLeft@i+1)^0,w,c
  6119   0010B8  E109               	bnz	u2940
  6120   0010BA  0E3E               	movlw	62
  6121   0010BC  5C29               	subwf	turnLeft@i^0,w,c
  6122   0010BE  A0D8               	btfss	status,0,c
  6123   0010C0  EF64  F008         	goto	u2941
  6124   0010C4  EF66  F008         	goto	u2940
  6125   0010C8                     u2941:
  6126   0010C8  EF20  F008         	goto	l3733
  6127   0010CC                     u2940:
  6128   0010CC                     
  6129                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  6130   0010CC  0E00               	movlw	0
  6131   0010CE  6E2A               	movwf	(turnLeft@i+1)^0,c
  6132   0010D0  0E34               	movlw	52
  6133   0010D2  6E29               	movwf	turnLeft@i^0,c
  6134   0010D4                     l3755:
  6135                           
  6136                           ;dc_motor.c: 142:         (*mL).direction=1;
  6137   0010D4  EE20 F001          	lfsr	2,1
  6138   0010D8  5021               	movf	turnLeft@mL^0,w,c
  6139   0010DA  26D9               	addwf	fsr2l,f,c
  6140   0010DC  5022               	movf	(turnLeft@mL+1)^0,w,c
  6141   0010DE  22DA               	addwfc	fsr2h,f,c
  6142   0010E0  0E01               	movlw	1
  6143   0010E2  6EDF               	movwf	indf2,c
  6144                           
  6145                           ;dc_motor.c: 143:         (*mR).direction=0;
  6146   0010E4  EE20 F001          	lfsr	2,1
  6147   0010E8  5023               	movf	turnLeft@mR^0,w,c
  6148   0010EA  26D9               	addwf	fsr2l,f,c
  6149   0010EC  5024               	movf	(turnLeft@mR+1)^0,w,c
  6150   0010EE  22DA               	addwfc	fsr2h,f,c
  6151   0010F0  0E00               	movlw	0
  6152   0010F2  6EDF               	movwf	indf2,c
  6153   0010F4                     
  6154                           ;dc_motor.c: 144:         (*mL).power=i;
  6155   0010F4  C021  FFD9         	movff	turnLeft@mL,fsr2l
  6156   0010F8  C022  FFDA         	movff	turnLeft@mL+1,fsr2h
  6157   0010FC  C029  FFDF         	movff	turnLeft@i,indf2
  6158   001100                     
  6159                           ;dc_motor.c: 145:         (*mR).power=i;
  6160   001100  C023  FFD9         	movff	turnLeft@mR,fsr2l
  6161   001104  C024  FFDA         	movff	turnLeft@mR+1,fsr2h
  6162   001108  C029  FFDF         	movff	turnLeft@i,indf2
  6163   00110C                     
  6164                           ;dc_motor.c: 146:         setMotorPWM(mL);
  6165   00110C  C021  F01B         	movff	turnLeft@mL,setMotorPWM@m
  6166   001110  C022  F01C         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6167   001114  EC5E  F007         	call	_setMotorPWM	;wreg free
  6168   001118                     
  6169                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6170   001118  C023  F01B         	movff	turnLeft@mR,setMotorPWM@m
  6171   00111C  C024  F01C         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6172   001120  EC5E  F007         	call	_setMotorPWM	;wreg free
  6173   001124                     
  6174                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6175   001124  0E05               	movlw	5
  6176   001126  6E26               	movwf	(??_turnLeft+1)^0,c
  6177   001128  0EA1               	movlw	161
  6178   00112A  6E25               	movwf	??_turnLeft^0,c
  6179   00112C  0E65               	movlw	101
  6180   00112E                     u4257:
  6181   00112E  2EE8               	decfsz	wreg,f,c
  6182   001130  D7FE               	bra	u4257
  6183   001132  2E25               	decfsz	??_turnLeft^0,f,c
  6184   001134  D7FC               	bra	u4257
  6185   001136  2E26               	decfsz	(??_turnLeft+1)^0,f,c
  6186   001138  D7FA               	bra	u4257
  6187   00113A  F000               	nop	
  6188   00113C                     
  6189                           ;dc_motor.c: 150:         }
  6190   00113C  0EFB               	movlw	251
  6191   00113E  2629               	addwf	turnLeft@i^0,f,c
  6192   001140  0EFF               	movlw	255
  6193   001142  222A               	addwfc	(turnLeft@i+1)^0,f,c
  6194   001144  BE2A               	btfsc	(turnLeft@i+1)^0,7,c
  6195   001146  EFB0  F008         	goto	u2950
  6196   00114A  502A               	movf	(turnLeft@i+1)^0,w,c
  6197   00114C  E107               	bnz	u2951
  6198   00114E  0E26               	movlw	38
  6199   001150  5C29               	subwf	turnLeft@i^0,w,c
  6200   001152  B0D8               	btfsc	status,0,c
  6201   001154  EFAE  F008         	goto	u2951
  6202   001158  EFB0  F008         	goto	u2950
  6203   00115C                     u2951:
  6204   00115C  EF6A  F008         	goto	l3755
  6205   001160                     u2950:
  6206   001160                     
  6207                           ;dc_motor.c: 151:     }
  6208   001160  4A27               	infsnz	turnLeft@k^0,f,c
  6209   001162  2A28               	incf	(turnLeft@k+1)^0,f,c
  6210   001164  BE28               	btfsc	(turnLeft@k+1)^0,7,c
  6211   001166  EFBE  F008         	goto	u2961
  6212   00116A  5028               	movf	(turnLeft@k+1)^0,w,c
  6213   00116C  E109               	bnz	u2960
  6214   00116E  0E02               	movlw	2
  6215   001170  5C27               	subwf	turnLeft@k^0,w,c
  6216   001172  A0D8               	btfss	status,0,c
  6217   001174  EFBE  F008         	goto	u2961
  6218   001178  EFC0  F008         	goto	u2960
  6219   00117C                     u2961:
  6220   00117C  EF1C  F008         	goto	l3727
  6221   001180                     u2960:
  6222   001180  0012               	return		;funcret
  6223   001182                     __end_of_turnLeft:
  6224                           	callstack 0
  6225                           
  6226 ;; *************** function _stop *****************
  6227 ;; Defined at:
  6228 ;;		line 92 in file "dc_motor.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6231 ;;		 -> main@motorL(9), 
  6232 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6233 ;;		 -> main@motorR(9), 
  6234 ;; Auto vars:     Size  Location     Type
  6235 ;;		None
  6236 ;; Return value:  Size  Location     Type
  6237 ;;                  1    wreg      void 
  6238 ;; Registers used:
  6239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6240 ;; Tracked objects:
  6241 ;;		On entry : 0/0
  6242 ;;		On exit  : 0/0
  6243 ;;		Unchanged: 0/0
  6244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6245 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6248 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6249 ;;Total ram usage:        6 bytes
  6250 ;; Hardware stack levels used: 1
  6251 ;; Hardware stack levels required when called: 7
  6252 ;; This function calls:
  6253 ;;		_setMotorPWM
  6254 ;; This function is called by:
  6255 ;;		_RobotMovement
  6256 ;;		_return_back
  6257 ;;		_main
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text34
  6262   001EDC                     __ptext34:
  6263                           	callstack 0
  6264   001EDC                     _stop:
  6265                           	callstack 23
  6266   001EDC                     
  6267                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6268   001EDC  C021  FFD9         	movff	stop@mL,fsr2l
  6269   001EE0  C022  FFDA         	movff	stop@mL+1,fsr2h
  6270   001EE4  0E00               	movlw	0
  6271   001EE6  6EDF               	movwf	indf2,c
  6272                           
  6273                           ;dc_motor.c: 95:     (*mR).power=0;
  6274   001EE8  C023  FFD9         	movff	stop@mR,fsr2l
  6275   001EEC  C024  FFDA         	movff	stop@mR+1,fsr2h
  6276   001EF0  0E00               	movlw	0
  6277   001EF2  6EDF               	movwf	indf2,c
  6278   001EF4                     
  6279                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6280   001EF4  C021  F01B         	movff	stop@mL,setMotorPWM@m
  6281   001EF8  C022  F01C         	movff	stop@mL+1,setMotorPWM@m+1
  6282   001EFC  EC5E  F007         	call	_setMotorPWM	;wreg free
  6283   001F00                     
  6284                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6285   001F00  C023  F01B         	movff	stop@mR,setMotorPWM@m
  6286   001F04  C024  F01C         	movff	stop@mR+1,setMotorPWM@m+1
  6287   001F08  EC5E  F007         	call	_setMotorPWM	;wreg free
  6288   001F0C                     
  6289                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6290   001F0C  0E52               	movlw	82
  6291   001F0E  6E26               	movwf	(??_stop+1)^0,c
  6292   001F10  0E2B               	movlw	43
  6293   001F12  6E25               	movwf	??_stop^0,c
  6294   001F14  0E00               	movlw	0
  6295   001F16                     u4267:
  6296   001F16  2EE8               	decfsz	wreg,f,c
  6297   001F18  D7FE               	bra	u4267
  6298   001F1A  2E25               	decfsz	??_stop^0,f,c
  6299   001F1C  D7FC               	bra	u4267
  6300   001F1E  2E26               	decfsz	(??_stop+1)^0,f,c
  6301   001F20  D7FA               	bra	u4267
  6302   001F22  D000               	nop2	
  6303   001F24  0012               	return		;funcret
  6304   001F26                     __end_of_stop:
  6305                           	callstack 0
  6306                           
  6307 ;; *************** function _moveBack *****************
  6308 ;; Defined at:
  6309 ;;		line 282 in file "dc_motor.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6312 ;;		 -> main@motorL(9), 
  6313 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6314 ;;		 -> main@motorR(9), 
  6315 ;;  time            2   36[COMRAM] unsigned int 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;		None
  6318 ;; Return value:  Size  Location     Type
  6319 ;;                  1    wreg      void 
  6320 ;; Registers used:
  6321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6322 ;; Tracked objects:
  6323 ;;		On entry : 0/0
  6324 ;;		On exit  : 0/0
  6325 ;;		Unchanged: 0/0
  6326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6327 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6331 ;;Total ram usage:        6 bytes
  6332 ;; Hardware stack levels used: 1
  6333 ;; Hardware stack levels required when called: 7
  6334 ;; This function calls:
  6335 ;;		_setMotorPWM
  6336 ;; This function is called by:
  6337 ;;		_RobotMovement
  6338 ;;		_return_back
  6339 ;; This function uses a non-reentrant model
  6340 ;;
  6341                           
  6342                           	psect	text35
  6343   001A0A                     __ptext35:
  6344                           	callstack 0
  6345   001A0A                     _moveBack:
  6346                           	callstack 22
  6347   001A0A                     
  6348                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6349   001A0A  0E00               	movlw	0
  6350   001A0C  6E4A               	movwf	(_seconds+1)^0,c
  6351   001A0E  0E00               	movlw	0
  6352   001A10  6E49               	movwf	_seconds^0,c
  6353                           
  6354                           ;dc_motor.c: 285:     while (seconds<time)
  6355   001A12  EF33  F00D         	goto	l3943
  6356   001A16                     l3933:
  6357                           
  6358                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6359   001A16  EE20 F001          	lfsr	2,1
  6360   001A1A  5021               	movf	moveBack@mL^0,w,c
  6361   001A1C  26D9               	addwf	fsr2l,f,c
  6362   001A1E  5022               	movf	(moveBack@mL+1)^0,w,c
  6363   001A20  22DA               	addwfc	fsr2h,f,c
  6364   001A22  0E01               	movlw	1
  6365   001A24  6EDF               	movwf	indf2,c
  6366                           
  6367                           ;dc_motor.c: 288:         (*mR).direction=1;
  6368   001A26  EE20 F001          	lfsr	2,1
  6369   001A2A  5023               	movf	moveBack@mR^0,w,c
  6370   001A2C  26D9               	addwf	fsr2l,f,c
  6371   001A2E  5024               	movf	(moveBack@mR+1)^0,w,c
  6372   001A30  22DA               	addwfc	fsr2h,f,c
  6373   001A32  0E01               	movlw	1
  6374   001A34  6EDF               	movwf	indf2,c
  6375   001A36                     
  6376                           ;dc_motor.c: 289:         (*mL).power=40;
  6377   001A36  C021  FFD9         	movff	moveBack@mL,fsr2l
  6378   001A3A  C022  FFDA         	movff	moveBack@mL+1,fsr2h
  6379   001A3E  0E28               	movlw	40
  6380   001A40  6EDF               	movwf	indf2,c
  6381   001A42                     
  6382                           ;dc_motor.c: 290:         (*mR).power=39;
  6383   001A42  C023  FFD9         	movff	moveBack@mR,fsr2l
  6384   001A46  C024  FFDA         	movff	moveBack@mR+1,fsr2h
  6385   001A4A  0E27               	movlw	39
  6386   001A4C  6EDF               	movwf	indf2,c
  6387   001A4E                     
  6388                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6389   001A4E  C021  F01B         	movff	moveBack@mL,setMotorPWM@m
  6390   001A52  C022  F01C         	movff	moveBack@mL+1,setMotorPWM@m+1
  6391   001A56  EC5E  F007         	call	_setMotorPWM	;wreg free
  6392   001A5A                     
  6393                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6394   001A5A  C023  F01B         	movff	moveBack@mR,setMotorPWM@m
  6395   001A5E  C024  F01C         	movff	moveBack@mR+1,setMotorPWM@m+1
  6396   001A62  EC5E  F007         	call	_setMotorPWM	;wreg free
  6397   001A66                     l3943:
  6398                           
  6399                           ;dc_motor.c: 285:     while (seconds<time)
  6400   001A66  5025               	movf	moveBack@time^0,w,c
  6401   001A68  5C49               	subwf	_seconds^0,w,c
  6402   001A6A  5026               	movf	(moveBack@time+1)^0,w,c
  6403   001A6C  584A               	subwfb	(_seconds+1)^0,w,c
  6404   001A6E  A0D8               	btfss	status,0,c
  6405   001A70  EF3C  F00D         	goto	u3051
  6406   001A74  EF3E  F00D         	goto	u3050
  6407   001A78                     u3051:
  6408   001A78  EF0B  F00D         	goto	l3933
  6409   001A7C                     u3050:
  6410   001A7C  0012               	return		;funcret
  6411   001A7E                     __end_of_moveBack:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function _TimedfullSpeedAhead *****************
  6415 ;; Defined at:
  6416 ;;		line 267 in file "dc_motor.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  mL              2   32[COMRAM] PTR struct DC_motor
  6419 ;;		 -> main@motorL(9), 
  6420 ;;  mR              2   34[COMRAM] PTR struct DC_motor
  6421 ;;		 -> main@motorR(9), 
  6422 ;;  time            2   36[COMRAM] unsigned int 
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;                  1    wreg      void 
  6427 ;; Registers used:
  6428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6434 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6437 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6438 ;;Total ram usage:        6 bytes
  6439 ;; Hardware stack levels used: 1
  6440 ;; Hardware stack levels required when called: 7
  6441 ;; This function calls:
  6442 ;;		_setMotorPWM
  6443 ;; This function is called by:
  6444 ;;		_RobotMovement
  6445 ;;		_return_back
  6446 ;;		_main
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           	psect	text36
  6451   001A7E                     __ptext36:
  6452                           	callstack 0
  6453   001A7E                     _TimedfullSpeedAhead:
  6454                           	callstack 22
  6455   001A7E                     
  6456                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6457   001A7E  0E00               	movlw	0
  6458   001A80  6E4A               	movwf	(_seconds+1)^0,c
  6459   001A82  0E00               	movlw	0
  6460   001A84  6E49               	movwf	_seconds^0,c
  6461                           
  6462                           ;dc_motor.c: 270:     while (seconds<time)
  6463   001A86  EF6D  F00D         	goto	l3929
  6464   001A8A                     l3919:
  6465                           
  6466                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6467   001A8A  EE20 F001          	lfsr	2,1
  6468   001A8E  5021               	movf	TimedfullSpeedAhead@mL^0,w,c
  6469   001A90  26D9               	addwf	fsr2l,f,c
  6470   001A92  5022               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6471   001A94  22DA               	addwfc	fsr2h,f,c
  6472   001A96  0E00               	movlw	0
  6473   001A98  6EDF               	movwf	indf2,c
  6474                           
  6475                           ;dc_motor.c: 274:         (*mR).direction=0;
  6476   001A9A  EE20 F001          	lfsr	2,1
  6477   001A9E  5023               	movf	TimedfullSpeedAhead@mR^0,w,c
  6478   001AA0  26D9               	addwf	fsr2l,f,c
  6479   001AA2  5024               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6480   001AA4  22DA               	addwfc	fsr2h,f,c
  6481   001AA6  0E00               	movlw	0
  6482   001AA8  6EDF               	movwf	indf2,c
  6483   001AAA                     
  6484                           ;dc_motor.c: 275:         (*mL).power=50;
  6485   001AAA  C021  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6486   001AAE  C022  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6487   001AB2  0E32               	movlw	50
  6488   001AB4  6EDF               	movwf	indf2,c
  6489   001AB6                     
  6490                           ;dc_motor.c: 276:         (*mR).power=50;
  6491   001AB6  C023  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6492   001ABA  C024  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6493   001ABE  0E32               	movlw	50
  6494   001AC0  6EDF               	movwf	indf2,c
  6495   001AC2                     
  6496                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6497   001AC2  C021  F01B         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6498   001AC6  C022  F01C         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6499   001ACA  EC5E  F007         	call	_setMotorPWM	;wreg free
  6500   001ACE                     
  6501                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6502   001ACE  C023  F01B         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6503   001AD2  C024  F01C         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6504   001AD6  EC5E  F007         	call	_setMotorPWM	;wreg free
  6505   001ADA                     l3929:
  6506                           
  6507                           ;dc_motor.c: 270:     while (seconds<time)
  6508   001ADA  5025               	movf	TimedfullSpeedAhead@time^0,w,c
  6509   001ADC  5C49               	subwf	_seconds^0,w,c
  6510   001ADE  5026               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6511   001AE0  584A               	subwfb	(_seconds+1)^0,w,c
  6512   001AE2  A0D8               	btfss	status,0,c
  6513   001AE4  EF76  F00D         	goto	u3041
  6514   001AE8  EF78  F00D         	goto	u3040
  6515   001AEC                     u3041:
  6516   001AEC  EF45  F00D         	goto	l3919
  6517   001AF0                     u3040:
  6518   001AF0  0012               	return		;funcret
  6519   001AF2                     __end_of_TimedfullSpeedAhead:
  6520                           	callstack 0
  6521                           
  6522 ;; *************** function _setMotorPWM *****************
  6523 ;; Defined at:
  6524 ;;		line 69 in file "dc_motor.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  m               2   26[COMRAM] PTR struct DC_motor
  6527 ;;		 -> main@motorR(9), main@motorL(9), 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  negDuty         1   31[COMRAM] unsigned char 
  6530 ;;  posDuty         1   30[COMRAM] unsigned char 
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6543 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6544 ;;Total ram usage:        6 bytes
  6545 ;; Hardware stack levels used: 1
  6546 ;; Hardware stack levels required when called: 6
  6547 ;; This function calls:
  6548 ;;		___lwdiv
  6549 ;;		___wmul
  6550 ;; This function is called by:
  6551 ;;		_stop
  6552 ;;		_turnLeft
  6553 ;;		_turnRight
  6554 ;;		_turnLeftLong
  6555 ;;		_turnRightLong
  6556 ;;		_fullSpeedAhead
  6557 ;;		_TimedfullSpeedAhead
  6558 ;;		_moveBack
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text37
  6563   000EBC                     __ptext37:
  6564                           	callstack 0
  6565   000EBC                     _setMotorPWM:
  6566                           	callstack 23
  6567   000EBC                     
  6568                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6569   000EBC  EE20 F002          	lfsr	2,2
  6570   000EC0  501B               	movf	setMotorPWM@m^0,w,c
  6571   000EC2  26D9               	addwf	fsr2l,f,c
  6572   000EC4  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6573   000EC6  22DA               	addwfc	fsr2h,f,c
  6574   000EC8  50DF               	movf	indf2,w,c
  6575   000ECA  B4D8               	btfsc	status,2,c
  6576   000ECC  EF6A  F007         	goto	u2891
  6577   000ED0  EF6C  F007         	goto	u2890
  6578   000ED4                     u2891:
  6579   000ED4  EFA0  F007         	goto	l3617
  6580   000ED8                     u2890:
  6581   000ED8                     
  6582                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6583   000ED8  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6584   000EDC  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6585   000EE0  50DF               	movf	indf2,w,c
  6586   000EE2  6E1D               	movwf	??_setMotorPWM^0,c
  6587   000EE4  501D               	movf	??_setMotorPWM^0,w,c
  6588   000EE6  6E0E               	movwf	___wmul@multiplier^0,c
  6589   000EE8  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6590   000EEA  EE20 F003          	lfsr	2,3
  6591   000EEE  501B               	movf	setMotorPWM@m^0,w,c
  6592   000EF0  26D9               	addwf	fsr2l,f,c
  6593   000EF2  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6594   000EF4  22DA               	addwfc	fsr2h,f,c
  6595   000EF6  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6596   000EFA  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6597   000EFE  EC7A  F010         	call	___wmul	;wreg free
  6598   000F02  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6599   000F06  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6600   000F0A  0E00               	movlw	0
  6601   000F0C  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6602   000F0E  0E64               	movlw	100
  6603   000F10  6E16               	movwf	___lwdiv@divisor^0,c
  6604   000F12  EC79  F00D         	call	___lwdiv	;wreg free
  6605   000F16  EE20 F003          	lfsr	2,3
  6606   000F1A  501B               	movf	setMotorPWM@m^0,w,c
  6607   000F1C  26D9               	addwf	fsr2l,f,c
  6608   000F1E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6609   000F20  22DA               	addwfc	fsr2h,f,c
  6610   000F22  50DF               	movf	indf2,w,c
  6611   000F24  6E1E               	movwf	(??_setMotorPWM+1)^0,c
  6612   000F26  5014               	movf	?___lwdiv^0,w,c
  6613   000F28  5C1E               	subwf	(??_setMotorPWM+1)^0,w,c
  6614   000F2A  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6615   000F2C                     
  6616                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6617   000F2C  EE20 F003          	lfsr	2,3
  6618   000F30  501B               	movf	setMotorPWM@m^0,w,c
  6619   000F32  26D9               	addwf	fsr2l,f,c
  6620   000F34  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6621   000F36  22DA               	addwfc	fsr2h,f,c
  6622   000F38  50DF               	movf	indf2,w,c
  6623   000F3A  6E20               	movwf	setMotorPWM@negDuty^0,c
  6624                           
  6625                           ;dc_motor.c: 76:     }
  6626   000F3C  EFC3  F007         	goto	l3621
  6627   000F40                     l3617:
  6628                           
  6629                           ;dc_motor.c: 78:         posDuty=0;
  6630   000F40  0E00               	movlw	0
  6631   000F42  6E1F               	movwf	setMotorPWM@posDuty^0,c
  6632   000F44                     
  6633                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6634   000F44  C01B  FFD9         	movff	setMotorPWM@m,fsr2l
  6635   000F48  C01C  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6636   000F4C  50DF               	movf	indf2,w,c
  6637   000F4E  6E1D               	movwf	??_setMotorPWM^0,c
  6638   000F50  501D               	movf	??_setMotorPWM^0,w,c
  6639   000F52  6E0E               	movwf	___wmul@multiplier^0,c
  6640   000F54  6A0F               	clrf	(___wmul@multiplier+1)^0,c
  6641   000F56  EE20 F003          	lfsr	2,3
  6642   000F5A  501B               	movf	setMotorPWM@m^0,w,c
  6643   000F5C  26D9               	addwf	fsr2l,f,c
  6644   000F5E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6645   000F60  22DA               	addwfc	fsr2h,f,c
  6646   000F62  CFDE F010          	movff	postinc2,___wmul@multiplicand
  6647   000F66  CFDD F011          	movff	postdec2,___wmul@multiplicand+1
  6648   000F6A  EC7A  F010         	call	___wmul	;wreg free
  6649   000F6E  C00E  F014         	movff	?___wmul,___lwdiv@dividend
  6650   000F72  C00F  F015         	movff	?___wmul+1,___lwdiv@dividend+1
  6651   000F76  0E00               	movlw	0
  6652   000F78  6E17               	movwf	(___lwdiv@divisor+1)^0,c
  6653   000F7A  0E64               	movlw	100
  6654   000F7C  6E16               	movwf	___lwdiv@divisor^0,c
  6655   000F7E  EC79  F00D         	call	___lwdiv	;wreg free
  6656   000F82  5014               	movf	?___lwdiv^0,w,c
  6657   000F84  6E20               	movwf	setMotorPWM@negDuty^0,c
  6658   000F86                     l3621:
  6659                           
  6660                           ;dc_motor.c: 82:     if (m->direction) {
  6661   000F86  EE20 F001          	lfsr	2,1
  6662   000F8A  501B               	movf	setMotorPWM@m^0,w,c
  6663   000F8C  26D9               	addwf	fsr2l,f,c
  6664   000F8E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6665   000F90  22DA               	addwfc	fsr2h,f,c
  6666   000F92  50DF               	movf	indf2,w,c
  6667   000F94  B4D8               	btfsc	status,2,c
  6668   000F96  EFCF  F007         	goto	u2901
  6669   000F9A  EFD1  F007         	goto	u2900
  6670   000F9E                     u2901:
  6671   000F9E  EFF3  F007         	goto	l3625
  6672   000FA2                     u2900:
  6673   000FA2                     
  6674                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6675   000FA2  EE20 F005          	lfsr	2,5
  6676   000FA6  501B               	movf	setMotorPWM@m^0,w,c
  6677   000FA8  26D9               	addwf	fsr2l,f,c
  6678   000FAA  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6679   000FAC  22DA               	addwfc	fsr2h,f,c
  6680   000FAE  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6681   000FB2  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6682   000FB6  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6683   000FBA  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6684   000FBE  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6685                           
  6686                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6687   000FC2  EE20 F007          	lfsr	2,7
  6688   000FC6  501B               	movf	setMotorPWM@m^0,w,c
  6689   000FC8  26D9               	addwf	fsr2l,f,c
  6690   000FCA  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6691   000FCC  22DA               	addwfc	fsr2h,f,c
  6692   000FCE  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6693   000FD2  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6694   000FD6  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6695   000FDA  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6696   000FDE  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6697                           
  6698                           ;dc_motor.c: 85:     } else {
  6699   000FE2  EF13  F008         	goto	l235
  6700   000FE6                     l3625:
  6701                           
  6702                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6703   000FE6  EE20 F005          	lfsr	2,5
  6704   000FEA  501B               	movf	setMotorPWM@m^0,w,c
  6705   000FEC  26D9               	addwf	fsr2l,f,c
  6706   000FEE  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6707   000FF0  22DA               	addwfc	fsr2h,f,c
  6708   000FF2  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6709   000FF6  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6710   000FFA  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6711   000FFE  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6712   001002  C020  FFDF         	movff	setMotorPWM@negDuty,indf2
  6713                           
  6714                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6715   001006  EE20 F007          	lfsr	2,7
  6716   00100A  501B               	movf	setMotorPWM@m^0,w,c
  6717   00100C  26D9               	addwf	fsr2l,f,c
  6718   00100E  501C               	movf	(setMotorPWM@m+1)^0,w,c
  6719   001010  22DA               	addwfc	fsr2h,f,c
  6720   001012  CFDE F01D          	movff	postinc2,??_setMotorPWM
  6721   001016  CFDD F01E          	movff	postdec2,??_setMotorPWM+1
  6722   00101A  C01D  FFD9         	movff	??_setMotorPWM,fsr2l
  6723   00101E  C01E  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6724   001022  C01F  FFDF         	movff	setMotorPWM@posDuty,indf2
  6725   001026                     l235:
  6726   001026  0012               	return		;funcret
  6727   001028                     __end_of_setMotorPWM:
  6728                           	callstack 0
  6729                           
  6730 ;; *************** function ___wmul *****************
  6731 ;; Defined at:
  6732 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  multiplier      2   13[COMRAM] unsigned int 
  6735 ;;  multiplicand    2   15[COMRAM] unsigned int 
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;  product         2   17[COMRAM] unsigned int 
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  2   13[COMRAM] unsigned int 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2, status,0, prodl, prodh
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6750 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6751 ;;Total ram usage:        6 bytes
  6752 ;; Hardware stack levels used: 1
  6753 ;; Hardware stack levels required when called: 5
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_get_color_distance
  6758 ;;		_get_color_code
  6759 ;;		_get_wall_detection
  6760 ;;		_setMotorPWM
  6761 ;; This function uses a non-reentrant model
  6762 ;;
  6763                           
  6764                           	psect	text38
  6765   0020F4                     __ptext38:
  6766                           	callstack 0
  6767   0020F4                     ___wmul:
  6768                           	callstack 23
  6769   0020F4  500E               	movf	___wmul@multiplier^0,w,c
  6770   0020F6  0210               	mulwf	___wmul@multiplicand^0,c
  6771   0020F8  CFF3 F012          	movff	prodl,___wmul@product
  6772   0020FC  CFF4 F013          	movff	prodh,___wmul@product+1
  6773   002100  500E               	movf	___wmul@multiplier^0,w,c
  6774   002102  0211               	mulwf	(___wmul@multiplicand+1)^0,c
  6775   002104  50F3               	movf	243,w,c
  6776   002106  2613               	addwf	(___wmul@product+1)^0,f,c
  6777   002108  500F               	movf	(___wmul@multiplier+1)^0,w,c
  6778   00210A  0210               	mulwf	___wmul@multiplicand^0,c
  6779   00210C  50F3               	movf	243,w,c
  6780   00210E  2613               	addwf	(___wmul@product+1)^0,f,c
  6781   002110  C012  F00E         	movff	___wmul@product,?___wmul
  6782   002114  C013  F00F         	movff	___wmul@product+1,?___wmul+1
  6783   002118  0012               	return		;funcret
  6784   00211A                     __end_of___wmul:
  6785                           	callstack 0
  6786                           
  6787 ;; *************** function ___lwdiv *****************
  6788 ;; Defined at:
  6789 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;  dividend        2   19[COMRAM] unsigned int 
  6792 ;;  divisor         2   21[COMRAM] unsigned int 
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  quotient        2   24[COMRAM] unsigned int 
  6795 ;;  counter         1   23[COMRAM] unsigned char 
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  2   19[COMRAM] unsigned int 
  6798 ;; Registers used:
  6799 ;;		wreg, status,2, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6806 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6808 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6809 ;;Total ram usage:        7 bytes
  6810 ;; Hardware stack levels used: 1
  6811 ;; Hardware stack levels required when called: 5
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_calibrate_black
  6816 ;;		_setMotorPWM
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text39
  6821   001AF2                     __ptext39:
  6822                           	callstack 0
  6823   001AF2                     ___lwdiv:
  6824                           	callstack 23
  6825   001AF2  0E00               	movlw	0
  6826   001AF4  6E1A               	movwf	(___lwdiv@quotient+1)^0,c
  6827   001AF6  0E00               	movlw	0
  6828   001AF8  6E19               	movwf	___lwdiv@quotient^0,c
  6829   001AFA  5016               	movf	___lwdiv@divisor^0,w,c
  6830   001AFC  1017               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6831   001AFE  B4D8               	btfsc	status,2,c
  6832   001B00  EF84  F00D         	goto	u2831
  6833   001B04  EF86  F00D         	goto	u2830
  6834   001B08                     u2831:
  6835   001B08  EFAE  F00D         	goto	l975
  6836   001B0C                     u2830:
  6837   001B0C  0E01               	movlw	1
  6838   001B0E  6E18               	movwf	___lwdiv@counter^0,c
  6839   001B10  EF8E  F00D         	goto	l3565
  6840   001B14                     l3563:
  6841   001B14  90D8               	bcf	status,0,c
  6842   001B16  3616               	rlcf	___lwdiv@divisor^0,f,c
  6843   001B18  3617               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6844   001B1A  2A18               	incf	___lwdiv@counter^0,f,c
  6845   001B1C                     l3565:
  6846   001B1C  AE17               	btfss	(___lwdiv@divisor+1)^0,7,c
  6847   001B1E  EF93  F00D         	goto	u2841
  6848   001B22  EF95  F00D         	goto	u2840
  6849   001B26                     u2841:
  6850   001B26  EF8A  F00D         	goto	l3563
  6851   001B2A                     u2840:
  6852   001B2A                     l3567:
  6853   001B2A  90D8               	bcf	status,0,c
  6854   001B2C  3619               	rlcf	___lwdiv@quotient^0,f,c
  6855   001B2E  361A               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6856   001B30  5016               	movf	___lwdiv@divisor^0,w,c
  6857   001B32  5C14               	subwf	___lwdiv@dividend^0,w,c
  6858   001B34  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  6859   001B36  5815               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6860   001B38  A0D8               	btfss	status,0,c
  6861   001B3A  EFA1  F00D         	goto	u2851
  6862   001B3E  EFA3  F00D         	goto	u2850
  6863   001B42                     u2851:
  6864   001B42  EFA8  F00D         	goto	l3575
  6865   001B46                     u2850:
  6866   001B46  5016               	movf	___lwdiv@divisor^0,w,c
  6867   001B48  5E14               	subwf	___lwdiv@dividend^0,f,c
  6868   001B4A  5017               	movf	(___lwdiv@divisor+1)^0,w,c
  6869   001B4C  5A15               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6870   001B4E  8019               	bsf	___lwdiv@quotient^0,0,c
  6871   001B50                     l3575:
  6872   001B50  90D8               	bcf	status,0,c
  6873   001B52  3217               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6874   001B54  3216               	rrcf	___lwdiv@divisor^0,f,c
  6875   001B56  2E18               	decfsz	___lwdiv@counter^0,f,c
  6876   001B58  EF95  F00D         	goto	l3567
  6877   001B5C                     l975:
  6878   001B5C  C019  F014         	movff	___lwdiv@quotient,?___lwdiv
  6879   001B60  C01A  F015         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6880   001B64  0012               	return		;funcret
  6881   001B66                     __end_of___lwdiv:
  6882                           	callstack 0
  6883                           
  6884 ;; *************** function _Interrupts_init *****************
  6885 ;; Defined at:
  6886 ;;		line 11 in file "interrupts.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;		None
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		None
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;Total ram usage:        0 bytes
  6905 ;; Hardware stack levels used: 1
  6906 ;; Hardware stack levels required when called: 5
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_main
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text40
  6915   0021B2                     __ptext40:
  6916                           	callstack 0
  6917   0021B2                     _Interrupts_init:
  6918                           	callstack 25
  6919   0021B2                     
  6920                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  6921   0021B2  8CF2               	bsf	242,6,c	;volatile
  6922                           
  6923                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  6924   0021B4  010E               	movlb	14	; () banked
  6925   0021B6  8B29               	bsf	41,5,b	;volatile
  6926                           
  6927                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  6928   0021B8  812B               	bsf	43,0,b	;volatile
  6929                           
  6930                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  6931   0021BA  8EF2               	bsf	242,7,c	;volatile
  6932   0021BC                     
  6933                           ; BSR set to: 14
  6934   0021BC  0012               	return		;funcret
  6935   0021BE                     __end_of_Interrupts_init:
  6936                           	callstack 0
  6937                           
  6938 ;; *************** function _HighISR *****************
  6939 ;; Defined at:
  6940 ;;		line 25 in file "interrupts.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, status,2, status,0, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6958 ;;Total ram usage:        0 bytes
  6959 ;; Hardware stack levels used: 1
  6960 ;; Hardware stack levels required when called: 4
  6961 ;; This function calls:
  6962 ;;		_increment_seconds
  6963 ;;		_set_wall_detection
  6964 ;; This function is called by:
  6965 ;;		Interrupt level 2
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	intcode
  6970   000008                     __pintcode:
  6971                           	callstack 0
  6972   000008                     _HighISR:
  6973                           	callstack 21
  6974                           
  6975                           ; BSR set to: 14
  6976                           ;incstack = 0
  6977   000008  824F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6978   00000A                     
  6979                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  6980   00000A  010E               	movlb	14	; () banked
  6981   00000C  AB33               	btfss	51,5,b	;volatile
  6982   00000E  EF0B  F000         	goto	i2u235_41
  6983   000012  EF0D  F000         	goto	i2u235_40
  6984   000016                     i2u235_41:
  6985   000016  EF4F  F000         	goto	i2l416
  6986   00001A                     i2u235_40:
  6987   00001A                     
  6988                           ; BSR set to: 14
  6989                           ;interrupts.c: 28:         incr_sec_counter += 1;
  6990   00001A  0100               	movlb	0	; () banked
  6991   00001C  4BF6               	infsnz	_incr_sec_counter& (0+255),f,b
  6992   00001E  2BF7               	incf	(_incr_sec_counter+1)& (0+255),f,b
  6993                           
  6994                           ;interrupts.c: 29:         wall_detection_counter += 1;
  6995   000020  4A45               	infsnz	_wall_detection_counter^0,f,c
  6996   000022  2A46               	incf	(_wall_detection_counter+1)^0,f,c
  6997   000024                     
  6998                           ; BSR set to: 0
  6999                           ;interrupts.c: 31:         if(incr_sec_counter == 10){
  7000   000024  0E0A               	movlw	10
  7001   000026  19F6               	xorwf	_incr_sec_counter& (0+255),w,b
  7002   000028  11F7               	iorwf	(_incr_sec_counter+1)& (0+255),w,b
  7003   00002A  A4D8               	btfss	status,2,c
  7004   00002C  EF1A  F000         	goto	i2u236_41
  7005   000030  EF1C  F000         	goto	i2u236_40
  7006   000034                     i2u236_41:
  7007   000034  EF23  F000         	goto	i2l3207
  7008   000038                     i2u236_40:
  7009   000038                     
  7010                           ; BSR set to: 0
  7011                           ;interrupts.c: 32:             increment_seconds();
  7012   000038  EC08  F011         	call	_increment_seconds	;wreg free
  7013   00003C                     
  7014                           ;interrupts.c: 33:             incr_sec_counter = 0;
  7015   00003C  0E00               	movlw	0
  7016   00003E  0100               	movlb	0	; () banked
  7017   000040  6FF7               	movwf	(_incr_sec_counter+1)& (0+255),b
  7018   000042  0E00               	movlw	0
  7019   000044  6FF6               	movwf	_incr_sec_counter& (0+255),b
  7020   000046                     i2l3207:
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;interrupts.c: 36:         if(wall_detection_counter == 22){
  7024   000046  0E16               	movlw	22
  7025   000048  1845               	xorwf	_wall_detection_counter^0,w,c
  7026   00004A  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7027   00004C  A4D8               	btfss	status,2,c
  7028   00004E  EF2B  F000         	goto	i2u237_41
  7029   000052  EF2D  F000         	goto	i2u237_40
  7030   000056                     i2u237_41:
  7031   000056  EF35  F000         	goto	i2l3211
  7032   00005A                     i2u237_40:
  7033   00005A                     
  7034                           ; BSR set to: 0
  7035                           ;interrupts.c: 37:             set_wall_detection(0);
  7036   00005A  0E00               	movlw	0
  7037   00005C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7038   00005E  0E00               	movlw	0
  7039   000060  6E0C               	movwf	set_wall_detection@mode^0,c
  7040   000062  ECB3  F00D         	call	_set_wall_detection	;wreg free
  7041                           
  7042                           ;interrupts.c: 38:         }
  7043   000066  EF49  F000         	goto	i2l3217
  7044   00006A                     i2l3211:
  7045                           
  7046                           ; BSR set to: 0
  7047   00006A  0E2C               	movlw	44
  7048   00006C  1845               	xorwf	_wall_detection_counter^0,w,c
  7049   00006E  1046               	iorwf	(_wall_detection_counter+1)^0,w,c
  7050   000070  A4D8               	btfss	status,2,c
  7051   000072  EF3D  F000         	goto	i2u238_41
  7052   000076  EF3F  F000         	goto	i2u238_40
  7053   00007A                     i2u238_41:
  7054   00007A  EF49  F000         	goto	i2l3217
  7055   00007E                     i2u238_40:
  7056   00007E                     
  7057                           ; BSR set to: 0
  7058                           ;interrupts.c: 40:             set_wall_detection(1);
  7059   00007E  0E00               	movlw	0
  7060   000080  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7061   000082  0E01               	movlw	1
  7062   000084  6E0C               	movwf	set_wall_detection@mode^0,c
  7063   000086  ECB3  F00D         	call	_set_wall_detection	;wreg free
  7064   00008A                     
  7065                           ;interrupts.c: 41:             wall_detection_counter = 0;
  7066   00008A  0E00               	movlw	0
  7067   00008C  6E46               	movwf	(_wall_detection_counter+1)^0,c
  7068   00008E  0E00               	movlw	0
  7069   000090  6E45               	movwf	_wall_detection_counter^0,c
  7070   000092                     i2l3217:
  7071                           
  7072                           ;interrupts.c: 44:         TMR0H=0b11111101;
  7073   000092  0EFD               	movlw	253
  7074   000094  6ED4               	movwf	212,c	;volatile
  7075   000096                     
  7076                           ;interrupts.c: 45:         TMR0L=0b10010000;
  7077   000096  0E90               	movlw	144
  7078   000098  6ED3               	movwf	211,c	;volatile
  7079   00009A                     
  7080                           ;interrupts.c: 47:         PIR0bits.TMR0IF = 0;
  7081   00009A  010E               	movlb	14	; () banked
  7082   00009C  9B33               	bcf	51,5,b	;volatile
  7083   00009E                     i2l416:
  7084                           
  7085                           ; BSR set to: 14
  7086   00009E  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7087   0000A0  0011               	retfie		f
  7088   0000A2                     __end_of_HighISR:
  7089                           	callstack 0
  7090                           
  7091 ;; *************** function _set_wall_detection *****************
  7092 ;; Defined at:
  7093 ;;		line 263 in file "color.c"
  7094 ;; Parameters:    Size  Location     Type
  7095 ;;  mode            2   11[COMRAM] unsigned int 
  7096 ;; Auto vars:     Size  Location     Type
  7097 ;;		None
  7098 ;; Return value:  Size  Location     Type
  7099 ;;                  1    wreg      void 
  7100 ;; Registers used:
  7101 ;;		wreg, status,2, status,0, cstack
  7102 ;; Tracked objects:
  7103 ;;		On entry : 0/0
  7104 ;;		On exit  : 0/0
  7105 ;;		Unchanged: 0/0
  7106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7107 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7111 ;;Total ram usage:        2 bytes
  7112 ;; Hardware stack levels used: 1
  7113 ;; Hardware stack levels required when called: 3
  7114 ;; This function calls:
  7115 ;;		i2_color_read_Clear
  7116 ;;		i2_set_led_color
  7117 ;; This function is called by:
  7118 ;;		_HighISR
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           	psect	text42
  7123   001B66                     __ptext42:
  7124                           	callstack 0
  7125   001B66                     _set_wall_detection:
  7126                           	callstack 21
  7127   001B66                     
  7128                           ;color.c: 264:     if(wall_detection_mode == 0){
  7129   001B66  0100               	movlb	0	; () banked
  7130   001B68  51FA               	movf	_wall_detection_mode& (0+255),w,b
  7131   001B6A  11FB               	iorwf	(_wall_detection_mode+1)& (0+255),w,b
  7132   001B6C  A4D8               	btfss	status,2,c
  7133   001B6E  EFBB  F00D         	goto	i2u207_41
  7134   001B72  EFBD  F00D         	goto	i2u207_40
  7135   001B76                     i2u207_41:
  7136   001B76  EFBF  F00D         	goto	i2l2981
  7137   001B7A                     i2u207_40:
  7138   001B7A  EFEB  F00D         	goto	i2l166
  7139   001B7E                     i2l2981:
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;color.c: 267:     if(mode == 0){
  7143   001B7E  500C               	movf	set_wall_detection@mode^0,w,c
  7144   001B80  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7145   001B82  A4D8               	btfss	status,2,c
  7146   001B84  EFC6  F00D         	goto	i2u208_41
  7147   001B88  EFC8  F00D         	goto	i2u208_40
  7148   001B8C                     i2u208_41:
  7149   001B8C  EFD6  F00D         	goto	i2l2987
  7150   001B90                     i2u208_40:
  7151   001B90                     
  7152                           ; BSR set to: 0
  7153                           ;color.c: 268:         clear1 = color_read_Clear();
  7154   001B90  EC20  F00F         	call	i2_color_read_Clear	;wreg free
  7155   001B94  C005  F04D         	movff	?i2_color_read_Clear,_clear1
  7156   001B98  C006  F04E         	movff	?i2_color_read_Clear+1,_clear1+1
  7157   001B9C                     
  7158                           ;color.c: 269:         set_led_color(0b111);
  7159   001B9C  0E00               	movlw	0
  7160   001B9E  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7161   001BA0  0E07               	movlw	7
  7162   001BA2  6E01               	movwf	i2set_led_color@color^0,c
  7163   001BA4  ECD9  F00F         	call	i2_set_led_color	;wreg free
  7164                           
  7165                           ;color.c: 270:     }else if(mode == 1){
  7166   001BA8  EFEB  F00D         	goto	i2l166
  7167   001BAC                     i2l2987:
  7168                           
  7169                           ; BSR set to: 0
  7170   001BAC  040C               	decf	set_wall_detection@mode^0,w,c
  7171   001BAE  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7172   001BB0  A4D8               	btfss	status,2,c
  7173   001BB2  EFDD  F00D         	goto	i2u209_41
  7174   001BB6  EFDF  F00D         	goto	i2u209_40
  7175   001BBA                     i2u209_41:
  7176   001BBA  EFEB  F00D         	goto	i2l166
  7177   001BBE                     i2u209_40:
  7178   001BBE                     
  7179                           ; BSR set to: 0
  7180                           ;color.c: 271:         clear2 = color_read_Clear();
  7181   001BBE  EC20  F00F         	call	i2_color_read_Clear	;wreg free
  7182   001BC2  C005  F04B         	movff	?i2_color_read_Clear,_clear2
  7183   001BC6  C006  F04C         	movff	?i2_color_read_Clear+1,_clear2+1
  7184   001BCA                     
  7185                           ;color.c: 272:         set_led_color(0b000);
  7186   001BCA  0E00               	movlw	0
  7187   001BCC  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7188   001BCE  0E00               	movlw	0
  7189   001BD0  6E01               	movwf	i2set_led_color@color^0,c
  7190   001BD2  ECD9  F00F         	call	i2_set_led_color	;wreg free
  7191   001BD6                     i2l166:
  7192   001BD6  0012               	return		;funcret
  7193   001BD8                     __end_of_set_wall_detection:
  7194                           	callstack 0
  7195                           
  7196 ;; *************** function i2_set_led_color *****************
  7197 ;; Defined at:
  7198 ;;		line 163 in file "color.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  color           2    0[COMRAM] unsigned int 
  7201 ;; Auto vars:     Size  Location     Type
  7202 ;;		None
  7203 ;; Return value:  Size  Location     Type
  7204 ;;                  1    wreg      void 
  7205 ;; Registers used:
  7206 ;;		None
  7207 ;; Tracked objects:
  7208 ;;		On entry : 0/0
  7209 ;;		On exit  : 0/0
  7210 ;;		Unchanged: 0/0
  7211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7216 ;;Total ram usage:        2 bytes
  7217 ;; Hardware stack levels used: 1
  7218 ;; This function calls:
  7219 ;;		Nothing
  7220 ;; This function is called by:
  7221 ;;		_set_wall_detection
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text43
  7226   001FB2                     __ptext43:
  7227                           	callstack 0
  7228   001FB2                     i2_set_led_color:
  7229                           	callstack 23
  7230   001FB2                     
  7231                           ;color.c: 167:     if(color & 0b100){
  7232   001FB2  A401               	btfss	i2set_led_color@color^0,2,c
  7233   001FB4  EFDE  F00F         	goto	i2u176_41
  7234   001FB8  EFE0  F00F         	goto	i2u176_40
  7235   001FBC                     i2u176_41:
  7236   001FBC  EFE3  F00F         	goto	i2l121
  7237   001FC0                     i2u176_40:
  7238   001FC0                     
  7239                           ;color.c: 168:         LATGbits.LATG1 = 1;
  7240   001FC0  827F               	bsf	127,1,c	;volatile
  7241                           
  7242                           ;color.c: 169:     }else{
  7243   001FC2  EFE4  F00F         	goto	i2l122
  7244   001FC6                     i2l121:
  7245                           
  7246                           ;color.c: 170:         LATGbits.LATG1 = 0;
  7247   001FC6  927F               	bcf	127,1,c	;volatile
  7248   001FC8                     i2l122:
  7249                           
  7250                           ;color.c: 172:     if(color & 0b010){
  7251   001FC8  A201               	btfss	i2set_led_color@color^0,1,c
  7252   001FCA  EFE9  F00F         	goto	i2u177_41
  7253   001FCE  EFEB  F00F         	goto	i2u177_40
  7254   001FD2                     i2u177_41:
  7255   001FD2  EFEE  F00F         	goto	i2l123
  7256   001FD6                     i2u177_40:
  7257   001FD6                     
  7258                           ;color.c: 173:         LATAbits.LATA4 = 1;
  7259   001FD6  8879               	bsf	121,4,c	;volatile
  7260                           
  7261                           ;color.c: 174:     }else{
  7262   001FD8  EFEF  F00F         	goto	i2l124
  7263   001FDC                     i2l123:
  7264                           
  7265                           ;color.c: 175:         LATAbits.LATA4 = 0;
  7266   001FDC  9879               	bcf	121,4,c	;volatile
  7267   001FDE                     i2l124:
  7268                           
  7269                           ;color.c: 177:     if(color & 0b001){
  7270   001FDE  A001               	btfss	i2set_led_color@color^0,0,c
  7271   001FE0  EFF4  F00F         	goto	i2u178_41
  7272   001FE4  EFF6  F00F         	goto	i2u178_40
  7273   001FE8                     i2u178_41:
  7274   001FE8  EFF9  F00F         	goto	i2l125
  7275   001FEC                     i2u178_40:
  7276   001FEC                     
  7277                           ;color.c: 178:         LATFbits.LATF7 = 1;
  7278   001FEC  8E7E               	bsf	126,7,c	;volatile
  7279                           
  7280                           ;color.c: 179:     }else{
  7281   001FEE  EFFA  F00F         	goto	i2l127
  7282   001FF2                     i2l125:
  7283                           
  7284                           ;color.c: 180:         LATFbits.LATF7 = 0;
  7285   001FF2  9E7E               	bcf	126,7,c	;volatile
  7286   001FF4                     i2l127:
  7287   001FF4  0012               	return		;funcret
  7288   001FF6                     __end_ofi2_set_led_color:
  7289                           	callstack 0
  7290                           
  7291 ;; *************** function i2_color_read_Clear *****************
  7292 ;; Defined at:
  7293 ;;		line 141 in file "color.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;		None
  7296 ;; Auto vars:     Size  Location     Type
  7297 ;;  tmp             2    9[COMRAM] unsigned int 
  7298 ;; Return value:  Size  Location     Type
  7299 ;;                  2    4[COMRAM] unsigned int 
  7300 ;; Registers used:
  7301 ;;		wreg, status,2, status,0, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7309 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7310 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7311 ;;Total ram usage:        7 bytes
  7312 ;; Hardware stack levels used: 1
  7313 ;; Hardware stack levels required when called: 2
  7314 ;; This function calls:
  7315 ;;		i2_I2C_2_Master_Read
  7316 ;;		i2_I2C_2_Master_RepStart
  7317 ;;		i2_I2C_2_Master_Start
  7318 ;;		i2_I2C_2_Master_Stop
  7319 ;;		i2_I2C_2_Master_Write
  7320 ;; This function is called by:
  7321 ;;		_set_wall_detection
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text44
  7326   001E40                     __ptext44:
  7327                           	callstack 0
  7328   001E40                     i2_color_read_Clear:
  7329                           	callstack 21
  7330   001E40                     
  7331                           ;color.c: 143:  unsigned int tmp;;color.c: 144:  I2C_2_Master_Start();
  7332   001E40  ECFE  F010         	call	i2_I2C_2_Master_Start	;wreg free
  7333                           
  7334                           ;color.c: 145:  I2C_2_Master_Write(0x52 | 0x00);
  7335   001E44  0E52               	movlw	82
  7336   001E46  ECDF  F010         	call	i2_I2C_2_Master_Write
  7337                           
  7338                           ;color.c: 146:  I2C_2_Master_Write(0xA0 | 0x14);
  7339   001E4A  0EB4               	movlw	180
  7340   001E4C  ECDF  F010         	call	i2_I2C_2_Master_Write
  7341                           
  7342                           ;color.c: 147:  I2C_2_Master_RepStart();
  7343   001E50  EC03  F011         	call	i2_I2C_2_Master_RepStart	;wreg free
  7344                           
  7345                           ;color.c: 148:  I2C_2_Master_Write(0x52 | 0x01);
  7346   001E54  0E53               	movlw	83
  7347   001E56  ECDF  F010         	call	i2_I2C_2_Master_Write
  7348                           
  7349                           ;color.c: 149:  tmp=I2C_2_Master_Read(1);
  7350   001E5A  0E01               	movlw	1
  7351   001E5C  EC1C  F010         	call	i2_I2C_2_Master_Read
  7352   001E60  6E07               	movwf	??i2_color_read_Clear^0,c
  7353   001E62  5007               	movf	??i2_color_read_Clear^0,w,c
  7354   001E64  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7355   001E66  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7356                           
  7357                           ;color.c: 150:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7358   001E68  0E00               	movlw	0
  7359   001E6A  EC1C  F010         	call	i2_I2C_2_Master_Read
  7360   001E6E  6E07               	movwf	??i2_color_read_Clear^0,c
  7361   001E70  5007               	movf	??i2_color_read_Clear^0,w,c
  7362   001E72  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7363   001E74  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7364   001E76  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7365   001E78  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7366   001E7A  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7367   001E7C  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7368   001E7E  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7369   001E80  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7370                           
  7371                           ;color.c: 151:  I2C_2_Master_Stop();
  7372   001E82  ECF9  F010         	call	i2_I2C_2_Master_Stop	;wreg free
  7373   001E86                     
  7374                           ;color.c: 152:  return tmp;
  7375   001E86  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7376   001E8A  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7377   001E8E  0012               	return		;funcret
  7378   001E90                     __end_ofi2_color_read_Clear:
  7379                           	callstack 0
  7380                           
  7381 ;; *************** function i2_I2C_2_Master_Write *****************
  7382 ;; Defined at:
  7383 ;;		line 45 in file "i2c.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  data_byte       1    wreg     unsigned char 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;  data_byte       1    1[COMRAM] unsigned char 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7398 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7400 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7401 ;;Total ram usage:        1 bytes
  7402 ;; Hardware stack levels used: 1
  7403 ;; Hardware stack levels required when called: 1
  7404 ;; This function calls:
  7405 ;;		i2_I2C_2_Master_Idle
  7406 ;; This function is called by:
  7407 ;;		i2_color_read_Clear
  7408 ;; This function uses a non-reentrant model
  7409 ;;
  7410                           
  7411                           	psect	text45
  7412   0021BE                     __ptext45:
  7413                           	callstack 0
  7414   0021BE                     i2_I2C_2_Master_Write:
  7415                           	callstack 21
  7416                           
  7417                           ;incstack = 0
  7418                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7419   0021BE  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7420   0021C0                     
  7421                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7422   0021C0  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7423   0021C4                     
  7424                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7425   0021C4  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7426   0021C8  0012               	return		;funcret
  7427   0021CA                     __end_ofi2_I2C_2_Master_Write:
  7428                           	callstack 0
  7429                           
  7430 ;; *************** function i2_I2C_2_Master_Stop *****************
  7431 ;; Defined at:
  7432 ;;		line 39 in file "i2c.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;		None
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;		None
  7437 ;; Return value:  Size  Location     Type
  7438 ;;                  1    wreg      void 
  7439 ;; Registers used:
  7440 ;;		wreg, status,2, status,0, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7450 ;;Total ram usage:        0 bytes
  7451 ;; Hardware stack levels used: 1
  7452 ;; Hardware stack levels required when called: 1
  7453 ;; This function calls:
  7454 ;;		i2_I2C_2_Master_Idle
  7455 ;; This function is called by:
  7456 ;;		i2_color_read_Clear
  7457 ;; This function uses a non-reentrant model
  7458 ;;
  7459                           
  7460                           	psect	text46
  7461   0021F2                     __ptext46:
  7462                           	callstack 0
  7463   0021F2                     i2_I2C_2_Master_Stop:
  7464                           	callstack 21
  7465   0021F2                     
  7466                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7467   0021F2  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7468   0021F6                     
  7469                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7470   0021F6  010E               	movlb	14	; () banked
  7471   0021F8  85DA               	bsf	218,2,b	;volatile
  7472   0021FA                     
  7473                           ; BSR set to: 14
  7474   0021FA  0012               	return		;funcret
  7475   0021FC                     __end_ofi2_I2C_2_Master_Stop:
  7476                           	callstack 0
  7477                           
  7478 ;; *************** function i2_I2C_2_Master_Start *****************
  7479 ;; Defined at:
  7480 ;;		line 27 in file "i2c.c"
  7481 ;; Parameters:    Size  Location     Type
  7482 ;;		None
  7483 ;; Auto vars:     Size  Location     Type
  7484 ;;		None
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  1    wreg      void 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7498 ;;Total ram usage:        0 bytes
  7499 ;; Hardware stack levels used: 1
  7500 ;; Hardware stack levels required when called: 1
  7501 ;; This function calls:
  7502 ;;		i2_I2C_2_Master_Idle
  7503 ;; This function is called by:
  7504 ;;		i2_color_read_Clear
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text47
  7509   0021FC                     __ptext47:
  7510                           	callstack 0
  7511   0021FC                     i2_I2C_2_Master_Start:
  7512                           	callstack 21
  7513   0021FC                     
  7514                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7515   0021FC  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7516   002200                     
  7517                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7518   002200  010E               	movlb	14	; () banked
  7519   002202  81DA               	bsf	218,0,b	;volatile
  7520   002204                     
  7521                           ; BSR set to: 14
  7522   002204  0012               	return		;funcret
  7523   002206                     __end_ofi2_I2C_2_Master_Start:
  7524                           	callstack 0
  7525                           
  7526 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7527 ;; Defined at:
  7528 ;;		line 33 in file "i2c.c"
  7529 ;; Parameters:    Size  Location     Type
  7530 ;;		None
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;		None
  7533 ;; Return value:  Size  Location     Type
  7534 ;;                  1    wreg      void 
  7535 ;; Registers used:
  7536 ;;		wreg, status,2, status,0, cstack
  7537 ;; Tracked objects:
  7538 ;;		On entry : 0/0
  7539 ;;		On exit  : 0/0
  7540 ;;		Unchanged: 0/0
  7541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7546 ;;Total ram usage:        0 bytes
  7547 ;; Hardware stack levels used: 1
  7548 ;; Hardware stack levels required when called: 1
  7549 ;; This function calls:
  7550 ;;		i2_I2C_2_Master_Idle
  7551 ;; This function is called by:
  7552 ;;		i2_color_read_Clear
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text48
  7557   002206                     __ptext48:
  7558                           	callstack 0
  7559   002206                     i2_I2C_2_Master_RepStart:
  7560                           	callstack 21
  7561   002206                     
  7562                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7563   002206  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7564   00220A                     
  7565                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7566   00220A  010E               	movlb	14	; () banked
  7567   00220C  83DA               	bsf	218,1,b	;volatile
  7568   00220E                     
  7569                           ; BSR set to: 14
  7570   00220E  0012               	return		;funcret
  7571   002210                     __end_ofi2_I2C_2_Master_RepStart:
  7572                           	callstack 0
  7573                           
  7574 ;; *************** function i2_I2C_2_Master_Read *****************
  7575 ;; Defined at:
  7576 ;;		line 51 in file "i2c.c"
  7577 ;; Parameters:    Size  Location     Type
  7578 ;;  ack             1    wreg     unsigned char 
  7579 ;; Auto vars:     Size  Location     Type
  7580 ;;  ack             1    2[COMRAM] unsigned char 
  7581 ;;  tmp             1    3[COMRAM] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      unsigned char 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, status,0, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7592 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7593 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7594 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7595 ;;Total ram usage:        3 bytes
  7596 ;; Hardware stack levels used: 1
  7597 ;; Hardware stack levels required when called: 1
  7598 ;; This function calls:
  7599 ;;		i2_I2C_2_Master_Idle
  7600 ;; This function is called by:
  7601 ;;		i2_color_read_Clear
  7602 ;; This function uses a non-reentrant model
  7603 ;;
  7604                           
  7605                           	psect	text49
  7606   002038                     __ptext49:
  7607                           	callstack 0
  7608   002038                     i2_I2C_2_Master_Read:
  7609                           	callstack 21
  7610                           
  7611                           ; BSR set to: 14
  7612                           ;incstack = 0
  7613                           ;i2I2C_2_Master_Read@ack stored from wreg
  7614   002038  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7615   00203A                     
  7616                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7617   00203A  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7618   00203E                     
  7619                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7620   00203E  010E               	movlb	14	; () banked
  7621   002040  87DA               	bsf	218,3,b	;volatile
  7622                           
  7623                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7624   002042  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7625   002046                     
  7626                           ;i2c.c: 57:   tmp = SSP2BUF;
  7627   002046  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7628                           
  7629                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7630   00204A  EC66  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7631   00204E                     
  7632                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7633   00204E  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7634   002050  B4D8               	btfsc	status,2,c
  7635   002052  EF2D  F010         	goto	i2u154_41
  7636   002056  EF31  F010         	goto	i2u154_40
  7637   00205A                     i2u154_41:
  7638   00205A  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7639   00205C  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7640   00205E  EF32  F010         	goto	i2u155_48
  7641   002062                     i2u154_40:
  7642   002062  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7643   002064                     i2u155_48:
  7644   002064  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7645   002066  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7646   002068  010E               	movlb	14	; () banked
  7647   00206A  51DA               	movf	218,w,b	;volatile
  7648   00206C  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7649   00206E  0BDF               	andlw	-33
  7650   002070  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7651   002072  6FDA               	movwf	218,b	;volatile
  7652   002074                     
  7653                           ; BSR set to: 14
  7654                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7655   002074  89DA               	bsf	218,4,b	;volatile
  7656   002076                     
  7657                           ; BSR set to: 14
  7658                           ;i2c.c: 61:   return tmp;
  7659   002076  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7660   002078                     
  7661                           ; BSR set to: 14
  7662   002078  0012               	return		;funcret
  7663   00207A                     __end_ofi2_I2C_2_Master_Read:
  7664                           	callstack 0
  7665                           
  7666 ;; *************** function i2_I2C_2_Master_Idle *****************
  7667 ;; Defined at:
  7668 ;;		line 22 in file "i2c.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;		None
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;                  1    wreg      void 
  7675 ;; Registers used:
  7676 ;;		wreg, status,2, status,0
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7686 ;;Total ram usage:        1 bytes
  7687 ;; Hardware stack levels used: 1
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		i2_I2C_2_Master_Start
  7692 ;;		i2_I2C_2_Master_RepStart
  7693 ;;		i2_I2C_2_Master_Stop
  7694 ;;		i2_I2C_2_Master_Write
  7695 ;;		i2_I2C_2_Master_Read
  7696 ;; This function uses a non-reentrant model
  7697 ;;
  7698                           
  7699                           	psect	text50
  7700   0020CC                     __ptext50:
  7701                           	callstack 0
  7702   0020CC                     i2_I2C_2_Master_Idle:
  7703                           	callstack 21
  7704   0020CC                     i2l365:
  7705   0020CC  010E               	movlb	14	; () banked
  7706   0020CE  B5D8               	btfsc	216,2,b	;volatile
  7707   0020D0  EF6C  F010         	goto	i2u147_41
  7708   0020D4  EF6E  F010         	goto	i2u147_40
  7709   0020D8                     i2u147_41:
  7710   0020D8  EF66  F010         	goto	i2l365
  7711   0020DC                     i2u147_40:
  7712   0020DC                     
  7713                           ; BSR set to: 14
  7714   0020DC  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7715   0020E0  0E1F               	movlw	31
  7716   0020E2  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7717   0020E4  A4D8               	btfss	status,2,c
  7718   0020E6  EF77  F010         	goto	i2u148_41
  7719   0020EA  EF79  F010         	goto	i2u148_40
  7720   0020EE                     i2u148_41:
  7721   0020EE  EF66  F010         	goto	i2l365
  7722   0020F2                     i2u148_40:
  7723   0020F2                     
  7724                           ; BSR set to: 14
  7725   0020F2  0012               	return		;funcret
  7726   0020F4                     __end_ofi2_I2C_2_Master_Idle:
  7727                           	callstack 0
  7728                           
  7729 ;; *************** function _increment_seconds *****************
  7730 ;; Defined at:
  7731 ;;		line 297 in file "dc_motor.c"
  7732 ;; Parameters:    Size  Location     Type
  7733 ;;		None
  7734 ;; Auto vars:     Size  Location     Type
  7735 ;;		None
  7736 ;; Return value:  Size  Location     Type
  7737 ;;                  1    wreg      void 
  7738 ;; Registers used:
  7739 ;;		status,2, status,0
  7740 ;; Tracked objects:
  7741 ;;		On entry : 0/0
  7742 ;;		On exit  : 0/0
  7743 ;;		Unchanged: 0/0
  7744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7749 ;;Total ram usage:        0 bytes
  7750 ;; Hardware stack levels used: 1
  7751 ;; This function calls:
  7752 ;;		Nothing
  7753 ;; This function is called by:
  7754 ;;		_HighISR
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text51
  7759   002210                     __ptext51:
  7760                           	callstack 0
  7761   002210                     _increment_seconds:
  7762                           	callstack 24
  7763   002210                     
  7764                           ;dc_motor.c: 299:     seconds += 1;
  7765   002210  4A49               	infsnz	_seconds^0,f,c
  7766   002212  2A4A               	incf	(_seconds+1)^0,f,c
  7767   002214  0012               	return		;funcret
  7768   002216                     __end_of_increment_seconds:
  7769                           	callstack 0
  7770   000000                     
  7771                           	psect	rparam
  7772   000000                     
  7773                           	psect	temp
  7774   00004F                     btemp:
  7775                           	callstack 0
  7776   00004F                     	ds	1
  7777   000000                     int$flags	set	btemp
  7778   000000                     wtemp8	set	btemp+1
  7779   000000                     ttemp5	set	btemp+1
  7780   000000                     ttemp6	set	btemp+4
  7781   000000                     ttemp7	set	btemp+8
  7782                           
  7783                           	psect	idloc
  7784                           
  7785                           ;Config register IDLOC0 @ 0x200000
  7786                           ;	unspecified, using default values
  7787   200000                     	org	2097152
  7788   200000  0FFF               	dw	4095
  7789                           
  7790                           ;Config register IDLOC1 @ 0x200002
  7791                           ;	unspecified, using default values
  7792   200002                     	org	2097154
  7793   200002  0FFF               	dw	4095
  7794                           
  7795                           ;Config register IDLOC2 @ 0x200004
  7796                           ;	unspecified, using default values
  7797   200004                     	org	2097156
  7798   200004  0FFF               	dw	4095
  7799                           
  7800                           ;Config register IDLOC3 @ 0x200006
  7801                           ;	unspecified, using default values
  7802   200006                     	org	2097158
  7803   200006  0FFF               	dw	4095
  7804                           
  7805                           ;Config register IDLOC4 @ 0x200008
  7806                           ;	unspecified, using default values
  7807   200008                     	org	2097160
  7808   200008  0FFF               	dw	4095
  7809                           
  7810                           ;Config register IDLOC5 @ 0x20000A
  7811                           ;	unspecified, using default values
  7812   20000A                     	org	2097162
  7813   20000A  0FFF               	dw	4095
  7814                           
  7815                           ;Config register IDLOC6 @ 0x20000C
  7816                           ;	unspecified, using default values
  7817   20000C                     	org	2097164
  7818   20000C  0FFF               	dw	4095
  7819                           
  7820                           ;Config register IDLOC7 @ 0x20000E
  7821                           ;	unspecified, using default values
  7822   20000E                     	org	2097166
  7823   20000E  0FFF               	dw	4095
  7824                           
  7825                           	psect	config
  7826                           
  7827                           ;Config register CONFIG1L @ 0x300000
  7828                           ;	External Oscillator mode Selection bits
  7829                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7830                           ;	Power-up default value for COSC bits
  7831                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7832   300000                     	org	3145728
  7833   300000  AA                 	db	170
  7834                           
  7835                           ;Config register CONFIG1H @ 0x300001
  7836                           ;	unspecified, using default values
  7837                           ;	Clock Out Enable bit
  7838                           ;	CLKOUTEN = 0x1, unprogrammed default
  7839                           ;	Clock Switch Enable bit
  7840                           ;	CSWEN = 0x1, unprogrammed default
  7841                           ;	Fail-Safe Clock Monitor Enable bit
  7842                           ;	FCMEN = 0x1, unprogrammed default
  7843   300001                     	org	3145729
  7844   300001  FF                 	db	255
  7845                           
  7846                           ;Config register CONFIG2L @ 0x300002
  7847                           ;	unspecified, using default values
  7848                           ;	Master Clear Enable bit
  7849                           ;	MCLRE = 0x1, unprogrammed default
  7850                           ;	Power-up Timer Enable bit
  7851                           ;	PWRTE = 0x1, unprogrammed default
  7852                           ;	Low-power BOR enable bit
  7853                           ;	LPBOREN = 0x1, unprogrammed default
  7854                           ;	Brown-out Reset Enable bits
  7855                           ;	BOREN = 0x3, unprogrammed default
  7856   300002                     	org	3145730
  7857   300002  FF                 	db	255
  7858                           
  7859                           ;Config register CONFIG2H @ 0x300003
  7860                           ;	unspecified, using default values
  7861                           ;	Brown Out Reset Voltage selection bits
  7862                           ;	BORV = 0x3, unprogrammed default
  7863                           ;	ZCD Disable bit
  7864                           ;	ZCD = 0x1, unprogrammed default
  7865                           ;	PPSLOCK bit One-Way Set Enable bit
  7866                           ;	PPS1WAY = 0x1, unprogrammed default
  7867                           ;	Stack Full/Underflow Reset Enable bit
  7868                           ;	STVREN = 0x1, unprogrammed default
  7869                           ;	Debugger Enable bit
  7870                           ;	DEBUG = 0x1, unprogrammed default
  7871                           ;	Extended Instruction Set Enable bit
  7872                           ;	XINST = 0x1, unprogrammed default
  7873   300003                     	org	3145731
  7874   300003  FF                 	db	255
  7875                           
  7876                           ;Config register CONFIG3L @ 0x300004
  7877                           ;	WDT Period Select bits
  7878                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7879                           ;	WDT operating mode
  7880                           ;	WDTE = OFF, WDT Disabled
  7881   300004                     	org	3145732
  7882   300004  9F                 	db	159
  7883                           
  7884                           ;Config register CONFIG3H @ 0x300005
  7885                           ;	unspecified, using default values
  7886                           ;	WDT Window Select bits
  7887                           ;	WDTCWS = 0x7, unprogrammed default
  7888                           ;	WDT input clock selector
  7889                           ;	WDTCCS = 0x7, unprogrammed default
  7890   300005                     	org	3145733
  7891   300005  FF                 	db	255
  7892                           
  7893                           ;Config register CONFIG4L @ 0x300006
  7894                           ;	unspecified, using default values
  7895                           ;	Write Protection Block 0
  7896                           ;	WRT0 = 0x1, unprogrammed default
  7897                           ;	Write Protection Block 1
  7898                           ;	WRT1 = 0x1, unprogrammed default
  7899                           ;	Write Protection Block 2
  7900                           ;	WRT2 = 0x1, unprogrammed default
  7901                           ;	Write Protection Block 3
  7902                           ;	WRT3 = 0x1, unprogrammed default
  7903                           ;	Write Protection Block 3
  7904                           ;	WRT4 = 0x1, unprogrammed default
  7905                           ;	Write Protection Block 3
  7906                           ;	WRT5 = 0x1, unprogrammed default
  7907                           ;	Write Protection Block 3
  7908                           ;	WRT6 = 0x1, unprogrammed default
  7909                           ;	Write Protection Block 3
  7910                           ;	WRT7 = 0x1, unprogrammed default
  7911   300006                     	org	3145734
  7912   300006  FF                 	db	255
  7913                           
  7914                           ;Config register CONFIG4H @ 0x300007
  7915                           ;	unspecified, using default values
  7916                           ;	Configuration Register Write Protection bit
  7917                           ;	WRTC = 0x1, unprogrammed default
  7918                           ;	Boot Block Write Protection bit
  7919                           ;	WRTB = 0x1, unprogrammed default
  7920                           ;	Data EEPROM Write Protection bit
  7921                           ;	WRTD = 0x1, unprogrammed default
  7922                           ;	Scanner Enable bit
  7923                           ;	SCANE = 0x1, unprogrammed default
  7924                           ;	Low Voltage Programming Enable bit
  7925                           ;	LVP = 0x1, unprogrammed default
  7926   300007                     	org	3145735
  7927   300007  FF                 	db	255
  7928                           
  7929                           ;Config register CONFIG5L @ 0x300008
  7930                           ;	unspecified, using default values
  7931                           ;	UserNVM Program Memory Code Protection bit
  7932                           ;	CP = 0x1, unprogrammed default
  7933                           ;	DataNVM Memory Code Protection bit
  7934                           ;	CPD = 0x1, unprogrammed default
  7935   300008                     	org	3145736
  7936   300008  FF                 	db	255
  7937                           
  7938                           ;Config register CONFIG5H @ 0x300009
  7939                           ;	unspecified, using default values
  7940   300009                     	org	3145737
  7941   300009  FF                 	db	255
  7942                           
  7943                           ;Config register CONFIG6L @ 0x30000A
  7944                           ;	unspecified, using default values
  7945                           ;	Table Read Protection Block 0
  7946                           ;	EBTR0 = 0x1, unprogrammed default
  7947                           ;	Table Read Protection Block 1
  7948                           ;	EBTR1 = 0x1, unprogrammed default
  7949                           ;	Table Read Protection Block 2
  7950                           ;	EBTR2 = 0x1, unprogrammed default
  7951                           ;	Table Read Protection Block 3
  7952                           ;	EBTR3 = 0x1, unprogrammed default
  7953                           ;	Table Read Protection Block 4
  7954                           ;	EBTR4 = 0x1, unprogrammed default
  7955                           ;	Table Read Protection Block 5
  7956                           ;	EBTR5 = 0x1, unprogrammed default
  7957                           ;	Table Read Protection Block 6
  7958                           ;	EBTR6 = 0x1, unprogrammed default
  7959                           ;	Table Read Protection Block 7
  7960                           ;	EBTR7 = 0x1, unprogrammed default
  7961   30000A                     	org	3145738
  7962   30000A  FF                 	db	255
  7963                           
  7964                           ;Config register CONFIG6H @ 0x30000B
  7965                           ;	unspecified, using default values
  7966                           ;	Boot Block Table Read Protection bit
  7967                           ;	EBTRB = 0x1, unprogrammed default
  7968   30000B                     	org	3145739
  7969   30000B  FF                 	db	255
  7970                           tosu	equ	0xFFF
  7971                           tosh	equ	0xFFE
  7972                           tosl	equ	0xFFD
  7973                           stkptr	equ	0xFFC
  7974                           pclatu	equ	0xFFB
  7975                           pclath	equ	0xFFA
  7976                           pcl	equ	0xFF9
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           indf0	equ	0xFEF
  7984                           postinc0	equ	0xFEE
  7985                           postdec0	equ	0xFED
  7986                           preinc0	equ	0xFEC
  7987                           plusw0	equ	0xFEB
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           indf1	equ	0xFE7
  7992                           postinc1	equ	0xFE6
  7993                           postdec1	equ	0xFE5
  7994                           preinc1	equ	0xFE4
  7995                           plusw1	equ	0xFE3
  7996                           fsr1h	equ	0xFE2
  7997                           fsr1l	equ	0xFE1
  7998                           bsr	equ	0xFE0
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           preinc2	equ	0xFDC
  8003                           plusw2	equ	0xFDB
  8004                           fsr2h	equ	0xFDA
  8005                           fsr2l	equ	0xFD9
  8006                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        126
    BSS         346
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     56      78
    BANK0           160     62     156
    BANK1           256     22     178
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1021DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1021DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnRight
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  122260
                                             54 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
            _set_wall_detection_mode
                               _stop
 ---------------------------------------------------------------------------------
 (1) _set_wall_detection_mode                              2     0      2     391
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43468
                                             42 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             19 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8109
                                             47 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             19 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             25 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             32 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5380
                                             34 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             15 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    1955
                                             24 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3062
                                             26 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1463
                                             13 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             17 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             14 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             14 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             13 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44407
                                             42 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    5873
                                             32 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    5873
                                             32 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             32 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             32 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6178
                                             32 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             26 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             13 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             19 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     427
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   2     0      2     427
                                             11 COMRAM     2     0      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     118
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _set_wall_detection_mode
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      B2       7       69.5%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     38      4E       1       83.0%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     264      60        0.0%
DATA                 0      0     264       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 12:22:34 2022

                 _color_read_Red 1D00               RobotMovement@color 002B  
                _color_read_Blue 1DF0                               l80 13D2  
                             l73 2196                               l82 1408  
                             l91 215C                               l83 13E8  
                             l76 13B6                               l94 1D4E  
                             l86 13FA                               l97 1E3E  
            ___wmul@multiplicand 0010                 _color_read_Clear 1DA0  
               ?_calibrate_black 0001                 _color_read_Green 1D50  
            RobotMovement@motorL 002D              RobotMovement@motorR 002F  
              ??_Interrupts_init 000E                              l100 1D9E  
                            l103 1DEE                              l121 1F82  
                            l122 1F84                              l123 1F98  
                            l300 0314                              l124 1F9A  
                            l125 1FAE                              l118 0EBA  
                            l150 098A                              l127 1FB0  
                            l312 05EC                              l304 0456  
                            l305 0498                              l153 1540  
                            l402 21BC                              l162 1CA4  
                            l322 0B5A                              l235 1026  
                            l315 21D2                              l156 183A  
                            l148 0982                              l228 1A08  
                            l238 1F24                              l270 1668  
                            l247 1180                              l263 1790  
                            l319 1F6C                              l511 18CE  
                            l335 0B90                              l327 0B40  
                            l256 12D0                              l273 1CFE  
                            l362 20A2                              l371 21E6  
                            l380 21B0                              l285 1A7C  
                            l365 20A4                              l374 21F0  
                            l518 18DE                              l279 1AF0  
                            l383 2036                              l368 20CA  
                            l481 217C                              l377 21DC  
                            l299 02D2                              l484 2118  
                            l495 1C30                              l496 1C40  
                            l982 1B64                              l975 1B5C  
                            _RGB 00EA                 ?_calibrate_white 0001  
                            wreg 000FE8                             l4001 132E  
                           l4011 1388                             l4003 1340  
                           l4021 13B4                             l4013 139A  
                           l4005 1352                             l4023 13C4  
                           l4015 13AC                             l4007 1364  
                           l4031 05EE                             l4103 1C72  
                           l4111 19B4                             l4201 0364  
                           l4017 13AE                             l4009 1376  
                           l4041 0656                             l4033 05FA  
                           l4121 19F0                             l4113 19D8  
                           l4211 043C                             l4203 03A8  
                           l4027 13E4                             l4019 13B2  
                           l4131 1CAE                             l4051 06B6  
                           l4043 0662                             l4035 0610  
                           l4123 19FA                             l4115 19E2  
                           l4107 197A                             l4221 04E8  
                           l4213 047E                             l4205 03DA  
                           l4301 215E                             l4029 13F6  
                           l4141 1CF2                             l4133 1CBE  
                           l4061 0778                             l4053 06CA  
                           l4045 0678                             l4037 0622  
                           l4125 19FC                             l4117 19E4  
                           l4109 198A                             l4231 0542  
                           l4223 04FC                             l4215 04B2  
                           l4207 040E                             l4151 0116  
                           l4143 00A6                             l4303 2166  
                           l4135 1CCE                             l4071 0890  
                           l4063 07E2                             l4055 0734  
                           l4047 068A                             l4039 062E  
                           l4127 1A06                             l4119 19EE  
                           l4311 0B96                             l4233 055C  
                           l4225 0516                             l4217 04B6  
                           l4209 0416                             l4161 015E  
                           l4153 011A                             l4145 00D6  
                           l4305 2178                             l3521 21DE  
                           l4137 1CDA                             l4129 1CA6  
                           l4073 08A0                             l4065 07F2  
                           l4057 0744                             l4049 0696  
                           l4321 0BAE                             l4313 0B9A  
                           l3611 0EBC                             l4243 057C  
                           l4251 05BA                             l4235 0560  
                           l4227 051A                             l4219 04D4  
                           l4171 018E                             l4163 0172  
                           l4155 012C                             l4147 00E8  
                           l4307 217A                             l3523 21E2  
                           l3531 21D8                             l3603 1F6E  
                           l4139 1CE6                             l4091 0968  
                           l4083 08E2                             l4075 08D0  
                           l4067 0812                             l4059 0764  
                           l4331 0BC6                             l4323 0BB0  
                           l4315 0B9E                             l3621 0F86  
                           l3613 0ED8                             l4253 05D0  
                           l4245 0590                             l4237 0574  
                           l4229 052E                             l4181 01E0  
                           l4173 01A8                             l4157 0140  
                           l4149 00FC                             l4261 1F68  
                           l3517 20A4                             l3541 2004  
                           l3533 21E8                             l3525 21A8  
                           l3605 1F7C                             l3701 0DFC  
                           l4093 096C                             l4085 0910  
                           l4077 08DA                             l4069 0826  
                           l4341 0BE2                             l4333 0BCE  
                           l4325 0BB6                             l4317 0BAA  
                           l4309 0B92                             l3551 20F4  
                           l3623 0FA2                             l3615 0F2C  
                           l4247 0594                             l4191 02B8  
                           l4183 0224                             l4175 01AC  
                           l4159 015A                             l3631 208A  
                           l3519 20B4                             l3543 200C  
                           l3535 21EC                             l3527 21AC  
                           l3607 1F92                             l3703 0E22  
                           l4087 0940                             l4255 21CA  
                           l4095 1C42                             l4271 09F6  
                           l4263 098C                             l4351 0C26  
                           l4343 0BEA                             l4335 0BD6  
                           l4327 0BBA                             l4319 0BAA  
                           l3561 1B0C                             l3553 2110  
                           l3625 0FE6                             l3617 0F40  
                           l3713 1EDC                             l3721 1028  
                           l3801 1202                             l4249 05B0  
                           l4193 02FA                             l4185 0256  
                           l4177 01B0                             l4169 017A  
                           l4257 1F26                             l3633 208C  
                           l3545 2032                             l3537 1FF8  
                           l3529 21D4                             l3609 1FA8  
                           l3641 1792                             l3705 0E3E  
                           l4089 0958                             l4097 1C54  
                           l4281 0A8E                             l4273 0A0E  
                           l4265 0990                             l4361 0C74  
                           l4353 0C32                             l4345 0BF2  
                           l4337 0BDA                             l4329 0BBE  
                           l3571 1B46                             l3563 1B14  
                           l3619 0F44                             l3715 1EF4  
                           l3811 1246                             l3803 121E  
                           l4195 032E                             l4187 028A  
                           l4179 01CC                             l4259 1F42  
                           l3635 208E                             l3627 207A  
                           l3547 2034                             l3539 1FFC  
                           l3651 17FA                             l3643 179E  
                           l3707 0E56                             l4099 1C66  
                           l4283 0ABE                             l4275 0A36  
                           l4291 0B40                             l4267 09B6  
                           l4371 0CD0                             l4363 0C78  
                           l4355 0C3E                             l4347 0BFA  
                           l4339 0BDE                             l3573 1B4E  
                           l3565 1B1C                             l3557 1AF2  
                           l3717 1F00                             l3741 1084  
                           l3733 1040                             l3821 128C  
                           l3813 1252                             l3901 15DE  
                           l4197 0332                             l4189 0292  
                           l3637 2090                             l3629 2084  
                           l3581 1D46                             l3661 1416  
                           l3653 1806                             l3645 17B4  
                           l3709 0E5E                             l4293 0B54  
                           l4285 0AEC                             l4277 0A4E  
                           l4269 09CE                             l4381 0D30  
                           l4373 0CE4                             l4365 0C8C  
                           l4357 0C54                             l4349 0C12  
                           l3575 1B50                             l3567 1B2A  
                           l3559 1AFA                             l3719 1F0C  
                           l3743 1090                             l3735 1060  
                           l3727 1038                             l3823 1294  
                           l3815 125E                             l3911 162E  
                           l3903 15FE                             l4199 0350  
                           l3591 1D50                             l3671 147A  
                           l3663 142C                             l3655 181C  
                           l3647 17C6                             l3639 2140  
                           l4295 0B74                             l4287 0B04  
                           l4279 0A76                             l4367 0C98  
                           l4359 0C68                             l3577 1B56  
                           l3569 1B30                             l3921 1AAA  
                           l3761 110C                             l3745 10A8  
                           l3737 106C                             l3841 16AA  
                           l3825 12B0                             l3817 126A  
                           l3809 1226                             l3913 1644  
                           l3905 160A                             l3585 1DF0  
                           l3593 1D96                             l3681 14DA  
                           l3673 1490                             l3665 143C  
                           l3657 182E                             l3649 17D2  
                           l4297 0B86                             l4289 0B20  
                           l4369 0CB4                             l4377 0D10  
                           l4299 21B2                             l3923 1AB6  
                           l3931 1A0A                             l3771 1160  
                           l3763 1118                             l3755 10D4  
                           l3747 10B0                             l3739 1078  
                           l3851 16FE                             l3843 16B6  
                           l3835 1672                             l3827 12B4  
                           l3819 1276                             l3915 164C  
                           l3907 1616                             l3587 1E36  
                           l3579 1D00                             l3683 14F0  
                           l3675 14A0                             l3667 1448  
                           l3659 140A                             l3691 0D6A  
                           l4379 0D24                             l3925 1AC2  
                           l3917 1A7E                             l3941 1A5A  
                           l3933 1A16                             l3773 1164  
                           l3765 1124                             l3757 10F4  
                           l3749 10CC                             l3861 1732  
                           l3845 16C2                             l3837 1692  
                           l3829 166A                             l3781 118A  
                           l3909 1622                             l3597 1DA0  
                           l3685 1508                             l3677 14C2  
                           l3669 146E                             l3693 0D88  
                           l3927 1ACE                             l3919 1A8A  
                           l3935 1A36                             l3943 1A66  
                           l3767 113C                             l3759 1100  
                           l3871 1774                             l3863 173E  
                           l3847 16DA                             l3839 169E  
                           l3791 11BE                             l3775 1182  
                           l3599 1DE6                             l3687 1524  
                           l3679 14CE                             l3951 1C06  
                           l3695 0DA2                             l3929 1ADA  
                           l3937 1A42                             l3769 1144  
                           l3865 174A                             l3857 1706  
                           l3849 16E2                             l3793 11CA  
                           l3881 156A                             l3873 1542  
                           l3961 186A                             l3953 1C10  
                           l3945 1BD8                             l3697 0DC8  
                           l3689 0D4C                             l3939 1A4E  
                           l3867 1756                             l3859 1726  
                           l3795 11D6                             l3787 1192  
                           l3891 15B2                             l3883 1576  
                           l3971 18BC                             l3963 1876  
                           l3955 183C                             l3947 1BE8  
                           l3699 0DE4                             l3869 176C  
                           l3797 11E2                             l3789 11B2  
                           l3893 15BA                             l3885 1582  
                           l3981 12D2                             l3973 18BE  
                           l3965 1884                             l3957 184C  
                           l3949 1BF6                             l3799 11FA  
                           l3895 15D6                             l3887 158E  
                           l3879 154A                             l3991 1304  
                           l3983 12D6                             l3975 18C8  
                           l3967 188E                             l3959 1862  
                           l3889 159A                             l3993 1306  
                           l3985 12E0                             l3969 18AC  
                           l3977 217E                             l3995 1308  
                           l3987 12F0                             l3979 2186  
                           l3997 130A                             l3989 12FA  
                           l3999 131C                             u3000 16FE  
                           u3001 16FA                             u3010 1790  
                           u3011 178C                             u3020 15D6  
                           u3100 18AC                             u3021 15D2  
                           u3101 18A8                             u3030 1668  
                           u3031 1664                             u3111 1314  
                           u3040 1AF0                             u3200 13C4  
                           u3041 1AEC                             u3201 13C0  
                           u3121 1326                             u3050 1A7C  
                           u3210 13D2                             u3051 1A78  
                           u3211 13CE                             u3131 1338  
                           u3220 13E0                             u3060 1BF6  
                           u3221 13DC                             u3141 134A  
                           u3061 1BF2                             u3301 0908  
                           u3230 13F6                             u3070 1C30  
                           u3231 13F2                             u3151 135C  
                           u3071 1C2C                             u3311 091A  
                           u3400 012C                             u3240 1408  
                           u3080 1862                             u3401 0128  
                           u3241 1404                             u3161 136E  
                           u3081 185E                             u3321 092C  
                           u3410 0172                             u3090 1884  
                           u3330 0958                             u3250 06B6  
                           _T2PR 000FBC                       _Black_rule 016C  
                           u3411 016E                             u4107 17A8  
                           u3171 1380                             u3091 1880  
                           u3331 0954                             u3251 06B2  
                           u3500 047E                             u3420 01CC  
                           u3340 0982                             u3260 0764  
                           u3501 047A                             u3421 01C8  
                           u4117 17DC                             u3181 1392  
                           u3341 097E                             u3261 0760  
                           u3510 04E8                             u3430 01E0  
                           u3270 0812                             u3350 1C54  
                           u4207 11EC                             u3511 04E4  
                           u3431 01DC                             u4127 1810  
                           u3191 13A4                             u3271 080E  
                           u3351 1C50                             u4047 0C04  
                           u3520 052E                             u3440 0256  
                           u2800 20CA                             u3360 1C66  
                           u3600 0A76                             u4217 1280  
                           u3521 052A                             u3441 0252  
                           u2801 20C6                             u4137 1420  
                           u3281 08AA                             u3361 1C62  
                           u4057 0AF6                             u3601 0A72  
                           u3530 0574                             u3450 02B8  
                           u2810 2020                             u3370 1C9E  
                           u3610 0ABE                             u4227 16CC  
                           u3531 0570                             u3451 02B4  
                           u2811 2018                             u4147 1452  
                           u3291 08BC                             u4067 0604  
                           u3371 1C98                             u3611 0ABA  
                           u2900 0FA2                             u3540 05B0  
                           u3460 02FA                             u3380 1CA0  
                           u3620 0B74                             u2901 0F9E  
                           u4237 1760                             u3541 05AC  
                           u3461 02F6                             u4157 1484  
                           u4077 0638                             u3621 0B70  
                           u2830 1B0C                             u3550 05D0  
                           u3470 0364                             u3390 00E8  
                           u2910 0D6A                             u3630 0B86  
                           u2831 1B08                             u4247 109A  
                           u3551 05CC                             u3471 0360  
                           u3391 00E4                             u4167 14B6  
                           u2911 0D66                             u4087 066C  
                           u3631 0B82                             u2840 1B2A  
                           u3480 03DA                             u3560 1F42  
                           u2920 0DC8                             u3640 0C54  
                           u2841 1B26                             u4257 112E  
                           u3481 03D6                             u3561 1F3E  
                           u4177 14E4                             u4097 12E6  
                           u2921 0DC4                             u3641 0C50  
                           u2850 1B46                             u3490 043C  
                           u2930 0E22                             u3570 09B6  
                           u3650 0C68                             u2851 1B42  
                           u4267 1F16                             u4187 15A4  
                           u3491 0438                             u2931 0E1E  
                           u3571 09B2                             u3651 0C64  
                           u2940 10CC                             u2828 2022  
                           u2860 1F7C                             u3580 09F6  
                           u3660 0CE4                             u2941 10C8  
                           u4197 1638                             u2861 1F78  
                           u3581 09F2                             u3661 0CE0  
                           u2950 1160                             u2790 20B4  
                           u2870 1F92                             u3590 0A36  
                           u3670 0D24                             u2951 115C  
                           u2791 20B0                             u2871 1F8E  
                           u3591 0A32                             u3671 0D20  
                           u2960 1180                             u2880 1FA8  
                           u2961 117C                             u2881 1FA4  
                           u2890 0ED8                             u2970 121E  
                           u2891 0ED4                             u2971 121A  
                           u2980 12B0                             u2981 12AC  
                           u2990 12D0                             u2991 12CC  
                           _main 0B92                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004F  
                           _stop 1EDC                             prodh 000FF4  
                           prodl 000FF3                             start 00A2  
         __end_of_color_read_Red 1D50                  __end_of_HighISR 00A2  
                   ___param_bank 000000       __end_ofi2_color_read_Clear 1E90  
             _get_color_code$464 00CA               _get_color_code$465 00CE  
             _get_color_code$466 00D2                            ?_main 0001  
                __end_of___lldiv 18E0                            ?_stop 0021  
            _add_seconds_to_list 1F26                      _Black_setup 0039  
                __end_of___lwdiv 1B66                            i2l103 1E8E  
                          i2l121 1FC6                            i2l122 1FC8  
                          i2l123 1FDC                            i2l124 1FDE  
                          i2l125 1FF2                            i2l127 1FF4  
                          i2l166 1BD6                            i2l416 009E  
                          i2l371 2204                            i2l380 21C8  
                          i2l365 20CC                            i2l374 220E  
                          i2l383 2078                            i2l288 2214  
                          i2l368 20F2                            i2l377 21FA  
                          _TMR0H 000FD4                            _TMR0L 000FD3  
            ___lmul@multiplicand 0012       __end_of_I2C_2_Master_Start 21E8  
     __end_of_I2C_2_Master_Write 21B2               _get_color_distance 0D4C  
                          _index 0047                            _state 00F8  
                          tablat 000FF5                            plusw0 000FEB  
                          plusw1 000FE3                            plusw2 000FDB  
            ?_get_color_distance 0014                            ttemp5 0050  
                          ttemp6 0053                            ttemp7 0057  
                          status 000FD8                            wtemp8 0050  
           ?_add_seconds_to_list 0001                       _Green_rule 0090  
        __end_of_color_read_Blue 1E40            _I2C_2_Master_RepStart 21E8  
                ?_color_read_Red 0012                  __initialization 18E0  
                   __end_of_main 0D4C                  i2_set_led_color 1FB2  
                   __end_of_stop 1F26                     _turnLeftLong 166A  
           i2set_led_color@color 0001             ??_get_color_distance 002C  
                         ??_main 0037                           ??_stop 0025  
                  __activetblptr 000000              _get_color_code$2460 00BE  
                   ?_setMotorPWM 001B                           _CCPR1H 000FAA  
                         _CCPR2H 000FA6                           _CCPR3H 000F25  
                         _CCPR4H 000F21                           _RE2PPS 000E74  
                         _RD5PPS 000E6F                           _RC7PPS 000E69  
                         _RD6PPS 000E70                           _RE4PPS 000E76  
                         i2l2401 20CC                           i2l3201 0024  
                         i2l2403 20DC                           i2l3211 006A  
                         i2l3203 0038                           i2l3029 2210  
                         i2l3221 009A                           i2l3213 007E  
                         i2l3205 003C                           i2l3215 008A  
                         i2l3207 0046                           i2l3217 0092  
                         i2l3209 005A                           i2l3219 0096  
                         i2l2453 21FC                           i2l2461 21F2  
                         i2l2471 203E                           i2l2455 2200  
                         i2l2463 21F6                           i2l2473 2046  
                         i2l2457 2206                           i2l2465 21C0  
                         i2l2475 204E                           i2l2459 220A  
                         i2l2467 21C4                           i2l2477 2074  
                         i2l2469 203A                           i2l3197 000A  
                         i2l2479 2076                           i2l3199 001A  
                         i2l2833 1E40                           i2l2841 1FC0  
                         i2l2835 1E86                           i2l2843 1FD6  
                         i2l2845 1FEC                           i2l2839 1FB2  
                         _RG6PPS 000E88                           i2l2981 1B7E  
                         i2l2991 1BCA                           i2l2983 1B90  
                         i2l2985 1B9C                           i2l2977 1B66  
                         i2l2987 1BAC                           i2l2989 1BBE  
                      ??_HighISR 000E         __end_of_color_click_init 140A  
          ??_add_seconds_to_list 000E                   RobotMovement@i 0033  
          __end_of_RobotMovement 05EE                 ??_get_color_code 0032  
                  ??_Timer0_init 000E                     _CCPTMRS0bits 000FAD  
       ?_set_wall_detection_mode 000E                           ___lmul 1BD8  
       get_color_distance@color1 0014         get_color_distance@color2 0020  
                         ___wmul 20F4                           _clear1 004D  
                         _clear2 004B                        ??___lldiv 0022  
                      ??___lwdiv 0018                      _Color_rules 0100  
                         clear_0 1946                           clear_1 1952  
                         clear_2 195E                           clear_3 196A  
                         isa$std 000001                 __end_of_moveBack 1A7E  
          calibrate_black@clear1 001D            calibrate_black@clear2 001F  
                   __pdataCOMRAM 0039                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                   ?_return_back 002B                   _Lightblue_rule 0184  
                     _White_rule 0178                           stop@mL 0021  
                         stop@mR 0023                ??_initDCmotorsPWM 0010  
               __end_of_turnLeft 1182              _wall_detection_mode 00FA  
          __end_of_set_led_color 1FB2                       __accesstop 0060  
        __end_of__initialization 1970         __end_of_color_read_Clear 1DF0  
       __end_of_color_read_Green 1DA0           ?_I2C_2_Master_RepStart 0001  
        __end_ofi2_set_led_color 1FF6                    ___rparam_used 000001  
               ?_color_read_Blue 0012                  _Interrupts_init 21B2  
                 __pcstackCOMRAM 0001                     __pidataBANK0 1E90  
                   __pidataBANK1 211A           i2I2C_2_Master_Read@ack 0003  
            __end_of_Timer0_init 217E           i2I2C_2_Master_Read@tmp 0004  
                     __pbssBANK0 00EA                       __pbssBANK1 0100  
                     __pbssBANK2 0200          i2_I2C_2_Master_RepStart 2206  
                  _turnRightLong 1542                _color_writetoaddr 213E  
                   _T2CLKCONbits 000FBF               ?_color_writetoaddr 0010  
                        ?___lmul 000E                          ?___wmul 000E  
                 main@color_code 019C                   ___lmul@product 0016  
                get_color_code@i 00DC              ??_color_writetoaddr 0011  
          i2color_read_Clear@tmp 000A                return_back@motorL 002B  
              return_back@motorR 002D               i2_color_read_Clear 1E40  
        get_color_code@min_index 00D8                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5          get_color_code@min_value 00D6  
                    _Orange_rule 0190          __end_of_Interrupts_init 21BE  
         color_writetoaddr@value 0010                 ??_color_read_Red 0014  
            ?i2_color_read_Clear 0005       __end_of_get_wall_detection 1CA6  
                        _HighISR 0008       __end_of_set_wall_detection 1BD8  
      __end_of_color_writetoaddr 215E                 ?i2_set_led_color 0001  
                 ?_turnRightLong 0021               _I2C_2_Master_Start 21DE  
            i2_I2C_2_Master_Idle 20CC               _I2C_2_Master_Write 21A6  
                      ?_moveBack 0021              i2_I2C_2_Master_Read 2038  
                        __Hparam 0000              i2_I2C_2_Master_Stop 21F2  
                        __Lparam 0000                color_read_Red@tmp 0017  
                    _Timer0_init 215E                __end_of_get_state 21D4  
                        ___lldiv 183C              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1AF2              ?_I2C_2_Master_Write 0001  
                        __pcinit 18E0             ??i2_color_read_Clear 0007  
                        __ramtop 0E00                        ?_turnLeft 0021  
                        __ptext0 0B92                          __ptext1 217E  
                        __ptext2 098C                          __ptext3 197A  
                        __ptext4 1C42                          __ptext5 21CA  
                        __ptext6 05EE                          __ptext7 0D4C  
                        __ptext8 1BD8                          __ptext9 183C  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 000FBD  
           ?i2_I2C_2_Master_Read 0001             ?i2_I2C_2_Master_Stop 0001  
                        _seconds 0049                        _T2HLTbits 000FBE  
           ??_I2C_2_Master_Start 000F             ??_I2C_2_Master_Write 000F  
           end_of_initialization 1970        ??i2_I2C_2_Master_RepStart 0002  
              ?_color_click_init 0001                       ??_moveBack 0027  
                ___lldiv@divisor 001E               ??_color_click_init 0023  
                ___lldiv@counter 0026                          postdec1 000FE5  
                        postdec2 000FDD                          postinc0 000FEE  
                        postinc2 000FDE                      _White_setup 0060  
                _initDCmotorsPWM 197A                       ??_turnLeft 0025  
                      _PORTFbits 000F8E               setMotorPWM@negDuty 0020  
          ??i2_I2C_2_Master_Idle 0001            ??i2_I2C_2_Master_Read 0002  
              __end_of_turnRight 12D2            ??i2_I2C_2_Master_Stop 0002  
                    _Yellow_rule 0078                        _TRISAbits 000F81  
             setMotorPWM@posDuty 001F                        _TRISCbits 000F83  
                      _TRISDbits 000F84                        _TRISEbits 000F85  
                      _TRISFbits 000F86                        _TRISGbits 000F87  
           _calibrate_black$2461 0021      __end_of_add_seconds_to_list 1F6E  
               fullSpeedAhead@mL 0021                 fullSpeedAhead@mR 0023  
       color_writetoaddr@address 0011       get_color_distance@B_offset 00BC  
        ??_I2C_2_Master_RepStart 000F                 ?_Interrupts_init 0001  
                ??_turnRightLong 0025                      _CCP1CONbits 000FAB  
     get_color_distance@G_offset 00BA                _increment_seconds 2210  
              ?_color_read_Clear 0012                      _CCP2CONbits 000FA7  
              ??_calibrate_black 001B                ?_color_read_Green 0012  
                    _CCP3CONbits 000F26                      _CCP4CONbits 000F22  
                     main@motorL 01A0                       main@motorR 01A9  
              ??_calibrate_white 0019               ?_increment_seconds 0001  
             ??_color_read_Clear 0014               ??_color_read_Green 0014  
                 _fullSpeedAhead 1CA6       get_color_distance@R_offset 00B8  
                      _Blue_rule 0084              ??_increment_seconds 0001  
                 __end_of___lmul 1C42                   __end_of___wmul 211A  
                  __pidataCOMRAM 2198              color_read_Clear@tmp 0017  
            start_initialization 18E0              _TimedfullSpeedAhead 1A7E  
               _incr_sec_counter 00F6        __end_of_increment_seconds 2216  
                      _Pink_rule 006C              color_read_Green@tmp 0017  
        __end_of_initDCmotorsPWM 1A0A             ?_TimedfullSpeedAhead 0021  
         __end_of_fullSpeedAhead 1D00                         ??___lmul 0016  
                       ??___wmul 0012                      __pdataBANK0 0060  
                    __pdataBANK1 0178    i2I2C_2_Master_Write@data_byte 0002  
   __end_ofi2_I2C_2_Master_Start 2206     __end_ofi2_I2C_2_Master_Write 21CA  
         _get_color_distance$422 00AC           _get_color_distance$424 00B0  
         _get_color_distance$426 00B4                      __pbssCOMRAM 0047  
                  __pcstackBANK0 00AC                    __pcstackBANK1 019C  
            get_color_code@value 00DA                         ?_HighISR 0001  
    set_wall_detection_mode@mode 000E                    _RobotMovement 00A6  
               ___lwdiv@dividend 0014            ??_TimedfullSpeedAhead 0027  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 0021  
                     moveBack@mL 0021                       moveBack@mR 0023  
                      __pintcode 0008                         ?___lldiv 001A  
                       ?___lwdiv 0014               _get_wall_detection 1C42  
             _set_wall_detection 1B66                    ?_turnLeftLong 0021  
                   moveBack@time 0025                        _get_state 21CA  
           I2C_2_Master_Read@ack 0010             I2C_2_Master_Read@tmp 0011  
        _set_wall_detection_mode 217E            TimedfullSpeedAhead@mL 0021  
          TimedfullSpeedAhead@mR 0023              ?_get_wall_detection 0014  
            ?_set_wall_detection 000C      get_color_code@NormalizedRGB 00DE  
              _I2C_2_Master_Idle 20A4                _I2C_2_Master_Init 207A  
              _I2C_2_Master_Read 1FF6                _I2C_2_Master_Stop 21D4  
             ?_I2C_2_Master_Idle 0001               ?_I2C_2_Master_Init 0001  
             ?_I2C_2_Master_Read 0001                    ??_setMotorPWM 001D  
             ?_I2C_2_Master_Stop 0001                 ___lwdiv@quotient 0019  
       initDCmotorsPWM@PWMperiod 000E                  turnRightLong@mL 0021  
                turnRightLong@mR 0023                   turnLeftLong@mL 0021  
                 turnLeftLong@mR 0023              ??_I2C_2_Master_Idle 000E  
            ??_I2C_2_Master_Init 000E              ??_I2C_2_Master_Read 000F  
                 ___wmul@product 0012                         _LATAbits 000F79  
                  _set_led_color 1F6E              ??_I2C_2_Master_Stop 000F  
                       _LATCbits 000F7B                         _LATEbits 000F7D  
                       _LATFbits 000F7E                         _LATGbits 000F7F  
           ??_get_wall_detection 0016                         _PIE0bits 000E29  
                 ?_RobotMovement 002B                         _PIE2bits 000E2B  
           ??_set_wall_detection 000E                      turnRight@mL 0021  
                       i2u207_40 1B7A                         i2u207_41 1B76  
                    turnRight@mR 0023                         i2u208_40 1B90  
                       i2u208_41 1B8C                         i2u209_40 1BBE  
                       i2u209_41 1BBA                         i2u154_40 2062  
                       i2u154_41 205A                         i2u147_40 20DC  
                       i2u235_40 001A                         i2u147_41 20D8  
                       i2u235_41 0016                         i2u148_40 20F2  
                       i2u155_48 2064                         i2u236_40 0038  
                       i2u148_41 20EE                         i2u236_41 0034  
                       i2u237_40 005A                         i2u237_41 0056  
                       i2u238_40 007E                         i2u238_41 007A  
                       _PIR0bits 000E33                         i2u176_40 1FC0  
                       i2u176_41 1FBC                         i2u177_40 1FD6  
                       i2u177_41 1FD2                         i2u178_40 1FEC  
                       i2u178_41 1FE8                 ?_initDCmotorsPWM 000E  
                      _wall_coef 00AA                        _wait_time 00A8  
                       _SSP2CON2 000EDA                   ??_turnLeftLong 0025  
                       _SSP2STAT 000ED8               set_led_color@color 000E  
                     ?_get_state 000E        __end_of_I2C_2_Master_Idle 20CC  
      __end_of_I2C_2_Master_Init 20A4        __end_of_I2C_2_Master_Read 2038  
              ___wmul@multiplier 000E        __end_of_I2C_2_Master_Stop 21DE  
                   setMotorPWM@m 001B      I2C_2_Master_Write@data_byte 000F  
                  _movement_list 0200                        main@state 019E  
              ??_color_read_Blue 0014                    ??_return_back 002F  
                _calibrate_black 140A          TimedfullSpeedAhead@time 0025  
                      _turnRight 1182                  _calibrate_white 1792  
              ___lmul@multiplier 000E                        copy_data0 18F4  
                      copy_data1 1914                        copy_data2 1934  
                 ?_set_led_color 000E    __end_of_I2C_2_Master_RepStart 21F2  
             color_read_Blue@tmp 0017              __end_of_setMotorPWM 1028  
                       _Red_rule 009C             i2_I2C_2_Master_Start 21FC  
           i2_I2C_2_Master_Write 21BE                         __Hrparam 0000  
                       __Lrparam 0000      __end_ofi2_I2C_2_Master_Idle 20F4  
    __end_ofi2_I2C_2_Master_Read 207A       __end_of_get_color_distance 0EBC  
    __end_ofi2_I2C_2_Master_Stop 21FC        ??_set_wall_detection_mode 0010  
                 _get_color_code 05EE                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6         ?i2_I2C_2_Master_RepStart 0001  
                ___lwdiv@divisor 0016                  ___lwdiv@counter 0018  
                     ?_turnRight 0021                         __ptext10 1CA6  
                       __ptext11 12D2                         __ptext20 21A6  
                       __ptext12 213E                         __ptext21 21D4  
                       __ptext13 1792                         __ptext30 1542  
                       __ptext22 21DE                         __ptext14 140A  
                       __ptext31 1182                         __ptext23 21E8  
                       __ptext15 1F6E                         __ptext40 21B2  
                       __ptext32 166A                         __ptext24 1FF6  
                       __ptext16 1D00                         __ptext33 1028  
                       __ptext25 20A4                         __ptext17 1D50  
                       __ptext50 20CC                         __ptext42 1B66  
                       __ptext34 1EDC                         __ptext26 207A  
                       __ptext18 1DA0                         __ptext51 2210  
                       __ptext43 1FB2                         __ptext35 1A0A  
                       __ptext27 1F26                         __ptext19 1DF0  
                       __ptext44 1E40                         __ptext36 1A7E  
                       __ptext28 215E                         __ptext45 21BE  
                       __ptext37 0EBC                         __ptext29 00A6  
                       __ptext46 21F2                         __ptext38 20F4  
                       __ptext47 21FC                         __ptext39 1AF2  
                       __ptext48 2206                         __ptext49 2038  
                   _SSP2CON1bits 000ED9                     _SSP2CON2bits 000EDA  
                ??_RobotMovement 0031              __end_of_return_back 0B92  
                     turnLeft@mL 0021                       turnLeft@mR 0023  
          ?i2_I2C_2_Master_Start 0001                   turnRightLong@i 0027  
          ?i2_I2C_2_Master_Write 0001                    turnLeftLong@i 0027  
          __end_of_turnRightLong 166A                         _moveBack 1A0A  
                     turnRight@i 0029                       turnRight@k 0027  
                       isa$xinst 000000                         int$flags 004F  
         __end_of_get_color_code 098C          __end_of_calibrate_black 1542  
                       _turnLeft 1028                      ??_get_state 0010  
        __end_of_calibrate_white 183C                       _INTCONbits 000FF2  
              ??i2_set_led_color 0003                      _setMotorPWM 0EBC  
                ??_set_led_color 0010             __end_of_turnLeftLong 1792  
                       intlevel2 0000  __end_of_set_wall_detection_mode 2198  
               ___lldiv@dividend 001A                 ??_fullSpeedAhead 0025  
                      turnLeft@i 0029                        turnLeft@k 0027  
                ?_get_color_code 0030                 _color_click_init 12D2  
__end_ofi2_I2C_2_Master_RepStart 2210           _wall_detection_counter 0045  
                     _SSP2DATPPS 000E1D                 ___lldiv@quotient 0022  
                     _SSP2CLKPPS 000E1C           set_wall_detection@mode 000C  
                    _return_back 098C                      ??_turnRight 0025  
    __end_of_TimedfullSpeedAhead 1AF2           ??i2_I2C_2_Master_Start 0002  
         ??i2_I2C_2_Master_Write 0002              RobotMovement@i_1271 0035  
