

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 14 12:11:10 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    75   000000                     
    76                           ; Version 2.40
    77                           ; Generated 04/07/2022 GMT
    78                           ; 
    79                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F67K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111   000000                     
   112 ;; Function _get_led_color is unused but had its address taken
   113   000000                     
   114                           	psect	idataCOMRAM
   115   0021CA                     __pidataCOMRAM:
   116                           	callstack 0
   117                           
   118                           ;initializer for _wall_detection_counter
   119   0021CA  0014               	dw	20
   120                           
   121                           ;initializer for _wait_time
   122   0021CC  00DC               	dw	220
   123                           
   124                           ;initializer for _wall_coef
   125   0021CE  000F               	dw	15
   126                           
   127                           	psect	idataBANK0
   128   001EB4                     __pidataBANK0:
   129                           	callstack 0
   130                           
   131                           ;initializer for _Black_setup
   132   001EB4  0404               	dw	1028
   133   001EB6  0000               	dw	0
   134   001EB8  024B               	dw	587
   135   001EBA  0000               	dw	0
   136   001EBC  00A1               	dw	161
   137   001EBE  0000               	dw	0
   138                           
   139                           ;initializer for _White_setup
   140   001EC0  28FC               	dw	10492
   141   001EC2  0000               	dw	0
   142   001EC4  1B55               	dw	6997
   143   001EC6  0000               	dw	0
   144   001EC8  0770               	dw	1904
   145   001ECA  0000               	dw	0
   146                           
   147                           ;initializer for _Yellow_rule
   148   001ECC  005D               	dw	93
   149   001ECE  0000               	dw	0
   150   001ED0  004C               	dw	76
   151   001ED2  0000               	dw	0
   152   001ED4  0014               	dw	20
   153   001ED6  0000               	dw	0
   154                           
   155                           ;initializer for _Blue_rule
   156   001ED8  0003               	dw	3
   157   001EDA  0000               	dw	0
   158   001EDC  0009               	dw	9
   159   001EDE  0000               	dw	0
   160   001EE0  0024               	dw	36
   161   001EE2  0000               	dw	0
   162                           
   163                           ;initializer for _Green_rule
   164   001EE4  0019               	dw	25
   165   001EE6  0000               	dw	0
   166   001EE8  0036               	dw	54
   167   001EEA  0000               	dw	0
   168   001EEC  0008               	dw	8
   169   001EEE  0000               	dw	0
   170                           
   171                           ;initializer for _Red_rule
   172   001EF0  0048               	dw	72
   173   001EF2  0000               	dw	0
   174   001EF4  0002               	dw	2
   175   001EF6  0000               	dw	0
   176   001EF8  0002               	dw	2
   177   001EFA  0000               	dw	0
   178                           
   179                           	psect	idataBANK1
   180   002050                     __pidataBANK1:
   181                           	callstack 0
   182                           
   183                           ;initializer for _White_rule
   184   002050  0064               	dw	100
   185   002052  0000               	dw	0
   186   002054  0064               	dw	100
   187   002056  0000               	dw	0
   188   002058  0064               	dw	100
   189   00205A  0000               	dw	0
   190                           
   191                           ;initializer for _Lightblue_rule
   192   00205C  0026               	dw	38
   193   00205E  0000               	dw	0
   194   002060  0048               	dw	72
   195   002062  0000               	dw	0
   196   002064  0054               	dw	84
   197   002066  0000               	dw	0
   198                           
   199                           ;initializer for _Orange_rule
   200   002068  005C               	dw	92
   201   00206A  0000               	dw	0
   202   00206C  0027               	dw	39
   203   00206E  0000               	dw	0
   204   002070  001C               	dw	28
   205   002072  0000               	dw	0
   206                           
   207                           ;initializer for _Pink_rule
   208   002074  004D               	dw	77
   209   002076  0000               	dw	0
   210   002078  003C               	dw	60
   211   00207A  0000               	dw	0
   212   00207C  0040               	dw	64
   213   00207E  0000               	dw	0
   214   000000                     _T0CON0bits	set	4053
   215   000000                     _T0CON1bits	set	4054
   216   000000                     _TRISDbits	set	3972
   217   000000                     _SSP2CON2bits	set	3802
   218   000000                     _SSP2CLKPPS	set	3612
   219   000000                     _SSP2DATPPS	set	3613
   220   000000                     _RC7PPS	set	3689
   221   000000                     _RE2PPS	set	3700
   222   000000                     _ANSELFbits	set	3764
   223   000000                     _TRISAbits	set	3969
   224   000000                     _TRISFbits	set	3974
   225   000000                     _PORTFbits	set	3982
   226   000000                     _TRISGbits	set	3975
   227   000000                     _TRISCbits	set	3971
   228   000000                     _TRISEbits	set	3973
   229   000000                     _SSP2BUF	set	3797
   230   000000                     _SSP2ADD	set	3798
   231   000000                     _SSP2CON1bits	set	3801
   232   000000                     _LATAbits	set	3961
   233   000000                     _LATGbits	set	3967
   234   000000                     _CCPR4H	set	3873
   235   000000                     _CCPR3H	set	3877
   236   000000                     _T2PR	set	4028
   237   000000                     _T2CONbits	set	4029
   238   000000                     _CCPR2H	set	4006
   239   000000                     _CCPR1H	set	4010
   240   000000                     _LATCbits	set	3963
   241   000000                     _LATEbits	set	3965
   242   000000                     _LATFbits	set	3966
   243   000000                     _RE4PPS	set	3702
   244   000000                     _RG6PPS	set	3720
   245   000000                     _RD5PPS	set	3695
   246   000000                     _ANSELDbits	set	3751
   247   000000                     _TMR0L	set	4051
   248   000000                     _TMR0H	set	4052
   249   000000                     _INTCONbits	set	4082
   250   000000                     _T2CLKCONbits	set	4031
   251   000000                     _T2HLTbits	set	4030
   252   000000                     _CCP1CONbits	set	4011
   253   000000                     _CCPTMRS0bits	set	4013
   254   000000                     _CCP2CONbits	set	4007
   255   000000                     _CCP3CONbits	set	3878
   256   000000                     _CCP4CONbits	set	3874
   257   000000                     _SSP2CON2	set	3802
   258   000000                     _SSP2STAT	set	3800
   259   000000                     _PIE0bits	set	3625
   260   000000                     _RD6PPS	set	3696
   261   000000                     _PIE2bits	set	3627
   262   000000                     _PIR0bits	set	3635
   263                           
   264                           ; #config settings
   265                           
   266                           	psect	cinit
   267   0018CE                     __pcinit:
   268                           	callstack 0
   269   0018CE                     start_initialization:
   270                           	callstack 0
   271   0018CE                     __initialization:
   272                           	callstack 0
   273                           
   274                           ; Initialize objects allocated to BANK1 (48 bytes)
   275                           ; load TBLPTR registers with __pidataBANK1
   276   0018CE  0E50               	movlw	low __pidataBANK1
   277   0018D0  6EF6               	movwf	tblptrl,c
   278   0018D2  0E20               	movlw	high __pidataBANK1
   279   0018D4  6EF7               	movwf	tblptrh,c
   280   0018D6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   281   0018D8  6EF8               	movwf	tblptru,c
   282   0018DA  EE01  F078         	lfsr	0,__pdataBANK1
   283   0018DE  EE10 F030          	lfsr	1,48
   284   0018E2                     copy_data0:
   285   0018E2  0009               	tblrd		*+
   286   0018E4  CFF5 FFEE          	movff	tablat,postinc0
   287   0018E8  50E5               	movf	postdec1,w,c
   288   0018EA  50E1               	movf	fsr1l,w,c
   289   0018EC  E1FA               	bnz	copy_data0
   290                           
   291                           ; Initialize objects allocated to BANK0 (72 bytes)
   292                           ; load TBLPTR registers with __pidataBANK0
   293   0018EE  0EB4               	movlw	low __pidataBANK0
   294   0018F0  6EF6               	movwf	tblptrl,c
   295   0018F2  0E1E               	movlw	high __pidataBANK0
   296   0018F4  6EF7               	movwf	tblptrh,c
   297   0018F6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   298   0018F8  6EF8               	movwf	tblptru,c
   299   0018FA  EE00  F060         	lfsr	0,__pdataBANK0
   300   0018FE  EE10 F048          	lfsr	1,72
   301   001902                     copy_data1:
   302   001902  0009               	tblrd		*+
   303   001904  CFF5 FFEE          	movff	tablat,postinc0
   304   001908  50E5               	movf	postdec1,w,c
   305   00190A  50E1               	movf	fsr1l,w,c
   306   00190C  E1FA               	bnz	copy_data1
   307                           
   308                           ; Initialize objects allocated to COMRAM (6 bytes)
   309                           ; load TBLPTR registers with __pidataCOMRAM
   310   00190E  0ECA               	movlw	low __pidataCOMRAM
   311   001910  6EF6               	movwf	tblptrl,c
   312   001912  0E21               	movlw	high __pidataCOMRAM
   313   001914  6EF7               	movwf	tblptrh,c
   314   001916  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   315   001918  6EF8               	movwf	tblptru,c
   316   00191A  EE00  F048         	lfsr	0,__pdataCOMRAM
   317   00191E  EE10 F006          	lfsr	1,6
   318   001922                     copy_data2:
   319   001922  0009               	tblrd		*+
   320   001924  CFF5 FFEE          	movff	tablat,postinc0
   321   001928  50E5               	movf	postdec1,w,c
   322   00192A  50E1               	movf	fsr1l,w,c
   323   00192C  E1FA               	bnz	copy_data2
   324                           
   325                           ; Clear objects allocated to BANK2 (200 bytes)
   326   00192E  EE02  F000         	lfsr	0,__pbssBANK2
   327   001932  0EC8               	movlw	200
   328   001934                     clear_0:
   329   001934  6AEE               	clrf	postinc0,c
   330   001936  06E8               	decf	wreg,f,c
   331   001938  E1FD               	bnz	clear_0
   332                           
   333                           ; Clear objects allocated to BANK1 (120 bytes)
   334   00193A  EE01  F000         	lfsr	0,__pbssBANK1
   335   00193E  0E78               	movlw	120
   336   001940                     clear_1:
   337   001940  6AEE               	clrf	postinc0,c
   338   001942  06E8               	decf	wreg,f,c
   339   001944  E1FD               	bnz	clear_1
   340                           
   341                           ; Clear objects allocated to BANK0 (12 bytes)
   342   001946  EE00  F0E6         	lfsr	0,__pbssBANK0
   343   00194A  0E0C               	movlw	12
   344   00194C                     clear_2:
   345   00194C  6AEE               	clrf	postinc0,c
   346   00194E  06E8               	decf	wreg,f,c
   347   001950  E1FD               	bnz	clear_2
   348                           
   349                           ; Clear objects allocated to COMRAM (12 bytes)
   350   001952  EE00  F03C         	lfsr	0,__pbssCOMRAM
   351   001956  0E0C               	movlw	12
   352   001958                     clear_3:
   353   001958  6AEE               	clrf	postinc0,c
   354   00195A  06E8               	decf	wreg,f,c
   355   00195C  E1FD               	bnz	clear_3
   356   00195E                     end_of_initialization:
   357                           	callstack 0
   358   00195E                     __end_of__initialization:
   359                           	callstack 0
   360   00195E  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   361   001960  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   362   001962  0E00               	movlw	low (__Lmediumconst shr (0+16))
   363   001964  6EF8               	movwf	tblptru,c
   364   001966  0100               	movlb	0
   365   001968  EFCD  F005         	goto	_main	;jump to C main() function
   366                           
   367                           	psect	bssCOMRAM
   368   00003C                     __pbssCOMRAM:
   369                           	callstack 0
   370   00003C                     _incr_sec_counter:
   371                           	callstack 0
   372   00003C                     	ds	2
   373   00003E                     _state:
   374                           	callstack 0
   375   00003E                     	ds	2
   376   000040                     _index:
   377                           	callstack 0
   378   000040                     	ds	2
   379   000042                     _seconds:
   380                           	callstack 0
   381   000042                     	ds	2
   382   000044                     _clear2:
   383                           	callstack 0
   384   000044                     	ds	2
   385   000046                     _clear1:
   386                           	callstack 0
   387   000046                     	ds	2
   388                           
   389                           	psect	dataCOMRAM
   390   000048                     __pdataCOMRAM:
   391                           	callstack 0
   392   000048                     _wall_detection_counter:
   393                           	callstack 0
   394   000048                     	ds	2
   395   00004A                     _wait_time:
   396                           	callstack 0
   397   00004A                     	ds	2
   398   00004C                     _wall_coef:
   399                           	callstack 0
   400   00004C                     	ds	2
   401                           
   402                           	psect	bssBANK0
   403   0000E6                     __pbssBANK0:
   404                           	callstack 0
   405   0000E6                     _RGB:
   406                           	callstack 0
   407   0000E6                     	ds	12
   408                           
   409                           	psect	dataBANK0
   410   000060                     __pdataBANK0:
   411                           	callstack 0
   412   000060                     _Black_setup:
   413                           	callstack 0
   414   000060                     	ds	12
   415   00006C                     _White_setup:
   416                           	callstack 0
   417   00006C                     	ds	12
   418   000078                     _Yellow_rule:
   419                           	callstack 0
   420   000078                     	ds	12
   421   000084                     _Blue_rule:
   422                           	callstack 0
   423   000084                     	ds	12
   424   000090                     _Green_rule:
   425                           	callstack 0
   426   000090                     	ds	12
   427   00009C                     _Red_rule:
   428                           	callstack 0
   429   00009C                     	ds	12
   430                           
   431                           	psect	bssBANK1
   432   000100                     __pbssBANK1:
   433                           	callstack 0
   434   000100                     _Color_rules:
   435                           	callstack 0
   436   000100                     	ds	108
   437   00016C                     _Black_rule:
   438                           	callstack 0
   439   00016C                     	ds	12
   440                           
   441                           	psect	dataBANK1
   442   000178                     __pdataBANK1:
   443                           	callstack 0
   444   000178                     _White_rule:
   445                           	callstack 0
   446   000178                     	ds	12
   447   000184                     _Lightblue_rule:
   448                           	callstack 0
   449   000184                     	ds	12
   450   000190                     _Orange_rule:
   451                           	callstack 0
   452   000190                     	ds	12
   453   00019C                     _Pink_rule:
   454                           	callstack 0
   455   00019C                     	ds	12
   456                           
   457                           	psect	bssBANK2
   458   000200                     __pbssBANK2:
   459                           	callstack 0
   460   000200                     _movement_list:
   461                           	callstack 0
   462   000200                     	ds	200
   463                           
   464                           	psect	cstackBANK1
   465   0001A8                     __pcstackBANK1:
   466                           	callstack 0
   467   0001A8                     main@color_code:
   468                           	callstack 0
   469                           
   470                           ; 2 bytes @ 0x0
   471   0001A8                     	ds	2
   472   0001AA                     main@state:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x2
   476   0001AA                     	ds	2
   477   0001AC                     main@motorL:
   478                           	callstack 0
   479                           
   480                           ; 9 bytes @ 0x4
   481   0001AC                     	ds	9
   482   0001B5                     main@motorR:
   483                           	callstack 0
   484                           
   485                           ; 9 bytes @ 0xD
   486   0001B5                     	ds	9
   487                           
   488                           	psect	cstackBANK0
   489   0000A8                     __pcstackBANK0:
   490                           	callstack 0
   491   0000A8                     _get_color_distance$421:
   492                           	callstack 0
   493                           
   494                           ; 4 bytes @ 0x0
   495   0000A8                     	ds	4
   496   0000AC                     _get_color_distance$423:
   497                           	callstack 0
   498                           
   499                           ; 4 bytes @ 0x4
   500   0000AC                     	ds	4
   501   0000B0                     _get_color_distance$425:
   502                           	callstack 0
   503                           
   504                           ; 4 bytes @ 0x8
   505   0000B0                     	ds	4
   506   0000B4                     get_color_distance@R_offset:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0xC
   510   0000B4                     	ds	2
   511   0000B6                     get_color_distance@G_offset:
   512                           	callstack 0
   513                           
   514                           ; 2 bytes @ 0xE
   515   0000B6                     	ds	2
   516   0000B8                     get_color_distance@B_offset:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x10
   520   0000B8                     	ds	2
   521   0000BA                     _get_color_code$2463:
   522                           	callstack 0
   523                           
   524                           ; 12 bytes @ 0x12
   525   0000BA                     	ds	12
   526   0000C6                     _get_color_code$463:
   527                           	callstack 0
   528                           
   529                           ; 4 bytes @ 0x1E
   530   0000C6                     	ds	4
   531   0000CA                     _get_color_code$464:
   532                           	callstack 0
   533                           
   534                           ; 4 bytes @ 0x22
   535   0000CA                     	ds	4
   536   0000CE                     _get_color_code$465:
   537                           	callstack 0
   538                           
   539                           ; 4 bytes @ 0x26
   540   0000CE                     	ds	4
   541   0000D2                     get_color_code@min_value:
   542                           	callstack 0
   543                           
   544                           ; 2 bytes @ 0x2A
   545   0000D2                     	ds	2
   546   0000D4                     get_color_code@min_index:
   547                           	callstack 0
   548                           
   549                           ; 2 bytes @ 0x2C
   550   0000D4                     	ds	2
   551   0000D6                     get_color_code@value:
   552                           	callstack 0
   553                           
   554                           ; 2 bytes @ 0x2E
   555   0000D6                     	ds	2
   556   0000D8                     get_color_code@i:
   557                           	callstack 0
   558                           
   559                           ; 2 bytes @ 0x30
   560   0000D8                     	ds	2
   561   0000DA                     get_color_code@NormalizedRGB:
   562                           	callstack 0
   563                           
   564                           ; 12 bytes @ 0x32
   565   0000DA                     	ds	12
   566                           
   567                           	psect	cstackCOMRAM
   568   000001                     __pcstackCOMRAM:
   569                           	callstack 0
   570   000001                     ??i2_I2C_2_Master_Idle:
   571   000001                     i2set_led_color@color:
   572                           	callstack 0
   573                           
   574                           ; 2 bytes @ 0x0
   575   000001                     	ds	1
   576   000002                     ??i2_I2C_2_Master_Read:
   577   000002                     i2I2C_2_Master_Write@data_byte:
   578                           	callstack 0
   579                           
   580                           ; 1 bytes @ 0x1
   581   000002                     	ds	1
   582   000003                     i2I2C_2_Master_Read@ack:
   583                           	callstack 0
   584                           
   585                           ; 1 bytes @ 0x2
   586   000003                     	ds	1
   587   000004                     i2I2C_2_Master_Read@tmp:
   588                           	callstack 0
   589                           
   590                           ; 1 bytes @ 0x3
   591   000004                     	ds	1
   592   000005                     ?i2_color_read_Clear:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x4
   596   000005                     	ds	2
   597   000007                     ??i2_color_read_Clear:
   598                           
   599                           ; 1 bytes @ 0x6
   600   000007                     	ds	3
   601   00000A                     i2color_read_Clear@tmp:
   602                           	callstack 0
   603                           
   604                           ; 2 bytes @ 0x9
   605   00000A                     	ds	2
   606   00000C                     set_wall_detection@mode:
   607                           	callstack 0
   608                           
   609                           ; 2 bytes @ 0xB
   610   00000C                     	ds	2
   611   00000E                     ??_set_wall_detection:
   612                           
   613                           ; 1 bytes @ 0xD
   614   00000E                     	ds	3
   615   000011                     ??_add_seconds_to_list:
   616   000011                     ??_I2C_2_Master_Idle:
   617   000011                     ?_get_state:
   618                           	callstack 0
   619   000011                     ?___wmul:
   620                           	callstack 0
   621   000011                     ?___lmul:
   622                           	callstack 0
   623   000011                     set_led_color@color:
   624                           	callstack 0
   625   000011                     initDCmotorsPWM@PWMperiod:
   626                           	callstack 0
   627   000011                     ___wmul@multiplier:
   628                           	callstack 0
   629   000011                     ___lmul@multiplier:
   630                           	callstack 0
   631                           
   632                           ; 4 bytes @ 0x10
   633   000011                     	ds	1
   634   000012                     ??_I2C_2_Master_Read:
   635   000012                     I2C_2_Master_Write@data_byte:
   636                           	callstack 0
   637                           
   638                           ; 1 bytes @ 0x11
   639   000012                     	ds	1
   640   000013                     color_writetoaddr@value:
   641                           	callstack 0
   642   000013                     I2C_2_Master_Read@ack:
   643                           	callstack 0
   644   000013                     ___wmul@multiplicand:
   645                           	callstack 0
   646                           
   647                           ; 2 bytes @ 0x12
   648   000013                     	ds	1
   649   000014                     color_writetoaddr@address:
   650                           	callstack 0
   651   000014                     I2C_2_Master_Read@tmp:
   652                           	callstack 0
   653                           
   654                           ; 1 bytes @ 0x13
   655   000014                     	ds	1
   656   000015                     ?_color_read_Red:
   657                           	callstack 0
   658   000015                     ?_color_read_Blue:
   659                           	callstack 0
   660   000015                     ?_color_read_Green:
   661                           	callstack 0
   662   000015                     ?_color_read_Clear:
   663                           	callstack 0
   664   000015                     ___wmul@product:
   665                           	callstack 0
   666   000015                     ___lmul@multiplicand:
   667                           	callstack 0
   668                           
   669                           ; 4 bytes @ 0x14
   670   000015                     	ds	2
   671   000017                     ??_color_read_Red:
   672   000017                     ??_color_read_Blue:
   673   000017                     ??_color_read_Green:
   674   000017                     ??_color_read_Clear:
   675   000017                     ?_get_color_distance:
   676                           	callstack 0
   677   000017                     ?_get_wall_detection:
   678                           	callstack 0
   679   000017                     ?___lwdiv:
   680                           	callstack 0
   681   000017                     ___lwdiv@dividend:
   682                           	callstack 0
   683   000017                     get_color_distance@color1:
   684                           	callstack 0
   685                           
   686                           ; 12 bytes @ 0x16
   687   000017                     	ds	2
   688   000019                     ___lwdiv@divisor:
   689                           	callstack 0
   690   000019                     ___lmul@product:
   691                           	callstack 0
   692                           
   693                           ; 4 bytes @ 0x18
   694   000019                     	ds	1
   695   00001A                     color_read_Red@tmp:
   696                           	callstack 0
   697   00001A                     color_read_Blue@tmp:
   698                           	callstack 0
   699   00001A                     color_read_Green@tmp:
   700                           	callstack 0
   701   00001A                     color_read_Clear@tmp:
   702                           	callstack 0
   703                           
   704                           ; 2 bytes @ 0x19
   705   00001A                     	ds	1
   706   00001B                     ___lwdiv@counter:
   707                           	callstack 0
   708                           
   709                           ; 1 bytes @ 0x1A
   710   00001B                     	ds	1
   711   00001C                     ??_calibrate_white:
   712   00001C                     ___lwdiv@quotient:
   713                           	callstack 0
   714                           
   715                           ; 2 bytes @ 0x1B
   716   00001C                     	ds	1
   717   00001D                     ?___lldiv:
   718                           	callstack 0
   719   00001D                     ___lldiv@dividend:
   720                           	callstack 0
   721                           
   722                           ; 4 bytes @ 0x1C
   723   00001D                     	ds	1
   724   00001E                     ??_calibrate_black:
   725   00001E                     setMotorPWM@m:
   726                           	callstack 0
   727                           
   728                           ; 2 bytes @ 0x1D
   729   00001E                     	ds	2
   730   000020                     ??_setMotorPWM:
   731   000020                     calibrate_black@clear1:
   732                           	callstack 0
   733                           
   734                           ; 2 bytes @ 0x1F
   735   000020                     	ds	1
   736   000021                     ___lldiv@divisor:
   737                           	callstack 0
   738                           
   739                           ; 4 bytes @ 0x20
   740   000021                     	ds	1
   741   000022                     setMotorPWM@posDuty:
   742                           	callstack 0
   743   000022                     calibrate_black@clear2:
   744                           	callstack 0
   745                           
   746                           ; 2 bytes @ 0x21
   747   000022                     	ds	1
   748   000023                     setMotorPWM@negDuty:
   749                           	callstack 0
   750   000023                     get_color_distance@color2:
   751                           	callstack 0
   752                           
   753                           ; 12 bytes @ 0x22
   754   000023                     	ds	1
   755   000024                     stop@mL:
   756                           	callstack 0
   757   000024                     turnLeft@mL:
   758                           	callstack 0
   759   000024                     turnRight@mL:
   760                           	callstack 0
   761   000024                     turnLeftLong@mL:
   762                           	callstack 0
   763   000024                     turnRightLong@mL:
   764                           	callstack 0
   765   000024                     fullSpeedAhead@mL:
   766                           	callstack 0
   767   000024                     TimedfullSpeedAhead@mL:
   768                           	callstack 0
   769   000024                     moveBack@mL:
   770                           	callstack 0
   771   000024                     _calibrate_black$2464:
   772                           	callstack 0
   773                           
   774                           ; 2 bytes @ 0x23
   775   000024                     	ds	1
   776   000025                     ___lldiv@quotient:
   777                           	callstack 0
   778                           
   779                           ; 4 bytes @ 0x24
   780   000025                     	ds	1
   781   000026                     ??_color_click_init:
   782   000026                     stop@mR:
   783                           	callstack 0
   784   000026                     turnLeft@mR:
   785                           	callstack 0
   786   000026                     turnRight@mR:
   787                           	callstack 0
   788   000026                     turnLeftLong@mR:
   789                           	callstack 0
   790   000026                     turnRightLong@mR:
   791                           	callstack 0
   792   000026                     fullSpeedAhead@mR:
   793                           	callstack 0
   794   000026                     TimedfullSpeedAhead@mR:
   795                           	callstack 0
   796   000026                     moveBack@mR:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x25
   800   000026                     	ds	2
   801   000028                     ??_stop:
   802   000028                     ??_turnLeft:
   803   000028                     ??_turnRight:
   804   000028                     ??_turnLeftLong:
   805   000028                     ??_turnRightLong:
   806   000028                     TimedfullSpeedAhead@time:
   807                           	callstack 0
   808   000028                     moveBack@time:
   809                           	callstack 0
   810                           
   811                           ; 2 bytes @ 0x27
   812   000028                     	ds	1
   813   000029                     ___lldiv@counter:
   814                           	callstack 0
   815                           
   816                           ; 1 bytes @ 0x28
   817   000029                     	ds	1
   818   00002A                     turnLeft@k:
   819                           	callstack 0
   820   00002A                     turnRight@k:
   821                           	callstack 0
   822   00002A                     turnLeftLong@i:
   823                           	callstack 0
   824   00002A                     turnRightLong@i:
   825                           	callstack 0
   826                           
   827                           ; 2 bytes @ 0x29
   828   00002A                     	ds	2
   829   00002C                     turnLeft@i:
   830                           	callstack 0
   831   00002C                     turnRight@i:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x2B
   835   00002C                     	ds	2
   836   00002E                     RobotMovement@color:
   837                           	callstack 0
   838   00002E                     return_back@motorL:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x2D
   842   00002E                     	ds	1
   843   00002F                     ??_get_color_distance:
   844                           
   845                           ; 1 bytes @ 0x2E
   846   00002F                     	ds	1
   847   000030                     RobotMovement@motorL:
   848                           	callstack 0
   849   000030                     return_back@motorR:
   850                           	callstack 0
   851                           
   852                           ; 2 bytes @ 0x2F
   853   000030                     	ds	2
   854   000032                     ??_return_back:
   855   000032                     RobotMovement@motorR:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x31
   859   000032                     	ds	1
   860   000033                     ?_get_color_code:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x32
   864   000033                     	ds	1
   865   000034                     
   866                           ; 1 bytes @ 0x33
   867   000034                     	ds	1
   868   000035                     ??_get_color_code:
   869                           
   870                           ; 1 bytes @ 0x34
   871   000035                     	ds	1
   872   000036                     RobotMovement@i:
   873                           	callstack 0
   874                           
   875                           ; 2 bytes @ 0x35
   876   000036                     	ds	2
   877   000038                     RobotMovement@i_1278:
   878                           	callstack 0
   879                           
   880                           ; 2 bytes @ 0x37
   881   000038                     	ds	2
   882   00003A                     ??_main:
   883                           
   884                           ; 1 bytes @ 0x39
   885   00003A                     	ds	2
   886                           
   887 ;;
   888 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   889 ;;
   890 ;; *************** function _main *****************
   891 ;; Defined at:
   892 ;;		line 17 in file "main.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;		None
   895 ;; Auto vars:     Size  Location     Type
   896 ;;  color_code      2    0[BANK1 ] unsigned int 
   897 ;;  state           2    2[BANK1 ] int 
   898 ;;  motorR          9   13[BANK1 ] struct DC_motor
   899 ;;  motorL          9    4[BANK1 ] struct DC_motor
   900 ;;  PWMcycle        2    0        unsigned int 
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   911 ;;      Locals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   912 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   913 ;;      Totals:         2       0      22       0       0       0       0       0       0       0       0       0       
      +0       0       0
   914 ;;Total ram usage:       24 bytes
   915 ;; Hardware stack levels required when called: 10
   916 ;; This function calls:
   917 ;;		_Interrupts_init
   918 ;;		_RobotMovement
   919 ;;		_TimedfullSpeedAhead
   920 ;;		_Timer0_init
   921 ;;		_add_seconds_to_list
   922 ;;		_color_click_init
   923 ;;		_fullSpeedAhead
   924 ;;		_get_color_code
   925 ;;		_get_state
   926 ;;		_get_wall_detection
   927 ;;		_initDCmotorsPWM
   928 ;;		_return_back
   929 ;;		_stop
   930 ;; This function is called by:
   931 ;;		Startup code after reset
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text0
   936   000B9A                     __ptext0:
   937                           	callstack 0
   938   000B9A                     _main:
   939                           	callstack 21
   940   000B9A                     
   941                           ;main.c: 19:     color_click_init();
   942   000B9A  ECFC  F009         	call	_color_click_init	;wreg free
   943   000B9E                     
   944                           ;main.c: 20:     Timer0_init();
   945   000B9E  ECA0  F010         	call	_Timer0_init	;wreg free
   946   000BA2                     
   947                           ;main.c: 21:     Interrupts_init();
   948   000BA2  ECB6  F010         	call	_Interrupts_init	;wreg free
   949   000BA6                     
   950                           ;main.c: 22:     initDCmotorsPWM(99);
   951   000BA6  0E00               	movlw	0
   952   000BA8  6E12               	movwf	(initDCmotorsPWM@PWMperiod+1)^0,c
   953   000BAA  0E63               	movlw	99
   954   000BAC  6E11               	movwf	initDCmotorsPWM@PWMperiod^0,c
   955   000BAE  ECB6  F00C         	call	_initDCmotorsPWM	;wreg free
   956   000BB2                     
   957                           ;main.c: 26:     ANSELFbits.ANSELF2 = 0;
   958   000BB2  010E               	movlb	14	; () banked
   959   000BB4  95B4               	bcf	180,2,b	;volatile
   960   000BB6                     
   961                           ; BSR set to: 14
   962                           ;main.c: 27:     TRISFbits.TRISF2 = 1;
   963   000BB6  8486               	bsf	134,2,c	;volatile
   964   000BB8                     
   965                           ; BSR set to: 14
   966                           ;main.c: 29:     DC_motor motorL, motorR;;main.c: 30:     motorL.power=0;
   967   000BB8  0E00               	movlw	0
   968   000BBA  0101               	movlb	1	; () banked
   969   000BBC  6FAC               	movwf	main@motorL& (0+255),b
   970   000BBE                     
   971                           ; BSR set to: 1
   972                           ;main.c: 31:     motorL.direction=1;
   973   000BBE  0E01               	movlw	1
   974   000BC0  6FAD               	movwf	(main@motorL+1)& (0+255),b
   975   000BC2                     
   976                           ; BSR set to: 1
   977                           ;main.c: 32:     motorL.brakemode=1;
   978   000BC2  0E01               	movlw	1
   979   000BC4  6FAE               	movwf	(main@motorL+2)& (0+255),b
   980   000BC6                     
   981                           ; BSR set to: 1
   982                           ;main.c: 33:     motorL.posDutyHighByte=(unsigned char *)(&CCPR1H);
   983   000BC6  0EAA               	movlw	170
   984   000BC8  6FB1               	movwf	(main@motorL+5)& (0+255),b
   985   000BCA  0E0F               	movlw	15
   986   000BCC  6FB2               	movwf	(main@motorL+6)& (0+255),b
   987   000BCE                     
   988                           ; BSR set to: 1
   989                           ;main.c: 34:     motorL.negDutyHighByte=(unsigned char *)(&CCPR2H);
   990   000BCE  0EA6               	movlw	166
   991   000BD0  6FB3               	movwf	(main@motorL+7)& (0+255),b
   992   000BD2  0E0F               	movlw	15
   993   000BD4  6FB4               	movwf	(main@motorL+8)& (0+255),b
   994   000BD6                     
   995                           ; BSR set to: 1
   996                           ;main.c: 35:     motorL.PWMperiod=PWMcycle;
   997   000BD6  0E00               	movlw	0
   998   000BD8  6FB0               	movwf	(main@motorL+4)& (0+255),b
   999   000BDA  0E63               	movlw	99
  1000   000BDC  6FAF               	movwf	(main@motorL+3)& (0+255),b
  1001   000BDE                     
  1002                           ; BSR set to: 1
  1003                           ;main.c: 37:     motorR.power=0;
  1004   000BDE  0E00               	movlw	0
  1005   000BE0  6FB5               	movwf	main@motorR& (0+255),b
  1006   000BE2                     
  1007                           ; BSR set to: 1
  1008                           ;main.c: 38:     motorR.direction=1;
  1009   000BE2  0E01               	movlw	1
  1010   000BE4  6FB6               	movwf	(main@motorR+1)& (0+255),b
  1011   000BE6                     
  1012                           ; BSR set to: 1
  1013                           ;main.c: 39:     motorR.brakemode=1;
  1014   000BE6  0E01               	movlw	1
  1015   000BE8  6FB7               	movwf	(main@motorR+2)& (0+255),b
  1016   000BEA                     
  1017                           ; BSR set to: 1
  1018                           ;main.c: 40:     motorR.posDutyHighByte=(unsigned char *)(&CCPR3H);
  1019   000BEA  0E25               	movlw	37
  1020   000BEC  6FBA               	movwf	(main@motorR+5)& (0+255),b
  1021   000BEE  0E0F               	movlw	15
  1022   000BF0  6FBB               	movwf	(main@motorR+6)& (0+255),b
  1023   000BF2                     
  1024                           ; BSR set to: 1
  1025                           ;main.c: 41:     motorR.negDutyHighByte=(unsigned char *)(&CCPR4H);
  1026   000BF2  0E21               	movlw	33
  1027   000BF4  6FBC               	movwf	(main@motorR+7)& (0+255),b
  1028   000BF6  0E0F               	movlw	15
  1029   000BF8  6FBD               	movwf	(main@motorR+8)& (0+255),b
  1030   000BFA                     
  1031                           ; BSR set to: 1
  1032                           ;main.c: 42:     motorR.PWMperiod=PWMcycle;
  1033   000BFA  0E00               	movlw	0
  1034   000BFC  6FB9               	movwf	(main@motorR+4)& (0+255),b
  1035   000BFE  0E63               	movlw	99
  1036   000C00  6FB8               	movwf	(main@motorR+3)& (0+255),b
  1037   000C02                     
  1038                           ; BSR set to: 1
  1039                           ;main.c: 44:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  1040   000C02  0E52               	movlw	82
  1041   000C04  6E3B               	movwf	(??_main+1)^0,c
  1042   000C06  0E2B               	movlw	43
  1043   000C08  6E3A               	movwf	??_main^0,c
  1044   000C0A  0E00               	movlw	0
  1045   000C0C                     u4027:
  1046   000C0C  2EE8               	decfsz	wreg,f,c
  1047   000C0E  D7FE               	bra	u4027
  1048   000C10  2E3A               	decfsz	??_main^0,f,c
  1049   000C12  D7FC               	bra	u4027
  1050   000C14  2E3B               	decfsz	(??_main+1)^0,f,c
  1051   000C16  D7FA               	bra	u4027
  1052   000C18  D000               	nop2	
  1053   000C1A                     
  1054                           ;main.c: 45:     fullSpeedAhead(&motorL,&motorR);
  1055   000C1A  0EAC               	movlw	low main@motorL
  1056   000C1C  6E24               	movwf	fullSpeedAhead@mL^0,c
  1057   000C1E  0E01               	movlw	high main@motorL
  1058   000C20  6E25               	movwf	(fullSpeedAhead@mL+1)^0,c
  1059   000C22  0EB5               	movlw	low main@motorR
  1060   000C24  6E26               	movwf	fullSpeedAhead@mR^0,c
  1061   000C26  0E01               	movlw	high main@motorR
  1062   000C28  6E27               	movwf	(fullSpeedAhead@mR+1)^0,c
  1063   000C2A  EC13  F00E         	call	_fullSpeedAhead	;wreg free
  1064   000C2E                     l4326:
  1065                           
  1066                           ;main.c: 47:         int state = get_state();
  1067   000C2E  ECC2  F010         	call	_get_state	;wreg free
  1068   000C32  C011  F1AA         	movff	?_get_state,main@state
  1069   000C36  C012  F1AB         	movff	?_get_state+1,main@state+1
  1070   000C3A                     
  1071                           ;main.c: 48:         if(get_wall_detection() == 1 && state == 0 ){
  1072   000C3A  ECE1  F00D         	call	_get_wall_detection	;wreg free
  1073   000C3E  0417               	decf	?_get_wall_detection^0,w,c
  1074   000C40  1018               	iorwf	(?_get_wall_detection+1)^0,w,c
  1075   000C42  A4D8               	btfss	status,2,c
  1076   000C44  EF26  F006         	goto	u3621
  1077   000C48  EF28  F006         	goto	u3620
  1078   000C4C                     u3621:
  1079   000C4C  EF80  F006         	goto	l4346
  1080   000C50                     u3620:
  1081   000C50  0101               	movlb	1	; () banked
  1082   000C52  51AA               	movf	main@state& (0+255),w,b
  1083   000C54  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1084   000C56  A4D8               	btfss	status,2,c
  1085   000C58  EF30  F006         	goto	u3631
  1086   000C5C  EF32  F006         	goto	u3630
  1087   000C60                     u3631:
  1088   000C60  EF80  F006         	goto	l4346
  1089   000C64                     u3630:
  1090   000C64                     
  1091                           ; BSR set to: 1
  1092                           ;main.c: 50:             add_seconds_to_list();
  1093   000C64  EC7E  F00F         	call	_add_seconds_to_list	;wreg free
  1094   000C68                     
  1095                           ;main.c: 51:             stop(&motorL,&motorR);
  1096   000C68  0EAC               	movlw	low main@motorL
  1097   000C6A  6E24               	movwf	stop@mL^0,c
  1098   000C6C  0E01               	movlw	high main@motorL
  1099   000C6E  6E25               	movwf	(stop@mL+1)^0,c
  1100   000C70  0EB5               	movlw	low main@motorR
  1101   000C72  6E26               	movwf	stop@mR^0,c
  1102   000C74  0E01               	movlw	high main@motorR
  1103   000C76  6E27               	movwf	(stop@mR+1)^0,c
  1104   000C78  EC35  F00F         	call	_stop	;wreg free
  1105   000C7C                     
  1106                           ;main.c: 52:             unsigned int color_code = get_color_code();
  1107   000C7C  ECF4  F002         	call	_get_color_code	;wreg free
  1108   000C80  C033  F1A8         	movff	?_get_color_code,main@color_code
  1109   000C84  C034  F1A9         	movff	?_get_color_code+1,main@color_code+1
  1110   000C88                     
  1111                           ;main.c: 53:             TimedfullSpeedAhead(&motorL, &motorR, 5);
  1112   000C88  0EAC               	movlw	low main@motorL
  1113   000C8A  6E24               	movwf	TimedfullSpeedAhead@mL^0,c
  1114   000C8C  0E01               	movlw	high main@motorL
  1115   000C8E  6E25               	movwf	(TimedfullSpeedAhead@mL+1)^0,c
  1116   000C90  0EB5               	movlw	low main@motorR
  1117   000C92  6E26               	movwf	TimedfullSpeedAhead@mR^0,c
  1118   000C94  0E01               	movlw	high main@motorR
  1119   000C96  6E27               	movwf	(TimedfullSpeedAhead@mR+1)^0,c
  1120   000C98  0E00               	movlw	0
  1121   000C9A  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1122   000C9C  0E05               	movlw	5
  1123   000C9E  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  1124   000CA0  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1125   000CA4                     
  1126                           ;main.c: 54:             RobotMovement(color_code, &motorL, &motorR);
  1127   000CA4  C1A8  F02E         	movff	main@color_code,RobotMovement@color
  1128   000CA8  C1A9  F02F         	movff	main@color_code+1,RobotMovement@color+1
  1129   000CAC  0EAC               	movlw	low main@motorL
  1130   000CAE  6E30               	movwf	RobotMovement@motorL^0,c
  1131   000CB0  0E01               	movlw	high main@motorL
  1132   000CB2  6E31               	movwf	(RobotMovement@motorL+1)^0,c
  1133   000CB4  0EB5               	movlw	low main@motorR
  1134   000CB6  6E32               	movwf	RobotMovement@motorR^0,c
  1135   000CB8  0E01               	movlw	high main@motorR
  1136   000CBA  6E33               	movwf	(RobotMovement@motorR+1)^0,c
  1137   000CBC  EC51  F000         	call	_RobotMovement	;wreg free
  1138   000CC0                     
  1139                           ;main.c: 55:             if (state == 0)
  1140   000CC0  0101               	movlb	1	; () banked
  1141   000CC2  51AA               	movf	main@state& (0+255),w,b
  1142   000CC4  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1143   000CC6  A4D8               	btfss	status,2,c
  1144   000CC8  EF68  F006         	goto	u3641
  1145   000CCC  EF6A  F006         	goto	u3640
  1146   000CD0                     u3641:
  1147   000CD0  EF17  F006         	goto	l4326
  1148   000CD4                     u3640:
  1149   000CD4                     
  1150                           ; BSR set to: 1
  1151                           ;main.c: 56:             {;main.c: 57:                 stop(&motorL,&motorR);
  1152   000CD4  0EAC               	movlw	low main@motorL
  1153   000CD6  6E24               	movwf	stop@mL^0,c
  1154   000CD8  0E01               	movlw	high main@motorL
  1155   000CDA  6E25               	movwf	(stop@mL+1)^0,c
  1156   000CDC  0EB5               	movlw	low main@motorR
  1157   000CDE  6E26               	movwf	stop@mR^0,c
  1158   000CE0  0E01               	movlw	high main@motorR
  1159   000CE2  6E27               	movwf	(stop@mR+1)^0,c
  1160   000CE4  EC35  F00F         	call	_stop	;wreg free
  1161                           
  1162                           ;main.c: 58:                 fullSpeedAhead(&motorL,&motorR);
  1163   000CE8  0EAC               	movlw	low main@motorL
  1164   000CEA  6E24               	movwf	fullSpeedAhead@mL^0,c
  1165   000CEC  0E01               	movlw	high main@motorL
  1166   000CEE  6E25               	movwf	(fullSpeedAhead@mL+1)^0,c
  1167   000CF0  0EB5               	movlw	low main@motorR
  1168   000CF2  6E26               	movwf	fullSpeedAhead@mR^0,c
  1169   000CF4  0E01               	movlw	high main@motorR
  1170   000CF6  6E27               	movwf	(fullSpeedAhead@mR+1)^0,c
  1171   000CF8  EC13  F00E         	call	_fullSpeedAhead	;wreg free
  1172   000CFC  EF17  F006         	goto	l4326
  1173   000D00                     l4346:
  1174   000D00  0101               	movlb	1	; () banked
  1175   000D02  05AA               	decf	main@state& (0+255),w,b
  1176   000D04  11AB               	iorwf	(main@state+1)& (0+255),w,b
  1177   000D06  A4D8               	btfss	status,2,c
  1178   000D08  EF88  F006         	goto	u3651
  1179   000D0C  EF8A  F006         	goto	u3650
  1180   000D10                     u3651:
  1181   000D10  EF96  F006         	goto	l458
  1182   000D14                     u3650:
  1183   000D14                     
  1184                           ; BSR set to: 1
  1185                           ;main.c: 61:             return_back(&motorL, &motorR);
  1186   000D14  0EAC               	movlw	low main@motorL
  1187   000D16  6E2E               	movwf	return_back@motorL^0,c
  1188   000D18  0E01               	movlw	high main@motorL
  1189   000D1A  6E2F               	movwf	(return_back@motorL+1)^0,c
  1190   000D1C  0EB5               	movlw	low main@motorR
  1191   000D1E  6E30               	movwf	return_back@motorR^0,c
  1192   000D20  0E01               	movlw	high main@motorR
  1193   000D22  6E31               	movwf	(return_back@motorR+1)^0,c
  1194   000D24  ECCB  F004         	call	_return_back	;wreg free
  1195                           
  1196                           ;main.c: 62:         }else{
  1197   000D28  EF17  F006         	goto	l4326
  1198   000D2C                     l458:
  1199                           
  1200                           ; BSR set to: 1
  1201   000D2C  EF17  F006         	goto	l4326
  1202   000D30  EF4F  F000         	goto	start
  1203   000D34                     __end_of_main:
  1204                           	callstack 0
  1205                           
  1206 ;; *************** function _return_back *****************
  1207 ;; Defined at:
  1208 ;;		line 445 in file "dc_motor.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  motorL          2   45[COMRAM] PTR struct DC_motor
  1211 ;;		 -> main@motorL(9), 
  1212 ;;  motorR          2   47[COMRAM] PTR struct DC_motor
  1213 ;;		 -> main@motorR(9), 
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1225 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1227 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1228 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1229 ;;Total ram usage:        6 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 8
  1232 ;; This function calls:
  1233 ;;		_TimedfullSpeedAhead
  1234 ;;		_moveBack
  1235 ;;		_stop
  1236 ;;		_turnLeft
  1237 ;;		_turnLeftLong
  1238 ;;		_turnRight
  1239 ;;		_turnRightLong
  1240 ;; This function is called by:
  1241 ;;		_main
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text1
  1246   000996                     __ptext1:
  1247                           	callstack 0
  1248   000996                     _return_back:
  1249                           	callstack 22
  1250   000996                     
  1251                           ;dc_motor.c: 445: void return_back(struct DC_motor *motorL, struct DC_motor *motorR);dc_
      +                          motor.c: 446: {;dc_motor.c: 447:     while (index > 0){
  1252   000996  EFB2  F005         	goto	l316
  1253   00099A                     l4240:
  1254                           
  1255                           ;dc_motor.c: 448:         if (movement_list[index-1] == -1){turnLeft(motorL, motorR);}
  1256   00099A  90D8               	bcf	status,0,c
  1257   00099C  3440               	rlcf	_index^0,w,c
  1258   00099E  6ED9               	movwf	fsr2l,c
  1259   0009A0  3441               	rlcf	(_index+1)^0,w,c
  1260   0009A2  6EDA               	movwf	fsr2h,c
  1261   0009A4  0EFE               	movlw	low (_movement_list+65534)
  1262   0009A6  26D9               	addwf	fsr2l,f,c
  1263   0009A8  0E01               	movlw	high (_movement_list+65534)
  1264   0009AA  22DA               	addwfc	fsr2h,f,c
  1265   0009AC  28DE               	incf	postinc2,w,c
  1266   0009AE  E106               	bnz	u3551
  1267   0009B0  28DE               	incf	postinc2,w,c
  1268   0009B2  A4D8               	btfss	status,2,c
  1269   0009B4  EFDE  F004         	goto	u3551
  1270   0009B8  EFE0  F004         	goto	u3550
  1271   0009BC                     u3551:
  1272   0009BC  EFEC  F004         	goto	l4244
  1273   0009C0                     u3550:
  1274   0009C0  C02E  F024         	movff	return_back@motorL,turnLeft@mL
  1275   0009C4  C02F  F025         	movff	return_back@motorL+1,turnLeft@mL+1
  1276   0009C8  C030  F026         	movff	return_back@motorR,turnLeft@mR
  1277   0009CC  C031  F027         	movff	return_back@motorR+1,turnLeft@mR+1
  1278   0009D0  EC08  F008         	call	_turnLeft	;wreg free
  1279   0009D4  EFA5  F005         	goto	l4266
  1280   0009D8                     l4244:
  1281   0009D8  90D8               	bcf	status,0,c
  1282   0009DA  3440               	rlcf	_index^0,w,c
  1283   0009DC  6ED9               	movwf	fsr2l,c
  1284   0009DE  3441               	rlcf	(_index+1)^0,w,c
  1285   0009E0  6EDA               	movwf	fsr2h,c
  1286   0009E2  0EFE               	movlw	low (_movement_list+65534)
  1287   0009E4  26D9               	addwf	fsr2l,f,c
  1288   0009E6  0E01               	movlw	high (_movement_list+65534)
  1289   0009E8  22DA               	addwfc	fsr2h,f,c
  1290   0009EA  0EFE               	movlw	254
  1291   0009EC  18DE               	xorwf	postinc2,w,c
  1292   0009EE  E106               	bnz	u3561
  1293   0009F0  28DE               	incf	postinc2,w,c
  1294   0009F2  A4D8               	btfss	status,2,c
  1295   0009F4  EFFE  F004         	goto	u3561
  1296   0009F8  EF00  F005         	goto	u3560
  1297   0009FC                     u3561:
  1298   0009FC  EF0C  F005         	goto	l4248
  1299   000A00                     u3560:
  1300   000A00  C02E  F024         	movff	return_back@motorL,turnRight@mL
  1301   000A04  C02F  F025         	movff	return_back@motorL+1,turnRight@mL+1
  1302   000A08  C030  F026         	movff	return_back@motorR,turnRight@mR
  1303   000A0C  C031  F027         	movff	return_back@motorR+1,turnRight@mR+1
  1304   000A10  ECB5  F008         	call	_turnRight	;wreg free
  1305   000A14  EFA5  F005         	goto	l4266
  1306   000A18                     l4248:
  1307   000A18  90D8               	bcf	status,0,c
  1308   000A1A  3440               	rlcf	_index^0,w,c
  1309   000A1C  6ED9               	movwf	fsr2l,c
  1310   000A1E  3441               	rlcf	(_index+1)^0,w,c
  1311   000A20  6EDA               	movwf	fsr2h,c
  1312   000A22  0EFE               	movlw	low (_movement_list+65534)
  1313   000A24  26D9               	addwf	fsr2l,f,c
  1314   000A26  0E01               	movlw	high (_movement_list+65534)
  1315   000A28  22DA               	addwfc	fsr2h,f,c
  1316   000A2A  0EFD               	movlw	253
  1317   000A2C  18DE               	xorwf	postinc2,w,c
  1318   000A2E  E106               	bnz	u3571
  1319   000A30  28DE               	incf	postinc2,w,c
  1320   000A32  A4D8               	btfss	status,2,c
  1321   000A34  EF1E  F005         	goto	u3571
  1322   000A38  EF20  F005         	goto	u3570
  1323   000A3C                     u3571:
  1324   000A3C  EF2C  F005         	goto	l4252
  1325   000A40                     u3570:
  1326   000A40  C02E  F024         	movff	return_back@motorL,turnLeftLong@mL
  1327   000A44  C02F  F025         	movff	return_back@motorL+1,turnLeftLong@mL+1
  1328   000A48  C030  F026         	movff	return_back@motorR,turnLeftLong@mR
  1329   000A4C  C031  F027         	movff	return_back@motorR+1,turnLeftLong@mR+1
  1330   000A50  EC2C  F00B         	call	_turnLeftLong	;wreg free
  1331   000A54  EFA5  F005         	goto	l4266
  1332   000A58                     l4252:
  1333   000A58  90D8               	bcf	status,0,c
  1334   000A5A  3440               	rlcf	_index^0,w,c
  1335   000A5C  6ED9               	movwf	fsr2l,c
  1336   000A5E  3441               	rlcf	(_index+1)^0,w,c
  1337   000A60  6EDA               	movwf	fsr2h,c
  1338   000A62  0EFE               	movlw	low (_movement_list+65534)
  1339   000A64  26D9               	addwf	fsr2l,f,c
  1340   000A66  0E01               	movlw	high (_movement_list+65534)
  1341   000A68  22DA               	addwfc	fsr2h,f,c
  1342   000A6A  0EFC               	movlw	252
  1343   000A6C  18DE               	xorwf	postinc2,w,c
  1344   000A6E  E106               	bnz	u3581
  1345   000A70  28DE               	incf	postinc2,w,c
  1346   000A72  A4D8               	btfss	status,2,c
  1347   000A74  EF3E  F005         	goto	u3581
  1348   000A78  EF40  F005         	goto	u3580
  1349   000A7C                     u3581:
  1350   000A7C  EF4C  F005         	goto	l4256
  1351   000A80                     u3580:
  1352   000A80  C02E  F024         	movff	return_back@motorL,turnRightLong@mL
  1353   000A84  C02F  F025         	movff	return_back@motorL+1,turnRightLong@mL+1
  1354   000A88  C030  F026         	movff	return_back@motorR,turnRightLong@mR
  1355   000A8C  C031  F027         	movff	return_back@motorR+1,turnRightLong@mR+1
  1356   000A90  EC98  F00A         	call	_turnRightLong	;wreg free
  1357   000A94  EFA5  F005         	goto	l4266
  1358   000A98                     l4256:
  1359   000A98  90D8               	bcf	status,0,c
  1360   000A9A  3440               	rlcf	_index^0,w,c
  1361   000A9C  6ED9               	movwf	fsr2l,c
  1362   000A9E  3441               	rlcf	(_index+1)^0,w,c
  1363   000AA0  6EDA               	movwf	fsr2h,c
  1364   000AA2  0EFE               	movlw	low (_movement_list+65534)
  1365   000AA4  26D9               	addwf	fsr2l,f,c
  1366   000AA6  0E01               	movlw	high (_movement_list+65534)
  1367   000AA8  22DA               	addwfc	fsr2h,f,c
  1368   000AAA  0E01               	movlw	1
  1369   000AAC  BEDB               	btfsc	plusw2,7,c
  1370   000AAE  EF62  F005         	goto	u3591
  1371   000AB2  0E01               	movlw	1
  1372   000AB4  50DB               	movf	plusw2,w,c
  1373   000AB6  E108               	bnz	u3590
  1374   000AB8  04DE               	decf	postinc2,w,c
  1375   000ABA  A0D8               	btfss	status,0,c
  1376   000ABC  EF62  F005         	goto	u3591
  1377   000AC0  EF64  F005         	goto	u3590
  1378   000AC4                     u3591:
  1379   000AC4  EFA5  F005         	goto	l321
  1380   000AC8                     u3590:
  1381   000AC8                     
  1382                           ;dc_motor.c: 453:         {;dc_motor.c: 454:             TimedfullSpeedAhead(motorL, mot
      +                          orR, movement_list[index-1]);
  1383   000AC8  C02E  F024         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1384   000ACC  C02F  F025         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1385   000AD0  C030  F026         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1386   000AD4  C031  F027         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1387   000AD8  90D8               	bcf	status,0,c
  1388   000ADA  3440               	rlcf	_index^0,w,c
  1389   000ADC  6ED9               	movwf	fsr2l,c
  1390   000ADE  3441               	rlcf	(_index+1)^0,w,c
  1391   000AE0  6EDA               	movwf	fsr2h,c
  1392   000AE2  0EFE               	movlw	low (_movement_list+65534)
  1393   000AE4  26D9               	addwf	fsr2l,f,c
  1394   000AE6  0E01               	movlw	high (_movement_list+65534)
  1395   000AE8  22DA               	addwfc	fsr2h,f,c
  1396   000AEA  CFDE F028          	movff	postinc2,TimedfullSpeedAhead@time
  1397   000AEE  CFDD F029          	movff	postdec2,TimedfullSpeedAhead@time+1
  1398   000AF2  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1399   000AF6                     
  1400                           ;dc_motor.c: 455:             _delay((unsigned long)((200)*(64000000/4000.0)));
  1401   000AF6  0E11               	movlw	17
  1402   000AF8  6E33               	movwf	(??_return_back+1)^0,c
  1403   000AFA  0E3C               	movlw	60
  1404   000AFC  6E32               	movwf	??_return_back^0,c
  1405   000AFE  0ECB               	movlw	203
  1406   000B00                     u4037:
  1407   000B00  2EE8               	decfsz	wreg,f,c
  1408   000B02  D7FE               	bra	u4037
  1409   000B04  2E32               	decfsz	??_return_back^0,f,c
  1410   000B06  D7FC               	bra	u4037
  1411   000B08  2E33               	decfsz	(??_return_back+1)^0,f,c
  1412   000B0A  D7FA               	bra	u4037
  1413   000B0C  F000               	nop	
  1414   000B0E                     
  1415                           ;dc_motor.c: 456:             TimedfullSpeedAhead(motorL, motorR, 11);
  1416   000B0E  C02E  F024         	movff	return_back@motorL,TimedfullSpeedAhead@mL
  1417   000B12  C02F  F025         	movff	return_back@motorL+1,TimedfullSpeedAhead@mL+1
  1418   000B16  C030  F026         	movff	return_back@motorR,TimedfullSpeedAhead@mR
  1419   000B1A  C031  F027         	movff	return_back@motorR+1,TimedfullSpeedAhead@mR+1
  1420   000B1E  0E00               	movlw	0
  1421   000B20  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  1422   000B22  0E0B               	movlw	11
  1423   000B24  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  1424   000B26  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  1425   000B2A                     
  1426                           ;dc_motor.c: 457:             moveBack(motorL, motorR, 11);
  1427   000B2A  C02E  F024         	movff	return_back@motorL,moveBack@mL
  1428   000B2E  C02F  F025         	movff	return_back@motorL+1,moveBack@mL+1
  1429   000B32  C030  F026         	movff	return_back@motorR,moveBack@mR
  1430   000B36  C031  F027         	movff	return_back@motorR+1,moveBack@mR+1
  1431   000B3A  0E00               	movlw	0
  1432   000B3C  6E29               	movwf	(moveBack@time+1)^0,c
  1433   000B3E  0E0B               	movlw	11
  1434   000B40  6E28               	movwf	moveBack@time^0,c
  1435   000B42  ECFE  F00C         	call	_moveBack	;wreg free
  1436   000B46  EFA5  F005         	goto	l4266
  1437   000B4A                     l321:
  1438   000B4A                     l4266:
  1439                           
  1440                           ;dc_motor.c: 459:         stop(motorL,motorR);
  1441   000B4A  C02E  F024         	movff	return_back@motorL,stop@mL
  1442   000B4E  C02F  F025         	movff	return_back@motorL+1,stop@mL+1
  1443   000B52  C030  F026         	movff	return_back@motorR,stop@mR
  1444   000B56  C031  F027         	movff	return_back@motorR+1,stop@mR+1
  1445   000B5A  EC35  F00F         	call	_stop	;wreg free
  1446   000B5E                     
  1447                           ;dc_motor.c: 460:         index -= 1;
  1448   000B5E  0640               	decf	_index^0,f,c
  1449   000B60  A0D8               	btfss	status,0,c
  1450   000B62  0641               	decf	(_index+1)^0,f,c
  1451   000B64                     l316:
  1452                           
  1453                           ;dc_motor.c: 447:     while (index > 0){
  1454   000B64  BE41               	btfsc	(_index+1)^0,7,c
  1455   000B66  EFBF  F005         	goto	u3600
  1456   000B6A  5041               	movf	(_index+1)^0,w,c
  1457   000B6C  E106               	bnz	u3601
  1458   000B6E  0440               	decf	_index^0,w,c
  1459   000B70  B0D8               	btfsc	status,0,c
  1460   000B72  EFBD  F005         	goto	u3601
  1461   000B76  EFBF  F005         	goto	u3600
  1462   000B7A                     u3601:
  1463   000B7A  EFCD  F004         	goto	l4240
  1464   000B7E                     u3600:
  1465   000B7E                     
  1466                           ;dc_motor.c: 462:     if (index == 0){state = 2;}
  1467   000B7E  5040               	movf	_index^0,w,c
  1468   000B80  1041               	iorwf	(_index+1)^0,w,c
  1469   000B82  A4D8               	btfss	status,2,c
  1470   000B84  EFC6  F005         	goto	u3611
  1471   000B88  EFC8  F005         	goto	u3610
  1472   000B8C                     u3611:
  1473   000B8C  EFCC  F005         	goto	l329
  1474   000B90                     u3610:
  1475   000B90  0E00               	movlw	0
  1476   000B92  6E3F               	movwf	(_state+1)^0,c
  1477   000B94  0E02               	movlw	2
  1478   000B96  6E3E               	movwf	_state^0,c
  1479   000B98                     l329:
  1480   000B98  0012               	return		;funcret
  1481   000B9A                     __end_of_return_back:
  1482                           	callstack 0
  1483                           
  1484 ;; *************** function _initDCmotorsPWM *****************
  1485 ;; Defined at:
  1486 ;;		line 9 in file "dc_motor.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  PWMperiod       2   16[COMRAM] int 
  1489 ;; Auto vars:     Size  Location     Type
  1490 ;;		None
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1500 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1503 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1504 ;;Total ram usage:        2 bytes
  1505 ;; Hardware stack levels used: 1
  1506 ;; Hardware stack levels required when called: 5
  1507 ;; This function calls:
  1508 ;;		Nothing
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text2
  1515   00196C                     __ptext2:
  1516                           	callstack 0
  1517   00196C                     _initDCmotorsPWM:
  1518                           	callstack 25
  1519   00196C                     
  1520                           ;dc_motor.c: 11:     TRISEbits.TRISE2=0;
  1521   00196C  9485               	bcf	133,2,c	;volatile
  1522                           
  1523                           ;dc_motor.c: 12:     TRISCbits.TRISC7=0;
  1524   00196E  9E83               	bcf	131,7,c	;volatile
  1525                           
  1526                           ;dc_motor.c: 13:     TRISGbits.TRISG6=0;
  1527   001970  9C87               	bcf	135,6,c	;volatile
  1528                           
  1529                           ;dc_motor.c: 14:     TRISEbits.TRISE4=0;
  1530   001972  9885               	bcf	133,4,c	;volatile
  1531                           
  1532                           ;dc_motor.c: 16:     LATEbits.LATE2=0;
  1533   001974  947D               	bcf	125,2,c	;volatile
  1534                           
  1535                           ;dc_motor.c: 17:     LATCbits.LATC7=0;
  1536   001976  9E7B               	bcf	123,7,c	;volatile
  1537                           
  1538                           ;dc_motor.c: 18:     LATGbits.LATG6=0;
  1539   001978  9C7F               	bcf	127,6,c	;volatile
  1540                           
  1541                           ;dc_motor.c: 19:     LATEbits.LATE4=0;
  1542   00197A  987D               	bcf	125,4,c	;volatile
  1543   00197C                     
  1544                           ;dc_motor.c: 22:     RE2PPS=0x05;
  1545   00197C  0E05               	movlw	5
  1546   00197E  010E               	movlb	14	; () banked
  1547   001980  6F74               	movwf	116,b	;volatile
  1548                           
  1549                           ;dc_motor.c: 23:     RE4PPS=0x06;
  1550   001982  0E06               	movlw	6
  1551   001984  6F76               	movwf	118,b	;volatile
  1552                           
  1553                           ;dc_motor.c: 24:     RC7PPS=0x07;
  1554   001986  0E07               	movlw	7
  1555   001988  6F69               	movwf	105,b	;volatile
  1556                           
  1557                           ;dc_motor.c: 25:     RG6PPS=0x08;
  1558   00198A  0E08               	movlw	8
  1559   00198C  6F88               	movwf	136,b	;volatile
  1560                           
  1561                           ;dc_motor.c: 28:     T2CONbits.CKPS=0b100;
  1562   00198E  50BD               	movf	189,w,c	;volatile
  1563   001990  0B8F               	andlw	-113
  1564   001992  0940               	iorlw	64
  1565   001994  6EBD               	movwf	189,c	;volatile
  1566                           
  1567                           ;dc_motor.c: 29:     T2HLTbits.MODE=0b00000;
  1568   001996  0EE0               	movlw	-32
  1569   001998  16BE               	andwf	190,f,c	;volatile
  1570                           
  1571                           ;dc_motor.c: 30:     T2CLKCONbits.CS=0b0001;
  1572   00199A  50BF               	movf	191,w,c	;volatile
  1573   00199C  0BF0               	andlw	-16
  1574   00199E  0901               	iorlw	1
  1575   0019A0  6EBF               	movwf	191,c	;volatile
  1576                           
  1577                           ;dc_motor.c: 34:     T2PR=99;
  1578   0019A2  0E63               	movlw	99
  1579   0019A4  6EBC               	movwf	188,c	;volatile
  1580   0019A6                     
  1581                           ; BSR set to: 14
  1582                           ;dc_motor.c: 35:     T2CONbits.ON=1;
  1583   0019A6  8EBD               	bsf	189,7,c	;volatile
  1584                           
  1585                           ;dc_motor.c: 39:     CCPR1H=0;
  1586   0019A8  0E00               	movlw	0
  1587   0019AA  6EAA               	movwf	170,c	;volatile
  1588                           
  1589                           ;dc_motor.c: 40:     CCPR2H=0;
  1590   0019AC  0E00               	movlw	0
  1591   0019AE  6EA6               	movwf	166,c	;volatile
  1592                           
  1593                           ;dc_motor.c: 41:     CCPR3H=0;
  1594   0019B0  0E00               	movlw	0
  1595   0019B2  010F               	movlb	15	; () banked
  1596   0019B4  6F25               	movwf	37,b	;volatile
  1597                           
  1598                           ;dc_motor.c: 42:     CCPR4H=0;
  1599   0019B6  0E00               	movlw	0
  1600   0019B8  6F21               	movwf	33,b	;volatile
  1601                           
  1602                           ;dc_motor.c: 45:     CCPTMRS0bits.C1TSEL=0;
  1603   0019BA  0EFC               	movlw	-4
  1604   0019BC  16AD               	andwf	173,f,c	;volatile
  1605                           
  1606                           ;dc_motor.c: 46:     CCPTMRS0bits.C2TSEL=0;
  1607   0019BE  0EF3               	movlw	-13
  1608   0019C0  16AD               	andwf	173,f,c	;volatile
  1609                           
  1610                           ;dc_motor.c: 47:     CCPTMRS0bits.C3TSEL=0;
  1611   0019C2  0ECF               	movlw	-49
  1612   0019C4  16AD               	andwf	173,f,c	;volatile
  1613                           
  1614                           ;dc_motor.c: 48:     CCPTMRS0bits.C4TSEL=0;
  1615   0019C6  0E3F               	movlw	-193
  1616   0019C8  16AD               	andwf	173,f,c	;volatile
  1617   0019CA                     
  1618                           ; BSR set to: 15
  1619                           ;dc_motor.c: 51:     CCP1CONbits.FMT=1;
  1620   0019CA  88AB               	bsf	171,4,c	;volatile
  1621                           
  1622                           ;dc_motor.c: 52:     CCP1CONbits.CCP1MODE=0b1100;
  1623   0019CC  50AB               	movf	171,w,c	;volatile
  1624   0019CE  0BF0               	andlw	-16
  1625   0019D0  090C               	iorlw	12
  1626   0019D2  6EAB               	movwf	171,c	;volatile
  1627   0019D4                     
  1628                           ; BSR set to: 15
  1629                           ;dc_motor.c: 53:     CCP1CONbits.EN=1;
  1630   0019D4  8EAB               	bsf	171,7,c	;volatile
  1631   0019D6                     
  1632                           ; BSR set to: 15
  1633                           ;dc_motor.c: 55:     CCP2CONbits.FMT=1;
  1634   0019D6  88A7               	bsf	167,4,c	;volatile
  1635                           
  1636                           ;dc_motor.c: 56:     CCP2CONbits.CCP2MODE=0b1100;
  1637   0019D8  50A7               	movf	167,w,c	;volatile
  1638   0019DA  0BF0               	andlw	-16
  1639   0019DC  090C               	iorlw	12
  1640   0019DE  6EA7               	movwf	167,c	;volatile
  1641   0019E0                     
  1642                           ; BSR set to: 15
  1643                           ;dc_motor.c: 57:     CCP2CONbits.EN=1;
  1644   0019E0  8EA7               	bsf	167,7,c	;volatile
  1645   0019E2                     
  1646                           ; BSR set to: 15
  1647                           ;dc_motor.c: 59:     CCP3CONbits.FMT=1;
  1648   0019E2  8926               	bsf	38,4,b	;volatile
  1649                           
  1650                           ;dc_motor.c: 60:     CCP3CONbits.CCP3MODE=0b1100;
  1651   0019E4  5126               	movf	38,w,b	;volatile
  1652   0019E6  0BF0               	andlw	-16
  1653   0019E8  090C               	iorlw	12
  1654   0019EA  6F26               	movwf	38,b	;volatile
  1655   0019EC                     
  1656                           ; BSR set to: 15
  1657                           ;dc_motor.c: 61:     CCP3CONbits.EN=1;
  1658   0019EC  8F26               	bsf	38,7,b	;volatile
  1659   0019EE                     
  1660                           ; BSR set to: 15
  1661                           ;dc_motor.c: 63:     CCP4CONbits.FMT=1;
  1662   0019EE  8922               	bsf	34,4,b	;volatile
  1663                           
  1664                           ;dc_motor.c: 64:     CCP4CONbits.CCP4MODE=0b1100;
  1665   0019F0  5122               	movf	34,w,b	;volatile
  1666   0019F2  0BF0               	andlw	-16
  1667   0019F4  090C               	iorlw	12
  1668   0019F6  6F22               	movwf	34,b	;volatile
  1669   0019F8                     
  1670                           ; BSR set to: 15
  1671                           ;dc_motor.c: 65:     CCP4CONbits.EN=1;
  1672   0019F8  8F22               	bsf	34,7,b	;volatile
  1673   0019FA                     
  1674                           ; BSR set to: 15
  1675   0019FA  0012               	return		;funcret
  1676   0019FC                     __end_of_initDCmotorsPWM:
  1677                           	callstack 0
  1678                           
  1679 ;; *************** function _get_wall_detection *****************
  1680 ;; Defined at:
  1681 ;;		line 253 in file "color.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  2   22[COMRAM] unsigned int 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1698 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1699 ;;Total ram usage:        2 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; Hardware stack levels required when called: 6
  1702 ;; This function calls:
  1703 ;;		___wmul
  1704 ;; This function is called by:
  1705 ;;		_main
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text3
  1710   001BC2                     __ptext3:
  1711                           	callstack 0
  1712   001BC2                     _get_wall_detection:
  1713                           	callstack 24
  1714   001BC2                     
  1715                           ;color.c: 254:     if(clear1 == 0 || clear2 == 0){return 0;}
  1716   001BC2  5046               	movf	_clear1^0,w,c
  1717   001BC4  1047               	iorwf	(_clear1+1)^0,w,c
  1718   001BC6  B4D8               	btfsc	status,2,c
  1719   001BC8  EFE8  F00D         	goto	u3331
  1720   001BCC  EFEA  F00D         	goto	u3330
  1721   001BD0                     u3331:
  1722   001BD0  EFF3  F00D         	goto	l4074
  1723   001BD4                     u3330:
  1724   001BD4  5044               	movf	_clear2^0,w,c
  1725   001BD6  1045               	iorwf	(_clear2+1)^0,w,c
  1726   001BD8  A4D8               	btfss	status,2,c
  1727   001BDA  EFF1  F00D         	goto	u3341
  1728   001BDE  EFF3  F00D         	goto	u3340
  1729   001BE2                     u3341:
  1730   001BE2  EFF9  F00D         	goto	l4078
  1731   001BE6                     u3340:
  1732   001BE6                     l4074:
  1733   001BE6  0E00               	movlw	0
  1734   001BE8  6E18               	movwf	(?_get_wall_detection+1)^0,c
  1735   001BEA  0E00               	movlw	0
  1736   001BEC  6E17               	movwf	?_get_wall_detection^0,c
  1737   001BEE  EF12  F00E         	goto	l157
  1738   001BF2                     l4078:
  1739                           
  1740                           ;color.c: 255:     return clear2 >= clear1*wall_coef;
  1741   001BF2  C046  F011         	movff	_clear1,___wmul@multiplier
  1742   001BF6  C047  F012         	movff	_clear1+1,___wmul@multiplier+1
  1743   001BFA  C04C  F013         	movff	_wall_coef,___wmul@multiplicand
  1744   001BFE  C04D  F014         	movff	_wall_coef+1,___wmul@multiplicand+1
  1745   001C02  EC7D  F010         	call	___wmul	;wreg free
  1746   001C06  5011               	movf	?___wmul^0,w,c
  1747   001C08  5C44               	subwf	_clear2^0,w,c
  1748   001C0A  5012               	movf	(?___wmul+1)^0,w,c
  1749   001C0C  5845               	subwfb	(_clear2+1)^0,w,c
  1750   001C0E  B0D8               	btfsc	status,0,c
  1751   001C10  EF0C  F00E         	goto	u3351
  1752   001C14  EF0F  F00E         	goto	u3350
  1753   001C18                     u3351:
  1754   001C18  0E01               	movlw	1
  1755   001C1A  EF10  F00E         	goto	u3360
  1756   001C1E                     u3350:
  1757   001C1E  0E00               	movlw	0
  1758   001C20                     u3360:
  1759   001C20  6E17               	movwf	?_get_wall_detection^0,c
  1760   001C22  6A18               	clrf	(?_get_wall_detection+1)^0,c
  1761   001C24                     l157:
  1762   001C24  0012               	return		;funcret
  1763   001C26                     __end_of_get_wall_detection:
  1764                           	callstack 0
  1765                           
  1766 ;; *************** function _get_state *****************
  1767 ;; Defined at:
  1768 ;;		line 430 in file "dc_motor.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  2   16[COMRAM] int 
  1775 ;; Registers used:
  1776 ;;		None
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1782 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1785 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1786 ;;Total ram usage:        2 bytes
  1787 ;; Hardware stack levels used: 1
  1788 ;; Hardware stack levels required when called: 5
  1789 ;; This function calls:
  1790 ;;		Nothing
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text4
  1797   002184                     __ptext4:
  1798                           	callstack 0
  1799   002184                     _get_state:
  1800                           	callstack 25
  1801   002184                     
  1802                           ;dc_motor.c: 432:     return state;
  1803   002184  C03E  F011         	movff	_state,?_get_state
  1804   002188  C03F  F012         	movff	_state+1,?_get_state+1
  1805   00218C  0012               	return		;funcret
  1806   00218E                     __end_of_get_state:
  1807                           	callstack 0
  1808                           
  1809 ;; *************** function _get_color_code *****************
  1810 ;; Defined at:
  1811 ;;		line 183 in file "color.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  value           2   46[BANK0 ] unsigned int 
  1816 ;;  i               2   48[BANK0 ] unsigned int 
  1817 ;;  NormalizedRG   12   50[BANK0 ] struct RGB_val
  1818 ;;  min_index       2   44[BANK0 ] unsigned int 
  1819 ;;  min_value       2   42[BANK0 ] unsigned int 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  2   50[COMRAM] unsigned int 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  1829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1830 ;;      Locals:         0      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1831 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1832 ;;      Totals:         4      44       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1833 ;;Total ram usage:       48 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 8
  1836 ;; This function calls:
  1837 ;;		___lldiv
  1838 ;;		___lmul
  1839 ;;		___wmul
  1840 ;;		_color_read_Blue
  1841 ;;		_color_read_Green
  1842 ;;		_color_read_Red
  1843 ;;		_get_color_distance
  1844 ;;		_set_led_color
  1845 ;; This function is called by:
  1846 ;;		_main
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text5
  1851   0005E8                     __ptext5:
  1852                           	callstack 0
  1853   0005E8                     _get_color_code:
  1854                           	callstack 22
  1855   0005E8                     
  1856                           ;color.c: 186:     set_led_color(0b100);
  1857   0005E8  0E00               	movlw	0
  1858   0005EA  6E12               	movwf	(set_led_color@color+1)^0,c
  1859   0005EC  0E04               	movlw	4
  1860   0005EE  6E11               	movwf	set_led_color@color^0,c
  1861   0005F0  ECA2  F00F         	call	_set_led_color	;wreg free
  1862   0005F4                     
  1863                           ;color.c: 187:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1864   0005F4  0E12               	movlw	18
  1865   0005F6  6E36               	movwf	(??_get_color_code+1)^0,c
  1866   0005F8  0EDC               	movlw	220
  1867   0005FA  6E35               	movwf	??_get_color_code^0,c
  1868   0005FC  0E60               	movlw	96
  1869   0005FE                     u4047:
  1870   0005FE  2EE8               	decfsz	wreg,f,c
  1871   000600  D7FE               	bra	u4047
  1872   000602  2E35               	decfsz	??_get_color_code^0,f,c
  1873   000604  D7FC               	bra	u4047
  1874   000606  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1875   000608  D7FA               	bra	u4047
  1876   00060A                     
  1877                           ;color.c: 188:     RGB.R = color_read_Red();
  1878   00060A  EC6D  F00E         	call	_color_read_Red	;wreg free
  1879   00060E  C015  F0E6         	movff	?_color_read_Red,_RGB
  1880   000612  C016  F0E7         	movff	?_color_read_Red+1,_RGB+1
  1881   000616  0100               	movlb	0	; () banked
  1882   000618  6BE8               	clrf	(_RGB+2)& (0+255),b
  1883   00061A  6BE9               	clrf	(_RGB+3)& (0+255),b
  1884   00061C                     
  1885                           ; BSR set to: 0
  1886                           ;color.c: 189:     set_led_color(0b010);
  1887   00061C  0E00               	movlw	0
  1888   00061E  6E12               	movwf	(set_led_color@color+1)^0,c
  1889   000620  0E02               	movlw	2
  1890   000622  6E11               	movwf	set_led_color@color^0,c
  1891   000624  ECA2  F00F         	call	_set_led_color	;wreg free
  1892   000628                     
  1893                           ;color.c: 190:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1894   000628  0E12               	movlw	18
  1895   00062A  6E36               	movwf	(??_get_color_code+1)^0,c
  1896   00062C  0EDC               	movlw	220
  1897   00062E  6E35               	movwf	??_get_color_code^0,c
  1898   000630  0E60               	movlw	96
  1899   000632                     u4057:
  1900   000632  2EE8               	decfsz	wreg,f,c
  1901   000634  D7FE               	bra	u4057
  1902   000636  2E35               	decfsz	??_get_color_code^0,f,c
  1903   000638  D7FC               	bra	u4057
  1904   00063A  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1905   00063C  D7FA               	bra	u4057
  1906                           
  1907                           ;color.c: 191:     RGB.G = color_read_Green();
  1908   00063E  EC95  F00E         	call	_color_read_Green	;wreg free
  1909   000642  C015  F0EA         	movff	?_color_read_Green,_RGB+4
  1910   000646  C016  F0EB         	movff	?_color_read_Green+1,_RGB+5
  1911   00064A  0100               	movlb	0	; () banked
  1912   00064C  6BEC               	clrf	(_RGB+6)& (0+255),b
  1913   00064E  6BED               	clrf	(_RGB+7)& (0+255),b
  1914   000650                     
  1915                           ; BSR set to: 0
  1916                           ;color.c: 192:     set_led_color(0b001);
  1917   000650  0E00               	movlw	0
  1918   000652  6E12               	movwf	(set_led_color@color+1)^0,c
  1919   000654  0E01               	movlw	1
  1920   000656  6E11               	movwf	set_led_color@color^0,c
  1921   000658  ECA2  F00F         	call	_set_led_color	;wreg free
  1922   00065C                     
  1923                           ;color.c: 193:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  1924   00065C  0E12               	movlw	18
  1925   00065E  6E36               	movwf	(??_get_color_code+1)^0,c
  1926   000660  0EDC               	movlw	220
  1927   000662  6E35               	movwf	??_get_color_code^0,c
  1928   000664  0E60               	movlw	96
  1929   000666                     u4067:
  1930   000666  2EE8               	decfsz	wreg,f,c
  1931   000668  D7FE               	bra	u4067
  1932   00066A  2E35               	decfsz	??_get_color_code^0,f,c
  1933   00066C  D7FC               	bra	u4067
  1934   00066E  2E36               	decfsz	(??_get_color_code+1)^0,f,c
  1935   000670  D7FA               	bra	u4067
  1936   000672                     
  1937                           ;color.c: 194:     RGB.B = color_read_Blue();
  1938   000672  ECE5  F00E         	call	_color_read_Blue	;wreg free
  1939   000676  C015  F0EE         	movff	?_color_read_Blue,_RGB+8
  1940   00067A  C016  F0EF         	movff	?_color_read_Blue+1,_RGB+9
  1941   00067E  0100               	movlb	0	; () banked
  1942   000680  6BF0               	clrf	(_RGB+10)& (0+255),b
  1943   000682  6BF1               	clrf	(_RGB+11)& (0+255),b
  1944   000684                     
  1945                           ; BSR set to: 0
  1946                           ;color.c: 195:     clear1 = 0;
  1947   000684  0E00               	movlw	0
  1948   000686  6E47               	movwf	(_clear1+1)^0,c
  1949   000688  0E00               	movlw	0
  1950   00068A  6E46               	movwf	_clear1^0,c
  1951   00068C                     
  1952                           ; BSR set to: 0
  1953                           ;color.c: 196:     clear2 = 0;
  1954   00068C  0E00               	movlw	0
  1955   00068E  6E45               	movwf	(_clear2+1)^0,c
  1956   000690  0E00               	movlw	0
  1957   000692  6E44               	movwf	_clear2^0,c
  1958   000694                     
  1959                           ; BSR set to: 0
  1960                           ;color.c: 197:     set_led_color(0b000);
  1961   000694  0E00               	movlw	0
  1962   000696  6E12               	movwf	(set_led_color@color+1)^0,c
  1963   000698  0E00               	movlw	0
  1964   00069A  6E11               	movwf	set_led_color@color^0,c
  1965   00069C  ECA2  F00F         	call	_set_led_color	;wreg free
  1966   0006A0                     
  1967                           ;color.c: 199:     struct RGB_val NormalizedRGB;;color.c: 200:     NormalizedRGB.R = RGB
      +                          .R >= Black_setup.R ? (RGB.R - Black_setup.R)*100/(White_setup.R - Black_setup.R) : 0;
  1968   0006A0  0100               	movlb	0	; () banked
  1969   0006A2  5160               	movf	_Black_setup& (0+255),w,b
  1970   0006A4  5DE6               	subwf	_RGB& (0+255),w,b
  1971   0006A6  5161               	movf	(_Black_setup+1)& (0+255),w,b
  1972   0006A8  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  1973   0006AA  5162               	movf	(_Black_setup+2)& (0+255),w,b
  1974   0006AC  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  1975   0006AE  5163               	movf	(_Black_setup+3)& (0+255),w,b
  1976   0006B0  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  1977   0006B2  B0D8               	btfsc	status,0,c
  1978   0006B4  EF5E  F003         	goto	u3231
  1979   0006B8  EF60  F003         	goto	u3230
  1980   0006BC                     u3231:
  1981   0006BC  EF6A  F003         	goto	l4028
  1982   0006C0                     u3230:
  1983   0006C0                     
  1984                           ; BSR set to: 0
  1985   0006C0  0E00               	movlw	0
  1986   0006C2  6FC6               	movwf	_get_color_code$463& (0+255),b
  1987   0006C4  0E00               	movlw	0
  1988   0006C6  6FC7               	movwf	(_get_color_code$463+1)& (0+255),b
  1989   0006C8  0E00               	movlw	0
  1990   0006CA  6FC8               	movwf	(_get_color_code$463+2)& (0+255),b
  1991   0006CC  0E00               	movlw	0
  1992   0006CE  6FC9               	movwf	(_get_color_code$463+3)& (0+255),b
  1993   0006D0  EF9F  F003         	goto	l4030
  1994   0006D4                     l4028:
  1995                           
  1996                           ; BSR set to: 0
  1997   0006D4  5160               	movf	_Black_setup& (0+255),w,b
  1998   0006D6  5DE6               	subwf	_RGB& (0+255),w,b
  1999   0006D8  6E11               	movwf	___lmul@multiplier^0,c
  2000   0006DA  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2001   0006DC  59E7               	subwfb	(_RGB+1)& (0+255),w,b
  2002   0006DE  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2003   0006E0  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2004   0006E2  59E8               	subwfb	(_RGB+2)& (0+255),w,b
  2005   0006E4  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2006   0006E6  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2007   0006E8  59E9               	subwfb	(_RGB+3)& (0+255),w,b
  2008   0006EA  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2009   0006EC  0E64               	movlw	100
  2010   0006EE  6E15               	movwf	___lmul@multiplicand^0,c
  2011   0006F0  0E00               	movlw	0
  2012   0006F2  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2013   0006F4  0E00               	movlw	0
  2014   0006F6  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2015   0006F8  0E00               	movlw	0
  2016   0006FA  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2017   0006FC  ECAC  F00D         	call	___lmul	;wreg free
  2018   000700  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2019   000704  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2020   000708  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2021   00070C  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2022   000710  0100               	movlb	0	; () banked
  2023   000712  5160               	movf	_Black_setup& (0+255),w,b
  2024   000714  5D6C               	subwf	_White_setup& (0+255),w,b
  2025   000716  6E21               	movwf	___lldiv@divisor^0,c
  2026   000718  5161               	movf	(_Black_setup+1)& (0+255),w,b
  2027   00071A  596D               	subwfb	(_White_setup+1)& (0+255),w,b
  2028   00071C  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2029   00071E  5162               	movf	(_Black_setup+2)& (0+255),w,b
  2030   000720  596E               	subwfb	(_White_setup+2)& (0+255),w,b
  2031   000722  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2032   000724  5163               	movf	(_Black_setup+3)& (0+255),w,b
  2033   000726  596F               	subwfb	(_White_setup+3)& (0+255),w,b
  2034   000728  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2035   00072A  EC15  F00C         	call	___lldiv	;wreg free
  2036   00072E  C01D  F0C6         	movff	?___lldiv,_get_color_code$463
  2037   000732  C01E  F0C7         	movff	?___lldiv+1,_get_color_code$463+1
  2038   000736  C01F  F0C8         	movff	?___lldiv+2,_get_color_code$463+2
  2039   00073A  C020  F0C9         	movff	?___lldiv+3,_get_color_code$463+3
  2040   00073E                     l4030:
  2041   00073E  C0C6  F0DA         	movff	_get_color_code$463,get_color_code@NormalizedRGB
  2042   000742  C0C7  F0DB         	movff	_get_color_code$463+1,get_color_code@NormalizedRGB+1
  2043   000746  C0C8  F0DC         	movff	_get_color_code$463+2,get_color_code@NormalizedRGB+2
  2044   00074A  C0C9  F0DD         	movff	_get_color_code$463+3,get_color_code@NormalizedRGB+3
  2045   00074E                     
  2046                           ;color.c: 201:     NormalizedRGB.G = RGB.G >= Black_setup.G ? (RGB.G - Black_setup.G)*10
      +                          0/(White_setup.G - Black_setup.G) : 0;
  2047   00074E  0100               	movlb	0	; () banked
  2048   000750  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2049   000752  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2050   000754  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2051   000756  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2052   000758  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2053   00075A  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2054   00075C  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2055   00075E  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2056   000760  B0D8               	btfsc	status,0,c
  2057   000762  EFB5  F003         	goto	u3241
  2058   000766  EFB7  F003         	goto	u3240
  2059   00076A                     u3241:
  2060   00076A  EFC1  F003         	goto	l4036
  2061   00076E                     u3240:
  2062   00076E                     
  2063                           ; BSR set to: 0
  2064   00076E  0E00               	movlw	0
  2065   000770  6FCA               	movwf	_get_color_code$464& (0+255),b
  2066   000772  0E00               	movlw	0
  2067   000774  6FCB               	movwf	(_get_color_code$464+1)& (0+255),b
  2068   000776  0E00               	movlw	0
  2069   000778  6FCC               	movwf	(_get_color_code$464+2)& (0+255),b
  2070   00077A  0E00               	movlw	0
  2071   00077C  6FCD               	movwf	(_get_color_code$464+3)& (0+255),b
  2072   00077E  EFF6  F003         	goto	l4038
  2073   000782                     l4036:
  2074                           
  2075                           ; BSR set to: 0
  2076   000782  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2077   000784  5DEA               	subwf	(_RGB+4)& (0+255),w,b
  2078   000786  6E11               	movwf	___lmul@multiplier^0,c
  2079   000788  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2080   00078A  59EB               	subwfb	(_RGB+5)& (0+255),w,b
  2081   00078C  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2082   00078E  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2083   000790  59EC               	subwfb	(_RGB+6)& (0+255),w,b
  2084   000792  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2085   000794  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2086   000796  59ED               	subwfb	(_RGB+7)& (0+255),w,b
  2087   000798  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2088   00079A  0E64               	movlw	100
  2089   00079C  6E15               	movwf	___lmul@multiplicand^0,c
  2090   00079E  0E00               	movlw	0
  2091   0007A0  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2092   0007A2  0E00               	movlw	0
  2093   0007A4  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2094   0007A6  0E00               	movlw	0
  2095   0007A8  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2096   0007AA  ECAC  F00D         	call	___lmul	;wreg free
  2097   0007AE  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2098   0007B2  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2099   0007B6  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2100   0007BA  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2101   0007BE  0100               	movlb	0	; () banked
  2102   0007C0  5164               	movf	(_Black_setup+4)& (0+255),w,b
  2103   0007C2  5D70               	subwf	(_White_setup+4)& (0+255),w,b
  2104   0007C4  6E21               	movwf	___lldiv@divisor^0,c
  2105   0007C6  5165               	movf	(_Black_setup+5)& (0+255),w,b
  2106   0007C8  5971               	subwfb	(_White_setup+5)& (0+255),w,b
  2107   0007CA  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2108   0007CC  5166               	movf	(_Black_setup+6)& (0+255),w,b
  2109   0007CE  5972               	subwfb	(_White_setup+6)& (0+255),w,b
  2110   0007D0  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2111   0007D2  5167               	movf	(_Black_setup+7)& (0+255),w,b
  2112   0007D4  5973               	subwfb	(_White_setup+7)& (0+255),w,b
  2113   0007D6  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2114   0007D8  EC15  F00C         	call	___lldiv	;wreg free
  2115   0007DC  C01D  F0CA         	movff	?___lldiv,_get_color_code$464
  2116   0007E0  C01E  F0CB         	movff	?___lldiv+1,_get_color_code$464+1
  2117   0007E4  C01F  F0CC         	movff	?___lldiv+2,_get_color_code$464+2
  2118   0007E8  C020  F0CD         	movff	?___lldiv+3,_get_color_code$464+3
  2119   0007EC                     l4038:
  2120   0007EC  C0CA  F0DE         	movff	_get_color_code$464,get_color_code@NormalizedRGB+4
  2121   0007F0  C0CB  F0DF         	movff	_get_color_code$464+1,get_color_code@NormalizedRGB+5
  2122   0007F4  C0CC  F0E0         	movff	_get_color_code$464+2,get_color_code@NormalizedRGB+6
  2123   0007F8  C0CD  F0E1         	movff	_get_color_code$464+3,get_color_code@NormalizedRGB+7
  2124   0007FC                     
  2125                           ;color.c: 202:     NormalizedRGB.B = RGB.B >= Black_setup.B ? (RGB.B - Black_setup.B)*10
      +                          0/(White_setup.B - Black_setup.B) : 0;
  2126   0007FC  0100               	movlb	0	; () banked
  2127   0007FE  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2128   000800  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2129   000802  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2130   000804  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2131   000806  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2132   000808  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2133   00080A  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2134   00080C  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2135   00080E  B0D8               	btfsc	status,0,c
  2136   000810  EF0C  F004         	goto	u3251
  2137   000814  EF0E  F004         	goto	u3250
  2138   000818                     u3251:
  2139   000818  EF18  F004         	goto	l4044
  2140   00081C                     u3250:
  2141   00081C                     
  2142                           ; BSR set to: 0
  2143   00081C  0E00               	movlw	0
  2144   00081E  6FCE               	movwf	_get_color_code$465& (0+255),b
  2145   000820  0E00               	movlw	0
  2146   000822  6FCF               	movwf	(_get_color_code$465+1)& (0+255),b
  2147   000824  0E00               	movlw	0
  2148   000826  6FD0               	movwf	(_get_color_code$465+2)& (0+255),b
  2149   000828  0E00               	movlw	0
  2150   00082A  6FD1               	movwf	(_get_color_code$465+3)& (0+255),b
  2151   00082C  EF4D  F004         	goto	l4046
  2152   000830                     l4044:
  2153                           
  2154                           ; BSR set to: 0
  2155   000830  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2156   000832  5DEE               	subwf	(_RGB+8)& (0+255),w,b
  2157   000834  6E11               	movwf	___lmul@multiplier^0,c
  2158   000836  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2159   000838  59EF               	subwfb	(_RGB+9)& (0+255),w,b
  2160   00083A  6E12               	movwf	(___lmul@multiplier+1)^0,c
  2161   00083C  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2162   00083E  59F0               	subwfb	(_RGB+10)& (0+255),w,b
  2163   000840  6E13               	movwf	(___lmul@multiplier+2)^0,c
  2164   000842  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2165   000844  59F1               	subwfb	(_RGB+11)& (0+255),w,b
  2166   000846  6E14               	movwf	(___lmul@multiplier+3)^0,c
  2167   000848  0E64               	movlw	100
  2168   00084A  6E15               	movwf	___lmul@multiplicand^0,c
  2169   00084C  0E00               	movlw	0
  2170   00084E  6E16               	movwf	(___lmul@multiplicand+1)^0,c
  2171   000850  0E00               	movlw	0
  2172   000852  6E17               	movwf	(___lmul@multiplicand+2)^0,c
  2173   000854  0E00               	movlw	0
  2174   000856  6E18               	movwf	(___lmul@multiplicand+3)^0,c
  2175   000858  ECAC  F00D         	call	___lmul	;wreg free
  2176   00085C  C011  F01D         	movff	?___lmul,___lldiv@dividend
  2177   000860  C012  F01E         	movff	?___lmul+1,___lldiv@dividend+1
  2178   000864  C013  F01F         	movff	?___lmul+2,___lldiv@dividend+2
  2179   000868  C014  F020         	movff	?___lmul+3,___lldiv@dividend+3
  2180   00086C  0100               	movlb	0	; () banked
  2181   00086E  5168               	movf	(_Black_setup+8)& (0+255),w,b
  2182   000870  5D74               	subwf	(_White_setup+8)& (0+255),w,b
  2183   000872  6E21               	movwf	___lldiv@divisor^0,c
  2184   000874  5169               	movf	(_Black_setup+9)& (0+255),w,b
  2185   000876  5975               	subwfb	(_White_setup+9)& (0+255),w,b
  2186   000878  6E22               	movwf	(___lldiv@divisor+1)^0,c
  2187   00087A  516A               	movf	(_Black_setup+10)& (0+255),w,b
  2188   00087C  5976               	subwfb	(_White_setup+10)& (0+255),w,b
  2189   00087E  6E23               	movwf	(___lldiv@divisor+2)^0,c
  2190   000880  516B               	movf	(_Black_setup+11)& (0+255),w,b
  2191   000882  5977               	subwfb	(_White_setup+11)& (0+255),w,b
  2192   000884  6E24               	movwf	(___lldiv@divisor+3)^0,c
  2193   000886  EC15  F00C         	call	___lldiv	;wreg free
  2194   00088A  C01D  F0CE         	movff	?___lldiv,_get_color_code$465
  2195   00088E  C01E  F0CF         	movff	?___lldiv+1,_get_color_code$465+1
  2196   000892  C01F  F0D0         	movff	?___lldiv+2,_get_color_code$465+2
  2197   000896  C020  F0D1         	movff	?___lldiv+3,_get_color_code$465+3
  2198   00089A                     l4046:
  2199   00089A  C0CE  F0E2         	movff	_get_color_code$465,get_color_code@NormalizedRGB+8
  2200   00089E  C0CF  F0E3         	movff	_get_color_code$465+1,get_color_code@NormalizedRGB+9
  2201   0008A2  C0D0  F0E4         	movff	_get_color_code$465+2,get_color_code@NormalizedRGB+10
  2202   0008A6  C0D1  F0E5         	movff	_get_color_code$465+3,get_color_code@NormalizedRGB+11
  2203   0008AA                     
  2204                           ;color.c: 204:     unsigned int min_value = get_color_distance(NormalizedRGB,Color_rules
      +                          [0]);
  2205   0008AA  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2206   0008AE  EE00  F017         	lfsr	0,get_color_distance@color1
  2207   0008B2  0E0B               	movlw	11
  2208   0008B4                     u3261:
  2209   0008B4  CFDB FFEB          	movff	plusw2,plusw0
  2210   0008B8  06E8               	decf	wreg,f,c
  2211   0008BA  E2FC               	bc	u3261
  2212   0008BC  EE21  F000         	lfsr	2,_Color_rules
  2213   0008C0  EE00  F023         	lfsr	0,get_color_distance@color2
  2214   0008C4  0E0B               	movlw	11
  2215   0008C6                     u3271:
  2216   0008C6  CFDB FFEB          	movff	plusw2,plusw0
  2217   0008CA  06E8               	decf	wreg,f,c
  2218   0008CC  E2FC               	bc	u3271
  2219   0008CE  EC9A  F006         	call	_get_color_distance	;wreg free
  2220   0008D2  C017  F0D2         	movff	?_get_color_distance,get_color_code@min_value
  2221   0008D6  C018  F0D3         	movff	?_get_color_distance+1,get_color_code@min_value+1
  2222   0008DA                     
  2223                           ;color.c: 205:     unsigned int min_index = 0;
  2224   0008DA  0E00               	movlw	0
  2225   0008DC  0100               	movlb	0	; () banked
  2226   0008DE  6FD5               	movwf	(get_color_code@min_index+1)& (0+255),b
  2227   0008E0  0E00               	movlw	0
  2228   0008E2  6FD4               	movwf	get_color_code@min_index& (0+255),b
  2229   0008E4                     
  2230                           ; BSR set to: 0
  2231                           ;color.c: 206:     for(unsigned int i = 1;i < 9; i++){
  2232   0008E4  0E00               	movlw	0
  2233   0008E6  6FD9               	movwf	(get_color_code@i+1)& (0+255),b
  2234   0008E8  0E01               	movlw	1
  2235   0008EA  6FD8               	movwf	get_color_code@i& (0+255),b
  2236   0008EC                     l4058:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;color.c: 207:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2240   0008EC  C0D8  F011         	movff	get_color_code@i,___wmul@multiplier
  2241   0008F0  C0D9  F012         	movff	get_color_code@i+1,___wmul@multiplier+1
  2242   0008F4  0E00               	movlw	0
  2243   0008F6  6E14               	movwf	(___wmul@multiplicand+1)^0,c
  2244   0008F8  0E0C               	movlw	12
  2245   0008FA  6E13               	movwf	___wmul@multiplicand^0,c
  2246   0008FC  EC7D  F010         	call	___wmul	;wreg free
  2247   000900  0E00               	movlw	low _Color_rules
  2248   000902  2411               	addwf	?___wmul^0,w,c
  2249   000904  6ED9               	movwf	fsr2l,c
  2250   000906  0E01               	movlw	high _Color_rules
  2251   000908  2012               	addwfc	(?___wmul+1)^0,w,c
  2252   00090A  6EDA               	movwf	fsr2h,c
  2253   00090C  EE10  F0BA         	lfsr	1,_get_color_code$2463
  2254   000910  0E0B               	movlw	11
  2255   000912                     u3281:
  2256   000912  CFDB FFE3          	movff	plusw2,plusw1
  2257   000916  06E8               	decf	wreg,f,c
  2258   000918  E2FC               	bc	u3281
  2259   00091A                     
  2260                           ;color.c: 207:         unsigned int value = get_color_distance(NormalizedRGB,Color_rules
      +                          [i]);
  2261   00091A  EE20  F0DA         	lfsr	2,get_color_code@NormalizedRGB
  2262   00091E  EE00  F017         	lfsr	0,get_color_distance@color1
  2263   000922  0E0B               	movlw	11
  2264   000924                     u3291:
  2265   000924  CFDB FFEB          	movff	plusw2,plusw0
  2266   000928  06E8               	decf	wreg,f,c
  2267   00092A  E2FC               	bc	u3291
  2268   00092C  EE20  F0BA         	lfsr	2,_get_color_code$2463
  2269   000930  EE00  F023         	lfsr	0,get_color_distance@color2
  2270   000934  0E0B               	movlw	11
  2271   000936                     u3301:
  2272   000936  CFDB FFEB          	movff	plusw2,plusw0
  2273   00093A  06E8               	decf	wreg,f,c
  2274   00093C  E2FC               	bc	u3301
  2275   00093E  EC9A  F006         	call	_get_color_distance	;wreg free
  2276   000942  C017  F0D6         	movff	?_get_color_distance,get_color_code@value
  2277   000946  C018  F0D7         	movff	?_get_color_distance+1,get_color_code@value+1
  2278   00094A                     
  2279                           ;color.c: 208:         if(value < min_value){
  2280   00094A  0100               	movlb	0	; () banked
  2281   00094C  51D2               	movf	get_color_code@min_value& (0+255),w,b
  2282   00094E  5DD6               	subwf	get_color_code@value& (0+255),w,b
  2283   000950  51D3               	movf	(get_color_code@min_value+1)& (0+255),w,b
  2284   000952  59D7               	subwfb	(get_color_code@value+1)& (0+255),w,b
  2285   000954  B0D8               	btfsc	status,0,c
  2286   000956  EFAF  F004         	goto	u3311
  2287   00095A  EFB1  F004         	goto	u3310
  2288   00095E                     u3311:
  2289   00095E  EFB9  F004         	goto	l4066
  2290   000962                     u3310:
  2291   000962                     
  2292                           ; BSR set to: 0
  2293                           ;color.c: 209:             min_index = i;
  2294   000962  C0D8  F0D4         	movff	get_color_code@i,get_color_code@min_index
  2295   000966  C0D9  F0D5         	movff	get_color_code@i+1,get_color_code@min_index+1
  2296                           
  2297                           ;color.c: 210:             min_value = value;
  2298   00096A  C0D6  F0D2         	movff	get_color_code@value,get_color_code@min_value
  2299   00096E  C0D7  F0D3         	movff	get_color_code@value+1,get_color_code@min_value+1
  2300   000972                     l4066:
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;color.c: 212:     }
  2304   000972  4BD8               	infsnz	get_color_code@i& (0+255),f,b
  2305   000974  2BD9               	incf	(get_color_code@i+1)& (0+255),f,b
  2306   000976                     
  2307                           ; BSR set to: 0
  2308   000976  51D9               	movf	(get_color_code@i+1)& (0+255),w,b
  2309   000978  E109               	bnz	u3320
  2310   00097A  0E09               	movlw	9
  2311   00097C  5DD8               	subwf	get_color_code@i& (0+255),w,b
  2312   00097E  A0D8               	btfss	status,0,c
  2313   000980  EFC4  F004         	goto	u3321
  2314   000984  EFC6  F004         	goto	u3320
  2315   000988                     u3321:
  2316   000988  EF76  F004         	goto	l4058
  2317   00098C                     u3320:
  2318   00098C                     
  2319                           ; BSR set to: 0
  2320                           ;color.c: 213:     return min_index;
  2321   00098C  C0D4  F033         	movff	get_color_code@min_index,?_get_color_code
  2322   000990  C0D5  F034         	movff	get_color_code@min_index+1,?_get_color_code+1
  2323   000994                     
  2324                           ; BSR set to: 0
  2325   000994  0012               	return		;funcret
  2326   000996                     __end_of_get_color_code:
  2327                           	callstack 0
  2328                           
  2329 ;; *************** function _get_color_distance *****************
  2330 ;; Defined at:
  2331 ;;		line 149 in file "color.c"
  2332 ;; Parameters:    Size  Location     Type
  2333 ;;  color1         12   22[COMRAM] struct RGB_val
  2334 ;;  color2         12   34[COMRAM] struct RGB_val
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  B_offset        2   16[BANK0 ] unsigned int 
  2337 ;;  G_offset        2   14[BANK0 ] unsigned int 
  2338 ;;  R_offset        2   12[BANK0 ] unsigned int 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  2   22[COMRAM] unsigned int 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2348 ;;      Params:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2349 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2350 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2351 ;;      Totals:        28      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2352 ;;Total ram usage:       46 bytes
  2353 ;; Hardware stack levels used: 1
  2354 ;; Hardware stack levels required when called: 6
  2355 ;; This function calls:
  2356 ;;		___wmul
  2357 ;; This function is called by:
  2358 ;;		_get_color_code
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text6
  2363   000D34                     __ptext6:
  2364                           	callstack 0
  2365   000D34                     _get_color_distance:
  2366                           	callstack 23
  2367   000D34                     
  2368                           ;color.c: 150:     unsigned int R_offset = color1.R >= color2.R ? color1.R - color2.R : 
      +                          color2.R - color1.R;
  2369   000D34  5023               	movf	get_color_distance@color2^0,w,c
  2370   000D36  5C17               	subwf	get_color_distance@color1^0,w,c
  2371   000D38  5024               	movf	(get_color_distance@color2+1)^0,w,c
  2372   000D3A  5818               	subwfb	(get_color_distance@color1+1)^0,w,c
  2373   000D3C  5025               	movf	(get_color_distance@color2+2)^0,w,c
  2374   000D3E  5819               	subwfb	(get_color_distance@color1+2)^0,w,c
  2375   000D40  5026               	movf	(get_color_distance@color2+3)^0,w,c
  2376   000D42  581A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2377   000D44  B0D8               	btfsc	status,0,c
  2378   000D46  EFA7  F006         	goto	u2891
  2379   000D4A  EFA9  F006         	goto	u2890
  2380   000D4E                     u2891:
  2381   000D4E  EFB8  F006         	goto	l3668
  2382   000D52                     u2890:
  2383   000D52  5017               	movf	get_color_distance@color1^0,w,c
  2384   000D54  5C23               	subwf	get_color_distance@color2^0,w,c
  2385   000D56  0100               	movlb	0	; () banked
  2386   000D58  6FA8               	movwf	_get_color_distance$421& (0+255),b
  2387   000D5A  5018               	movf	(get_color_distance@color1+1)^0,w,c
  2388   000D5C  5824               	subwfb	(get_color_distance@color2+1)^0,w,c
  2389   000D5E  6FA9               	movwf	(_get_color_distance$421+1)& (0+255),b
  2390   000D60  5019               	movf	(get_color_distance@color1+2)^0,w,c
  2391   000D62  5825               	subwfb	(get_color_distance@color2+2)^0,w,c
  2392   000D64  6FAA               	movwf	(_get_color_distance$421+2)& (0+255),b
  2393   000D66  501A               	movf	(get_color_distance@color1+3)^0,w,c
  2394   000D68  5826               	subwfb	(get_color_distance@color2+3)^0,w,c
  2395   000D6A  6FAB               	movwf	(_get_color_distance$421+3)& (0+255),b
  2396   000D6C  EFC5  F006         	goto	l3670
  2397   000D70                     l3668:
  2398   000D70  5023               	movf	get_color_distance@color2^0,w,c
  2399   000D72  5C17               	subwf	get_color_distance@color1^0,w,c
  2400   000D74  0100               	movlb	0	; () banked
  2401   000D76  6FA8               	movwf	_get_color_distance$421& (0+255),b
  2402   000D78  5024               	movf	(get_color_distance@color2+1)^0,w,c
  2403   000D7A  5818               	subwfb	(get_color_distance@color1+1)^0,w,c
  2404   000D7C  6FA9               	movwf	(_get_color_distance$421+1)& (0+255),b
  2405   000D7E  5025               	movf	(get_color_distance@color2+2)^0,w,c
  2406   000D80  5819               	subwfb	(get_color_distance@color1+2)^0,w,c
  2407   000D82  6FAA               	movwf	(_get_color_distance$421+2)& (0+255),b
  2408   000D84  5026               	movf	(get_color_distance@color2+3)^0,w,c
  2409   000D86  581A               	subwfb	(get_color_distance@color1+3)^0,w,c
  2410   000D88  6FAB               	movwf	(_get_color_distance$421+3)& (0+255),b
  2411   000D8A                     l3670:
  2412                           
  2413                           ; BSR set to: 0
  2414   000D8A  C0A8  F0B4         	movff	_get_color_distance$421,get_color_distance@R_offset
  2415   000D8E  C0A9  F0B5         	movff	_get_color_distance$421+1,get_color_distance@R_offset+1
  2416                           
  2417                           ;color.c: 151:     unsigned int G_offset = color1.G >= color2.G ? color1.G - color2.G : 
      +                          color2.G - color1.G;
  2418   000D92  5027               	movf	(get_color_distance@color2+4)^0,w,c
  2419   000D94  5C1B               	subwf	(get_color_distance@color1+4)^0,w,c
  2420   000D96  5028               	movf	(get_color_distance@color2+5)^0,w,c
  2421   000D98  581C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2422   000D9A  5029               	movf	(get_color_distance@color2+6)^0,w,c
  2423   000D9C  581D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2424   000D9E  502A               	movf	(get_color_distance@color2+7)^0,w,c
  2425   000DA0  581E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2426   000DA2  B0D8               	btfsc	status,0,c
  2427   000DA4  EFD6  F006         	goto	u2901
  2428   000DA8  EFD8  F006         	goto	u2900
  2429   000DAC                     u2901:
  2430   000DAC  EFE6  F006         	goto	l3674
  2431   000DB0                     u2900:
  2432   000DB0                     
  2433                           ; BSR set to: 0
  2434   000DB0  501B               	movf	(get_color_distance@color1+4)^0,w,c
  2435   000DB2  5C27               	subwf	(get_color_distance@color2+4)^0,w,c
  2436   000DB4  6FAC               	movwf	_get_color_distance$423& (0+255),b
  2437   000DB6  501C               	movf	(get_color_distance@color1+5)^0,w,c
  2438   000DB8  5828               	subwfb	(get_color_distance@color2+5)^0,w,c
  2439   000DBA  6FAD               	movwf	(_get_color_distance$423+1)& (0+255),b
  2440   000DBC  501D               	movf	(get_color_distance@color1+6)^0,w,c
  2441   000DBE  5829               	subwfb	(get_color_distance@color2+6)^0,w,c
  2442   000DC0  6FAE               	movwf	(_get_color_distance$423+2)& (0+255),b
  2443   000DC2  501E               	movf	(get_color_distance@color1+7)^0,w,c
  2444   000DC4  582A               	subwfb	(get_color_distance@color2+7)^0,w,c
  2445   000DC6  6FAF               	movwf	(_get_color_distance$423+3)& (0+255),b
  2446   000DC8  EFF2  F006         	goto	l3676
  2447   000DCC                     l3674:
  2448                           
  2449                           ; BSR set to: 0
  2450   000DCC  5027               	movf	(get_color_distance@color2+4)^0,w,c
  2451   000DCE  5C1B               	subwf	(get_color_distance@color1+4)^0,w,c
  2452   000DD0  6FAC               	movwf	_get_color_distance$423& (0+255),b
  2453   000DD2  5028               	movf	(get_color_distance@color2+5)^0,w,c
  2454   000DD4  581C               	subwfb	(get_color_distance@color1+5)^0,w,c
  2455   000DD6  6FAD               	movwf	(_get_color_distance$423+1)& (0+255),b
  2456   000DD8  5029               	movf	(get_color_distance@color2+6)^0,w,c
  2457   000DDA  581D               	subwfb	(get_color_distance@color1+6)^0,w,c
  2458   000DDC  6FAE               	movwf	(_get_color_distance$423+2)& (0+255),b
  2459   000DDE  502A               	movf	(get_color_distance@color2+7)^0,w,c
  2460   000DE0  581E               	subwfb	(get_color_distance@color1+7)^0,w,c
  2461   000DE2  6FAF               	movwf	(_get_color_distance$423+3)& (0+255),b
  2462   000DE4                     l3676:
  2463                           
  2464                           ; BSR set to: 0
  2465   000DE4  C0AC  F0B6         	movff	_get_color_distance$423,get_color_distance@G_offset
  2466   000DE8  C0AD  F0B7         	movff	_get_color_distance$423+1,get_color_distance@G_offset+1
  2467                           
  2468                           ;color.c: 152:     unsigned int B_offset = color1.B >= color2.B ? color1.B - color2.B : 
      +                          color2.B - color1.B;
  2469   000DEC  502B               	movf	(get_color_distance@color2+8)^0,w,c
  2470   000DEE  5C1F               	subwf	(get_color_distance@color1+8)^0,w,c
  2471   000DF0  502C               	movf	(get_color_distance@color2+9)^0,w,c
  2472   000DF2  5820               	subwfb	(get_color_distance@color1+9)^0,w,c
  2473   000DF4  502D               	movf	(get_color_distance@color2+10)^0,w,c
  2474   000DF6  5821               	subwfb	(get_color_distance@color1+10)^0,w,c
  2475   000DF8  502E               	movf	(get_color_distance@color2+11)^0,w,c
  2476   000DFA  5822               	subwfb	(get_color_distance@color1+11)^0,w,c
  2477   000DFC  B0D8               	btfsc	status,0,c
  2478   000DFE  EF03  F007         	goto	u2911
  2479   000E02  EF05  F007         	goto	u2910
  2480   000E06                     u2911:
  2481   000E06  EF13  F007         	goto	l3680
  2482   000E0A                     u2910:
  2483   000E0A                     
  2484                           ; BSR set to: 0
  2485   000E0A  501F               	movf	(get_color_distance@color1+8)^0,w,c
  2486   000E0C  5C2B               	subwf	(get_color_distance@color2+8)^0,w,c
  2487   000E0E  6FB0               	movwf	_get_color_distance$425& (0+255),b
  2488   000E10  5020               	movf	(get_color_distance@color1+9)^0,w,c
  2489   000E12  582C               	subwfb	(get_color_distance@color2+9)^0,w,c
  2490   000E14  6FB1               	movwf	(_get_color_distance$425+1)& (0+255),b
  2491   000E16  5021               	movf	(get_color_distance@color1+10)^0,w,c
  2492   000E18  582D               	subwfb	(get_color_distance@color2+10)^0,w,c
  2493   000E1A  6FB2               	movwf	(_get_color_distance$425+2)& (0+255),b
  2494   000E1C  5022               	movf	(get_color_distance@color1+11)^0,w,c
  2495   000E1E  582E               	subwfb	(get_color_distance@color2+11)^0,w,c
  2496   000E20  6FB3               	movwf	(_get_color_distance$425+3)& (0+255),b
  2497   000E22  EF1F  F007         	goto	l3682
  2498   000E26                     l3680:
  2499                           
  2500                           ; BSR set to: 0
  2501   000E26  502B               	movf	(get_color_distance@color2+8)^0,w,c
  2502   000E28  5C1F               	subwf	(get_color_distance@color1+8)^0,w,c
  2503   000E2A  6FB0               	movwf	_get_color_distance$425& (0+255),b
  2504   000E2C  502C               	movf	(get_color_distance@color2+9)^0,w,c
  2505   000E2E  5820               	subwfb	(get_color_distance@color1+9)^0,w,c
  2506   000E30  6FB1               	movwf	(_get_color_distance$425+1)& (0+255),b
  2507   000E32  502D               	movf	(get_color_distance@color2+10)^0,w,c
  2508   000E34  5821               	subwfb	(get_color_distance@color1+10)^0,w,c
  2509   000E36  6FB2               	movwf	(_get_color_distance$425+2)& (0+255),b
  2510   000E38  502E               	movf	(get_color_distance@color2+11)^0,w,c
  2511   000E3A  5822               	subwfb	(get_color_distance@color1+11)^0,w,c
  2512   000E3C  6FB3               	movwf	(_get_color_distance$425+3)& (0+255),b
  2513   000E3E                     l3682:
  2514                           
  2515                           ; BSR set to: 0
  2516   000E3E  C0B0  F0B8         	movff	_get_color_distance$425,get_color_distance@B_offset
  2517   000E42  C0B1  F0B9         	movff	_get_color_distance$425+1,get_color_distance@B_offset+1
  2518   000E46                     
  2519                           ; BSR set to: 0
  2520                           ;color.c: 154:     return R_offset*R_offset + G_offset*G_offset + B_offset*B_offset;
  2521   000E46  C0B4  F011         	movff	get_color_distance@R_offset,___wmul@multiplier
  2522   000E4A  C0B5  F012         	movff	get_color_distance@R_offset+1,___wmul@multiplier+1
  2523   000E4E  C0B4  F013         	movff	get_color_distance@R_offset,___wmul@multiplicand
  2524   000E52  C0B5  F014         	movff	get_color_distance@R_offset+1,___wmul@multiplicand+1
  2525   000E56  EC7D  F010         	call	___wmul	;wreg free
  2526   000E5A  C011  F02F         	movff	?___wmul,??_get_color_distance
  2527   000E5E  C012  F030         	movff	?___wmul+1,??_get_color_distance+1
  2528   000E62  C0B6  F011         	movff	get_color_distance@G_offset,___wmul@multiplier
  2529   000E66  C0B7  F012         	movff	get_color_distance@G_offset+1,___wmul@multiplier+1
  2530   000E6A  C0B6  F013         	movff	get_color_distance@G_offset,___wmul@multiplicand
  2531   000E6E  C0B7  F014         	movff	get_color_distance@G_offset+1,___wmul@multiplicand+1
  2532   000E72  EC7D  F010         	call	___wmul	;wreg free
  2533   000E76  5011               	movf	?___wmul^0,w,c
  2534   000E78  242F               	addwf	??_get_color_distance^0,w,c
  2535   000E7A  6E31               	movwf	(??_get_color_distance+2)^0,c
  2536   000E7C  5012               	movf	(?___wmul+1)^0,w,c
  2537   000E7E  2030               	addwfc	(??_get_color_distance+1)^0,w,c
  2538   000E80  6E32               	movwf	(??_get_color_distance+3)^0,c
  2539   000E82  C0B8  F011         	movff	get_color_distance@B_offset,___wmul@multiplier
  2540   000E86  C0B9  F012         	movff	get_color_distance@B_offset+1,___wmul@multiplier+1
  2541   000E8A  C0B8  F013         	movff	get_color_distance@B_offset,___wmul@multiplicand
  2542   000E8E  C0B9  F014         	movff	get_color_distance@B_offset+1,___wmul@multiplicand+1
  2543   000E92  EC7D  F010         	call	___wmul	;wreg free
  2544   000E96  5011               	movf	?___wmul^0,w,c
  2545   000E98  2431               	addwf	(??_get_color_distance+2)^0,w,c
  2546   000E9A  6E17               	movwf	?_get_color_distance^0,c
  2547   000E9C  5012               	movf	(?___wmul+1)^0,w,c
  2548   000E9E  2032               	addwfc	(??_get_color_distance+3)^0,w,c
  2549   000EA0  6E18               	movwf	(?_get_color_distance+1)^0,c
  2550   000EA2  0012               	return		;funcret
  2551   000EA4                     __end_of_get_color_distance:
  2552                           	callstack 0
  2553                           
  2554 ;; *************** function ___lmul *****************
  2555 ;; Defined at:
  2556 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul32.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;  multiplier      4   16[COMRAM] unsigned long 
  2559 ;;  multiplicand    4   20[COMRAM] unsigned long 
  2560 ;; Auto vars:     Size  Location     Type
  2561 ;;  product         4   24[COMRAM] unsigned long 
  2562 ;; Return value:  Size  Location     Type
  2563 ;;                  4   16[COMRAM] unsigned long 
  2564 ;; Registers used:
  2565 ;;		wreg, status,2, status,0
  2566 ;; Tracked objects:
  2567 ;;		On entry : 0/0
  2568 ;;		On exit  : 0/0
  2569 ;;		Unchanged: 0/0
  2570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2571 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2572 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2574 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2575 ;;Total ram usage:       12 bytes
  2576 ;; Hardware stack levels used: 1
  2577 ;; Hardware stack levels required when called: 5
  2578 ;; This function calls:
  2579 ;;		Nothing
  2580 ;; This function is called by:
  2581 ;;		_get_color_code
  2582 ;; This function uses a non-reentrant model
  2583 ;;
  2584                           
  2585                           	psect	text7
  2586   001B58                     __ptext7:
  2587                           	callstack 0
  2588   001B58                     ___lmul:
  2589                           	callstack 24
  2590   001B58  0E00               	movlw	0
  2591   001B5A  6E19               	movwf	___lmul@product^0,c
  2592   001B5C  0E00               	movlw	0
  2593   001B5E  6E1A               	movwf	(___lmul@product+1)^0,c
  2594   001B60  0E00               	movlw	0
  2595   001B62  6E1B               	movwf	(___lmul@product+2)^0,c
  2596   001B64  0E00               	movlw	0
  2597   001B66  6E1C               	movwf	(___lmul@product+3)^0,c
  2598   001B68                     l3922:
  2599   001B68  A011               	btfss	___lmul@multiplier^0,0,c
  2600   001B6A  EFB9  F00D         	goto	u3041
  2601   001B6E  EFBB  F00D         	goto	u3040
  2602   001B72                     u3041:
  2603   001B72  EFC3  F00D         	goto	l3926
  2604   001B76                     u3040:
  2605   001B76  5015               	movf	___lmul@multiplicand^0,w,c
  2606   001B78  2619               	addwf	___lmul@product^0,f,c
  2607   001B7A  5016               	movf	(___lmul@multiplicand+1)^0,w,c
  2608   001B7C  221A               	addwfc	(___lmul@product+1)^0,f,c
  2609   001B7E  5017               	movf	(___lmul@multiplicand+2)^0,w,c
  2610   001B80  221B               	addwfc	(___lmul@product+2)^0,f,c
  2611   001B82  5018               	movf	(___lmul@multiplicand+3)^0,w,c
  2612   001B84  221C               	addwfc	(___lmul@product+3)^0,f,c
  2613   001B86                     l3926:
  2614   001B86  90D8               	bcf	status,0,c
  2615   001B88  3615               	rlcf	___lmul@multiplicand^0,f,c
  2616   001B8A  3616               	rlcf	(___lmul@multiplicand+1)^0,f,c
  2617   001B8C  3617               	rlcf	(___lmul@multiplicand+2)^0,f,c
  2618   001B8E  3618               	rlcf	(___lmul@multiplicand+3)^0,f,c
  2619   001B90  90D8               	bcf	status,0,c
  2620   001B92  3214               	rrcf	(___lmul@multiplier+3)^0,f,c
  2621   001B94  3213               	rrcf	(___lmul@multiplier+2)^0,f,c
  2622   001B96  3212               	rrcf	(___lmul@multiplier+1)^0,f,c
  2623   001B98  3211               	rrcf	___lmul@multiplier^0,f,c
  2624   001B9A  5011               	movf	___lmul@multiplier^0,w,c
  2625   001B9C  1012               	iorwf	(___lmul@multiplier+1)^0,w,c
  2626   001B9E  1013               	iorwf	(___lmul@multiplier+2)^0,w,c
  2627   001BA0  1014               	iorwf	(___lmul@multiplier+3)^0,w,c
  2628   001BA2  A4D8               	btfss	status,2,c
  2629   001BA4  EFD6  F00D         	goto	u3051
  2630   001BA8  EFD8  F00D         	goto	u3050
  2631   001BAC                     u3051:
  2632   001BAC  EFB4  F00D         	goto	l3922
  2633   001BB0                     u3050:
  2634   001BB0  C019  F011         	movff	___lmul@product,?___lmul
  2635   001BB4  C01A  F012         	movff	___lmul@product+1,?___lmul+1
  2636   001BB8  C01B  F013         	movff	___lmul@product+2,?___lmul+2
  2637   001BBC  C01C  F014         	movff	___lmul@product+3,?___lmul+3
  2638   001BC0  0012               	return		;funcret
  2639   001BC2                     __end_of___lmul:
  2640                           	callstack 0
  2641                           
  2642 ;; *************** function ___lldiv *****************
  2643 ;; Defined at:
  2644 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\__lldiv.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  dividend        4   28[COMRAM] unsigned long 
  2647 ;;  divisor         4   32[COMRAM] unsigned long 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  quotient        4   36[COMRAM] unsigned long 
  2650 ;;  counter         1   40[COMRAM] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  4   28[COMRAM] unsigned long 
  2653 ;; Registers used:
  2654 ;;		wreg, status,2, status,0
  2655 ;; Tracked objects:
  2656 ;;		On entry : 0/0
  2657 ;;		On exit  : 0/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2660 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2661 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2663 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2664 ;;Total ram usage:       13 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 5
  2667 ;; This function calls:
  2668 ;;		Nothing
  2669 ;; This function is called by:
  2670 ;;		_get_color_code
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text8
  2675   00182A                     __ptext8:
  2676                           	callstack 0
  2677   00182A                     ___lldiv:
  2678                           	callstack 24
  2679   00182A  0E00               	movlw	0
  2680   00182C  6E25               	movwf	___lldiv@quotient^0,c
  2681   00182E  0E00               	movlw	0
  2682   001830  6E26               	movwf	(___lldiv@quotient+1)^0,c
  2683   001832  0E00               	movlw	0
  2684   001834  6E27               	movwf	(___lldiv@quotient+2)^0,c
  2685   001836  0E00               	movlw	0
  2686   001838  6E28               	movwf	(___lldiv@quotient+3)^0,c
  2687   00183A  5021               	movf	___lldiv@divisor^0,w,c
  2688   00183C  1022               	iorwf	(___lldiv@divisor+1)^0,w,c
  2689   00183E  1023               	iorwf	(___lldiv@divisor+2)^0,w,c
  2690   001840  1024               	iorwf	(___lldiv@divisor+3)^0,w,c
  2691   001842  B4D8               	btfsc	status,2,c
  2692   001844  EF26  F00C         	goto	u3061
  2693   001848  EF28  F00C         	goto	u3060
  2694   00184C                     u3061:
  2695   00184C  EF5E  F00C         	goto	l504
  2696   001850                     u3060:
  2697   001850  0E01               	movlw	1
  2698   001852  6E29               	movwf	___lldiv@counter^0,c
  2699   001854  EF32  F00C         	goto	l3938
  2700   001858                     l3936:
  2701   001858  90D8               	bcf	status,0,c
  2702   00185A  3621               	rlcf	___lldiv@divisor^0,f,c
  2703   00185C  3622               	rlcf	(___lldiv@divisor+1)^0,f,c
  2704   00185E  3623               	rlcf	(___lldiv@divisor+2)^0,f,c
  2705   001860  3624               	rlcf	(___lldiv@divisor+3)^0,f,c
  2706   001862  2A29               	incf	___lldiv@counter^0,f,c
  2707   001864                     l3938:
  2708   001864  AE24               	btfss	(___lldiv@divisor+3)^0,7,c
  2709   001866  EF37  F00C         	goto	u3071
  2710   00186A  EF39  F00C         	goto	u3070
  2711   00186E                     u3071:
  2712   00186E  EF2C  F00C         	goto	l3936
  2713   001872                     u3070:
  2714   001872                     l3940:
  2715   001872  90D8               	bcf	status,0,c
  2716   001874  3625               	rlcf	___lldiv@quotient^0,f,c
  2717   001876  3626               	rlcf	(___lldiv@quotient+1)^0,f,c
  2718   001878  3627               	rlcf	(___lldiv@quotient+2)^0,f,c
  2719   00187A  3628               	rlcf	(___lldiv@quotient+3)^0,f,c
  2720   00187C  5021               	movf	___lldiv@divisor^0,w,c
  2721   00187E  5C1D               	subwf	___lldiv@dividend^0,w,c
  2722   001880  5022               	movf	(___lldiv@divisor+1)^0,w,c
  2723   001882  581E               	subwfb	(___lldiv@dividend+1)^0,w,c
  2724   001884  5023               	movf	(___lldiv@divisor+2)^0,w,c
  2725   001886  581F               	subwfb	(___lldiv@dividend+2)^0,w,c
  2726   001888  5024               	movf	(___lldiv@divisor+3)^0,w,c
  2727   00188A  5820               	subwfb	(___lldiv@dividend+3)^0,w,c
  2728   00188C  A0D8               	btfss	status,0,c
  2729   00188E  EF4B  F00C         	goto	u3081
  2730   001892  EF4D  F00C         	goto	u3080
  2731   001896                     u3081:
  2732   001896  EF56  F00C         	goto	l3948
  2733   00189A                     u3080:
  2734   00189A  5021               	movf	___lldiv@divisor^0,w,c
  2735   00189C  5E1D               	subwf	___lldiv@dividend^0,f,c
  2736   00189E  5022               	movf	(___lldiv@divisor+1)^0,w,c
  2737   0018A0  5A1E               	subwfb	(___lldiv@dividend+1)^0,f,c
  2738   0018A2  5023               	movf	(___lldiv@divisor+2)^0,w,c
  2739   0018A4  5A1F               	subwfb	(___lldiv@dividend+2)^0,f,c
  2740   0018A6  5024               	movf	(___lldiv@divisor+3)^0,w,c
  2741   0018A8  5A20               	subwfb	(___lldiv@dividend+3)^0,f,c
  2742   0018AA  8025               	bsf	___lldiv@quotient^0,0,c
  2743   0018AC                     l3948:
  2744   0018AC  90D8               	bcf	status,0,c
  2745   0018AE  3224               	rrcf	(___lldiv@divisor+3)^0,f,c
  2746   0018B0  3223               	rrcf	(___lldiv@divisor+2)^0,f,c
  2747   0018B2  3222               	rrcf	(___lldiv@divisor+1)^0,f,c
  2748   0018B4  3221               	rrcf	___lldiv@divisor^0,f,c
  2749   0018B6  2E29               	decfsz	___lldiv@counter^0,f,c
  2750   0018B8  EF39  F00C         	goto	l3940
  2751   0018BC                     l504:
  2752   0018BC  C025  F01D         	movff	___lldiv@quotient,?___lldiv
  2753   0018C0  C026  F01E         	movff	___lldiv@quotient+1,?___lldiv+1
  2754   0018C4  C027  F01F         	movff	___lldiv@quotient+2,?___lldiv+2
  2755   0018C8  C028  F020         	movff	___lldiv@quotient+3,?___lldiv+3
  2756   0018CC  0012               	return		;funcret
  2757   0018CE                     __end_of___lldiv:
  2758                           	callstack 0
  2759                           
  2760 ;; *************** function _fullSpeedAhead *****************
  2761 ;; Defined at:
  2762 ;;		line 256 in file "dc_motor.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  2765 ;;		 -> main@motorL(9), 
  2766 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  2767 ;;		 -> main@motorR(9), 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;                  1    wreg      void 
  2772 ;; Registers used:
  2773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 0/0
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2779 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2782 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2783 ;;Total ram usage:        4 bytes
  2784 ;; Hardware stack levels used: 1
  2785 ;; Hardware stack levels required when called: 7
  2786 ;; This function calls:
  2787 ;;		_setMotorPWM
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792                           
  2793                           	psect	text9
  2794   001C26                     __ptext9:
  2795                           	callstack 0
  2796   001C26                     _fullSpeedAhead:
  2797                           	callstack 23
  2798   001C26                     
  2799                           ;dc_motor.c: 256: void fullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR);dc_motor
      +                          .c: 257: {;dc_motor.c: 258:     seconds = 0;
  2800   001C26  0E00               	movlw	0
  2801   001C28  6E43               	movwf	(_seconds+1)^0,c
  2802   001C2A  0E00               	movlw	0
  2803   001C2C  6E42               	movwf	_seconds^0,c
  2804   001C2E                     
  2805                           ;dc_motor.c: 259:     (*mL).direction=0;
  2806   001C2E  EE20 F001          	lfsr	2,1
  2807   001C32  5024               	movf	fullSpeedAhead@mL^0,w,c
  2808   001C34  26D9               	addwf	fsr2l,f,c
  2809   001C36  5025               	movf	(fullSpeedAhead@mL+1)^0,w,c
  2810   001C38  22DA               	addwfc	fsr2h,f,c
  2811   001C3A  0E00               	movlw	0
  2812   001C3C  6EDF               	movwf	indf2,c
  2813   001C3E                     
  2814                           ;dc_motor.c: 260:     (*mR).direction=0;
  2815   001C3E  EE20 F001          	lfsr	2,1
  2816   001C42  5026               	movf	fullSpeedAhead@mR^0,w,c
  2817   001C44  26D9               	addwf	fsr2l,f,c
  2818   001C46  5027               	movf	(fullSpeedAhead@mR+1)^0,w,c
  2819   001C48  22DA               	addwfc	fsr2h,f,c
  2820   001C4A  0E00               	movlw	0
  2821   001C4C  6EDF               	movwf	indf2,c
  2822   001C4E                     
  2823                           ;dc_motor.c: 261:     (*mL).power=50;
  2824   001C4E  C024  FFD9         	movff	fullSpeedAhead@mL,fsr2l
  2825   001C52  C025  FFDA         	movff	fullSpeedAhead@mL+1,fsr2h
  2826   001C56  0E32               	movlw	50
  2827   001C58  6EDF               	movwf	indf2,c
  2828   001C5A                     
  2829                           ;dc_motor.c: 262:     (*mR).power=50;
  2830   001C5A  C026  FFD9         	movff	fullSpeedAhead@mR,fsr2l
  2831   001C5E  C027  FFDA         	movff	fullSpeedAhead@mR+1,fsr2h
  2832   001C62  0E32               	movlw	50
  2833   001C64  6EDF               	movwf	indf2,c
  2834   001C66                     
  2835                           ;dc_motor.c: 263:     setMotorPWM(mL);
  2836   001C66  C024  F01E         	movff	fullSpeedAhead@mL,setMotorPWM@m
  2837   001C6A  C025  F01F         	movff	fullSpeedAhead@mL+1,setMotorPWM@m+1
  2838   001C6E  EC52  F007         	call	_setMotorPWM	;wreg free
  2839   001C72                     
  2840                           ;dc_motor.c: 264:     setMotorPWM(mR);
  2841   001C72  C026  F01E         	movff	fullSpeedAhead@mR,setMotorPWM@m
  2842   001C76  C027  F01F         	movff	fullSpeedAhead@mR+1,setMotorPWM@m+1
  2843   001C7A  EC52  F007         	call	_setMotorPWM	;wreg free
  2844   001C7E  0012               	return		;funcret
  2845   001C80                     __end_of_fullSpeedAhead:
  2846                           	callstack 0
  2847                           
  2848 ;; *************** function _color_click_init *****************
  2849 ;; Defined at:
  2850 ;;		line 33 in file "color.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;		None
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;		None
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2866 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2867 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2868 ;;Total ram usage:        1 bytes
  2869 ;; Hardware stack levels used: 1
  2870 ;; Hardware stack levels required when called: 9
  2871 ;; This function calls:
  2872 ;;		_I2C_2_Master_Init
  2873 ;;		_calibrate_black
  2874 ;;		_calibrate_white
  2875 ;;		_color_writetoaddr
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text10
  2882   0013F8                     __ptext10:
  2883                           	callstack 0
  2884   0013F8                     _color_click_init:
  2885                           	callstack 21
  2886   0013F8                     
  2887                           ;color.c: 36:     I2C_2_Master_Init();
  2888   0013F8  EC40  F010         	call	_I2C_2_Master_Init	;wreg free
  2889   0013FC                     
  2890                           ;color.c: 39:   color_writetoaddr(0x00, 0x01);
  2891   0013FC  0E01               	movlw	1
  2892   0013FE  6E13               	movwf	color_writetoaddr@value^0,c
  2893   001400  0E00               	movlw	0
  2894   001402  EC90  F010         	call	_color_writetoaddr
  2895   001406                     
  2896                           ;color.c: 40:     _delay((unsigned long)((3)*(64000000/4000.0)));
  2897   001406  0E3F               	movlw	63
  2898   001408  6E26               	movwf	??_color_click_init^0,c
  2899   00140A  0E55               	movlw	85
  2900   00140C                     u4077:
  2901   00140C  2EE8               	decfsz	wreg,f,c
  2902   00140E  D7FE               	bra	u4077
  2903   001410  2E26               	decfsz	??_color_click_init^0,f,c
  2904   001412  D7FC               	bra	u4077
  2905   001414  F000               	nop	
  2906   001416                     
  2907                           ;color.c: 43:  color_writetoaddr(0x00, 0x03);
  2908   001416  0E03               	movlw	3
  2909   001418  6E13               	movwf	color_writetoaddr@value^0,c
  2910   00141A  0E00               	movlw	0
  2911   00141C  EC90  F010         	call	_color_writetoaddr
  2912   001420                     
  2913                           ;color.c: 46:  color_writetoaddr(0x01, 0xD5);
  2914   001420  0ED5               	movlw	213
  2915   001422  6E13               	movwf	color_writetoaddr@value^0,c
  2916   001424  0E01               	movlw	1
  2917   001426  EC90  F010         	call	_color_writetoaddr
  2918   00142A                     
  2919                           ;color.c: 48:     TRISFbits.TRISF7 = 0;
  2920   00142A  9E86               	bcf	134,7,c	;volatile
  2921   00142C                     
  2922                           ;color.c: 49:     TRISGbits.TRISG1 = 0;
  2923   00142C  9287               	bcf	135,1,c	;volatile
  2924   00142E                     
  2925                           ;color.c: 50:     TRISAbits.TRISA4 = 0;
  2926   00142E  9881               	bcf	129,4,c	;volatile
  2927   001430                     
  2928                           ;color.c: 52:     Color_rules[0] = Red_rule;
  2929   001430  EE20  F09C         	lfsr	2,_Red_rule
  2930   001434  EE11  F000         	lfsr	1,_Color_rules
  2931   001438  0E0B               	movlw	11
  2932   00143A                     u3091:
  2933   00143A  CFDB FFE3          	movff	plusw2,plusw1
  2934   00143E  06E8               	decf	wreg,f,c
  2935   001440  E2FC               	bc	u3091
  2936   001442                     
  2937                           ;color.c: 53:     Color_rules[1] = Green_rule;
  2938   001442  EE20  F090         	lfsr	2,_Green_rule
  2939   001446  EE11  F00C         	lfsr	1,_Color_rules+12
  2940   00144A  0E0B               	movlw	11
  2941   00144C                     u3101:
  2942   00144C  CFDB FFE3          	movff	plusw2,plusw1
  2943   001450  06E8               	decf	wreg,f,c
  2944   001452  E2FC               	bc	u3101
  2945   001454                     
  2946                           ;color.c: 54:     Color_rules[2] = Blue_rule;
  2947   001454  EE20  F084         	lfsr	2,_Blue_rule
  2948   001458  EE11  F018         	lfsr	1,_Color_rules+24
  2949   00145C  0E0B               	movlw	11
  2950   00145E                     u3111:
  2951   00145E  CFDB FFE3          	movff	plusw2,plusw1
  2952   001462  06E8               	decf	wreg,f,c
  2953   001464  E2FC               	bc	u3111
  2954   001466                     
  2955                           ;color.c: 55:     Color_rules[3] = Yellow_rule;
  2956   001466  EE20  F078         	lfsr	2,_Yellow_rule
  2957   00146A  EE11  F024         	lfsr	1,_Color_rules+36
  2958   00146E  0E0B               	movlw	11
  2959   001470                     u3121:
  2960   001470  CFDB FFE3          	movff	plusw2,plusw1
  2961   001474  06E8               	decf	wreg,f,c
  2962   001476  E2FC               	bc	u3121
  2963   001478                     
  2964                           ;color.c: 56:     Color_rules[4] = Pink_rule;
  2965   001478  EE21  F09C         	lfsr	2,_Pink_rule
  2966   00147C  EE11  F030         	lfsr	1,_Color_rules+48
  2967   001480  0E0B               	movlw	11
  2968   001482                     u3131:
  2969   001482  CFDB FFE3          	movff	plusw2,plusw1
  2970   001486  06E8               	decf	wreg,f,c
  2971   001488  E2FC               	bc	u3131
  2972   00148A                     
  2973                           ;color.c: 57:     Color_rules[5] = Orange_rule;
  2974   00148A  EE21  F090         	lfsr	2,_Orange_rule
  2975   00148E  EE11  F03C         	lfsr	1,_Color_rules+60
  2976   001492  0E0B               	movlw	11
  2977   001494                     u3141:
  2978   001494  CFDB FFE3          	movff	plusw2,plusw1
  2979   001498  06E8               	decf	wreg,f,c
  2980   00149A  E2FC               	bc	u3141
  2981   00149C                     
  2982                           ;color.c: 58:     Color_rules[6] = Lightblue_rule;
  2983   00149C  EE21  F084         	lfsr	2,_Lightblue_rule
  2984   0014A0  EE11  F048         	lfsr	1,_Color_rules+72
  2985   0014A4  0E0B               	movlw	11
  2986   0014A6                     u3151:
  2987   0014A6  CFDB FFE3          	movff	plusw2,plusw1
  2988   0014AA  06E8               	decf	wreg,f,c
  2989   0014AC  E2FC               	bc	u3151
  2990   0014AE                     
  2991                           ;color.c: 59:     Color_rules[7] = White_rule;
  2992   0014AE  EE21  F078         	lfsr	2,_White_rule
  2993   0014B2  EE11  F054         	lfsr	1,_Color_rules+84
  2994   0014B6  0E0B               	movlw	11
  2995   0014B8                     u3161:
  2996   0014B8  CFDB FFE3          	movff	plusw2,plusw1
  2997   0014BC  06E8               	decf	wreg,f,c
  2998   0014BE  E2FC               	bc	u3161
  2999   0014C0                     
  3000                           ;color.c: 60:     Color_rules[8] = Black_rule;
  3001   0014C0  EE21  F06C         	lfsr	2,_Black_rule
  3002   0014C4  EE11  F060         	lfsr	1,_Color_rules+96
  3003   0014C8  0E0B               	movlw	11
  3004   0014CA                     u3171:
  3005   0014CA  CFDB FFE3          	movff	plusw2,plusw1
  3006   0014CE  06E8               	decf	wreg,f,c
  3007   0014D0  E2FC               	bc	u3171
  3008   0014D2                     
  3009                           ;color.c: 69:     TRISFbits.TRISF3=1;
  3010   0014D2  8686               	bsf	134,3,c	;volatile
  3011   0014D4                     
  3012                           ;color.c: 70:     ANSELFbits.ANSELF3=0;
  3013   0014D4  010E               	movlb	14	; () banked
  3014   0014D6  97B4               	bcf	180,3,b	;volatile
  3015   0014D8                     
  3016                           ; BSR set to: 14
  3017                           ;color.c: 71:     TRISFbits.TRISF2=1;
  3018   0014D8  8486               	bsf	134,2,c	;volatile
  3019   0014DA                     
  3020                           ; BSR set to: 14
  3021                           ;color.c: 72:     ANSELFbits.ANSELF2=0;
  3022   0014DA  95B4               	bcf	180,2,b	;volatile
  3023   0014DC                     l71:
  3024   0014DC  A68E               	btfss	142,3,c	;volatile
  3025   0014DE  EF73  F00A         	goto	u3181
  3026   0014E2  EF75  F00A         	goto	u3180
  3027   0014E6                     u3181:
  3028   0014E6  EF7C  F00A         	goto	l75
  3029   0014EA                     u3180:
  3030   0014EA  B48E               	btfsc	142,2,c	;volatile
  3031   0014EC  EF7A  F00A         	goto	u3191
  3032   0014F0  EF7C  F00A         	goto	u3190
  3033   0014F4                     u3191:
  3034   0014F4  EF6E  F00A         	goto	l71
  3035   0014F8                     u3190:
  3036   0014F8                     l75:
  3037                           
  3038                           ;color.c: 75:     if(!PORTFbits.RF2){
  3039   0014F8  B48E               	btfsc	142,2,c	;volatile
  3040   0014FA  EF81  F00A         	goto	u3201
  3041   0014FE  EF83  F00A         	goto	u3200
  3042   001502                     u3201:
  3043   001502  EF85  F00A         	goto	l3998
  3044   001506                     u3200:
  3045   001506  EF97  F00A         	goto	l77
  3046   00150A                     l3998:
  3047                           
  3048                           ;color.c: 78:     calibrate_white();
  3049   00150A  ECC0  F00B         	call	_calibrate_white	;wreg free
  3050   00150E                     l78:
  3051   00150E  B68E               	btfsc	142,3,c	;volatile
  3052   001510  EF8C  F00A         	goto	u3211
  3053   001514  EF8E  F00A         	goto	u3210
  3054   001518                     u3211:
  3055   001518  EF87  F00A         	goto	l78
  3056   00151C                     u3210:
  3057   00151C                     
  3058                           ;color.c: 80:     calibrate_black();
  3059   00151C  EC5D  F009         	call	_calibrate_black	;wreg free
  3060   001520                     l81:
  3061   001520  B68E               	btfsc	142,3,c	;volatile
  3062   001522  EF95  F00A         	goto	u3221
  3063   001526  EF97  F00A         	goto	u3220
  3064   00152A                     u3221:
  3065   00152A  EF90  F00A         	goto	l81
  3066   00152E                     u3220:
  3067   00152E                     l77:
  3068   00152E  0012               	return		;funcret
  3069   001530                     __end_of_color_click_init:
  3070                           	callstack 0
  3071                           
  3072 ;; *************** function _color_writetoaddr *****************
  3073 ;; Defined at:
  3074 ;;		line 85 in file "color.c"
  3075 ;; Parameters:    Size  Location     Type
  3076 ;;  address         1    wreg     unsigned char 
  3077 ;;  value           1   18[COMRAM] unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  address         1   19[COMRAM] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0, cstack
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3093 ;;Total ram usage:        2 bytes
  3094 ;; Hardware stack levels used: 1
  3095 ;; Hardware stack levels required when called: 7
  3096 ;; This function calls:
  3097 ;;		_I2C_2_Master_Start
  3098 ;;		_I2C_2_Master_Stop
  3099 ;;		_I2C_2_Master_Write
  3100 ;; This function is called by:
  3101 ;;		_color_click_init
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text11
  3106   002120                     __ptext11:
  3107                           	callstack 0
  3108   002120                     _color_writetoaddr:
  3109                           	callstack 22
  3110                           
  3111                           ;incstack = 0
  3112                           ;color_writetoaddr@address stored from wreg
  3113   002120  6E14               	movwf	color_writetoaddr@address^0,c
  3114   002122                     
  3115                           ;color.c: 86:     I2C_2_Master_Start();
  3116   002122  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3117                           
  3118                           ;color.c: 87:     I2C_2_Master_Write(0x52 | 0x00);
  3119   002126  0E52               	movlw	82
  3120   002128  ECB0  F010         	call	_I2C_2_Master_Write
  3121                           
  3122                           ;color.c: 88:     I2C_2_Master_Write(0x80 | address);
  3123   00212C  5014               	movf	color_writetoaddr@address^0,w,c
  3124   00212E  0980               	iorlw	128
  3125   002130  ECB0  F010         	call	_I2C_2_Master_Write
  3126                           
  3127                           ;color.c: 89:     I2C_2_Master_Write(value);
  3128   002134  5013               	movf	color_writetoaddr@value^0,w,c
  3129   002136  ECB0  F010         	call	_I2C_2_Master_Write
  3130                           
  3131                           ;color.c: 90:     I2C_2_Master_Stop();
  3132   00213A  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3133   00213E  0012               	return		;funcret
  3134   002140                     __end_of_color_writetoaddr:
  3135                           	callstack 0
  3136                           
  3137 ;; *************** function _calibrate_white *****************
  3138 ;; Defined at:
  3139 ;;		line 238 in file "color.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3155 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3157 ;;Total ram usage:        2 bytes
  3158 ;; Hardware stack levels used: 1
  3159 ;; Hardware stack levels required when called: 8
  3160 ;; This function calls:
  3161 ;;		_color_read_Blue
  3162 ;;		_color_read_Green
  3163 ;;		_color_read_Red
  3164 ;;		_set_led_color
  3165 ;; This function is called by:
  3166 ;;		_color_click_init
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text12
  3171   001780                     __ptext12:
  3172                           	callstack 0
  3173   001780                     _calibrate_white:
  3174                           	callstack 21
  3175   001780                     
  3176                           ;color.c: 239:     set_led_color(0b100);
  3177   001780  0E00               	movlw	0
  3178   001782  6E12               	movwf	(set_led_color@color+1)^0,c
  3179   001784  0E04               	movlw	4
  3180   001786  6E11               	movwf	set_led_color@color^0,c
  3181   001788  ECA2  F00F         	call	_set_led_color	;wreg free
  3182   00178C                     
  3183                           ;color.c: 240:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3184   00178C  0E12               	movlw	18
  3185   00178E  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3186   001790  0EDC               	movlw	220
  3187   001792  6E1C               	movwf	??_calibrate_white^0,c
  3188   001794  0E60               	movlw	96
  3189   001796                     u4087:
  3190   001796  2EE8               	decfsz	wreg,f,c
  3191   001798  D7FE               	bra	u4087
  3192   00179A  2E1C               	decfsz	??_calibrate_white^0,f,c
  3193   00179C  D7FC               	bra	u4087
  3194   00179E  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3195   0017A0  D7FA               	bra	u4087
  3196   0017A2                     
  3197                           ;color.c: 241:     White_setup.R = color_read_Red();
  3198   0017A2  EC6D  F00E         	call	_color_read_Red	;wreg free
  3199   0017A6  C015  F06C         	movff	?_color_read_Red,_White_setup
  3200   0017AA  C016  F06D         	movff	?_color_read_Red+1,_White_setup+1
  3201   0017AE  0100               	movlb	0	; () banked
  3202   0017B0  6B6E               	clrf	(_White_setup+2)& (0+255),b
  3203   0017B2  6B6F               	clrf	(_White_setup+3)& (0+255),b
  3204   0017B4                     
  3205                           ; BSR set to: 0
  3206                           ;color.c: 242:     set_led_color(0b010);
  3207   0017B4  0E00               	movlw	0
  3208   0017B6  6E12               	movwf	(set_led_color@color+1)^0,c
  3209   0017B8  0E02               	movlw	2
  3210   0017BA  6E11               	movwf	set_led_color@color^0,c
  3211   0017BC  ECA2  F00F         	call	_set_led_color	;wreg free
  3212   0017C0                     
  3213                           ;color.c: 243:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3214   0017C0  0E12               	movlw	18
  3215   0017C2  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3216   0017C4  0EDC               	movlw	220
  3217   0017C6  6E1C               	movwf	??_calibrate_white^0,c
  3218   0017C8  0E60               	movlw	96
  3219   0017CA                     u4097:
  3220   0017CA  2EE8               	decfsz	wreg,f,c
  3221   0017CC  D7FE               	bra	u4097
  3222   0017CE  2E1C               	decfsz	??_calibrate_white^0,f,c
  3223   0017D0  D7FC               	bra	u4097
  3224   0017D2  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3225   0017D4  D7FA               	bra	u4097
  3226                           
  3227                           ;color.c: 244:     White_setup.G = color_read_Green();
  3228   0017D6  EC95  F00E         	call	_color_read_Green	;wreg free
  3229   0017DA  C015  F070         	movff	?_color_read_Green,_White_setup+4
  3230   0017DE  C016  F071         	movff	?_color_read_Green+1,_White_setup+5
  3231   0017E2  0100               	movlb	0	; () banked
  3232   0017E4  6B72               	clrf	(_White_setup+6)& (0+255),b
  3233   0017E6  6B73               	clrf	(_White_setup+7)& (0+255),b
  3234   0017E8                     
  3235                           ; BSR set to: 0
  3236                           ;color.c: 245:     set_led_color(0b001);
  3237   0017E8  0E00               	movlw	0
  3238   0017EA  6E12               	movwf	(set_led_color@color+1)^0,c
  3239   0017EC  0E01               	movlw	1
  3240   0017EE  6E11               	movwf	set_led_color@color^0,c
  3241   0017F0  ECA2  F00F         	call	_set_led_color	;wreg free
  3242   0017F4                     
  3243                           ;color.c: 246:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3244   0017F4  0E12               	movlw	18
  3245   0017F6  6E1D               	movwf	(??_calibrate_white+1)^0,c
  3246   0017F8  0EDC               	movlw	220
  3247   0017FA  6E1C               	movwf	??_calibrate_white^0,c
  3248   0017FC  0E60               	movlw	96
  3249   0017FE                     u4107:
  3250   0017FE  2EE8               	decfsz	wreg,f,c
  3251   001800  D7FE               	bra	u4107
  3252   001802  2E1C               	decfsz	??_calibrate_white^0,f,c
  3253   001804  D7FC               	bra	u4107
  3254   001806  2E1D               	decfsz	(??_calibrate_white+1)^0,f,c
  3255   001808  D7FA               	bra	u4107
  3256   00180A                     
  3257                           ;color.c: 247:     White_setup.B = color_read_Blue();
  3258   00180A  ECE5  F00E         	call	_color_read_Blue	;wreg free
  3259   00180E  C015  F074         	movff	?_color_read_Blue,_White_setup+8
  3260   001812  C016  F075         	movff	?_color_read_Blue+1,_White_setup+9
  3261   001816  0100               	movlb	0	; () banked
  3262   001818  6B76               	clrf	(_White_setup+10)& (0+255),b
  3263   00181A  6B77               	clrf	(_White_setup+11)& (0+255),b
  3264   00181C                     
  3265                           ; BSR set to: 0
  3266                           ;color.c: 248:     set_led_color(0b000);
  3267   00181C  0E00               	movlw	0
  3268   00181E  6E12               	movwf	(set_led_color@color+1)^0,c
  3269   001820  0E00               	movlw	0
  3270   001822  6E11               	movwf	set_led_color@color^0,c
  3271   001824  ECA2  F00F         	call	_set_led_color	;wreg free
  3272   001828  0012               	return		;funcret
  3273   00182A                     __end_of_calibrate_white:
  3274                           	callstack 0
  3275                           
  3276 ;; *************** function _calibrate_black *****************
  3277 ;; Defined at:
  3278 ;;		line 218 in file "color.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  clear2          2   33[COMRAM] unsigned int 
  3283 ;;  clear1          2   31[COMRAM] unsigned int 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3294 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3295 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3296 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3297 ;;Total ram usage:        8 bytes
  3298 ;; Hardware stack levels used: 1
  3299 ;; Hardware stack levels required when called: 8
  3300 ;; This function calls:
  3301 ;;		___lwdiv
  3302 ;;		_color_read_Blue
  3303 ;;		_color_read_Clear
  3304 ;;		_color_read_Green
  3305 ;;		_color_read_Red
  3306 ;;		_set_led_color
  3307 ;; This function is called by:
  3308 ;;		_color_click_init
  3309 ;; This function uses a non-reentrant model
  3310 ;;
  3311                           
  3312                           	psect	text13
  3313   0012BA                     __ptext13:
  3314                           	callstack 0
  3315   0012BA                     _calibrate_black:
  3316                           	callstack 21
  3317   0012BA                     
  3318                           ;color.c: 219:     set_led_color(0b100);
  3319   0012BA  0E00               	movlw	0
  3320   0012BC  6E12               	movwf	(set_led_color@color+1)^0,c
  3321   0012BE  0E04               	movlw	4
  3322   0012C0  6E11               	movwf	set_led_color@color^0,c
  3323   0012C2  ECA2  F00F         	call	_set_led_color	;wreg free
  3324   0012C6                     
  3325                           ;color.c: 220:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3326   0012C6  0E12               	movlw	18
  3327   0012C8  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3328   0012CA  0EDC               	movlw	220
  3329   0012CC  6E1E               	movwf	??_calibrate_black^0,c
  3330   0012CE  0E60               	movlw	96
  3331   0012D0                     u4117:
  3332   0012D0  2EE8               	decfsz	wreg,f,c
  3333   0012D2  D7FE               	bra	u4117
  3334   0012D4  2E1E               	decfsz	??_calibrate_black^0,f,c
  3335   0012D6  D7FC               	bra	u4117
  3336   0012D8  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3337   0012DA  D7FA               	bra	u4117
  3338   0012DC                     
  3339                           ;color.c: 221:     Black_setup.R = color_read_Red();
  3340   0012DC  EC6D  F00E         	call	_color_read_Red	;wreg free
  3341   0012E0  C015  F060         	movff	?_color_read_Red,_Black_setup
  3342   0012E4  C016  F061         	movff	?_color_read_Red+1,_Black_setup+1
  3343   0012E8  0100               	movlb	0	; () banked
  3344   0012EA  6B62               	clrf	(_Black_setup+2)& (0+255),b
  3345   0012EC  6B63               	clrf	(_Black_setup+3)& (0+255),b
  3346   0012EE                     
  3347                           ; BSR set to: 0
  3348                           ;color.c: 222:     set_led_color(0b010);
  3349   0012EE  0E00               	movlw	0
  3350   0012F0  6E12               	movwf	(set_led_color@color+1)^0,c
  3351   0012F2  0E02               	movlw	2
  3352   0012F4  6E11               	movwf	set_led_color@color^0,c
  3353   0012F6  ECA2  F00F         	call	_set_led_color	;wreg free
  3354   0012FA                     
  3355                           ;color.c: 223:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3356   0012FA  0E12               	movlw	18
  3357   0012FC  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3358   0012FE  0EDC               	movlw	220
  3359   001300  6E1E               	movwf	??_calibrate_black^0,c
  3360   001302  0E60               	movlw	96
  3361   001304                     u4127:
  3362   001304  2EE8               	decfsz	wreg,f,c
  3363   001306  D7FE               	bra	u4127
  3364   001308  2E1E               	decfsz	??_calibrate_black^0,f,c
  3365   00130A  D7FC               	bra	u4127
  3366   00130C  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3367   00130E  D7FA               	bra	u4127
  3368                           
  3369                           ;color.c: 224:     Black_setup.G = color_read_Green();
  3370   001310  EC95  F00E         	call	_color_read_Green	;wreg free
  3371   001314  C015  F064         	movff	?_color_read_Green,_Black_setup+4
  3372   001318  C016  F065         	movff	?_color_read_Green+1,_Black_setup+5
  3373   00131C  0100               	movlb	0	; () banked
  3374   00131E  6B66               	clrf	(_Black_setup+6)& (0+255),b
  3375   001320  6B67               	clrf	(_Black_setup+7)& (0+255),b
  3376   001322                     
  3377                           ; BSR set to: 0
  3378                           ;color.c: 225:     set_led_color(0b001);
  3379   001322  0E00               	movlw	0
  3380   001324  6E12               	movwf	(set_led_color@color+1)^0,c
  3381   001326  0E01               	movlw	1
  3382   001328  6E11               	movwf	set_led_color@color^0,c
  3383   00132A  ECA2  F00F         	call	_set_led_color	;wreg free
  3384   00132E                     
  3385                           ;color.c: 226:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3386   00132E  0E12               	movlw	18
  3387   001330  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3388   001332  0EDC               	movlw	220
  3389   001334  6E1E               	movwf	??_calibrate_black^0,c
  3390   001336  0E60               	movlw	96
  3391   001338                     u4137:
  3392   001338  2EE8               	decfsz	wreg,f,c
  3393   00133A  D7FE               	bra	u4137
  3394   00133C  2E1E               	decfsz	??_calibrate_black^0,f,c
  3395   00133E  D7FC               	bra	u4137
  3396   001340  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3397   001342  D7FA               	bra	u4137
  3398   001344                     
  3399                           ;color.c: 227:     Black_setup.B = color_read_Blue();
  3400   001344  ECE5  F00E         	call	_color_read_Blue	;wreg free
  3401   001348  C015  F068         	movff	?_color_read_Blue,_Black_setup+8
  3402   00134C  C016  F069         	movff	?_color_read_Blue+1,_Black_setup+9
  3403   001350  0100               	movlb	0	; () banked
  3404   001352  6B6A               	clrf	(_Black_setup+10)& (0+255),b
  3405   001354  6B6B               	clrf	(_Black_setup+11)& (0+255),b
  3406   001356                     
  3407                           ; BSR set to: 0
  3408                           ;color.c: 228:     set_led_color(0b000);
  3409   001356  0E00               	movlw	0
  3410   001358  6E12               	movwf	(set_led_color@color+1)^0,c
  3411   00135A  0E00               	movlw	0
  3412   00135C  6E11               	movwf	set_led_color@color^0,c
  3413   00135E  ECA2  F00F         	call	_set_led_color	;wreg free
  3414                           
  3415                           ;color.c: 229:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3416   001362  0E12               	movlw	18
  3417   001364  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3418   001366  0EDC               	movlw	220
  3419   001368  6E1E               	movwf	??_calibrate_black^0,c
  3420   00136A  0E60               	movlw	96
  3421   00136C                     u4147:
  3422   00136C  2EE8               	decfsz	wreg,f,c
  3423   00136E  D7FE               	bra	u4147
  3424   001370  2E1E               	decfsz	??_calibrate_black^0,f,c
  3425   001372  D7FC               	bra	u4147
  3426   001374  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3427   001376  D7FA               	bra	u4147
  3428   001378                     
  3429                           ;color.c: 230:     unsigned int clear1 = color_read_Clear();
  3430   001378  ECBD  F00E         	call	_color_read_Clear	;wreg free
  3431   00137C  C015  F020         	movff	?_color_read_Clear,calibrate_black@clear1
  3432   001380  C016  F021         	movff	?_color_read_Clear+1,calibrate_black@clear1+1
  3433   001384                     
  3434                           ;color.c: 231:     set_led_color(0b111);
  3435   001384  0E00               	movlw	0
  3436   001386  6E12               	movwf	(set_led_color@color+1)^0,c
  3437   001388  0E07               	movlw	7
  3438   00138A  6E11               	movwf	set_led_color@color^0,c
  3439   00138C  ECA2  F00F         	call	_set_led_color	;wreg free
  3440   001390                     
  3441                           ;color.c: 232:     _delay((unsigned long)((wait_time)*(64000000/4000.0)));
  3442   001390  0E12               	movlw	18
  3443   001392  6E1F               	movwf	(??_calibrate_black+1)^0,c
  3444   001394  0EDC               	movlw	220
  3445   001396  6E1E               	movwf	??_calibrate_black^0,c
  3446   001398  0E60               	movlw	96
  3447   00139A                     u4157:
  3448   00139A  2EE8               	decfsz	wreg,f,c
  3449   00139C  D7FE               	bra	u4157
  3450   00139E  2E1E               	decfsz	??_calibrate_black^0,f,c
  3451   0013A0  D7FC               	bra	u4157
  3452   0013A2  2E1F               	decfsz	(??_calibrate_black+1)^0,f,c
  3453   0013A4  D7FA               	bra	u4157
  3454   0013A6                     
  3455                           ;color.c: 233:     unsigned int clear2 = color_read_Clear();
  3456   0013A6  ECBD  F00E         	call	_color_read_Clear	;wreg free
  3457   0013AA  C015  F022         	movff	?_color_read_Clear,calibrate_black@clear2
  3458   0013AE  C016  F023         	movff	?_color_read_Clear+1,calibrate_black@clear2+1
  3459                           
  3460                           ;color.c: 234:     set_led_color(0b000);
  3461   0013B2  0E00               	movlw	0
  3462   0013B4  6E12               	movwf	(set_led_color@color+1)^0,c
  3463   0013B6  0E00               	movlw	0
  3464   0013B8  6E11               	movwf	set_led_color@color^0,c
  3465   0013BA  ECA2  F00F         	call	_set_led_color	;wreg free
  3466   0013BE                     
  3467                           ;color.c: 235:     wall_coef = clear2/clear1/5;
  3468   0013BE  C020  F019         	movff	calibrate_black@clear1,___lwdiv@divisor
  3469   0013C2  C021  F01A         	movff	calibrate_black@clear1+1,___lwdiv@divisor+1
  3470   0013C6  C022  F017         	movff	calibrate_black@clear2,___lwdiv@dividend
  3471   0013CA  C023  F018         	movff	calibrate_black@clear2+1,___lwdiv@dividend+1
  3472   0013CE  EC72  F00D         	call	___lwdiv	;wreg free
  3473   0013D2  C017  F024         	movff	?___lwdiv,_calibrate_black$2464
  3474   0013D6  C018  F025         	movff	?___lwdiv+1,_calibrate_black$2464+1
  3475   0013DA                     
  3476                           ;color.c: 235:     wall_coef = clear2/clear1/5;
  3477   0013DA  C024  F017         	movff	_calibrate_black$2464,___lwdiv@dividend
  3478   0013DE  C025  F018         	movff	_calibrate_black$2464+1,___lwdiv@dividend+1
  3479   0013E2  0E00               	movlw	0
  3480   0013E4  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  3481   0013E6  0E05               	movlw	5
  3482   0013E8  6E19               	movwf	___lwdiv@divisor^0,c
  3483   0013EA  EC72  F00D         	call	___lwdiv	;wreg free
  3484   0013EE  C017  F04C         	movff	?___lwdiv,_wall_coef
  3485   0013F2  C018  F04D         	movff	?___lwdiv+1,_wall_coef+1
  3486   0013F6  0012               	return		;funcret
  3487   0013F8                     __end_of_calibrate_black:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _set_led_color *****************
  3491 ;; Defined at:
  3492 ;;		line 157 in file "color.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  color           2   16[COMRAM] unsigned int 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		None
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3509 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3510 ;;Total ram usage:        2 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 5
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_get_color_code
  3517 ;;		_calibrate_black
  3518 ;;		_calibrate_white
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text14
  3523   001F44                     __ptext14:
  3524                           	callstack 0
  3525   001F44                     _set_led_color:
  3526                           	callstack 24
  3527   001F44                     
  3528                           ;color.c: 161:     if(color & 0b100){
  3529   001F44  A411               	btfss	set_led_color@color^0,2,c
  3530   001F46  EFA7  F00F         	goto	u2841
  3531   001F4A  EFA9  F00F         	goto	u2840
  3532   001F4E                     u2841:
  3533   001F4E  EFAC  F00F         	goto	l116
  3534   001F52                     u2840:
  3535   001F52                     
  3536                           ;color.c: 162:         LATGbits.LATG1 = 1;
  3537   001F52  827F               	bsf	127,1,c	;volatile
  3538                           
  3539                           ;color.c: 163:     }else{
  3540   001F54  EFAD  F00F         	goto	l117
  3541   001F58                     l116:
  3542                           
  3543                           ;color.c: 164:         LATGbits.LATG1 = 0;
  3544   001F58  927F               	bcf	127,1,c	;volatile
  3545   001F5A                     l117:
  3546                           
  3547                           ;color.c: 166:     if(color & 0b010){
  3548   001F5A  A211               	btfss	set_led_color@color^0,1,c
  3549   001F5C  EFB2  F00F         	goto	u2851
  3550   001F60  EFB4  F00F         	goto	u2850
  3551   001F64                     u2851:
  3552   001F64  EFB7  F00F         	goto	l118
  3553   001F68                     u2850:
  3554   001F68                     
  3555                           ;color.c: 167:         LATAbits.LATA4 = 1;
  3556   001F68  8879               	bsf	121,4,c	;volatile
  3557                           
  3558                           ;color.c: 168:     }else{
  3559   001F6A  EFB8  F00F         	goto	l119
  3560   001F6E                     l118:
  3561                           
  3562                           ;color.c: 169:         LATAbits.LATA4 = 0;
  3563   001F6E  9879               	bcf	121,4,c	;volatile
  3564   001F70                     l119:
  3565                           
  3566                           ;color.c: 171:     if(color & 0b001){
  3567   001F70  A011               	btfss	set_led_color@color^0,0,c
  3568   001F72  EFBD  F00F         	goto	u2861
  3569   001F76  EFBF  F00F         	goto	u2860
  3570   001F7A                     u2861:
  3571   001F7A  EFC2  F00F         	goto	l120
  3572   001F7E                     u2860:
  3573   001F7E                     
  3574                           ;color.c: 172:         LATFbits.LATF7 = 1;
  3575   001F7E  8E7E               	bsf	126,7,c	;volatile
  3576                           
  3577                           ;color.c: 173:     }else{
  3578   001F80  EFC3  F00F         	goto	l122
  3579   001F84                     l120:
  3580                           
  3581                           ;color.c: 174:         LATFbits.LATF7 = 0;
  3582   001F84  9E7E               	bcf	126,7,c	;volatile
  3583   001F86                     l122:
  3584   001F86  0012               	return		;funcret
  3585   001F88                     __end_of_set_led_color:
  3586                           	callstack 0
  3587                           
  3588 ;; *************** function _color_read_Red *****************
  3589 ;; Defined at:
  3590 ;;		line 93 in file "color.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;		None
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;  tmp             2   25[COMRAM] unsigned int 
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  2   20[COMRAM] unsigned int 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0, cstack
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3606 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3607 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3608 ;;Total ram usage:        7 bytes
  3609 ;; Hardware stack levels used: 1
  3610 ;; Hardware stack levels required when called: 7
  3611 ;; This function calls:
  3612 ;;		_I2C_2_Master_Read
  3613 ;;		_I2C_2_Master_RepStart
  3614 ;;		_I2C_2_Master_Start
  3615 ;;		_I2C_2_Master_Stop
  3616 ;;		_I2C_2_Master_Write
  3617 ;; This function is called by:
  3618 ;;		_get_color_code
  3619 ;;		_calibrate_black
  3620 ;;		_calibrate_white
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text15
  3625   001CDA                     __ptext15:
  3626                           	callstack 0
  3627   001CDA                     _color_read_Red:
  3628                           	callstack 22
  3629   001CDA                     
  3630                           ;color.c: 95:  unsigned int tmp;;color.c: 96:  I2C_2_Master_Start();
  3631   001CDA  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3632                           
  3633                           ;color.c: 97:  I2C_2_Master_Write(0x52 | 0x00);
  3634   001CDE  0E52               	movlw	82
  3635   001CE0  ECB0  F010         	call	_I2C_2_Master_Write
  3636                           
  3637                           ;color.c: 98:  I2C_2_Master_Write(0xA0 | 0x16);
  3638   001CE4  0EB6               	movlw	182
  3639   001CE6  ECB0  F010         	call	_I2C_2_Master_Write
  3640                           
  3641                           ;color.c: 99:  I2C_2_Master_RepStart();
  3642   001CEA  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3643                           
  3644                           ;color.c: 100:  I2C_2_Master_Write(0x52 | 0x01);
  3645   001CEE  0E53               	movlw	83
  3646   001CF0  ECB0  F010         	call	_I2C_2_Master_Write
  3647                           
  3648                           ;color.c: 101:  tmp=I2C_2_Master_Read(1);
  3649   001CF4  0E01               	movlw	1
  3650   001CF6  ECE6  F00F         	call	_I2C_2_Master_Read
  3651   001CFA  6E17               	movwf	??_color_read_Red^0,c
  3652   001CFC  5017               	movf	??_color_read_Red^0,w,c
  3653   001CFE  6E1A               	movwf	color_read_Red@tmp^0,c
  3654   001D00  6A1B               	clrf	(color_read_Red@tmp+1)^0,c
  3655                           
  3656                           ;color.c: 102:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3657   001D02  0E00               	movlw	0
  3658   001D04  ECE6  F00F         	call	_I2C_2_Master_Read
  3659   001D08  6E17               	movwf	??_color_read_Red^0,c
  3660   001D0A  5017               	movf	??_color_read_Red^0,w,c
  3661   001D0C  6E19               	movwf	(??_color_read_Red+2)^0,c
  3662   001D0E  6A18               	clrf	(??_color_read_Red+1)^0,c
  3663   001D10  501A               	movf	color_read_Red@tmp^0,w,c
  3664   001D12  1018               	iorwf	(??_color_read_Red+1)^0,w,c
  3665   001D14  6E1A               	movwf	color_read_Red@tmp^0,c
  3666   001D16  501B               	movf	(color_read_Red@tmp+1)^0,w,c
  3667   001D18  1019               	iorwf	(??_color_read_Red+2)^0,w,c
  3668   001D1A  6E1B               	movwf	(color_read_Red@tmp+1)^0,c
  3669                           
  3670                           ;color.c: 103:  I2C_2_Master_Stop();
  3671   001D1C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3672   001D20                     
  3673                           ;color.c: 104:  return tmp;
  3674   001D20  C01A  F015         	movff	color_read_Red@tmp,?_color_read_Red
  3675   001D24  C01B  F016         	movff	color_read_Red@tmp+1,?_color_read_Red+1
  3676   001D28  0012               	return		;funcret
  3677   001D2A                     __end_of_color_read_Red:
  3678                           	callstack 0
  3679                           
  3680 ;; *************** function _color_read_Green *****************
  3681 ;; Defined at:
  3682 ;;		line 121 in file "color.c"
  3683 ;; Parameters:    Size  Location     Type
  3684 ;;		None
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;  tmp             2   25[COMRAM] unsigned int 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  2   20[COMRAM] unsigned int 
  3689 ;; Registers used:
  3690 ;;		wreg, status,2, status,0, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/0
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3698 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3699 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3700 ;;Total ram usage:        7 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 7
  3703 ;; This function calls:
  3704 ;;		_I2C_2_Master_Read
  3705 ;;		_I2C_2_Master_RepStart
  3706 ;;		_I2C_2_Master_Start
  3707 ;;		_I2C_2_Master_Stop
  3708 ;;		_I2C_2_Master_Write
  3709 ;; This function is called by:
  3710 ;;		_get_color_code
  3711 ;;		_calibrate_black
  3712 ;;		_calibrate_white
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text16
  3717   001D2A                     __ptext16:
  3718                           	callstack 0
  3719   001D2A                     _color_read_Green:
  3720                           	callstack 22
  3721   001D2A                     
  3722                           ;color.c: 123:  unsigned int tmp;;color.c: 124:  I2C_2_Master_Start();
  3723   001D2A  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3724                           
  3725                           ;color.c: 125:  I2C_2_Master_Write(0x52 | 0x00);
  3726   001D2E  0E52               	movlw	82
  3727   001D30  ECB0  F010         	call	_I2C_2_Master_Write
  3728                           
  3729                           ;color.c: 126:  I2C_2_Master_Write(0xA0 | 0x18);
  3730   001D34  0EB8               	movlw	184
  3731   001D36  ECB0  F010         	call	_I2C_2_Master_Write
  3732                           
  3733                           ;color.c: 127:  I2C_2_Master_RepStart();
  3734   001D3A  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3735                           
  3736                           ;color.c: 128:  I2C_2_Master_Write(0x52 | 0x01);
  3737   001D3E  0E53               	movlw	83
  3738   001D40  ECB0  F010         	call	_I2C_2_Master_Write
  3739                           
  3740                           ;color.c: 129:  tmp=I2C_2_Master_Read(1);
  3741   001D44  0E01               	movlw	1
  3742   001D46  ECE6  F00F         	call	_I2C_2_Master_Read
  3743   001D4A  6E17               	movwf	??_color_read_Green^0,c
  3744   001D4C  5017               	movf	??_color_read_Green^0,w,c
  3745   001D4E  6E1A               	movwf	color_read_Green@tmp^0,c
  3746   001D50  6A1B               	clrf	(color_read_Green@tmp+1)^0,c
  3747                           
  3748                           ;color.c: 130:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3749   001D52  0E00               	movlw	0
  3750   001D54  ECE6  F00F         	call	_I2C_2_Master_Read
  3751   001D58  6E17               	movwf	??_color_read_Green^0,c
  3752   001D5A  5017               	movf	??_color_read_Green^0,w,c
  3753   001D5C  6E19               	movwf	(??_color_read_Green+2)^0,c
  3754   001D5E  6A18               	clrf	(??_color_read_Green+1)^0,c
  3755   001D60  501A               	movf	color_read_Green@tmp^0,w,c
  3756   001D62  1018               	iorwf	(??_color_read_Green+1)^0,w,c
  3757   001D64  6E1A               	movwf	color_read_Green@tmp^0,c
  3758   001D66  501B               	movf	(color_read_Green@tmp+1)^0,w,c
  3759   001D68  1019               	iorwf	(??_color_read_Green+2)^0,w,c
  3760   001D6A  6E1B               	movwf	(color_read_Green@tmp+1)^0,c
  3761                           
  3762                           ;color.c: 131:  I2C_2_Master_Stop();
  3763   001D6C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3764   001D70                     
  3765                           ;color.c: 132:  return tmp;
  3766   001D70  C01A  F015         	movff	color_read_Green@tmp,?_color_read_Green
  3767   001D74  C01B  F016         	movff	color_read_Green@tmp+1,?_color_read_Green+1
  3768   001D78  0012               	return		;funcret
  3769   001D7A                     __end_of_color_read_Green:
  3770                           	callstack 0
  3771                           
  3772 ;; *************** function _color_read_Clear *****************
  3773 ;; Defined at:
  3774 ;;		line 135 in file "color.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  tmp             2   25[COMRAM] unsigned int 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  2   20[COMRAM] unsigned int 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3788 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3789 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3790 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3791 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3792 ;;Total ram usage:        7 bytes
  3793 ;; Hardware stack levels used: 1
  3794 ;; Hardware stack levels required when called: 7
  3795 ;; This function calls:
  3796 ;;		_I2C_2_Master_Read
  3797 ;;		_I2C_2_Master_RepStart
  3798 ;;		_I2C_2_Master_Start
  3799 ;;		_I2C_2_Master_Stop
  3800 ;;		_I2C_2_Master_Write
  3801 ;; This function is called by:
  3802 ;;		_calibrate_black
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text17
  3807   001D7A                     __ptext17:
  3808                           	callstack 0
  3809   001D7A                     _color_read_Clear:
  3810                           	callstack 21
  3811   001D7A                     
  3812                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  3813   001D7A  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3814                           
  3815                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  3816   001D7E  0E52               	movlw	82
  3817   001D80  ECB0  F010         	call	_I2C_2_Master_Write
  3818                           
  3819                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  3820   001D84  0EB4               	movlw	180
  3821   001D86  ECB0  F010         	call	_I2C_2_Master_Write
  3822                           
  3823                           ;color.c: 141:  I2C_2_Master_RepStart();
  3824   001D8A  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3825                           
  3826                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  3827   001D8E  0E53               	movlw	83
  3828   001D90  ECB0  F010         	call	_I2C_2_Master_Write
  3829                           
  3830                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  3831   001D94  0E01               	movlw	1
  3832   001D96  ECE6  F00F         	call	_I2C_2_Master_Read
  3833   001D9A  6E17               	movwf	??_color_read_Clear^0,c
  3834   001D9C  5017               	movf	??_color_read_Clear^0,w,c
  3835   001D9E  6E1A               	movwf	color_read_Clear@tmp^0,c
  3836   001DA0  6A1B               	clrf	(color_read_Clear@tmp+1)^0,c
  3837                           
  3838                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3839   001DA2  0E00               	movlw	0
  3840   001DA4  ECE6  F00F         	call	_I2C_2_Master_Read
  3841   001DA8  6E17               	movwf	??_color_read_Clear^0,c
  3842   001DAA  5017               	movf	??_color_read_Clear^0,w,c
  3843   001DAC  6E19               	movwf	(??_color_read_Clear+2)^0,c
  3844   001DAE  6A18               	clrf	(??_color_read_Clear+1)^0,c
  3845   001DB0  501A               	movf	color_read_Clear@tmp^0,w,c
  3846   001DB2  1018               	iorwf	(??_color_read_Clear+1)^0,w,c
  3847   001DB4  6E1A               	movwf	color_read_Clear@tmp^0,c
  3848   001DB6  501B               	movf	(color_read_Clear@tmp+1)^0,w,c
  3849   001DB8  1019               	iorwf	(??_color_read_Clear+2)^0,w,c
  3850   001DBA  6E1B               	movwf	(color_read_Clear@tmp+1)^0,c
  3851                           
  3852                           ;color.c: 145:  I2C_2_Master_Stop();
  3853   001DBC  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3854   001DC0                     
  3855                           ;color.c: 146:  return tmp;
  3856   001DC0  C01A  F015         	movff	color_read_Clear@tmp,?_color_read_Clear
  3857   001DC4  C01B  F016         	movff	color_read_Clear@tmp+1,?_color_read_Clear+1
  3858   001DC8  0012               	return		;funcret
  3859   001DCA                     __end_of_color_read_Clear:
  3860                           	callstack 0
  3861                           
  3862 ;; *************** function _color_read_Blue *****************
  3863 ;; Defined at:
  3864 ;;		line 107 in file "color.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;		None
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  tmp             2   25[COMRAM] unsigned int 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  2   20[COMRAM] unsigned int 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3878 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3880 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3882 ;;Total ram usage:        7 bytes
  3883 ;; Hardware stack levels used: 1
  3884 ;; Hardware stack levels required when called: 7
  3885 ;; This function calls:
  3886 ;;		_I2C_2_Master_Read
  3887 ;;		_I2C_2_Master_RepStart
  3888 ;;		_I2C_2_Master_Start
  3889 ;;		_I2C_2_Master_Stop
  3890 ;;		_I2C_2_Master_Write
  3891 ;; This function is called by:
  3892 ;;		_get_color_code
  3893 ;;		_calibrate_black
  3894 ;;		_calibrate_white
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           	psect	text18
  3899   001DCA                     __ptext18:
  3900                           	callstack 0
  3901   001DCA                     _color_read_Blue:
  3902                           	callstack 22
  3903   001DCA                     
  3904                           ;color.c: 109:  unsigned int tmp;;color.c: 110:  I2C_2_Master_Start();
  3905   001DCA  ECCC  F010         	call	_I2C_2_Master_Start	;wreg free
  3906                           
  3907                           ;color.c: 111:  I2C_2_Master_Write(0x52 | 0x00);
  3908   001DCE  0E52               	movlw	82
  3909   001DD0  ECB0  F010         	call	_I2C_2_Master_Write
  3910                           
  3911                           ;color.c: 112:  I2C_2_Master_Write(0xA0 | 0x1A);
  3912   001DD4  0EBA               	movlw	186
  3913   001DD6  ECB0  F010         	call	_I2C_2_Master_Write
  3914                           
  3915                           ;color.c: 113:  I2C_2_Master_RepStart();
  3916   001DDA  ECD1  F010         	call	_I2C_2_Master_RepStart	;wreg free
  3917                           
  3918                           ;color.c: 114:  I2C_2_Master_Write(0x52 | 0x01);
  3919   001DDE  0E53               	movlw	83
  3920   001DE0  ECB0  F010         	call	_I2C_2_Master_Write
  3921                           
  3922                           ;color.c: 115:  tmp=I2C_2_Master_Read(1);
  3923   001DE4  0E01               	movlw	1
  3924   001DE6  ECE6  F00F         	call	_I2C_2_Master_Read
  3925   001DEA  6E17               	movwf	??_color_read_Blue^0,c
  3926   001DEC  5017               	movf	??_color_read_Blue^0,w,c
  3927   001DEE  6E1A               	movwf	color_read_Blue@tmp^0,c
  3928   001DF0  6A1B               	clrf	(color_read_Blue@tmp+1)^0,c
  3929                           
  3930                           ;color.c: 116:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  3931   001DF2  0E00               	movlw	0
  3932   001DF4  ECE6  F00F         	call	_I2C_2_Master_Read
  3933   001DF8  6E17               	movwf	??_color_read_Blue^0,c
  3934   001DFA  5017               	movf	??_color_read_Blue^0,w,c
  3935   001DFC  6E19               	movwf	(??_color_read_Blue+2)^0,c
  3936   001DFE  6A18               	clrf	(??_color_read_Blue+1)^0,c
  3937   001E00  501A               	movf	color_read_Blue@tmp^0,w,c
  3938   001E02  1018               	iorwf	(??_color_read_Blue+1)^0,w,c
  3939   001E04  6E1A               	movwf	color_read_Blue@tmp^0,c
  3940   001E06  501B               	movf	(color_read_Blue@tmp+1)^0,w,c
  3941   001E08  1019               	iorwf	(??_color_read_Blue+2)^0,w,c
  3942   001E0A  6E1B               	movwf	(color_read_Blue@tmp+1)^0,c
  3943                           
  3944                           ;color.c: 117:  I2C_2_Master_Stop();
  3945   001E0C  ECC7  F010         	call	_I2C_2_Master_Stop	;wreg free
  3946   001E10                     
  3947                           ;color.c: 118:  return tmp;
  3948   001E10  C01A  F015         	movff	color_read_Blue@tmp,?_color_read_Blue
  3949   001E14  C01B  F016         	movff	color_read_Blue@tmp+1,?_color_read_Blue+1
  3950   001E18  0012               	return		;funcret
  3951   001E1A                     __end_of_color_read_Blue:
  3952                           	callstack 0
  3953                           
  3954 ;; *************** function _I2C_2_Master_Write *****************
  3955 ;; Defined at:
  3956 ;;		line 45 in file "i2c.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  data_byte       1    wreg     unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  data_byte       1   17[COMRAM] unsigned char 
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      void 
  3963 ;; Registers used:
  3964 ;;		wreg, status,2, status,0, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  3970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3973 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3974 ;;Total ram usage:        1 bytes
  3975 ;; Hardware stack levels used: 1
  3976 ;; Hardware stack levels required when called: 6
  3977 ;; This function calls:
  3978 ;;		_I2C_2_Master_Idle
  3979 ;; This function is called by:
  3980 ;;		_color_writetoaddr
  3981 ;;		_color_read_Red
  3982 ;;		_color_read_Blue
  3983 ;;		_color_read_Green
  3984 ;;		_color_read_Clear
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text19
  3989   002160                     __ptext19:
  3990                           	callstack 0
  3991   002160                     _I2C_2_Master_Write:
  3992                           	callstack 22
  3993                           
  3994                           ;incstack = 0
  3995                           ;I2C_2_Master_Write@data_byte stored from wreg
  3996   002160  6E12               	movwf	I2C_2_Master_Write@data_byte^0,c
  3997   002162                     
  3998                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  3999   002162  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4000   002166                     
  4001                           ;i2c.c: 48:   SSP2BUF = data_byte;
  4002   002166  C012  FED5         	movff	I2C_2_Master_Write@data_byte,3797	;volatile
  4003   00216A  0012               	return		;funcret
  4004   00216C                     __end_of_I2C_2_Master_Write:
  4005                           	callstack 0
  4006                           
  4007 ;; *************** function _I2C_2_Master_Stop *****************
  4008 ;; Defined at:
  4009 ;;		line 39 in file "i2c.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  1    wreg      void 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4027 ;;Total ram usage:        0 bytes
  4028 ;; Hardware stack levels used: 1
  4029 ;; Hardware stack levels required when called: 6
  4030 ;; This function calls:
  4031 ;;		_I2C_2_Master_Idle
  4032 ;; This function is called by:
  4033 ;;		_color_writetoaddr
  4034 ;;		_color_read_Red
  4035 ;;		_color_read_Blue
  4036 ;;		_color_read_Green
  4037 ;;		_color_read_Clear
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text20
  4042   00218E                     __ptext20:
  4043                           	callstack 0
  4044   00218E                     _I2C_2_Master_Stop:
  4045                           	callstack 22
  4046   00218E                     
  4047                           ;i2c.c: 41:   I2C_2_Master_Idle();
  4048   00218E  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4049   002192                     
  4050                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  4051   002192  010E               	movlb	14	; () banked
  4052   002194  85DA               	bsf	218,2,b	;volatile
  4053   002196                     
  4054                           ; BSR set to: 14
  4055   002196  0012               	return		;funcret
  4056   002198                     __end_of_I2C_2_Master_Stop:
  4057                           	callstack 0
  4058                           
  4059 ;; *************** function _I2C_2_Master_Start *****************
  4060 ;; Defined at:
  4061 ;;		line 27 in file "i2c.c"
  4062 ;; Parameters:    Size  Location     Type
  4063 ;;		None
  4064 ;; Auto vars:     Size  Location     Type
  4065 ;;		None
  4066 ;; Return value:  Size  Location     Type
  4067 ;;                  1    wreg      void 
  4068 ;; Registers used:
  4069 ;;		wreg, status,2, status,0, cstack
  4070 ;; Tracked objects:
  4071 ;;		On entry : 0/0
  4072 ;;		On exit  : 0/0
  4073 ;;		Unchanged: 0/0
  4074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4079 ;;Total ram usage:        0 bytes
  4080 ;; Hardware stack levels used: 1
  4081 ;; Hardware stack levels required when called: 6
  4082 ;; This function calls:
  4083 ;;		_I2C_2_Master_Idle
  4084 ;; This function is called by:
  4085 ;;		_color_writetoaddr
  4086 ;;		_color_read_Red
  4087 ;;		_color_read_Blue
  4088 ;;		_color_read_Green
  4089 ;;		_color_read_Clear
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text21
  4094   002198                     __ptext21:
  4095                           	callstack 0
  4096   002198                     _I2C_2_Master_Start:
  4097                           	callstack 22
  4098   002198                     
  4099                           ;i2c.c: 29:   I2C_2_Master_Idle();
  4100   002198  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4101   00219C                     
  4102                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  4103   00219C  010E               	movlb	14	; () banked
  4104   00219E  81DA               	bsf	218,0,b	;volatile
  4105   0021A0                     
  4106                           ; BSR set to: 14
  4107   0021A0  0012               	return		;funcret
  4108   0021A2                     __end_of_I2C_2_Master_Start:
  4109                           	callstack 0
  4110                           
  4111 ;; *************** function _I2C_2_Master_RepStart *****************
  4112 ;; Defined at:
  4113 ;;		line 33 in file "i2c.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0, cstack
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used: 1
  4133 ;; Hardware stack levels required when called: 6
  4134 ;; This function calls:
  4135 ;;		_I2C_2_Master_Idle
  4136 ;; This function is called by:
  4137 ;;		_color_read_Red
  4138 ;;		_color_read_Blue
  4139 ;;		_color_read_Green
  4140 ;;		_color_read_Clear
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text22
  4145   0021A2                     __ptext22:
  4146                           	callstack 0
  4147   0021A2                     _I2C_2_Master_RepStart:
  4148                           	callstack 22
  4149   0021A2                     
  4150                           ;i2c.c: 35:   I2C_2_Master_Idle();
  4151   0021A2  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4152   0021A6                     
  4153                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  4154   0021A6  010E               	movlb	14	; () banked
  4155   0021A8  83DA               	bsf	218,1,b	;volatile
  4156   0021AA                     
  4157                           ; BSR set to: 14
  4158   0021AA  0012               	return		;funcret
  4159   0021AC                     __end_of_I2C_2_Master_RepStart:
  4160                           	callstack 0
  4161                           
  4162 ;; *************** function _I2C_2_Master_Read *****************
  4163 ;; Defined at:
  4164 ;;		line 51 in file "i2c.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  ack             1    wreg     unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  ack             1   18[COMRAM] unsigned char 
  4169 ;;  tmp             1   19[COMRAM] unsigned char 
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  1    wreg      unsigned char 
  4172 ;; Registers used:
  4173 ;;		wreg, status,2, status,0, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 0/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4182 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4183 ;;Total ram usage:        3 bytes
  4184 ;; Hardware stack levels used: 1
  4185 ;; Hardware stack levels required when called: 6
  4186 ;; This function calls:
  4187 ;;		_I2C_2_Master_Idle
  4188 ;; This function is called by:
  4189 ;;		_color_read_Red
  4190 ;;		_color_read_Blue
  4191 ;;		_color_read_Green
  4192 ;;		_color_read_Clear
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text23
  4197   001FCC                     __ptext23:
  4198                           	callstack 0
  4199   001FCC                     _I2C_2_Master_Read:
  4200                           	callstack 22
  4201                           
  4202                           ; BSR set to: 14
  4203                           ;incstack = 0
  4204                           ;I2C_2_Master_Read@ack stored from wreg
  4205   001FCC  6E13               	movwf	I2C_2_Master_Read@ack^0,c
  4206   001FCE                     
  4207                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  4208   001FCE  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4209   001FD2                     
  4210                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  4211   001FD2  010E               	movlb	14	; () banked
  4212   001FD4  87DA               	bsf	218,3,b	;volatile
  4213                           
  4214                           ;i2c.c: 56:   I2C_2_Master_Idle();
  4215   001FD6  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4216   001FDA                     
  4217                           ;i2c.c: 57:   tmp = SSP2BUF;
  4218   001FDA  CED5 F014          	movff	3797,I2C_2_Master_Read@tmp	;volatile
  4219                           
  4220                           ;i2c.c: 58:   I2C_2_Master_Idle();
  4221   001FDE  EC55  F010         	call	_I2C_2_Master_Idle	;wreg free
  4222   001FE2                     
  4223                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  4224   001FE2  5013               	movf	I2C_2_Master_Read@ack^0,w,c
  4225   001FE4  B4D8               	btfsc	status,2,c
  4226   001FE6  EFF7  F00F         	goto	u2791
  4227   001FEA  EFFB  F00F         	goto	u2790
  4228   001FEE                     u2791:
  4229   001FEE  6A12               	clrf	??_I2C_2_Master_Read^0,c
  4230   001FF0  2A12               	incf	??_I2C_2_Master_Read^0,f,c
  4231   001FF2  EFFC  F00F         	goto	u2808
  4232   001FF6                     u2790:
  4233   001FF6  6A12               	clrf	??_I2C_2_Master_Read^0,c
  4234   001FF8                     u2808:
  4235   001FF8  3A12               	swapf	??_I2C_2_Master_Read^0,f,c
  4236   001FFA  4612               	rlncf	??_I2C_2_Master_Read^0,f,c
  4237   001FFC  010E               	movlb	14	; () banked
  4238   001FFE  51DA               	movf	218,w,b	;volatile
  4239   002000  1812               	xorwf	??_I2C_2_Master_Read^0,w,c
  4240   002002  0BDF               	andlw	-33
  4241   002004  1812               	xorwf	??_I2C_2_Master_Read^0,w,c
  4242   002006  6FDA               	movwf	218,b	;volatile
  4243   002008                     
  4244                           ; BSR set to: 14
  4245                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  4246   002008  89DA               	bsf	218,4,b	;volatile
  4247   00200A                     
  4248                           ; BSR set to: 14
  4249                           ;i2c.c: 61:   return tmp;
  4250   00200A  5014               	movf	I2C_2_Master_Read@tmp^0,w,c
  4251   00200C                     
  4252                           ; BSR set to: 14
  4253   00200C  0012               	return		;funcret
  4254   00200E                     __end_of_I2C_2_Master_Read:
  4255                           	callstack 0
  4256                           
  4257 ;; *************** function _I2C_2_Master_Idle *****************
  4258 ;; Defined at:
  4259 ;;		line 22 in file "i2c.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		wreg, status,2, status,0
  4268 ;; Tracked objects:
  4269 ;;		On entry : 0/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4277 ;;Total ram usage:        1 bytes
  4278 ;; Hardware stack levels used: 1
  4279 ;; Hardware stack levels required when called: 5
  4280 ;; This function calls:
  4281 ;;		Nothing
  4282 ;; This function is called by:
  4283 ;;		_I2C_2_Master_Start
  4284 ;;		_I2C_2_Master_RepStart
  4285 ;;		_I2C_2_Master_Stop
  4286 ;;		_I2C_2_Master_Write
  4287 ;;		_I2C_2_Master_Read
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text24
  4292   0020AA                     __ptext24:
  4293                           	callstack 0
  4294   0020AA                     _I2C_2_Master_Idle:
  4295                           	callstack 22
  4296   0020AA                     l359:
  4297   0020AA  010E               	movlb	14	; () banked
  4298   0020AC  B5D8               	btfsc	216,2,b	;volatile
  4299   0020AE  EF5B  F010         	goto	u2771
  4300   0020B2  EF5D  F010         	goto	u2770
  4301   0020B6                     u2771:
  4302   0020B6  EF55  F010         	goto	l359
  4303   0020BA                     u2770:
  4304   0020BA                     
  4305                           ; BSR set to: 14
  4306   0020BA  CEDA F011          	movff	3802,??_I2C_2_Master_Idle	;volatile
  4307   0020BE  0E1F               	movlw	31
  4308   0020C0  1611               	andwf	??_I2C_2_Master_Idle^0,f,c
  4309   0020C2  A4D8               	btfss	status,2,c
  4310   0020C4  EF66  F010         	goto	u2781
  4311   0020C8  EF68  F010         	goto	u2780
  4312   0020CC                     u2781:
  4313   0020CC  EF55  F010         	goto	l359
  4314   0020D0                     u2780:
  4315   0020D0                     
  4316                           ; BSR set to: 14
  4317   0020D0  0012               	return		;funcret
  4318   0020D2                     __end_of_I2C_2_Master_Idle:
  4319                           	callstack 0
  4320                           
  4321 ;; *************** function _I2C_2_Master_Init *****************
  4322 ;; Defined at:
  4323 ;;		line 4 in file "i2c.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used: 1
  4343 ;; Hardware stack levels required when called: 5
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_color_click_init
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text25
  4352   002080                     __ptext25:
  4353                           	callstack 0
  4354   002080                     _I2C_2_Master_Init:
  4355                           	callstack 24
  4356   002080                     
  4357                           ;i2c.c: 7:   SSP2CON1bits.SSPM= 0b1000;
  4358   002080  010E               	movlb	14	; () banked
  4359   002082  51D9               	movf	217,w,b	;volatile
  4360   002084  0BF0               	andlw	-16
  4361   002086  0908               	iorlw	8
  4362   002088  6FD9               	movwf	217,b	;volatile
  4363   00208A                     
  4364                           ; BSR set to: 14
  4365                           ;i2c.c: 8:   SSP2CON1bits.SSPEN = 1;
  4366   00208A  8BD9               	bsf	217,5,b	;volatile
  4367                           
  4368                           ;i2c.c: 9:   SSP2ADD = (64000000/(4*100000))-1;
  4369   00208C  0E9F               	movlw	159
  4370   00208E  6FD6               	movwf	214,b	;volatile
  4371   002090                     
  4372                           ; BSR set to: 14
  4373                           ;i2c.c: 12:   TRISDbits.TRISD5 = 1;
  4374   002090  8A84               	bsf	132,5,c	;volatile
  4375   002092                     
  4376                           ; BSR set to: 14
  4377                           ;i2c.c: 13:   TRISDbits.TRISD6 = 1;
  4378   002092  8C84               	bsf	132,6,c	;volatile
  4379   002094                     
  4380                           ; BSR set to: 14
  4381                           ;i2c.c: 14:   ANSELDbits.ANSELD5=0;
  4382   002094  9BA7               	bcf	167,5,b	;volatile
  4383   002096                     
  4384                           ; BSR set to: 14
  4385                           ;i2c.c: 15:   ANSELDbits.ANSELD6=0;
  4386   002096  9DA7               	bcf	167,6,b	;volatile
  4387                           
  4388                           ;i2c.c: 16:   SSP2DATPPS=0x1D;
  4389   002098  0E1D               	movlw	29
  4390   00209A  6F1D               	movwf	29,b	;volatile
  4391                           
  4392                           ;i2c.c: 17:   SSP2CLKPPS=0x1E;
  4393   00209C  0E1E               	movlw	30
  4394   00209E  6F1C               	movwf	28,b	;volatile
  4395                           
  4396                           ;i2c.c: 18:   RD5PPS=0x1C;
  4397   0020A0  0E1C               	movlw	28
  4398   0020A2  6F6F               	movwf	111,b	;volatile
  4399                           
  4400                           ;i2c.c: 19:   RD6PPS=0x1B;
  4401   0020A4  0E1B               	movlw	27
  4402   0020A6  6F70               	movwf	112,b	;volatile
  4403   0020A8                     
  4404                           ; BSR set to: 14
  4405   0020A8  0012               	return		;funcret
  4406   0020AA                     __end_of_I2C_2_Master_Init:
  4407                           	callstack 0
  4408                           
  4409 ;; *************** function _add_seconds_to_list *****************
  4410 ;; Defined at:
  4411 ;;		line 436 in file "dc_motor.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4427 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4428 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4429 ;;Total ram usage:        2 bytes
  4430 ;; Hardware stack levels used: 1
  4431 ;; Hardware stack levels required when called: 5
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text26
  4440   001EFC                     __ptext26:
  4441                           	callstack 0
  4442   001EFC                     _add_seconds_to_list:
  4443                           	callstack 25
  4444   001EFC                     
  4445                           ;dc_motor.c: 438:     if (seconds > 22)
  4446   001EFC  BE43               	btfsc	(_seconds+1)^0,7,c
  4447   001EFE  EF8A  F00F         	goto	u3541
  4448   001F02  5043               	movf	(_seconds+1)^0,w,c
  4449   001F04  E109               	bnz	u3540
  4450   001F06  0E17               	movlw	23
  4451   001F08  5C42               	subwf	_seconds^0,w,c
  4452   001F0A  A0D8               	btfss	status,0,c
  4453   001F0C  EF8A  F00F         	goto	u3541
  4454   001F10  EF8C  F00F         	goto	u3540
  4455   001F14                     u3541:
  4456   001F14  EFA1  F00F         	goto	l313
  4457   001F18                     u3540:
  4458   001F18                     
  4459                           ;dc_motor.c: 439:     {;dc_motor.c: 440:         movement_list[index] = seconds - 11;
  4460   001F18  0EF5               	movlw	245
  4461   001F1A  2442               	addwf	_seconds^0,w,c
  4462   001F1C  6E11               	movwf	??_add_seconds_to_list^0,c
  4463   001F1E  0EFF               	movlw	255
  4464   001F20  2043               	addwfc	(_seconds+1)^0,w,c
  4465   001F22  6E12               	movwf	(??_add_seconds_to_list+1)^0,c
  4466   001F24  90D8               	bcf	status,0,c
  4467   001F26  3440               	rlcf	_index^0,w,c
  4468   001F28  6ED9               	movwf	fsr2l,c
  4469   001F2A  3441               	rlcf	(_index+1)^0,w,c
  4470   001F2C  6EDA               	movwf	fsr2h,c
  4471   001F2E  0E00               	movlw	low _movement_list
  4472   001F30  26D9               	addwf	fsr2l,f,c
  4473   001F32  0E02               	movlw	high _movement_list
  4474   001F34  22DA               	addwfc	fsr2h,f,c
  4475   001F36  C011  FFDE         	movff	??_add_seconds_to_list,postinc2
  4476   001F3A  C012  FFDD         	movff	??_add_seconds_to_list+1,postdec2
  4477   001F3E                     
  4478                           ;dc_motor.c: 441:         index++;
  4479   001F3E  4A40               	infsnz	_index^0,f,c
  4480   001F40  2A41               	incf	(_index+1)^0,f,c
  4481   001F42                     l313:
  4482   001F42  0012               	return		;funcret
  4483   001F44                     __end_of_add_seconds_to_list:
  4484                           	callstack 0
  4485                           
  4486 ;; *************** function _Timer0_init *****************
  4487 ;; Defined at:
  4488 ;;		line 7 in file "timers.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, status,2
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used: 1
  4508 ;; Hardware stack levels required when called: 5
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text27
  4517   002140                     __ptext27:
  4518                           	callstack 0
  4519   002140                     _Timer0_init:
  4520                           	callstack 25
  4521   002140                     
  4522                           ;timers.c: 9:     T0CON1bits.T0CS=0b010;
  4523   002140  50D6               	movf	214,w,c	;volatile
  4524   002142  0B1F               	andlw	-225
  4525   002144  0940               	iorlw	64
  4526   002146  6ED6               	movwf	214,c	;volatile
  4527   002148                     
  4528                           ;timers.c: 10:     T0CON1bits.T0ASYNC=1;
  4529   002148  88D6               	bsf	214,4,c	;volatile
  4530                           
  4531                           ;timers.c: 11:     T0CON1bits.T0CKPS=0b1000;
  4532   00214A  50D6               	movf	214,w,c	;volatile
  4533   00214C  0BF0               	andlw	-16
  4534   00214E  0908               	iorlw	8
  4535   002150  6ED6               	movwf	214,c	;volatile
  4536                           
  4537                           ;timers.c: 13:     TMR0H=0b11111101;
  4538   002152  0EFD               	movlw	253
  4539   002154  6ED4               	movwf	212,c	;volatile
  4540                           
  4541                           ;timers.c: 14:     TMR0L=0b10010000;
  4542   002156  0E90               	movlw	144
  4543   002158  6ED3               	movwf	211,c	;volatile
  4544   00215A                     
  4545                           ;timers.c: 15:     T0CON0bits.T016BIT=1;
  4546   00215A  88D5               	bsf	213,4,c	;volatile
  4547   00215C                     
  4548                           ;timers.c: 18:     T0CON0bits.T0EN=1;
  4549   00215C  8ED5               	bsf	213,7,c	;volatile
  4550   00215E  0012               	return		;funcret
  4551   002160                     __end_of_Timer0_init:
  4552                           	callstack 0
  4553                           
  4554 ;; *************** function _RobotMovement *****************
  4555 ;; Defined at:
  4556 ;;		line 303 in file "dc_motor.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  color           2   45[COMRAM] unsigned int 
  4559 ;;  motorL          2   47[COMRAM] PTR struct DC_motor
  4560 ;;		 -> main@motorL(9), 
  4561 ;;  motorR          2   49[COMRAM] PTR struct DC_motor
  4562 ;;		 -> main@motorR(9), 
  4563 ;; Auto vars:     Size  Location     Type
  4564 ;;  i               2   55[COMRAM] int 
  4565 ;;  i               2   53[COMRAM] int 
  4566 ;; Return value:  Size  Location     Type
  4567 ;;                  1    wreg      void 
  4568 ;; Registers used:
  4569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  4575 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4576 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4577 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4578 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4579 ;;Total ram usage:       12 bytes
  4580 ;; Hardware stack levels used: 1
  4581 ;; Hardware stack levels required when called: 8
  4582 ;; This function calls:
  4583 ;;		_TimedfullSpeedAhead
  4584 ;;		_moveBack
  4585 ;;		_stop
  4586 ;;		_turnLeft
  4587 ;;		_turnLeftLong
  4588 ;;		_turnRight
  4589 ;;		_turnRightLong
  4590 ;; This function is called by:
  4591 ;;		_main
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text28
  4596   0000A2                     __ptext28:
  4597                           	callstack 0
  4598   0000A2                     _RobotMovement:
  4599                           	callstack 22
  4600   0000A2                     
  4601                           ;dc_motor.c: 303: void RobotMovement(unsigned int color, DC_motor *motorL, DC_motor *mot
      +                          orR);dc_motor.c: 304: {;dc_motor.c: 305:     moveBack(motorL, motorR, 11);
  4602   0000A2  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4603   0000A6  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4604   0000AA  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4605   0000AE  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4606   0000B2  0E00               	movlw	0
  4607   0000B4  6E29               	movwf	(moveBack@time+1)^0,c
  4608   0000B6  0E0B               	movlw	11
  4609   0000B8  6E28               	movwf	moveBack@time^0,c
  4610   0000BA  ECFE  F00C         	call	_moveBack	;wreg free
  4611                           
  4612                           ;dc_motor.c: 306:     stop(motorL,motorR);
  4613   0000BE  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4614   0000C2  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4615   0000C6  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4616   0000CA  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4617   0000CE  EC35  F00F         	call	_stop	;wreg free
  4618   0000D2                     
  4619                           ;dc_motor.c: 309:     if(color == 0){
  4620   0000D2  502E               	movf	RobotMovement@color^0,w,c
  4621   0000D4  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4622   0000D6  A4D8               	btfss	status,2,c
  4623   0000D8  EF70  F000         	goto	u3371
  4624   0000DC  EF72  F000         	goto	u3370
  4625   0000E0                     u3371:
  4626   0000E0  EF8B  F000         	goto	l4128
  4627   0000E4                     u3370:
  4628   0000E4                     
  4629                           ;dc_motor.c: 310:         turnRight(motorL, motorR);
  4630   0000E4  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4631   0000E8  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4632   0000EC  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4633   0000F0  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4634   0000F4  ECB5  F008         	call	_turnRight	;wreg free
  4635   0000F8                     
  4636                           ;dc_motor.c: 311:         movement_list[index] = -1;
  4637   0000F8  90D8               	bcf	status,0,c
  4638   0000FA  3440               	rlcf	_index^0,w,c
  4639   0000FC  6ED9               	movwf	fsr2l,c
  4640   0000FE  3441               	rlcf	(_index+1)^0,w,c
  4641   000100  6EDA               	movwf	fsr2h,c
  4642   000102  0E00               	movlw	low _movement_list
  4643   000104  26D9               	addwf	fsr2l,f,c
  4644   000106  0E02               	movlw	high _movement_list
  4645   000108  22DA               	addwfc	fsr2h,f,c
  4646   00010A  0EFF               	movlw	255
  4647   00010C  6EDE               	movwf	postinc2,c
  4648   00010E  0EFF               	movlw	255
  4649   000110  6EDD               	movwf	postdec2,c
  4650   000112                     
  4651                           ;dc_motor.c: 312:         index++;
  4652   000112  4A40               	infsnz	_index^0,f,c
  4653   000114  2A41               	incf	(_index+1)^0,f,c
  4654   000116                     l4128:
  4655                           
  4656                           ;dc_motor.c: 315:     if(color == 1){
  4657   000116  042E               	decf	RobotMovement@color^0,w,c
  4658   000118  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4659   00011A  A4D8               	btfss	status,2,c
  4660   00011C  EF92  F000         	goto	u3381
  4661   000120  EF94  F000         	goto	u3380
  4662   000124                     u3381:
  4663   000124  EFAD  F000         	goto	l4136
  4664   000128                     u3380:
  4665   000128                     
  4666                           ;dc_motor.c: 316:         turnLeft(motorL, motorR);
  4667   000128  C030  F024         	movff	RobotMovement@motorL,turnLeft@mL
  4668   00012C  C031  F025         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4669   000130  C032  F026         	movff	RobotMovement@motorR,turnLeft@mR
  4670   000134  C033  F027         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4671   000138  EC08  F008         	call	_turnLeft	;wreg free
  4672   00013C                     
  4673                           ;dc_motor.c: 317:         movement_list[index] = -2;
  4674   00013C  90D8               	bcf	status,0,c
  4675   00013E  3440               	rlcf	_index^0,w,c
  4676   000140  6ED9               	movwf	fsr2l,c
  4677   000142  3441               	rlcf	(_index+1)^0,w,c
  4678   000144  6EDA               	movwf	fsr2h,c
  4679   000146  0E00               	movlw	low _movement_list
  4680   000148  26D9               	addwf	fsr2l,f,c
  4681   00014A  0E02               	movlw	high _movement_list
  4682   00014C  22DA               	addwfc	fsr2h,f,c
  4683   00014E  0EFE               	movlw	254
  4684   000150  6EDE               	movwf	postinc2,c
  4685   000152  0EFF               	movlw	255
  4686   000154  6EDD               	movwf	postdec2,c
  4687   000156                     
  4688                           ;dc_motor.c: 318:         index++;
  4689   000156  4A40               	infsnz	_index^0,f,c
  4690   000158  2A41               	incf	(_index+1)^0,f,c
  4691   00015A                     l4136:
  4692                           
  4693                           ;dc_motor.c: 321:     if(color == 2){
  4694   00015A  0E02               	movlw	2
  4695   00015C  182E               	xorwf	RobotMovement@color^0,w,c
  4696   00015E  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4697   000160  A4D8               	btfss	status,2,c
  4698   000162  EFB5  F000         	goto	u3391
  4699   000166  EFB7  F000         	goto	u3390
  4700   00016A                     u3391:
  4701   00016A  EFE4  F000         	goto	l4154
  4702   00016E                     u3390:
  4703   00016E                     
  4704                           ;dc_motor.c: 322:         int i;;dc_motor.c: 323:         for (i=0;i<2;i++){
  4705   00016E  0E00               	movlw	0
  4706   000170  6E37               	movwf	(RobotMovement@i+1)^0,c
  4707   000172  0E00               	movlw	0
  4708   000174  6E36               	movwf	RobotMovement@i^0,c
  4709   000176                     l4144:
  4710                           
  4711                           ;dc_motor.c: 324:             turnRight(motorL, motorR);
  4712   000176  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4713   00017A  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4714   00017E  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4715   000182  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4716   000186  ECB5  F008         	call	_turnRight	;wreg free
  4717   00018A                     
  4718                           ;dc_motor.c: 325:             movement_list[index] = -1;
  4719   00018A  90D8               	bcf	status,0,c
  4720   00018C  3440               	rlcf	_index^0,w,c
  4721   00018E  6ED9               	movwf	fsr2l,c
  4722   000190  3441               	rlcf	(_index+1)^0,w,c
  4723   000192  6EDA               	movwf	fsr2h,c
  4724   000194  0E00               	movlw	low _movement_list
  4725   000196  26D9               	addwf	fsr2l,f,c
  4726   000198  0E02               	movlw	high _movement_list
  4727   00019A  22DA               	addwfc	fsr2h,f,c
  4728   00019C  0EFF               	movlw	255
  4729   00019E  6EDE               	movwf	postinc2,c
  4730   0001A0  0EFF               	movlw	255
  4731   0001A2  6EDD               	movwf	postdec2,c
  4732   0001A4                     
  4733                           ;dc_motor.c: 326:             index++;
  4734   0001A4  4A40               	infsnz	_index^0,f,c
  4735   0001A6  2A41               	incf	(_index+1)^0,f,c
  4736   0001A8                     
  4737                           ;dc_motor.c: 327:         }
  4738   0001A8  4A36               	infsnz	RobotMovement@i^0,f,c
  4739   0001AA  2A37               	incf	(RobotMovement@i+1)^0,f,c
  4740   0001AC  BE37               	btfsc	(RobotMovement@i+1)^0,7,c
  4741   0001AE  EFE2  F000         	goto	u3401
  4742   0001B2  5037               	movf	(RobotMovement@i+1)^0,w,c
  4743   0001B4  E109               	bnz	u3400
  4744   0001B6  0E02               	movlw	2
  4745   0001B8  5C36               	subwf	RobotMovement@i^0,w,c
  4746   0001BA  A0D8               	btfss	status,0,c
  4747   0001BC  EFE2  F000         	goto	u3401
  4748   0001C0  EFE4  F000         	goto	u3400
  4749   0001C4                     u3401:
  4750   0001C4  EFBB  F000         	goto	l4144
  4751   0001C8                     u3400:
  4752   0001C8                     l4154:
  4753                           
  4754                           ;dc_motor.c: 330:     if(color == 3){
  4755   0001C8  0E03               	movlw	3
  4756   0001CA  182E               	xorwf	RobotMovement@color^0,w,c
  4757   0001CC  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4758   0001CE  A4D8               	btfss	status,2,c
  4759   0001D0  EFEC  F000         	goto	u3411
  4760   0001D4  EFEE  F000         	goto	u3410
  4761   0001D8                     u3411:
  4762   0001D8  EFA6  F001         	goto	l4174
  4763   0001DC                     u3410:
  4764   0001DC                     
  4765                           ;dc_motor.c: 332:         moveBack(motorL, motorR, 33);
  4766   0001DC  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4767   0001E0  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4768   0001E4  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4769   0001E8  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4770   0001EC  0E00               	movlw	0
  4771   0001EE  6E29               	movwf	(moveBack@time+1)^0,c
  4772   0001F0  0E21               	movlw	33
  4773   0001F2  6E28               	movwf	moveBack@time^0,c
  4774   0001F4  ECFE  F00C         	call	_moveBack	;wreg free
  4775                           
  4776                           ;dc_motor.c: 333:         stop(motorL, motorR);
  4777   0001F8  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4778   0001FC  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4779   000200  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4780   000204  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4781   000208  EC35  F00F         	call	_stop	;wreg free
  4782                           
  4783                           ;dc_motor.c: 334:         turnRight(motorL, motorR);
  4784   00020C  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  4785   000210  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  4786   000214  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  4787   000218  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  4788   00021C  ECB5  F008         	call	_turnRight	;wreg free
  4789   000220                     
  4790                           ;dc_motor.c: 336:         if (movement_list[index-1] > 11)
  4791   000220  90D8               	bcf	status,0,c
  4792   000222  3440               	rlcf	_index^0,w,c
  4793   000224  6ED9               	movwf	fsr2l,c
  4794   000226  3441               	rlcf	(_index+1)^0,w,c
  4795   000228  6EDA               	movwf	fsr2h,c
  4796   00022A  0EFE               	movlw	low (_movement_list+65534)
  4797   00022C  26D9               	addwf	fsr2l,f,c
  4798   00022E  0E01               	movlw	high (_movement_list+65534)
  4799   000230  22DA               	addwfc	fsr2h,f,c
  4800   000232  0E01               	movlw	1
  4801   000234  BEDB               	btfsc	plusw2,7,c
  4802   000236  EF27  F001         	goto	u3421
  4803   00023A  0E01               	movlw	1
  4804   00023C  50DB               	movf	plusw2,w,c
  4805   00023E  E109               	bnz	u3420
  4806   000240  0E0C               	movlw	12
  4807   000242  5CDE               	subwf	postinc2,w,c
  4808   000244  A0D8               	btfss	status,0,c
  4809   000246  EF27  F001         	goto	u3421
  4810   00024A  EF29  F001         	goto	u3420
  4811   00024E                     u3421:
  4812   00024E  EF47  F001         	goto	l4164
  4813   000252                     u3420:
  4814   000252                     
  4815                           ;dc_motor.c: 337:         {;dc_motor.c: 339:             movement_list[index-1] -= 22;
  4816   000252  90D8               	bcf	status,0,c
  4817   000254  3440               	rlcf	_index^0,w,c
  4818   000256  6ED9               	movwf	fsr2l,c
  4819   000258  3441               	rlcf	(_index+1)^0,w,c
  4820   00025A  6EDA               	movwf	fsr2h,c
  4821   00025C  0EFE               	movlw	low (_movement_list+65534)
  4822   00025E  26D9               	addwf	fsr2l,f,c
  4823   000260  0E01               	movlw	high (_movement_list+65534)
  4824   000262  22DA               	addwfc	fsr2h,f,c
  4825   000264  0EEA               	movlw	234
  4826   000266  26DE               	addwf	postinc2,f,c
  4827   000268  0EFF               	movlw	255
  4828   00026A  22DD               	addwfc	postdec2,f,c
  4829                           
  4830                           ;dc_motor.c: 341:             movement_list[index] = -1;
  4831   00026C  90D8               	bcf	status,0,c
  4832   00026E  3440               	rlcf	_index^0,w,c
  4833   000270  6ED9               	movwf	fsr2l,c
  4834   000272  3441               	rlcf	(_index+1)^0,w,c
  4835   000274  6EDA               	movwf	fsr2h,c
  4836   000276  0E00               	movlw	low _movement_list
  4837   000278  26D9               	addwf	fsr2l,f,c
  4838   00027A  0E02               	movlw	high _movement_list
  4839   00027C  22DA               	addwfc	fsr2h,f,c
  4840   00027E  0EFF               	movlw	255
  4841   000280  6EDE               	movwf	postinc2,c
  4842   000282  0EFF               	movlw	255
  4843   000284  6EDD               	movwf	postdec2,c
  4844   000286                     
  4845                           ;dc_motor.c: 342:             index += 1;
  4846   000286  4A40               	infsnz	_index^0,f,c
  4847   000288  2A41               	incf	(_index+1)^0,f,c
  4848                           
  4849                           ;dc_motor.c: 343:         }else{
  4850   00028A  EFA6  F001         	goto	l4174
  4851   00028E                     l4164:
  4852                           
  4853                           ;dc_motor.c: 345:             if (movement_list[index-1] == -1)
  4854   00028E  90D8               	bcf	status,0,c
  4855   000290  3440               	rlcf	_index^0,w,c
  4856   000292  6ED9               	movwf	fsr2l,c
  4857   000294  3441               	rlcf	(_index+1)^0,w,c
  4858   000296  6EDA               	movwf	fsr2h,c
  4859   000298  0EFE               	movlw	low (_movement_list+65534)
  4860   00029A  26D9               	addwf	fsr2l,f,c
  4861   00029C  0E01               	movlw	high (_movement_list+65534)
  4862   00029E  22DA               	addwfc	fsr2h,f,c
  4863   0002A0  28DE               	incf	postinc2,w,c
  4864   0002A2  E106               	bnz	u3431
  4865   0002A4  28DE               	incf	postinc2,w,c
  4866   0002A6  A4D8               	btfss	status,2,c
  4867   0002A8  EF58  F001         	goto	u3431
  4868   0002AC  EF5A  F001         	goto	u3430
  4869   0002B0                     u3431:
  4870   0002B0  EF67  F001         	goto	l293
  4871   0002B4                     u3430:
  4872   0002B4                     
  4873                           ;dc_motor.c: 346:             {;dc_motor.c: 348:                 movement_list[index-1] 
      +                          = -2;
  4874   0002B4  90D8               	bcf	status,0,c
  4875   0002B6  3440               	rlcf	_index^0,w,c
  4876   0002B8  6ED9               	movwf	fsr2l,c
  4877   0002BA  3441               	rlcf	(_index+1)^0,w,c
  4878   0002BC  6EDA               	movwf	fsr2h,c
  4879   0002BE  0EFE               	movlw	low (_movement_list+65534)
  4880   0002C0  26D9               	addwf	fsr2l,f,c
  4881   0002C2  0E01               	movlw	high (_movement_list+65534)
  4882   0002C4  22DA               	addwfc	fsr2h,f,c
  4883   0002C6  0EFE               	movlw	254
  4884   0002C8  6EDE               	movwf	postinc2,c
  4885   0002CA  0EFF               	movlw	255
  4886   0002CC  6EDD               	movwf	postdec2,c
  4887   0002CE                     l293:
  4888                           
  4889                           ;dc_motor.c: 351:             if (movement_list[index-1] == -2)
  4890   0002CE  90D8               	bcf	status,0,c
  4891   0002D0  3440               	rlcf	_index^0,w,c
  4892   0002D2  6ED9               	movwf	fsr2l,c
  4893   0002D4  3441               	rlcf	(_index+1)^0,w,c
  4894   0002D6  6EDA               	movwf	fsr2h,c
  4895   0002D8  0EFE               	movlw	low (_movement_list+65534)
  4896   0002DA  26D9               	addwf	fsr2l,f,c
  4897   0002DC  0E01               	movlw	high (_movement_list+65534)
  4898   0002DE  22DA               	addwfc	fsr2h,f,c
  4899   0002E0  0EFE               	movlw	254
  4900   0002E2  18DE               	xorwf	postinc2,w,c
  4901   0002E4  E106               	bnz	u3441
  4902   0002E6  28DE               	incf	postinc2,w,c
  4903   0002E8  A4D8               	btfss	status,2,c
  4904   0002EA  EF79  F001         	goto	u3441
  4905   0002EE  EF7B  F001         	goto	u3440
  4906   0002F2                     u3441:
  4907   0002F2  EF88  F001         	goto	l294
  4908   0002F6                     u3440:
  4909   0002F6                     
  4910                           ;dc_motor.c: 352:             {;dc_motor.c: 354:                 movement_list[index-1] 
      +                          = -1;
  4911   0002F6  90D8               	bcf	status,0,c
  4912   0002F8  3440               	rlcf	_index^0,w,c
  4913   0002FA  6ED9               	movwf	fsr2l,c
  4914   0002FC  3441               	rlcf	(_index+1)^0,w,c
  4915   0002FE  6EDA               	movwf	fsr2h,c
  4916   000300  0EFE               	movlw	low (_movement_list+65534)
  4917   000302  26D9               	addwf	fsr2l,f,c
  4918   000304  0E01               	movlw	high (_movement_list+65534)
  4919   000306  22DA               	addwfc	fsr2h,f,c
  4920   000308  0EFF               	movlw	255
  4921   00030A  6EDE               	movwf	postinc2,c
  4922   00030C  0EFF               	movlw	255
  4923   00030E  6EDD               	movwf	postdec2,c
  4924   000310                     l294:
  4925                           
  4926                           ;dc_motor.c: 357:         movement_list[index] = 22;
  4927   000310  90D8               	bcf	status,0,c
  4928   000312  3440               	rlcf	_index^0,w,c
  4929   000314  6ED9               	movwf	fsr2l,c
  4930   000316  3441               	rlcf	(_index+1)^0,w,c
  4931   000318  6EDA               	movwf	fsr2h,c
  4932   00031A  0E00               	movlw	low _movement_list
  4933   00031C  26D9               	addwf	fsr2l,f,c
  4934   00031E  0E02               	movlw	high _movement_list
  4935   000320  22DA               	addwfc	fsr2h,f,c
  4936   000322  0E16               	movlw	22
  4937   000324  6EDE               	movwf	postinc2,c
  4938   000326  0E00               	movlw	0
  4939   000328  6EDD               	movwf	postdec2,c
  4940   00032A                     
  4941                           ;dc_motor.c: 358:         index += 1;
  4942   00032A  4A40               	infsnz	_index^0,f,c
  4943   00032C  2A41               	incf	(_index+1)^0,f,c
  4944   00032E                     
  4945                           ;dc_motor.c: 360:         movement_list[index] = -2;
  4946   00032E  90D8               	bcf	status,0,c
  4947   000330  3440               	rlcf	_index^0,w,c
  4948   000332  6ED9               	movwf	fsr2l,c
  4949   000334  3441               	rlcf	(_index+1)^0,w,c
  4950   000336  6EDA               	movwf	fsr2h,c
  4951   000338  0E00               	movlw	low _movement_list
  4952   00033A  26D9               	addwf	fsr2l,f,c
  4953   00033C  0E02               	movlw	high _movement_list
  4954   00033E  22DA               	addwfc	fsr2h,f,c
  4955   000340  0EFE               	movlw	254
  4956   000342  6EDE               	movwf	postinc2,c
  4957   000344  0EFF               	movlw	255
  4958   000346  6EDD               	movwf	postdec2,c
  4959                           
  4960                           ;dc_motor.c: 361:         index += 1;
  4961   000348  4A40               	infsnz	_index^0,f,c
  4962   00034A  2A41               	incf	(_index+1)^0,f,c
  4963   00034C                     l4174:
  4964                           
  4965                           ;dc_motor.c: 366:     if(color == 4){
  4966   00034C  0E04               	movlw	4
  4967   00034E  182E               	xorwf	RobotMovement@color^0,w,c
  4968   000350  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  4969   000352  A4D8               	btfss	status,2,c
  4970   000354  EFAE  F001         	goto	u3451
  4971   000358  EFB0  F001         	goto	u3450
  4972   00035C                     u3451:
  4973   00035C  EF68  F002         	goto	l4194
  4974   000360                     u3450:
  4975   000360                     
  4976                           ;dc_motor.c: 368:         moveBack(motorL, motorR, 33);
  4977   000360  C030  F024         	movff	RobotMovement@motorL,moveBack@mL
  4978   000364  C031  F025         	movff	RobotMovement@motorL+1,moveBack@mL+1
  4979   000368  C032  F026         	movff	RobotMovement@motorR,moveBack@mR
  4980   00036C  C033  F027         	movff	RobotMovement@motorR+1,moveBack@mR+1
  4981   000370  0E00               	movlw	0
  4982   000372  6E29               	movwf	(moveBack@time+1)^0,c
  4983   000374  0E21               	movlw	33
  4984   000376  6E28               	movwf	moveBack@time^0,c
  4985   000378  ECFE  F00C         	call	_moveBack	;wreg free
  4986                           
  4987                           ;dc_motor.c: 369:         stop(motorL, motorR);
  4988   00037C  C030  F024         	movff	RobotMovement@motorL,stop@mL
  4989   000380  C031  F025         	movff	RobotMovement@motorL+1,stop@mL+1
  4990   000384  C032  F026         	movff	RobotMovement@motorR,stop@mR
  4991   000388  C033  F027         	movff	RobotMovement@motorR+1,stop@mR+1
  4992   00038C  EC35  F00F         	call	_stop	;wreg free
  4993                           
  4994                           ;dc_motor.c: 370:         turnLeft(motorL, motorR);
  4995   000390  C030  F024         	movff	RobotMovement@motorL,turnLeft@mL
  4996   000394  C031  F025         	movff	RobotMovement@motorL+1,turnLeft@mL+1
  4997   000398  C032  F026         	movff	RobotMovement@motorR,turnLeft@mR
  4998   00039C  C033  F027         	movff	RobotMovement@motorR+1,turnLeft@mR+1
  4999   0003A0  EC08  F008         	call	_turnLeft	;wreg free
  5000   0003A4                     
  5001                           ;dc_motor.c: 372:         if (movement_list[index-1] > 11)
  5002   0003A4  90D8               	bcf	status,0,c
  5003   0003A6  3440               	rlcf	_index^0,w,c
  5004   0003A8  6ED9               	movwf	fsr2l,c
  5005   0003AA  3441               	rlcf	(_index+1)^0,w,c
  5006   0003AC  6EDA               	movwf	fsr2h,c
  5007   0003AE  0EFE               	movlw	low (_movement_list+65534)
  5008   0003B0  26D9               	addwf	fsr2l,f,c
  5009   0003B2  0E01               	movlw	high (_movement_list+65534)
  5010   0003B4  22DA               	addwfc	fsr2h,f,c
  5011   0003B6  0E01               	movlw	1
  5012   0003B8  BEDB               	btfsc	plusw2,7,c
  5013   0003BA  EFE9  F001         	goto	u3461
  5014   0003BE  0E01               	movlw	1
  5015   0003C0  50DB               	movf	plusw2,w,c
  5016   0003C2  E109               	bnz	u3460
  5017   0003C4  0E0C               	movlw	12
  5018   0003C6  5CDE               	subwf	postinc2,w,c
  5019   0003C8  A0D8               	btfss	status,0,c
  5020   0003CA  EFE9  F001         	goto	u3461
  5021   0003CE  EFEB  F001         	goto	u3460
  5022   0003D2                     u3461:
  5023   0003D2  EF09  F002         	goto	l4184
  5024   0003D6                     u3460:
  5025   0003D6                     
  5026                           ;dc_motor.c: 373:         {;dc_motor.c: 375:             movement_list[index-1] -= 22;
  5027   0003D6  90D8               	bcf	status,0,c
  5028   0003D8  3440               	rlcf	_index^0,w,c
  5029   0003DA  6ED9               	movwf	fsr2l,c
  5030   0003DC  3441               	rlcf	(_index+1)^0,w,c
  5031   0003DE  6EDA               	movwf	fsr2h,c
  5032   0003E0  0EFE               	movlw	low (_movement_list+65534)
  5033   0003E2  26D9               	addwf	fsr2l,f,c
  5034   0003E4  0E01               	movlw	high (_movement_list+65534)
  5035   0003E6  22DA               	addwfc	fsr2h,f,c
  5036   0003E8  0EEA               	movlw	234
  5037   0003EA  26DE               	addwf	postinc2,f,c
  5038   0003EC  0EFF               	movlw	255
  5039   0003EE  22DD               	addwfc	postdec2,f,c
  5040                           
  5041                           ;dc_motor.c: 377:             movement_list[index] = -2;
  5042   0003F0  90D8               	bcf	status,0,c
  5043   0003F2  3440               	rlcf	_index^0,w,c
  5044   0003F4  6ED9               	movwf	fsr2l,c
  5045   0003F6  3441               	rlcf	(_index+1)^0,w,c
  5046   0003F8  6EDA               	movwf	fsr2h,c
  5047   0003FA  0E00               	movlw	low _movement_list
  5048   0003FC  26D9               	addwf	fsr2l,f,c
  5049   0003FE  0E02               	movlw	high _movement_list
  5050   000400  22DA               	addwfc	fsr2h,f,c
  5051   000402  0EFE               	movlw	254
  5052   000404  6EDE               	movwf	postinc2,c
  5053   000406  0EFF               	movlw	255
  5054   000408  6EDD               	movwf	postdec2,c
  5055   00040A                     
  5056                           ;dc_motor.c: 378:             index += 1;
  5057   00040A  4A40               	infsnz	_index^0,f,c
  5058   00040C  2A41               	incf	(_index+1)^0,f,c
  5059                           
  5060                           ;dc_motor.c: 379:         }else{
  5061   00040E  EF68  F002         	goto	l4194
  5062   000412                     l4184:
  5063                           
  5064                           ;dc_motor.c: 381:             if (movement_list[index-1] == -1)
  5065   000412  90D8               	bcf	status,0,c
  5066   000414  3440               	rlcf	_index^0,w,c
  5067   000416  6ED9               	movwf	fsr2l,c
  5068   000418  3441               	rlcf	(_index+1)^0,w,c
  5069   00041A  6EDA               	movwf	fsr2h,c
  5070   00041C  0EFE               	movlw	low (_movement_list+65534)
  5071   00041E  26D9               	addwf	fsr2l,f,c
  5072   000420  0E01               	movlw	high (_movement_list+65534)
  5073   000422  22DA               	addwfc	fsr2h,f,c
  5074   000424  28DE               	incf	postinc2,w,c
  5075   000426  E106               	bnz	u3471
  5076   000428  28DE               	incf	postinc2,w,c
  5077   00042A  A4D8               	btfss	status,2,c
  5078   00042C  EF1A  F002         	goto	u3471
  5079   000430  EF1C  F002         	goto	u3470
  5080   000434                     u3471:
  5081   000434  EF29  F002         	goto	l298
  5082   000438                     u3470:
  5083   000438                     
  5084                           ;dc_motor.c: 382:             {;dc_motor.c: 384:                 movement_list[index-1] 
      +                          = -2;
  5085   000438  90D8               	bcf	status,0,c
  5086   00043A  3440               	rlcf	_index^0,w,c
  5087   00043C  6ED9               	movwf	fsr2l,c
  5088   00043E  3441               	rlcf	(_index+1)^0,w,c
  5089   000440  6EDA               	movwf	fsr2h,c
  5090   000442  0EFE               	movlw	low (_movement_list+65534)
  5091   000444  26D9               	addwf	fsr2l,f,c
  5092   000446  0E01               	movlw	high (_movement_list+65534)
  5093   000448  22DA               	addwfc	fsr2h,f,c
  5094   00044A  0EFE               	movlw	254
  5095   00044C  6EDE               	movwf	postinc2,c
  5096   00044E  0EFF               	movlw	255
  5097   000450  6EDD               	movwf	postdec2,c
  5098   000452                     l298:
  5099                           
  5100                           ;dc_motor.c: 387:             if (movement_list[index-1] == -2)
  5101   000452  90D8               	bcf	status,0,c
  5102   000454  3440               	rlcf	_index^0,w,c
  5103   000456  6ED9               	movwf	fsr2l,c
  5104   000458  3441               	rlcf	(_index+1)^0,w,c
  5105   00045A  6EDA               	movwf	fsr2h,c
  5106   00045C  0EFE               	movlw	low (_movement_list+65534)
  5107   00045E  26D9               	addwf	fsr2l,f,c
  5108   000460  0E01               	movlw	high (_movement_list+65534)
  5109   000462  22DA               	addwfc	fsr2h,f,c
  5110   000464  0EFE               	movlw	254
  5111   000466  18DE               	xorwf	postinc2,w,c
  5112   000468  E106               	bnz	u3481
  5113   00046A  28DE               	incf	postinc2,w,c
  5114   00046C  A4D8               	btfss	status,2,c
  5115   00046E  EF3B  F002         	goto	u3481
  5116   000472  EF3D  F002         	goto	u3480
  5117   000476                     u3481:
  5118   000476  EF4A  F002         	goto	l299
  5119   00047A                     u3480:
  5120   00047A                     
  5121                           ;dc_motor.c: 388:             {;dc_motor.c: 390:                 movement_list[index-1] 
      +                          = -1;
  5122   00047A  90D8               	bcf	status,0,c
  5123   00047C  3440               	rlcf	_index^0,w,c
  5124   00047E  6ED9               	movwf	fsr2l,c
  5125   000480  3441               	rlcf	(_index+1)^0,w,c
  5126   000482  6EDA               	movwf	fsr2h,c
  5127   000484  0EFE               	movlw	low (_movement_list+65534)
  5128   000486  26D9               	addwf	fsr2l,f,c
  5129   000488  0E01               	movlw	high (_movement_list+65534)
  5130   00048A  22DA               	addwfc	fsr2h,f,c
  5131   00048C  0EFF               	movlw	255
  5132   00048E  6EDE               	movwf	postinc2,c
  5133   000490  0EFF               	movlw	255
  5134   000492  6EDD               	movwf	postdec2,c
  5135   000494                     l299:
  5136                           
  5137                           ;dc_motor.c: 393:         movement_list[index] = 22;
  5138   000494  90D8               	bcf	status,0,c
  5139   000496  3440               	rlcf	_index^0,w,c
  5140   000498  6ED9               	movwf	fsr2l,c
  5141   00049A  3441               	rlcf	(_index+1)^0,w,c
  5142   00049C  6EDA               	movwf	fsr2h,c
  5143   00049E  0E00               	movlw	low _movement_list
  5144   0004A0  26D9               	addwf	fsr2l,f,c
  5145   0004A2  0E02               	movlw	high _movement_list
  5146   0004A4  22DA               	addwfc	fsr2h,f,c
  5147   0004A6  0E16               	movlw	22
  5148   0004A8  6EDE               	movwf	postinc2,c
  5149   0004AA  0E00               	movlw	0
  5150   0004AC  6EDD               	movwf	postdec2,c
  5151   0004AE                     
  5152                           ;dc_motor.c: 394:         index += 1;
  5153   0004AE  4A40               	infsnz	_index^0,f,c
  5154   0004B0  2A41               	incf	(_index+1)^0,f,c
  5155   0004B2                     
  5156                           ;dc_motor.c: 396:         movement_list[index] = -1;
  5157   0004B2  90D8               	bcf	status,0,c
  5158   0004B4  3440               	rlcf	_index^0,w,c
  5159   0004B6  6ED9               	movwf	fsr2l,c
  5160   0004B8  3441               	rlcf	(_index+1)^0,w,c
  5161   0004BA  6EDA               	movwf	fsr2h,c
  5162   0004BC  0E00               	movlw	low _movement_list
  5163   0004BE  26D9               	addwf	fsr2l,f,c
  5164   0004C0  0E02               	movlw	high _movement_list
  5165   0004C2  22DA               	addwfc	fsr2h,f,c
  5166   0004C4  0EFF               	movlw	255
  5167   0004C6  6EDE               	movwf	postinc2,c
  5168   0004C8  0EFF               	movlw	255
  5169   0004CA  6EDD               	movwf	postdec2,c
  5170                           
  5171                           ;dc_motor.c: 397:         index += 1;
  5172   0004CC  4A40               	infsnz	_index^0,f,c
  5173   0004CE  2A41               	incf	(_index+1)^0,f,c
  5174   0004D0                     l4194:
  5175                           
  5176                           ;dc_motor.c: 401:     if(color == 5){
  5177   0004D0  0E05               	movlw	5
  5178   0004D2  182E               	xorwf	RobotMovement@color^0,w,c
  5179   0004D4  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5180   0004D6  A4D8               	btfss	status,2,c
  5181   0004D8  EF70  F002         	goto	u3491
  5182   0004DC  EF72  F002         	goto	u3490
  5183   0004E0                     u3491:
  5184   0004E0  EF8B  F002         	goto	l4202
  5185   0004E4                     u3490:
  5186   0004E4                     
  5187                           ;dc_motor.c: 402:         turnRightLong(motorL, motorR);
  5188   0004E4  C030  F024         	movff	RobotMovement@motorL,turnRightLong@mL
  5189   0004E8  C031  F025         	movff	RobotMovement@motorL+1,turnRightLong@mL+1
  5190   0004EC  C032  F026         	movff	RobotMovement@motorR,turnRightLong@mR
  5191   0004F0  C033  F027         	movff	RobotMovement@motorR+1,turnRightLong@mR+1
  5192   0004F4  EC98  F00A         	call	_turnRightLong	;wreg free
  5193   0004F8                     
  5194                           ;dc_motor.c: 403:         movement_list[index] = -3;
  5195   0004F8  90D8               	bcf	status,0,c
  5196   0004FA  3440               	rlcf	_index^0,w,c
  5197   0004FC  6ED9               	movwf	fsr2l,c
  5198   0004FE  3441               	rlcf	(_index+1)^0,w,c
  5199   000500  6EDA               	movwf	fsr2h,c
  5200   000502  0E00               	movlw	low _movement_list
  5201   000504  26D9               	addwf	fsr2l,f,c
  5202   000506  0E02               	movlw	high _movement_list
  5203   000508  22DA               	addwfc	fsr2h,f,c
  5204   00050A  0EFD               	movlw	253
  5205   00050C  6EDE               	movwf	postinc2,c
  5206   00050E  0EFF               	movlw	255
  5207   000510  6EDD               	movwf	postdec2,c
  5208   000512                     
  5209                           ;dc_motor.c: 404:         index += 1;
  5210   000512  4A40               	infsnz	_index^0,f,c
  5211   000514  2A41               	incf	(_index+1)^0,f,c
  5212   000516                     l4202:
  5213                           
  5214                           ;dc_motor.c: 407:     if(color == 6){
  5215   000516  0E06               	movlw	6
  5216   000518  182E               	xorwf	RobotMovement@color^0,w,c
  5217   00051A  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5218   00051C  A4D8               	btfss	status,2,c
  5219   00051E  EF93  F002         	goto	u3501
  5220   000522  EF95  F002         	goto	u3500
  5221   000526                     u3501:
  5222   000526  EFAE  F002         	goto	l4210
  5223   00052A                     u3500:
  5224   00052A                     
  5225                           ;dc_motor.c: 408:         turnLeftLong(motorL, motorR);
  5226   00052A  C030  F024         	movff	RobotMovement@motorL,turnLeftLong@mL
  5227   00052E  C031  F025         	movff	RobotMovement@motorL+1,turnLeftLong@mL+1
  5228   000532  C032  F026         	movff	RobotMovement@motorR,turnLeftLong@mR
  5229   000536  C033  F027         	movff	RobotMovement@motorR+1,turnLeftLong@mR+1
  5230   00053A  EC2C  F00B         	call	_turnLeftLong	;wreg free
  5231   00053E                     
  5232                           ;dc_motor.c: 409:         movement_list[index] = -4;
  5233   00053E  90D8               	bcf	status,0,c
  5234   000540  3440               	rlcf	_index^0,w,c
  5235   000542  6ED9               	movwf	fsr2l,c
  5236   000544  3441               	rlcf	(_index+1)^0,w,c
  5237   000546  6EDA               	movwf	fsr2h,c
  5238   000548  0E00               	movlw	low _movement_list
  5239   00054A  26D9               	addwf	fsr2l,f,c
  5240   00054C  0E02               	movlw	high _movement_list
  5241   00054E  22DA               	addwfc	fsr2h,f,c
  5242   000550  0EFC               	movlw	252
  5243   000552  6EDE               	movwf	postinc2,c
  5244   000554  0EFF               	movlw	255
  5245   000556  6EDD               	movwf	postdec2,c
  5246   000558                     
  5247                           ;dc_motor.c: 410:         index += 1;
  5248   000558  4A40               	infsnz	_index^0,f,c
  5249   00055A  2A41               	incf	(_index+1)^0,f,c
  5250   00055C                     l4210:
  5251                           
  5252                           ;dc_motor.c: 413:     if(color == 7){
  5253   00055C  0E07               	movlw	7
  5254   00055E  182E               	xorwf	RobotMovement@color^0,w,c
  5255   000560  102F               	iorwf	(RobotMovement@color+1)^0,w,c
  5256   000562  A4D8               	btfss	status,2,c
  5257   000564  EFB6  F002         	goto	u3511
  5258   000568  EFB8  F002         	goto	u3510
  5259   00056C                     u3511:
  5260   00056C  EFDA  F002         	goto	l4226
  5261   000570                     u3510:
  5262   000570                     
  5263                           ;dc_motor.c: 414:         int i;;dc_motor.c: 415:         for (i=0;i<2;i++)
  5264   000570  0E00               	movlw	0
  5265   000572  6E39               	movwf	(RobotMovement@i_1278+1)^0,c
  5266   000574  0E00               	movlw	0
  5267   000576  6E38               	movwf	RobotMovement@i_1278^0,c
  5268   000578                     l4218:
  5269                           
  5270                           ;dc_motor.c: 416:         {;dc_motor.c: 417:             turnRight(motorL, motorR);
  5271   000578  C030  F024         	movff	RobotMovement@motorL,turnRight@mL
  5272   00057C  C031  F025         	movff	RobotMovement@motorL+1,turnRight@mL+1
  5273   000580  C032  F026         	movff	RobotMovement@motorR,turnRight@mR
  5274   000584  C033  F027         	movff	RobotMovement@motorR+1,turnRight@mR+1
  5275   000588  ECB5  F008         	call	_turnRight	;wreg free
  5276   00058C                     
  5277                           ;dc_motor.c: 418:         }
  5278   00058C  4A38               	infsnz	RobotMovement@i_1278^0,f,c
  5279   00058E  2A39               	incf	(RobotMovement@i_1278+1)^0,f,c
  5280   000590  BE39               	btfsc	(RobotMovement@i_1278+1)^0,7,c
  5281   000592  EFD4  F002         	goto	u3521
  5282   000596  5039               	movf	(RobotMovement@i_1278+1)^0,w,c
  5283   000598  E109               	bnz	u3520
  5284   00059A  0E02               	movlw	2
  5285   00059C  5C38               	subwf	RobotMovement@i_1278^0,w,c
  5286   00059E  A0D8               	btfss	status,0,c
  5287   0005A0  EFD4  F002         	goto	u3521
  5288   0005A4  EFD6  F002         	goto	u3520
  5289   0005A8                     u3521:
  5290   0005A8  EFBC  F002         	goto	l4218
  5291   0005AC                     u3520:
  5292   0005AC                     
  5293                           ;dc_motor.c: 420:         state = 1;
  5294   0005AC  0E00               	movlw	0
  5295   0005AE  6E3F               	movwf	(_state+1)^0,c
  5296   0005B0  0E01               	movlw	1
  5297   0005B2  6E3E               	movwf	_state^0,c
  5298   0005B4                     l4226:
  5299                           
  5300                           ;dc_motor.c: 423:     if (color > 7)
  5301   0005B4  502F               	movf	(RobotMovement@color+1)^0,w,c
  5302   0005B6  E109               	bnz	u3530
  5303   0005B8  0E08               	movlw	8
  5304   0005BA  5C2E               	subwf	RobotMovement@color^0,w,c
  5305   0005BC  A0D8               	btfss	status,0,c
  5306   0005BE  EFE3  F002         	goto	u3531
  5307   0005C2  EFE5  F002         	goto	u3530
  5308   0005C6                     u3531:
  5309   0005C6  EFF3  F002         	goto	l306
  5310   0005CA                     u3530:
  5311   0005CA                     
  5312                           ;dc_motor.c: 424:     {;dc_motor.c: 425:         TimedfullSpeedAhead(motorL, motorR, 11)
      +                          ;
  5313   0005CA  C030  F024         	movff	RobotMovement@motorL,TimedfullSpeedAhead@mL
  5314   0005CE  C031  F025         	movff	RobotMovement@motorL+1,TimedfullSpeedAhead@mL+1
  5315   0005D2  C032  F026         	movff	RobotMovement@motorR,TimedfullSpeedAhead@mR
  5316   0005D6  C033  F027         	movff	RobotMovement@motorR+1,TimedfullSpeedAhead@mR+1
  5317   0005DA  0E00               	movlw	0
  5318   0005DC  6E29               	movwf	(TimedfullSpeedAhead@time+1)^0,c
  5319   0005DE  0E0B               	movlw	11
  5320   0005E0  6E28               	movwf	TimedfullSpeedAhead@time^0,c
  5321   0005E2  EC38  F00D         	call	_TimedfullSpeedAhead	;wreg free
  5322   0005E6                     l306:
  5323   0005E6  0012               	return		;funcret
  5324   0005E8                     __end_of_RobotMovement:
  5325                           	callstack 0
  5326                           
  5327 ;; *************** function _turnRightLong *****************
  5328 ;; Defined at:
  5329 ;;		line 231 in file "dc_motor.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5332 ;;		 -> main@motorL(9), 
  5333 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5334 ;;		 -> main@motorR(9), 
  5335 ;; Auto vars:     Size  Location     Type
  5336 ;;  i               2   41[COMRAM] int 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  1    wreg      void 
  5339 ;; Registers used:
  5340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5347 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5348 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5349 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5350 ;;Total ram usage:        8 bytes
  5351 ;; Hardware stack levels used: 1
  5352 ;; Hardware stack levels required when called: 7
  5353 ;; This function calls:
  5354 ;;		_setMotorPWM
  5355 ;; This function is called by:
  5356 ;;		_RobotMovement
  5357 ;;		_return_back
  5358 ;; This function uses a non-reentrant model
  5359 ;;
  5360                           
  5361                           	psect	text29
  5362   001530                     __ptext29:
  5363                           	callstack 0
  5364   001530                     _turnRightLong:
  5365                           	callstack 22
  5366   001530                     
  5367                           ;dc_motor.c: 231: void turnRightLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.
      +                          c: 232: {;dc_motor.c: 234:     int i;;dc_motor.c: 235:     for(i=25;i<40;i+=5){
  5368   001530  0E00               	movlw	0
  5369   001532  6E2B               	movwf	(turnRightLong@i+1)^0,c
  5370   001534  0E19               	movlw	25
  5371   001536  6E2A               	movwf	turnRightLong@i^0,c
  5372   001538                     l3854:
  5373                           
  5374                           ;dc_motor.c: 236:     (*mL).direction=0;
  5375   001538  EE20 F001          	lfsr	2,1
  5376   00153C  5024               	movf	turnRightLong@mL^0,w,c
  5377   00153E  26D9               	addwf	fsr2l,f,c
  5378   001540  5025               	movf	(turnRightLong@mL+1)^0,w,c
  5379   001542  22DA               	addwfc	fsr2h,f,c
  5380   001544  0E00               	movlw	0
  5381   001546  6EDF               	movwf	indf2,c
  5382                           
  5383                           ;dc_motor.c: 237:     (*mR).direction=1;
  5384   001548  EE20 F001          	lfsr	2,1
  5385   00154C  5026               	movf	turnRightLong@mR^0,w,c
  5386   00154E  26D9               	addwf	fsr2l,f,c
  5387   001550  5027               	movf	(turnRightLong@mR+1)^0,w,c
  5388   001552  22DA               	addwfc	fsr2h,f,c
  5389   001554  0E01               	movlw	1
  5390   001556  6EDF               	movwf	indf2,c
  5391   001558                     
  5392                           ;dc_motor.c: 238:     (*mL).power=i;
  5393   001558  C024  FFD9         	movff	turnRightLong@mL,fsr2l
  5394   00155C  C025  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5395   001560  C02A  FFDF         	movff	turnRightLong@i,indf2
  5396   001564                     
  5397                           ;dc_motor.c: 239:     (*mR).power=i;
  5398   001564  C026  FFD9         	movff	turnRightLong@mR,fsr2l
  5399   001568  C027  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5400   00156C  C02A  FFDF         	movff	turnRightLong@i,indf2
  5401   001570                     
  5402                           ;dc_motor.c: 240:     setMotorPWM(mL);
  5403   001570  C024  F01E         	movff	turnRightLong@mL,setMotorPWM@m
  5404   001574  C025  F01F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5405   001578  EC52  F007         	call	_setMotorPWM	;wreg free
  5406   00157C                     
  5407                           ;dc_motor.c: 241:     setMotorPWM(mR);
  5408   00157C  C026  F01E         	movff	turnRightLong@mR,setMotorPWM@m
  5409   001580  C027  F01F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5410   001584  EC52  F007         	call	_setMotorPWM	;wreg free
  5411   001588                     
  5412                           ;dc_motor.c: 242:     _delay((unsigned long)((161)*(64000000/4000.0)));
  5413   001588  0E0E               	movlw	14
  5414   00158A  6E29               	movwf	(??_turnRightLong+1)^0,c
  5415   00158C  0E12               	movlw	18
  5416   00158E  6E28               	movwf	??_turnRightLong^0,c
  5417   001590  0E69               	movlw	105
  5418   001592                     u4167:
  5419   001592  2EE8               	decfsz	wreg,f,c
  5420   001594  D7FE               	bra	u4167
  5421   001596  2E28               	decfsz	??_turnRightLong^0,f,c
  5422   001598  D7FC               	bra	u4167
  5423   00159A  2E29               	decfsz	(??_turnRightLong+1)^0,f,c
  5424   00159C  D7FA               	bra	u4167
  5425   00159E  F000               	nop	
  5426   0015A0                     
  5427                           ;dc_motor.c: 243:     }
  5428   0015A0  0E05               	movlw	5
  5429   0015A2  262A               	addwf	turnRightLong@i^0,f,c
  5430   0015A4  0E00               	movlw	0
  5431   0015A6  222B               	addwfc	(turnRightLong@i+1)^0,f,c
  5432   0015A8  BE2B               	btfsc	(turnRightLong@i+1)^0,7,c
  5433   0015AA  EFE0  F00A         	goto	u3001
  5434   0015AE  502B               	movf	(turnRightLong@i+1)^0,w,c
  5435   0015B0  E109               	bnz	u3000
  5436   0015B2  0E28               	movlw	40
  5437   0015B4  5C2A               	subwf	turnRightLong@i^0,w,c
  5438   0015B6  A0D8               	btfss	status,0,c
  5439   0015B8  EFE0  F00A         	goto	u3001
  5440   0015BC  EFE2  F00A         	goto	u3000
  5441   0015C0                     u3001:
  5442   0015C0  EF9C  F00A         	goto	l3854
  5443   0015C4                     u3000:
  5444   0015C4                     
  5445                           ;dc_motor.c: 244:     for(i=30;i>15;i-=5){
  5446   0015C4  0E00               	movlw	0
  5447   0015C6  6E2B               	movwf	(turnRightLong@i+1)^0,c
  5448   0015C8  0E1E               	movlw	30
  5449   0015CA  6E2A               	movwf	turnRightLong@i^0,c
  5450   0015CC                     l3876:
  5451                           
  5452                           ;dc_motor.c: 245:     (*mL).direction=0;
  5453   0015CC  EE20 F001          	lfsr	2,1
  5454   0015D0  5024               	movf	turnRightLong@mL^0,w,c
  5455   0015D2  26D9               	addwf	fsr2l,f,c
  5456   0015D4  5025               	movf	(turnRightLong@mL+1)^0,w,c
  5457   0015D6  22DA               	addwfc	fsr2h,f,c
  5458   0015D8  0E00               	movlw	0
  5459   0015DA  6EDF               	movwf	indf2,c
  5460                           
  5461                           ;dc_motor.c: 246:     (*mR).direction=1;
  5462   0015DC  EE20 F001          	lfsr	2,1
  5463   0015E0  5026               	movf	turnRightLong@mR^0,w,c
  5464   0015E2  26D9               	addwf	fsr2l,f,c
  5465   0015E4  5027               	movf	(turnRightLong@mR+1)^0,w,c
  5466   0015E6  22DA               	addwfc	fsr2h,f,c
  5467   0015E8  0E01               	movlw	1
  5468   0015EA  6EDF               	movwf	indf2,c
  5469   0015EC                     
  5470                           ;dc_motor.c: 247:     (*mL).power=i;
  5471   0015EC  C024  FFD9         	movff	turnRightLong@mL,fsr2l
  5472   0015F0  C025  FFDA         	movff	turnRightLong@mL+1,fsr2h
  5473   0015F4  C02A  FFDF         	movff	turnRightLong@i,indf2
  5474   0015F8                     
  5475                           ;dc_motor.c: 248:     (*mR).power=i;
  5476   0015F8  C026  FFD9         	movff	turnRightLong@mR,fsr2l
  5477   0015FC  C027  FFDA         	movff	turnRightLong@mR+1,fsr2h
  5478   001600  C02A  FFDF         	movff	turnRightLong@i,indf2
  5479   001604                     
  5480                           ;dc_motor.c: 249:     setMotorPWM(mL);
  5481   001604  C024  F01E         	movff	turnRightLong@mL,setMotorPWM@m
  5482   001608  C025  F01F         	movff	turnRightLong@mL+1,setMotorPWM@m+1
  5483   00160C  EC52  F007         	call	_setMotorPWM	;wreg free
  5484   001610                     
  5485                           ;dc_motor.c: 250:     setMotorPWM(mR);
  5486   001610  C026  F01E         	movff	turnRightLong@mR,setMotorPWM@m
  5487   001614  C027  F01F         	movff	turnRightLong@mR+1,setMotorPWM@m+1
  5488   001618  EC52  F007         	call	_setMotorPWM	;wreg free
  5489   00161C                     
  5490                           ;dc_motor.c: 251:     _delay((unsigned long)((157)*(64000000/4000.0)));
  5491   00161C  0E0D               	movlw	13
  5492   00161E  6E29               	movwf	(??_turnRightLong+1)^0,c
  5493   001620  0EBF               	movlw	191
  5494   001622  6E28               	movwf	??_turnRightLong^0,c
  5495   001624  0E4C               	movlw	76
  5496   001626                     u4177:
  5497   001626  2EE8               	decfsz	wreg,f,c
  5498   001628  D7FE               	bra	u4177
  5499   00162A  2E28               	decfsz	??_turnRightLong^0,f,c
  5500   00162C  D7FC               	bra	u4177
  5501   00162E  2E29               	decfsz	(??_turnRightLong+1)^0,f,c
  5502   001630  D7FA               	bra	u4177
  5503   001632                     
  5504                           ;dc_motor.c: 253:     }
  5505   001632  0EFB               	movlw	251
  5506   001634  262A               	addwf	turnRightLong@i^0,f,c
  5507   001636  0EFF               	movlw	255
  5508   001638  222B               	addwfc	(turnRightLong@i+1)^0,f,c
  5509   00163A  BE2B               	btfsc	(turnRightLong@i+1)^0,7,c
  5510   00163C  EF2B  F00B         	goto	u3010
  5511   001640  502B               	movf	(turnRightLong@i+1)^0,w,c
  5512   001642  E107               	bnz	u3011
  5513   001644  0E10               	movlw	16
  5514   001646  5C2A               	subwf	turnRightLong@i^0,w,c
  5515   001648  B0D8               	btfsc	status,0,c
  5516   00164A  EF29  F00B         	goto	u3011
  5517   00164E  EF2B  F00B         	goto	u3010
  5518   001652                     u3011:
  5519   001652  EFE6  F00A         	goto	l3876
  5520   001656                     u3010:
  5521   001656  0012               	return		;funcret
  5522   001658                     __end_of_turnRightLong:
  5523                           	callstack 0
  5524                           
  5525 ;; *************** function _turnRight *****************
  5526 ;; Defined at:
  5527 ;;		line 154 in file "dc_motor.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5530 ;;		 -> main@motorL(9), 
  5531 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5532 ;;		 -> main@motorR(9), 
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;  i               2   43[COMRAM] int 
  5535 ;;  k               2   41[COMRAM] int 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  1    wreg      void 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5546 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5547 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5548 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5549 ;;Total ram usage:       10 bytes
  5550 ;; Hardware stack levels used: 1
  5551 ;; Hardware stack levels required when called: 7
  5552 ;; This function calls:
  5553 ;;		_setMotorPWM
  5554 ;; This function is called by:
  5555 ;;		_RobotMovement
  5556 ;;		_return_back
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text30
  5561   00116A                     __ptext30:
  5562                           	callstack 0
  5563   00116A                     _turnRight:
  5564                           	callstack 22
  5565   00116A                     
  5566                           ;dc_motor.c: 154: void turnRight(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 1
      +                          55: {;dc_motor.c: 180:     int k;;dc_motor.c: 181:     for (k=0;k<2;k++)
  5567   00116A  0E00               	movlw	0
  5568   00116C  6E2B               	movwf	(turnRight@k+1)^0,c
  5569   00116E  0E00               	movlw	0
  5570   001170  6E2A               	movwf	turnRight@k^0,c
  5571   001172                     l3756:
  5572                           
  5573                           ;dc_motor.c: 182:     {;dc_motor.c: 183:         int i;;dc_motor.c: 184:         for(i=2
      +                          7;i<42;i+=5){
  5574   001172  0E00               	movlw	0
  5575   001174  6E2D               	movwf	(turnRight@i+1)^0,c
  5576   001176  0E1B               	movlw	27
  5577   001178  6E2C               	movwf	turnRight@i^0,c
  5578   00117A                     l3762:
  5579                           
  5580                           ;dc_motor.c: 185:         (*mL).direction=0;
  5581   00117A  EE20 F001          	lfsr	2,1
  5582   00117E  5024               	movf	turnRight@mL^0,w,c
  5583   001180  26D9               	addwf	fsr2l,f,c
  5584   001182  5025               	movf	(turnRight@mL+1)^0,w,c
  5585   001184  22DA               	addwfc	fsr2h,f,c
  5586   001186  0E00               	movlw	0
  5587   001188  6EDF               	movwf	indf2,c
  5588                           
  5589                           ;dc_motor.c: 186:         (*mR).direction=1;
  5590   00118A  EE20 F001          	lfsr	2,1
  5591   00118E  5026               	movf	turnRight@mR^0,w,c
  5592   001190  26D9               	addwf	fsr2l,f,c
  5593   001192  5027               	movf	(turnRight@mR+1)^0,w,c
  5594   001194  22DA               	addwfc	fsr2h,f,c
  5595   001196  0E01               	movlw	1
  5596   001198  6EDF               	movwf	indf2,c
  5597   00119A                     
  5598                           ;dc_motor.c: 187:         (*mL).power=i;
  5599   00119A  C024  FFD9         	movff	turnRight@mL,fsr2l
  5600   00119E  C025  FFDA         	movff	turnRight@mL+1,fsr2h
  5601   0011A2  C02C  FFDF         	movff	turnRight@i,indf2
  5602   0011A6                     
  5603                           ;dc_motor.c: 188:         (*mR).power=i;
  5604   0011A6  C026  FFD9         	movff	turnRight@mR,fsr2l
  5605   0011AA  C027  FFDA         	movff	turnRight@mR+1,fsr2h
  5606   0011AE  C02C  FFDF         	movff	turnRight@i,indf2
  5607   0011B2                     
  5608                           ;dc_motor.c: 189:         setMotorPWM(mL);
  5609   0011B2  C024  F01E         	movff	turnRight@mL,setMotorPWM@m
  5610   0011B6  C025  F01F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5611   0011BA  EC52  F007         	call	_setMotorPWM	;wreg free
  5612   0011BE                     
  5613                           ;dc_motor.c: 190:         setMotorPWM(mR);
  5614   0011BE  C026  F01E         	movff	turnRight@mR,setMotorPWM@m
  5615   0011C2  C027  F01F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5616   0011C6  EC52  F007         	call	_setMotorPWM	;wreg free
  5617   0011CA                     
  5618                           ;dc_motor.c: 191:         _delay((unsigned long)((107)*(64000000/4000.0)));
  5619   0011CA  0E09               	movlw	9
  5620   0011CC  6E29               	movwf	(??_turnRight+1)^0,c
  5621   0011CE  0EB0               	movlw	176
  5622   0011D0  6E28               	movwf	??_turnRight^0,c
  5623   0011D2  0E58               	movlw	88
  5624   0011D4                     u4187:
  5625   0011D4  2EE8               	decfsz	wreg,f,c
  5626   0011D6  D7FE               	bra	u4187
  5627   0011D8  2E28               	decfsz	??_turnRight^0,f,c
  5628   0011DA  D7FC               	bra	u4187
  5629   0011DC  2E29               	decfsz	(??_turnRight+1)^0,f,c
  5630   0011DE  D7FA               	bra	u4187
  5631   0011E0  D000               	nop2	
  5632   0011E2                     
  5633                           ;dc_motor.c: 192:         }
  5634   0011E2  0E05               	movlw	5
  5635   0011E4  262C               	addwf	turnRight@i^0,f,c
  5636   0011E6  0E00               	movlw	0
  5637   0011E8  222D               	addwfc	(turnRight@i+1)^0,f,c
  5638   0011EA  BE2D               	btfsc	(turnRight@i+1)^0,7,c
  5639   0011EC  EF01  F009         	goto	u2951
  5640   0011F0  502D               	movf	(turnRight@i+1)^0,w,c
  5641   0011F2  E109               	bnz	u2950
  5642   0011F4  0E2A               	movlw	42
  5643   0011F6  5C2C               	subwf	turnRight@i^0,w,c
  5644   0011F8  A0D8               	btfss	status,0,c
  5645   0011FA  EF01  F009         	goto	u2951
  5646   0011FE  EF03  F009         	goto	u2950
  5647   001202                     u2951:
  5648   001202  EFBD  F008         	goto	l3762
  5649   001206                     u2950:
  5650   001206                     
  5651                           ;dc_motor.c: 193:         for(i=32;i>17;i-=5){
  5652   001206  0E00               	movlw	0
  5653   001208  6E2D               	movwf	(turnRight@i+1)^0,c
  5654   00120A  0E20               	movlw	32
  5655   00120C  6E2C               	movwf	turnRight@i^0,c
  5656   00120E                     l3784:
  5657                           
  5658                           ;dc_motor.c: 194:         (*mL).direction=0;
  5659   00120E  EE20 F001          	lfsr	2,1
  5660   001212  5024               	movf	turnRight@mL^0,w,c
  5661   001214  26D9               	addwf	fsr2l,f,c
  5662   001216  5025               	movf	(turnRight@mL+1)^0,w,c
  5663   001218  22DA               	addwfc	fsr2h,f,c
  5664   00121A  0E00               	movlw	0
  5665   00121C  6EDF               	movwf	indf2,c
  5666                           
  5667                           ;dc_motor.c: 195:         (*mR).direction=1;
  5668   00121E  EE20 F001          	lfsr	2,1
  5669   001222  5026               	movf	turnRight@mR^0,w,c
  5670   001224  26D9               	addwf	fsr2l,f,c
  5671   001226  5027               	movf	(turnRight@mR+1)^0,w,c
  5672   001228  22DA               	addwfc	fsr2h,f,c
  5673   00122A  0E01               	movlw	1
  5674   00122C  6EDF               	movwf	indf2,c
  5675   00122E                     
  5676                           ;dc_motor.c: 196:         (*mL).power=i;
  5677   00122E  C024  FFD9         	movff	turnRight@mL,fsr2l
  5678   001232  C025  FFDA         	movff	turnRight@mL+1,fsr2h
  5679   001236  C02C  FFDF         	movff	turnRight@i,indf2
  5680   00123A                     
  5681                           ;dc_motor.c: 197:         (*mR).power=i;
  5682   00123A  C026  FFD9         	movff	turnRight@mR,fsr2l
  5683   00123E  C027  FFDA         	movff	turnRight@mR+1,fsr2h
  5684   001242  C02C  FFDF         	movff	turnRight@i,indf2
  5685   001246                     
  5686                           ;dc_motor.c: 198:         setMotorPWM(mL);
  5687   001246  C024  F01E         	movff	turnRight@mL,setMotorPWM@m
  5688   00124A  C025  F01F         	movff	turnRight@mL+1,setMotorPWM@m+1
  5689   00124E  EC52  F007         	call	_setMotorPWM	;wreg free
  5690   001252                     
  5691                           ;dc_motor.c: 199:         setMotorPWM(mR);
  5692   001252  C026  F01E         	movff	turnRight@mR,setMotorPWM@m
  5693   001256  C027  F01F         	movff	turnRight@mR+1,setMotorPWM@m+1
  5694   00125A  EC52  F007         	call	_setMotorPWM	;wreg free
  5695   00125E                     
  5696                           ;dc_motor.c: 200:         _delay((unsigned long)((105)*(64000000/4000.0)));
  5697   00125E  0E09               	movlw	9
  5698   001260  6E29               	movwf	(??_turnRight+1)^0,c
  5699   001262  0E86               	movlw	134
  5700   001264  6E28               	movwf	??_turnRight^0,c
  5701   001266  0ECA               	movlw	202
  5702   001268                     u4197:
  5703   001268  2EE8               	decfsz	wreg,f,c
  5704   00126A  D7FE               	bra	u4197
  5705   00126C  2E28               	decfsz	??_turnRight^0,f,c
  5706   00126E  D7FC               	bra	u4197
  5707   001270  2E29               	decfsz	(??_turnRight+1)^0,f,c
  5708   001272  D7FA               	bra	u4197
  5709   001274                     
  5710                           ;dc_motor.c: 202:         }
  5711   001274  0EFB               	movlw	251
  5712   001276  262C               	addwf	turnRight@i^0,f,c
  5713   001278  0EFF               	movlw	255
  5714   00127A  222D               	addwfc	(turnRight@i+1)^0,f,c
  5715   00127C  BE2D               	btfsc	(turnRight@i+1)^0,7,c
  5716   00127E  EF4C  F009         	goto	u2960
  5717   001282  502D               	movf	(turnRight@i+1)^0,w,c
  5718   001284  E107               	bnz	u2961
  5719   001286  0E12               	movlw	18
  5720   001288  5C2C               	subwf	turnRight@i^0,w,c
  5721   00128A  B0D8               	btfsc	status,0,c
  5722   00128C  EF4A  F009         	goto	u2961
  5723   001290  EF4C  F009         	goto	u2960
  5724   001294                     u2961:
  5725   001294  EF07  F009         	goto	l3784
  5726   001298                     u2960:
  5727   001298                     
  5728                           ;dc_motor.c: 203:     }
  5729   001298  4A2A               	infsnz	turnRight@k^0,f,c
  5730   00129A  2A2B               	incf	(turnRight@k+1)^0,f,c
  5731   00129C  BE2B               	btfsc	(turnRight@k+1)^0,7,c
  5732   00129E  EF5A  F009         	goto	u2971
  5733   0012A2  502B               	movf	(turnRight@k+1)^0,w,c
  5734   0012A4  E109               	bnz	u2970
  5735   0012A6  0E02               	movlw	2
  5736   0012A8  5C2A               	subwf	turnRight@k^0,w,c
  5737   0012AA  A0D8               	btfss	status,0,c
  5738   0012AC  EF5A  F009         	goto	u2971
  5739   0012B0  EF5C  F009         	goto	u2970
  5740   0012B4                     u2971:
  5741   0012B4  EFB9  F008         	goto	l3756
  5742   0012B8                     u2970:
  5743   0012B8  0012               	return		;funcret
  5744   0012BA                     __end_of_turnRight:
  5745                           	callstack 0
  5746                           
  5747 ;; *************** function _turnLeftLong *****************
  5748 ;; Defined at:
  5749 ;;		line 206 in file "dc_motor.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5752 ;;		 -> main@motorL(9), 
  5753 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5754 ;;		 -> main@motorR(9), 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  i               2   41[COMRAM] int 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  1    wreg      void 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5766 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5769 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5770 ;;Total ram usage:        8 bytes
  5771 ;; Hardware stack levels used: 1
  5772 ;; Hardware stack levels required when called: 7
  5773 ;; This function calls:
  5774 ;;		_setMotorPWM
  5775 ;; This function is called by:
  5776 ;;		_RobotMovement
  5777 ;;		_return_back
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text31
  5782   001658                     __ptext31:
  5783                           	callstack 0
  5784   001658                     _turnLeftLong:
  5785                           	callstack 22
  5786   001658                     
  5787                           ;dc_motor.c: 206: void turnLeftLong(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c
      +                          : 207: {;dc_motor.c: 209:     int i;;dc_motor.c: 210:     for(i=23;i<38;i+=5){
  5788   001658  0E00               	movlw	0
  5789   00165A  6E2B               	movwf	(turnLeftLong@i+1)^0,c
  5790   00165C  0E17               	movlw	23
  5791   00165E  6E2A               	movwf	turnLeftLong@i^0,c
  5792   001660                     l3810:
  5793                           
  5794                           ;dc_motor.c: 211:     (*mL).direction=1;
  5795   001660  EE20 F001          	lfsr	2,1
  5796   001664  5024               	movf	turnLeftLong@mL^0,w,c
  5797   001666  26D9               	addwf	fsr2l,f,c
  5798   001668  5025               	movf	(turnLeftLong@mL+1)^0,w,c
  5799   00166A  22DA               	addwfc	fsr2h,f,c
  5800   00166C  0E01               	movlw	1
  5801   00166E  6EDF               	movwf	indf2,c
  5802                           
  5803                           ;dc_motor.c: 212:     (*mR).direction=0;
  5804   001670  EE20 F001          	lfsr	2,1
  5805   001674  5026               	movf	turnLeftLong@mR^0,w,c
  5806   001676  26D9               	addwf	fsr2l,f,c
  5807   001678  5027               	movf	(turnLeftLong@mR+1)^0,w,c
  5808   00167A  22DA               	addwfc	fsr2h,f,c
  5809   00167C  0E00               	movlw	0
  5810   00167E  6EDF               	movwf	indf2,c
  5811   001680                     
  5812                           ;dc_motor.c: 213:     (*mL).power=i;
  5813   001680  C024  FFD9         	movff	turnLeftLong@mL,fsr2l
  5814   001684  C025  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5815   001688  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5816   00168C                     
  5817                           ;dc_motor.c: 214:     (*mR).power=i;
  5818   00168C  C026  FFD9         	movff	turnLeftLong@mR,fsr2l
  5819   001690  C027  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5820   001694  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5821   001698                     
  5822                           ;dc_motor.c: 215:     setMotorPWM(mL);
  5823   001698  C024  F01E         	movff	turnLeftLong@mL,setMotorPWM@m
  5824   00169C  C025  F01F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5825   0016A0  EC52  F007         	call	_setMotorPWM	;wreg free
  5826   0016A4                     
  5827                           ;dc_motor.c: 216:     setMotorPWM(mR);
  5828   0016A4  C026  F01E         	movff	turnLeftLong@mR,setMotorPWM@m
  5829   0016A8  C027  F01F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5830   0016AC  EC52  F007         	call	_setMotorPWM	;wreg free
  5831   0016B0                     
  5832                           ;dc_motor.c: 217:     _delay((unsigned long)((156)*(64000000/4000.0)));
  5833   0016B0  0E0D               	movlw	13
  5834   0016B2  6E29               	movwf	(??_turnLeftLong+1)^0,c
  5835   0016B4  0EAA               	movlw	170
  5836   0016B6  6E28               	movwf	??_turnLeftLong^0,c
  5837   0016B8  0E84               	movlw	132
  5838   0016BA                     u4207:
  5839   0016BA  2EE8               	decfsz	wreg,f,c
  5840   0016BC  D7FE               	bra	u4207
  5841   0016BE  2E28               	decfsz	??_turnLeftLong^0,f,c
  5842   0016C0  D7FC               	bra	u4207
  5843   0016C2  2E29               	decfsz	(??_turnLeftLong+1)^0,f,c
  5844   0016C4  D7FA               	bra	u4207
  5845   0016C6  D000               	nop2	
  5846   0016C8                     
  5847                           ;dc_motor.c: 218:     }
  5848   0016C8  0E05               	movlw	5
  5849   0016CA  262A               	addwf	turnLeftLong@i^0,f,c
  5850   0016CC  0E00               	movlw	0
  5851   0016CE  222B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5852   0016D0  BE2B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5853   0016D2  EF74  F00B         	goto	u2981
  5854   0016D6  502B               	movf	(turnLeftLong@i+1)^0,w,c
  5855   0016D8  E109               	bnz	u2980
  5856   0016DA  0E26               	movlw	38
  5857   0016DC  5C2A               	subwf	turnLeftLong@i^0,w,c
  5858   0016DE  A0D8               	btfss	status,0,c
  5859   0016E0  EF74  F00B         	goto	u2981
  5860   0016E4  EF76  F00B         	goto	u2980
  5861   0016E8                     u2981:
  5862   0016E8  EF30  F00B         	goto	l3810
  5863   0016EC                     u2980:
  5864   0016EC                     
  5865                           ;dc_motor.c: 219:     for(i=28;i>13;i-=5){
  5866   0016EC  0E00               	movlw	0
  5867   0016EE  6E2B               	movwf	(turnLeftLong@i+1)^0,c
  5868   0016F0  0E1C               	movlw	28
  5869   0016F2  6E2A               	movwf	turnLeftLong@i^0,c
  5870   0016F4                     l3832:
  5871                           
  5872                           ;dc_motor.c: 220:     (*mL).direction=1;
  5873   0016F4  EE20 F001          	lfsr	2,1
  5874   0016F8  5024               	movf	turnLeftLong@mL^0,w,c
  5875   0016FA  26D9               	addwf	fsr2l,f,c
  5876   0016FC  5025               	movf	(turnLeftLong@mL+1)^0,w,c
  5877   0016FE  22DA               	addwfc	fsr2h,f,c
  5878   001700  0E01               	movlw	1
  5879   001702  6EDF               	movwf	indf2,c
  5880                           
  5881                           ;dc_motor.c: 221:     (*mR).direction=0;
  5882   001704  EE20 F001          	lfsr	2,1
  5883   001708  5026               	movf	turnLeftLong@mR^0,w,c
  5884   00170A  26D9               	addwf	fsr2l,f,c
  5885   00170C  5027               	movf	(turnLeftLong@mR+1)^0,w,c
  5886   00170E  22DA               	addwfc	fsr2h,f,c
  5887   001710  0E00               	movlw	0
  5888   001712  6EDF               	movwf	indf2,c
  5889   001714                     
  5890                           ;dc_motor.c: 222:     (*mL).power=i;
  5891   001714  C024  FFD9         	movff	turnLeftLong@mL,fsr2l
  5892   001718  C025  FFDA         	movff	turnLeftLong@mL+1,fsr2h
  5893   00171C  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5894   001720                     
  5895                           ;dc_motor.c: 223:     (*mR).power=i;
  5896   001720  C026  FFD9         	movff	turnLeftLong@mR,fsr2l
  5897   001724  C027  FFDA         	movff	turnLeftLong@mR+1,fsr2h
  5898   001728  C02A  FFDF         	movff	turnLeftLong@i,indf2
  5899   00172C                     
  5900                           ;dc_motor.c: 224:     setMotorPWM(mL);
  5901   00172C  C024  F01E         	movff	turnLeftLong@mL,setMotorPWM@m
  5902   001730  C025  F01F         	movff	turnLeftLong@mL+1,setMotorPWM@m+1
  5903   001734  EC52  F007         	call	_setMotorPWM	;wreg free
  5904   001738                     
  5905                           ;dc_motor.c: 225:     setMotorPWM(mR);
  5906   001738  C026  F01E         	movff	turnLeftLong@mR,setMotorPWM@m
  5907   00173C  C027  F01F         	movff	turnLeftLong@mR+1,setMotorPWM@m+1
  5908   001740  EC52  F007         	call	_setMotorPWM	;wreg free
  5909   001744                     
  5910                           ;dc_motor.c: 226:     _delay((unsigned long)((150)*(64000000/4000.0)));
  5911   001744  0E0D               	movlw	13
  5912   001746  6E29               	movwf	(??_turnLeftLong+1)^0,c
  5913   001748  0E2D               	movlw	45
  5914   00174A  6E28               	movwf	??_turnLeftLong^0,c
  5915   00174C  0ED8               	movlw	216
  5916   00174E                     u4217:
  5917   00174E  2EE8               	decfsz	wreg,f,c
  5918   001750  D7FE               	bra	u4217
  5919   001752  2E28               	decfsz	??_turnLeftLong^0,f,c
  5920   001754  D7FC               	bra	u4217
  5921   001756  2E29               	decfsz	(??_turnLeftLong+1)^0,f,c
  5922   001758  D7FA               	bra	u4217
  5923   00175A                     
  5924                           ;dc_motor.c: 228:     }
  5925   00175A  0EFB               	movlw	251
  5926   00175C  262A               	addwf	turnLeftLong@i^0,f,c
  5927   00175E  0EFF               	movlw	255
  5928   001760  222B               	addwfc	(turnLeftLong@i+1)^0,f,c
  5929   001762  BE2B               	btfsc	(turnLeftLong@i+1)^0,7,c
  5930   001764  EFBF  F00B         	goto	u2990
  5931   001768  502B               	movf	(turnLeftLong@i+1)^0,w,c
  5932   00176A  E107               	bnz	u2991
  5933   00176C  0E0E               	movlw	14
  5934   00176E  5C2A               	subwf	turnLeftLong@i^0,w,c
  5935   001770  B0D8               	btfsc	status,0,c
  5936   001772  EFBD  F00B         	goto	u2991
  5937   001776  EFBF  F00B         	goto	u2990
  5938   00177A                     u2991:
  5939   00177A  EF7A  F00B         	goto	l3832
  5940   00177E                     u2990:
  5941   00177E  0012               	return		;funcret
  5942   001780                     __end_of_turnLeftLong:
  5943                           	callstack 0
  5944                           
  5945 ;; *************** function _turnLeft *****************
  5946 ;; Defined at:
  5947 ;;		line 102 in file "dc_motor.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  5950 ;;		 -> main@motorL(9), 
  5951 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  5952 ;;		 -> main@motorR(9), 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;  i               2   43[COMRAM] int 
  5955 ;;  k               2   41[COMRAM] int 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      void 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  5965 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5966 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5968 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5969 ;;Total ram usage:       10 bytes
  5970 ;; Hardware stack levels used: 1
  5971 ;; Hardware stack levels required when called: 7
  5972 ;; This function calls:
  5973 ;;		_setMotorPWM
  5974 ;; This function is called by:
  5975 ;;		_RobotMovement
  5976 ;;		_return_back
  5977 ;; This function uses a non-reentrant model
  5978 ;;
  5979                           
  5980                           	psect	text32
  5981   001010                     __ptext32:
  5982                           	callstack 0
  5983   001010                     _turnLeft:
  5984                           	callstack 22
  5985   001010                     
  5986                           ;dc_motor.c: 102: void turnLeft(DC_motor *mL, DC_motor *mR);dc_motor.c: 103: {;dc_motor.
      +                          c: 128:     int k = 0;
  5987   001010  0E00               	movlw	0
  5988   001012  6E2B               	movwf	(turnLeft@k+1)^0,c
  5989   001014  0E00               	movlw	0
  5990   001016  6E2A               	movwf	turnLeft@k^0,c
  5991                           
  5992                           ;dc_motor.c: 129:     for (k=0;k<2;k++)
  5993   001018  0E00               	movlw	0
  5994   00101A  6E2B               	movwf	(turnLeft@k+1)^0,c
  5995   00101C  0E00               	movlw	0
  5996   00101E  6E2A               	movwf	turnLeft@k^0,c
  5997   001020                     l3702:
  5998                           
  5999                           ;dc_motor.c: 130:     {;dc_motor.c: 131:         int i;;dc_motor.c: 132:         for(i=4
      +                          7;i<62;i+=5){
  6000   001020  0E00               	movlw	0
  6001   001022  6E2D               	movwf	(turnLeft@i+1)^0,c
  6002   001024  0E2F               	movlw	47
  6003   001026  6E2C               	movwf	turnLeft@i^0,c
  6004   001028                     l3708:
  6005                           
  6006                           ;dc_motor.c: 133:         (*mL).direction=1;
  6007   001028  EE20 F001          	lfsr	2,1
  6008   00102C  5024               	movf	turnLeft@mL^0,w,c
  6009   00102E  26D9               	addwf	fsr2l,f,c
  6010   001030  5025               	movf	(turnLeft@mL+1)^0,w,c
  6011   001032  22DA               	addwfc	fsr2h,f,c
  6012   001034  0E01               	movlw	1
  6013   001036  6EDF               	movwf	indf2,c
  6014                           
  6015                           ;dc_motor.c: 134:         (*mR).direction=0;
  6016   001038  EE20 F001          	lfsr	2,1
  6017   00103C  5026               	movf	turnLeft@mR^0,w,c
  6018   00103E  26D9               	addwf	fsr2l,f,c
  6019   001040  5027               	movf	(turnLeft@mR+1)^0,w,c
  6020   001042  22DA               	addwfc	fsr2h,f,c
  6021   001044  0E00               	movlw	0
  6022   001046  6EDF               	movwf	indf2,c
  6023   001048                     
  6024                           ;dc_motor.c: 135:         (*mL).power=i;
  6025   001048  C024  FFD9         	movff	turnLeft@mL,fsr2l
  6026   00104C  C025  FFDA         	movff	turnLeft@mL+1,fsr2h
  6027   001050  C02C  FFDF         	movff	turnLeft@i,indf2
  6028   001054                     
  6029                           ;dc_motor.c: 136:         (*mR).power=i;
  6030   001054  C026  FFD9         	movff	turnLeft@mR,fsr2l
  6031   001058  C027  FFDA         	movff	turnLeft@mR+1,fsr2h
  6032   00105C  C02C  FFDF         	movff	turnLeft@i,indf2
  6033   001060                     
  6034                           ;dc_motor.c: 137:         setMotorPWM(mL);
  6035   001060  C024  F01E         	movff	turnLeft@mL,setMotorPWM@m
  6036   001064  C025  F01F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6037   001068  EC52  F007         	call	_setMotorPWM	;wreg free
  6038   00106C                     
  6039                           ;dc_motor.c: 138:         setMotorPWM(mR);
  6040   00106C  C026  F01E         	movff	turnLeft@mR,setMotorPWM@m
  6041   001070  C027  F01F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6042   001074  EC52  F007         	call	_setMotorPWM	;wreg free
  6043   001078                     
  6044                           ;dc_motor.c: 139:         _delay((unsigned long)((58)*(64000000/4000.0)));
  6045   001078  0E05               	movlw	5
  6046   00107A  6E29               	movwf	(??_turnLeft+1)^0,c
  6047   00107C  0EB6               	movlw	182
  6048   00107E  6E28               	movwf	??_turnLeft^0,c
  6049   001080  0E2C               	movlw	44
  6050   001082                     u4227:
  6051   001082  2EE8               	decfsz	wreg,f,c
  6052   001084  D7FE               	bra	u4227
  6053   001086  2E28               	decfsz	??_turnLeft^0,f,c
  6054   001088  D7FC               	bra	u4227
  6055   00108A  2E29               	decfsz	(??_turnLeft+1)^0,f,c
  6056   00108C  D7FA               	bra	u4227
  6057   00108E  D000               	nop2	
  6058   001090                     
  6059                           ;dc_motor.c: 140:         }
  6060   001090  0E05               	movlw	5
  6061   001092  262C               	addwf	turnLeft@i^0,f,c
  6062   001094  0E00               	movlw	0
  6063   001096  222D               	addwfc	(turnLeft@i+1)^0,f,c
  6064   001098  BE2D               	btfsc	(turnLeft@i+1)^0,7,c
  6065   00109A  EF58  F008         	goto	u2921
  6066   00109E  502D               	movf	(turnLeft@i+1)^0,w,c
  6067   0010A0  E109               	bnz	u2920
  6068   0010A2  0E3E               	movlw	62
  6069   0010A4  5C2C               	subwf	turnLeft@i^0,w,c
  6070   0010A6  A0D8               	btfss	status,0,c
  6071   0010A8  EF58  F008         	goto	u2921
  6072   0010AC  EF5A  F008         	goto	u2920
  6073   0010B0                     u2921:
  6074   0010B0  EF14  F008         	goto	l3708
  6075   0010B4                     u2920:
  6076   0010B4                     
  6077                           ;dc_motor.c: 141:         for(i=52;i>37;i-=5){
  6078   0010B4  0E00               	movlw	0
  6079   0010B6  6E2D               	movwf	(turnLeft@i+1)^0,c
  6080   0010B8  0E34               	movlw	52
  6081   0010BA  6E2C               	movwf	turnLeft@i^0,c
  6082   0010BC                     l3730:
  6083                           
  6084                           ;dc_motor.c: 142:         (*mL).direction=1;
  6085   0010BC  EE20 F001          	lfsr	2,1
  6086   0010C0  5024               	movf	turnLeft@mL^0,w,c
  6087   0010C2  26D9               	addwf	fsr2l,f,c
  6088   0010C4  5025               	movf	(turnLeft@mL+1)^0,w,c
  6089   0010C6  22DA               	addwfc	fsr2h,f,c
  6090   0010C8  0E01               	movlw	1
  6091   0010CA  6EDF               	movwf	indf2,c
  6092                           
  6093                           ;dc_motor.c: 143:         (*mR).direction=0;
  6094   0010CC  EE20 F001          	lfsr	2,1
  6095   0010D0  5026               	movf	turnLeft@mR^0,w,c
  6096   0010D2  26D9               	addwf	fsr2l,f,c
  6097   0010D4  5027               	movf	(turnLeft@mR+1)^0,w,c
  6098   0010D6  22DA               	addwfc	fsr2h,f,c
  6099   0010D8  0E00               	movlw	0
  6100   0010DA  6EDF               	movwf	indf2,c
  6101   0010DC                     
  6102                           ;dc_motor.c: 144:         (*mL).power=i;
  6103   0010DC  C024  FFD9         	movff	turnLeft@mL,fsr2l
  6104   0010E0  C025  FFDA         	movff	turnLeft@mL+1,fsr2h
  6105   0010E4  C02C  FFDF         	movff	turnLeft@i,indf2
  6106   0010E8                     
  6107                           ;dc_motor.c: 145:         (*mR).power=i;
  6108   0010E8  C026  FFD9         	movff	turnLeft@mR,fsr2l
  6109   0010EC  C027  FFDA         	movff	turnLeft@mR+1,fsr2h
  6110   0010F0  C02C  FFDF         	movff	turnLeft@i,indf2
  6111   0010F4                     
  6112                           ;dc_motor.c: 146:         setMotorPWM(mL);
  6113   0010F4  C024  F01E         	movff	turnLeft@mL,setMotorPWM@m
  6114   0010F8  C025  F01F         	movff	turnLeft@mL+1,setMotorPWM@m+1
  6115   0010FC  EC52  F007         	call	_setMotorPWM	;wreg free
  6116   001100                     
  6117                           ;dc_motor.c: 147:         setMotorPWM(mR);
  6118   001100  C026  F01E         	movff	turnLeft@mR,setMotorPWM@m
  6119   001104  C027  F01F         	movff	turnLeft@mR+1,setMotorPWM@m+1
  6120   001108  EC52  F007         	call	_setMotorPWM	;wreg free
  6121   00110C                     
  6122                           ;dc_motor.c: 148:         _delay((unsigned long)((57)*(64000000/4000.0)));
  6123   00110C  0E05               	movlw	5
  6124   00110E  6E29               	movwf	(??_turnLeft+1)^0,c
  6125   001110  0EA1               	movlw	161
  6126   001112  6E28               	movwf	??_turnLeft^0,c
  6127   001114  0E65               	movlw	101
  6128   001116                     u4237:
  6129   001116  2EE8               	decfsz	wreg,f,c
  6130   001118  D7FE               	bra	u4237
  6131   00111A  2E28               	decfsz	??_turnLeft^0,f,c
  6132   00111C  D7FC               	bra	u4237
  6133   00111E  2E29               	decfsz	(??_turnLeft+1)^0,f,c
  6134   001120  D7FA               	bra	u4237
  6135   001122  F000               	nop	
  6136   001124                     
  6137                           ;dc_motor.c: 150:         }
  6138   001124  0EFB               	movlw	251
  6139   001126  262C               	addwf	turnLeft@i^0,f,c
  6140   001128  0EFF               	movlw	255
  6141   00112A  222D               	addwfc	(turnLeft@i+1)^0,f,c
  6142   00112C  BE2D               	btfsc	(turnLeft@i+1)^0,7,c
  6143   00112E  EFA4  F008         	goto	u2930
  6144   001132  502D               	movf	(turnLeft@i+1)^0,w,c
  6145   001134  E107               	bnz	u2931
  6146   001136  0E26               	movlw	38
  6147   001138  5C2C               	subwf	turnLeft@i^0,w,c
  6148   00113A  B0D8               	btfsc	status,0,c
  6149   00113C  EFA2  F008         	goto	u2931
  6150   001140  EFA4  F008         	goto	u2930
  6151   001144                     u2931:
  6152   001144  EF5E  F008         	goto	l3730
  6153   001148                     u2930:
  6154   001148                     
  6155                           ;dc_motor.c: 151:     }
  6156   001148  4A2A               	infsnz	turnLeft@k^0,f,c
  6157   00114A  2A2B               	incf	(turnLeft@k+1)^0,f,c
  6158   00114C  BE2B               	btfsc	(turnLeft@k+1)^0,7,c
  6159   00114E  EFB2  F008         	goto	u2941
  6160   001152  502B               	movf	(turnLeft@k+1)^0,w,c
  6161   001154  E109               	bnz	u2940
  6162   001156  0E02               	movlw	2
  6163   001158  5C2A               	subwf	turnLeft@k^0,w,c
  6164   00115A  A0D8               	btfss	status,0,c
  6165   00115C  EFB2  F008         	goto	u2941
  6166   001160  EFB4  F008         	goto	u2940
  6167   001164                     u2941:
  6168   001164  EF10  F008         	goto	l3702
  6169   001168                     u2940:
  6170   001168  0012               	return		;funcret
  6171   00116A                     __end_of_turnLeft:
  6172                           	callstack 0
  6173                           
  6174 ;; *************** function _stop *****************
  6175 ;; Defined at:
  6176 ;;		line 92 in file "dc_motor.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6179 ;;		 -> main@motorL(9), 
  6180 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6181 ;;		 -> main@motorR(9), 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;		None
  6184 ;; Return value:  Size  Location     Type
  6185 ;;                  1    wreg      void 
  6186 ;; Registers used:
  6187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6193 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6195 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6196 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6197 ;;Total ram usage:        6 bytes
  6198 ;; Hardware stack levels used: 1
  6199 ;; Hardware stack levels required when called: 7
  6200 ;; This function calls:
  6201 ;;		_setMotorPWM
  6202 ;; This function is called by:
  6203 ;;		_RobotMovement
  6204 ;;		_return_back
  6205 ;;		_main
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text33
  6210   001E6A                     __ptext33:
  6211                           	callstack 0
  6212   001E6A                     _stop:
  6213                           	callstack 23
  6214   001E6A                     
  6215                           ;dc_motor.c: 92: void stop(struct DC_motor *mL, struct DC_motor *mR);dc_motor.c: 93: {;d
      +                          c_motor.c: 94:     (*mL).power=0;
  6216   001E6A  C024  FFD9         	movff	stop@mL,fsr2l
  6217   001E6E  C025  FFDA         	movff	stop@mL+1,fsr2h
  6218   001E72  0E00               	movlw	0
  6219   001E74  6EDF               	movwf	indf2,c
  6220                           
  6221                           ;dc_motor.c: 95:     (*mR).power=0;
  6222   001E76  C026  FFD9         	movff	stop@mR,fsr2l
  6223   001E7A  C027  FFDA         	movff	stop@mR+1,fsr2h
  6224   001E7E  0E00               	movlw	0
  6225   001E80  6EDF               	movwf	indf2,c
  6226   001E82                     
  6227                           ;dc_motor.c: 96:     setMotorPWM(mL);
  6228   001E82  C024  F01E         	movff	stop@mL,setMotorPWM@m
  6229   001E86  C025  F01F         	movff	stop@mL+1,setMotorPWM@m+1
  6230   001E8A  EC52  F007         	call	_setMotorPWM	;wreg free
  6231   001E8E                     
  6232                           ;dc_motor.c: 97:     setMotorPWM(mR);
  6233   001E8E  C026  F01E         	movff	stop@mR,setMotorPWM@m
  6234   001E92  C027  F01F         	movff	stop@mR+1,setMotorPWM@m+1
  6235   001E96  EC52  F007         	call	_setMotorPWM	;wreg free
  6236   001E9A                     
  6237                           ;dc_motor.c: 98:     _delay((unsigned long)((1000)*(64000000/4000.0)));
  6238   001E9A  0E52               	movlw	82
  6239   001E9C  6E29               	movwf	(??_stop+1)^0,c
  6240   001E9E  0E2B               	movlw	43
  6241   001EA0  6E28               	movwf	??_stop^0,c
  6242   001EA2  0E00               	movlw	0
  6243   001EA4                     u4247:
  6244   001EA4  2EE8               	decfsz	wreg,f,c
  6245   001EA6  D7FE               	bra	u4247
  6246   001EA8  2E28               	decfsz	??_stop^0,f,c
  6247   001EAA  D7FC               	bra	u4247
  6248   001EAC  2E29               	decfsz	(??_stop+1)^0,f,c
  6249   001EAE  D7FA               	bra	u4247
  6250   001EB0  D000               	nop2	
  6251   001EB2  0012               	return		;funcret
  6252   001EB4                     __end_of_stop:
  6253                           	callstack 0
  6254                           
  6255 ;; *************** function _moveBack *****************
  6256 ;; Defined at:
  6257 ;;		line 282 in file "dc_motor.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6260 ;;		 -> main@motorL(9), 
  6261 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6262 ;;		 -> main@motorR(9), 
  6263 ;;  time            2   39[COMRAM] unsigned int 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;		None
  6266 ;; Return value:  Size  Location     Type
  6267 ;;                  1    wreg      void 
  6268 ;; Registers used:
  6269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6270 ;; Tracked objects:
  6271 ;;		On entry : 0/0
  6272 ;;		On exit  : 0/0
  6273 ;;		Unchanged: 0/0
  6274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6275 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6278 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6279 ;;Total ram usage:        6 bytes
  6280 ;; Hardware stack levels used: 1
  6281 ;; Hardware stack levels required when called: 7
  6282 ;; This function calls:
  6283 ;;		_setMotorPWM
  6284 ;; This function is called by:
  6285 ;;		_RobotMovement
  6286 ;;		_return_back
  6287 ;; This function uses a non-reentrant model
  6288 ;;
  6289                           
  6290                           	psect	text34
  6291   0019FC                     __ptext34:
  6292                           	callstack 0
  6293   0019FC                     _moveBack:
  6294                           	callstack 22
  6295   0019FC                     
  6296                           ;dc_motor.c: 282: void moveBack(struct DC_motor *mL, struct DC_motor *mR, unsigned int t
      +                          ime);dc_motor.c: 283: {;dc_motor.c: 284:     seconds = 0;
  6297   0019FC  0E00               	movlw	0
  6298   0019FE  6E43               	movwf	(_seconds+1)^0,c
  6299   001A00  0E00               	movlw	0
  6300   001A02  6E42               	movwf	_seconds^0,c
  6301                           
  6302                           ;dc_motor.c: 285:     while (seconds<time)
  6303   001A04  EF2C  F00D         	goto	l3918
  6304   001A08                     l3908:
  6305                           
  6306                           ;dc_motor.c: 286:     {;dc_motor.c: 287:         (*mL).direction=1;
  6307   001A08  EE20 F001          	lfsr	2,1
  6308   001A0C  5024               	movf	moveBack@mL^0,w,c
  6309   001A0E  26D9               	addwf	fsr2l,f,c
  6310   001A10  5025               	movf	(moveBack@mL+1)^0,w,c
  6311   001A12  22DA               	addwfc	fsr2h,f,c
  6312   001A14  0E01               	movlw	1
  6313   001A16  6EDF               	movwf	indf2,c
  6314                           
  6315                           ;dc_motor.c: 288:         (*mR).direction=1;
  6316   001A18  EE20 F001          	lfsr	2,1
  6317   001A1C  5026               	movf	moveBack@mR^0,w,c
  6318   001A1E  26D9               	addwf	fsr2l,f,c
  6319   001A20  5027               	movf	(moveBack@mR+1)^0,w,c
  6320   001A22  22DA               	addwfc	fsr2h,f,c
  6321   001A24  0E01               	movlw	1
  6322   001A26  6EDF               	movwf	indf2,c
  6323   001A28                     
  6324                           ;dc_motor.c: 289:         (*mL).power=40;
  6325   001A28  C024  FFD9         	movff	moveBack@mL,fsr2l
  6326   001A2C  C025  FFDA         	movff	moveBack@mL+1,fsr2h
  6327   001A30  0E28               	movlw	40
  6328   001A32  6EDF               	movwf	indf2,c
  6329   001A34                     
  6330                           ;dc_motor.c: 290:         (*mR).power=39;
  6331   001A34  C026  FFD9         	movff	moveBack@mR,fsr2l
  6332   001A38  C027  FFDA         	movff	moveBack@mR+1,fsr2h
  6333   001A3C  0E27               	movlw	39
  6334   001A3E  6EDF               	movwf	indf2,c
  6335   001A40                     
  6336                           ;dc_motor.c: 291:         setMotorPWM(mL);
  6337   001A40  C024  F01E         	movff	moveBack@mL,setMotorPWM@m
  6338   001A44  C025  F01F         	movff	moveBack@mL+1,setMotorPWM@m+1
  6339   001A48  EC52  F007         	call	_setMotorPWM	;wreg free
  6340   001A4C                     
  6341                           ;dc_motor.c: 292:         setMotorPWM(mR);
  6342   001A4C  C026  F01E         	movff	moveBack@mR,setMotorPWM@m
  6343   001A50  C027  F01F         	movff	moveBack@mR+1,setMotorPWM@m+1
  6344   001A54  EC52  F007         	call	_setMotorPWM	;wreg free
  6345   001A58                     l3918:
  6346                           
  6347                           ;dc_motor.c: 285:     while (seconds<time)
  6348   001A58  5028               	movf	moveBack@time^0,w,c
  6349   001A5A  5C42               	subwf	_seconds^0,w,c
  6350   001A5C  5029               	movf	(moveBack@time+1)^0,w,c
  6351   001A5E  5843               	subwfb	(_seconds+1)^0,w,c
  6352   001A60  A0D8               	btfss	status,0,c
  6353   001A62  EF35  F00D         	goto	u3031
  6354   001A66  EF37  F00D         	goto	u3030
  6355   001A6A                     u3031:
  6356   001A6A  EF04  F00D         	goto	l3908
  6357   001A6E                     u3030:
  6358   001A6E  0012               	return		;funcret
  6359   001A70                     __end_of_moveBack:
  6360                           	callstack 0
  6361                           
  6362 ;; *************** function _TimedfullSpeedAhead *****************
  6363 ;; Defined at:
  6364 ;;		line 267 in file "dc_motor.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;  mL              2   35[COMRAM] PTR struct DC_motor
  6367 ;;		 -> main@motorL(9), 
  6368 ;;  mR              2   37[COMRAM] PTR struct DC_motor
  6369 ;;		 -> main@motorR(9), 
  6370 ;;  time            2   39[COMRAM] unsigned int 
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;                  1    wreg      void 
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6382 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6385 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6386 ;;Total ram usage:        6 bytes
  6387 ;; Hardware stack levels used: 1
  6388 ;; Hardware stack levels required when called: 7
  6389 ;; This function calls:
  6390 ;;		_setMotorPWM
  6391 ;; This function is called by:
  6392 ;;		_RobotMovement
  6393 ;;		_return_back
  6394 ;;		_main
  6395 ;; This function uses a non-reentrant model
  6396 ;;
  6397                           
  6398                           	psect	text35
  6399   001A70                     __ptext35:
  6400                           	callstack 0
  6401   001A70                     _TimedfullSpeedAhead:
  6402                           	callstack 22
  6403   001A70                     
  6404                           ;dc_motor.c: 267: void TimedfullSpeedAhead(struct DC_motor *mL, struct DC_motor *mR, uns
      +                          igned int time);dc_motor.c: 268: {;dc_motor.c: 269:     seconds = 0;
  6405   001A70  0E00               	movlw	0
  6406   001A72  6E43               	movwf	(_seconds+1)^0,c
  6407   001A74  0E00               	movlw	0
  6408   001A76  6E42               	movwf	_seconds^0,c
  6409                           
  6410                           ;dc_motor.c: 270:     while (seconds<time)
  6411   001A78  EF66  F00D         	goto	l3904
  6412   001A7C                     l3894:
  6413                           
  6414                           ;dc_motor.c: 271:     {;dc_motor.c: 273:         (*mL).direction=0;
  6415   001A7C  EE20 F001          	lfsr	2,1
  6416   001A80  5024               	movf	TimedfullSpeedAhead@mL^0,w,c
  6417   001A82  26D9               	addwf	fsr2l,f,c
  6418   001A84  5025               	movf	(TimedfullSpeedAhead@mL+1)^0,w,c
  6419   001A86  22DA               	addwfc	fsr2h,f,c
  6420   001A88  0E00               	movlw	0
  6421   001A8A  6EDF               	movwf	indf2,c
  6422                           
  6423                           ;dc_motor.c: 274:         (*mR).direction=0;
  6424   001A8C  EE20 F001          	lfsr	2,1
  6425   001A90  5026               	movf	TimedfullSpeedAhead@mR^0,w,c
  6426   001A92  26D9               	addwf	fsr2l,f,c
  6427   001A94  5027               	movf	(TimedfullSpeedAhead@mR+1)^0,w,c
  6428   001A96  22DA               	addwfc	fsr2h,f,c
  6429   001A98  0E00               	movlw	0
  6430   001A9A  6EDF               	movwf	indf2,c
  6431   001A9C                     
  6432                           ;dc_motor.c: 275:         (*mL).power=50;
  6433   001A9C  C024  FFD9         	movff	TimedfullSpeedAhead@mL,fsr2l
  6434   001AA0  C025  FFDA         	movff	TimedfullSpeedAhead@mL+1,fsr2h
  6435   001AA4  0E32               	movlw	50
  6436   001AA6  6EDF               	movwf	indf2,c
  6437   001AA8                     
  6438                           ;dc_motor.c: 276:         (*mR).power=50;
  6439   001AA8  C026  FFD9         	movff	TimedfullSpeedAhead@mR,fsr2l
  6440   001AAC  C027  FFDA         	movff	TimedfullSpeedAhead@mR+1,fsr2h
  6441   001AB0  0E32               	movlw	50
  6442   001AB2  6EDF               	movwf	indf2,c
  6443   001AB4                     
  6444                           ;dc_motor.c: 277:         setMotorPWM(mL);
  6445   001AB4  C024  F01E         	movff	TimedfullSpeedAhead@mL,setMotorPWM@m
  6446   001AB8  C025  F01F         	movff	TimedfullSpeedAhead@mL+1,setMotorPWM@m+1
  6447   001ABC  EC52  F007         	call	_setMotorPWM	;wreg free
  6448   001AC0                     
  6449                           ;dc_motor.c: 278:         setMotorPWM(mR);
  6450   001AC0  C026  F01E         	movff	TimedfullSpeedAhead@mR,setMotorPWM@m
  6451   001AC4  C027  F01F         	movff	TimedfullSpeedAhead@mR+1,setMotorPWM@m+1
  6452   001AC8  EC52  F007         	call	_setMotorPWM	;wreg free
  6453   001ACC                     l3904:
  6454                           
  6455                           ;dc_motor.c: 270:     while (seconds<time)
  6456   001ACC  5028               	movf	TimedfullSpeedAhead@time^0,w,c
  6457   001ACE  5C42               	subwf	_seconds^0,w,c
  6458   001AD0  5029               	movf	(TimedfullSpeedAhead@time+1)^0,w,c
  6459   001AD2  5843               	subwfb	(_seconds+1)^0,w,c
  6460   001AD4  A0D8               	btfss	status,0,c
  6461   001AD6  EF6F  F00D         	goto	u3021
  6462   001ADA  EF71  F00D         	goto	u3020
  6463   001ADE                     u3021:
  6464   001ADE  EF3E  F00D         	goto	l3894
  6465   001AE2                     u3020:
  6466   001AE2  0012               	return		;funcret
  6467   001AE4                     __end_of_TimedfullSpeedAhead:
  6468                           	callstack 0
  6469                           
  6470 ;; *************** function _setMotorPWM *****************
  6471 ;; Defined at:
  6472 ;;		line 69 in file "dc_motor.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  m               2   29[COMRAM] PTR struct DC_motor
  6475 ;;		 -> main@motorR(9), main@motorL(9), 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  negDuty         1   34[COMRAM] unsigned char 
  6478 ;;  posDuty         1   33[COMRAM] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  1    wreg      void 
  6481 ;; Registers used:
  6482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6488 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6489 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6490 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6491 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6492 ;;Total ram usage:        6 bytes
  6493 ;; Hardware stack levels used: 1
  6494 ;; Hardware stack levels required when called: 6
  6495 ;; This function calls:
  6496 ;;		___lwdiv
  6497 ;;		___wmul
  6498 ;; This function is called by:
  6499 ;;		_stop
  6500 ;;		_turnLeft
  6501 ;;		_turnRight
  6502 ;;		_turnLeftLong
  6503 ;;		_turnRightLong
  6504 ;;		_fullSpeedAhead
  6505 ;;		_TimedfullSpeedAhead
  6506 ;;		_moveBack
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text36
  6511   000EA4                     __ptext36:
  6512                           	callstack 0
  6513   000EA4                     _setMotorPWM:
  6514                           	callstack 23
  6515   000EA4                     
  6516                           ;dc_motor.c: 69: void setMotorPWM(DC_motor *m);dc_motor.c: 70: {;dc_motor.c: 71:     uns
      +                          igned char posDuty, negDuty;;dc_motor.c: 73:     if(m->brakemode) {
  6517   000EA4  EE20 F002          	lfsr	2,2
  6518   000EA8  501E               	movf	setMotorPWM@m^0,w,c
  6519   000EAA  26D9               	addwf	fsr2l,f,c
  6520   000EAC  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6521   000EAE  22DA               	addwfc	fsr2h,f,c
  6522   000EB0  50DF               	movf	indf2,w,c
  6523   000EB2  B4D8               	btfsc	status,2,c
  6524   000EB4  EF5E  F007         	goto	u2871
  6525   000EB8  EF60  F007         	goto	u2870
  6526   000EBC                     u2871:
  6527   000EBC  EF94  F007         	goto	l3592
  6528   000EC0                     u2870:
  6529   000EC0                     
  6530                           ;dc_motor.c: 74:         posDuty=m->PWMperiod - ((unsigned int)(m->power)*(m->PWMperiod)
      +                          )/100;
  6531   000EC0  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6532   000EC4  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6533   000EC8  50DF               	movf	indf2,w,c
  6534   000ECA  6E20               	movwf	??_setMotorPWM^0,c
  6535   000ECC  5020               	movf	??_setMotorPWM^0,w,c
  6536   000ECE  6E11               	movwf	___wmul@multiplier^0,c
  6537   000ED0  6A12               	clrf	(___wmul@multiplier+1)^0,c
  6538   000ED2  EE20 F003          	lfsr	2,3
  6539   000ED6  501E               	movf	setMotorPWM@m^0,w,c
  6540   000ED8  26D9               	addwf	fsr2l,f,c
  6541   000EDA  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6542   000EDC  22DA               	addwfc	fsr2h,f,c
  6543   000EDE  CFDE F013          	movff	postinc2,___wmul@multiplicand
  6544   000EE2  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  6545   000EE6  EC7D  F010         	call	___wmul	;wreg free
  6546   000EEA  C011  F017         	movff	?___wmul,___lwdiv@dividend
  6547   000EEE  C012  F018         	movff	?___wmul+1,___lwdiv@dividend+1
  6548   000EF2  0E00               	movlw	0
  6549   000EF4  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  6550   000EF6  0E64               	movlw	100
  6551   000EF8  6E19               	movwf	___lwdiv@divisor^0,c
  6552   000EFA  EC72  F00D         	call	___lwdiv	;wreg free
  6553   000EFE  EE20 F003          	lfsr	2,3
  6554   000F02  501E               	movf	setMotorPWM@m^0,w,c
  6555   000F04  26D9               	addwf	fsr2l,f,c
  6556   000F06  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6557   000F08  22DA               	addwfc	fsr2h,f,c
  6558   000F0A  50DF               	movf	indf2,w,c
  6559   000F0C  6E21               	movwf	(??_setMotorPWM+1)^0,c
  6560   000F0E  5017               	movf	?___lwdiv^0,w,c
  6561   000F10  5C21               	subwf	(??_setMotorPWM+1)^0,w,c
  6562   000F12  6E22               	movwf	setMotorPWM@posDuty^0,c
  6563   000F14                     
  6564                           ;dc_motor.c: 75:         negDuty=m->PWMperiod;
  6565   000F14  EE20 F003          	lfsr	2,3
  6566   000F18  501E               	movf	setMotorPWM@m^0,w,c
  6567   000F1A  26D9               	addwf	fsr2l,f,c
  6568   000F1C  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6569   000F1E  22DA               	addwfc	fsr2h,f,c
  6570   000F20  50DF               	movf	indf2,w,c
  6571   000F22  6E23               	movwf	setMotorPWM@negDuty^0,c
  6572                           
  6573                           ;dc_motor.c: 76:     }
  6574   000F24  EFB7  F007         	goto	l3596
  6575   000F28                     l3592:
  6576                           
  6577                           ;dc_motor.c: 78:         posDuty=0;
  6578   000F28  0E00               	movlw	0
  6579   000F2A  6E22               	movwf	setMotorPWM@posDuty^0,c
  6580   000F2C                     
  6581                           ;dc_motor.c: 79:   negDuty=((unsigned int)(m->power)*(m->PWMperiod))/100;
  6582   000F2C  C01E  FFD9         	movff	setMotorPWM@m,fsr2l
  6583   000F30  C01F  FFDA         	movff	setMotorPWM@m+1,fsr2h
  6584   000F34  50DF               	movf	indf2,w,c
  6585   000F36  6E20               	movwf	??_setMotorPWM^0,c
  6586   000F38  5020               	movf	??_setMotorPWM^0,w,c
  6587   000F3A  6E11               	movwf	___wmul@multiplier^0,c
  6588   000F3C  6A12               	clrf	(___wmul@multiplier+1)^0,c
  6589   000F3E  EE20 F003          	lfsr	2,3
  6590   000F42  501E               	movf	setMotorPWM@m^0,w,c
  6591   000F44  26D9               	addwf	fsr2l,f,c
  6592   000F46  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6593   000F48  22DA               	addwfc	fsr2h,f,c
  6594   000F4A  CFDE F013          	movff	postinc2,___wmul@multiplicand
  6595   000F4E  CFDD F014          	movff	postdec2,___wmul@multiplicand+1
  6596   000F52  EC7D  F010         	call	___wmul	;wreg free
  6597   000F56  C011  F017         	movff	?___wmul,___lwdiv@dividend
  6598   000F5A  C012  F018         	movff	?___wmul+1,___lwdiv@dividend+1
  6599   000F5E  0E00               	movlw	0
  6600   000F60  6E1A               	movwf	(___lwdiv@divisor+1)^0,c
  6601   000F62  0E64               	movlw	100
  6602   000F64  6E19               	movwf	___lwdiv@divisor^0,c
  6603   000F66  EC72  F00D         	call	___lwdiv	;wreg free
  6604   000F6A  5017               	movf	?___lwdiv^0,w,c
  6605   000F6C  6E23               	movwf	setMotorPWM@negDuty^0,c
  6606   000F6E                     l3596:
  6607                           
  6608                           ;dc_motor.c: 82:     if (m->direction) {
  6609   000F6E  EE20 F001          	lfsr	2,1
  6610   000F72  501E               	movf	setMotorPWM@m^0,w,c
  6611   000F74  26D9               	addwf	fsr2l,f,c
  6612   000F76  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6613   000F78  22DA               	addwfc	fsr2h,f,c
  6614   000F7A  50DF               	movf	indf2,w,c
  6615   000F7C  B4D8               	btfsc	status,2,c
  6616   000F7E  EFC3  F007         	goto	u2881
  6617   000F82  EFC5  F007         	goto	u2880
  6618   000F86                     u2881:
  6619   000F86  EFE7  F007         	goto	l3600
  6620   000F8A                     u2880:
  6621   000F8A                     
  6622                           ;dc_motor.c: 83:         *(m->posDutyHighByte)=posDuty;
  6623   000F8A  EE20 F005          	lfsr	2,5
  6624   000F8E  501E               	movf	setMotorPWM@m^0,w,c
  6625   000F90  26D9               	addwf	fsr2l,f,c
  6626   000F92  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6627   000F94  22DA               	addwfc	fsr2h,f,c
  6628   000F96  CFDE F020          	movff	postinc2,??_setMotorPWM
  6629   000F9A  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6630   000F9E  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6631   000FA2  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6632   000FA6  C022  FFDF         	movff	setMotorPWM@posDuty,indf2
  6633                           
  6634                           ;dc_motor.c: 84:         *(m->negDutyHighByte)=negDuty;
  6635   000FAA  EE20 F007          	lfsr	2,7
  6636   000FAE  501E               	movf	setMotorPWM@m^0,w,c
  6637   000FB0  26D9               	addwf	fsr2l,f,c
  6638   000FB2  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6639   000FB4  22DA               	addwfc	fsr2h,f,c
  6640   000FB6  CFDE F020          	movff	postinc2,??_setMotorPWM
  6641   000FBA  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6642   000FBE  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6643   000FC2  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6644   000FC6  C023  FFDF         	movff	setMotorPWM@negDuty,indf2
  6645                           
  6646                           ;dc_motor.c: 85:     } else {
  6647   000FCA  EF07  F008         	goto	l229
  6648   000FCE                     l3600:
  6649                           
  6650                           ;dc_motor.c: 86:         *(m->posDutyHighByte)=negDuty;
  6651   000FCE  EE20 F005          	lfsr	2,5
  6652   000FD2  501E               	movf	setMotorPWM@m^0,w,c
  6653   000FD4  26D9               	addwf	fsr2l,f,c
  6654   000FD6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6655   000FD8  22DA               	addwfc	fsr2h,f,c
  6656   000FDA  CFDE F020          	movff	postinc2,??_setMotorPWM
  6657   000FDE  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6658   000FE2  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6659   000FE6  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6660   000FEA  C023  FFDF         	movff	setMotorPWM@negDuty,indf2
  6661                           
  6662                           ;dc_motor.c: 87:         *(m->negDutyHighByte)=posDuty;
  6663   000FEE  EE20 F007          	lfsr	2,7
  6664   000FF2  501E               	movf	setMotorPWM@m^0,w,c
  6665   000FF4  26D9               	addwf	fsr2l,f,c
  6666   000FF6  501F               	movf	(setMotorPWM@m+1)^0,w,c
  6667   000FF8  22DA               	addwfc	fsr2h,f,c
  6668   000FFA  CFDE F020          	movff	postinc2,??_setMotorPWM
  6669   000FFE  CFDD F021          	movff	postdec2,??_setMotorPWM+1
  6670   001002  C020  FFD9         	movff	??_setMotorPWM,fsr2l
  6671   001006  C021  FFDA         	movff	??_setMotorPWM+1,fsr2h
  6672   00100A  C022  FFDF         	movff	setMotorPWM@posDuty,indf2
  6673   00100E                     l229:
  6674   00100E  0012               	return		;funcret
  6675   001010                     __end_of_setMotorPWM:
  6676                           	callstack 0
  6677                           
  6678 ;; *************** function ___wmul *****************
  6679 ;; Defined at:
  6680 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  multiplier      2   16[COMRAM] unsigned int 
  6683 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  product         2   20[COMRAM] unsigned int 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  2   16[COMRAM] unsigned int 
  6688 ;; Registers used:
  6689 ;;		wreg, status,2, status,0, prodl, prodh
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6698 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6699 ;;Total ram usage:        6 bytes
  6700 ;; Hardware stack levels used: 1
  6701 ;; Hardware stack levels required when called: 5
  6702 ;; This function calls:
  6703 ;;		Nothing
  6704 ;; This function is called by:
  6705 ;;		_get_color_distance
  6706 ;;		_get_color_code
  6707 ;;		_get_wall_detection
  6708 ;;		_setMotorPWM
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712                           	psect	text37
  6713   0020FA                     __ptext37:
  6714                           	callstack 0
  6715   0020FA                     ___wmul:
  6716                           	callstack 23
  6717   0020FA  5011               	movf	___wmul@multiplier^0,w,c
  6718   0020FC  0213               	mulwf	___wmul@multiplicand^0,c
  6719   0020FE  CFF3 F015          	movff	prodl,___wmul@product
  6720   002102  CFF4 F016          	movff	prodh,___wmul@product+1
  6721   002106  5011               	movf	___wmul@multiplier^0,w,c
  6722   002108  0214               	mulwf	(___wmul@multiplicand+1)^0,c
  6723   00210A  50F3               	movf	243,w,c
  6724   00210C  2616               	addwf	(___wmul@product+1)^0,f,c
  6725   00210E  5012               	movf	(___wmul@multiplier+1)^0,w,c
  6726   002110  0213               	mulwf	___wmul@multiplicand^0,c
  6727   002112  50F3               	movf	243,w,c
  6728   002114  2616               	addwf	(___wmul@product+1)^0,f,c
  6729   002116  C015  F011         	movff	___wmul@product,?___wmul
  6730   00211A  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6731   00211E  0012               	return		;funcret
  6732   002120                     __end_of___wmul:
  6733                           	callstack 0
  6734                           
  6735 ;; *************** function ___lwdiv *****************
  6736 ;; Defined at:
  6737 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\lwdiv.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  dividend        2   22[COMRAM] unsigned int 
  6740 ;;  divisor         2   24[COMRAM] unsigned int 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  quotient        2   27[COMRAM] unsigned int 
  6743 ;;  counter         1   26[COMRAM] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  2   22[COMRAM] unsigned int 
  6746 ;; Registers used:
  6747 ;;		wreg, status,2, status,0
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6753 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6754 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6756 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6757 ;;Total ram usage:        7 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 5
  6760 ;; This function calls:
  6761 ;;		Nothing
  6762 ;; This function is called by:
  6763 ;;		_calibrate_black
  6764 ;;		_setMotorPWM
  6765 ;; This function uses a non-reentrant model
  6766 ;;
  6767                           
  6768                           	psect	text38
  6769   001AE4                     __ptext38:
  6770                           	callstack 0
  6771   001AE4                     ___lwdiv:
  6772                           	callstack 23
  6773   001AE4  0E00               	movlw	0
  6774   001AE6  6E1D               	movwf	(___lwdiv@quotient+1)^0,c
  6775   001AE8  0E00               	movlw	0
  6776   001AEA  6E1C               	movwf	___lwdiv@quotient^0,c
  6777   001AEC  5019               	movf	___lwdiv@divisor^0,w,c
  6778   001AEE  101A               	iorwf	(___lwdiv@divisor+1)^0,w,c
  6779   001AF0  B4D8               	btfsc	status,2,c
  6780   001AF2  EF7D  F00D         	goto	u2811
  6781   001AF6  EF7F  F00D         	goto	u2810
  6782   001AFA                     u2811:
  6783   001AFA  EFA7  F00D         	goto	l968
  6784   001AFE                     u2810:
  6785   001AFE  0E01               	movlw	1
  6786   001B00  6E1B               	movwf	___lwdiv@counter^0,c
  6787   001B02  EF87  F00D         	goto	l3540
  6788   001B06                     l3538:
  6789   001B06  90D8               	bcf	status,0,c
  6790   001B08  3619               	rlcf	___lwdiv@divisor^0,f,c
  6791   001B0A  361A               	rlcf	(___lwdiv@divisor+1)^0,f,c
  6792   001B0C  2A1B               	incf	___lwdiv@counter^0,f,c
  6793   001B0E                     l3540:
  6794   001B0E  AE1A               	btfss	(___lwdiv@divisor+1)^0,7,c
  6795   001B10  EF8C  F00D         	goto	u2821
  6796   001B14  EF8E  F00D         	goto	u2820
  6797   001B18                     u2821:
  6798   001B18  EF83  F00D         	goto	l3538
  6799   001B1C                     u2820:
  6800   001B1C                     l3542:
  6801   001B1C  90D8               	bcf	status,0,c
  6802   001B1E  361C               	rlcf	___lwdiv@quotient^0,f,c
  6803   001B20  361D               	rlcf	(___lwdiv@quotient+1)^0,f,c
  6804   001B22  5019               	movf	___lwdiv@divisor^0,w,c
  6805   001B24  5C17               	subwf	___lwdiv@dividend^0,w,c
  6806   001B26  501A               	movf	(___lwdiv@divisor+1)^0,w,c
  6807   001B28  5818               	subwfb	(___lwdiv@dividend+1)^0,w,c
  6808   001B2A  A0D8               	btfss	status,0,c
  6809   001B2C  EF9A  F00D         	goto	u2831
  6810   001B30  EF9C  F00D         	goto	u2830
  6811   001B34                     u2831:
  6812   001B34  EFA1  F00D         	goto	l3550
  6813   001B38                     u2830:
  6814   001B38  5019               	movf	___lwdiv@divisor^0,w,c
  6815   001B3A  5E17               	subwf	___lwdiv@dividend^0,f,c
  6816   001B3C  501A               	movf	(___lwdiv@divisor+1)^0,w,c
  6817   001B3E  5A18               	subwfb	(___lwdiv@dividend+1)^0,f,c
  6818   001B40  801C               	bsf	___lwdiv@quotient^0,0,c
  6819   001B42                     l3550:
  6820   001B42  90D8               	bcf	status,0,c
  6821   001B44  321A               	rrcf	(___lwdiv@divisor+1)^0,f,c
  6822   001B46  3219               	rrcf	___lwdiv@divisor^0,f,c
  6823   001B48  2E1B               	decfsz	___lwdiv@counter^0,f,c
  6824   001B4A  EF8E  F00D         	goto	l3542
  6825   001B4E                     l968:
  6826   001B4E  C01C  F017         	movff	___lwdiv@quotient,?___lwdiv
  6827   001B52  C01D  F018         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6828   001B56  0012               	return		;funcret
  6829   001B58                     __end_of___lwdiv:
  6830                           	callstack 0
  6831                           
  6832 ;; *************** function _Interrupts_init *****************
  6833 ;; Defined at:
  6834 ;;		line 11 in file "interrupts.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		None
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used: 1
  6854 ;; Hardware stack levels required when called: 5
  6855 ;; This function calls:
  6856 ;;		Nothing
  6857 ;; This function is called by:
  6858 ;;		_main
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text39
  6863   00216C                     __ptext39:
  6864                           	callstack 0
  6865   00216C                     _Interrupts_init:
  6866                           	callstack 25
  6867   00216C                     
  6868                           ;interrupts.c: 13:     INTCONbits.PEIE = 1;
  6869   00216C  8CF2               	bsf	242,6,c	;volatile
  6870                           
  6871                           ;interrupts.c: 14:     PIE0bits.TMR0IE = 1;
  6872   00216E  010E               	movlb	14	; () banked
  6873   002170  8B29               	bsf	41,5,b	;volatile
  6874                           
  6875                           ;interrupts.c: 15:     PIE2bits.C1IE = 1;
  6876   002172  812B               	bsf	43,0,b	;volatile
  6877                           
  6878                           ;interrupts.c: 16:     INTCONbits.GIE = 1;
  6879   002174  8EF2               	bsf	242,7,c	;volatile
  6880   002176                     
  6881                           ; BSR set to: 14
  6882   002176  0012               	return		;funcret
  6883   002178                     __end_of_Interrupts_init:
  6884                           	callstack 0
  6885                           
  6886 ;; *************** function _HighISR *****************
  6887 ;; Defined at:
  6888 ;;		line 25 in file "interrupts.c"
  6889 ;; Parameters:    Size  Location     Type
  6890 ;;		None
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;		None
  6893 ;; Return value:  Size  Location     Type
  6894 ;;                  1    wreg      void 
  6895 ;; Registers used:
  6896 ;;		wreg, status,2, status,0, cstack
  6897 ;; Tracked objects:
  6898 ;;		On entry : 0/0
  6899 ;;		On exit  : 0/0
  6900 ;;		Unchanged: 0/0
  6901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  6902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6906 ;;Total ram usage:        0 bytes
  6907 ;; Hardware stack levels used: 1
  6908 ;; Hardware stack levels required when called: 4
  6909 ;; This function calls:
  6910 ;;		_increment_seconds
  6911 ;;		_set_wall_detection
  6912 ;; This function is called by:
  6913 ;;		Interrupt level 2
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	intcode
  6918   000008                     __pintcode:
  6919                           	callstack 0
  6920   000008                     _HighISR:
  6921                           	callstack 21
  6922                           
  6923                           ; BSR set to: 14
  6924                           ;incstack = 0
  6925   000008  824E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6926   00000A                     
  6927                           ;interrupts.c: 27:     if(PIR0bits.TMR0IF == 1){
  6928   00000A  010E               	movlb	14	; () banked
  6929   00000C  AB33               	btfss	51,5,b	;volatile
  6930   00000E  EF0B  F000         	goto	i2u233_41
  6931   000012  EF0D  F000         	goto	i2u233_40
  6932   000016                     i2u233_41:
  6933   000016  EF4D  F000         	goto	i2l410
  6934   00001A                     i2u233_40:
  6935   00001A                     
  6936                           ; BSR set to: 14
  6937                           ;interrupts.c: 28:         incr_sec_counter += 1;
  6938   00001A  4A3C               	infsnz	_incr_sec_counter^0,f,c
  6939   00001C  2A3D               	incf	(_incr_sec_counter+1)^0,f,c
  6940                           
  6941                           ;interrupts.c: 29:         wall_detection_counter += 1;
  6942   00001E  4A48               	infsnz	_wall_detection_counter^0,f,c
  6943   000020  2A49               	incf	(_wall_detection_counter+1)^0,f,c
  6944   000022                     
  6945                           ; BSR set to: 14
  6946                           ;interrupts.c: 31:         if(incr_sec_counter == 10){
  6947   000022  0E0A               	movlw	10
  6948   000024  183C               	xorwf	_incr_sec_counter^0,w,c
  6949   000026  103D               	iorwf	(_incr_sec_counter+1)^0,w,c
  6950   000028  A4D8               	btfss	status,2,c
  6951   00002A  EF19  F000         	goto	i2u234_41
  6952   00002E  EF1B  F000         	goto	i2u234_40
  6953   000032                     i2u234_41:
  6954   000032  EF21  F000         	goto	i2l3190
  6955   000036                     i2u234_40:
  6956   000036                     
  6957                           ; BSR set to: 14
  6958                           ;interrupts.c: 32:             increment_seconds();
  6959   000036  ECE8  F010         	call	_increment_seconds	;wreg free
  6960   00003A                     
  6961                           ;interrupts.c: 33:             incr_sec_counter = 0;
  6962   00003A  0E00               	movlw	0
  6963   00003C  6E3D               	movwf	(_incr_sec_counter+1)^0,c
  6964   00003E  0E00               	movlw	0
  6965   000040  6E3C               	movwf	_incr_sec_counter^0,c
  6966   000042                     i2l3190:
  6967                           
  6968                           ;interrupts.c: 36:         if(wall_detection_counter == 22){
  6969   000042  0E16               	movlw	22
  6970   000044  1848               	xorwf	_wall_detection_counter^0,w,c
  6971   000046  1049               	iorwf	(_wall_detection_counter+1)^0,w,c
  6972   000048  A4D8               	btfss	status,2,c
  6973   00004A  EF29  F000         	goto	i2u235_41
  6974   00004E  EF2B  F000         	goto	i2u235_40
  6975   000052                     i2u235_41:
  6976   000052  EF33  F000         	goto	i2l3194
  6977   000056                     i2u235_40:
  6978   000056                     
  6979                           ;interrupts.c: 37:             set_wall_detection(0);
  6980   000056  0E00               	movlw	0
  6981   000058  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  6982   00005A  0E00               	movlw	0
  6983   00005C  6E0C               	movwf	set_wall_detection@mode^0,c
  6984   00005E  EC40  F00E         	call	_set_wall_detection	;wreg free
  6985                           
  6986                           ;interrupts.c: 38:         }
  6987   000062  EF47  F000         	goto	i2l3200
  6988   000066                     i2l3194:
  6989   000066  0E2C               	movlw	44
  6990   000068  1848               	xorwf	_wall_detection_counter^0,w,c
  6991   00006A  1049               	iorwf	(_wall_detection_counter+1)^0,w,c
  6992   00006C  A4D8               	btfss	status,2,c
  6993   00006E  EF3B  F000         	goto	i2u236_41
  6994   000072  EF3D  F000         	goto	i2u236_40
  6995   000076                     i2u236_41:
  6996   000076  EF47  F000         	goto	i2l3200
  6997   00007A                     i2u236_40:
  6998   00007A                     
  6999                           ;interrupts.c: 40:             set_wall_detection(1);
  7000   00007A  0E00               	movlw	0
  7001   00007C  6E0D               	movwf	(set_wall_detection@mode+1)^0,c
  7002   00007E  0E01               	movlw	1
  7003   000080  6E0C               	movwf	set_wall_detection@mode^0,c
  7004   000082  EC40  F00E         	call	_set_wall_detection	;wreg free
  7005   000086                     
  7006                           ;interrupts.c: 41:             wall_detection_counter = 0;
  7007   000086  0E00               	movlw	0
  7008   000088  6E49               	movwf	(_wall_detection_counter+1)^0,c
  7009   00008A  0E00               	movlw	0
  7010   00008C  6E48               	movwf	_wall_detection_counter^0,c
  7011   00008E                     i2l3200:
  7012                           
  7013                           ;interrupts.c: 44:         TMR0H=0b11111101;
  7014   00008E  0EFD               	movlw	253
  7015   000090  6ED4               	movwf	212,c	;volatile
  7016   000092                     
  7017                           ;interrupts.c: 45:         TMR0L=0b10010000;
  7018   000092  0E90               	movlw	144
  7019   000094  6ED3               	movwf	211,c	;volatile
  7020   000096                     
  7021                           ;interrupts.c: 47:         PIR0bits.TMR0IF = 0;
  7022   000096  010E               	movlb	14	; () banked
  7023   000098  9B33               	bcf	51,5,b	;volatile
  7024   00009A                     i2l410:
  7025                           
  7026                           ; BSR set to: 14
  7027   00009A  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  7028   00009C  0011               	retfie		f
  7029   00009E                     __end_of_HighISR:
  7030                           	callstack 0
  7031                           
  7032 ;; *************** function _set_wall_detection *****************
  7033 ;; Defined at:
  7034 ;;		line 258 in file "color.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;  mode            2   11[COMRAM] unsigned int 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;		None
  7039 ;; Return value:  Size  Location     Type
  7040 ;;                  1    wreg      void 
  7041 ;; Registers used:
  7042 ;;		wreg, status,2, status,0, cstack
  7043 ;; Tracked objects:
  7044 ;;		On entry : 0/0
  7045 ;;		On exit  : 0/0
  7046 ;;		Unchanged: 0/0
  7047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7048 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7050 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7051 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7052 ;;Total ram usage:        5 bytes
  7053 ;; Hardware stack levels used: 1
  7054 ;; Hardware stack levels required when called: 3
  7055 ;; This function calls:
  7056 ;;		i2_color_read_Clear
  7057 ;;		i2_set_led_color
  7058 ;; This function is called by:
  7059 ;;		_HighISR
  7060 ;; This function uses a non-reentrant model
  7061 ;;
  7062                           
  7063                           	psect	text41
  7064   001C80                     __ptext41:
  7065                           	callstack 0
  7066   001C80                     _set_wall_detection:
  7067                           	callstack 21
  7068   001C80  040C               	decf	set_wall_detection@mode^0,w,c
  7069   001C82  100D               	iorwf	(set_wall_detection@mode+1)^0,w,c
  7070   001C84  A4D8               	btfss	status,2,c
  7071   001C86  EF47  F00E         	goto	i2u206_41
  7072   001C8A  EF49  F00E         	goto	i2u206_40
  7073   001C8E                     i2u206_41:
  7074   001C8E  EF66  F00E         	goto	i2l2976
  7075   001C92                     i2u206_40:
  7076   001C92  0E00               	movlw	0
  7077   001C94  6E0E               	movwf	??_set_wall_detection^0,c
  7078   001C96  0E00               	movlw	0
  7079   001C98  6E0F               	movwf	(??_set_wall_detection+1)^0,c
  7080   001C9A  0E00               	movlw	0
  7081   001C9C  6E10               	movwf	(??_set_wall_detection+2)^0,c
  7082   001C9E  0E07               	movlw	7
  7083   001CA0  180E               	xorwf	??_set_wall_detection^0,w,c
  7084   001CA2  100F               	iorwf	(??_set_wall_detection+1)^0,w,c
  7085   001CA4  1010               	iorwf	(??_set_wall_detection+2)^0,w,c
  7086   001CA6  A4D8               	btfss	status,2,c
  7087   001CA8  EF58  F00E         	goto	i2u207_41
  7088   001CAC  EF5A  F00E         	goto	i2u207_40
  7089   001CB0                     i2u207_41:
  7090   001CB0  EF66  F00E         	goto	i2l2976
  7091   001CB4                     i2u207_40:
  7092   001CB4                     
  7093                           ;color.c: 263:         clear2 = color_read_Clear();
  7094   001CB4  EC0D  F00F         	call	i2_color_read_Clear	;wreg free
  7095   001CB8  C005  F044         	movff	?i2_color_read_Clear,_clear2
  7096   001CBC  C006  F045         	movff	?i2_color_read_Clear+1,_clear2+1
  7097   001CC0                     
  7098                           ;color.c: 264:         set_led_color(0b000);
  7099   001CC0  0E00               	movlw	0
  7100   001CC2  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7101   001CC4  0E00               	movlw	0
  7102   001CC6  6E01               	movwf	i2set_led_color@color^0,c
  7103   001CC8  ECC4  F00F         	call	i2_set_led_color	;wreg free
  7104   001CCC                     i2l2976:
  7105                           
  7106                           ;color.c: 266:     set_led_color(0b000);
  7107   001CCC  0E00               	movlw	0
  7108   001CCE  6E02               	movwf	(i2set_led_color@color+1)^0,c
  7109   001CD0  0E00               	movlw	0
  7110   001CD2  6E01               	movwf	i2set_led_color@color^0,c
  7111   001CD4  ECC4  F00F         	call	i2_set_led_color	;wreg free
  7112   001CD8  0012               	return		;funcret
  7113   001CDA                     __end_of_set_wall_detection:
  7114                           	callstack 0
  7115                           
  7116 ;; *************** function i2_set_led_color *****************
  7117 ;; Defined at:
  7118 ;;		line 157 in file "color.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  color           2    0[COMRAM] unsigned int 
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;		None
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      void 
  7125 ;; Registers used:
  7126 ;;		None
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7132 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7136 ;;Total ram usage:        2 bytes
  7137 ;; Hardware stack levels used: 1
  7138 ;; This function calls:
  7139 ;;		Nothing
  7140 ;; This function is called by:
  7141 ;;		_set_wall_detection
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text42
  7146   001F88                     __ptext42:
  7147                           	callstack 0
  7148   001F88                     i2_set_led_color:
  7149                           	callstack 23
  7150   001F88                     
  7151                           ;color.c: 161:     if(color & 0b100){
  7152   001F88  A401               	btfss	i2set_led_color@color^0,2,c
  7153   001F8A  EFC9  F00F         	goto	i2u175_41
  7154   001F8E  EFCB  F00F         	goto	i2u175_40
  7155   001F92                     i2u175_41:
  7156   001F92  EFCE  F00F         	goto	i2l116
  7157   001F96                     i2u175_40:
  7158   001F96                     
  7159                           ;color.c: 162:         LATGbits.LATG1 = 1;
  7160   001F96  827F               	bsf	127,1,c	;volatile
  7161                           
  7162                           ;color.c: 163:     }else{
  7163   001F98  EFCF  F00F         	goto	i2l117
  7164   001F9C                     i2l116:
  7165                           
  7166                           ;color.c: 164:         LATGbits.LATG1 = 0;
  7167   001F9C  927F               	bcf	127,1,c	;volatile
  7168   001F9E                     i2l117:
  7169                           
  7170                           ;color.c: 166:     if(color & 0b010){
  7171   001F9E  A201               	btfss	i2set_led_color@color^0,1,c
  7172   001FA0  EFD4  F00F         	goto	i2u176_41
  7173   001FA4  EFD6  F00F         	goto	i2u176_40
  7174   001FA8                     i2u176_41:
  7175   001FA8  EFD9  F00F         	goto	i2l118
  7176   001FAC                     i2u176_40:
  7177   001FAC                     
  7178                           ;color.c: 167:         LATAbits.LATA4 = 1;
  7179   001FAC  8879               	bsf	121,4,c	;volatile
  7180                           
  7181                           ;color.c: 168:     }else{
  7182   001FAE  EFDA  F00F         	goto	i2l119
  7183   001FB2                     i2l118:
  7184                           
  7185                           ;color.c: 169:         LATAbits.LATA4 = 0;
  7186   001FB2  9879               	bcf	121,4,c	;volatile
  7187   001FB4                     i2l119:
  7188                           
  7189                           ;color.c: 171:     if(color & 0b001){
  7190   001FB4  A001               	btfss	i2set_led_color@color^0,0,c
  7191   001FB6  EFDF  F00F         	goto	i2u177_41
  7192   001FBA  EFE1  F00F         	goto	i2u177_40
  7193   001FBE                     i2u177_41:
  7194   001FBE  EFE4  F00F         	goto	i2l120
  7195   001FC2                     i2u177_40:
  7196   001FC2                     
  7197                           ;color.c: 172:         LATFbits.LATF7 = 1;
  7198   001FC2  8E7E               	bsf	126,7,c	;volatile
  7199                           
  7200                           ;color.c: 173:     }else{
  7201   001FC4  EFE5  F00F         	goto	i2l122
  7202   001FC8                     i2l120:
  7203                           
  7204                           ;color.c: 174:         LATFbits.LATF7 = 0;
  7205   001FC8  9E7E               	bcf	126,7,c	;volatile
  7206   001FCA                     i2l122:
  7207   001FCA  0012               	return		;funcret
  7208   001FCC                     __end_ofi2_set_led_color:
  7209                           	callstack 0
  7210                           
  7211 ;; *************** function i2_color_read_Clear *****************
  7212 ;; Defined at:
  7213 ;;		line 135 in file "color.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;  tmp             2    9[COMRAM] unsigned int 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  2    4[COMRAM] unsigned int 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7229 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7230 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7231 ;;Total ram usage:        7 bytes
  7232 ;; Hardware stack levels used: 1
  7233 ;; Hardware stack levels required when called: 2
  7234 ;; This function calls:
  7235 ;;		i2_I2C_2_Master_Read
  7236 ;;		i2_I2C_2_Master_RepStart
  7237 ;;		i2_I2C_2_Master_Start
  7238 ;;		i2_I2C_2_Master_Stop
  7239 ;;		i2_I2C_2_Master_Write
  7240 ;; This function is called by:
  7241 ;;		_set_wall_detection
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text43
  7246   001E1A                     __ptext43:
  7247                           	callstack 0
  7248   001E1A                     i2_color_read_Clear:
  7249                           	callstack 21
  7250   001E1A                     
  7251                           ;color.c: 137:  unsigned int tmp;;color.c: 138:  I2C_2_Master_Start();
  7252   001E1A  ECDB  F010         	call	i2_I2C_2_Master_Start	;wreg free
  7253                           
  7254                           ;color.c: 139:  I2C_2_Master_Write(0x52 | 0x00);
  7255   001E1E  0E52               	movlw	82
  7256   001E20  ECBC  F010         	call	i2_I2C_2_Master_Write
  7257                           
  7258                           ;color.c: 140:  I2C_2_Master_Write(0xA0 | 0x14);
  7259   001E24  0EB4               	movlw	180
  7260   001E26  ECBC  F010         	call	i2_I2C_2_Master_Write
  7261                           
  7262                           ;color.c: 141:  I2C_2_Master_RepStart();
  7263   001E2A  ECE0  F010         	call	i2_I2C_2_Master_RepStart	;wreg free
  7264                           
  7265                           ;color.c: 142:  I2C_2_Master_Write(0x52 | 0x01);
  7266   001E2E  0E53               	movlw	83
  7267   001E30  ECBC  F010         	call	i2_I2C_2_Master_Write
  7268                           
  7269                           ;color.c: 143:  tmp=I2C_2_Master_Read(1);
  7270   001E34  0E01               	movlw	1
  7271   001E36  EC07  F010         	call	i2_I2C_2_Master_Read
  7272   001E3A  6E07               	movwf	??i2_color_read_Clear^0,c
  7273   001E3C  5007               	movf	??i2_color_read_Clear^0,w,c
  7274   001E3E  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7275   001E40  6A0B               	clrf	(i2color_read_Clear@tmp+1)^0,c
  7276                           
  7277                           ;color.c: 144:  tmp=tmp | (I2C_2_Master_Read(0)<<8);
  7278   001E42  0E00               	movlw	0
  7279   001E44  EC07  F010         	call	i2_I2C_2_Master_Read
  7280   001E48  6E07               	movwf	??i2_color_read_Clear^0,c
  7281   001E4A  5007               	movf	??i2_color_read_Clear^0,w,c
  7282   001E4C  6E09               	movwf	(??i2_color_read_Clear+2)^0,c
  7283   001E4E  6A08               	clrf	(??i2_color_read_Clear+1)^0,c
  7284   001E50  500A               	movf	i2color_read_Clear@tmp^0,w,c
  7285   001E52  1008               	iorwf	(??i2_color_read_Clear+1)^0,w,c
  7286   001E54  6E0A               	movwf	i2color_read_Clear@tmp^0,c
  7287   001E56  500B               	movf	(i2color_read_Clear@tmp+1)^0,w,c
  7288   001E58  1009               	iorwf	(??i2_color_read_Clear+2)^0,w,c
  7289   001E5A  6E0B               	movwf	(i2color_read_Clear@tmp+1)^0,c
  7290                           
  7291                           ;color.c: 145:  I2C_2_Master_Stop();
  7292   001E5C  ECD6  F010         	call	i2_I2C_2_Master_Stop	;wreg free
  7293   001E60                     
  7294                           ;color.c: 146:  return tmp;
  7295   001E60  C00A  F005         	movff	i2color_read_Clear@tmp,?i2_color_read_Clear
  7296   001E64  C00B  F006         	movff	i2color_read_Clear@tmp+1,?i2_color_read_Clear+1
  7297   001E68  0012               	return		;funcret
  7298   001E6A                     __end_ofi2_color_read_Clear:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function i2_I2C_2_Master_Write *****************
  7302 ;; Defined at:
  7303 ;;		line 45 in file "i2c.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  data_byte       1    wreg     unsigned char 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  data_byte       1    1[COMRAM] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7321 ;;Total ram usage:        1 bytes
  7322 ;; Hardware stack levels used: 1
  7323 ;; Hardware stack levels required when called: 1
  7324 ;; This function calls:
  7325 ;;		i2_I2C_2_Master_Idle
  7326 ;; This function is called by:
  7327 ;;		i2_color_read_Clear
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text44
  7332   002178                     __ptext44:
  7333                           	callstack 0
  7334   002178                     i2_I2C_2_Master_Write:
  7335                           	callstack 21
  7336                           
  7337                           ;incstack = 0
  7338                           ;i2I2C_2_Master_Write@data_byte stored from wreg
  7339   002178  6E02               	movwf	i2I2C_2_Master_Write@data_byte^0,c
  7340   00217A                     
  7341                           ;i2c.c: 45: void I2C_2_Master_Write(unsigned char data_byte);i2c.c: 46: {;i2c.c: 47:   I
      +                          2C_2_Master_Idle();
  7342   00217A  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7343   00217E                     
  7344                           ;i2c.c: 48:   SSP2BUF = data_byte;
  7345   00217E  C002  FED5         	movff	i2I2C_2_Master_Write@data_byte,3797	;volatile
  7346   002182  0012               	return		;funcret
  7347   002184                     __end_ofi2_I2C_2_Master_Write:
  7348                           	callstack 0
  7349                           
  7350 ;; *************** function i2_I2C_2_Master_Stop *****************
  7351 ;; Defined at:
  7352 ;;		line 39 in file "i2c.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;		None
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;		None
  7357 ;; Return value:  Size  Location     Type
  7358 ;;                  1    wreg      void 
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, status,0, cstack
  7361 ;; Tracked objects:
  7362 ;;		On entry : 0/0
  7363 ;;		On exit  : 0/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7370 ;;Total ram usage:        0 bytes
  7371 ;; Hardware stack levels used: 1
  7372 ;; Hardware stack levels required when called: 1
  7373 ;; This function calls:
  7374 ;;		i2_I2C_2_Master_Idle
  7375 ;; This function is called by:
  7376 ;;		i2_color_read_Clear
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text45
  7381   0021AC                     __ptext45:
  7382                           	callstack 0
  7383   0021AC                     i2_I2C_2_Master_Stop:
  7384                           	callstack 21
  7385   0021AC                     
  7386                           ;i2c.c: 41:   I2C_2_Master_Idle();
  7387   0021AC  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7388   0021B0                     
  7389                           ;i2c.c: 42:   SSP2CON2bits.PEN = 1;
  7390   0021B0  010E               	movlb	14	; () banked
  7391   0021B2  85DA               	bsf	218,2,b	;volatile
  7392   0021B4                     
  7393                           ; BSR set to: 14
  7394   0021B4  0012               	return		;funcret
  7395   0021B6                     __end_ofi2_I2C_2_Master_Stop:
  7396                           	callstack 0
  7397                           
  7398 ;; *************** function i2_I2C_2_Master_Start *****************
  7399 ;; Defined at:
  7400 ;;		line 27 in file "i2c.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7418 ;;Total ram usage:        0 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; Hardware stack levels required when called: 1
  7421 ;; This function calls:
  7422 ;;		i2_I2C_2_Master_Idle
  7423 ;; This function is called by:
  7424 ;;		i2_color_read_Clear
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text46
  7429   0021B6                     __ptext46:
  7430                           	callstack 0
  7431   0021B6                     i2_I2C_2_Master_Start:
  7432                           	callstack 21
  7433   0021B6                     
  7434                           ;i2c.c: 29:   I2C_2_Master_Idle();
  7435   0021B6  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7436   0021BA                     
  7437                           ;i2c.c: 30:   SSP2CON2bits.SEN = 1;
  7438   0021BA  010E               	movlb	14	; () banked
  7439   0021BC  81DA               	bsf	218,0,b	;volatile
  7440   0021BE                     
  7441                           ; BSR set to: 14
  7442   0021BE  0012               	return		;funcret
  7443   0021C0                     __end_ofi2_I2C_2_Master_Start:
  7444                           	callstack 0
  7445                           
  7446 ;; *************** function i2_I2C_2_Master_RepStart *****************
  7447 ;; Defined at:
  7448 ;;		line 33 in file "i2c.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;		None
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      void 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7466 ;;Total ram usage:        0 bytes
  7467 ;; Hardware stack levels used: 1
  7468 ;; Hardware stack levels required when called: 1
  7469 ;; This function calls:
  7470 ;;		i2_I2C_2_Master_Idle
  7471 ;; This function is called by:
  7472 ;;		i2_color_read_Clear
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text47
  7477   0021C0                     __ptext47:
  7478                           	callstack 0
  7479   0021C0                     i2_I2C_2_Master_RepStart:
  7480                           	callstack 21
  7481   0021C0                     
  7482                           ;i2c.c: 35:   I2C_2_Master_Idle();
  7483   0021C0  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7484   0021C4                     
  7485                           ;i2c.c: 36:   SSP2CON2bits.RSEN = 1;
  7486   0021C4  010E               	movlb	14	; () banked
  7487   0021C6  83DA               	bsf	218,1,b	;volatile
  7488   0021C8                     
  7489                           ; BSR set to: 14
  7490   0021C8  0012               	return		;funcret
  7491   0021CA                     __end_ofi2_I2C_2_Master_RepStart:
  7492                           	callstack 0
  7493                           
  7494 ;; *************** function i2_I2C_2_Master_Read *****************
  7495 ;; Defined at:
  7496 ;;		line 51 in file "i2c.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;  ack             1    wreg     unsigned char 
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  ack             1    2[COMRAM] unsigned char 
  7501 ;;  tmp             1    3[COMRAM] unsigned char 
  7502 ;; Return value:  Size  Location     Type
  7503 ;;                  1    wreg      unsigned char 
  7504 ;; Registers used:
  7505 ;;		wreg, status,2, status,0, cstack
  7506 ;; Tracked objects:
  7507 ;;		On entry : 0/0
  7508 ;;		On exit  : 0/0
  7509 ;;		Unchanged: 0/0
  7510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7514 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7515 ;;Total ram usage:        3 bytes
  7516 ;; Hardware stack levels used: 1
  7517 ;; Hardware stack levels required when called: 1
  7518 ;; This function calls:
  7519 ;;		i2_I2C_2_Master_Idle
  7520 ;; This function is called by:
  7521 ;;		i2_color_read_Clear
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           	psect	text48
  7526   00200E                     __ptext48:
  7527                           	callstack 0
  7528   00200E                     i2_I2C_2_Master_Read:
  7529                           	callstack 21
  7530                           
  7531                           ; BSR set to: 14
  7532                           ;incstack = 0
  7533                           ;i2I2C_2_Master_Read@ack stored from wreg
  7534   00200E  6E03               	movwf	i2I2C_2_Master_Read@ack^0,c
  7535   002010                     
  7536                           ;i2c.c: 51: unsigned char I2C_2_Master_Read(unsigned char ack);i2c.c: 52: {;i2c.c: 53:  
      +                           unsigned char tmp;;i2c.c: 54:   I2C_2_Master_Idle();
  7537   002010  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7538   002014                     
  7539                           ;i2c.c: 55:   SSP2CON2bits.RCEN = 1;
  7540   002014  010E               	movlb	14	; () banked
  7541   002016  87DA               	bsf	218,3,b	;volatile
  7542                           
  7543                           ;i2c.c: 56:   I2C_2_Master_Idle();
  7544   002018  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7545   00201C                     
  7546                           ;i2c.c: 57:   tmp = SSP2BUF;
  7547   00201C  CED5 F004          	movff	3797,i2I2C_2_Master_Read@tmp	;volatile
  7548                           
  7549                           ;i2c.c: 58:   I2C_2_Master_Idle();
  7550   002020  EC69  F010         	call	i2_I2C_2_Master_Idle	;wreg free
  7551   002024                     
  7552                           ;i2c.c: 59:   SSP2CON2bits.ACKDT = !ack;
  7553   002024  5003               	movf	i2I2C_2_Master_Read@ack^0,w,c
  7554   002026  B4D8               	btfsc	status,2,c
  7555   002028  EF18  F010         	goto	i2u153_41
  7556   00202C  EF1C  F010         	goto	i2u153_40
  7557   002030                     i2u153_41:
  7558   002030  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7559   002032  2A02               	incf	??i2_I2C_2_Master_Read^0,f,c
  7560   002034  EF1D  F010         	goto	i2u154_48
  7561   002038                     i2u153_40:
  7562   002038  6A02               	clrf	??i2_I2C_2_Master_Read^0,c
  7563   00203A                     i2u154_48:
  7564   00203A  3A02               	swapf	??i2_I2C_2_Master_Read^0,f,c
  7565   00203C  4602               	rlncf	??i2_I2C_2_Master_Read^0,f,c
  7566   00203E  010E               	movlb	14	; () banked
  7567   002040  51DA               	movf	218,w,b	;volatile
  7568   002042  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7569   002044  0BDF               	andlw	-33
  7570   002046  1802               	xorwf	??i2_I2C_2_Master_Read^0,w,c
  7571   002048  6FDA               	movwf	218,b	;volatile
  7572   00204A                     
  7573                           ; BSR set to: 14
  7574                           ;i2c.c: 60:   SSP2CON2bits.ACKEN = 1;
  7575   00204A  89DA               	bsf	218,4,b	;volatile
  7576   00204C                     
  7577                           ; BSR set to: 14
  7578                           ;i2c.c: 61:   return tmp;
  7579   00204C  5004               	movf	i2I2C_2_Master_Read@tmp^0,w,c
  7580   00204E                     
  7581                           ; BSR set to: 14
  7582   00204E  0012               	return		;funcret
  7583   002050                     __end_ofi2_I2C_2_Master_Read:
  7584                           	callstack 0
  7585                           
  7586 ;; *************** function i2_I2C_2_Master_Idle *****************
  7587 ;; Defined at:
  7588 ;;		line 22 in file "i2c.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;		None
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;		None
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      void 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7606 ;;Total ram usage:        1 bytes
  7607 ;; Hardware stack levels used: 1
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		i2_I2C_2_Master_Start
  7612 ;;		i2_I2C_2_Master_RepStart
  7613 ;;		i2_I2C_2_Master_Stop
  7614 ;;		i2_I2C_2_Master_Write
  7615 ;;		i2_I2C_2_Master_Read
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           	psect	text49
  7620   0020D2                     __ptext49:
  7621                           	callstack 0
  7622   0020D2                     i2_I2C_2_Master_Idle:
  7623                           	callstack 21
  7624   0020D2                     i2l359:
  7625   0020D2  010E               	movlb	14	; () banked
  7626   0020D4  B5D8               	btfsc	216,2,b	;volatile
  7627   0020D6  EF6F  F010         	goto	i2u146_41
  7628   0020DA  EF71  F010         	goto	i2u146_40
  7629   0020DE                     i2u146_41:
  7630   0020DE  EF69  F010         	goto	i2l359
  7631   0020E2                     i2u146_40:
  7632   0020E2                     
  7633                           ; BSR set to: 14
  7634   0020E2  CEDA F001          	movff	3802,??i2_I2C_2_Master_Idle	;volatile
  7635   0020E6  0E1F               	movlw	31
  7636   0020E8  1601               	andwf	??i2_I2C_2_Master_Idle^0,f,c
  7637   0020EA  A4D8               	btfss	status,2,c
  7638   0020EC  EF7A  F010         	goto	i2u147_41
  7639   0020F0  EF7C  F010         	goto	i2u147_40
  7640   0020F4                     i2u147_41:
  7641   0020F4  EF69  F010         	goto	i2l359
  7642   0020F8                     i2u147_40:
  7643   0020F8                     
  7644                           ; BSR set to: 14
  7645   0020F8  0012               	return		;funcret
  7646   0020FA                     __end_ofi2_I2C_2_Master_Idle:
  7647                           	callstack 0
  7648                           
  7649 ;; *************** function _increment_seconds *****************
  7650 ;; Defined at:
  7651 ;;		line 297 in file "dc_motor.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;		None
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;		None
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		status,2, status,0
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
  7665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7669 ;;Total ram usage:        0 bytes
  7670 ;; Hardware stack levels used: 1
  7671 ;; This function calls:
  7672 ;;		Nothing
  7673 ;; This function is called by:
  7674 ;;		_HighISR
  7675 ;; This function uses a non-reentrant model
  7676 ;;
  7677                           
  7678                           	psect	text50
  7679   0021D0                     __ptext50:
  7680                           	callstack 0
  7681   0021D0                     _increment_seconds:
  7682                           	callstack 24
  7683   0021D0                     
  7684                           ;dc_motor.c: 299:     seconds += 1;
  7685   0021D0  4A42               	infsnz	_seconds^0,f,c
  7686   0021D2  2A43               	incf	(_seconds+1)^0,f,c
  7687   0021D4  0012               	return		;funcret
  7688   0021D6                     __end_of_increment_seconds:
  7689                           	callstack 0
  7690   000000                     
  7691                           	psect	rparam
  7692   000000                     
  7693                           	psect	temp
  7694   00004E                     btemp:
  7695                           	callstack 0
  7696   00004E                     	ds	1
  7697   000000                     int$flags	set	btemp
  7698   000000                     wtemp8	set	btemp+1
  7699   000000                     ttemp5	set	btemp+1
  7700   000000                     ttemp6	set	btemp+4
  7701   000000                     ttemp7	set	btemp+8
  7702                           
  7703                           	psect	idloc
  7704                           
  7705                           ;Config register IDLOC0 @ 0x200000
  7706                           ;	unspecified, using default values
  7707   200000                     	org	2097152
  7708   200000  0FFF               	dw	4095
  7709                           
  7710                           ;Config register IDLOC1 @ 0x200002
  7711                           ;	unspecified, using default values
  7712   200002                     	org	2097154
  7713   200002  0FFF               	dw	4095
  7714                           
  7715                           ;Config register IDLOC2 @ 0x200004
  7716                           ;	unspecified, using default values
  7717   200004                     	org	2097156
  7718   200004  0FFF               	dw	4095
  7719                           
  7720                           ;Config register IDLOC3 @ 0x200006
  7721                           ;	unspecified, using default values
  7722   200006                     	org	2097158
  7723   200006  0FFF               	dw	4095
  7724                           
  7725                           ;Config register IDLOC4 @ 0x200008
  7726                           ;	unspecified, using default values
  7727   200008                     	org	2097160
  7728   200008  0FFF               	dw	4095
  7729                           
  7730                           ;Config register IDLOC5 @ 0x20000A
  7731                           ;	unspecified, using default values
  7732   20000A                     	org	2097162
  7733   20000A  0FFF               	dw	4095
  7734                           
  7735                           ;Config register IDLOC6 @ 0x20000C
  7736                           ;	unspecified, using default values
  7737   20000C                     	org	2097164
  7738   20000C  0FFF               	dw	4095
  7739                           
  7740                           ;Config register IDLOC7 @ 0x20000E
  7741                           ;	unspecified, using default values
  7742   20000E                     	org	2097166
  7743   20000E  0FFF               	dw	4095
  7744                           
  7745                           	psect	config
  7746                           
  7747                           ;Config register CONFIG1L @ 0x300000
  7748                           ;	External Oscillator mode Selection bits
  7749                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  7750                           ;	Power-up default value for COSC bits
  7751                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  7752   300000                     	org	3145728
  7753   300000  AA                 	db	170
  7754                           
  7755                           ;Config register CONFIG1H @ 0x300001
  7756                           ;	unspecified, using default values
  7757                           ;	Clock Out Enable bit
  7758                           ;	CLKOUTEN = 0x1, unprogrammed default
  7759                           ;	Clock Switch Enable bit
  7760                           ;	CSWEN = 0x1, unprogrammed default
  7761                           ;	Fail-Safe Clock Monitor Enable bit
  7762                           ;	FCMEN = 0x1, unprogrammed default
  7763   300001                     	org	3145729
  7764   300001  FF                 	db	255
  7765                           
  7766                           ;Config register CONFIG2L @ 0x300002
  7767                           ;	unspecified, using default values
  7768                           ;	Master Clear Enable bit
  7769                           ;	MCLRE = 0x1, unprogrammed default
  7770                           ;	Power-up Timer Enable bit
  7771                           ;	PWRTE = 0x1, unprogrammed default
  7772                           ;	Low-power BOR enable bit
  7773                           ;	LPBOREN = 0x1, unprogrammed default
  7774                           ;	Brown-out Reset Enable bits
  7775                           ;	BOREN = 0x3, unprogrammed default
  7776   300002                     	org	3145730
  7777   300002  FF                 	db	255
  7778                           
  7779                           ;Config register CONFIG2H @ 0x300003
  7780                           ;	unspecified, using default values
  7781                           ;	Brown Out Reset Voltage selection bits
  7782                           ;	BORV = 0x3, unprogrammed default
  7783                           ;	ZCD Disable bit
  7784                           ;	ZCD = 0x1, unprogrammed default
  7785                           ;	PPSLOCK bit One-Way Set Enable bit
  7786                           ;	PPS1WAY = 0x1, unprogrammed default
  7787                           ;	Stack Full/Underflow Reset Enable bit
  7788                           ;	STVREN = 0x1, unprogrammed default
  7789                           ;	Debugger Enable bit
  7790                           ;	DEBUG = 0x1, unprogrammed default
  7791                           ;	Extended Instruction Set Enable bit
  7792                           ;	XINST = 0x1, unprogrammed default
  7793   300003                     	org	3145731
  7794   300003  FF                 	db	255
  7795                           
  7796                           ;Config register CONFIG3L @ 0x300004
  7797                           ;	WDT Period Select bits
  7798                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  7799                           ;	WDT operating mode
  7800                           ;	WDTE = OFF, WDT Disabled
  7801   300004                     	org	3145732
  7802   300004  9F                 	db	159
  7803                           
  7804                           ;Config register CONFIG3H @ 0x300005
  7805                           ;	unspecified, using default values
  7806                           ;	WDT Window Select bits
  7807                           ;	WDTCWS = 0x7, unprogrammed default
  7808                           ;	WDT input clock selector
  7809                           ;	WDTCCS = 0x7, unprogrammed default
  7810   300005                     	org	3145733
  7811   300005  FF                 	db	255
  7812                           
  7813                           ;Config register CONFIG4L @ 0x300006
  7814                           ;	unspecified, using default values
  7815                           ;	Write Protection Block 0
  7816                           ;	WRT0 = 0x1, unprogrammed default
  7817                           ;	Write Protection Block 1
  7818                           ;	WRT1 = 0x1, unprogrammed default
  7819                           ;	Write Protection Block 2
  7820                           ;	WRT2 = 0x1, unprogrammed default
  7821                           ;	Write Protection Block 3
  7822                           ;	WRT3 = 0x1, unprogrammed default
  7823                           ;	Write Protection Block 3
  7824                           ;	WRT4 = 0x1, unprogrammed default
  7825                           ;	Write Protection Block 3
  7826                           ;	WRT5 = 0x1, unprogrammed default
  7827                           ;	Write Protection Block 3
  7828                           ;	WRT6 = 0x1, unprogrammed default
  7829                           ;	Write Protection Block 3
  7830                           ;	WRT7 = 0x1, unprogrammed default
  7831   300006                     	org	3145734
  7832   300006  FF                 	db	255
  7833                           
  7834                           ;Config register CONFIG4H @ 0x300007
  7835                           ;	unspecified, using default values
  7836                           ;	Configuration Register Write Protection bit
  7837                           ;	WRTC = 0x1, unprogrammed default
  7838                           ;	Boot Block Write Protection bit
  7839                           ;	WRTB = 0x1, unprogrammed default
  7840                           ;	Data EEPROM Write Protection bit
  7841                           ;	WRTD = 0x1, unprogrammed default
  7842                           ;	Scanner Enable bit
  7843                           ;	SCANE = 0x1, unprogrammed default
  7844                           ;	Low Voltage Programming Enable bit
  7845                           ;	LVP = 0x1, unprogrammed default
  7846   300007                     	org	3145735
  7847   300007  FF                 	db	255
  7848                           
  7849                           ;Config register CONFIG5L @ 0x300008
  7850                           ;	unspecified, using default values
  7851                           ;	UserNVM Program Memory Code Protection bit
  7852                           ;	CP = 0x1, unprogrammed default
  7853                           ;	DataNVM Memory Code Protection bit
  7854                           ;	CPD = 0x1, unprogrammed default
  7855   300008                     	org	3145736
  7856   300008  FF                 	db	255
  7857                           
  7858                           ;Config register CONFIG5H @ 0x300009
  7859                           ;	unspecified, using default values
  7860   300009                     	org	3145737
  7861   300009  FF                 	db	255
  7862                           
  7863                           ;Config register CONFIG6L @ 0x30000A
  7864                           ;	unspecified, using default values
  7865                           ;	Table Read Protection Block 0
  7866                           ;	EBTR0 = 0x1, unprogrammed default
  7867                           ;	Table Read Protection Block 1
  7868                           ;	EBTR1 = 0x1, unprogrammed default
  7869                           ;	Table Read Protection Block 2
  7870                           ;	EBTR2 = 0x1, unprogrammed default
  7871                           ;	Table Read Protection Block 3
  7872                           ;	EBTR3 = 0x1, unprogrammed default
  7873                           ;	Table Read Protection Block 4
  7874                           ;	EBTR4 = 0x1, unprogrammed default
  7875                           ;	Table Read Protection Block 5
  7876                           ;	EBTR5 = 0x1, unprogrammed default
  7877                           ;	Table Read Protection Block 6
  7878                           ;	EBTR6 = 0x1, unprogrammed default
  7879                           ;	Table Read Protection Block 7
  7880                           ;	EBTR7 = 0x1, unprogrammed default
  7881   30000A                     	org	3145738
  7882   30000A  FF                 	db	255
  7883                           
  7884                           ;Config register CONFIG6H @ 0x30000B
  7885                           ;	unspecified, using default values
  7886                           ;	Boot Block Table Read Protection bit
  7887                           ;	EBTRB = 0x1, unprogrammed default
  7888   30000B                     	org	3145739
  7889   30000B  FF                 	db	255
  7890                           tosu	equ	0xFFF
  7891                           tosh	equ	0xFFE
  7892                           tosl	equ	0xFFD
  7893                           stkptr	equ	0xFFC
  7894                           pclatu	equ	0xFFB
  7895                           pclath	equ	0xFFA
  7896                           pcl	equ	0xFF9
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           indf0	equ	0xFEF
  7904                           postinc0	equ	0xFEE
  7905                           postdec0	equ	0xFED
  7906                           preinc0	equ	0xFEC
  7907                           plusw0	equ	0xFEB
  7908                           fsr0h	equ	0xFEA
  7909                           fsr0l	equ	0xFE9
  7910                           wreg	equ	0xFE8
  7911                           indf1	equ	0xFE7
  7912                           postinc1	equ	0xFE6
  7913                           postdec1	equ	0xFE5
  7914                           preinc1	equ	0xFE4
  7915                           plusw1	equ	0xFE3
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           bsr	equ	0xFE0
  7919                           indf2	equ	0xFDF
  7920                           postinc2	equ	0xFDE
  7921                           postdec2	equ	0xFDD
  7922                           preinc2	equ	0xFDC
  7923                           plusw2	equ	0xFDB
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        126
    BSS         344
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      77
    BANK0           160     62     146
    BANK1           256     22     190
    BANK2           256      0     200
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    motorR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    motorL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    motorL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    return_back@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    return_back@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    RobotMovement@motorR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    RobotMovement@motorL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    moveBack@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    moveBack@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    moveBack@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    moveBack@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    TimedfullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    TimedfullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    TimedfullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    fullSpeedAhead@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    fullSpeedAhead@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    fullSpeedAhead@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRightLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRightLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRightLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeftLong@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeftLong@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeftLong@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnRight@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnRight@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnRight@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnRight@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    turnLeft@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    turnLeft@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    turnLeft@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    turnLeft@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    stop@mR.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mR.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mR	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), 

    stop@mL.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    stop@mL.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    stop@mL	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorL(BANK1[9]), 

    S1028DC_motor$negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.negDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR4H(BITBIGSFRllhllllll[1]), CCPR2H(BITBIGSFRhhlll[1]), 

    S1028DC_motor$posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m.posDutyHighByte	PTR unsigned char  size(2) Largest target is 1
		 -> CCPR3H(BITBIGSFRllhllllll[1]), CCPR1H(BITBIGSFRhhlll[1]), 

    setMotorPWM@m	PTR struct DC_motor size(2) Largest target is 11
		 -> main@motorR(BANK1[9]), main@motorL(BANK1[9]), 


Critical Paths under _main in COMRAM

    _main->_RobotMovement
    _return_back->_turnLeft
    _return_back->_turnRight
    _get_wall_detection->___wmul
    _get_color_code->_get_color_distance
    _get_color_distance->___wmul
    ___lldiv->___lmul
    _fullSpeedAhead->_setMotorPWM
    _color_click_init->_calibrate_black
    _color_writetoaddr->_I2C_2_Master_Write
    _calibrate_white->_color_read_Blue
    _calibrate_white->_color_read_Green
    _calibrate_white->_color_read_Red
    _calibrate_black->___lwdiv
    _color_read_Red->_I2C_2_Master_Read
    _color_read_Green->_I2C_2_Master_Read
    _color_read_Clear->_I2C_2_Master_Read
    _color_read_Blue->_I2C_2_Master_Read
    _I2C_2_Master_Write->_I2C_2_Master_Idle
    _I2C_2_Master_Stop->_I2C_2_Master_Idle
    _I2C_2_Master_Start->_I2C_2_Master_Idle
    _I2C_2_Master_RepStart->_I2C_2_Master_Idle
    _I2C_2_Master_Read->_I2C_2_Master_Idle
    _RobotMovement->_turnLeft
    _RobotMovement->_turnRight
    _turnRightLong->_setMotorPWM
    _turnRight->_setMotorPWM
    _turnLeftLong->_setMotorPWM
    _turnLeft->_setMotorPWM
    _stop->_setMotorPWM
    _moveBack->_setMotorPWM
    _TimedfullSpeedAhead->_setMotorPWM
    _setMotorPWM->___lwdiv
    ___lwdiv->___wmul

Critical Paths under _HighISR in COMRAM

    _HighISR->_set_wall_detection
    _set_wall_detection->i2_color_read_Clear
    i2_color_read_Clear->i2_I2C_2_Master_Read
    i2_I2C_2_Master_Write->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Stop->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Start->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_RepStart->i2_I2C_2_Master_Idle
    i2_I2C_2_Master_Read->i2_I2C_2_Master_Idle

Critical Paths under _main in BANK0

    _main->_get_color_code
    _get_color_code->_get_color_distance

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HighISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HighISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HighISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HighISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HighISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HighISR in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0  122034
                                             57 COMRAM     2     2      0
                                              0 BANK1     22    22      0
                    _Interrupts_init
                      _RobotMovement
                _TimedfullSpeedAhead
                        _Timer0_init
                _add_seconds_to_list
                   _color_click_init
                     _fullSpeedAhead
                     _get_color_code
                          _get_state
                 _get_wall_detection
                    _initDCmotorsPWM
                        _return_back
                               _stop
 ---------------------------------------------------------------------------------
 (1) _return_back                                          6     2      4   43468
                                             45 COMRAM     6     2      4
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (1) _initDCmotorsPWM                                      2     0      2      90
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_wall_detection                                   2     0      2    1372
                                             22 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_state                                            2     0      2       0
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _get_color_code                                      48    46      2    8164
                                             50 COMRAM     4     2      2
                                             18 BANK0     44    44      0
                            ___lldiv
                             ___lmul
                             ___wmul
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                 _get_color_distance
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _get_color_distance                                  46    22     24    2632
                                             22 COMRAM    28     4     24
                                              0 BANK0     18    18      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     816
                                             16 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             28 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _fullSpeedAhead                                       4     0      4    5427
                                             35 COMRAM     4     0      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _color_click_init                                     1     1      0    5490
                                             37 COMRAM     1     1      0
                  _I2C_2_Master_Init
                    _calibrate_black
                    _calibrate_white
                  _color_writetoaddr
 ---------------------------------------------------------------------------------
 (2) _color_writetoaddr                                    2     1      1     363
                                             18 COMRAM     2     1      1
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _calibrate_white                                      2     2      0    2010
                                             27 COMRAM     2     2      0
                    _color_read_Blue
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _calibrate_black                                      8     8      0    3117
                                             29 COMRAM     8     8      0
                            ___lwdiv
                    _color_read_Blue
                   _color_read_Clear
                   _color_read_Green
                     _color_read_Red
                      _set_led_color
 ---------------------------------------------------------------------------------
 (2) _set_led_color                                        2     0      2    1518
                                             16 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _color_read_Red                                       7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Green                                     7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _color_read_Clear                                     7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (2) _color_read_Blue                                      7     5      2     164
                                             20 COMRAM     7     5      2
                  _I2C_2_Master_Read
              _I2C_2_Master_RepStart
                 _I2C_2_Master_Start
                  _I2C_2_Master_Stop
                 _I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Write                                   1     1      0      31
                                             17 COMRAM     1     1      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Stop                                    0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Start                                   0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_RepStart                                0     0      0       0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_2_Master_Read                                    3     3      0      65
                                             17 COMRAM     3     3      0
                  _I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_2_Master_Idle                                    1     1      0       0
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _I2C_2_Master_Init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _add_seconds_to_list                                  2     2      0       0
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RobotMovement                                       12     6      6   44407
                                             45 COMRAM    12     6      6
                _TimedfullSpeedAhead
                           _moveBack
                               _stop
                           _turnLeft
                       _turnLeftLong
                          _turnRight
                      _turnRightLong
 ---------------------------------------------------------------------------------
 (2) _turnRightLong                                        8     4      4    5873
                                             35 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnRight                                           10     6      4    6481
                                             35 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeftLong                                         8     4      4    5873
                                             35 COMRAM     8     4      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _turnLeft                                            10     6      4    6124
                                             35 COMRAM    10     6      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (1) _stop                                                 6     2      4    6085
                                             35 COMRAM     6     2      4
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _moveBack                                             6     0      6    6178
                                             35 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _TimedfullSpeedAhead                                  6     0      6    6178
                                             35 COMRAM     6     0      6
                        _setMotorPWM
 ---------------------------------------------------------------------------------
 (2) _setMotorPWM                                          6     4      2    4881
                                             29 COMRAM     6     4      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1372
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     841
                                             22 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Interrupts_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                              0     0      0     431
                  _increment_seconds
                 _set_wall_detection
 ---------------------------------------------------------------------------------
 (7) _set_wall_detection                                   5     3      2     431
                                             11 COMRAM     5     3      2
                 i2_color_read_Clear
                    i2_set_led_color
 ---------------------------------------------------------------------------------
 (8) i2_set_led_color                                      2     0      2     144
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) i2_color_read_Clear                                   7     5      2     113
                                              4 COMRAM     7     5      2
                i2_I2C_2_Master_Read
            i2_I2C_2_Master_RepStart
               i2_I2C_2_Master_Start
                i2_I2C_2_Master_Stop
               i2_I2C_2_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Write                                 1     1      0      22
                                              1 COMRAM     1     1      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Stop                                  0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Start                                 0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_RepStart                              0     0      0       0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (9) i2_I2C_2_Master_Read                                  3     3      0      45
                                              1 COMRAM     3     3      0
                i2_I2C_2_Master_Idle
 ---------------------------------------------------------------------------------
 (10) i2_I2C_2_Master_Idle                                 1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _increment_seconds                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Interrupts_init
   _RobotMovement
     _TimedfullSpeedAhead
       _setMotorPWM
         ___lwdiv
           ___wmul (ARG)
         ___wmul
     _moveBack
       _setMotorPWM
     _stop
       _setMotorPWM
     _turnLeft
       _setMotorPWM
     _turnLeftLong
       _setMotorPWM
     _turnRight
       _setMotorPWM
     _turnRightLong
       _setMotorPWM
   _TimedfullSpeedAhead
   _Timer0_init
   _add_seconds_to_list
   _color_click_init
     _I2C_2_Master_Init
     _calibrate_black
       ___lwdiv
       _color_read_Blue
         _I2C_2_Master_Read
           _I2C_2_Master_Idle
         _I2C_2_Master_RepStart
           _I2C_2_Master_Idle
         _I2C_2_Master_Start
           _I2C_2_Master_Idle
         _I2C_2_Master_Stop
           _I2C_2_Master_Idle
         _I2C_2_Master_Write
           _I2C_2_Master_Idle
       _color_read_Clear
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Green
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _color_read_Red
         _I2C_2_Master_Read
         _I2C_2_Master_RepStart
         _I2C_2_Master_Start
         _I2C_2_Master_Stop
         _I2C_2_Master_Write
       _set_led_color
     _calibrate_white
       _color_read_Blue
       _color_read_Green
       _color_read_Red
       _set_led_color
     _color_writetoaddr
       _I2C_2_Master_Start
       _I2C_2_Master_Stop
       _I2C_2_Master_Write
   _fullSpeedAhead
     _setMotorPWM
   _get_color_code
     ___lldiv
       ___lmul (ARG)
     ___lmul
     ___wmul
     _color_read_Blue
     _color_read_Green
     _color_read_Red
     _get_color_distance
       ___wmul
     _set_led_color
   _get_state
   _get_wall_detection
     ___wmul
   _initDCmotorsPWM
   _return_back
     _TimedfullSpeedAhead
     _moveBack
     _stop
     _turnLeft
     _turnLeftLong
     _turnRight
     _turnRightLong
   _stop

 _HighISR (ROOT)
   _increment_seconds
   _set_wall_detection
     i2_color_read_Clear
       i2_I2C_2_Master_Read
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_RepStart
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Start
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Stop
         i2_I2C_2_Master_Idle
       i2_I2C_2_Master_Write
         i2_I2C_2_Master_Idle
     i2_set_led_color

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      61        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      BE       7       74.2%
BITBANK13           EA      0       0      30        0.0%
BANK13              EA      0       0      31        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3E      92       5       91.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      4D       1       81.9%
BITBIGSFRllhllh     52      0       0      44        0.0%
BITBIGSFRllhlll     46      0       0      46        0.0%
BITBIGSFRlllllh     35      0       0      55        0.0%
BITBIGSFRllllll     2D      0       0      59        0.0%
BITBIGSFRllhlll     20      0       0      48        0.0%
BITBIGSFRlllhhh     1E      0       0      50        0.0%
BITBIGSFRhhhlhh     1B      0       0      33        0.0%
BITBIGSFRhhlll      17      0       0      38        0.0%
BITBIGSFRhhhll      13      0       0      34        0.0%
BITBIGSFRlllhhl     11      0       0      51        0.0%
BITBIGSFRhhlhh       E      0       0      35        0.0%
BITBIGSFRhhhh        D      0       0      32        0.0%
BITBIGSFRlllhhh      C      0       0      49        0.0%
BITBIGSFRlllllh      B      0       0      58        0.0%
BITBIGSFRlllllh      7      0       0      56        0.0%
BITBIGSFRhl          6      0       0      39        0.0%
BITBIGSFRllllhl      5      0       0      54        0.0%
BITBIGSFRllllhh      3      0       0      53        0.0%
BITBIGSFRllhlll      2      0       0      45        0.0%
BITBIGSFRhhllh       2      0       0      37        0.0%
BITBIGSFRlllllh      1      0       0      57        0.0%
BITBIGSFRllhlll      1      0       0      47        0.0%
BITBIGSFRhhlhl       1      0       0      36        0.0%
BITBIGSFRlllhl       1      0       0      52        0.0%
BITBIGSFRllhlhh      1      0       0      42        0.0%
BITBIGSFRllhlhl      1      0       0      43        0.0%
BITBIGSFRllhh        1      0       0      41        0.0%
BITBIGSFRlhl         1      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     265      60        0.0%
DATA                 0      0     265       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 14 12:11:10 2022

                 _color_read_Red 1CDA               RobotMovement@color 002E  
                _color_read_Blue 1DCA                               l71 14DC  
                             l81 1520                               l75 14F8  
                             l92 1E18                               l77 152E  
                             l86 213E                               l78 150E  
                             l95 1D78                               l89 1D28  
                             l98 1DC8              ___wmul@multiplicand 0013  
               _color_read_Clear 1D7A                 ?_calibrate_black 0001  
               _color_read_Green 1D2A              RobotMovement@motorL 0030  
            RobotMovement@motorR 0032                ??_Interrupts_init 0011  
                            l120 1F84                              l113 0EA2  
                            l122 1F86                              l116 1F58  
                            l117 1F5A                              l118 1F6E  
                            l222 19FA                              l119 1F70  
                            l151 1828                              l143 098C  
                            l232 1EB2                              l241 1168  
                            l313 1F42                              l145 0994  
                            l321 0B4A                              l250 12B8  
                            l306 05E6                              l148 13F6  
                            l316 0B64                              l229 100E  
                            l309 218C                              l157 1C24  
                            l511 18CC                              l264 1656  
                            l504 18BC                              l273 1AE2  
                            l257 177E                              l329 0B98  
                            l362 20D0                              l371 2196  
                            l267 1C7E                              l356 20A8  
                            l293 02CE                              l365 21A0  
                            l294 0310                              l374 216A  
                            l279 1A6E                              l359 20AA  
                            l368 21AA                              l377 200C  
                            l298 0452                              l474 215E  
                            l458 0D2C                              l299 0494  
                            l396 2176                              l477 211E  
                            l488 1BB0                              l489 1BC0  
                            l975 1B56                              l968 1B4E  
                            _RGB 00E6                 ?_calibrate_white 0001  
                            wreg 000FE8                             l4000 151C  
                           l4010 0628                             l4002 05E8  
                           l4020 068C                             l4012 0650  
                           l4004 05F4                             l4100 19EE  
                           l4110 1C4E                             l4030 073E  
                           l4022 0694                             l4014 065C  
                           l4006 060A                             l4102 19F8  
                           l4200 0512                             l4120 00D2  
                           l4112 1C5A                             l4104 1C26  
                           l4040 07FC                             l4032 074E  
                           l4024 06A0                             l4016 0672  
                           l4008 061C                             l4210 055C  
                           l4202 0516                             l4130 0128  
                           l4122 00E4                             l4114 1C66  
                           l4106 1C2E                             l4050 08DA  
                           l4042 081C                             l4034 076E  
                           l4026 06C0                             l4018 0684  
                           l4220 058C                             l4212 0570  
                           l4204 052A                             l4132 013C  
                           l4124 00F8                             l3500 2162  
                           l4116 1C72                             l4108 1C3E  
                           l4060 091A                             l4052 08E4  
                           l4044 0830                             l4036 0782  
                           l4028 06D4                             l4300 0BBE  
                           l4222 0590                             l4206 053E  
                           l4150 01A8                             l4134 0156  
                           l4126 0112                             l4118 00A2  
                           l3510 21A6                             l3502 2166  
                           l4062 094A                             l4046 089A  
                           l4038 07EC                             l4230 2184  
                           l4070 1BC2                             l4310 0BDE  
                           l4302 0BC2                             l3600 0FCE  
                           l4224 05AC                             l4208 0558  
                           l4160 0252                             l4152 01AC  
                           l4144 0176                             l4136 015A  
                           l4128 0116                             l4232 1EFC  
                           l3520 2008                             l3512 1FCE  
                           l3504 218E                             l4064 0962  
                           l4048 08AA                             l4072 1BD4  
                           l4240 099A                             l4320 0BFA  
                           l4312 0BE2                             l4304 0BC6  
                           l4218 0578                             l4226 05B4  
                           l4170 032A                             l4162 0286  
                           l4146 018A                             l4138 016E  
                           l4154 01C8                             l4234 1F18  
                           l3610 2094                             l3602 2080  
                           l3522 200A                             l3514 1FD2  
                           l3506 2192                             l4066 0972  
                           l4058 08EC                             l4074 1BE6  
                           l4090 19D4                             l4082 196C  
                           l4250 0A40                             l4242 09C0  
                           l4330 0C50                             l4322 0C02  
                           l4314 0BE6                             l4306 0BCE  
                           l3540 1B0E                             l3532 1AE4  
                           l4228 05CA                             l4180 03D6  
                           l4172 032E                             l4164 028E  
                           l4156 01DC                             l4148 01A4  
                           l4236 1F3E                             l3612 2096  
                           l3604 208A                             l3516 1FDA  
                           l3508 21A2                             l3620 17A2  
                           l4068 0976                             l4092 19D6  
                           l4084 197C                             l4260 0AF6  
                           l4252 0A58                             l4244 09D8  
                           l4340 0CA4                             l4332 0C64  
                           l4324 0C1A                             l4316 0BEA  
                           l4308 0BD6                             l3550 1B42  
                           l3542 1B1C                             l3534 1AEC  
                           l3526 20FA                             l3710 1048  
                           l3702 1020                             l4190 04AE  
                           l4182 040A                             l4166 02B4  
                           l4158 0220                             l4174 034C  
                           l3606 2090                             l3518 1FE2  
                           l3630 180A                             l3622 17B4  
                           l3614 2122                             l4078 1BF2  
                           l4094 19E0                             l4086 19A6  
                           l4270 0B7E                             l4262 0B0E  
                           l4254 0A80                             l4246 0A00  
                           l4238 0996                             l4342 0CC0  
                           l4334 0C68                             l4326 0C2E  
                           l4318 0BF2                             l3552 1B48  
                           l3544 1B22                             l3536 1AFE  
                           l3528 2116                             l3720 1090  
                           l3712 1054                             l3800 1298  
                           l4192 04B2                             l4184 0412  
                           l4176 0360                             l4168 02F6  
                           l4280 215A                             l3608 2092  
                           l3560 1DCA                             l3640 12EE  
                           l3632 181C                             l3624 17C0  
                           l3616 1780                             l4096 19E2  
                           l4088 19CA                             l4272 0B90  
                           l4264 0B2A                             l4256 0A98  
                           l4248 0A18                             l4344 0CD4  
                           l4336 0C7C                             l4328 0C3A  
                           l4274 216C                             l3546 1B38  
                           l3538 1B06                             l3730 10BC  
                           l3722 1098                             l3714 1060  
                           l3810 1660                             l3802 129C  
                           l4186 0438                             l4178 03A4  
                           l4194 04D0                             l4282 215C  
                           l3562 1E10                             l3554 1CDA  
                           l3650 1356                             l3642 12FA  
                           l3634 12BA                             l3626 17E8  
                           l3618 178C                             l4098 19EC  
                           l4258 0AC8                             l4266 0B4A  
                           l4338 0C88                             l4346 0D00  
                           l4290 0BA6                             l3548 1B40  
                           l3900 1AB4                             l3740 110C  
                           l3732 10DC                             l3724 10B4  
                           l3716 106C                             l3708 1028  
                           l3820 16B0                             l3812 1680  
                           l3804 1658                             l4196 04E4  
                           l4188 047A                             l4276 2140  
                           l3492 20AA                             l3572 1D7A  
                           l3556 1D20                             l3580 1F52  
                           l3660 13BE                             l3652 1378  
                           l3644 1322                             l3636 12C6  
                           l3628 17F4                             l4268 0B5E  
                           l4348 0D14                             l4292 0BB2  
                           l4284 0B9A                             l3590 0F14  
                           l3902 1AC0                             l3910 1A28  
                           l3742 1124                             l3734 10E8  
                           l3718 1078                             l3822 16C8  
                           l3814 168C                             l3750 116A  
                           l4198 04F8                             l4278 2148  
                           l3494 20BA                             l3574 1DC0  
                           l3566 1D2A                             l3582 1F68  
                           l3662 13DA                             l3654 1384  
                           l3646 132E                             l3638 12DC  
                           l3670 0D8A                             l4294 0BB2  
                           l4286 0B9E                             l3592 0F28  
                           l3904 1ACC                             l3912 1A34  
                           l3744 112C                             l3736 10F4  
                           l3840 1738                             l3832 16F4  
                           l3824 16D0                             l3816 1698  
                           l3496 2198                             l3568 1D70  
                           l3584 1F7E                             l3656 1390  
                           l3648 1344                             l3920 1B58  
                           l3680 0E26                             l3672 0DB0  
                           l3664 0D34                             l4296 0BB6  
                           l4288 0BA2                             l3594 0F2C  
                           l3586 0EA4                             l3914 1A40  
                           l3906 19FC                             l3690 1E82  
                           l3746 1148                             l3738 1100  
                           l3842 1744                             l3834 1714  
                           l3826 16EC                             l3818 16A4  
                           l3770 11BE                             l3762 117A  
                           l3498 219C                             l3578 1F44  
                           l3658 13A6                             l3930 182A  
                           l3922 1B68                             l3682 0E3E  
                           l3674 0DCC                             l3666 0D52  
                           l4298 0BB8                             l3596 0F6E  
                           l3588 0EC0                             l3916 1A4C  
                           l3908 1A08                             l3692 1E8E  
                           l3748 114C                             l3844 175A  
                           l3836 1720                             l3772 11CA  
                           l3764 119A                             l3756 1172  
                           l3860 1570                             l3940 1872  
                           l3932 183A                             l3924 1B76  
                           l3684 0E46                             l3676 0DE4  
                           l3668 0D70                             l3598 0F8A  
                           l3918 1A58                             l3694 1E9A  
                           l3846 1762                             l3838 172C  
                           l3790 1246                             l3774 11E2  
                           l3766 11A6                             l3870 15C4  
                           l3862 157C                             l3854 1538  
                           l3950 18B6                             l3942 187C  
                           l3934 1850                             l3926 1B86  
                           l3678 0E0A                             l3688 1E6A  
                           l3696 1010                             l3792 1252  
                           l3784 120E                             l3776 11EA  
                           l3768 11B2                             l3880 15F8  
                           l3864 1588                             l3856 1558  
                           l3848 1530                             l3960 1420  
                           l3952 13F8                             l3944 189A  
                           l3936 1858                             l3928 1B90  
                           l3794 125E                             l3786 122E  
                           l3778 1206                             l3890 163A  
                           l3882 1604                             l3866 15A0  
                           l3858 1564                             l3970 1442  
                           l3962 142A                             l3954 13FC  
                           l3946 18AA                             l3938 1864  
                           l3892 1A70                             l3796 1274  
                           l3788 123A                             l3884 1610  
                           l3876 15CC                             l3868 15A8  
                           l3980 149C                             l3972 1454  
                           l3964 142C                             l3956 1406  
                           l3948 18AC                             l3894 1A7C  
                           l3798 127C                             l3886 161C  
                           l3878 15EC                             l3990 14D8  
                           l3982 14AE                             l3974 1466  
                           l3966 142E                             l3958 1416  
                           l3896 1A9C                             l3888 1632  
                           l3992 14DA                             l3984 14C0  
                           l3976 1478                             l3968 1430  
                           l3898 1AA8                             l3994 14EA  
                           l3986 14D2                             l3978 148A  
                           l3988 14D4                             l3998 150A  
                           u3000 15C4                             u3001 15C0  
                           u3010 1656                             u3011 1652  
                           u3020 1AE2                             u3021 1ADE  
                           u3101 144C                             u3030 1A6E  
                           u3031 1A6A                             u3111 145E  
                           u3200 1506                             u3040 1B76  
                           u3201 1502                             u3121 1470  
                           u3041 1B72                             u3210 151C  
                           u3050 1BB0                             u3211 1518  
                           u3131 1482                             u3051 1BAC  
                           u3220 152E                             u3060 1850  
                           u3221 152A                             u3141 1494  
                           u3061 184C                             u3301 0936  
                           u3070 1872                             u3310 0962  
                           u3230 06C0                             u3151 14A6  
                           u3071 186E                             u3311 095E  
                           u3231 06BC                             u3400 01C8  
                           u3080 189A                             u3320 098C  
                           u3240 076E                             u3401 01C4  
                           u3161 14B8                             u3081 1896  
                           u3321 0988                             u3241 076A  
                           u3410 01DC                             u3250 081C  
                           u3330 1BD4                             _T2PR 000FBC  
                     _Black_rule 016C                             u3411 01D8  
                           u4107 17FE                             u3171 14CA  
                           u3091 143A                             u3251 0818  
                           u3331 1BD0                             u4027 0C0C  
                           u3500 052A                             u3420 0252  
                           u3180 14EA                             u3340 1BE6  
                           u3501 0526                             u3421 024E  
                           u4117 12D0                             u3181 14E6  
                           u3261 08B4                             u3341 1BE2  
                           u4037 0B00                             u3510 0570  
                           u3430 02B4                             u3190 14F8  
                           u3350 1C1E                             u4207 16BA  
                           u3511 056C                             u3431 02B0  
                           u4127 1304                             u3191 14F4  
                           u3271 08C6                             u4047 05FE  
                           u3351 1C18                             u3520 05AC  
                           u3440 02F6                             u3360 1C20  
                           u3600 0B7E                             u4217 174E  
                           u3521 05A8                             u3441 02F2  
                           u4137 1338                             u3281 0912  
                           u4057 0632                             u3601 0B7A  
                           u2810 1AFE                             u3530 05CA  
                           u3450 0360                             u3370 00E4  
                           u3610 0B90                             u2811 1AFA  
                           u4227 1082                             u3531 05C6  
                           u3451 035C                             u3371 00E0  
                           u4147 136C                             u3291 0924  
                           u4067 0666                             u3611 0B8C  
                           u2820 1B1C                             u3460 03D6  
                           u3380 0128                             u3540 1F18  
                           u2900 0DB0                             u3620 0C50  
                           u2821 1B18                             u4237 1116  
                           u3461 03D2                             u3381 0124  
                           u3541 1F14                             u4157 139A  
                           u4077 140C                             u2901 0DAC  
                           u3621 0C4C                             u2830 1B38  
                           u3470 0438                             u3390 016E  
                           u2910 0E0A                             u3550 09C0  
                           u3630 0C64                             u2831 1B34  
                           u4247 1EA4                             u4167 1592  
                           u3471 0434                             u3391 016A  
                           u4087 1796                             u2911 0E06  
                           u3551 09BC                             u3631 0C60  
                           u2920 10B4                             u3480 047A  
                           u2808 1FF8                             u2840 1F52  
                           u3560 0A00                             u3640 0CD4  
                           u2921 10B0                             u4177 1626  
                           u3481 0476                             u2841 1F4E  
                           u4097 17CA                             u3561 09FC  
                           u3641 0CD0                             u2930 1148  
                           u3490 04E4                             u2770 20BA  
                           u2850 1F68                             u3570 0A40  
                           u3650 0D14                             u2931 1144  
                           u4187 11D4                             u3491 04E0  
                           u2771 20B6                             u2851 1F64  
                           u3571 0A3C                             u3651 0D10  
                           u2940 1168                             u2780 20D0  
                           u2860 1F7E                             u3580 0A80  
                           u2941 1164                             u4197 1268  
                           u2781 20CC                             u2861 1F7A  
                           u3581 0A7C                             u2870 0EC0  
                           u2950 1206                             u2790 1FF6  
                           u3590 0AC8                             u2871 0EBC  
                           u2951 1202                             u2791 1FEE  
                           u3591 0AC4                             u2880 0F8A  
                           u2960 1298                             u2881 0F86  
                           u2961 1294                             u2970 12B8  
                           u2890 0D52                             u2971 12B4  
                           u2891 0D4E                             u2980 16EC  
                           u2981 16E8                             u2990 177E  
                           u2991 177A                             i2l98 1E68  
                           _main 0B9A                             fsr2h 000FDA  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004E  
                           _stop 1E6A                             prodh 000FF4  
                           prodl 000FF3                             start 009E  
         __end_of_color_read_Red 1D2A                  __end_of_HighISR 009E  
                   ___param_bank 000000       __end_ofi2_color_read_Clear 1E6A  
             _get_color_code$463 00C6               _get_color_code$464 00CA  
             _get_color_code$465 00CE                            ?_main 0001  
                __end_of___lldiv 18CE                            ?_stop 0024  
            _add_seconds_to_list 1EFC                      _Black_setup 0060  
                __end_of___lwdiv 1B58                            i2l120 1FC8  
                          i2l122 1FCA                            i2l116 1F9C  
                          i2l117 1F9E                            i2l118 1FB2  
                          i2l119 1FB4                            i2l410 009A  
                          i2l163 1CD8                            i2l282 21D4  
                          i2l362 20F8                            i2l371 21B4  
                          i2l365 21BE                            i2l374 2182  
                          i2l359 20D2                            i2l368 21C8  
                          i2l377 204E                            _TMR0H 000FD4  
                          _TMR0L 000FD3              ___lmul@multiplicand 0015  
     __end_of_I2C_2_Master_Start 21A2       __end_of_I2C_2_Master_Write 216C  
             _get_color_distance 0D34                            _index 0040  
                          _state 003E                            tablat 000FF5  
                          plusw0 000FEB                            plusw1 000FE3  
                          plusw2 000FDB              ?_get_color_distance 0017  
                          ttemp5 004F                            ttemp6 0052  
                          ttemp7 0056                            status 000FD8  
                          wtemp8 004F             ?_add_seconds_to_list 0001  
                     _Green_rule 0090          __end_of_color_read_Blue 1E1A  
          _I2C_2_Master_RepStart 21A2                  ?_color_read_Red 0015  
                __initialization 18CE                     __end_of_main 0D34  
                i2_set_led_color 1F88                     __end_of_stop 1EB4  
                   _turnLeftLong 1658             i2set_led_color@color 0001  
           ??_get_color_distance 002F                           ??_main 003A  
                         ??_stop 0028                    __activetblptr 000002  
            _get_color_code$2463 00BA                     ?_setMotorPWM 001E  
                         _CCPR1H 000FAA                           _CCPR2H 000FA6  
                         _CCPR3H 000F25                           _CCPR4H 000F21  
                         _RE2PPS 000E74                           _RD5PPS 000E6F  
                         _RC7PPS 000E69                           _RD6PPS 000E70  
                         _RE4PPS 000E76                           i2l3200 008E  
                         i2l3202 0092                           i2l3204 0096  
                         i2l2440 21BA                           i2l2442 21C0  
                         i2l2450 217A                           i2l2460 2024  
                         i2l2444 21C4                           i2l2452 217E  
                         i2l3180 000A                           i2l2462 204A  
                         i2l2454 2010                           i2l2438 21B6  
                         i2l2446 21AC                           i2l3190 0042  
                         i2l3182 001A                           i2l1840 21D0  
                         i2l2464 204C                           i2l2456 2014  
                         i2l2448 21B0                           i2l3192 0056  
                         i2l3184 0022                           i2l2386 20D2  
                         i2l2458 201C                           i2l3194 0066  
                         i2l3186 0036                           i2l2388 20E2  
                         i2l2820 1E60                           i2l3196 007A  
                         i2l3188 003A                           i2l2830 1FC2  
                         i2l3198 0086                           i2l2824 1F88  
                         i2l2818 1E1A                           i2l2826 1F96  
                         i2l2828 1FAC                           i2l2970 1C92  
                         i2l2962 1C80                           _RG6PPS 000E88  
                         i2l2972 1CB4                           i2l2974 1CC0  
                         i2l2976 1CCC                           i2l2968 1C80  
                      ??_HighISR 0011         __end_of_color_click_init 1530  
          ??_add_seconds_to_list 0011                   RobotMovement@i 0036  
          __end_of_RobotMovement 05E8                 ??_get_color_code 0035  
                  ??_Timer0_init 0011                     _CCPTMRS0bits 000FAD  
                         ___lmul 1B58         get_color_distance@color1 0017  
       get_color_distance@color2 0023                           ___wmul 20FA  
                         _clear1 0046                           _clear2 0044  
                      ??___lldiv 0025                        ??___lwdiv 001B  
                    _Color_rules 0100                           clear_0 1934  
                         clear_1 1940                           clear_2 194C  
                         clear_3 1958                           isa$std 000001  
               __end_of_moveBack 1A70            calibrate_black@clear1 0020  
          calibrate_black@clear2 0022                     __pdataCOMRAM 0048  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                     ?_return_back 002E  
                 _Lightblue_rule 0184                       _White_rule 0178  
                         stop@mL 0024                           stop@mR 0026  
              ??_initDCmotorsPWM 0013                 __end_of_turnLeft 116A  
          __end_of_set_led_color 1F88                       __accesstop 0060  
        __end_of__initialization 195E         __end_of_color_read_Clear 1DCA  
       __end_of_color_read_Green 1D7A           ?_I2C_2_Master_RepStart 0001  
        __end_ofi2_set_led_color 1FCC                    ___rparam_used 000001  
               ?_color_read_Blue 0015                  _Interrupts_init 216C  
                 __pcstackCOMRAM 0001                     __pidataBANK0 1EB4  
                   __pidataBANK1 2050           i2I2C_2_Master_Read@ack 0003  
            __end_of_Timer0_init 2160           i2I2C_2_Master_Read@tmp 0004  
                     __pbssBANK0 00E6                       __pbssBANK1 0100  
                     __pbssBANK2 0200          i2_I2C_2_Master_RepStart 21C0  
                  _turnRightLong 1530                _color_writetoaddr 2120  
                   _T2CLKCONbits 000FBF               ?_color_writetoaddr 0013  
                        ?___lmul 0011                          ?___wmul 0011  
                 main@color_code 01A8                   ___lmul@product 0019  
                get_color_code@i 00D8              ??_color_writetoaddr 0014  
          i2color_read_Clear@tmp 000A                return_back@motorL 002E  
              return_back@motorR 0030               i2_color_read_Clear 1E1A  
        get_color_code@min_index 00D4                          _SSP2ADD 000ED6  
                        _SSP2BUF 000ED5          get_color_code@min_value 00D2  
                    _Orange_rule 0190          __end_of_Interrupts_init 2178  
         color_writetoaddr@value 0013                 ??_color_read_Red 0017  
            ?i2_color_read_Clear 0005       __end_of_get_wall_detection 1C26  
                        _HighISR 0008       __end_of_set_wall_detection 1CDA  
      __end_of_color_writetoaddr 2140                 ?i2_set_led_color 0001  
                 ?_turnRightLong 0024               _I2C_2_Master_Start 2198  
            i2_I2C_2_Master_Idle 20D2               _I2C_2_Master_Write 2160  
                      ?_moveBack 0024              i2_I2C_2_Master_Read 200E  
                        __Hparam 0000              i2_I2C_2_Master_Stop 21AC  
                        __Lparam 0000                color_read_Red@tmp 001A  
                    _Timer0_init 2140                __end_of_get_state 218E  
                        ___lldiv 182A              ?_I2C_2_Master_Start 0001  
                        ___lwdiv 1AE4              ?_I2C_2_Master_Write 0001  
                        __pcinit 18CE             ??i2_color_read_Clear 0007  
                        __ramtop 0E00                        ?_turnLeft 0024  
                        __ptext0 0B9A                          __ptext1 0996  
                        __ptext2 196C                          __ptext3 1BC2  
                        __ptext4 2184                          __ptext5 05E8  
                        __ptext6 0D34                          __ptext7 1B58  
                        __ptext8 182A                          __ptext9 1C26  
           ?i2_I2C_2_Master_Idle 0001                        _T2CONbits 000FBD  
           ?i2_I2C_2_Master_Read 0001             ?i2_I2C_2_Master_Stop 0001  
                        _seconds 0042                        _T2HLTbits 000FBE  
           ??_I2C_2_Master_Start 0012             ??_I2C_2_Master_Write 0012  
           end_of_initialization 195E        ??i2_I2C_2_Master_RepStart 0002  
                  __Lmediumconst 0000                ?_color_click_init 0001  
                     ??_moveBack 002A                  ___lldiv@divisor 0021  
             ??_color_click_init 0026                  ___lldiv@counter 0029  
                        postdec1 000FE5                          postdec2 000FDD  
                        postinc0 000FEE                          postinc2 000FDE  
                    _White_setup 006C                  _initDCmotorsPWM 196C  
                     ??_turnLeft 0028                        _PORTFbits 000F8E  
             setMotorPWM@negDuty 0023            ??i2_I2C_2_Master_Idle 0001  
          ??i2_I2C_2_Master_Read 0002                __end_of_turnRight 12BA  
          ??i2_I2C_2_Master_Stop 0002                      _Yellow_rule 0078  
                      _TRISAbits 000F81               setMotorPWM@posDuty 0022  
                      _TRISCbits 000F83                        _TRISDbits 000F84  
                      _TRISEbits 000F85                        _TRISFbits 000F86  
                      _TRISGbits 000F87             _calibrate_black$2464 0024  
    __end_of_add_seconds_to_list 1F44                 fullSpeedAhead@mL 0024  
               fullSpeedAhead@mR 0026         color_writetoaddr@address 0014  
     get_color_distance@B_offset 00B8          ??_I2C_2_Master_RepStart 0012  
               ?_Interrupts_init 0001                  ??_turnRightLong 0028  
                    _CCP1CONbits 000FAB       get_color_distance@G_offset 00B6  
              _increment_seconds 21D0                ?_color_read_Clear 0015  
                    _CCP2CONbits 000FA7                ??_calibrate_black 001E  
              ?_color_read_Green 0015                      _CCP3CONbits 000F26  
                    _CCP4CONbits 000F22                       main@motorL 01AC  
                     main@motorR 01B5                ??_calibrate_white 001C  
             ?_increment_seconds 0001               ??_color_read_Clear 0017  
             ??_color_read_Green 0017                   _fullSpeedAhead 1C26  
     get_color_distance@R_offset 00B4                        _Blue_rule 0084  
            ??_increment_seconds 0001                   __end_of___lmul 1BC2  
                 __end_of___wmul 2120                    __pidataCOMRAM 21CA  
            color_read_Clear@tmp 001A              start_initialization 18CE  
            _TimedfullSpeedAhead 1A70                 _incr_sec_counter 003C  
      __end_of_increment_seconds 21D6                        _Pink_rule 019C  
            color_read_Green@tmp 001A          __end_of_initDCmotorsPWM 19FC  
           ?_TimedfullSpeedAhead 0024           __end_of_fullSpeedAhead 1C80  
                       ??___lmul 0019                         ??___wmul 0015  
                    __pdataBANK0 0060                      __pdataBANK1 0178  
  i2I2C_2_Master_Write@data_byte 0002     __end_ofi2_I2C_2_Master_Start 21C0  
   __end_ofi2_I2C_2_Master_Write 2184           _get_color_distance$421 00A8  
         _get_color_distance$423 00AC           _get_color_distance$425 00B0  
                    __pbssCOMRAM 003C                    __pcstackBANK0 00A8  
                  __pcstackBANK1 01A8              get_color_code@value 00D6  
                       ?_HighISR 0001                    _RobotMovement 00A2  
               ___lwdiv@dividend 0017            ??_TimedfullSpeedAhead 002A  
                   ?_Timer0_init 0001                  ?_fullSpeedAhead 0024  
                     moveBack@mL 0024                       moveBack@mR 0026  
                      __pintcode 0008                         ?___lldiv 001D  
                       ?___lwdiv 0017               _get_wall_detection 1BC2  
             _set_wall_detection 1C80                    ?_turnLeftLong 0024  
                   moveBack@time 0028                        _get_state 2184  
           I2C_2_Master_Read@ack 0013             I2C_2_Master_Read@tmp 0014  
          TimedfullSpeedAhead@mL 0024            TimedfullSpeedAhead@mR 0026  
            ?_get_wall_detection 0017              ?_set_wall_detection 000C  
    get_color_code@NormalizedRGB 00DA                _I2C_2_Master_Idle 20AA  
              _I2C_2_Master_Init 2080                _I2C_2_Master_Read 1FCC  
              _I2C_2_Master_Stop 218E               ?_I2C_2_Master_Idle 0001  
             ?_I2C_2_Master_Init 0001               ?_I2C_2_Master_Read 0001  
                  ??_setMotorPWM 0020               ?_I2C_2_Master_Stop 0001  
               ___lwdiv@quotient 001C         initDCmotorsPWM@PWMperiod 0011  
                turnRightLong@mL 0024                  turnRightLong@mR 0026  
                 turnLeftLong@mL 0024                   turnLeftLong@mR 0026  
            ??_I2C_2_Master_Idle 0011              ??_I2C_2_Master_Init 0011  
            ??_I2C_2_Master_Read 0012                   ___wmul@product 0015  
                       _LATAbits 000F79                    _set_led_color 1F44  
            ??_I2C_2_Master_Stop 0012                         _LATCbits 000F7B  
                       _LATEbits 000F7D                         _LATFbits 000F7E  
                       _LATGbits 000F7F             ??_get_wall_detection 0019  
                       _PIE0bits 000E29                   ?_RobotMovement 002E  
                       _PIE2bits 000E2B             ??_set_wall_detection 000E  
                       i2u206_40 1C92                         i2u206_41 1C8E  
                    turnRight@mL 0024                         i2u207_40 1CB4  
                       i2u207_41 1CB0                      turnRight@mR 0026  
                       i2u153_40 2038                         i2u233_40 001A  
                       i2u153_41 2030                         i2u233_41 0016  
                       i2u146_40 20E2                         i2u234_40 0036  
                       i2u146_41 20DE                         i2u234_41 0032  
                       i2u147_40 20F8                         i2u154_48 203A  
                       i2u235_40 0056                         i2u147_41 20F4  
                       i2u235_41 0052                         i2u236_40 007A  
                       i2u236_41 0076                         i2u175_40 1F96  
                       i2u175_41 1F92                         _PIR0bits 000E33  
                       i2u176_40 1FAC                         i2u176_41 1FA8  
                       i2u177_40 1FC2                         i2u177_41 1FBE  
               ?_initDCmotorsPWM 0011                        _wall_coef 004C  
                      _wait_time 004A                         _SSP2CON2 000EDA  
                 ??_turnLeftLong 0028                         _SSP2STAT 000ED8  
             set_led_color@color 0011                       ?_get_state 0011  
      __end_of_I2C_2_Master_Idle 20D2        __end_of_I2C_2_Master_Init 20AA  
      __end_of_I2C_2_Master_Read 200E                ___wmul@multiplier 0011  
      __end_of_I2C_2_Master_Stop 2198                     setMotorPWM@m 001E  
    I2C_2_Master_Write@data_byte 0012                    _movement_list 0200  
                      main@state 01AA                ??_color_read_Blue 0017  
                  ??_return_back 0032                  _calibrate_black 12BA  
        TimedfullSpeedAhead@time 0028                        _turnRight 116A  
                _calibrate_white 1780                ___lmul@multiplier 0011  
                      copy_data0 18E2                        copy_data1 1902  
                      copy_data2 1922                   ?_set_led_color 0011  
  __end_of_I2C_2_Master_RepStart 21AC               color_read_Blue@tmp 001A  
            __end_of_setMotorPWM 1010                         _Red_rule 009C  
           i2_I2C_2_Master_Start 21B6             i2_I2C_2_Master_Write 2178  
                       __Hrparam 0000                         __Lrparam 0000  
    __end_ofi2_I2C_2_Master_Idle 20FA      __end_ofi2_I2C_2_Master_Read 2050  
     __end_of_get_color_distance 0EA4      __end_ofi2_I2C_2_Master_Stop 21B6  
                 _get_color_code 05E8                       _ANSELDbits 000EA7  
                     _ANSELFbits 000EB4                       _T0CON0bits 000FD5  
                     _T0CON1bits 000FD6         ?i2_I2C_2_Master_RepStart 0001  
                ___lwdiv@divisor 0019                  ___lwdiv@counter 001B  
                     ?_turnRight 0024                         __ptext10 13F8  
                       __ptext11 2120                         __ptext20 218E  
                       __ptext12 1780                         __ptext21 2198  
                       __ptext13 12BA                         __ptext30 116A  
                       __ptext22 21A2                         __ptext14 1F44  
                       __ptext31 1658                         __ptext23 1FCC  
                       __ptext15 1CDA                         __ptext32 1010  
                       __ptext24 20AA                         __ptext16 1D2A  
                       __ptext41 1C80                         __ptext33 1E6A  
                       __ptext25 2080                         __ptext17 1D7A  
                       __ptext50 21D0                         __ptext42 1F88  
                       __ptext34 19FC                         __ptext26 1EFC  
                       __ptext18 1DCA                         __ptext43 1E1A  
                       __ptext35 1A70                         __ptext27 2140  
                       __ptext19 2160                         __ptext44 2178  
                       __ptext36 0EA4                         __ptext28 00A2  
                       __ptext45 21AC                         __ptext37 20FA  
                       __ptext29 1530                         __ptext46 21B6  
                       __ptext38 1AE4                         __ptext47 21C0  
                       __ptext39 216C                         __ptext48 200E  
                       __ptext49 20D2                     _SSP2CON1bits 000ED9  
                   _SSP2CON2bits 000EDA                  ??_RobotMovement 0034  
            __end_of_return_back 0B9A                       turnLeft@mL 0024  
                     turnLeft@mR 0026            ?i2_I2C_2_Master_Start 0001  
                 turnRightLong@i 002A            ?i2_I2C_2_Master_Write 0001  
                  turnLeftLong@i 002A            __end_of_turnRightLong 1658  
                       _moveBack 19FC                       turnRight@i 002C  
                     turnRight@k 002A                         isa$xinst 000000  
                       int$flags 004E           __end_of_get_color_code 0996  
        __end_of_calibrate_black 13F8                         _turnLeft 1010  
                    ??_get_state 0013          __end_of_calibrate_white 182A  
                     _INTCONbits 000FF2                ??i2_set_led_color 0003  
                    _setMotorPWM 0EA4                    _get_led_color 000000  
                ??_set_led_color 0013             __end_of_turnLeftLong 1780  
                       intlevel2 0000                 ___lldiv@dividend 001D  
               ??_fullSpeedAhead 0028                        turnLeft@i 002C  
                      turnLeft@k 002A                  ?_get_color_code 0033  
               _color_click_init 13F8  __end_ofi2_I2C_2_Master_RepStart 21CA  
         _wall_detection_counter 0048                       _SSP2DATPPS 000E1D  
               ___lldiv@quotient 0025                       _SSP2CLKPPS 000E1C  
         set_wall_detection@mode 000C                      _return_back 0996  
                    ??_turnRight 0028      __end_of_TimedfullSpeedAhead 1AE4  
         ??i2_I2C_2_Master_Start 0002           ??i2_I2C_2_Master_Write 0002  
            RobotMovement@i_1278 0038  
